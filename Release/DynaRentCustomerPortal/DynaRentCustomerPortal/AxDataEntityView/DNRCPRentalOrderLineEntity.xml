<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCPRentalOrderLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRCPRentalOrderLineEntity extends common
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, InventDim):
                DataEntityDataSourceRuntimeContext lineCtx = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, SalesLine));
                SalesLine line = lineCtx.getBuffer();

                ret = InventDim::find(line.InventDimId);
                break;

            case dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, LogisticsPostalAddressBaseEntity):
                ret = TradeEntitySpecificDeliveryAddress::findLogisticsPostalAddressBaseEntityDataSource();
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, LogisticsPostalAddressBaseEntity):
                if (_dataSourceCtx.isAnyEntityFieldSet(this))
                {
                    this.TradeEntitySpecificDeliveryAddress::mapLogisticsPostalAddressBaseEntityDataSourceToEntity(_dataSourceCtx);
                }

                break;
        }

        super(_entityCtx, _dataSourceCtx);

        guid blankGuid; // the default value is used as a check below:

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, SalesLine):
                SalesLine line = _dataSourceCtx.getBuffer();
                switch (_entityCtx.getDatabaseOperation())
                {
                    case DataEntityDatabaseOperation::Insert:
                        if (this.InventoryLotId && this.isFieldSet(fieldNum(DNRCPRentalOrderLineEntity, InventoryLotId)))
                        {
                            // Without skipping this validation, validateField will fail on the mapped field.
                            this.skipDataSourceValidateField(fieldNum(DNRCPRentalOrderLineEntity, InventoryLotId), true);
                        }
                        line.SkipAssignInventTransId = NoYes::Yes;
                        SalesTable salesTable = SalesTable::find(this.SalesOrderNumber);
                        line.CustAccount = salesTable.CustAccount;
                        line.CustGroup = salesTable.CustGroup;
                        if(line)
                        {
                            RORRentalLineEditorForm::createSupplementaryItemsLines(line);
                        }
                        // Continue to fall through to next case:
                        this.skipDataSourceValidateField(fieldNum(DNRCPRentalOrderLineEntity, DNRSalesType), true);

                    case DataEntityDatabaseOperation::Update:
                        // Set the correct inventDimId on the table buffer.

                        line.parmQuantityErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethods::acceptUserInputWithWarning());
                        Line.SalesType  = this.DNRSalesType;
                        line.setStockedProduct();
                        line.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId();
                        line.AutoCreateInterCompanyOrders = NoYes::Yes;

                        if (this.scopeIdentifier() != blankGuid)
                        {
                            // And propagate the scopeIdentifier to the datasource:
                            line.scopeIdentifier(this.scopeIdentifier());
                        }
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, SalesLine))
        {
            SalesLine salesLine = _dataSourceCtx.getBuffer();
            this.TradeEntitySpecificDeliveryAddress::mapSavedPostalAddressToEntity(_entityCtx,  salesLine.DeliveryPostalAddress);
            this.InventInventoryDimensionEntityFieldsMapping::initFromInventDim(salesLine.inventDim());
            this.mapDefaultLedgerDimensionFromSalesLineToEntity(_entityCtx, salesLine);
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        if (!SalesLine::findInventTransId(this.InventoryLotId).checkDelete(true, true))
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteSalesLineDataSource</Name>
				<Source><![CDATA[
    private void validateWriteSalesLineDataSource(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        SalesLine salesLine = _dataSourceCtx.getBuffer() as SalesLine;

        boolean isValid = true;

        if (!isValid)
        {
            _dataSourceCtx.throwValidateWriteFailed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressPartyRecId</Name>
				<Source><![CDATA[
   public RecId deliveryAddressPartyRecId()
    {
        return SalesTable::find(this.SalesOrderNumber).custTable_CustAccount().Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryAddressOrderSpecificComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str isDeliveryAddressOrderSpecificComputedColumnDefinition()
    {
        // The <c>IsDeliveryAddressOrderSpecific</c> field is only designed for import scenarios
        // so we will always return 'No' for export scnearios to save performance.
        return SysComputedColumn::returnLiteral(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCheckFailed</Name>
				<Source><![CDATA[
    private boolean allowEditCheckFailed(FieldLabel _fieldLabel)
    {
        return checkFailed(strFmt("@ApplicationFoundation:DataEntitiesNoAllowEdit", _fieldLabel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldModified</Name>
				<Source><![CDATA[
    private boolean isFieldModified(FieldId _fieldId)
    {
        return DataEntityDataSourceRuntimeContextAppSuite_Extension::isFieldModified(this, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDefaultLedgerDimensionFromSalesLineToEntity</Name>
				<Source><![CDATA[
    private void mapDefaultLedgerDimensionFromSalesLineToEntity(DataEntityRuntimeContext _entityCtx, SalesLine _salesLine)
    {
        DataEntityDataSourceRuntimeContext dimensionContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, DefaultDimensionDAVS));
        DimensionSetEntity dimensionSetEntity = dimensionContext ? dimensionContext.getBuffer() : null;

        if (dimensionSetEntity.RecId != _salesLine.DefaultDimension)
        {
            this.DefaultLedgerDimensionDisplayValue = DimensionSetEntity::find(_salesLine.DefaultDimension).DisplayValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCreateAutoChargesComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>SkipCreateAutoCharges</c> field is only designed for import scenarios
    /// so we will always return 'Yes' for export scenarios to save performance.
    /// </summary>
    /// <returns>Yes</returns>
    private static str skipCreateAutoChargesComputedColumnDefinition()
    {
        return SysComputedColumn::returnLiteral(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query salesLineQuery = new Query();

        var salesLineDS = salesLineQuery.addDataSource(tableNum(SalesLine));
        salesLineDS.addRange(fieldNum(SalesLine, SalesType)).value(queryValue(SalesType::RORRental));

        var ecoResCategoryDS = salesLineDS.addDataSource(tableNum(EcoResCategory));
        ecoResCategoryDS.addLink(fieldNum(SalesLine, SalesCategory), fieldNum(EcoResCategory, RecId));
        ecoResCategoryDS.joinMode(JoinMode::OuterJoin);
        ecoResCategoryDS.fetchMode(QueryFetchMode::One2One);

        var defaultDimensionDS = salesLineDS.addDataSource(tableNum(DimensionAttributeValueSet));
        defaultDimensionDS.addLink(fieldNum(SalesLine, DefaultDimension), fieldNum(DimensionAttributeValueSet, RecId));
        defaultDimensionDS.joinMode(JoinMode::OuterJoin);
        defaultDimensionDS.fetchMode(QueryFetchMode::One2One);

        var ledgerDimensionDS = salesLineDS.addDataSource(tableNum(DimensionAttributeValueCombination));
        ledgerDimensionDS.addLink(fieldNum(SalesLine, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
        ledgerDimensionDS.joinMode(JoinMode::OuterJoin);
        ledgerDimensionDS.fetchMode(QueryFetchMode::One2One);

        // InventDim should not change.

        LogisticsPostalAddressBaseEntityChangeTrackingHelper::addPostalAddressBasedOnAddressRecIdLink(salesLineDS, fieldNum(SalesLine, DeliveryPostalAddress));

        var ecoResCategory_IntrastatCommodityDS = salesLineDS.addDataSource(tableNum(EcoResCategory));
        ecoResCategory_IntrastatCommodityDS.addLink(fieldNum(SalesLine, IntrastatCommodity), fieldNum(EcoResCategory, RecId));
        ecoResCategory_IntrastatCommodityDS.joinMode(JoinMode::OuterJoin);
        ecoResCategory_IntrastatCommodityDS.fetchMode(QueryFetchMode::One2One);

        return salesLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRCPRentalOrderLineEntity, SalesLine):
                SalesLine salesLine = _dataSourceCtx.getBuffer();
                salesLine.SalesType = this.DNRSalesType;
                _dataSourceCtx.setBuffer(salesLine);
                SalesTable salesTable = SalesTable::find(this.SalesOrderNumber);

                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_entityCtx"></param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(SalesLine, InventTransId), true);
        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void insert()
    {
        super();

        if(this.RecId && this.DNRTradeType == RORTradeType::Rental)
        {
            RORRentalLineEditorForm::createSupplementaryItemsLines(SalesLine::findRecId(this.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipNumberSequenceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_value"></param>
    /// <returns></returns>
    public boolean skipNumberSequenceCheck(boolean _value)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DNRCustomerPortal</ConfigurationKey>
	<DeveloperDocumentation>@DNR:DNRRentalLineDoc</DeveloperDocumentation>
	<FormRef>RORSalesTable</FormRef>
	<Label>@DNR:PortalRentalOrderLinesEntity</Label>
	<Tags>DNRCPDocument</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DNRCPRentalOrderLineStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DNRCPRentalOrderLines</PublicCollectionName>
	<PublicEntityName>DNRCPRentalOrderLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOrderNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryLotId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesOrderNumber</Name>
			<DataField>SalesId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryLotId</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>InventTransId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesOrderLineStatus</Name>
			<DataField>SalesStatus</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<DataField>ItemId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineAmount</Name>
			<DataField>LineAmount</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDescription</Name>
			<DataField>Name</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedReceiptDate</Name>
			<DataField>ReceiptDateRequested</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesPrice</Name>
			<DataField>SalesPrice</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderedSalesQuantity</Name>
			<DataField>SalesQty</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedShippingDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ShippingDateRequested</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultLedgerDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeId</Name>
			<DataField>InventSizeId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleId</Name>
			<DataField>InventStyleId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderLineReference</Name>
			<Mandatory>No</Mandatory>
			<DataField>OrderLineReference_NO</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormattedDelveryAddress</Name>
			<DataField>Address</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLatitude</Name>
			<DataField>Latitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLongitude</Name>
			<DataField>Longitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryValidFrom</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidFrom</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryValidTo</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidTo</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineCreationSequenceNumber</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>LineCreationSequenceNumber</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDisc</Name>
			<DataField>LineDisc</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LinePercent</Name>
			<DataField>LinePercent</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CountryRegionId</Name>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>InventoryLotId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>SalesLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>SalesLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResCategory</Name>
								<Field>SalesCategory</Field>
								<JoinRelationName>EcoResCategory</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DefaultDimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerDimensionDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LedgerDimensionDAVC</Name>
								<Field>LedgerDimension</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesLineForeignTradeCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>SalesLineForeignTradeCategory</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>SalesLine</JoinDataSource>
								<JoinRelationName>SalesLine</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDim</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDim</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>SalesLine</JoinDataSource>
								<JoinRelationName>InventDim</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsPostalAddressBaseEntity</Name>
						<ApplyDateFilter>Yes</ApplyDateFilter>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LogisticsPostalAddressBaseEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DeliveryPostalAddress</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>AddressRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory_IntrastatCommodity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResCategory_IntrastatCommodity_PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>IntrastatCommodity</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxWithholdItemGroupHeading_TH</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>TaxWithholdItemGroupHeading_TH</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>SalesLine</JoinDataSource>
								<JoinRelationName>TaxWithholdItemGroupHeading_TH</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CreditNoteReasonTableRef</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ReasonTableRef</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>SalesLine</JoinDataSource>
								<JoinRelationName>ReasonTableRef</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesLine_Intrastat</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>SalesLine_Intrastat</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>SalesLine</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>SalesType</Name>
						<Field>SalesType</Field>
						<Value>SalesType::RORRental</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>