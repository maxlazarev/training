<?xml version='1.0' encoding='utf-8'?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWorkOrderAdditionalNotesEntity</Name>
	<SourceCode>
		<Declaration>
public class DNRWorkOrderAdditionalNotesEntity extends common
{
    //public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    //{
    //    if (_dataSourceCtx.name() == dataEntityDataSourceStr(DNRWorkOrderAdditionalNotesEntity, DNRAdditionalNoteTable))
    //    {
    //        DNRAdditionalNoteTable  additionalNotesTable = _dataSourceCtx.getBuffer() as DNRAdditionalNoteTable;

    //        additionalNotesTable.RefTableId = tableNum(WPPWorkOrderLine);

    //        _dataSourceCtx.setBuffer(additionalNotesTable);    
    //    }

    //    super(_entityCtx, _dataSourceCtx);
    //}

    //public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    //{
    //    boolean ret;

    //    if (_dataSourceCtx.name() == dataEntityDataSourceStr(DNRWorkOrderAdditionalNotesEntity, DNRAdditionalNoteTable))
    //    {
    //        WPPWorkOrderLine        workOrderLineLocal   = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRWorkOrderAdditionalNotesEntity, WPPWorkOrderLine)).getBuffer() as WPPWorkOrderLine;

    //        if (workOrderLineLocal)
    //        {
    //            DNRAdditionalNoteTable  additionalNotesTable = _dataSourceCtx.getBuffer() as DNRAdditionalNoteTable;

    //            additionalNotesTable.RefTableId = workOrderLineLocal.TableId;
    //            additionalNotesTable.RefRecId   = workOrderLineLocal.RecId;

    //            _dataSourceCtx.setBuffer(additionalNotesTable);
    //        }

    //    }

    //    ret = super(_entityCtx, _dataSourceCtx);

    //    return ret;
    //}

    //public void initValue()
    //{
    //    super();

    //    this.RefTableId = tableNum(WPPWorkOrderLine);
    //}

    //public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    //{
    //    boolean ret;

    //    if (_dataSourceCtx.name() == dataEntityDataSourceStr(DNRWorkOrderAdditionalNotesEntity, DNRAdditionalNoteTable))
    //    {
    //        DNRAdditionalNoteTable  additionalNotesTable = _dataSourceCtx.getBuffer() as DNRAdditionalNoteTable;

    //        additionalNotesTable.RefTableId = tableNum(WPPWorkOrderLine);

    //        _dataSourceCtx.setBuffer(additionalNotesTable);
    //    }

    //    ret = super(_entityCtx, _dataSourceCtx);

    //    return ret;
    //}

    ///// &lt;summary&gt;
    /////
    ///// &lt;/summary&gt;
    ///// &lt;param name = "_entityCtx"&gt;&lt;/param&gt;
    ///// &lt;param name = "_dataSourceCtx"&gt;&lt;/param&gt;
    //public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    //{
    //    if (_dataSourceCtx.name() == dataEntityDataSourceStr(DNRWorkOrderAdditionalNotesEntity, DNRAdditionalNoteTable))
    //    {
    //        DNRAdditionalNoteTable  additionalNotesTable = _dataSourceCtx.getBuffer() as DNRAdditionalNoteTable;

    //        if (additionalNotesTable.RefTableId != tableNum(WPPWorkOrderLine))
    //        {
    //            return;
    //        }
    //    }

    //    super(_entityCtx, _dataSourceCtx);
    //}

}
</Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source>
    public void insert()
    {
        throw Error ('@DNR:InsertNotSupported');
    }

</Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source>
    public void update()
    {
        DNRAdditionalNoteTable additionalNotesTable;
        WPPWorkOrderLine        workOrderLine;

        select firstonly TableId, RecId from workOrderLine
        where workOrderLine.WorkOrderId == this.WorkOrderId
        &amp;&amp;    workOrderLine.TaskId      == this.TaskId
        &amp;&amp;    workOrderLine.LineNumber  == this.LineNumber
            outer join additionalNotesTable
            where additionalNotesTable.RefTableId == workOrderLine.TableId
            &amp;&amp;    additionalNotesTable.RefRecId   == workOrderLine.RecId;

        if (additionalNotesTable)
        {
            ttsbegin;

            additionalNotesTable.selectForUpdate(true);
            additionalNotesTable.InternalNote       = this.InternalNote;
            additionalNotesTable.InvoiceNote        = this.InvoiceNote;
            additionalNotesTable.LocationNote       = this.LocationNote;
            additionalNotesTable.ObjectNote         = this.ObjectNote;
            additionalNotesTable.OrderNote          = this.OrderNote;
            additionalNotesTable.RouteNote          = this.RouteNote;
            additionalNotesTable.TerminationNote    = this.TerminationNote;
            additionalNotesTable.update();

            ttscommit;
        }
        else
        {
            ttsbegin;

            additionalNotesTable.InternalNote       = this.InternalNote;
            additionalNotesTable.InvoiceNote        = this.InvoiceNote;
            additionalNotesTable.LocationNote       = this.LocationNote;
            additionalNotesTable.ObjectNote         = this.ObjectNote;
            additionalNotesTable.OrderNote          = this.OrderNote;
            additionalNotesTable.RouteNote          = this.RouteNote;
            additionalNotesTable.TerminationNote    = this.TerminationNote;
            additionalNotesTable.RefTableId         = workOrderLine.TableId;
            additionalNotesTable.RefRecId           = workOrderLine.RecId;
            additionalNotesTable.insert();

            ttscommit;
        }
    }

</Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source>
    public void postLoad()
    {
        super();

        DNRAdditionalNoteTable additionalNotesTable;
        WPPWorkOrderLine        workOrderLine;

        select firstonly workOrderLine
        where workOrderLine.WorkOrderId == this.WorkOrderId
        &amp;&amp;    workOrderLine.TaskId      == this.TaskId
        &amp;&amp;    workOrderLine.LineNumber  == this.LineNumber
            join additionalNotesTable
            where additionalNotesTable.RefTableId == workOrderLine.TableId
            &amp;&amp;    additionalNotesTable.RefRecId   == workOrderLine.RecId;

        if (additionalNotesTable)
        {
            this.InternalNote    = additionalNotesTable.InternalNote;
            this.InvoiceNote     = additionalNotesTable.InvoiceNote;
            this.LocationNote    = additionalNotesTable.LocationNote;
            this.ObjectNote      = additionalNotesTable.ObjectNote;
            this.OrderNote       = additionalNotesTable.OrderNote;
            this.RouteNote       = additionalNotesTable.RouteNote;
            this.TerminationNote = additionalNotesTable.TerminationNote;
        }
    }

</Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DNRDeletedObjects01_2020</ConfigurationKey><DeveloperDocumentation>@DNR:AdditionalNote</DeveloperDocumentation>
	<Label>@DNR10187</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DNRWorkOrderAdditionalNotesStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DNRWorkOrderLineAdditionalNotes</PublicCollectionName>
	<PublicEntityName>DNRWorkOrderLineAdditionalNote</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>WorkOrderId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>WorkOrderId</DataField>
			<DataSource>WPPWorkOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>TaskId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>TaskId</DataField>
			<DataSource>WPPWorkOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LineNumber</DataField>
			<DataSource>WPPWorkOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>InternalNote</Name>
			<Label>@DNR4443</Label>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>InvoiceNote</Name>
			<Label>@DNR4360</Label>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>LocationNote</Name>
			<Label>@DNR4331</Label>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ObjectNote</Name>
			<Label>@DNR4425</Label>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OrderNote</Name>
			<Label>@DNR4427</Label>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>RouteNote</Name>
			<Label>@DNR4424</Label>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TerminationNote</Name>
			<Label>@DNR4426</Label>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>WorkOrderId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TaskId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source>
[Query]
public class Metadata extends QueryRun
{
}
</Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WPPWorkOrderLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>WPPWorkOrderLine</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>