<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRentalContractLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRRentalContractLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
    
        RAGContractLine contractLine = _dataSourceCtx.getBuffer();

        contractLine.Value = this.getImportValueString(this.AgreementType, this.ValueString, this.Seperator);

        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
    
        RAGContractLine contractLine = _dataSourceCtx.getBuffer();

        contractLine.Value = this.getImportValueString(this.AgreementType, this.ValueString, this.Seperator);

        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportValueString</Name>
				<Source><![CDATA[
    private container getImportValueString(RAGAgreementType _agreementType, String255 _valueString, str 1 _seperator)
    {
        Num                         priceRateCode;
        UnitOfMeasure               unitOfMeasure;
        PriceCur                    price;
        Qty                         minQty, maxQty;
        String255                   retValueString;
        NoYes                       noYes1, noYes2, noYes3;
        RORInsuranceCalcBasis       insuranceCalcBasis;
        DiscPct                     discPct;
        Percent                     pct;
        container                   retValueCon;
        ;

        switch(_agreementType)
        {
            case RAGAgreementType::GrossPrice:
                [ price, priceRateCode ] = str2con(_valueString, _seperator);
                unitOfMeasure = UnitOfMeasure::findBySymbol(strLTrim(priceRateCode));
                retValueCon = [ price, unitOfMeasure.RecId ];
                break;

            case RAGAgreementType::NetPrice:
                [ price, priceRateCode ] = str2con(_valueString, _seperator);
                unitOfMeasure = UnitOfMeasure::findBySymbol(strLTrim(priceRateCode));
                retValueCon = [ price, unitOfMeasure.RecId ];
                break;

            case RAGAgreementType::MinQty:
                [ minQty, priceRateCode ] = str2con(_valueString, _seperator);
                unitOfMeasure = UnitOfMeasure::findBySymbol(strLTrim(priceRateCode));
                retValueCon = [ minQty, unitOfMeasure.RecId ];
                break;

            case RAGAgreementType::MaxQty:
                [ maxQty, priceRateCode ] = str2con(_valueString, _seperator);
                unitOfMeasure = UnitOfMeasure::findBySymbol(strLTrim(priceRateCode));
                retValueCon = [ maxQty, unitOfMeasure.RecId ];
                break;

            case RAGAgreementType::Rigging:
                [ price, priceRateCode, minQty, maxQty ] = str2con(_valueString, _seperator);
                unitOfMeasure = UnitOfMeasure::findBySymbol(strLTrim(priceRateCode));
                retValueCon = [ price, unitOfMeasure.RecId, minQty, maxQty ];
                break;
                
            case RAGAgreementType::Insurance:
            case RAGAgreementType::PriceTier:
            case RAGAgreementType::Discount:
            case RAGAgreementType::InsurancePct:
            case RAGAgreementType::Transport:
            case RAGAgreementType::ReturnTransport:
            case RAGAgreementType::TransportTier:
            case RAGAgreementType::Warranty:
                retValueCon = str2con(_valueString, _seperator);
                NoYes active = (conPeek(retValueCon, 2) == "Yes" || conPeek(retValueCon, 2) == " Yes" || conPeek(retValueCon, 2) == "1" || conPeek(retValueCon, 2) == " 1") ? 
                                NoYes::Yes : 
                                NoYes::No;
                retValueCon = [conPeek(retValueCon, 1), active];
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                DNRRentalContractLineEntity::constructImportValueDelegate(_agreementType, _valueString, _seperator, result);
                
                if(result.hasResult())
                {
                    retValueCon = result.result();
                }
                else
                {
                    throw error (strFmt("@DNR:DataMgmtRAGTypeNotSupported", _agreementType));
                }
        }

        return retValueCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructImportValueDelegate</Name>
				<Source><![CDATA[
    static delegate void constructImportValueDelegate(RAGAgreementType _agreementType, String255 _valueString, str 1 _seperator, EventHandlerResult _eventHandlerResult) { }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueString</Name>
				<Source><![CDATA[
    private String255 getValueString(RAGAgreementType _agreementType, Container _valueCon)
    {
        Num                         priceRateCode;
        UnitOfMeasure               unitOfMeasure;
        PriceCur                    price;
        Qty                         minQty, maxQty;
        String255                   retValueString;
        NoYes                       noYes1, noYes2, noYes3;
        RORInsuranceCalcBasis       insuranceCalcBasis;
        DiscPct                     discPct;
        Percent                     pct;
        RecId                       recId;
        ;
        
        switch(_agreementType)
        {
            case RAGAgreementType::GrossPrice:
                [ price, recId ] = _valueCon;
                unitOfMeasure = UnitOfMeasure::find(recId);
                retValueString = strFmt("%1, %2", price, unitOfMeasure.Symbol);
                break;

            case RAGAgreementType::NetPrice:
                [ price, recId ] = _valueCon;
                unitOfMeasure = UnitOfMeasure::find(recId);
                retValueString = strFmt("%1, %2", price, unitOfMeasure.Symbol);
                break;

            case RAGAgreementType::MinQty:
                [ minQty, recId ] = _valueCon;
                unitOfMeasure = UnitOfMeasure::find(recId);
                retValueString = strFmt("%1, %2", minQty, unitOfMeasure.Symbol);
                break;

            case RAGAgreementType::MaxQty:
                [ maxQty, recId ] = _valueCon;
                unitOfMeasure = UnitOfMeasure::find(recId);
                retValueString = strFmt("%1, %2", maxQty, unitOfMeasure.Symbol);
                break;

            case RAGAgreementType::Rigging:
                [ price, recId, minQty, maxQty ] = _valueCon;
                unitOfMeasure = UnitOfMeasure::find(recId);
                retValueString = strFmt("%1, %2, %3, %4", price, unitOfMeasure.Symbol, minQty, maxQty);
                break;
                
            case RAGAgreementType::Insurance:
                [ noYes1, noYes2, insuranceCalcBasis ] = _valueCon;
                retValueString = strFmt("%1, %2, %3", noYes1, noYes2, insuranceCalcBasis);
                break;
                
            case RAGAgreementType::PriceTier:
                [ price, noYes1 ] = _valueCon;
                retValueString = strFmt("%1, %2", price, noYes1);
                break;
    
            case RAGAgreementType::Discount:
                [ discPct ] = _valueCon;
                retValueString = strFmt("%1", discPct);
                break;
            

            case RAGAgreementType::InsurancePct:
                [ pct ] = _valueCon;
                retValueString = strFmt("%1", pct);
                break;

            case RAGAgreementType::Transport:
                [ noYes1, price, minQty, maxQty, noYes2, noYes3] = _valueCon;
                retValueString = strFmt("%1, %2, %3, %4, %5, %6", noYes1, price, minQty, maxQty, noYes2, noYes3);
                break;

            case RAGAgreementType::ReturnTransport:
                [ noYes1, price, minQty, maxQty, noYes2, noYes3 ] = _valueCon;
                retValueString = strFmt("%1, %2, %3, %4, %5, %6", noYes1, price, minQty, maxQty, noYes2, noYes3);
                break;

            case RAGAgreementType::TransportTier:
                [ price, noYes1 ] = _valueCon;
                retValueString = strFmt("%1, %2", price, noYes1);
                break;

            case RAGAgreementType::Warranty:
                [ noYes1, price ] = _valueCon;
                retValueString = strFmt("%1, %2", noYes1, price);
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                DNRRentalContractLineEntity::constructExportValueDelegate(_agreementType, _valueCon, result);
                
                if(result.hasResult())
                {
                    retValueString = result.result();
                }
                else
                {
                    throw error (strFmt("@DNR:DataMgmtRAGTypeNotSupported", _agreementType));
                }

        }
            
        return retValueString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExportValueDelegate</Name>
				<Source><![CDATA[
    static delegate void constructExportValueDelegate(RAGAgreementType _agreementType, container _valueCon, EventHandlerResult _eventHandlerResult) { }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        RAGContractLine contractLine;

        select firstonly contractLine
        where contractLine.RecId == this.ContractLineRecId;

        if (contractLine)
        {
            this.ValueString = this.getValueString(contractLine.AgreementType, contractLine.Value);
        }

        if (this.Seperator == "")
        {
            this.Seperator = ',';
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DNRDeletedObjects_DynaRentDataManagement</ConfigurationKey>
	<DeveloperDocumentation>Exports/imports rental agreement lines</DeveloperDocumentation>
	<Label>@DNR6598</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DNRRentalContractLineStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DNRRentalContractLines</PublicCollectionName>
	<PublicEntityName>DNRRentalContractLine</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AgreementType</Name>
			<DataField>AgreementType</DataField>
			<DataSource>RAGContractLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContractId</Name>
			<DataField>ContractId</DataField>
			<DataSource>RAGContractLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContractLevel</Name>
			<DataField>ContractLevel</DataField>
			<DataSource>RAGContractLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumOfTierPeriods</Name>
			<DataField>NumOfTierPeriods</DataField>
			<DataSource>RAGContractLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RentalTypeRelation</Name>
			<DataField>RentalTypeRelation</DataField>
			<DataSource>RAGContractLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TierPeriod</Name>
			<DataField>TierPeriod</DataField>
			<DataSource>RAGContractLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ValueString</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Value</Label>
			<IsComputedField>No</IsComputedField>
			<StringSize>500</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Seperator</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Seperator</Label>
			<IsComputedField>No</IsComputedField>
			<StringSize>1</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContractLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>RecId</DataField>
			<DataSource>RAGContractLine</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AgreementType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ContractId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ContractLevel</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>NumOfTierPeriods</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>RentalTypeRelation</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TierPeriod</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ContractLineRecId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RAGContractLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RAGContractLine</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>