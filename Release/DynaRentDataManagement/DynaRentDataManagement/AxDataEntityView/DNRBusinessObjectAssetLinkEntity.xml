<?xml version='1.0' encoding='utf-8'?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRBusinessObjectAssetLinkEntity</Name>
	<SourceCode>
		<Declaration>
public class DNRBusinessObjectAssetLinkEntity extends common
{
}
</Declaration>
		<Methods>
			<Method>
				<Name>persistEntity</Name>
				<Source>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(DNRBusinessObjectAssetLinkEntity, AssetId), true);
        super(_entityCtx);
    }

</Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (ret)
        {
            AssetTable assetTable;
            AssetBook  assetBook;

            select firstonly crosscompany RecId from assetTable
            where assetTable.AssetId    == this.AssetId
            &amp;&amp;    assetTable.DataAreaId == this.AssetCompanyId;

            if (!assetTable)
            {
                ret = checkFailed(strFmt("@DNR:DataMgmtFANotFoundInCompany", this.AssetId, this.AssetCompanyId));
            }
        }

        if (ret)
        {
            BOBObjectAssetLog logSelect;

            select firstonly AssetId from logSelect
            where logSelect.ObjectId       == this.ObjectId
            &amp;&amp;    logSelect.AssetCompanyId == this.AssetCompanyId
            &amp;&amp;    (  (this.ValidFrom &gt;= logSelect.validFrom &amp;&amp; (!logSelect.ValidTo || this.ValidFrom &lt;= logSelect.ValidTo))
                  || (this.ValidTo   &gt;= logSelect.ValidFrom &amp;&amp; (!logSelect.ValidTo || this.ValidTo   &lt;= logSelect.ValidTo))
                );
                
            if (logSelect.AssetId)
            {
                ret = checkFailed(strFmt("@DNR:DataMgmtBOFALinkValidationErrLinkExists", this.ObjectId, logSelect.AssetId, this.AssetCompanyId));
            }   
        }

        if (ret)
        {
            BOBObjectAssetLog logSelect;

            select firstonly ObjectId from logSelect
            where logSelect.AssetId        == this.AssetId
            &amp;&amp;    logSelect.AssetCompanyId == this.AssetCompanyId
            &amp;&amp;    (  (this.ValidFrom &gt;= logSelect.validFrom &amp;&amp; (!logSelect.ValidTo || this.ValidFrom &lt;= logSelect.ValidTo))
                  || (this.ValidTo   &gt;= logSelect.ValidFrom &amp;&amp; (!logSelect.ValidTo || this.ValidTo   &lt;= logSelect.ValidTo))
                  );
   
            if (logSelect.AssetId)
            {
                ret = checkFailed(strFmt("@DNR:DataMgmtBOFALinkValidationErrLinkExists", logSelect.ObjectId, this.AssetId, this.AssetCompanyId));
            }
        }

        return ret;
    }

</Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DNRDeletedObjects_DynaRentDataManagement</ConfigurationKey><Label>@DNR:DataMgmtBOFALinkEntity</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DNRBusinessObjectAssetLinkStaging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DNRBusinessObjectAssetLinks</PublicCollectionName>
	<PublicEntityName>DNRBusinessObjectAssetLink</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>ObjectId</Name>
			<DataField>ObjectId</DataField>
			<DataSource>BOBObjectAssetLog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>AssetCompanyId</Name>
			<DataField>AssetCompanyId</DataField>
			<DataSource>BOBObjectAssetLog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>AssetId</Name>
			<DataField>AssetId</DataField>
			<DataSource>BOBObjectAssetLog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>ValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>BOBObjectAssetLog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>ValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>BOBObjectAssetLog</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ObjectId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AssetCompanyId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AssetId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ValidFrom</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ValidTo</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source>
[Query]
public class Metadata extends QueryRun
{
}
</Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BOBObjectAssetLog</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BOBObjectAssetLog</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>