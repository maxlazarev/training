<?xml version='1.0' encoding='utf-8'?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRDynamicFieldGroupEntity</Name>
	<SourceCode>
		<Declaration>
public class DNRDynamicFieldGroupEntity extends common
{
}
</Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DNRDynamicFieldGroupEntity fieldGroupEntity = _entityCtx.getEntityRecord();

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (fieldGroupEntity.LookupValues)
        {
            if (fieldGroupEntity.LookupValueSeparator == '')
            {
                throw error ("Please provide Lookup value separator and try again");
            }

            container lookupValues = str2con(fieldGroupEntity.LookupValues, fieldGroupEntity.LookupValueSeparator);
            DFMFieldGroupContents fieldGroupContents;

            for (int i = 1; i &lt;= conlen(lookupValues); i ++)
            {
                if (!DFMFieldGroupContents::find(fieldGroupEntity.FieldGroupID, conPeek(lookupValues, i)))
                {
                    fieldGroupContents.clear();
                    fieldGroupContents.FieldGroupId = fieldGroupEntity.FieldGroupID;

                    if (!DFMFieldTable::find(conPeek(lookupValues, i)))
                    {
                        throw error (strFmt("Mapping field %1 is not found in the related table DFMFieldTable", conPeek(lookupValues, i)));
                    }

                    fieldGroupContents.FieldId = conPeek(lookupValues, i);
                    fieldGroupContents.insert();
                }
            }
        }

        return ret;
    }

</Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DNRDynamicFieldGroupEntity fieldGroupEntity = _entityCtx.getEntityRecord();

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (fieldGroupEntity.LookupValues)
        {
            if (fieldGroupEntity.LookupValueSeparator == '')
            {
                throw error ("Please provide Lookup value separator and try again");
            }

            container lookupValues = str2con(fieldGroupEntity.LookupValues, fieldGroupEntity.LookupValueSeparator);
            DFMFieldGroupContents fieldGroupContents;

            for (int i = 1; i &lt;= conlen(lookupValues); i ++)
            {
                if (!DFMFieldGroupContents::find(fieldGroupEntity.FieldGroupID, conPeek(lookupValues, i)))
                {
                    fieldGroupContents.clear();
                    fieldGroupContents.FieldGroupId = fieldGroupEntity.FieldGroupID;

                    if (!DFMFieldTable::find(conPeek(lookupValues, i)))
                    {
                        throw error (strFmt("Mapping field %1 is not found in the related table DFMFieldTable", conPeek(lookupValues, i)));
                    }

                    fieldGroupContents.FieldId = conPeek(lookupValues, i);
                    fieldGroupContents.insert();
                }
            }
        }

        return ret;
    }

</Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        DNRDynamicFieldGroupEntity fieldGroupEntity = _entityCtx.getEntityRecord();

        if (fieldGroupEntity.RecId)
        {
            DFMFieldGroupContents fieldGroupContents;
            Str 1000 lookupValues = '';
            Str 1 lookupSeparater = '#';

            while select FieldId from fieldGroupContents
                where fieldGroupContents.FieldGroupId == fieldGroupEntity.FieldGroupId
            {
                lookupValues = lookupValues + fieldGroupContents.FieldId + lookupSeparater;
            }

            if (lookupValues != '')
            {
                fieldGroupEntity.LookupValues = subStr(lookupValues, 1, (strLen(lookupValues)-1));
                fieldGroupEntity.LookupValueSeparator = lookupSeparater;
            }
        }
    }

</Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DNRDeletedObjects_DynaRentDataManagement</ConfigurationKey>
	<DeveloperDocumentation>@DNR:DNRDynamicFieldGroupsDoc</DeveloperDocumentation>
	<Label>@DNR:DataEntityFieldGroups</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DNRDynamicFieldGroupStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DNRDynamicFieldGroups</PublicCollectionName>
	<PublicEntityName>DNRDynamicFieldGroup</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>FieldGroupID</Name>
			<DataField>GroupId</DataField>
			<DataSource>DFMFieldGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>DFMFieldGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>LookupValues</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DFM3</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>1000</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField i:type="AxDataEntityViewUnmappedFieldString">
			<Name>LookupValueSeparator</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS23213</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>1</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>FieldGroupID</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source>
[Query]
public class Metadata extends QueryRun
{
}
</Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>DFMFieldGroup</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>DFMFieldGroup</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>