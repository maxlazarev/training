<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNREventDNRRentalOrderLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNREventDNRRentalOrderLineEntity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(DNRRentalOrderLineEntity), tableMethodStr(DNRRentalOrderLineEntity, insertEntityDataSource))]
    public static void insertEntityDataSource_pre(XppPrePostArgs _eventArgs)
    {
        DNRRentalOrderLineEntity            hostObject          = _eventArgs.getThis() as DNRRentalOrderLineEntity;
        DataEntityRuntimeContext            parmEntityCtx       = _eventArgs.getArg('_entityCtx') as DataEntityRuntimeContext;
        DataEntityDataSourceRuntimeContext  parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRRentalOrderLineEntity, RORRentalDateTimes):
                if(hostObject.DNRTradeType == RORTradeType::SalesPurch)
                {
                    parmDataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(DNRRentalOrderLineEntity), tableMethodStr(DNRRentalOrderLineEntity, insertEntityDataSource))]
    public static void insertEntityDataSource_post(XppPrePostArgs _eventArgs)
    {
        DNRRentalOrderLineEntity            hostObject          = _eventArgs.getThis() as DNRRentalOrderLineEntity;
        DataEntityRuntimeContext            parmEntityCtx       = _eventArgs.getArg('_entityCtx') as DataEntityRuntimeContext;
        DataEntityDataSourceRuntimeContext  parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRRentalOrderLineEntity, SalesLine):
                if (hostObject.DNRTradeType != RORTradeType::SalesPurch)
                {
                    DataEntityDataSourceRuntimeContext      entityCtxRDT            = parmEntityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRRentalOrderLineEntity, RORRentalDateTimes));
                    RORRentalDateTimes                      rentalDateTimes         = entityCtxRDT.getBuffer();
                    SalesLine                               rentalOrderLine         = parmEntityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRRentalOrderLineEntity, SalesLine)).getBuffer();
                    RORRentalDateTimes                      rentalDateTimesSelect   = RORRentalDateTimes::findReference(rentalOrderLine.TableId, rentalOrderLine.RecId, true);
                    RORRentalDateTimes                      rentalDateTimesParent;
                    SalesTable                              salesTable;

                    if (rentalDateTimesSelect)
                    {
                        rentalDateTimesSelect.initFromRentalDateTimes(rentalDateTimes);
                        rentalDateTimesSelect.RefTableId = rentalOrderLine.TableId;
                        rentalDateTimesSelect.RefRecId   = rentalOrderLine.RecId;

                        select firstonly rentalDateTimesParent
                        where rentalDateTimesParent.RefTableId == tableNum(SalesTable)
                            exists join salesTable
                            where salesTable.RecId == rentalDateTimesParent.RefRecId
                            &&    salesTable.SalesId == rentalOrderLine.SalesId;

                        rentalDateTimesSelect.SynchronizeFromParent = RORRentalDateTimes::canSyncFromParent(rentalDateTimesSelect, rentalDateTimesParent);
                
                        DataEntityDataSourceRuntimeContext dtctxRDT = parmEntityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRRentalOrderLineEntity, RORRentalDateTimes));

                        dtctxRDT.setBuffer(rentalDateTimesSelect);
                        dtctxRDT.skipValidateWrite(true);
                        dtctxRDT.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>