<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWorkOrderHeaderEntityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRWorkOrderHeaderEntityHelper
{
    DNRWorkOrderHeaderEntity workOrderHeaderEntity;
    WPPWorkOrderTable        workOrderTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createWorkOrder</Name>
				<Source><![CDATA[
    public static RecId createWorkOrder(DNRWorkOrderHeaderEntity _workOrderHeaderEntity)
    {
        RecId  recId;

        DNRWorkOrderHeaderEntityHelper  workOrderHeaderEntityHelper = new DNRWorkOrderHeaderEntityHelper(_workOrderHeaderEntity);
        recId = workOrderHeaderEntityHelper.insert();

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(DNRWorkOrderHeaderEntity _workOrderHeaderEntity)
    {
        workOrderHeaderEntity = _workOrderHeaderEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public RecId insert()
    {
        RecId                           recId;
        WPPWorkOrderTemplateId          templateId;    

        workOrderTable.clear();
        workOrderTable.initvalue();
        workordertable.WorkOrderId          = workOrderHeaderEntity.WorkOrderId  ? workOrderHeaderEntity.WorkOrderId : NumberSeq::newGetNum(WPPParameters::numRefWorkOrderId()).num();

        workOrderTable.CustVendAccountType  = workOrderHeaderEntity.CustVendAccountType;
        workOrderTable.modifiedField(fieldNum(WPPWorkOrderTable, CustVendAccountType));

        if (workOrderHeaderEntity.OrganizationParty || workOrderHeaderEntity.DirPartyBaseEntity_PartyNumber)
        {
            workOrderTable.OrganizationParty    = workOrderHeaderEntity.OrganizationParty
                                                    ? workOrderHeaderEntity.OrganizationParty
                                                    : DirPartyTable::findByNum(workOrderHeaderEntity.DirPartyBaseEntity_PartyNumber).RecId;
            workOrderTable.modifiedField(fieldNum(WPPWorkOrderTable, OrganizationParty));
        }

        workordertable.ProjGroupId          = workOrderHeaderEntity.ProjGroupId;
        workOrderTable.modifiedField(fieldNum(WPPWorkOrderTable, ProjGroupid));
        workordertable.Name                 = workOrderHeaderEntity.WorkOrderName;
        workOrderTable.modifiedField(fieldNum(WPPWorkOrderTable, Name));

        if (workOrderHeaderEntity.DNRObjectTable_ObjectId)
        {
            BOBObjectTable  objectTable     = BOBObjectTable::findObjectId(workOrderHeaderEntity.DNRObjectTable_ObjectId);
            workOrderTable.BOBObjectTableRecId = objectTable.RecId;
            workOrderTable.modifiedField(fieldNum(WPPWorkOrderTable, BOBObjectTableRecId));
            workOrderTable.AssetId          = objectTable.assetId();
        }

        if(workOrderHeaderEntity.RORVenueCode)
        {
            workOrderTable.initFromRORVenueTable(RORVenueTable::find(workOrderHeaderEntity.RORVenueCode));
        }

        if (workOrderHeaderEntity.HcmWorker_PersonnelNumber)
        {
            workOrderTable.BSAResponsible = HcmWorker::findByPersonnelNumber(workOrderHeaderEntity.HcmWorker_PersonnelNumber).RecId;
        }

        if (workOrderHeaderEntity.DefaultDimensionDAVS_DisplayValue)
        {
            DimensionSetEntity defaultDimEntity;

            select firstonly defaultDimEntity
            where defaultDimEntity.DisplayValue == workOrderHeaderEntity.DefaultDimensionDAVS_DisplayValue;

            if (!defaultDimEntity)
            {
                defaultDimEntity.clear();
                defaultDimEntity.DisplayValue = workOrderHeaderEntity.DefaultDimensionDAVS_DisplayValue;
                defaultDimEntity.insert();
            }

            workOrderTable.FINDefaultDimension = defaultDimEntity.RecId;
        }
        
        workordertable.InventLocationId     = workOrderHeaderEntity.WarehouseId;
        //workOrderTable.modifiedField(fieldNum(WPPWorkOrderTable, InventLocationId));
        workordertable.StartDate            = workOrderHeaderEntity.StartDate;
        workordertable.EndDate              = workOrderHeaderEntity.EndDate;
        
        if (workordertable.validateWrite())
        {
            workOrderTable.insert();
        }
        else
        {
            throw Error("@DualWriteLabels:RecordInsertFail");
        }

        if(workOrderTable.RecId && this.validateWorkOrderTemplate(workOrderHeaderEntity.WorkOrderTemplateId))
        {
            this.createWorkOrderLine();
        }
        
        return workOrderTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkOrderTemplate</Name>
				<Source><![CDATA[
    public boolean validateWorkOrderTemplate(WPPWorkOrderTemplateId     _templateId)
    {
        WPPWorkOrderTemplateLine        templateLine;
        WPPWorkOrderTaskTable           taskTable;
        
        select firstonly templateLine
            order by LineNumber
            where templateLine.TemplateId == _templateId
            exists join taskTable
            where taskTable.TaskId == templateLine.TaskId;

        return (templateLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void createWorkOrderLine()
    {
        WPPWorkOrderSynchronizer    workOrderSynchronizer;

        Set           templateSet   =   new Set(Types::String);
    
        templateSet.add(workOrderHeaderEntity.WorkOrderTemplateId);
    
        ttsBegin;
        workOrderTable.ProjInvoiceProjId   =   '';
        workOrderTable.update();

        workOrderSynchronizer = WPPWorkOrderSynchronizer::newWorkOrderTable(workOrderTable, templateSet);
        workOrderSynchronizer.run();
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>