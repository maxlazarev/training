<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNREventDNRRentalQuotationHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNREventDNRRentalQuotationHeaderEntity
{                                                                                             
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEntityDataSource_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(DNRRentalQuotationHeaderEntity), tableMethodStr(DNRRentalQuotationHeaderEntity, initializeEntityDataSource))]
    public static void initializeEntityDataSource_pre(XppPrePostArgs _eventArgs)
    {
        DNRRentalQuotationHeaderEntity          hostObject          = _eventArgs.getThis() as DNRRentalQuotationHeaderEntity;
        DataEntityDataSourceRuntimeContext  parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRRentalQuotationHeaderEntity, DNRRentalDateTimes):
                RORRentalDateTimes rentalDateTimes = parmDataSourceCtx.getBuffer();
                
                rentalDateTimes.ExpectedOffRentDateTime = hostObject.DNRExpectedOffRentDateTime;
                rentalDateTimes.OffRentDateTime         = hostObject.DNROffRentDateTime;
                rentalDateTimes.OnRentDateTime          = hostObject.DNROnRentDateTime;
                
                parmDataSourceCtx.setBuffer(rentalDateTimes);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource_pre</Name>
				<Source><![CDATA[
    //In the duplicate entity
    [PreHandlerFor(tableStr(DNRRentalQuotationHeaderEntity), tableMethodStr(DNRRentalQuotationHeaderEntity, insertEntityDataSource))]
    public static void insertEntityDataSource_pre(XppPrePostArgs _eventArgs)
    {
        DNRRentalQuotationHeaderEntity      hostObject          = _eventArgs.getThis() as DNRRentalQuotationHeaderEntity;
        DataEntityRuntimeContext            parmEntityCtx       = _eventArgs.getArg('_entityCtx') as DataEntityRuntimeContext;
        DataEntityDataSourceRuntimeContext  parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRRentalQuotationHeaderEntity, DNRRentalDateTimes):
                //The RORRentalDateTimes record is created automatically when the source record is inserted during runtime hence the data entity framework will not be able to find the datasource record for RORRentalDateTimes
                // to fix this, the RORRentalDateTimes record needs to be found and populated to the data entity's datasource by code
                RORRentalDateTimes rentalDateTimes = parmDataSourceCtx.getBuffer();
                SalesQuotationTable  rentalOrderHeader = parmEntityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRRentalQuotationHeaderEntity, SalesQuotationTable)).getBuffer();

                if (!rentalDateTimes)
                {
                    rentalDateTimes = RORRentalDateTimes::findReference(rentalOrderHeader.RecId,  rentalOrderHeader.TableId);
                }

                rentalDateTimes.ExpectedOffRentDateTime = hostObject.DNRExpectedOffRentDateTime;
                rentalDateTimes.OffRentDateTime         = hostObject.DNROffRentDateTime;
                rentalDateTimes.OnRentDateTime          = hostObject.DNROnRentDateTime;

                rentalDateTimes.RefRecId                = rentalOrderHeader.RecId;
                rentalDateTimes.RefTableId              = rentalOrderHeader.TableId;

                //As the DNRRentalQuotationHeaderEntity is being used as a datasource to the DNRREntalQuotationHeaderCEEntity, this method is being called more than once which results into 'Record already exists' error
                //To fix this, the RORRentalDateTimes record is inserted : if not yet created; or updated : if already exists
                if (rentalDateTimes)
                {
                    rentalDateTimes.update();
                }
                else
                {
                    rentalDateTimes.insert();
                }
                
                parmDataSourceCtx.setBuffer(rentalDateTimes);
                parmDataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>