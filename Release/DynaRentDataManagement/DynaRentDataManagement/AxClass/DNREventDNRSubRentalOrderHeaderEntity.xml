<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNREventDNRSubRentalOrderHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNREventDNRSubRentalOrderHeaderEntity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEntityDataSource_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(DNRSubRentalOrderHeaderEntity), tableMethodStr(DNRSubRentalOrderHeaderEntity, initializeEntityDataSource))]
    public static void initializeEntityDataSource_pre(XppPrePostArgs _eventArgs)
    {
        DNRSubRentalOrderHeaderEntity          hostObject          = _eventArgs.getThis() as DNRSubRentalOrderHeaderEntity;
        DataEntityDataSourceRuntimeContext  parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRSubRentalOrderHeaderEntity, RORRentalDateTimes):
                RORRentalDateTimes rentalDateTimes = parmDataSourceCtx.getBuffer();
                
                rentalDateTimes.ExpectedOffRentDateTime = hostObject.DNRExpectedOffRentDateTime;
                rentalDateTimes.OffRentDateTime         = hostObject.DNROffRentDateTime;
                rentalDateTimes.OnRentDateTime          = hostObject.DNROnRentDateTime;
                
                parmDataSourceCtx.setBuffer(rentalDateTimes);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource_pre</Name>
				<Source><![CDATA[
    //In the duplicate entity
    [PreHandlerFor(tableStr(DNRSubRentalOrderHeaderEntity), tableMethodStr(DNRSubRentalOrderHeaderEntity, insertEntityDataSource))]
    public static void insertEntityDataSource_pre(XppPrePostArgs _eventArgs)
    {
        DNRSubRentalOrderHeaderEntity          hostObject          = _eventArgs.getThis() as DNRSubRentalOrderHeaderEntity;
        DataEntityRuntimeContext            parmEntityCtx       = _eventArgs.getArg('_entityCtx') as DataEntityRuntimeContext;
        DataEntityDataSourceRuntimeContext  parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DNRSubRentalOrderHeaderEntity, PurchTable):
                if (!hostObject.PurchaseOrderNumber)
                {
                    PurchTable  subRentalOrderHeader = parmDataSourceCtx.getBuffer();
                    subRentalOrderHeader.PurchId = NumberSeq::newGetNumFromId(PurchParameters::numRefPurchaseOrderId().NumberSequenceId).num();
                    parmDataSourceCtx.setBuffer(subRentalOrderHeader);
                }
                break;

            case dataEntityDataSourceStr(DNRSubRentalOrderHeaderEntity, RORRentalDateTimes):
                RORRentalDateTimes rentalDateTimes = parmDataSourceCtx.getBuffer();
                PurchTable  subRentalOrderHeader = parmEntityCtx.getRuntimeContextByName(dataEntityDataSourceStr(DNRSubRentalOrderHeaderEntity, PurchTable)).getBuffer();

                rentalDateTimes.ExpectedOffRentDateTime = hostObject.DNRExpectedOffRentDateTime;
                rentalDateTimes.OffRentDateTime         = hostObject.DNROffRentDateTime;
                rentalDateTimes.OnRentDateTime          = hostObject.DNROnRentDateTime;

                rentalDateTimes.RefRecId                = subRentalOrderHeader.RecId;
                rentalDateTimes.RefTableId              = subRentalOrderHeader.TableId;

                rentalDateTimes.insert();
                
                parmDataSourceCtx.setBuffer(rentalDateTimes);
                parmDataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>