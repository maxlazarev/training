<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRUnitOfMeasureForm1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(UnitOfMeasure))]
public final class DNRUnitOfMeasureForm1_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    public void init()
    {
        next init();
    
        this.DNRInitRateCodeDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRInitRateCodeDesign</Name>
				<Source><![CDATA[
    // extension methods
    public void DNRInitRateCodeDesign()
    {
        FormDataSource unitOfMeasureFDS = this.dataSource(formDataSourceStr(UnitOfMeasure, UnitOfMeasure));
        QueryBuildRange uomClassRange = unitOfMeasureFDS.queryBuildDataSource().findRange(fieldNum(UnitOfMeasure, UnitOfMeasureClass));
        
        if (uomClassRange 
        && (uomClassRange.value() == enum2Str(UnitOfMeasureClass::Time) ||
            // When calling the form from control on rental order system is passing value "6" 
            uomClassRange.value() == int2Str(enum2int(UnitOfMeasureClass::Time))))
        {
            this.DNRShowInvoicingOptions(true);
        }
        else
        {
            this.DNRShowInvoicingOptions(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRShowInvoicingOptions</Name>
				<Source><![CDATA[
    public void DNRShowInvoicingOptions(boolean _showInvoicingOption)
    {
        FormDataSource unitOfMeasureFDS = this.dataSource(formDataSourceStr(UnitOfMeasure, UnitOfMeasure));

        unitOfMeasureFDS.object(fieldNum(UnitOfMeasure, FINInvoiceConsumptionEngine)).visible(_showInvoicingOption && FINInvoiceCalculatorEngineSetup::isEngineActive(FINRentalAccountType::Consumption)); 
        unitOfMeasureFDS.object(fieldNum(UnitOfMeasure, FINInvoiceCostPriceEngine)).visible(_showInvoicingOption && FINInvoiceCalculatorEngineSetup::isEngineActive(FINRentalAccountType::CostPrice));
        unitOfMeasureFDS.object(fieldNum(UnitOfMeasure, FINInvoiceManualEngine)).visible(_showInvoicingOption && FINInvoiceCalculatorEngineSetup::isEngineActive(FINRentalAccountType::Manual));
        unitOfMeasureFDS.object(fieldNum(UnitOfMeasure, FINInvoiceProjectEngine)).visible(_showInvoicingOption && FINInvoiceCalculatorEngineSetup::isEngineActive(FINRentalAccountType::ProjectHours));
        unitOfMeasureFDS.object(fieldNum(UnitOfMeasure, FINInvoiceRentalEngine)).visible(_showInvoicingOption && FINInvoiceCalculatorEngineSetup::isEngineActive(FINRentalAccountType::Price));
        unitOfMeasureFDS.object(fieldNum(UnitOfMeasure, FINInvoiceTransportEngine)).visible(_showInvoicingOption && FINInvoiceCalculatorEngineSetup::isEngineActive(FINRentalAccountType::DeliveryTransport));
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>