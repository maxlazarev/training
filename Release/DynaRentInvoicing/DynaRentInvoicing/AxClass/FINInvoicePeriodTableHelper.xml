<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoicePeriodTableHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINInvoicePeriodTableHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findStartEndPossibleInvoicingForExchange</Name>
				<Source><![CDATA[
    public static container findStartEndPossibleInvoicingForExchange(RORRentalLine _rentalLine, int _limitDaysNumInFuture = 100)
    {
        FINInvoicePeriodQtyPhysical invPeriodQtyPhysical;
        FINInvoicePeriodQtyFinancial invPeriodQtyFinancial;
        // Returned values will be compared with period dateTimes of a specific oredr line.
        // Default values ensure that result would be ignored if there would be no exchange lines.
        INVPeriodStartDateTime periodsStartDateTimeExchange = DateTimeUtil::maxValue();
        INVPeriodEndDateTime periodsEndDateTimeExchange = DateTimeUtil::minValue();

        if (_rentalLine.TableId == tableNum(SalesLine) || _rentalLine.TableId == tableNum(PurchLine))
        {
            Common common = _rentalLine.RORRentalLine::getOrigReplacementLineBuffer();
            
            if (common)
            {
                select firstonly PeriodStartDateTime, RecId from invPeriodQtyFinancial
                    order by PeriodStartDateTime asc
                    where !invPeriodQtyFinancial.InvoiceId
                        join ReturnDateTime from invPeriodQtyPhysical
                        where invPeriodQtyPhysical.RefTableId  == common.TableId
                        && invPeriodQtyPhysical.RefRecId  == common.RecId
                        && invPeriodQtyPhysical.RecId == invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId;
        
                RORRentalLine rentalLineReplacementChild = common;
                RecId currentRecId = rentalLineReplacementChild.RecIdExchanged;
                if (!invPeriodQtyFinancial)
                {
                    while (currentRecId)
                    {
                        // If first line is already fully invoiced then check exchange lines
                        select RecId, RecIdExchanged from rentalLineReplacementChild
                        where rentalLineReplacementChild.RecId == currentRecId;

                        currentRecId = rentalLineReplacementChild.RecIdExchanged;

                        if (rentalLineReplacementChild.RecId)
                        {
                            select firstonly RecId, PeriodStartDateTime from invPeriodQtyFinancial
                            order by PeriodStartDateTime asc
                            where !invPeriodQtyFinancial.InvoiceId
                                join ReturnDateTime from invPeriodQtyPhysical
                                where invPeriodQtyPhysical.RefTableId  == common.TableId
                                && invPeriodQtyPhysical.RefRecId  == rentalLineReplacementChild.RecId
                                && invPeriodQtyPhysical.RecId == invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId;

                            if (invPeriodQtyFinancial)
                            {
                                currentRecId = 0; // break the local loop
                            }
                        }
                    }
                     
                }
                periodsStartDateTimeExchange = invPeriodQtyFinancial.PeriodStartDateTime;
            }

            common = _rentalLine.RORRentalLine::getNewestReplacementLineBuffer();

            if (common)
            {
                select firstonly RecId from invPeriodQtyFinancial
                    order by PeriodStartDateTime asc
                    where !invPeriodQtyFinancial.InvoiceId
                        join ReturnDateTime from invPeriodQtyPhysical
                        where invPeriodQtyPhysical.RefTableId  == common.TableId
                        && invPeriodQtyPhysical.RefRecId  == common.RecId
                        && invPeriodQtyPhysical.RecId == invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId;
        
                periodsEndDateTimeExchange = (invPeriodQtyPhysical.ReturnDateTime == DateTimeUtil::maxValue() ? DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), _limitDaysNumInFuture) : invPeriodQtyPhysical.ReturnDateTime);
            }
        }

        return [periodsStartDateTimeExchange, periodsEndDateTimeExchange];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStartPossibleInvoicingForExchange</Name>
				<Source><![CDATA[
    public static INVPeriodStartDateTime findStartPossibleInvoicingForExchange(RORRentalLine _rentalLine)
    {
        FINInvoicePeriodQtyPhysical invPeriodQtyPhysical;
        FINInvoicePeriodQtyFinancial invPeriodQtyFinancial;
        // Returned values will be compared with period dateTimes of a specific oredr line.
        // Default values ensure that result would be ignored if there would be no exchange lines.
        INVPeriodStartDateTime periodsStartDateTimeExchange = DateTimeUtil::maxValue();
        
        if (_rentalLine.TableId == tableNum(SalesLine) || _rentalLine.TableId == tableNum(PurchLine))
        {
            Common common = _rentalLine.RORRentalLine::getOrigReplacementLineBuffer();
            
            if (common)
            {
                select firstonly PeriodStartDateTime, RecId from invPeriodQtyFinancial
                    order by PeriodStartDateTime asc
                    where !invPeriodQtyFinancial.InvoiceId
                        exists join invPeriodQtyPhysical
                        where invPeriodQtyPhysical.RefTableId == common.TableId
                        && invPeriodQtyPhysical.RefRecId == common.RecId
                        && invPeriodQtyPhysical.RecId == invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId;
        
                if (!invPeriodQtyFinancial)
                {
                    RORRentalLine rentalLineReplacementChild = common;
                    RecId currentRecId = rentalLineReplacementChild.RecIdExchanged;
                
                    while (currentRecId)
                    {
                        // If first line is already fully invoiced then check exchange lines
                        select RecId, RecIdExchanged from rentalLineReplacementChild
                        where rentalLineReplacementChild.RecId == currentRecId;

                        currentRecId = rentalLineReplacementChild.RecIdExchanged;

                        if (rentalLineReplacementChild.RecId)
                        {
                            select firstonly PeriodStartDateTime, RecId from invPeriodQtyFinancial
                            order by PeriodStartDateTime asc
                            where !invPeriodQtyFinancial.InvoiceId
                                exists join invPeriodQtyPhysical
                                where invPeriodQtyPhysical.RefTableId == common.TableId
                                && invPeriodQtyPhysical.RefRecId == rentalLineReplacementChild.RecId
                                && invPeriodQtyPhysical.RecId == invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId;

                            if (invPeriodQtyFinancial)
                            {
                                currentRecId = 0; // break the local loop
                            }
                        }
                    }
                     
                }
                periodsStartDateTimeExchange = invPeriodQtyFinancial.PeriodStartDateTime;
            }            
        }

        return periodsStartDateTimeExchange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStartEndPossibleInvoicing</Name>
				<Source><![CDATA[
    // 1 period definition per delivery. Several period definitions per order line.
    // If no off-rent date is specified we don't want to calculate until maxDate. By default limit 100 days should be enough.
    public static container findStartEndPossibleInvoicing(RefRecId _refRecId, RORRentalLine _rentalLine, int _limitDaysNumInFuture = 100)
    {
        // Find start of first period that has never been invoiced
        INVPeriodStartDateTime periodsStartDateTime;
        // Find the last invoiced date/time for the supplied line details.  If not found, then return the end of time
        INVPeriodEndDateTime periodsEndDateTime;
        FINInvoicePeriodQtyPhysical invPeriodQtyPhysical;
        FINInvoicePeriodQtyFinancial invPeriodQtyFinancial;
                    
        select firstonly PeriodStartDateTime from invPeriodQtyFinancial
        order by PeriodStartDateTime asc
        where !invPeriodQtyFinancial.InvoiceId
            join DeliveryDateTime, ReturnDateTime from invPeriodQtyPhysical
            where invPeriodQtyPhysical.RecId  == _refRecId
            && invPeriodQtyPhysical.RecId == invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId;
                
        periodsStartDateTime = invPeriodQtyFinancial.PeriodStartDateTime;
        periodsEndDateTime = (invPeriodQtyPhysical.ReturnDateTime == DateTimeUtil::maxValue() ? DateTimeUtil::addDays(periodsStartDateTime, _limitDaysNumInFuture) : invPeriodQtyPhysical.ReturnDateTime);
        
        if (_rentalLine.RORRentalLine::isTechnicalExchange())
        {
            INVPeriodStartDateTime periodsStartDateTimeExchange;
            INVPeriodEndDateTime periodsEndDateTimeExchange;

            [periodsStartDateTimeExchange, periodsEndDateTimeExchange] = FINInvoicePeriodTableHelper::findStartEndPossibleInvoicingForExchange(_rentalLine, _limitDaysNumInFuture);
            if (periodsStartDateTimeExchange != DateTimeUtil::minValue())
            {
                periodsStartDateTime = min(periodsStartDateTime, periodsStartDateTimeExchange);
            }
            periodsEndDateTime = max(periodsEndDateTime, periodsEndDateTimeExchange);
        }
        return [periodsStartDateTime, periodsEndDateTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStartEndPossibleInvoicingForCalculationDateTime</Name>
				<Source><![CDATA[
    public static container findStartEndPossibleInvoicingForCalculationDateTime(RefRecId _refRecId, RORRentalLine _rentalLine, TransDateTime _asAtDateTime, int _limitDaysNumInFuture = 100)
    {
        // Find start of first period that has never been invoiced
        INVPeriodStartDateTime periodsStartDateTime;
        // Find the last invoiced date/time for the supplied line details.  If not found, then return the end of time
        INVPeriodEndDateTime periodsEndDateTime;
        INVPeriodEndDateTime forcedPeriodsEndDateTime;
        FINInvoicePeriodQtyPhysical invPeriodQtyPhysical;
        FINInvoicePeriodQtyFinancial invPeriodQtyFinancial;
                    
        select firstonly PeriodStartDateTime from invPeriodQtyFinancial
        order by PeriodStartDateTime asc
        where !invPeriodQtyFinancial.InvoiceId
            join DeliveryDateTime, ReturnDateTime from invPeriodQtyPhysical
            where invPeriodQtyPhysical.RecId  == _refRecId
            && invPeriodQtyPhysical.RecId == invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId;
               
        periodsStartDateTime = invPeriodQtyFinancial.PeriodStartDateTime;
        forcedPeriodsEndDateTime = DateTimeUtil::addDays(periodsStartDateTime, _limitDaysNumInFuture);
        
        forcedPeriodsEndDateTime = FINInvoicePeriodTableHelper::getForcedPeriodEndDateTime(forcedPeriodsEndDateTime, invPeriodQtyPhysical.ReturnDateTime, _rentalLine, _asAtDateTime);
        periodsEndDateTime = (invPeriodQtyPhysical.ReturnDateTime == DateTimeUtil::maxValue() ? forcedPeriodsEndDateTime : invPeriodQtyPhysical.ReturnDateTime);
        
        if (_rentalLine.RORRentalLine::isTechnicalExchange())
        {
            INVPeriodStartDateTime periodsStartDateTimeExchange;
            INVPeriodEndDateTime periodsEndDateTimeExchange;

            [periodsStartDateTimeExchange, periodsEndDateTimeExchange] = FINInvoicePeriodTableHelper::findStartEndPossibleInvoicingForExchange(_rentalLine, _limitDaysNumInFuture);
            if (periodsStartDateTimeExchange != DateTimeUtil::minValue())
            {
                periodsStartDateTime = min(periodsStartDateTime, periodsStartDateTimeExchange);
            }
            periodsEndDateTime = max(periodsEndDateTime, periodsEndDateTimeExchange);
        }
        return [periodsStartDateTime, periodsEndDateTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForcedPeriodEndDateTime</Name>
				<Source><![CDATA[
    private static TransDateTime getForcedPeriodEndDateTime(INVPeriodEndDateTime _periodEndDateTime, 
        TransDateTime   _returnDateTime, 
        RORRentalLine   _rentalLine, 
        TransDateTime   _asAtDateTime)
    {
        INVPeriodEndDateTime forcedPeriodEndDateTime = _periodEndDateTime;
        
        if (_asAtDateTime != DateTimeUtil::maxValue())
        {     
            // In some calculations forcedPeriodEndDateTime can be limited by default to 100 days in future for a performance reason. 
            // However if a user select during posting a calculationDateTime that is further in the future we should respect user's selection.
            forcedPeriodEndDateTime = max(forcedPeriodEndDateTime, _asAtDateTime);            
        }

        Common common = _rentalLine;
        
        if (common.RORRentalDateTimesHost::isWorksheetTable())
        {
            RORRentalDateTimes rentalDateTimes = common.RORRentalDateTimesHost::rentalDateTimes();
            // Make sure that forcedPeriodEndDateTime is not after off-rent dateTime
            ROROffRentDateTime offRentDateTime = rentalDateTimes.getOffRentDateTime(false);

            if (offRentDateTime)
            {
                forcedPeriodEndDateTime = min(forcedPeriodEndDateTime, offRentDateTime);
            }

        }

        return forcedPeriodEndDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStartPossibleInvoicing</Name>
				<Source><![CDATA[
    public static INVPeriodStartDateTime findStartPossibleInvoicing(RefRecId _refRecId, RORRentalLine _rentalLine)
    {
        // Find start of first period that has never been invoiced
        INVPeriodStartDateTime periodStartDateTime;
        FINInvoicePeriodQtyFinancial invPeriodQtyFinancial;
                    
        select firstonly PeriodStartDateTime from invPeriodQtyFinancial
        order by PeriodStartDateTime asc
        where invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId == _refRecId
        &&    !invPeriodQtyFinancial.InvoiceId;
                
        periodStartDateTime = invPeriodQtyFinancial.PeriodStartDateTime;
                
        if (_rentalLine.RORRentalLine::isTechnicalExchange())
        {
            INVPeriodStartDateTime periodsStartDateTimeExchange = FINInvoicePeriodTableHelper::findStartPossibleInvoicingForExchange(_rentalLine);
            
            if (periodsStartDateTimeExchange != DateTimeUtil::minValue())
            {
                periodStartDateTime = min(periodStartDateTime, periodsStartDateTimeExchange);
            }            
        }

        return periodStartDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnRent</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2020. Obsolete method')]
    public static boolean isOnRent(RefRecId _refRecId)
    {
        boolean ret;
        FINInvoicePeriodQtyPhysical invPeriodQtyPhysical;
                       
        select firstonly RecId from invPeriodQtyPhysical
        where invPeriodQtyPhysical.RecId  == _refRecId
            && invPeriodQtyPhysical.QtyRented;
        
        ret = (invPeriodQtyPhysical.RecId != 0);
                
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviouslyInvoicedPeriodsForExchange</Name>
				<Source><![CDATA[
    public static container getPreviouslyInvoicedPeriodsForExchange(RORRentalLine _newestReplacementLine, ParmId _parmId)
    {
        FINInvoicePeriodQtyPhysical invoicePeriodQtyPhysical;
        Set exchangedLinesRecId = FINInvoiceServiceController::getExchangeOrderLineRecId(_newestReplacementLine);
        SetEnumerator enumerator = exchangedLinesRecId.getEnumerator();
        int totalNumOfOpenCalendarPeriodsExchange, totalNumOfCalendarPeriodsExchange, totalNumOfChargeablePeriodsExchange;

        while (enumerator.moveNext())
        {
            RORRentalLine rentalLine;
            RecId orderRecId = enumerator.current();
            RecId invoicePeriodQtyRecId;
            
            if (_newestReplacementLine.TableId == tableNum(SalesLine))
            {
                SalesLine salesLine;
                SalesParmLine salesParmLine;
                select firstonly RecId from invoicePeriodQtyPhysical
                where invoicePeriodQtyPhysical.RefRecId == orderRecId
                    join salesLine
                    where salesLine.TableId == invoicePeriodQtyPhysical.RefTableId
                    && salesLine.RecId == invoicePeriodQtyPhysical.RefRecId;
                        
                invoicePeriodQtyRecId = invoicePeriodQtyPhysical.RecId;
                rentalLine = salesLine;
            }
            else if (_newestReplacementLine.TableId == tableNum(PurchLine))
            {
                PurchLine purchLine;
                PurchParmLine purchParmLine;
                select firstonly RecId from invoicePeriodQtyPhysical
                where invoicePeriodQtyPhysical.RefRecId == orderRecId
                    join purchLine
                    where purchLine.TableId == invoicePeriodQtyPhysical.RefTableId
                    && purchLine.RecId == invoicePeriodQtyPhysical.RefRecId;
                        
                invoicePeriodQtyRecId = invoicePeriodQtyPhysical.RecId;
                rentalLine = purchLine;
            }

            if (rentalLine)
            {
                FINChargeablePeriodsCache chargeablePeriodsCache = FINChargeablePeriodsCache::construct();
                chargeablePeriodsCache.calculatePreviousNumOfPeriods(rentalLine, invoicePeriodQtyRecId);

                int previousNumOfOpenCalendarPeriodsPerLine, previousNumOfCalendarPeriodsPerLine, previousNumOfChargeablePeriodsPerLine;
                [previousNumOfOpenCalendarPeriodsPerLine, previousNumOfCalendarPeriodsPerLine, previousNumOfChargeablePeriodsPerLine] = chargeablePeriodsCache.getTotalNumOfPeriods(rentalLine);
            
                totalNumOfOpenCalendarPeriodsExchange += previousNumOfOpenCalendarPeriodsPerLine;
                totalNumOfCalendarPeriodsExchange += previousNumOfCalendarPeriodsPerLine;
                totalNumOfChargeablePeriodsExchange += previousNumOfChargeablePeriodsPerLine;
            }
        }
        
        return [totalNumOfOpenCalendarPeriodsExchange, totalNumOfCalendarPeriodsExchange, totalNumOfChargeablePeriodsExchange];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>