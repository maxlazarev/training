<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRROROrderAmendmentDialogType_ChangeDateClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ROROrderAmendmentDialogType_ChangeDate))]
public final class DNRROROrderAmendmentDialogType_ChangeDateClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>showWarningText_OffRentBeforeInvoiced</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    protected boolean showWarningText_OffRentBeforeInvoiced(TransDateTime _newOffRentDateTime)
    {
        boolean ret = next showWarningText_OffRentBeforeInvoiced(_newOffRentDateTime);

        ret = this.FINMustShowWarningText_OffRentBeforeInvoiced(_newOffRentDateTime);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINMustShowWarningText_OffRentBeforeInvoiced</Name>
				<Source><![CDATA[
    // extension methods
    private boolean FINMustShowWarningText_OffRentBeforeInvoiced(TransDateTime _newOffRentDateTime)
    {
        PurchLine           purchLine, purchLineParent;
        PurchTable          purchTable;
        SalesLine           salesLine, salesLineParent;
        SalesTable          salesTable;
        FINInvoicePeriodQtyPhysical invoicePeriodQtyPhysical;
        FINInvoicePeriodQtyFinancial invoicePeriodQtyFinancial;
        RORRentalDateTimes  rentalDateTimesLocal, rentalDateTimesParentLocal;
        boolean             showWarning;
        RecId               parentLineRecId;
    
        switch (common.TableId)
        {
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
                    
                while select RecId, RORParentLineRecId from purchLine
                where purchLine.PurchId == purchTable.PurchId
                &&    purchLine. RORTradeType != RORTradeType::SalesPurch
                    join TableId from rentalDateTimesLocal
                    where rentalDateTimesLocal.RefTableId   == purchLine.TableId
                    &&    rentalDateTimesLocal.RefRecId     == purchLine.RecId
                    &&    rentalDateTimesLocal.SynchronizeFromParent == NoYes::Yes
                        exists join invoicePeriodQtyFinancial
                        where invoicePeriodQtyFinancial.InvoiceId
                        &&    invoicePeriodQtyFinancial.PeriodEndDateTime > _newOffRentDateTime
                            join TableId from invoicePeriodQtyPhysical
                            where invoicePeriodQtyPhysical.RefTableId == rentalDateTimesLocal.RefTableId
                            &&    invoicePeriodQtyPhysical.RefRecId == rentalDateTimesLocal.RefRecId
                            &&    invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId
                {
                    if (purchLine.RORParentLineRecId)
                    {
                        parentLineRecId = purchLine.RORParentLineRecId;
    
                        while (parentLineRecId)
                        {
                            select firstOnly RecId, RORParentLineRecId from purchLineParent
                            where purchLineParent.RecId == parentLineRecId
                                exists join  rentalDateTimesParentLocal
                                where rentalDateTimesParentLocal.RefTableId   == purchLineParent.TableId
                                &&    rentalDateTimesParentLocal.RefRecId     == purchLineParent.RecId
                                &&    rentalDateTimesParentLocal.SynchronizeFromParent == NoYes::Yes;
    
                            if (purchLineParent.RORParentLineRecId)
                            {
                                parentLineRecId = purchLineParent.RORParentLineRecId;
                            }
                            else
                            {
                                showWarning = true;
                                break;
                            }
                            
                        }
                        if (showWarning)
                        {
                            break;
                        }
                    }
                    else
                    {
                        showWarning = true;
                        break;
                    }
                }
                break;

    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
    
                while select RecId, RORParentLineRecId from salesLine
                where salesLine.SalesId == salesTable.SalesId
                &&    salesLine. RORTradeType != RORTradeType::SalesPurch
                    join TableId from rentalDateTimesLocal
                    where rentalDateTimesLocal.RefTableId   == salesLine.TableId
                    &&    rentalDateTimesLocal.RefRecId     == salesLine.RecId
                    &&    rentalDateTimesLocal.SynchronizeFromParent == NoYes::Yes
                        exists join invoicePeriodQtyFinancial
                        where invoicePeriodQtyFinancial.InvoiceId
                        &&    invoicePeriodQtyFinancial.PeriodEndDateTime > _newOffRentDateTime
                            join TableId from invoicePeriodQtyPhysical
                            where invoicePeriodQtyPhysical.RefTableId == rentalDateTimesLocal.RefTableId
                            &&    invoicePeriodQtyPhysical.RefRecId == rentalDateTimesLocal.RefRecId
                            &&    invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId
                {
                    if (salesLine.RORParentLineRecId)
                    {
                        parentLineRecId = salesLine.RORParentLineRecId;
    
                        while (parentLineRecId)
                        {
                            select firstOnly RecId, RORParentLineRecId from salesLineParent
                            where salesLineParent.RecId == parentLineRecId
                                exists join rentalDateTimesParentLocal
                                where rentalDateTimesParentLocal.RefTableId   == salesLineParent.TableId
                                &&    rentalDateTimesParentLocal.RefRecId     == salesLineParent.RecId
                                &&    rentalDateTimesParentLocal.SynchronizeFromParent == NoYes::Yes;
    
                            if (salesLineParent.RORParentLineRecId)
                            {
                                parentLineRecId = salesLineParent.RORParentLineRecId;
                            }
                            else
                            {
                                showWarning = true;
                                break;
                            }
                        }
                        if (showWarning)
                        {
                            break;
                        }
                    }
                    else
                    {
                        showWarning = true;
                        break;
                    }
                }
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
    
                select firstOnly RecId from invoicePeriodQtyFinancial
                where invoicePeriodQtyFinancial.InvoiceId
                &&    invoicePeriodQtyFinancial.PeriodEndDateTime > _newOffRentDateTime
                    exists join invoicePeriodQtyPhysical
                    where invoicePeriodQtyPhysical.RefTableId == salesLine.TableId
                    &&    invoicePeriodQtyPhysical.RefRecId == salesLine.RecId
                    &&    invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId;
                    
                if (invoicePeriodQtyFinancial)
                {
                    showWarning = true;
                }
                break;
    
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
    
                select firstOnly RecId from invoicePeriodQtyFinancial
                where invoicePeriodQtyFinancial.InvoiceId
                &&    invoicePeriodQtyFinancial.PeriodEndDateTime > _newOffRentDateTime
                    exists join invoicePeriodQtyPhysical
                    where invoicePeriodQtyPhysical.RefTableId == purchLine.TableId
                    &&    invoicePeriodQtyPhysical.RefRecId == purchLine.RecId
                    &&    invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId;
    
                if (invoicePeriodQtyFinancial)
                {
                    showWarning = true;
                }
                break;
    
            default:
                break;
        }
    
        return showWarning;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>