<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINRentalCreditWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINRentalCreditWizard extends SysWizard
{
    FormFunctionButtonControl newScenarioButton;
    int newScenarioButtonId;
    FINAmendmentSubTypeCtrl subTypeCtrl;
    CustInvoiceJour custInvoiceJour;
    boolean isProforma;
    FINInvoiceCalculatorParm invoiceCalculatorParm;
    DNRAdditionalNote invoiceNote;
    SalesFormLetter salesFormLetter;
    Set creditSalesLinesSet = new Set(Types::Record);
    Set chargesSet = new Set(Types::Record);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        FINRentalCreditWizard wizard;
        Object caller = _args.caller();

        if (caller)
        {
            wizard = caller.wizard();

            if (_args.parmEnumType() == enumNum(FINRentalCreditWizardCmd) && _args.parmEnum() == FINRentalCreditWizardCmd::NewScenario)
            {
                wizard.addNewScenario();
            }
        }
        else
        {
            wizard = new FINRentalCreditWizard();
            wizard.init();

            if (wizard.prompt())
            {
                wizard.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewScenario</Name>
				<Source><![CDATA[
    protected void addNewScenario()
    {
        FormDesign formDesign = formRun.design();
        FormTabPageControl selectActionTabPage = formDesign.controlName(formControlStr(FINRentalCreditWizard, SelectActionTabPage));
        formRun.lock();
        selectActionTabPage.activatePage();
        tabIdx = tab.tab();
        formRun.unlock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFormRunInit</Name>
				<Source><![CDATA[
    public void preFormRunInit()
    {
        this.initNewScenarioButton();

        invoiceCalculatorParm.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use this method to setup the two arrays: nextEnabled[] and backEnabled[]
    /// Call this.nextEnabled(Boolean) and this.backEnabled(Boolean) to enable/disable the buttons runtime.
    /// </summary>
    void setupNavigation()
    {
        nextEnabled[1] = false;
        backEnabled[1] = false;

        finishButton.text("@SYS4784");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewScenarioButton</Name>
				<Source><![CDATA[
    private void initNewScenarioButton()
    {
        FormBuildDesign formDesign = formRun.form().design();
        FormBuildButtonGroupControl footerGroupCtrl = formDesign.control('BottomButtonGrp'); // Must match the group control name specified in /Classes/SysWizard/Methods/prompt

        FormBuildFunctionButtonControl newScenarioBuildButton = footerGroupCtrl.addControl(FormControlType::MenuFunctionButton, "@DNR:AddNewScenario", formDesign.control('Back'));
        newScenarioBuildButton.skip(false);
        newScenarioBuildButton.saveRecord(true);
        newScenarioBuildButton.multiSelect(true);
        newScenarioBuildButton.text("@DNR:AddNewScenario");
        newScenarioBuildButton.menuItemType(MenuItemType::Action);
        newScenarioBuildButton.menuItemName(menuitemactionstr(FINRentalCreditWizardNewScenario));
        newScenarioBuildButton.visible(false);
        newScenarioButtonId =  newScenarioBuildButton.id();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupSubTypeControl</Name>
				<Source><![CDATA[
    public void setupSubTypeControl(FormComboBoxControl  _subTypeControl,
                                    FINAmendmentType     _amendmentType,
                                    FINAmendmentSubType  _amendmentSubType)
    {
        subTypeCtrl = FINAmendmentSubTypeCtrl::newsubTypeCtrl(_subTypeControl);
        Set addedElements = new Set(Types::Enum);
        
        switch(_amendmentType)
        {
            case FINAmendmentType::Price:
                addedElements.add(FINAmendmentSubType::Gross);
                addedElements.add(FINAmendmentSubType::Net);
                break;
            
            case FINAmendmentType::RentalStop:
                addedElements.add(FINAmendmentSubType::RentalStop);
                addedElements.add(FINAmendmentSubType::RentalActivation);
                break;

            case FINAmendmentType::FullCredit:
                addedElements.add(FINAmendmentSubType::Invoice);
                addedElements.add(FINAmendmentSubType::Order);
                addedElements.add(FINAmendmentSubType::Line);
                break;

            case FINAmendmentType::MiscellaneousCharges:
                addedElements.add(FINAmendmentSubType::Line);
                addedElements.add(FINAmendmentSubType::Order);
                break;

            case FINAmendmentType::Insurance:
                addedElements.add(FINAmendmentSubType::Percentage);
                addedElements.add(FINAmendmentSubType::Amount);
                break;

            case FINAmendmentType::ManualCredit:
                addedElements.add(FINAmendmentSubType::Line);
                //addedElements.add(FINAmendmentSubType::Invoice);
                break;

        }

        subTypeCtrl.addElements(addedElements);
        subTypeCtrl.build();
        subTypeCtrl.setSelection(_amendmentSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTypeIndex2Selection</Name>
				<Source><![CDATA[
    public int subTypeIndex2Selection(FINAmendmentSubType _amendmentSubType)
    {
        if (!subTypeCtrl)
        {
            return -1;
        }

        return subTypeCtrl.index2Selection(_amendmentSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTypeSelection2Index</Name>
				<Source><![CDATA[
    FINAmendmentSubType subTypeSelection2Index(int _selection)
    {
        return subTypeCtrl.selection2Index(_selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFormRunInit</Name>
				<Source><![CDATA[
    public void postFormRunInit()
    {
        FormRun formRunInstance = formRun as FormRun;
        newScenarioButton = formRunInstance.control(newScenarioButtonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTabChanged</Name>
				<Source><![CDATA[
    protected void onTabChanged(int _fromTab, int _toTab, FormTabControl _tabControl)
    {
        super(_fromTab, _toTab,  _tabControl);
        formRun.lockWindowUpdate(true);
        newScenarioButton.visible((this.curTabName() == formControlStr(FINRentalCreditWizard, CreateAmendmentTabPage)));
        formRun.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formstr(FINRentalCreditWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@DNR:RentalCreditWizard";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustInvoiceJour</Name>
				<Source><![CDATA[
    public void setCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
    public void processInvoice()
    {
        ttsbegin;
        this.insertAmendments();
        this.updateDraftAmendments();
        ttscommit;

        this.promptInvoiceScreen();

        ttsbegin;
        this.createLineDebitCharges();
        this.createHeaderDebitCharges();
        this.addInvoiceNote();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDraftAmendments</Name>
				<Source><![CDATA[
    private void updateDraftAmendments()
    {
        ttsbegin;

        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();
        FINInvoicePeriodAmendment invoicePeriodAmendment;

        while select AmendmentRecId, RateCodeAmendmentRecId from tmpInvoicePeriodAmendment
        {
            select firstonly forupdate invoicePeriodAmendment
            where invoicePeriodAmendment.RecId == tmpInvoicePeriodAmendment.AmendmentRecId
            ||    invoicePeriodAmendment.RecId == tmpInvoicePeriodAmendment.RateCodeAmendmentRecId;

            if (invoicePeriodAmendment)
            {
                invoicePeriodAmendment.DocumentState = FINAmendmentDocumentState::None;
                invoicePeriodAmendment.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptInvoiceScreen</Name>
				<Source><![CDATA[
    private void promptInvoiceScreen()
    {
        using (SalesFormLetterConstructContext context = SalesFormLetterConstructContext::construct())
        {
            // Do not load from SysLastValue as we may select on the wrong criteria.
            context.parmLoadFromSysLastValue(UnknownNoYes::No);
            salesFormLetter = SalesFormLetter::construct(DocumentStatus::Invoice);
        }

        salesFormLetter.allowEmptyTable(true);
        salesFormLetter.createFromLines(true);

        List lineList = new List(Types::Record);

        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        while select tmpInvoicePeriodAmendment
        group by InventTransId
        {
            lineList.addEnd(SalesLine::findInventTransId(tmpInvoicePeriodAmendment.InventTransId));
        }

        SetEnumerator creditSalesLinesSetEnumerator = creditSalesLinesSet.getEnumerator();

        while (creditSalesLinesSetEnumerator.moveNext())
        {
            SalesLine salesLineCredit = creditSalesLinesSetEnumerator.current();
            salesLineCredit.reread();
            lineList.addEnd(salesLineCredit);
        }

        salesFormLetter.parmLineList(lineList.pack());
             
        FINInvoicingOptions invoicingOptions = FINInvoicingOptions::construct();
        invoicingOptions.includeUninvoiced = !this.isFullCreditReinvoiceScenario();
        invoicingOptions.includeCredited = NoYes::Yes;
        invoicingOptions.calculationDateTime = this.getCalculationDateTime();
        invoicingOptions.skipSetCalculationDateTime = NoYes::Yes;

        salesFormLetter.RORparmCallerMenuItem(menuitemactionstr(INVSalesFormLetter_InvoiceCreditWizard));

        salesFormLetter.specQty(SalesUpdate::All);
        salesFormLetter.lockSalesUpdateField(false);
        salesFormLetter.enableUpdateNowField(false);
        salesFormLetter.creditRemaining(false);
        salesFormLetter.printFormLetter(false);
        salesFormLetter.FINSetInvoicingOption(invoicingOptions);
        salesFormLetter.RORparmRentalSubStatus(BOBRentalSubStatus::Invoiced);
        salesFormLetter.RORparmCanGoBatch(false);
        salesFormLetter.parmVersioningUpdateType(VersioningUpdateType::Initial);

        salesFormLetter.prePromptInit();
        salesFormLetter.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDraftAmendments</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2022. Method has been made obsolete because the same has been achieved when calling ttsabort from the proforma calculation", false)]
    public void deleteDraftAmendments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCreditAmount</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method")]
    public AmountCur calculateCreditAmount()
    {
        AmountCur creditAmount;
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendmentSameOrder = formRun.getTmpData();

        while select tmpInvoicePeriodAmendment
        group by OrderId
        {
            SalesTable salesTable = SalesTable::find(tmpInvoicePeriodAmendment.OrderId);

            Args args = new Args();
            args.parmObject(this);
            args.record(salesTable);

            Set filteredRecIds = new Set(Types::Int64);

            while select tmpInvoicePeriodAmendmentSameOrder
            group by InventTransId
            where tmpInvoicePeriodAmendmentSameOrder.OrderId == tmpInvoicePeriodAmendment.OrderId
            {
                filteredRecIds.add(SalesLine::findInventTransId(tmpInvoicePeriodAmendmentSameOrder.InventTransId).RecId);
            }

            SetEnumerator creditSalesLinesSetEnumerator = creditSalesLinesSet.getEnumerator();

            while (creditSalesLinesSetEnumerator.moveNext())
            {
                SalesLine salesLine = creditSalesLinesSetEnumerator.current();

                if (salesLine.SalesId == tmpInvoicePeriodAmendment.OrderId)
                {
                    filteredRecIds.add(salesLine.RecId);
                }
            }
            
            FINSalesTotals salesTotals = FINSalesTotals::constructAndPrepareForTotals(args);

            using (DNRTradeTotalsDisposableContext context = new DNRTradeTotalsDisposableContext())
            {
                context.DNRParmCalledFromForm(true);
                context.DNRParmSelectedRecId(filteredRecIds);
                container displayFields = SalesTotals::displayFieldsServer(salesTable, salesTotals.specQty(), salesTable.CurrencyCode);

                creditAmount += conpeek(displayFields, TradeTotals::posTotalAmount());
            }

            this.saveInvoiceCalculatorParm(salesTotals.getParmTable().ParmId);

            salesTotals.cleanupPrecalculatedData();
        }

        return creditAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullCreditReinvoiceScenario</Name>
				<Source><![CDATA[
    public NoYes isFullCreditReinvoiceScenario()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        select firstonly RecId from tmpInvoicePeriodAmendment
        where tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit
        &&    tmpInvoicePeriodAmendment.MustReinvoice;

        return tmpInvoicePeriodAmendment.RecId ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAmendments</Name>
				<Source><![CDATA[
    public void insertAmendments()
    {
        ttsbegin;

        chargesSet = new Set(Types::Record);

        this.insertRentalAmendments();
        this.insertSalesPurchAmendments();
        this.insertMiscellaneousChargesAmendments();
        this.insertManualPriceComponentAmendments();
        this.insertManualCreditAmendments();
        this.recreateManualPriceComponents();          

        if (!isProforma)
        {
            this.postPackingSlip();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertManualPriceComponentAmendments</Name>
				<Source><![CDATA[
    private void insertManualPriceComponentAmendments()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        FINManualPriceComponent manualPriceComponentToInsert;
        FINCustInvoiceTransManualComponent invoicedManualPriceComponent;
        SalesLine salesLine;
        CustInvoiceTrans custInvoiceTrans;

        while select tmpInvoicePeriodAmendment
        where tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::ManualPriceComponents
        {
            salesLine = salesLine::findInventTransId(tmpInvoicePeriodAmendment.InventTransId);
            invoicedManualPriceComponent = FINCustInvoiceTransManualComponent::find(tmpInvoicePeriodAmendment.CustInvoiceTransComponentRecId);

            manualPriceComponentToInsert.initFromCommon(salesLine);
            manualPriceComponentToInsert.Description = invoicedManualPriceComponent.Description;
            manualPriceComponentToInsert.CreditAccountType = invoicedManualPriceComponent.RentalAccountType;
            manualPriceComponentToInsert.FromDateTime = tmpInvoicePeriodAmendment.EffectiveDateTimeFrom;
            manualPriceComponentToInsert.ToDateTime = tmpInvoicePeriodAmendment.EffectiveDateTimeTo;
            manualPriceComponentToInsert.AmountCur = tmpInvoicePeriodAmendment.NewRealValue - tmpInvoicePeriodAmendment.OldRealValue;
            
            manualPriceComponentToInsert.insert();

            if (!isProforma)
            {
                FreeText logTxt = this.initAmendmentLogTxt(salesLine, salesLine.InventTransId, tmpInvoicePeriodAmendment);
                this.createAmendmentLogEntry(salesLine, tmpInvoicePeriodAmendment, logTxt);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recreateManualPriceComponents</Name>
				<Source><![CDATA[
    // The flik-flak reverses manual price components so we have to re-add them.
    private void recreateManualPriceComponents()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        while select tmpInvoicePeriodAmendment
        group by InventTransId
        {
            SalesLine salesLine = salesLine::findInventTransId(tmpInvoicePeriodAmendment.InventTransId);
            CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(tmpInvoicePeriodAmendment.CustInvoiceTransRecId);

            if (tmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::FullCredit || tmpInvoicePeriodAmendment.MustReinvoice)
            {
                this.createLineDebitManualPriceComponents(tmpInvoicePeriodAmendment, custInvoiceTrans, salesLine);
                FINInvoicePeriodQtyFinancial::markUnMarkDateTimeForCredit(FINInvoiceTransPeriodStatus::PendingCredit, tmpInvoicePeriodAmendment.EffectiveDateTimeFrom, tmpInvoicePeriodAmendment.EffectiveDateTimeTo, salesLine);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertManualCreditAmendments</Name>
				<Source><![CDATA[
    private void insertManualCreditAmendments()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();
        FINManualPriceComponent manualPriceComponentToInsert;

        ttsbegin;

        while select InventTransId, Description, NewRealValue, EffectiveDateTimeFrom, EffectiveDateTimeTo from tmpInvoicePeriodAmendment
        where tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::ManualCredit
        &&    tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Line
        {
            manualPriceComponentToInsert.clear();

            SalesLine salesLine = SalesLine::findInventTransId(tmpInvoicePeriodAmendment.InventTransId, true);
            manualPriceComponentToInsert.initFromCommon(salesLine);
            manualPriceComponentToInsert.Description = tmpInvoicePeriodAmendment.Description;
            manualPriceComponentToInsert.AmountCur = -tmpInvoicePeriodAmendment.NewRealValue;
            manualPriceComponentToInsert.CreditAccountType = FINRentalAccountType::Price;
            manualPriceComponentToInsert.FromDateTime = tmpInvoicePeriodAmendment.EffectiveDateTimeFrom;
            manualPriceComponentToInsert.ToDateTime = tmpInvoicePeriodAmendment.EffectiveDateTimeTo;

            manualPriceComponentToInsert.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMiscellaneousChargesAmendments</Name>
				<Source><![CDATA[
    private void insertMiscellaneousChargesAmendments()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        while select tmpInvoicePeriodAmendment
        where tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::MiscellaneousCharges
        {
            this.createMiscCharges(tmpInvoicePeriodAmendment);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMiscCharges</Name>
				<Source><![CDATA[
    private void createMiscCharges(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        SalesLine salesLineCharge;

        ttsbegin;

        // For the ProForma calculation, always create a new line so that we can remove it after the calculations have been performed.
        if (isProforma)
        {
            salesLineCharge = this.createMiscChargeLine(_tmpInvoicePeriodAmendment);
        }
        else
        {
            RORParameters rentalParameters = RORParameters::find();

            if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order)
            {
                select firstonly forupdate salesLineCharge
                where salesLineCharge.SalesId == _tmpInvoicePeriodAmendment.OrderId
                &&    salesLineCharge.ItemId == rentalParameters.FINItemIdMiscCharges
                &&    !salesLineCharge.RORParentLineRecId;
            }
            else
            {
                SalesLine salesLineParent;

                select firstonly forupdate salesLineCharge
                where salesLineCharge.SalesId == _tmpInvoicePeriodAmendment.OrderId
                &&    salesLineCharge.ItemId == rentalParameters.FINItemIdMiscCharges
                    exists join salesLineParent
                    where salesLineParent.RecId == salesLineCharge.RORParentLineRecId
                    &&    salesLineParent.InventTransId == _tmpInvoicePeriodAmendment.InventTransId;
            }

            if (salesLineCharge)
            {
                salesLineCharge.SalesQty += 1;
                salesLineCharge.salesQtyModified();
                salesLineCharge.update();
            }
            else
            {
                salesLineCharge = this.createMiscChargeLine(_tmpInvoicePeriodAmendment);
            }

            FreeText logTxt = this.initAmendmentLogTxt(salesLineCharge, salesLineCharge.InventTransId, _tmpInvoicePeriodAmendment);
            this.createAmendmentLogEntry(salesLineCharge, _tmpInvoicePeriodAmendment, logTxt);
        }

        this.createMiscCharge(salesLineCharge, _tmpInvoicePeriodAmendment);
        creditSalesLinesSet.add(salesLineCharge);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMiscCharge</Name>
				<Source><![CDATA[
    private void createMiscCharge(SalesLine _salesLine, FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        ttsbegin;

        MarkupTrans invoiceMarkupTrans = MarkupTrans::findRecId(_tmpInvoicePeriodAmendment.MarkupTransRecId);
        MarkupTrans newMarkupTrans;
        buf2Buf(invoiceMarkupTrans, newMarkupTrans);

        newMarkupTrans.MarkupCategory = MarkupCategory::Fixed;
        newMarkupTrans.TransRecId = _salesLine.RecId;
        newMarkupTrans.TransTableId = _salesLine.TableId;
        newMarkupTrans.LineNum = MarkupTrans::lastLineNum(_salesLine.TableId, _salesLine.RecId) + 1;
        newMarkupTrans.CalculatedAmount = 0;

        MarkupValue newMarkupCalculatedAmount;

        switch (invoiceMarkupTrans.MarkupCategory)
        {
            case MarkupCategory::Fixed :
                newMarkupCalculatedAmount = _tmpInvoicePeriodAmendment.NewRealValue;
                break;

            case MarkupCategory::Percent :
                MarkupTrans sumMarkupAmountRentalCharges;
                MarkupTable markupTable;
                MarkupValue oldTotalMarkupAmount, newTotalMarkupAmount;

                if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order)
                {
                    CustInvoiceTrans custInvoiceTransSameOrder;

                    select sum(CalculatedAmount) from sumMarkupAmountRentalCharges
                    where sumMarkupAmountRentalCharges.FINMarkupAccountType != FINMarkupAccountType::None
                    &&    sumMarkupAmountRentalCharges.FINGeneratedFromPercentage == NoYes::No
                        exists join custInvoiceTransSameOrder
                        where custInvoiceTransSameOrder.SalesId == custInvoiceJour.SalesId
                        &&    custInvoiceTransSameOrder.InvoiceDate == custInvoiceJour.InvoiceDate
                        &&    custInvoiceTransSameOrder.InvoiceId == custInvoiceJour.InvoiceId
                        &&    custInvoiceTransSameOrder.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
                        &&    custInvoiceTransSameOrder.RORTradeType != RORTradeType::SalesPurch
                        &&    custInvoiceTransSameOrder.RecId == sumMarkupAmountRentalCharges.TransRecId
                        &&    custInvoiceTransSameOrder.TableId == sumMarkupAmountRentalCharges.TransTableId
                        &&    custInvoiceTransSameOrder.OrigSalesId == _tmpInvoicePeriodAmendment.OrderId
                            join markupTable
                            where markupTable.MarkupCode == sumMarkupAmountRentalCharges.MarkupCode
                            &&    markupTable.ModuleType == MarkupModuleType::Cust
                            // For internal charges like rental cost, no percentage markuptransactions are created.
                            &&    markupTable.CustType == MarkupType::CustVend;

                    oldTotalMarkupAmount = invoiceMarkupTrans.Value / 100 * sumMarkupAmountRentalCharges.CalculatedAmount;
                    newTotalMarkupAmount = _tmpInvoicePeriodAmendment.NewRealValue / 100 * sumMarkupAmountRentalCharges.CalculatedAmount;
                }
                else if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Line)
                {
                    CustInvoiceTrans custInvoiceTrans;

                    select sum(CalculatedAmount) from sumMarkupAmountRentalCharges
                    where sumMarkupAmountRentalCharges.FINMarkupAccountType != FINMarkupAccountType::None
                    &&    sumMarkupAmountRentalCharges.FINGeneratedFromPercentage == NoYes::No
                    &&    sumMarkupAmountRentalCharges.TransRecId == _tmpInvoicePeriodAmendment.CustInvoiceTransRecId
                    &&    sumMarkupAmountRentalCharges.TransTableId == tableNum(CustInvoiceTrans)
                        exists join markupTable
                        where markupTable.MarkupCode == sumMarkupAmountRentalCharges.MarkupCode
                        &&    markupTable.ModuleType == MarkupModuleType::Cust
                        // For internal charges like rental cost, no percentage markuptransactions are created.
                        &&    markupTable.CustType == MarkupType::CustVend;

                    oldTotalMarkupAmount = invoiceMarkupTrans.Value / 100 * sumMarkupAmountRentalCharges.CalculatedAmount;
                    newTotalMarkupAmount = _tmpInvoicePeriodAmendment.NewRealValue / 100 * sumMarkupAmountRentalCharges.CalculatedAmount;
                }

                newMarkupCalculatedAmount = _tmpInvoicePeriodAmendment.NewRealValue / invoiceMarkupTrans.Value * invoiceMarkupTrans.CalculatedAmount;
                newMarkupCalculatedAmount += (newTotalMarkupAmount - oldTotalMarkupAmount);
                break;

            case MarkupCategory::Pcs :
                newMarkupCalculatedAmount = invoiceMarkupTrans.CalculatedAmount / invoiceMarkupTrans.Value * _tmpInvoicePeriodAmendment.NewRealValue;
                break;
        }

        newMarkupTrans.Value = newMarkupCalculatedAmount - invoiceMarkupTrans.CalculatedAmount;
        newMarkupTrans.Posted = 0;
        newMarkupTrans.TransDate = dateNull();
        newMarkupTrans.Voucher = '';
        newMarkupTrans.insert();

        chargesSet.add(newMarkupTrans);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMiscChargeLine</Name>
				<Source><![CDATA[
    private SalesLine createMiscChargeLine(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        SalesLine salesLineCharge;
        SalesLine salesLineHost = SalesLine::findInventTransId(_tmpInvoicePeriodAmendment.InventTransId);
        SalesTable salesTable = SalesTable::find(_tmpInvoicePeriodAmendment.OrderId);
        RORParameters rentalParameters = RORParameters::find();

        if (!rentalParameters.FINItemIdMiscCharges)
        {
            throw error("@DNR:MiscChargeLineNotSpecified");
        }

        ttsbegin;

        salesLineCharge.initValue();
        salesLineCharge.initFromSalesTable(salesTable);
        salesLineCharge.SalesType = SalesType::RORRental;
        salesLineCharge.RORModifiedRORTradeType();
        salesLineCharge.ItemId = rentalParameters.FINItemIdMiscCharges;
        salesLineCharge.itemIdChanged();
    
        InventDim inventDimHost     = salesLineHost.inventDim();
        InventDim inventDim         = salesLineCharge.inventDim();
        inventDim.InventLocationId  = inventDimHost.InventLocationId;
        inventDim.InventSiteId      = inventDimHost.InventSiteId;
        inventDim                   = inventDim::findOrCreate(inventDim);
    
        salesLineCharge.InventDimId               = inventDim.inventDimId;
        salesLineCharge.RORReturnInventLocationId = salesLineHost.RORReturnInventLocationId ?
                                                        salesLineHost.RORReturnInventLocationId :
                                                        inventDim.InventLocationId;
        salesLineCharge.RORParentLineRecId        = salesLineHost.RecId;
        salesLineCharge.RORKitComponentType       = RORKitComponentType::Standalone;
        salesLineCharge.RORAllowQtyEdit           = salesLineHost.RORAllowQtyEdit;
        salesLineCharge.RORRentalLine::initFromParent(salesLineHost);
        salesLineCharge.RORIsPriceFixed           = salesLineHost.RORIsPriceFixed;
        salesLineCharge.RORIsPriceNet             = salesLineHost.RORIsPriceNet;
        salesLineCharge.INVRateMultiplierTier     = 0;
        salesLineCharge.LineNum                   = salesLineCharge.RORRentalLine::getNextLineNum(SalesLine::lastLineNum(salesLineCharge.SalesId));
        salesLineCharge.RemainSalesPhysical = 1;
        salesLineCharge.RemainSalesFinancial = 1;
        salesLineCharge.createLine(true, false, false, true, false, false, false, true);
        
        ttscommit;

        return salesLineCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRentalAmendments</Name>
				<Source><![CDATA[
    private void insertRentalAmendments()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        while select forupdate tmpInvoicePeriodAmendment
        where tmpInvoicePeriodAmendment.TradeType != RORTradeType::SalesPurch
        &&    tmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::MiscellaneousCharges
        &&    tmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::ManualPriceComponents
        &&    tmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::ManualCredit
        {
            Map changesMap = this.getChangesMap(tmpInvoicePeriodAmendment);
            SalesLine salesline = SalesLine::findInventTransId(tmpInvoicePeriodAmendment.InventTransId);
            
            FINInvoicePeriodManager_FinancialChange_CreditWizard invoicePeriodManager = FINInvoicePeriodManager::construct(FINInvoicePeriodAction::FinancialChangeCreditWizard, salesline);
            invoicePeriodManager.setChanges(changesMap);
            invoicePeriodManager.setMustSetPendingCredit(true);
            invoicePeriodManager.setTmpAmendment(tmpInvoicePeriodAmendment);
            invoicePeriodManager.setIsProforma(isProforma);
            invoicePeriodManager.run();

            container amendmentRecIds = invoicePeriodManager.getInvoicePeriodAmendmentRecIds();

            tmpInvoicePeriodAmendment.AmendmentRecId = conPeek(amendmentRecIds, 1);
            tmpInvoicePeriodAmendment.RateCodeAmendmentRecId = conPeek(amendmentRecIds, 2);
            tmpInvoicePeriodAmendment.update();

            if (tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit)
            {
                this.createLineReversalCharges(CustInvoiceTrans::findRecId(tmpInvoicePeriodAmendment.CustInvoiceTransRecId), salesline, true);
            }
        }

        this.createHeaderReversalCharges();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineReversalCharges</Name>
				<Source><![CDATA[
    private void createLineReversalCharges(CustInvoiceTrans _custInvoiceTrans, SalesLine _salesLine, boolean _isCredit)
    {
        ttsbegin;
        chargesSet = Set::union(chargesSet, Markup::FINcopy(_isCredit ? NoYes::Yes : NoYes::No, _custInvoiceTrans, _salesline));
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineDebitCharges</Name>
				<Source><![CDATA[
    private void createLineDebitCharges()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        while select tmpInvoicePeriodAmendment
        where tmpInvoicePeriodAmendment.TradeType != RORTradeType::SalesPurch
        &&    tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit
        &&    tmpInvoicePeriodAmendment.MustReinvoice
        {
            SalesLine salesline = SalesLine::findInventTransId(tmpInvoicePeriodAmendment.InventTransId);
            CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(tmpInvoicePeriodAmendment.CustInvoiceTransRecId);
            this.createLineReversalCharges(custInvoiceTrans, salesline, false);
            this.createLineDebitManualPriceComponents(tmpInvoicePeriodAmendment, custInvoiceTrans, salesline);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineDebitManualPriceComponents</Name>
				<Source><![CDATA[
    private void createLineDebitManualPriceComponents(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment, CustInvoiceTrans _custInvoiceTrans, SalesLine _salesLine)
    {
        ttsbegin;

        FINManualPriceComponent manualPriceComponentToInsert;
        FINCustInvoiceTransManualComponent invoicedManualPriceComponent;

        while select Description, Amount, RentalAccountType from invoicedManualPriceComponent
        where invoicedManualPriceComponent.CustInvoiceTransRecId == _custInvoiceTrans.RecId
        {
            manualPriceComponentToInsert.clear();

            manualPriceComponentToInsert.initFromCommon(_salesLine);
            manualPriceComponentToInsert.Description = invoicedManualPriceComponent.Description;
            manualPriceComponentToInsert.AmountCur = invoicedManualPriceComponent.Amount;
            manualPriceComponentToInsert.CreditAccountType = invoicedManualPriceComponent.RentalAccountType;
            manualPriceComponentToInsert.FromDateTime = _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom;
            manualPriceComponentToInsert.ToDateTime = _tmpInvoicePeriodAmendment.EffectiveDateTimeTo;

            manualPriceComponentToInsert.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderReversalCharges</Name>
				<Source><![CDATA[
    private void createHeaderReversalCharges()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        while select tmpInvoicePeriodAmendment
        group by OrderId
        where tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit
        &&    (tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order || tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Invoice)
        {
            SalesTable salesTable = SalesTable::find(tmpInvoicePeriodAmendment.OrderId);
            chargesSet = Set::union(chargesSet, Markup::FINcopy(NoYes::Yes, custInvoiceJour, salesTable));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderDebitCharges</Name>
				<Source><![CDATA[
    private void createHeaderDebitCharges()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        while select tmpInvoicePeriodAmendment
        group by OrderId
        where tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit
        &&    tmpInvoicePeriodAmendment.MustReinvoice
        &&    (tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order || tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Invoice)
        {
            SalesTable salesTable = SalesTable::find(tmpInvoicePeriodAmendment.OrderId);
            chargesSet = Set::union(chargesSet, Markup::FINcopy(NoYes::No, custInvoiceJour, salesTable));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChangesMap</Name>
				<Source><![CDATA[
    private Map getChangesMap(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        Map changesMap = new Map(Types::Container, Types::Container);

        FINInvoicePeriodPriceComponent priceComponent = this.amendmentType2PriceComponent(_tmpInvoicePeriodAmendment.AmendmentType, _tmpInvoicePeriodAmendment.AmendmentSubType);
        container amendmentValues = this.getAmendmentValues(_tmpInvoicePeriodAmendment);

        changesMap.insert([_tmpInvoicePeriodAmendment.EffectiveDateTimeFrom, _tmpInvoicePeriodAmendment.EffectiveDateTimeTo, priceComponent], 
                          [conPeek(amendmentValues, 1), conPeek(amendmentValues, 2), _tmpInvoicePeriodAmendment.ReasonText]);

        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::RateCode
        &&  _tmpInvoicePeriodAmendment.MustRecalculatePrice == NoYes::Yes)
        {
            RORAmendmentReasonText reasonText = strFmt("@DNR:ChangedValueFromTo", enum2Str(_tmpInvoicePeriodAmendment.AmendmentType), 
                                                                                  UnitOfMeasure::find(_tmpInvoicePeriodAmendment.OldRateCode).Symbol, 
                                                                                  UnitOfMeasure::find(_tmpInvoicePeriodAmendment.NewRateCode).Symbol);

            changesMap.insert([_tmpInvoicePeriodAmendment.EffectiveDateTimeFrom, _tmpInvoicePeriodAmendment.EffectiveDateTimeTo, FINInvoicePeriodPriceComponent::RentalPrice], 
                              [conPeek(amendmentValues, 3), conPeek(amendmentValues, 4), reasonText]);
        }

        return changesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesPurchAmendments</Name>
				<Source><![CDATA[
    private void insertSalesPurchAmendments()
    {
        creditSalesLinesSet = new Set(Types::Record);

        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendment = formRun.getTmpData();

        ttsbegin;

        while select tmpInvoicePeriodAmendment 
        order by OrderId
        where tmpInvoicePeriodAmendment.TradeType == RORTradeType::SalesPurch
        &&    (tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::Price || tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit)
        {
            SalesLine salesline = SalesLine::findInventTransId(tmpInvoicePeriodAmendment.InventTransId);
            SalesLine salesLineCredit = this.createCreditSalesLine(salesline, tmpInvoicePeriodAmendment);

            if (tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::Price
            || (tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit && tmpInvoicePeriodAmendment.MustReinvoice && !isProforma))
            {
                this.createDebitSalesLine(salesline, tmpInvoicePeriodAmendment);
            }

            if (!isProforma)
            {
                FreeText logTxt = this.initAmendmentLogTxt(salesline, salesLineCredit.InventTransId, tmpInvoicePeriodAmendment);
                this.createAmendmentLogEntry(salesline, tmpInvoicePeriodAmendment, logTxt);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPackingSlip</Name>
				<Source><![CDATA[
    private void postPackingSlip()
    {
        ttsbegin;

        salesFormLetter = SalesFormLetter::construct(DocumentStatus::PackingSlip);

        salesFormLetter.allowEmptyTable(true);
        salesFormLetter.createFromLines(true);

        List lineList = new List(Types::Record);
        SetEnumerator creditSalesLinesSetEnumerator = creditSalesLinesSet.getEnumerator();

        while (creditSalesLinesSetEnumerator.moveNext())
        {
            SalesLine salesLineCredit = creditSalesLinesSetEnumerator.current();
            salesLineCredit.reread();
            lineList.addEnd(salesLineCredit);
        }

        salesFormLetter.parmLineList(lineList.pack());
        salesFormLetter.specQty(SalesUpdate::All);
        salesFormLetter.lockSalesUpdateField(false);
        salesFormLetter.enableUpdateNowField(true);
        salesFormLetter.printFormLetter(false);
        salesFormLetter.RORparmRentalSubStatus(BOBRentalSubStatus::Delivered);
        salesFormLetter.RORparmCanGoBatch(false);
        salesFormLetter.WPPparmChangeObjectAvailability(true);
        salesFormLetter.parmVersioningUpdateType(VersioningUpdateType::Initial);
        salesFormLetter.prePromptInit();
        salesFormLetter.createParmUpdateFromParmUpdateRecord(SalesFormletterParmData::initSalesParmUpdateFormletter(DocumentStatus::PackingSlip, salesFormLetter.pack()));

        salesFormLetter.run();
            
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditSalesLine</Name>
				<Source><![CDATA[
    private SalesLine createCreditSalesLine(SalesLine _salesLine, FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        ttsbegin;

        SalesLine salesLineCredit = this.createSalesLineCopy(_tmpInvoicePeriodAmendment, true);
        salesLineCredit.RORRentalGrossAmount = _salesLine.RORRentalGrossAmount * -1;
        salesLineCredit.BOBSellFixedAsset = NoYes::No;
        salesLineCredit.update();

        creditSalesLinesSet.add(salesLineCredit);

        ttscommit;

        return salesLineCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDebitSalesLine</Name>
				<Source><![CDATA[
    private SalesLine createDebitSalesLine(SalesLine _salesLine, FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        ttsbegin;

        SalesLine salesLineDebit = this.createSalesLineCopy(_tmpInvoicePeriodAmendment, false);
        salesLineDebit.RORRentalGrossAmount = _salesLine.RORRentalGrossAmount;

        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::Price)
        {
            if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Gross)
            {
                salesLineDebit.RORRentalGrossAmount = _tmpInvoicePeriodAmendment.NewRealValue * salesLineDebit.SalesQty;
                salesLineDebit.LineAmount = salesLineDebit.LinePercent ?
                                            salesLineDebit.RORRentalGrossAmount * (1 - salesLineDebit.LinePercent / 100) :
                                            salesLineDebit.RORRentalGrossAmount;
            }
            else
            {
                salesLineDebit.LineAmount = _tmpInvoicePeriodAmendment.NewRealValue * salesLineDebit.SalesQty;
                salesLineDebit.LinePercent = abs((salesLineDebit.LineAmount - salesLineDebit.RORRentalGrossAmount) / salesLineDebit.RORRentalGrossAmount * 100);
            }
        }

        salesLineDebit.SalesPrice = salesLineDebit.SalesQty ? salesLineDebit.RORRentalGrossAmount / salesLineDebit.SalesQty : 0;
        salesLineDebit.InventTransIdReturn = '';
        salesLineDebit.BOBSellFixedAsset = NoYes::No;
        salesLineDebit.update();

        // When doing a full credit with reinvoicing, we want to create the debit line but not show it in the invoice screen.
        if (_tmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::FullCredit)
        {
            creditSalesLinesSet.add(salesLineDebit);
        }

        ttscommit;

        return salesLineDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLineCopy</Name>
				<Source><![CDATA[
    private SalesLine createSalesLineCopy(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment, boolean _isCredit)
    {
        CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(_tmpInvoicePeriodAmendment.CustInvoiceTransRecId);
        SalesOrderCopyingContract contract = SalesOrderCopyingContract::newIsCreditNote(true);

        contract.parmSalesPurchCopy(SalesPurchCopy::CreditNoteLines);
        contract.parmCallingTableSalesId(_tmpInvoicePeriodAmendment.OrderId);

        TmpFrmVirtual tmpFrmVirtualLine;
        tmpFrmVirtualLine.Id = custInvoiceTrans.InvoiceId;
        tmpFrmVirtualLine.RecordNo = custInvoiceTrans.RecId;
        tmpFrmVirtualLine.TableNum = custInvoiceTrans.TableId;
        tmpFrmVirtualLine.Qty = custInvoiceTrans.Qty;
        tmpFrmVirtualLine.LineNum = custInvoiceTrans.LineNum;
        tmpFrmVirtualLine.TransDate = custInvoiceTrans.InvoiceDate;
        tmpFrmVirtualLine.insert();

        contract.parmTmpFrmVirtualLines(tmpFrmVirtualLine);
        contract.parmQtyFactor(1);
        contract.parmRecalculateAmount(NoYes::No);
        contract.parmReverseSign(_isCredit ? NoYes::Yes : NoYes::No);
        contract.parmCopyMarkup(NoYes::Yes);
        contract.parmCopyPrecisely(NoYes::Yes);
        contract.parmDeleteLines(NoYes::No);

        SalesCopying salesCopying = SalesCopying::construct(contract.parmSalesPurchCopy());
        salesCopying.initParametersFromContract(contract);

        SalesLine salesLineCopy;
        SalesLine salesLineSource = SalesLine::findInventTransId(_tmpInvoicePeriodAmendment.InventTransId);

        SalesLineCopyFromSource salesLineCopyFromSource = SalesLineCopyFromSource::construct(salesLineCopy,
                                                                                             SalesTable::find(_tmpInvoicePeriodAmendment.OrderId),
                                                                                             tmpFrmVirtualLine,
                                                                                             salesCopying);
        salesCopying.FINCopyLine(salesLineCopy, salesLineCopyFromSource);

        return salesLineCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAmendmentLogEntry</Name>
				<Source><![CDATA[
    private void createAmendmentLogEntry(SalesLine _salesLine, FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment, FreeText _logTxt)
    {
        ttsbegin;
              
        FINInvoicePeriodAmendment invoicePeriodAmendment;
        invoicePeriodAmendment.PriceComponent = this.amendmentType2PriceComponent(_tmpInvoicePeriodAmendment.AmendmentType, _tmpInvoicePeriodAmendment.AmendmentSubType);
        invoicePeriodAmendment.RealValue = _tmpInvoicePeriodAmendment.NewRealValue;
        invoicePeriodAmendment.OldRealValue = _tmpInvoicePeriodAmendment.OldRealValue;
        invoicePeriodAmendment.StrValue = _tmpInvoicePeriodAmendment.NewStrValue;
        invoicePeriodAmendment.OldStrValue = _tmpInvoicePeriodAmendment.OldStrValue;
        invoicePeriodAmendment.ReasonText = _tmpInvoicePeriodAmendment.ReasonText;
        invoicePeriodAmendment.RefRecId = _salesLine.RecId;
        invoicePeriodAmendment.RefTableId = _salesLine.TableId;

        invoicePeriodAmendment.createAmendmentLogFromCreditWizard(AccessType::Edit, _tmpInvoicePeriodAmendment.ReasonCode, _tmpInvoicePeriodAmendment.ReasonText, _tmpInvoicePeriodAmendment.ContactPersonId, _logTxt);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmendmentLogTxt</Name>
				<Source><![CDATA[
    private FreeText initAmendmentLogTxt(SalesLine _salesLine, InventTransId _creditLineInventTransId, FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        FreeText ret;

        switch (_tmpInvoicePeriodAmendment.AmendmentType)
        {
            case FINAmendmentType::Price :
                ret = strFmt("@DNR:EquipmentPriceCreditLogTxt", 
                             enum2Str(_tmpInvoicePeriodAmendment.AmendmentSubType), 
                             _salesLine.CurrencyCode,  
                             _tmpInvoicePeriodAmendment.OldRealValue,
                             _tmpInvoicePeriodAmendment.NewRealValue, 
                             _creditLineInventTransId);
                break;

            case FINAmendmentType::MiscellaneousCharges :
                if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Line)
                {
                    ret = strFmt("@DNR:MiscChargeLineCreditLogTxt",
                                 _tmpInvoicePeriodAmendment.ItemId,
                                 _tmpInvoicePeriodAmendment.InventTransId,
                                 _tmpInvoicePeriodAmendment.MarkupCode,
                                 _tmpInvoicePeriodAmendment.OldRealValue,
                                 _tmpInvoicePeriodAmendment.NewRealValue);

                }
                else if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order)
                {
                    ret = strFmt("@DNR:MiscChargeOrderCreditLogTxt",
                                 _tmpInvoicePeriodAmendment.OrderId,
                                 _tmpInvoicePeriodAmendment.MarkupCode,
                                 _tmpInvoicePeriodAmendment.OldRealValue,
                                 _tmpInvoicePeriodAmendment.NewRealValue);
                }
                break;

            case FINAmendmentType::ManualPriceComponents :
                ret = strFmt("@DNR:ManualPriceComponentCreditLogTxt",
                             _tmpInvoicePeriodAmendment.ItemId,
                             _tmpInvoicePeriodAmendment.InventTransId,
                             _tmpInvoicePeriodAmendment.OldRealValue,
                             _tmpInvoicePeriodAmendment.NewRealValue);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmendmentValues</Name>
				<Source><![CDATA[
    private container getAmendmentValues(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        container ret;

        switch (_tmpInvoicePeriodAmendment.AmendmentType)
        {
            case FINAmendmentType::Price :
                ret = [_tmpInvoicePeriodAmendment.NewRealValue, _tmpInvoicePeriodAmendment.OldRealValue];
                break;

            case FINAmendmentType::RentalStop,
                 FINAmendmentType::FullCredit :
                ret = [_tmpInvoicePeriodAmendment.NewStrValue, _tmpInvoicePeriodAmendment.OldStrValue];
                break;

            case FINAmendmentType::RateCode :
                ret = [_tmpInvoicePeriodAmendment.NewRateCode, _tmpInvoicePeriodAmendment.OldRateCode, _tmpInvoicePeriodAmendment.NewRealValue, _tmpInvoicePeriodAmendment.OldRealValue];
                break;

            case FINAmendmentType::Insurance:
                RORInsurancePercentage newInsurancePct, oldInsurancePct;

                if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Amount)
                {
                    switch (_tmpInvoicePeriodAmendment.RefTableId)
                    {
                        case tableNum(SalesLine):
                            FINCustInvoiceTrans finCustInvoiceTrans = FINCustInvoiceTrans::find(_tmpInvoicePeriodAmendment.CustInvoiceTransRecId, false);

                            newInsurancePct = finCustInvoiceTrans.getInsurancePercentageFromAmount(_tmpInvoicePeriodAmendment.NewRealValue);
                            oldInsurancePct = finCustInvoiceTrans.getInsurancePercentage();
                            break;
                    }
                }
                else if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Percentage)
                {
                    newInsurancePct = _tmpInvoicePeriodAmendment.NewRealValue;
                    oldInsurancePct = _tmpInvoicePeriodAmendment.OldRealValue;
                }

                ret = [newInsurancePct, oldInsurancePct];
                break;
            default:
                break; // Do nothing
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amendmentType2PriceComponent</Name>
				<Source><![CDATA[
    private FINInvoicePeriodPriceComponent amendmentType2PriceComponent(FINAmendmentType _amendmentType, FINAmendmentSubType _amendmentSubType)
    {
        FINInvoicePeriodPriceComponent priceComponent;

        switch (_amendmentType)
        {
            case FINAmendmentType::Price :
                priceComponent = _amendmentSubType == FINAmendmentSubType::Gross ?
                                                      FINInvoicePeriodPriceComponent::RentalPrice :
                                                      FINInvoicePeriodPriceComponent::RentalPriceNet;
                break;

            case FINAmendmentType::FullCredit :
                priceComponent = FINInvoicePeriodPriceComponent::FullCredit;
                break;

            case FINAmendmentType::RentalStop :
                priceComponent = FINInvoicePeriodPriceComponent::CalendarId;
                break;

            case FINAmendmentType::RateCode :
                priceComponent = FINInvoicePeriodPriceComponent::RateCode;
                break;

            case FINAmendmentType::Insurance :
                priceComponent = FINInvoicePeriodPriceComponent::Insurance;
            default:
                break; // Do nothing
                    
        }

        return priceComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculationDateTime</Name>
				<Source><![CDATA[
    public INVCalculationDateTime getCalculationDateTime()
    {
        return custInvoiceJour.FINCalculationDateTime ? custInvoiceJour.FINCalculationDateTime : formRun.getInvoiceCalculationDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsProforma</Name>
				<Source><![CDATA[
    public void setIsProforma(boolean _isProforma)
    {
        isProforma = _isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    protected void saveInvoiceCalculatorParm(ParmId _parmId)
    {
        FINInvoiceCalculatorParm invoiceCalculatorParmLocal;
        while select invoiceCalculatorParmLocal
        where invoiceCalculatorParmLocal.ParmId == _parmId
        {
            invoiceCalculatorParm.clear();
            buf2Buf(invoiceCalculatorParmLocal, invoiceCalculatorParm);
            invoiceCalculatorParm.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    public FINInvoiceCalculatorParm getInvoiceCalculatorParm(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        FINInvoiceCalculatorParm invoiceCalculatorParmLocal;
        invoiceCalculatorParmLocal.setTmp();

        select firstOnly invoiceCalculatorParm
        order by CreatedDateTime desc
        where invoiceCalculatorParm.OrderLineTableId == _tmpInvoicePeriodAmendment.RefTableId
        &&    invoiceCalculatorParm.OrderLineRecId == _tmpInvoicePeriodAmendment.RefRecId;

        buf2Buf(invoiceCalculatorParm, invoiceCalculatorParmLocal);
        invoiceCalculatorParmLocal.insert();

        return invoiceCalculatorParmLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceNote</Name>
				<Source><![CDATA[
    public DNRAdditionalNote parmInvoiceNote(DNRAdditionalNote _invoiceNote = invoiceNote)
    {
        invoiceNote = _invoiceNote;
        return invoiceNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceNote</Name>
				<Source><![CDATA[
    protected void addInvoiceNote()
    {
        if (invoiceNote)
        {
            CustInvoiceJour custInvoiceJourCredit = salesFormLetter.getOutputContract().parmJournal() as CustInvoiceJour;

            if (custInvoiceJourCredit.RecId && !DNRAdditionalNoteTable::find(custInvoiceJourCredit.TableId, custInvoiceJourCredit.RecId).RecId)
            {
                DNRAdditionalNoteTable additionalNoteTable;
                additionalNoteTable.initFromCommon(custInvoiceJourCredit);
                additionalNoteTable.InvoiceNote = invoiceNote;
                additionalNoteTable.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>