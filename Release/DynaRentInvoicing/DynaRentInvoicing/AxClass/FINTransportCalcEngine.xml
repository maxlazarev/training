<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINTransportCalcEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINTransportCalcEngine implements FINIInvoiceCalculatorGenericEngine
{
    FINInvoiceCalculatorParm        invoiceCalculatorParm;
    Common                          parmLine;
    RORRentalLine                   rentalLine;
    FINInvoicingOptions             invoicingOptions;
    FINTransportPriceJournalizer    journalizedData;
    #define.engineId('Trans')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustBeActive</Name>
				<Source><![CDATA[
    public boolean mustBeActive()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINTransportCalcEngine construct(FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
        FINTransportCalcEngine calcEngine = new FINTransportCalcEngine();
        calcEngine.initParameters(_invoiceCalculatorParm);
        return calcEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
        invoiceCalculatorParm = _invoiceCalculatorParm;
        parmLine = invoiceCalculatorParm.parmLine();
        rentalLine = invoiceCalculatorParm.rentalLine();
        invoicingOptions = invoiceCalculatorParm.getInvoicingOptions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunEngine</Name>
				<Source><![CDATA[
    protected boolean mustRunEngine()
    {
        boolean ret;

        if (invoicingOptions.includeUninvoiced
        && UnitOfMeasure::find(rentalLine.PriceTimeUnit).FINInvoiceTransportEngine)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDeliveryAmount</Name>
				<Source><![CDATA[
    protected container calculateDeliveryAmount()
    {
        // Delivery transport is charged with a first invoice.
        // If the first invoice was credited (together with Delivery cost) then it is re-charged with next invoice.
        AmountCur deliveryBaseAmount;
        AmountCur deliveryAmount;
        AmountCur deliveryDiscount;

        switch (rentalLine.TableId)
        {
            case tableNum(SalesLine):
                SalesLine salesLine = rentalLine as SalesLine;
                deliveryBaseAmount = salesLine.RORDeliveryGrossAmount;
                deliveryDiscount = (deliveryBaseAmount * salesLine.RORDeliveryPercentage/100);
                deliveryAmount = deliveryBaseAmount - deliveryDiscount;
                break;

            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = rentalLine as SalesQuotationLine;
                deliveryBaseAmount = salesQuotationLine.RORDeliveryGrossAmount;
                deliveryDiscount = (deliveryBaseAmount * salesQuotationLine.RORDeliveryPercentage/100);
                deliveryAmount = deliveryBaseAmount - deliveryDiscount;
                break;

            case tableNum(PurchLine):
                PurchLine purchLine = rentalLine as PurchLine;
                deliveryBaseAmount = purchLine.RORDeliveryGrossAmount;
                deliveryDiscount = (deliveryBaseAmount * purchLine.RORDeliveryPercentage/100);
                deliveryAmount = deliveryBaseAmount - deliveryDiscount;
                break;
        }

        return [deliveryBaseAmount, deliveryDiscount, deliveryAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReturnAmount</Name>
				<Source><![CDATA[
    protected container calculateReturnAmount()
    {
        // Return transport is charged with a last invoice.
        // If the last invoice was credited (together with Return cost) then it is re-charged with next invoice.
        AmountCur returnBaseAmount;
        AmountCur returnAmount;
        AmountCur returnDiscount;

        switch (rentalLine.TableId)
        {
            case tableNum(SalesLine):
                SalesLine salesLine = rentalLine as SalesLine;
                returnBaseAmount = salesLine.RORReturnGrossAmount;
                returnDiscount = (returnBaseAmount * salesLine.RORReturnPercentage/100);
                returnAmount = returnBaseAmount - returnDiscount;
                break;

            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = rentalLine as SalesQuotationLine;
                returnBaseAmount = salesQuotationLine.RORReturnGrossAmount;
                returnDiscount = (returnBaseAmount * salesQuotationLine.RORReturnPercentage/100);
                returnAmount = returnBaseAmount - returnDiscount;
                break;

            case tableNum(PurchLine):
                PurchLine purchLine = rentalLine as PurchLine;
                returnBaseAmount = purchLine.RORReturnGrossAmount;
                returnDiscount = (returnBaseAmount * purchLine.RORReturnPercentage/100);
                returnAmount = returnBaseAmount - returnDiscount;
                break;
        }

        return [returnBaseAmount, returnDiscount, returnAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturned</Name>
				<Source><![CDATA[
    protected boolean isReturned()
    {
        boolean ret;

        if (invoiceCalculatorParm.IsEstimation)
        {
            ret = true;
        }
        else
        {
            switch (rentalLine.TableId)
            {
                case tableNum(SalesLine):
                    SalesLine salesLine = rentalLine as SalesLine;
                    ret = (salesLine.RORInventReturned != 0);
                    break;

                case tableNum(PurchLine):
                    PurchLine purchLine = rentalLine as PurchLine;
                    ret = (purchLine.RORInventReturned != 0);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        if (this.mustRunEngine())
        {
            // Add result to a list storing a result of all engines.
            List resultList = List::create(invoiceCalculatorParm.InvoiceCalcResultListPacked);
            journalizedData = new FINTransportPriceJournalizer();

            FINPeriodSpecificationManager periodSpecificationManager = FINPeriodSpecificationManager::construct();
            periodSpecificationManager.populate(invoiceCalculatorParm, rentalLine, invoicingOptions);
            
            AmountCur deliveryAmount, returnBaseAmount, returnAmount, returnDiscount;
            RAGTierMultiplier tierMultiplier;

            if (periodSpecificationManager.mustBeInvoiced())
            {
                if (!FINOrderLineComponentInvoiceLog::isDeliveryReturnCharged(rentalLine, FINOrderLineComponent::DeliveryTransport) ||
                    FINOrderLineComponentInvoiceLog::isCreditingDeliveryReturn(rentalLine, invoiceCalculatorParm, FINOrderLineComponent::DeliveryTransport))
                {
                    tierMultiplier = periodSpecificationManager.getTransportTierMultiplier();
                    AmountCur deliveryBaseAmount, deliveryDiscount;

                    [deliveryBaseAmount, deliveryDiscount, deliveryAmount] = this.calculateDeliveryAmount();
                    deliveryAmount = deliveryAmount * tierMultiplier;

                    journalizedData.addResult([FINRentalAccountType::DeliveryTransport, [deliveryBaseAmount, deliveryDiscount, tierMultiplier, deliveryAmount]]);
                }
                
                                
                if (this.isReturned()
                && (!FINOrderLineComponentInvoiceLog::isDeliveryReturnCharged(rentalLine, FINOrderLineComponent::ReturnTransport) ||
                    FINOrderLineComponentInvoiceLog::isCreditingDeliveryReturn(rentalLine, invoiceCalculatorParm, FINOrderLineComponent::ReturnTransport)))
                {
                    tierMultiplier = periodSpecificationManager.getTransportTierMultiplier();
                    [returnBaseAmount, returnDiscount, returnAmount] = this.calculateReturnAmount();
                    returnAmount = returnAmount * tierMultiplier;

                    journalizedData.addResult([FINRentalAccountType::ReturnTransport, [returnBaseAmount, returnDiscount, tierMultiplier, returnAmount]]);
                }
            }
            // Return note might be posted after an order is fully invoiced
            else if (this.isReturned()
            && !FINOrderLineComponentInvoiceLog::isDeliveryReturnCharged(rentalLine, FINOrderLineComponent::ReturnTransport))
            {
                tierMultiplier = periodSpecificationManager.getTransportTierMultiplier();
                [returnBaseAmount, returnDiscount, returnAmount] = this.calculateReturnAmount();
                returnAmount = returnAmount * tierMultiplier;

                journalizedData.addResult([FINRentalAccountType::ReturnTransport, [returnBaseAmount, returnDiscount, tierMultiplier, returnAmount]]);
            }

            if (deliveryAmount)
            {
                FINInvoiceCalcResult result = FINInvoiceCalcResult::construct(FINRentalAccountType::DeliveryTransport, deliveryAmount);
                resultList.addEnd(result);
                invoiceCalculatorParm.MustBeInvoiced = true;
            }

            if (returnAmount)
            {
                FINInvoiceCalcResult result = FINInvoiceCalcResult::construct(FINRentalAccountType::ReturnTransport, returnAmount);
                resultList.addEnd(result);
                invoiceCalculatorParm.MustBeInvoiced = true;
            }

            invoiceCalculatorParm.WasAnyEngineExecuted = NoYes::Yes;
            invoiceCalculatorParm.PeriodSpecificationPacked = periodSpecificationManager.getSpecificationMap().pack();
            invoiceCalculatorParm.IsPeriodSpecificationCalculated = NoYes::Yes;
            invoiceCalculatorParm.InvoiceCalcResultListPacked = resultList.pack();
            invoiceCalculatorParm.TransportCalcPacked = journalizedData.pack();
        }
        else if(!this.mustKeepExistingCalc())
        {
            //Clear any pre-calculated information which is copied from previous calculations
            invoiceCalculatorParm.TransportCalcPacked = conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustKeepExistingCalc</Name>
				<Source><![CDATA[
    protected boolean mustKeepExistingCalc()
    {
        FINTransportPriceJournalizer transportPriceJournalizer = new FINTransportPriceJournalizer();

        if (conLen(invoiceCalculatorParm.TransportCalcPacked) > 0)
        {
            transportPriceJournalizer.unpack(invoiceCalculatorParm.TransportCalcPacked);

            //The negative amounts originate from CreditCalcEngine
            return transportPriceJournalizer.getDeliveryAmount() < 0 || transportPriceJournalizer.getReturnAmount() < 0;
        }

        return false;     
    }

]]></Source>
			</Method>
			<Method>
				<Name>engineId</Name>
				<Source><![CDATA[
    public Num engineId()
    {
        return #engineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public Description description()
    {
        return "@DNR:TransportEngineDescr";
    }

]]></Source>
			</Method>
			<Method>
				<Name>publisher</Name>
				<Source><![CDATA[
    public Name publisher()
    {
        return "@DNR:ToIncreasePublisher";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>