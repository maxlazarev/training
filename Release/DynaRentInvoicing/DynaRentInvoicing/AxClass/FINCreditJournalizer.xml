<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINCreditJournalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINCreditJournalizer implements FINIGenericJournalizer
{
    Set invoiceTransRefdSet = new Set(Types::container);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResult</Name>
				<Source><![CDATA[
    public void addResult(anytype _result)
    {
        invoiceTransRefdSet.add(_result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetOfCreditedJournalTransRef</Name>
				<Source><![CDATA[
    public Set getSetOfCreditedJournalTransRef()
    {
        return invoiceTransRefdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryReturnAmount</Name>
				<Source><![CDATA[
    public container getDeliveryReturnAmount()
    {
        AmountCur deliveryAmount, returnAmount;

        SetEnumerator enumerator = invoiceTransRefdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            AmountCur   deliveryAmountCurrent, returnAmountCurrent;
            RecId       recIdRef;
            TableId     tableIdRef;
            
            [tableIdRef, recIdRef] = enumerator.current();

            switch (tableIdRef)
            {
                case tableNum(CustInvoiceTrans):
                    [deliveryAmountCurrent, returnAmountCurrent] = FINCustInvoiceTrans::getDeliveryReturnAmount(recIdRef);

                    break;

                case tableNum(VendInvoiceTrans):

                    [deliveryAmountCurrent, returnAmountCurrent] = FINVendInvoiceTrans::getDeliveryReturnAmount(recIdRef);

                    break;

                case tableNum(ProjInvoiceItem):
                    [deliveryAmountCurrent, returnAmountCurrent] = FINProjInvoiceItem::getDeliveryReturnAmount(recIdRef);

                    break;

                case tableNum(ProjJournalTrans):
                    [deliveryAmountCurrent, returnAmountCurrent] = FINProjJournalTrans::getDeliveryReturnAmount(recIdRef);
            }

            deliveryAmount += deliveryAmountCurrent;
            returnAmount += returnAmountCurrent;
        }

        return [deliveryAmount, returnAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsuranceAmount</Name>
				<Source><![CDATA[
    public AmountCur getInsuranceAmount()
    {
        AmountCur insuranceAmount;

        SetEnumerator enumerator = invoiceTransRefdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            AmountCur   insuranceAmountCurrent;
            RecId       recIdRef;
            TableId     tableIdRef;
            
            [tableIdRef, recIdRef] = enumerator.current();

            switch (tableIdRef)
            {
                case tableNum(CustInvoiceTrans):
                    insuranceAmountCurrent = FINCustInvoiceTrans::getInsuranceAmount(recIdRef);

                    break;

                case tableNum(VendInvoiceTrans):
                    insuranceAmountCurrent = FINVendInvoiceTrans::getInsuranceAmount(recIdRef);

                    break;

                case tableNum(ProjInvoiceItem):
                    insuranceAmountCurrent = FINProjInvoiceItem::getInsuranceAmount(recIdRef);

                    break;

                case tableNum(ProjJournalTrans):
                    insuranceAmountCurrent = FINProjJournalTrans::getInsuranceAmount(recIdRef);

                    break;
            }

            insuranceAmount += insuranceAmountCurrent;
        }

        return insuranceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicedQty</Name>
				<Source><![CDATA[
    public Qty getInvoicedQty()
    {
        Qty invoicedQty;

        SetEnumerator enumerator = invoiceTransRefdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            AmountCur   deliveryAmountCurrent, returnAmountCurrent;
            RecId       recIdRef;
            TableId     tableIdRef;
            
            [tableIdRef, recIdRef] = enumerator.current();

            switch (tableIdRef)
            {
                case tableNum(CustInvoiceTrans):
                    CustInvoiceTrans custInvoiceTrans;

                    select firstonly Qty from custInvoiceTrans
                    where custInvoiceTrans.RecId == recIdRef;

                    invoicedQty = custInvoiceTrans.Qty;

                    break;

                case tableNum(VendInvoiceTrans):
                    VendInvoiceTrans vendInvoiceTrans;

                    select firstonly Qty from vendInvoiceTrans
                    where vendInvoiceTrans.RecId == recIdRef;

                    invoicedQty = vendInvoiceTrans.Qty;

                    break;

                case tableNum(ProjInvoiceItem):
                    ProjInvoiceItem projInvoiceItem;

                    select firstonly Qty from projInvoiceItem
                    where projInvoiceItem.RecId == recIdRef;

                    invoicedQty = projInvoiceItem.Qty;

                    break;

                case tableNum(ProjJournalTrans):
                    ProjJournalTrans projJournalTrans;

                    select firstonly Qty from projJournalTrans
                    where projJournalTrans.RecId == recIdRef;

                    invoicedQty = projJournalTrans.Qty;

                    break;
            }
        }

        return invoicedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return invoiceTransRefdSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedValues)
    {
        invoiceTransRefdSet = Set::create(_packedValues);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValues</Name>
				<Source><![CDATA[
    public Set getChargedValues()
    {
        Set             ret                         = new Set(Types::Container);
        Set             invoiceTransChargedValues   = new Set(Types::Container);
        SetEnumerator   enumerator                  = invoiceTransRefdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            RecId   recIdRef;
            TableId tableIdRef;
            
            [tableIdRef, recIdRef] = enumerator.current();

            switch (tableIdRef)
            {
                case tableNum(CustInvoiceTrans):
                    FINCustInvoiceTrans finCustInvoiceTrans;

                    select firstonly finCustInvoiceTrans
                    where finCustInvoiceTrans.CustInvoiceTransRecId == recIdRef;

                    invoiceTransChargedValues = finCustInvoiceTrans.getChargedValuesPerEngine();

                    break;

                case tableNum(VendInvoiceTrans):
                    FINVendInvoiceTrans finVendInvoiceTrans;

                    select firstonly finVendInvoiceTrans
                    where finVendInvoiceTrans.VendInvoiceTransRecId == recIdRef;

                    invoiceTransChargedValues = finVendInvoiceTrans.getChargedValuesPerEngine();

                    break;

                case tableNum(ProjInvoiceItem):

                    FINProjInvoiceItem finProjInvoiceItem;

                    select firstonly finProjInvoiceItem
                    where finProjInvoiceItem.ProjInvoiceItemRecId == recIdRef;

                    invoiceTransChargedValues = finProjInvoiceItem.getChargedValuesPerEngine();

                    break;

                case tableNum(ProjJournalTrans):

                    FINProjJournalTrans finProjJournalTrans;

                    select firstonly finProjJournalTrans
                    where finProjJournalTrans.ProjJournalTransRecId == recIdRef;

                    invoiceTransChargedValues = finProjJournalTrans.getChargedValuesPerEngine();

                    break;
            }
        }

        SetEnumerator enumeratorInvoiceTrans = invoiceTransChargedValues.getEnumerator();

        while (enumeratorInvoiceTrans.moveNext())
        {
            FINRentalAccountType    accountType;
            AmountCur               amount;
            Description             description;
            boolean                 isCredit;
            FINRentalAccountType    creditAccountType;
            Counter                 idx;

            [accountType, amount, description, isCredit, creditAccountType, idx] = enumeratorInvoiceTrans.current();

            ret.add([accountType, - amount, strFmt("Credited - %1", description), isCredit, creditAccountType, idx]);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>