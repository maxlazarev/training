<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoicePostingSetupCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINInvoicePostingSetupCache
{
    private const str AccountItemMarkupCodeScope = 'FINInvoicePostingSetupCache_AIMC';
    private const str ItemRelationExistsScope = 'FINInvoicePostingSetupCache_IRES';
    private const str AccountRelationExistsScope = 'FINInvoicePostingSetupCache_ERES';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    public static void clearCache()
    {
        SysGlobalObjectCache cache = classfactory.globalObjectCache();

        cache.clear(AccountItemMarkupCodeScope);
        cache.clear(ItemRelationExistsScope);
        cache.clear(AccountRelationExistsScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountItemMarkupCodeFromParameters</Name>
				<Source><![CDATA[
    static public container getAccountItemMarkupCodeFromParameters(FINInvoicePostingCacheParameters _cacheParameters)
    {
        var key = FINInvoicePostingSetupCache::makeKeyAccItemFromParameters(_cacheParameters);

        return classfactory.globalObjectCache().find(AccountItemMarkupCodeScope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountRelationExists</Name>
				<Source><![CDATA[
    public static container getAccountRelationExists(TableGroupAll _accountCode, CustVendRel _accountRelation)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = FINInvoicePostingSetupCache::makeKeyAccountRelationExists(_accountCode, _accountRelation);

        return sgoc.find(AccountRelationExistsScope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemRelationExists</Name>
				<Source><![CDATA[
    public static container getItemRelationExists(TableGroupAll _itemCode, ItemRelation _itemRelation)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = FINInvoicePostingSetupCache::makeKeyItemRelationExists(_itemCode, _itemRelation);

        return sgoc.find(ItemRelationExistsScope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccountItemMarkupCodeFromParameters</Name>
				<Source><![CDATA[
    static public void insertAccountItemMarkupCodeFromParameters(FINInvoicePostingCacheParameters _cacheParameters)
    {
        var key = FINInvoicePostingSetupCache::makeKeyAccItemFromParameters(_cacheParameters);

        classfactory.globalObjectCache().insert(AccountItemMarkupCodeScope, key, [_cacheParameters.MarkupCode]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccountRelationExists</Name>
				<Source><![CDATA[
    public static void insertAccountRelationExists(TableGroupAll _accountCode, CustVendRel _accountRelation, boolean _exists)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = FINInvoicePostingSetupCache::makeKeyAccountRelationExists(_accountCode, _accountRelation);

        sgoc.insert(AccountRelationExistsScope, key, [_exists]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemRelationExists</Name>
				<Source><![CDATA[
    public static void insertItemRelationExists(TableGroupAll _itemCode, ItemRelation _itemRelation, boolean _exists)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = FINInvoicePostingSetupCache::makeKeyItemRelationExists(_itemCode, _itemRelation);

        sgoc.insert(ItemRelationExistsScope, key, [_exists]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeKeyAccItemFromParameters</Name>
				<Source><![CDATA[
    private static container makeKeyAccItemFromParameters(FINInvoicePostingCacheParameters _cacheParameters)
    {
        var key = '';

        // Create fixed key part - Use a string for the key since at most 5 elements can exist in the key container
        key += curext(); // Global object cache is shared between legal entities, so we need to track this as well.
        key += '~';
        key += int2str(enum2int(_cacheParameters.PostingModuleType));
        key += '~';
        key += int2str(enum2int(_cacheParameters.RentalAccountType));
        key += '~';
        key += int2str(enum2int(_cacheParameters.ModuleType));
        key += '~';
        key += _cacheParameters.ItemId;
        key += '~';
        key += _cacheParameters.ItemGroup;
        key += '~';
        key += _cacheParameters.AccountNum;
        key += '~';
        key += _cacheParameters.AccountGroup;
        key += '~';
        key += _cacheParameters.RentalConceptCode;

        return [key];
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeKeyAccountRelationExists</Name>
				<Source><![CDATA[
    private static container makeKeyAccountRelationExists(TableGroupAll _accountCode, CustVendRel _accountRelation)
    {
        return [curext(), _accountCode, _accountRelation];
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeKeyItemRelationExists</Name>
				<Source><![CDATA[
    private static container makeKeyItemRelationExists(TableGroupAll _itemCode, ItemRelation _itemRelation)
    {
        return [curext(), _itemCode, _itemRelation];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>