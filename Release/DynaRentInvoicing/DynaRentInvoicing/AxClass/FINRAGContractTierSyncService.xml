<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINRAGContractTierSyncService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINRAGContractTierSyncService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        
        this.syncRentalOrders();
        this.syncSubRentalOrders();
        this.syncRentalQuotations();

        info("@DNR:SyncronizationFinished");

    }

]]></Source>
			</Method>
			<Method>
				<Name>syncRentalOrders</Name>
				<Source><![CDATA[
    protected void syncRentalOrders()
    {
        SalesLine salesLine;

        while select salesLine
        where salesLine.RORTradeType    != RORTradeType::SalesPurch
          && (salesLine.SalesStatus     == SalesStatus::Backorder
          || salesLine.SalesStatus      == SalesStatus::Delivered)
        {
            try
            {
                ttsbegin;
                FINRAGContractLineTier::syncContractLineTiers(salesLine);
                ttsCommit;
            }
            catch
            {
                warning(strFmt("@DNR:ErrorEncounteredForRentalOrder", salesLine.SalesId, salesLine.InventTransId));
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncSubRentalOrders</Name>
				<Source><![CDATA[
    protected void syncSubRentalOrders()
    {
        PurchLine purchLine;

        while select purchLine
        where purchLine.RORTradeType    != RORTradeType::SalesPurch
          && (purchLine.PurchStatus     == PurchStatus::Backorder
           || purchLine.PurchStatus     == PurchStatus::Received)
        {
            try
            {
                ttsbegin;
                FINRAGContractLineTier::syncContractLineTiers(purchLine);
                ttscommit;
            }
            catch
            {
                warning(strFmt("@DNR:ErrorEncounteredForSubRental", purchLine.PurchId, purchLine.InventTransId));
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncRentalQuotations</Name>
				<Source><![CDATA[
    protected void syncRentalQuotations()
    {
        SalesQuotationLine salesQuotationLine;

        while select salesQuotationLine
            where salesQuotationLine.RORTradeType       != RORTradeType::SalesPurch
              && (salesQuotationLine.QuotationStatus    == SalesQuotationStatus::Created
               || salesQuotationLine.QuotationStatus    == SalesQuotationStatus::Sent)
        {
            try
            {
                ttsbegin;
                FINRAGContractLineTier::syncContractLineTiers(salesQuotationLine);
                ttscommit;
            }
            catch
            {
                warning(strFmt("@DNR:ErrorEncounteredForRentalQuotation", salesQuotationLine.QuotationId, salesQuotationLine.InventTransId));
                continue;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>