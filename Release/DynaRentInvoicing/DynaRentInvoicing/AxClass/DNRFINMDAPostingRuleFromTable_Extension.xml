<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRFINMDAPostingRuleFromTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(FINMDAPostingRuleFrom))]
public final class DNRFINMDAPostingRuleFromTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBestMatch</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInvalidInitFormMethodWarning", "Validation of caller must be performed before invoking super()"),
     SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method")]
    public static server FINMDAPostingRuleFrom findBestMatch(
        RecId                   _ledgerDimension, // main account
        DimensionDefault        _dimension,
        CurrentOperationsTax    _postingLayer,
        LedgerPostingType       _postingType,
        FINMDAModelId           _modelId)
    {
        FINMDAPostingRuleFrom               currentPostingRule;
        FINMDAPostingRuleFrom               bestPostingRule = next findBestMatch(_ledgerDimension, _dimension, _postingLayer, _postingType, _modelId);
        DimensionAttributeValueCombination  dimAttValCombination;
        DimensionAttributeValueSetItem      dimAttValSetItemOriginating;
        DimensionAttributeValueSetItem      dimAttValSetItemMatch;
        int                                 currentMatch;
        int                                 bestMatch = -1;
        boolean                             isRuleValid;
        ;
    
        if (_ledgerDimension && _postingType != LedgerPostingType::FINMDAReversal)
        {
            while select currentPostingRule
            where currentPostingRule.ModelId == _modelId
            &&   (currentPostingRule.isActiveWhenNesting == NoYes::Yes ||
                 (_postingType != LedgerPostingType::Allocation &&
                  _postingType != LedgerPostingType::FINMDA))
            &&   (currentPostingRule.isActiveFromGeneralJour == NoYes::Yes || _postingType != LedgerPostingType::LedgerJournal)
            &&  ((_postingLayer == CurrentOperationsTax::Current && currentPostingRule.PostingLayer == CurrentOperationsTax::Current) ||
                 (_postingLayer == CurrentOperationsTax::Operations && currentPostingRule.PostingLayer == CurrentOperationsTax::Operations) ||
                 (_postingLayer == CurrentOperationsTax::Tax && currentPostingRule.PostingLayer == CurrentOperationsTax::Tax))
                exists join dimAttValCombination
                where dimAttValCombination.RecId == currentPostingRule.LedgerDimension
                &&    dimAttValCombination.MainAccount == _ledgerDimension
            {
                isRuleValid = true;
                currentMatch = 0;
    
                while select RecId from dimAttValSetItemOriginating
                where dimAttValSetItemOriginating.DimensionAttributeValueSet == currentPostingRule.DefaultDimension
                    outer join RecId from dimAttValSetItemMatch
                    where dimAttValSetItemMatch.DimensionAttributeValue     == dimAttValSetItemOriginating.DimensionAttributeValue
                    &&    dimAttValSetItemMatch.DimensionAttributeValueSet  == _dimension
                {
                    if (dimAttValSetItemMatch)
                    {
                        currentMatch ++;
                    }
                    else
                    {
                        isRuleValid = false;
                        break;
                    }
                }
    
                if (isRuleValid && currentMatch > bestMatch)
                {
                    bestPostingRule = currentPostingRule.data();
                    bestMatch = currentMatch;
                }
            }
        }
    
        return bestPostingRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>