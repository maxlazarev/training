<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINPurchConfirmationJournalPostCls_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchConfirmationJournalPost))]
public final class FINPurchConfirmationJournalPostCls_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postJournalPost</Name>
				<Source><![CDATA[
    public void postJournalPost()
    {
        next postJournalPost();
    
        this.FINJournalizeTotals();

        this.FINUnloadContainerData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINJournalizeTotals</Name>
				<Source><![CDATA[
    // Extension methods
    private void FINJournalizeTotals()
    {
        if (purchTable.PurchaseType == PurchaseType::RORSubRental
        &&  FINInvoiceServiceController_RentalInvoice::mustJournalizeRentalTotalsDuringConfirmation())
        {
            ttsbegin;

            FINPurchTotals finPurchTotals = new FINPurchTotals();
            finPurchTotals.parmCallerBuffer(purchTable);
            finPurchTotals.parmDocumentStatus(DocumentStatus::Confirmation);
            finPurchTotals.prepareDataForTotals();
        
            ParmId parmId = finPurchTotals.getParmTable().ParmId;
            
            FINPurchLineAllVersions     finPurchLineAllVersions;
            PurchLine                   purchLineLoc;
            FINInvoiceCalculatorParm    invoiceCalculatorParmLoc;
            RefTableId                  refTableId = tableNum(PurchLine);
            RefRecId                    purchTableVersionRecId = purchTableVersion.RecId;

            insert_recordset finPurchLineAllVersions(RefRecId, RefTableId, PurchTableVersion, ConsumptionCalcPacked, CostPriceCalcPacked, CreditCalcPacked, InvoiceAmount, InvoiceCalcResultListPacked, ManualCalcPacked,
            MarkupAmount, PeriodSpecificationPacked, PriceComponentsAmendmentPacked, ProjHoursCalcPacked, RAGContractLinePacked, RAGContractTiersPacked, RentalCalcPacked, TransportCalcPacked)
            select RecId from purchLineLoc
            where purchLineLoc.PurchId == vendPurchOrderJour.PurchId
            &&    purchLineLoc.RORTradeType != RORTradeType::SalesPurch
                join refTableId, purchTableVersionRecId, ConsumptionCalcPacked, CostPriceCalcPacked, CreditCalcPacked, InvoiceAmount, InvoiceCalcResultListPacked, ManualCalcPacked, MarkupAmount, 
                PeriodSpecificationPacked, PriceComponentsAmendmentPacked, ProjHoursCalcPacked, RAGContractLinePacked, RAGContractTiersPacked, RentalCalcPacked, TransportCalcPacked
                from  invoiceCalculatorParmLoc
                where invoiceCalculatorParmLoc.ParmId == parmId
                &&    invoiceCalculatorParmLoc.OrderLineTableId == purchLineLoc.TableId
                &&    invoiceCalculatorParmLoc.OrderLineRecId == purchLineLoc.RecId;

            finPurchTotals.cleanupPrecalculatedData();

            // During the journalization, temporary markup transactions are being created which in turn sets the document accounting status to In process.
            // In order to ensure consistency, after removing the transactions, we need to reset the status to Completed.
            this.processSourceDocument();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUnloadContainerData</Name>
				<Source><![CDATA[
    private void FINUnloadContainerData()
    {
        FINPurchLineAllVersions finPurchLineAllVersions;
        PurchLine               purchLine;

        ttsbegin;

        while select forupdate FINPurchLineAllVersions
            join TableId from purchLine
            where FINPurchLineAllVersions.RefRecId          == purchLine.RecId
            &&   FINPurchLineAllVersions.RefTableId         == purchLine.TableId
            &&   FINPurchLineAllVersions.PurchTableVersion  == purchTableVersion.RecId
            &&   purchLine.PurchId                          == vendPurchOrderJour.PurchId
            &&   purchLine.RORTradeType                     != RORTradeType::SalesPurch
        {
            FINPurchLineAllVersions.FINRentalInvoiceLinePacked::unloadData();
            FINPurchLineAllVersions.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>