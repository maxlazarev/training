<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesEditLinesForm1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(SalesEditLines))]
public final class DNRSalesEditLinesForm1_Extension
{
    private boolean isRentalInvoice, isRentalInvoiceProposal;
    private int infologLine;
    // Chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    boolean canClose()
    {
        boolean ret = next canClose();

        if (ret)
        {
            infolog.clear(infologLine - 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        next run();

        if (SalesParmUpdate_FINProforma.visible())
        {
            this.FINUpdateDesignRentalInvoiceProposal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void  init()
    {
        next init();

        isRentalInvoice = salesFormLetter.RORIsRentalPosting();

        if (isRentalInvoice)
        {
            FINTimezoneCheckProcess checkProcess = FINRentalOrderTimezoneCheck::getProcessFromMenuItem(salesFormLetter.RORparmCallerMenuItem());

            if (checkProcess != FINTimezoneCheckProcess::Unknown)
            {
                FINRentalOrderTimezoneCheck rentalOrderTimezoneCheck = FINRentalOrderTimezoneCheck::construct(salesFormLetter.salesTable(), checkProcess, false);
                rentalOrderTimezoneCheck.checkTimezone();

                infologLine = rentalOrderTimezoneCheck.getInfologLine();
            }
        }
    
        // visible during invoicing
        FINRentalInvoiceDetail.visible(isRentalInvoice);
        FINCustInvoiceTransPeriods.visible(isRentalInvoice);

        boolean finIsProforma = isRentalInvoice
            && salesFormLetter.RORparmCallerMenuItem() != menuitemactionstr(RORSalesFormLetter_InvoiceProj_Action)
            && RORParameters::find().FINIsRentalProformaActive
            && documentStatus == DocumentStatus::Invoice
            && !salesFormLetter.proforma();
        // Project invoicing has its own invoice proposal feature so use this one only for regular rental order invoicing
        
        SalesParmUpdate_FINProforma.visible(finIsProforma);
        salesParmUpdate_ds.object(fieldNum(SalesParmUpdate, FINProforma)).visible(finIsProforma);

        if (finIsProforma)
        {
            isRentalInvoiceProposal = salesFormLetter.FINParmPostInvoiceProposal();
        }

        FormDataSource salesParmLine_ds = this.dataSource(formDataSourceStr(SalesEditLines, SalesParmLine));
        salesParmLine_ds.object(fieldNum(SalesParmLine, FINLineAmount)).visible(isRentalInvoice);
        salesParmLine_ds.object(fieldNum(SalesParmLine, LineAmount)).visible(!isRentalInvoice);

        salesParmUpdate_ds.object(fieldNum(SalesParmUpdate, FINForceInvoiceUntilPoint)).visible(isRentalInvoice && salesEditLinesForm is SalesEditLinesForm_Invoice);

        boolean isCalledFromRentalCreditWizard = (salesFormLetter.RORparmCallerMenuItem() == menuitemactionstr(INVSalesFormLetter_InvoiceCreditWizard));
        this.FINUpdateDesignCreditWizard(isCalledFromRentalCreditWizard);

        boolean isProjInvoice = (salesFormLetter.RORparmCallerMenuItem() == menuitemactionstr(RORSalesFormLetter_InvoiceProj_Action));
        
        FormDesign formDesign = this.design();
        formDesign.controlName(formControlStr(SalesEditLines, FINProjJournalTransPeriods)).visible(isProjInvoice);
        formDesign.controlName(formControlStr(SalesEditLines, FINCustInvoiceTransPeriods)).visible(!isProjInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    void closeOk()
    {
        next closeOk();

        if (isRentalInvoice)
        {
            runAsync(classNum(FINInvoiceServiceController_RentalInvoice), staticMethodStr(FINInvoiceServiceController_RentalInvoice,  cleanUpOrphanCalcParmAsync), [salesParmUpdate.ParmId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByChanged</Name>
				<Source><![CDATA[
    void sumByChanged(boolean _init)
    {
        if (_init
        &&  salesParmUpdate.SumBy == AccountOrder::Order
        &&  isRentalInvoiceProposal)
        {
            initSumSalesId = salesParmUpdate.SumSalesId;
        }

        next sumByChanged(_init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUpdateDesignCreditWizard</Name>
				<Source><![CDATA[
    // Extension methods

    private void FINUpdateDesignCreditWizard(boolean _isCalledFromRentalCreditWizard)
    {
        FormDesign formDesign = this.design();

        formDesign.controlName(formControlStr(SalesEditLines, AddHeaderButton)).enabled(!_isCalledFromRentalCreditWizard);
        formDesign.controlName(formControlStr(SalesEditLines, RemoveHeaderButton)).enabled(!_isCalledFromRentalCreditWizard);
        formDesign.controlName(formControlStr(SalesEditLines, buttonSelectJournal)).enabled(!_isCalledFromRentalCreditWizard);

        formDesign.controlName(formControlStr(SalesEditLines, DeleteLineButton)).enabled(!_isCalledFromRentalCreditWizard);
        formDesign.controlName(formControlStr(SalesEditLines, LineStripUpdate)).enabled(!_isCalledFromRentalCreditWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUpdateDesignRentalInvoiceProposal</Name>
				<Source><![CDATA[
    private void FINUpdateDesignRentalInvoiceProposal()
    {
        FormDesign formDesign = this.design();

        specQty.allowEdit(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, groupSetup)).allowEdit(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, groupSumSalesGroup)).allowEdit(!isRentalInvoiceProposal);

        SalesParmUpdate_FINProforma.enabled(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, INVCalculationPointGroup_INVCalculationDateTime)).allowEdit(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, SalesParmUpdate_FINForceInvoiceUntilPoint)).allowEdit(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, INVIncludeLinesGroup)).allowEdit(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, Choose)).enabled(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, buttonReArrange)).enabled(!isRentalInvoiceProposal);
        formDesign.controlName(formControlStr(SalesEditLines, InventTransPick)).visible(!isRentalInvoiceProposal);
        SalesParmLine_ds.allowDelete(!isRentalInvoiceProposal);
               
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdateDS_FINProforma_OnModified</Name>
				<Source><![CDATA[
    // Event handler methods
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmUpdate, FINProforma), FormDataFieldEventType::Modified)]
    public static void DNREvent_SalesParmUpdateDS_FINProforma_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormDataSource salesParmUpdateDS = _sender.datasource() as FormDataSource;

        if (salesParmUpdateDS)
        {
            salesParmUpdateDS.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdate_FINProforma_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(SalesEditLines, SalesParmUpdate_FINProforma), FormControlEventType::Modified)]
    public static void DNREvent_SalesParmUpdate_FINProforma_OnModified(FormControl _sender, FormControlEventArgs _eventArgs)
    {        
        FormRun formRun = _sender.formRun() as FormRun;
        
        if (formRun)
        {
            FormDataSource      salesParmUpdateDS = formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmUpdate)) as FormDataSource;
            FormDataSource      salesParmTableDS = formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)) as FormDataSource;
            SalesParmUpdate     salesParmUpdate = salesParmUpdateDS.cursor() as SalesParmUpdate;
            SalesParmTable      salesParmTable = salesParmTableDS.cursor() as SalesParmTable;
            Object              hostObj = formRun as Object;
            SalesFormLetter     salesFormLetter = hostObj.DNRgetSalesFormLetter();

            FormComboBoxControl print_Combo = formRun.control(formRun.controlId(formControlStr(SalesEditLines, print_Combo))) as FormComboBoxControl;
            FormCheckBoxControl updateNow = formRun.control(formRun.controlId(formControlStr(SalesEditLines, updateNow))) as FormCheckBoxControl;
            FormCheckBoxControl printFacture_RU = formRun.control(formRun.controlId(formControlStr(SalesEditLines, printFacture_RU))) as FormCheckBoxControl;

            if (print_Combo && updateNow && printFacture_RU && salesFormLetter)
            {
                print_Combo.enabled(updateNow.value());
                if (updateNow.value())
                {
                    print_Combo.selection(salesFormLetter.printout());
                    printFacture_RU.enabled(true);
                }
                else
                {
                    print_Combo.selection(Printout::Current);
                    if (salesParmTable.Correct_RU)
                    {
                        printFacture_RU.enabled(false);
                        printFacture_RU.value(false);
                    }
                }
            }

            formRun.enabledDisabledPrintEntryCertificate_W();
            formRun.enabledDisabledPrintCODCashReceipt_W();
        }        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>