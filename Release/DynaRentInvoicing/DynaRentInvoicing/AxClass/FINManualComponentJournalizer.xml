<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINManualComponentJournalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINManualComponentJournalizer implements FINIGenericJournalizer
{
    Set manualChargeSet = new Set(Types::Container);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResult</Name>
				<Source><![CDATA[
    public void addResult(anytype _result)
    {
        if (_result is FINManualPriceComponent)
        {
            FINManualPriceComponent manualPriceComponent = _result as FINManualPriceComponent;
            manualChargeSet.add([manualPriceComponent.AmountCur, manualPriceComponent.Description, manualPriceComponent.IsCredit, manualPriceComponent.CreditAccountType, manualPriceComponent.RecId]);
        }
        else if (_result is FINManualPriceComponentProforma)
        {
            boolean hasCreditAccountType; // Default is false for proforma
            FINManualPriceComponentProforma manualPriceComponentProforma = _result as FINManualPriceComponentProforma;
            manualChargeSet.add([manualPriceComponentProforma.AmountCur, manualPriceComponentProforma.Description, hasCreditAccountType, 0, manualPriceComponentProforma.RecId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetOfManualComponentsValues</Name>
				<Source><![CDATA[
    public Set getSetOfManualComponentsValues()
    {
        return manualChargeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return manualChargeSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedValues)
    {
        manualChargeSet = _packedValues == conNull() ? new Set(Types::Container) : Set::create(_packedValues);
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValues</Name>
				<Source><![CDATA[
    public Set getChargedValues()
    {
        SetEnumerator enumerator = manualChargeSet.getEnumerator();
        Set ret = new Set(Types::Container);
        Counter idx;

        while (enumerator.moveNext())
        {
            FINRentalAccountType    accountType = FINRentalAccountType::Manual;
            AmountCur               amount;
            Description             description;
            boolean                 isCredit;
            FINRentalAccountType    creditAccountType;
            RefRecId                componentRecId;

            [amount, description, isCredit, creditAccountType, componentRecId] = enumerator.current();

            if (amount)
            {
                idx += 1;
                ret.add([accountType, amount, description, isCredit, creditAccountType, idx]);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalChargedValue</Name>
				<Source><![CDATA[
    public Amount getTotalChargedValue()
    {
        SetEnumerator enumerator = manualChargeSet.getEnumerator();
        Amount ret;

        while (enumerator.moveNext())
        {
            AmountCur               amount;
            Description             description;
            boolean                 isCredit;
            FINRentalAccountType    creditAccountType;
            RefRecId                componentRecId;

            [amount, description, isCredit, creditAccountType, componentRecId] = enumerator.current();

            if (!isCredit)
            {
                ret += amount;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>