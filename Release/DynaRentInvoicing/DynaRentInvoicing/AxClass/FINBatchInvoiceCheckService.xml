<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINBatchInvoiceCheckService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>FINBatchInvoiceCheckService</c> contains the logic to execute Advanced batch rental invoice checks.
/// </summary>
class FINBatchInvoiceCheckService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic of the class
    /// </summary>
    /// <param name = "_contract">The datacontract associated with the controller class</param>
    public void run(FINBatchInvoiceCheckContract _contract)
    {
        #OCCRetryCount
        
        try
        {
            if (_contract.parmAuditTrail())
            {
                // The code below should not be included in the tts-block because the DNRPreInvoiceCheck performs its own exception handling 
                DNRPreInvoiceCheck invoiceChecker = new DNRPreInvoiceCheck();
                invoiceChecker.initFromAuditTrail(_contract.parmAuditTrail());
                invoiceChecker.parmPrePostInvoiceCheck(_contract.parmPrePostInvoiceCheck());
                invoiceChecker.parmInvoiceCheckSelectionMap(Map::create(_contract.parmInvoiceCheckSelectionMapPacked()));
                invoiceChecker.run();

                ttsbegin;

                FINBatchInvoiceAuditTrail invoiceAuditTrail;
                invoiceAuditTrail = FINBatchInvoiceAuditTrail::findByRecId(_contract.parmAuditTrail().RecId, true);
        
                if (invoiceAuditTrail)
                {
                    invoiceAuditTrail.InvoiceCheckDone = NoYes::Yes;
                    invoiceAuditTrail.update();
                    invoiceAuditTrail.changeInvoiceJobStatus();
                }

                ttscommit;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>