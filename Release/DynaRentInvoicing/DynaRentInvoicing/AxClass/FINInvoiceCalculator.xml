<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoiceCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINInvoiceCalculator
{
    FINInvoiceCalculatorParm    invoiceCalculatorParm;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINInvoiceCalculator construct(RORRentalLine _rentalLine, Common _parmLine, FINInvoiceCalculatorParm _calcParm)
    {
        FINInvoiceCalculator    invoiceCalculator = new FINInvoiceCalculator();

        invoiceCalculator.initInvoiceCalculatorParm(_rentalLine, _parmLine, _calcParm);
        
        return invoiceCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHasAnyEngineSetup</Name>
				<Source><![CDATA[
    protected void checkHasAnyEngineSetup(RORRentalLine _rentalLine)
    {
        FINInvoiceCalculatorEngineSetup calculatorEngineSetup;

        // Collect amounts for invoicing
        select firstonly RecId from calculatorEngineSetup
        where calculatorEngineSetup.Active;

        if (calculatorEngineSetup)
        {
            // Show warning if there is no active setup for a specific rental line.
            // Otherwise a user might be confused that nothing is available for invoicing.
            UnitOfMeasure rateCode = UnitOfMeasure::find(_rentalLine.PriceTimeUnit);
            
            if(!this.engineHasActiveSetup(rateCode))
            {
                warning(strFmt("@DNR:RentalInvoicingSetupValidation",
                    _rentalLine.ItemId,
                    _rentalLine.HeaderId,
                    rateCode.Symbol));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>engineHasActiveSetup</Name>
				<Source><![CDATA[
    protected boolean engineHasActiveSetup(UnitOfMeasure _rateCode)
    {
        return (!_rateCode
             || _rateCode.FINInvoiceConsumptionEngine
             || _rateCode.FINInvoiceCostPriceEngine
             || _rateCode.FINInvoiceManualEngine
             || _rateCode.FINInvoiceProjectEngine
             || _rateCode.FINInvoiceRentalEngine
             || _rateCode.FINInvoiceTransportEngine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    protected void initInvoiceCalculatorParm(RORRentalLine _rentalLine, Common _parmLine, FINInvoiceCalculatorParm _calcParm)
    {
        this.checkHasAnyEngineSetup(_rentalLine);

        invoiceCalculatorParm.clear();
        invoiceCalculatorParm.data(_calcParm);
        // In case of rearange or reselect we want to keep some data that is already fetched from DB.
        // Data that needs recalculation will be cleared regardles if *Parm record existed before or not.
        // It also initialize empty packed list/Map/Set fields
        invoiceCalculatorParm.clearCalculatedData();

        if (!invoiceCalculatorParm)
        {
            if (!invoiceCalculatorParm.OrderLineRecId)
            {
                // Check rental agreement and price amendments only once per line/invoicing. It stays the same when you for instance change calculation dateTime.
                RAGContractDataParm contractDataParm;
                contractDataParm.initFromRentalLine(_rentalLine);
                
                RAGContractData contractData = new RAGContractData();
                contractData.parmDataParm(contractDataParm);
                contractData.populateData();
            
                invoiceCalculatorParm.RAGContractLinePacked = contractData.pack();
                
                invoiceCalculatorParm.PriceComponentsAmendmentPacked = FINTmpInvoicePeriodPrice::packTmpData(_rentalLine);
            }

            invoiceCalculatorParm.OrderLineTableId              = _rentalLine.TableId;
            invoiceCalculatorParm.OrderLineRecId                = _rentalLine.RecId;
            invoiceCalculatorParm.Timezone                      = _rentalLine.RORRentalLine::FINTimeZoneOrder();
            invoiceCalculatorParm.OrderLinePacked               = buf2Con(_rentalLine);
            if (_parmLine.TableId != tableNum(ProjProposalItem) && _parmLine.TableId != tableNum(PSAtmpProjProposalTrans))
            {
                invoiceCalculatorParm.ParmId                        = _parmLine.(fieldName2Id(_parmLine.TableId, 'ParmId'));
            }
            else if (_parmLine.TableId != tableNum(PSAtmpProjProposalTrans))
            {
                invoiceCalculatorParm.ParmId = _parmLine.(fieldName2Id(_parmLine.TableId, fieldStr(PSAtmpProjProposalTrans, FINParmId)));
            }
        }
        
        invoiceCalculatorParm.ParmLineTableId               = _parmLine.TableId;
        invoiceCalculatorParm.ParmLineRecId                 = _parmLine.RecId;
        invoiceCalculatorParm.ParmLinePacked                = buf2Con(_parmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    protected void setInvoiceCalculatorParm(FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
        invoiceCalculatorParm = _invoiceCalculatorParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    public FINInvoiceCalculatorParm getInvoiceCalculatorParm()
    {
        return invoiceCalculatorParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserialize</Name>
				<Source><![CDATA[
    public static FINInvoiceCalculator deserialize(FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
        FINInvoiceCalculator invoiceCalculator =  new FINInvoiceCalculator();
        
        invoiceCalculator.setInvoiceCalculatorParm(_invoiceCalculatorParm);

        return invoiceCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FINInvoiceCalculatorEngineSetup     calculatorEngineSetup;
        FINIInvoiceCalculatorGenericEngine  engine;
        
        // Collect amounts for invoicing
        while select calculatorEngineSetup
        where calculatorEngineSetup.Active
        {
            // inside each engine it will be decided if for a specific rentalType the engine can be executed
            engine = new SysDictClass(className2Id(calculatorEngineSetup.EngineClassName)).makeObject();
            engine.initParameters(invoiceCalculatorParm);
            engine.process();
        }

        if (invoiceCalculatorParm.WasAnyEngineExecuted)
        {
            FINMarkupTransGenerator::construct(invoiceCalculatorParm).getMarkupCodeForResult();
        }
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>