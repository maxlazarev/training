<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINVersioningPurchaseOrderClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(VersioningPurchaseOrder))]
public final class FINVersioningPurchaseOrderClass_Extension
{
    // Chain-of-Command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>archivePurchLine</Name>
				<Source><![CDATA[
    protected void archivePurchLine(PurchTableVersion _purchTableVersion)
    {
        next archivePurchLine(_purchTableVersion);
        this.RORCopyInvoicePeriods(_purchTableVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static VersioningPurchaseOrder construct()
    {
        VersioningPurchaseOrder ret = next construct();
        FINVersioningPurchaseOrderContext context = FINVersioningPurchaseOrderContext::current();
        
        if (context && context.parmSkipChange())
        {
            ret = FINVersioningPurchaseOrder::newVersioningPurchaseOrder();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCopyInvoicePeriods</Name>
				<Source><![CDATA[
    // Extension methods

    private void RORCopyInvoicePeriods(PurchTableVersion _purchTableVersion)
    {
        PurchLine                    purchLine;
        PurchLineHistory             purchLineHistory;
        RORRentalDateTimes           rentalDateTimes;
        Set                          recIdSet = new Set(Types::Int64);
        PurchTableValidPeriodVersion purchTableValidPeriodVersion;
    
        select firstonly ValidFromDateTime, ValidToDateTime from purchTableValidPeriodVersion
        where purchTableValidPeriodVersion.RecId == _purchTableVersion.RecId;

        while select purchLineHistory
        where purchLineHistory.PurchId == purchTable.PurchId
        && purchLineHistory.ValidFrom == purchTableValidPeriodVersion.ValidFromDateTime
        && purchLineHistory.ValidTo == purchTableValidPeriodVersion.ValidToDateTime
            join RecId from purchLine
            where purchLine.InventTransId == purchLineHistory.InventTransId
            && purchLine.IsModified
            && !purchLine.IsDeleted
                join rentalDateTimes
                where rentalDateTimes.RefTableId == purchLine.TableId
                && rentalDateTimes.RefRecId == purchLine.RecId
        {
            if(!recIdSet.in(purchLine.RecId)
            && isConfigurationkeyEnabled(configurationKeyNum(INVInvoicePeriod))
            && purchLine.RORTradeType != RORTradeType::SalesPurch)
            {
                FINInvoicePeriodManager::duplicatePeriods(purchLine, purchLineHistory);
                recIdSet.add(purchLine.RecId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>