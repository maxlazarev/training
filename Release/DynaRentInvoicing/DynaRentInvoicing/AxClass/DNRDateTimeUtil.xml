<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRDateTimeUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRDateTimeUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findWeekDay</Name>
				<Source><![CDATA[
    public static TransDate findWeekDay(TransDate _dateIncludingWeek, INVInvoiceWeekDays _dayOfWeek)
    {
        TransDate   checkDate = _dateIncludingWeek;
        ;

        while (dayOfWk(checkDate) != _dayOfWeek)
        {
            checkDate++;
        }

        return checkDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWeekAndDay</Name>
				<Source><![CDATA[
    public static TransDate findWeekAndDay(TransDate _dateIncludingMonth, WeekDay _weekDay, WeekOfMonth _weekOfMonth)
    {
        TransDate   checkDate = dateStartMth(_dateIncludingMonth)  - 1;
        int         weekCounter;
        int         dayNumber = _weekDay;
        int         weekOfMonthNumber = (_weekOfMonth + 1);
        TransDate   transDateFourthWeek;
        boolean     loop = true;
        ;

        while (loop)
        {
            checkDate++;

            if (dayOfWk(checkDate) == dayNumber)
            {
                weekCounter++;
                if (weekCounter == weekOfMonthNumber)
                {
                    loop = false;
                }
                else if (weekCounter == 4)
                {
                    transDateFourthWeek = checkDate;
                }
            }
        }

        return (mthOfYr(checkDate) == mthOfYr(_dateIncludingMonth) ? checkDate : transDateFourthWeek);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWinterTime</Name>
				<Source><![CDATA[
    public static boolean isWinterTime(Timezone _timeZone)
    {
        // In Europe in winter time is UTC and in summer UTC+1 so if this method returns true we don'e need to apply time zone
        boolean ret;
        TransDateTime dateTime = DateTimeUtil::getSystemDateTime();

        if (DateTimeUtil::getTimeZoneOffset(dateTime, _timeZone) == 60
        && DateTimeUtil::getTimeZoneOffset(DateTimeUtil::addMonths(dateTime, 6), _timeZone) == 120)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestDateTime</Name>
				<Source><![CDATA[
    public static TransDateTime getEarliestDateTime(
        TransDateTime _transDateTime1,
        TransDateTime _transDateTime2)
    
    {
        TransDate   earliestDate;
        TimeOfDay   earliestTime;
    
        TransDate transDate1 = DateTimeUtil::date(_transDateTime1);
        TimeOfDay transTime1 = DateTimeUtil::time(_transDateTime1);
        TransDate transDate2 = DateTimeUtil::date(_transDateTime2);
        TimeOfDay transTime2 = DateTimeUtil::time(_transDateTime2);
        ;
    
        // Determine whether to base the check on the period start or supplied start point
        if ((transDate1 < transDate2)
        ||  (transDate1 == transDate2 && transTime1 < transTime2))
        {
            earliestDate = transDate1;
            earliestTime = transTime1;
        }
        else
        {
            earliestDate = transDate2;
            earliestTime = transTime2;
        }
    
        return DateTimeUtil::newDateTime(earliestDate, earliestTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestDateTime</Name>
				<Source><![CDATA[
    public static TransDateTime getLatestDateTime(
        TransDateTime _transDateTime1,
        TransDateTime _transDateTime2)
    {
        TransDate   latestDate;
        TimeOfDay   latestTime;
    
        TransDate transDate1 = DateTimeUtil::date(_transDateTime1);
        TimeOfDay transTime1 = DateTimeUtil::time(_transDateTime1);
        TransDate transDate2 = DateTimeUtil::date(_transDateTime2);
        TimeOfDay transTime2 = DateTimeUtil::time(_transDateTime2);
        ;
    
        // Determine whether to base the check on the period start or supplied start point
        if ((transDate1 > transDate2)
        ||  (transDate1 == transDate2 && transTime1 > transTime2))
        {
            latestDate = transDate1;
            latestTime = transTime1;
        }
        else
        {
            latestDate = transDate2;
            latestTime = transTime2;
        }
    
        return DateTimeUtil::newDateTime(latestDate, latestTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDateToSpecificMonthDay</Name>
				<Source><![CDATA[
    public static TransDate adjustDateToSpecificMonthDay(
        TransDate           _startDate,
        int                 _targetDay = 0,
        INVInvoiceWeekDays  _weekDay = 0,
        WeekOfMonth         _weekOfMonth = 0)
    {
        TransDate       ret;
        
        // Example: 1st day of a month
        if (_targetDay)
        {
            ret = mkDate(_targetDay, mthOfYr(_startDate), year(_startDate));
        }
        // Example: 2nd day of 3rd week of a month
        else if (_weekOfMonth && _weekDay)
        {
            ret = DNRDateTimeUtil::findWeekAndDay(_startDate, _weekDay, _weekOfMonth);
        }
        // Example: last day of a month
        else
        {
            ret = dateEndMth(_startDate);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>