<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINSalesTableType_RORRentalClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesTableType_RORRental))]
public final class FINSalesTableType_RORRentalClass_Extension
{
    // Chain-of-Command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        next initValue();

        salesTable.FINTimeZoneOrder = DateTimeUtil::getCompanyTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        SalesTable salesTable_Orig = salesTable.orig();

        next updating();

        if (salesTable.RecId && salesTable.FINTimeZoneOrder != salesTable_Orig.FINTimeZoneOrder)
        {
            this.FINCreateAmendmentLogForTimeZoneChange();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId  _fieldId, TableId _tableId)
    {
        SalesTable salesTable_Orig = salesTable.orig();

        boolean ret = next validateField(_fieldId, _tableId);

        // If the user changes the value in the time zone field, but before saving the record changes the value in the time zone field back to the
        // original value, then there is no need to perform the relevant check (again).
        if (_fieldId == fieldNum(SalesTable, FINTimeZoneOrder) && salesTable.FINTimeZoneOrder != salesTable_Orig.FINTimeZoneOrder)
        {
            ret = ret && this.FINCheckPackingSlip();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCheckPackingSlip</Name>
				<Source><![CDATA[
    // Extension methods

    private boolean FINCheckPackingSlip()
    {
        boolean     ret                 = true;
        container   existingJournals    = salesTable.FINExistingJournals();

        if (conPeek(existingJournals, SalesTableType::posPackingSlip()))
        {
            ret = checkFailed("@DNR:CannotUpdateTimeZoneForDeliveredOrders");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCreateAmendmentLogForTimeZoneChange</Name>
				<Source><![CDATA[
    private void FINCreateAmendmentLogForTimeZoneChange()
    {
        SalesTable              salesTable_Orig         = salesTable.orig();
        utcdatetime             fromDateTime            = DateTimeUtil::getSystemDateTime();
        ROROrderAmendmentLog    orderAmendmentLogUpdate = this.FINGetAmendmentLogForTimeZoneChange();

        if (orderAmendmentLogUpdate)
        {
            orderAmendmentLogUpdate.ToDateTime = fromDateTime;

            orderAmendmentLogUpdate.update();
        }

        ROROrderAmendmentLog orderAmendmentLogInsert;

        orderAmendmentLogInsert.AmendmentEventType    = DNRAmendmentEventType::TimeZone;
        orderAmendmentLogInsert.AmendmentAction       = DNRAmendmentAction::Changed;
        orderAmendmentLogInsert.DNRReasonType         = DNRReasonType::Misc;  // TODO: Is this correct?

        orderAmendmentLogInsert.initFromSalesPurchTable(salesTable);

        orderAmendmentLogInsert.CurrencyCode          = salesTable.CurrencyCode;
        orderAmendmentLogInsert.FromDateTime          = fromDateTime;
        orderAmendmentLogInsert.ToDateTime            = DateTimeUtil::maxValue();

        str oldStrValue = enum2Str(salesTable_Orig.FINTimeZoneOrder);
        str strValue    = enum2Str(salesTable.FINTimeZoneOrder);

        orderAmendmentLogInsert.OldStrValue           = oldStrValue;  // might be truncated due to the string size of 30
        orderAmendmentLogInsert.StrValue              = strValue;  // might be truncated due to the string size of 30

        orderAmendmentLogInsert.LogTxtGenerated       = strFmt("@SYS311966", orderAmendmentLogInsert.AmendmentAction, orderAmendmentLogInsert.AmendmentEventType) +
                                                        strFmt("@DNR:OldStrValueToNewStrValue", oldStrValue, strValue);

        orderAmendmentLogInsert.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINGetAmendmentLogForTimeZoneChange</Name>
				<Source><![CDATA[
    private ROROrderAmendmentLog FINGetAmendmentLogForTimeZoneChange()
    {
        ROROrderAmendmentLog orderAmendmentLog;

        select firstonly forupdate orderAmendmentLog
        where orderAmendmentLog.RefTableId          == salesTable.TableId
        &&    orderAmendmentLog.RefRecId            == salesTable.RecId
        &&    orderAmendmentLog.ConfirmId           == ''
        &&    orderAmendmentLog.AmendmentEventType  == DNRAmendmentEventType::TimeZone
        &&    orderAmendmentLog.AmendmentAction     == DNRAmendmentAction::Changed
        &&    orderAmendmentLog.ToDateTime          == DateTimeUtil::maxValue();  // Get the amendment log record that is currently active.

        return orderAmendmentLog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>