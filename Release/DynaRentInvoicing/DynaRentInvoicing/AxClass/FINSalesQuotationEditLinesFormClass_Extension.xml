<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINSalesQuotationEditLinesFormClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationEditLinesForm))]
public final class FINSalesQuotationEditLinesFormClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FINJournalizeQuotationJournal</Name>
				<Source><![CDATA[
    protected void FINJournalizeQuotationJournal(CustQuotationJour _custQuotationJour)
    {
        CustQuotationTrans          custQuotationTransLoc;
        FINInvoiceCalculatorParm    invoiceCalculatorParmLoc;
        SalesQuotationLine          salesQuotationLineLoc;
        SalesQuotationTable         salesQuotationTable = this.salesQuotationTable();
        
        if (salesQuotationTable.QuotationType == QuotationType::RORRental
        ||  salesQuotationTable.QuotationType == QuotationType::RORProjRental)
        {
            ttsbegin;

            FINSalesQuotationTotals finSalesQuotationTotals = new FINSalesQuotationTotals();
            finSalesQuotationTotals.parmCallerBuffer(salesQuotationTable);
            finSalesQuotationTotals.prepareDataForTotals();
        
            ParmId parmId = finSalesQuotationTotals.getParmTable().ParmId;

            while select RecId from custQuotationTransLoc
            where custQuotationTransLoc.origQuotationId == salesQuotationTable.QuotationId
            &&    custQuotationTransLoc.SalesId == _custQuotationJour.SalesId
            &&    custQuotationTransLoc.QuotationId == _custQuotationJour.QuotationId
            &&    custQuotationTransLoc.QuotationDate == _custQuotationJour.QuotationDate
                join TableId from salesQuotationLineLoc
                where salesQuotationLineLoc.QuotationId == custQuotationTransLoc.origQuotationId
                &&    salesQuotationLineLoc.InventTransId == custQuotationTransLoc.InventTransId
                &&    salesQuotationLineLoc.RORTradeType != RORTradeType::SalesPurch
                    join invoiceCalculatorParmLoc
                    where invoiceCalculatorParmLoc.ParmId == parmId
                    &&    invoiceCalculatorParmLoc.OrderLineTableId == salesQuotationLineLoc.TableId
                    &&    invoiceCalculatorParmLoc.OrderLineRecId == salesQuotationLineLoc.RecId
            {
                invoiceCalculatorParmLoc.journalizeCustQuotationTrans(custQuotationTransLoc.RecId);
                SalesQuotationEditLinesForm::FINunloadDataQuotationTrans(custQuotationTransLoc.RecId);
            }

            finSalesQuotationTotals.cleanupPrecalculatedData();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINJournalizeQuotationJournalAsync</Name>
				<Source><![CDATA[
    public static void FINJournalizeQuotationJournalAsync(container params, System.Threading.CancellationToken _cancellationToken)
    {
        Map                         journalTransMap = Map::create(conPeek(params, 1));
        CustQuotationTrans          custQuotationTransLoc;
        FINInvoiceCalculatorParm    invoiceCalculatorParmLoc;
        SalesQuotationLine          salesQuotationLineLoc;
        SalesQuotationTable         salesQuotationTable = con2Buf(conPeek(params, 2));
        
        if (salesQuotationTable.QuotationType == QuotationType::RORRental
        ||  salesQuotationTable.QuotationType == QuotationType::RORProjRental)
        {
            ttsbegin;

            FINSalesQuotationTotals finSalesQuotationTotals = new FINSalesQuotationTotals();
            finSalesQuotationTotals.parmCallerBuffer(salesQuotationTable);
            finSalesQuotationTotals.prepareDataForTotals();
        
            ParmId parmId = finSalesQuotationTotals.getParmTable().ParmId;

            MapEnumerator enumerator = journalTransMap.getEnumerator();

            while (enumerator.moveNext())
            {
                RecId salesQuotationLineRecId = enumerator.currentKey();
                RecId custQuotationTransRecId = enumerator.currentValue();

                select firstonly invoiceCalculatorParmLoc
                where invoiceCalculatorParmLoc.ParmId == parmId
                &&    invoiceCalculatorParmLoc.OrderLineTableId == tableNum(SalesQuotationLine)
                &&    invoiceCalculatorParmLoc.OrderLineRecId == salesQuotationLineRecId;

                if (invoiceCalculatorParmLoc)
                {
                    invoiceCalculatorParmLoc.journalizeCustQuotationTrans(custQuotationTransRecId);
                    SalesQuotationEditLinesForm::FINunloadDataQuotationTrans(custQuotationTransRecId);
                }
            }

            finSalesQuotationTotals.cleanupPrecalculatedData();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINJournalizeQuotationConfirmJournal</Name>
				<Source><![CDATA[
    protected void FINJournalizeQuotationConfirmJournal(CustQuotationConfirmJour _custQuotationConfirmJour)
    {
        CustQuotationConfirmTrans   custQuotationConfirmTrans;
        FINInvoiceCalculatorParm    invoiceCalculatorParmLoc;
        SalesQuotationLine          salesQuotationLineLoc;
        SalesQuotationTable         salesQuotationTable = this.salesQuotationTable();
        
        if (salesQuotationTable.QuotationType == QuotationType::RORRental
        ||  salesQuotationTable.QuotationType == QuotationType::RORProjRental)
        {
            ttsbegin;

            FINSalesQuotationTotals finSalesQuotationTotals = new FINSalesQuotationTotals();
            finSalesQuotationTotals.parmCallerBuffer(salesQuotationTable);
            finSalesQuotationTotals.prepareDataForTotals();
        
            ParmId parmId = finSalesQuotationTotals.getParmTable().ParmId;

            while select RecId from custQuotationConfirmTrans
            where custQuotationConfirmTrans.origQuotationId == salesQuotationTable.QuotationId
            &&    custQuotationConfirmTrans.SalesId == _custQuotationConfirmJour.SalesId
            &&    custQuotationConfirmTrans.QuotationConfirmId == _custQuotationConfirmJour.QuotationConfirmId
            &&    custQuotationConfirmTrans.QuotationDate == _custQuotationConfirmJour.QuotationDate
                join TableId from salesQuotationLineLoc
                where salesQuotationLineLoc.QuotationId == custQuotationConfirmTrans.origQuotationId
                &&    salesQuotationLineLoc.InventTransId == custQuotationConfirmTrans.InventTransId
                &&    salesQuotationLineLoc.RORTradeType != RORTradeType::SalesPurch
                    join invoiceCalculatorParmLoc
                    where invoiceCalculatorParmLoc.ParmId == parmId
                    &&    invoiceCalculatorParmLoc.OrderLineTableId == salesQuotationLineLoc.TableId
                    &&    invoiceCalculatorParmLoc.OrderLineRecId == salesQuotationLineLoc.RecId
            {
                invoiceCalculatorParmLoc.journalizeCustQuotationConfirmTrans(custQuotationConfirmTrans.RecId);
                SalesQuotationEditLinesForm::FINunloadDataQuotationConfirmTrans(custQuotationConfirmTrans.RecId);
            }

            finSalesQuotationTotals.cleanupPrecalculatedData();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINJournalizeQuotationConfirmJournalAsync</Name>
				<Source><![CDATA[
    public static void FINJournalizeQuotationConfirmJournalAsync(container params, System.Threading.CancellationToken _cancellationToken)
    {
        Map                         confirmTransMap = Map::create(conPeek(params, 1));
        CustQuotationConfirmTrans   custQuotationConfirmTrans;
        FINInvoiceCalculatorParm    invoiceCalculatorParmLoc;
        SalesQuotationLine          salesQuotationLineLoc;
        SalesQuotationTable         salesQuotationTable = con2Buf(conPeek(params, 2));
        
        if (salesQuotationTable.QuotationType == QuotationType::RORRental
        ||  salesQuotationTable.QuotationType == QuotationType::RORProjRental)
        {
            ttsbegin;

            FINSalesQuotationTotals finSalesQuotationTotals = new FINSalesQuotationTotals();
            finSalesQuotationTotals.parmCallerBuffer(salesQuotationTable);
            finSalesQuotationTotals.prepareDataForTotals();
        
            ParmId parmId = finSalesQuotationTotals.getParmTable().ParmId;

            MapEnumerator enumerator = confirmTransMap.getEnumerator();

            while (enumerator.moveNext())
            {
                RecId salesQuotationLineRecId = enumerator.currentKey();
                RecId custQuotationConfirmTransRecId = enumerator.currentValue();

                select firstonly invoiceCalculatorParmLoc
                where invoiceCalculatorParmLoc.ParmId == parmId
                &&    invoiceCalculatorParmLoc.OrderLineTableId == tableNum(SalesQuotationLine)
                &&    invoiceCalculatorParmLoc.OrderLineRecId == salesQuotationLineRecId;

                if (invoiceCalculatorParmLoc)
                {
                    invoiceCalculatorParmLoc.journalizeCustQuotationConfirmTrans(custQuotationConfirmTransRecId);
                    SalesQuotationEditLinesForm::FINunloadDataQuotationConfirmTrans(custQuotationConfirmTransRecId);
                }
            }

            finSalesQuotationTotals.cleanupPrecalculatedData();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINunloadDataQuotationConfirmTrans</Name>
				<Source><![CDATA[
    private static void FINunloadDataQuotationConfirmTrans(RecId _custQuotationConfirmTransRecId)
    {
        FINCustQuotationConfirmTrans finCustQuotationConfirmTrans;

        select firstonly forupdate finCustQuotationConfirmTrans
            where finCustQuotationConfirmTrans.CustQuotationConfirmTransRecId == _custQuotationConfirmTransRecId;
        
        if (finCustQuotationConfirmTrans.RecId)
        {
            finCustQuotationConfirmTrans.FINRentalInvoiceLinePacked::unloadData();
            finCustQuotationConfirmTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINunloadDataQuotationTrans</Name>
				<Source><![CDATA[
    private static void FINunloadDataQuotationTrans(RecId _custQuotationTransRecId)
    {
        FINCustQuotationTrans finCustQuotationTrans;

        select firstonly forupdate finCustQuotationTrans
            where finCustQuotationTrans.CustQuotationTransRecId == _custQuotationTransRecId;

        if (finCustQuotationTrans.RecId)
        {
            finCustQuotationTrans.FINRentalInvoiceLinePacked::unloadData();
            finCustQuotationTrans.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>