<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchInvoiceJournalPostClass1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchInvoiceJournalPost))]
public final class DNRPurchInvoiceJournalPostClass1_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    protected void postLine()
    {
        PurchLine   purchLineLocal = purchLine;
            
        if (isConfigurationkeyEnabled(configurationKeyNum(INVInvoicePeriod))
        &&  purchLineLocal.RORTradeType != RORTradeType::SalesPurch)
        {
            VendInvoiceJour vendInvoiceJour = this.parmJournalTable() as VendInvoiceJour;
                        
            if (vendInvoiceJour.ParmId)
            {
                VendInvoiceTrans         vendInvoiceTrans;
                FINInvoiceCalculatorParm invoiceCalculatorParm;
                FINInvoiceCalculatorParm invoiceCalculatorParmDel;

                while select RecId, TableId from vendInvoiceTrans
                    where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                    && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                    && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                    && vendInvoiceTrans.PurchId == vendInvoiceJour.PurchId
                    && vendInvoiceTrans.InventTransId == purchLineLocal.InventTransId
                        join  invoiceCalculatorParm
                        where invoiceCalculatorParm.ParmId == vendInvoiceJour.ParmId
                        &&    invoiceCalculatorParm.ParmLineRecId == vendInvoiceInfoLine.RecId
                        &&    invoiceCalculatorParm.ParmLineTableId == vendInvoiceInfoLine.TableId
                {
                    invoiceCalculatorParm.journalizeVendInvoiceTrans(vendInvoiceTrans.RecId);

                    FINInvoicePeriodManager_Invoice invoicePeriodManager = FINInvoicePeriodManager::construct(FINInvoicePeriodAction::Invoice, purchLineLocal);
                    invoicePeriodManager.setInvoiceCalculatorParm(invoiceCalculatorParm);
                    invoicePeriodManager.setInvoiceId(vendInvoiceJour.InvoiceId);
                    invoicePeriodManager.setInvoiceTransReference(vendInvoiceTrans.TableId, vendInvoiceTrans.RecId);
                    invoicePeriodManager.run();

                    FINOrderLineComponentInvoiceLog::setOrderLineComponentInvoiced(purchLineLocal, vendInvoiceJour.InvoiceId, invoiceCalculatorParm);

                    delete_from invoiceCalculatorParmDel where invoiceCalculatorParmDel.RecId == invoiceCalculatorParm.RecId; 
                }
            }
        }

        next postLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPost</Name>
				<Source><![CDATA[
    protected void endPost()
    {
        next endPost();

        // Remove manual price components with Keep == false
        FINManualPriceComponent::deletePostedPriceComponents(this.parmParmTable());

        if (this.parmJournalTable().TableId == tableNum(VendInvoiceJour))
        {
            VendInvoiceJour vendInvoiceJour = this.parmJournalTable() as VendInvoiceJour;
            FINRentalPeriodJournalizer::construct(vendInvoiceJour, null).journalize();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>