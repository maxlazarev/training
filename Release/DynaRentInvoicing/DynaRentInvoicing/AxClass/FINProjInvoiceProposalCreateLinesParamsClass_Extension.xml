<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINProjInvoiceProposalCreateLinesParamsClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjInvoiceProposalCreateLinesParams))]
public final class FINProjInvoiceProposalCreateLinesParamsClass_Extension
{
    private ParmId estimationParmId;
    private ParmId invoiceCalcParmId;

    #define.CurrentVersion(2)
    #localmacro.CurrentListCS
        estimationParmId,
        invoiceCalcParmId
    #ENDMACRO

    #localmacro.Version1List
        estimationParmId
    #ENDMACRO

    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FINUnpack</Name>
				<Source><![CDATA[
    private boolean FINUnpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        switch(version)
        {
            case #CurrentVersion:
                [version, #CurrentListCS] = _packedClass;
                break;
            
            case 1:
                [version, #Version1List] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINPack</Name>
				<Source><![CDATA[
    private container FINPack()
    {
        return [#CurrentVersion, #CurrentListCS];
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINParmEstimationParmId</Name>
				<Source><![CDATA[
    public ParmId FINParmEstimationParmId(ParmId _estimationParmId = estimationParmId)
    {
        estimationParmId = _estimationParmId;
        return estimationParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInvoiceCalcParmId</Name>
				<Source><![CDATA[
    public ParmId FINInvoiceCalcParmId(ParmId _invoiceCalcParmId = invoiceCalcParmId)
    {
        invoiceCalcParmId = _invoiceCalcParmId;
        return invoiceCalcParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINPack_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(classStr(ProjInvoiceProposalCreateLinesParams), methodStr(ProjInvoiceProposalCreateLinesParams, pack))]
    public static void FINPack_post(XppPrePostArgs _eventArgs)
    {
        ProjInvoiceProposalCreateLinesParams hostObj = _eventArgs.getThis() as ProjInvoiceProposalCreateLinesParams;
        SysPackExtensions::pack(_eventArgs, classStr(FINProjInvoiceProposalCreateLinesParamsClass_Extension), hostObj.FINPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUnpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProjInvoiceProposalCreateLinesParams), methodStr(ProjInvoiceProposalCreateLinesParams, unpack))]
    public static void FINUnpack_post(XppPrePostArgs _eventArgs)
    {
        ProjInvoiceProposalCreateLinesParams hostObj = _eventArgs.getThis() as ProjInvoiceProposalCreateLinesParams;
        
        container myState = SysPackExtensions::unpack(_eventArgs, classStr(FINProjInvoiceProposalCreateLinesParamsClass_Extension));

        //Also unpack the extension
        if (!hostObj.FINUnpack(myState))
        {
            _eventArgs.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>