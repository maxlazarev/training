<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLedgerJournalTransTable1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(LedgerJournalTrans))]
public final class DNRLedgerJournalTransTable1_Extension
{
    // extension methods



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FINInitFromTmpLedgerJournalGeneratorParm</Name>
				<Source><![CDATA[
    public void FINInitFromTmpLedgerJournalGeneratorParm(FINTmpLedgerJournalGeneratorParm _tmpLedgerJournalGeneratorParm)
    {
        this.TransDate              = _tmpLedgerJournalGeneratorParm.TransDate;
        this.Txt                    = _tmpLedgerJournalGeneratorParm.Txt;
        this.CurrencyCode           = _tmpLedgerJournalGeneratorParm.CurrencyCode;
        this.AmountCurCredit        = _tmpLedgerJournalGeneratorParm.AmountCurCredit;
        this.AmountCurDebit         = _tmpLedgerJournalGeneratorParm.AmountCurDebit;
        this.AccountType            = _tmpLedgerJournalGeneratorParm.AccountType;
        this.Company                = _tmpLedgerJournalGeneratorParm.Company;
        this.LedgerDimension        = _tmpLedgerJournalGeneratorParm.LedgerDimension;
        this.DefaultDimension       = _tmpLedgerJournalGeneratorParm.DefaultDimension;
        this.TransactionType        = _tmpLedgerJournalGeneratorParm.TransactionType;
        this.Qty                    = _tmpLedgerJournalGeneratorParm.Quantity;

        ExchangeRateHelper exchangeRateHelper  = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(this.Company).RecId),
                                                                                     this.CurrencyCode,
                                                                                     this.TransDate);

        this.ExchRate               = exchangeRateHelper.getExchangeRate1();
        this.ExchRateSecond         = exchangeRateHelper.getExchangeRate2();
        this.FINAnalyticalDate      = _tmpLedgerJournalGeneratorParm.AnalyticalDate;

        if (Ledger::reportingCurrency())
        {

            ExchangeRateCalculation reportingExchangeRateCalculation = ExchangeRateCalculation::newExchangeDate(Ledger::reportingCurrencyExchangeRateType(),
                                                                                                this.CurrencyCode,
                                                                                                Ledger::reportingCurrency(),
                                                                                                this.TransDate);
        
            this.ReportingCurrencyExchRate          = reportingExchangeRateCalculation.getExchangeRate1();
            this.ReportingCurrencyExchRateSecondary = reportingExchangeRateCalculation.getExchangeRate2();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>