<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINRentalTotalUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FINRentalTotalUpdate
{ 
    boolean     calculateAllLines;
    boolean     onlyCalculateLineSpecified;
    Common      rentalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINRentalTotalUpdate construct(Common _header, boolean _calculateAllLines = true)
    {
        FINRentalTotalUpdate totals;

        switch(_header.TableId)
        {
            case tableNum(SalesTable):
                totals = new FINRentalTotalUpdate_RentalOrder(_header);
                break;    
            
            case tableNum(SalesQuotationTable):
                totals = new FINRentalTotalUpdate_RentalQuote(_header);
                break;
    
            default:
                throw error(strFmt("@SYS31187", tableId2Name(_header.TableId)));
        }

        totals.parmCalculateAllLines(_calculateAllLines);
        return totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args || !_args.record())
        {
            throw error(strFmt("@SYS29104", classStr(FINRentalTotalUpdate)));
        }

        Common currentRecord = _args.record();

        FINRentalTotalUpdate rentalTotalUpdate = FINRentalTotalUpdate::construct(currentRecord);
        rentalTotalUpdate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;

        this.calculateTotals();       

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    abstract protected void calculateTotals()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateAllLines</Name>
				<Source><![CDATA[
    public boolean parmCalculateAllLines(boolean _calculateAllLines = calculateAllLines)
    {
        calculateAllLines = _calculateAllLines;
        return calculateAllLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRentalLine</Name>
				<Source><![CDATA[
    public Common parmRentalLine(Common _line = rentalLine)
    {
        rentalLine = _line;
        return rentalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateOnlyForSpecificLine</Name>
				<Source><![CDATA[
    public boolean parmCalculateOnlyForSpecificLine(boolean _onlyCalculateLineSpecified = onlyCalculateLineSpecified)
    {
        onlyCalculateLineSpecified = _onlyCalculateLineSpecified;
        return onlyCalculateLineSpecified;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>