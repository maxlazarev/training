<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINLedgerVoucherObjectProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINLedgerVoucherObjectProcessor
{
    GeneralJournalEntry     generalJournalEntry;
    LedgerVoucherTransList  transactionCollection;
    RefRecId                subledgerTransferId;
    SourceDocument          sourceDocument;
    List                    resultJournalList;
    
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINLedgerVoucherObjectProcessor construct(GeneralJournalEntry _generalJournalEntry, LedgerVoucherTransList _transactionCollection, RefRecId  _subledgerTransferId, SourceDocument _sourceDocument)
    {
        FINLedgerVoucherObjectProcessor ret;

        ret = new FINLedgerVoucherObjectProcessor();
        ret.initialize(_generalJournalEntry, _transactionCollection, _subledgerTransferId, _sourceDocument);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize(GeneralJournalEntry _generalJournalEntry, LedgerVoucherTransList _transactionCollection, RefRecId  _subledgerTransferId, SourceDocument _sourceDocument)
    {
        generalJournalEntry     = _generalJournalEntry;
        transactionCollection   = _transactionCollection;
        subledgerTransferId     = _subledgerTransferId;
        sourceDocument          = _sourceDocument;
        resultJournalList       = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.mustRunProcessor())
        {
            this.runEngines();
            this.generateJournals();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunProcessor</Name>
				<Source><![CDATA[
    protected boolean mustRunProcessor()
    {
        boolean ret = (transactionCollection && transactionCollection.elements()) || subledgerTransferId != 0;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToResultList</Name>
				<Source><![CDATA[
    protected void addToResultList(List _engineResultList)
    {
        resultJournalList = List::merge(resultJournalList, _engineResultList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEngines</Name>
				<Source><![CDATA[
    protected void runEngines()
    {
        FINLedgerProcessorEngineSetup       processorEngineSetup;
        FINIVoucherProcessorGenericEngine   engine;
        List                                engineResultList;

        while select processorEngineSetup
        where processorEngineSetup.Active
        {
            engine = new SysDictClass(className2Id(processorEngineSetup.EngineClassName)).makeObject();
            engine.setInput(generalJournalEntry, transactionCollection, subledgerTransferId, sourceDocument);
            engine.process();
            engineResultList = engine.getResult();
            this.addToResultList(engineResultList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateJournals</Name>
				<Source><![CDATA[
    protected void generateJournals()
    {
        FINLedgerJournalGenerator journalGenerator;

        if (resultJournalList && !resultJournalList.empty())
        {
            journalGenerator = FINLedgerJournalGenerator::construct(resultJournalList);
            journalGenerator.parmMustAutoPostJournals(true);
            journalGenerator.setOriginVoucher(generalJournalEntry.SubledgerVoucherDataAreaId, generalJournalEntry.SubledgerVoucher);
            journalGenerator.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>