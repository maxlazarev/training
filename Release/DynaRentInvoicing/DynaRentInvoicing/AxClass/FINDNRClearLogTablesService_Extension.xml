<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDNRClearLogTablesService_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class contatining extensions for <c>DNRClearLogTablesContract</c> interface.
/// </summary>
[ExtensionOf(classStr(DNRClearLogTablesService))]
final class FINDNRClearLogTablesService_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearLogTables</Name>
				<Source><![CDATA[
    public void clearLogTables()
    {
        next clearLogTables();

        if (contract.parmClearFINBatchInvoiceCheckLog())
        {
            this.copyContent(tableNum(FINBatchInvoiceCheckLog), tableNum(FINBatchInvoiceCheckLogArchive), fieldNum(FINBatchInvoiceCheckLog, CreatedDateTime));
        }

        if (contract.parmClearFINCustQuotationTrans())
        {
            this.copyContent(tableNum(FINCustQuotationTrans), tableNum(FINCustQuotationTransArchive), fieldNum(SalesQuotationTable, CreatedDateTime));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearArchiveTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// deletes data from archive tables
    /// </summary>
    public void clearArchiveTables()
    {
        next clearArchiveTables();

        if (contract.parmClearFINBatchInvoiceCheckLogArchive())
        {
            this.deleteArchiveContent(tableNum(FINBatchInvoiceCheckLogArchive), fieldNum(FINBatchInvoiceCheckLogArchive, DateTimeField));
        }

        if (contract.parmClearFINCustQuotationTransArchive())
        {
            this.deleteArchiveContent(tableNum(FINCustQuotationTransArchive), fieldNum(FINBatchInvoiceCheckLogArchive, DateTimeField));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// copy content from one table to another table
    /// </summary>
    public Query createQuery(tableId _tableSource, fieldId _fieldId)
    {
        Query query = next createQuery(_tableSource, _fieldId);

        if (_tableSource == tableNum(FINCustQuotationTrans))
        {
            query = new Query();
            
            QueryBuildDataSource qbds = query.addDataSource(_tableSource);
            qbds = qbds.addDataSource(tableNum(CustQuotationJour));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
            
            qbds = qbds.addDataSource(tableNum(CustQuotationSalesLink));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
            
            qbds = qbds.addDataSource(tableNum(SalesQuotationTable));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(CustQuotationSalesLink, OrigQuotationId), fieldNum(salesQuotationTable, QuotationId));
            qbds.addRange(fieldNum(SalesQuotationTable, QuotationStatus)).value(queryValue(SalesQuotationStatus::Lost));
            qbds.addRange(fieldNum(SalesQuotationTable, QuotationStatus)).value(queryValue(SalesQuotationStatus::Confirmed));
            qbds.addRange(fieldNum(SalesQuotationTable, QuotationStatus)).value(queryValue(SalesQuotationStatus::Cancelled));

            query.clearAllFields();

            this.addDateRange(query, tableNum(SalesQuotationTable), fieldNum(SalesQuotationTable, CreatedDateTime));
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>