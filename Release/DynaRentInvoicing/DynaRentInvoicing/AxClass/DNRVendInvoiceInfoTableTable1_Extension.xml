<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRVendInvoiceInfoTableTable1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(VendInvoiceInfoTable))]
public final class DNRVendInvoiceInfoTableTable1_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moveFromActiveToSaved</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    public static void moveFromActiveToSaved(VendInvoiceInfoTable _activeVendInvoiceInfoTable)
    {
        ParmId parmId = _activeVendInvoiceInfoTable.ParmId;
        
        if (parmId)
        {
            PurchParmUpdate purchParmUpdate = PurchParmUpdate::find(parmId);
            //Re-read vendInvoiceInfotable table buffer to ensure that we update the latest data
            VendInvoiceInfoTable localVendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_activeVendInvoiceInfoTable.RecId, true);

            if (purchParmUpdate && localVendInvoiceInfoTable)
            {
                ttsbegin;
                localVendInvoiceInfoTable.selectForUpdate();
                localVendInvoiceInfoTable.FINInitFromPurchParmUpdate(purchParmUpdate);
                localVendInvoiceInfoTable.update();
                ttscommit;
            }
        }

        next moveFromActiveToSaved(_activeVendInvoiceInfoTable);

        if (!VendParameters::find().editUseInvoiceMatching())
        {
            // Always update ParmId because RentalTotals for pending invoices
            VendInvoiceInfoMarkupMatchingTolerance::updateParmId(_activeVendInvoiceInfoTable.ParmId, _activeVendInvoiceInfoTable.TableRefId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromSavedToActive</Name>
				<Source><![CDATA[
    public static boolean moveFromSavedToActive(VendInvoiceInfoTable _savedVendInvoiceInfoTable, ParmId _parmId, boolean _creditRemaining)
    {
        // tts added to avoid error in workflow automatic invoicing.
        ttsbegin;
        _savedVendInvoiceInfoTable.selectForUpdate();

        boolean ret = next moveFromSavedToActive(_savedVendInvoiceInfoTable, _parmId, _creditRemaining);

        if (_savedVendInvoiceInfoTable.VarianceApproved != NoYes::Yes
        && !VendParameters::find().editUseInvoiceMatching())
        {
            // Always update ParmId because RentalTotals for pending invoices
            VendInvoiceInfoMarkupMatchingTolerance::updateParmId('', _savedVendInvoiceInfoTable.TableRefId, _parmId);
                    
        }

        FINInvoiceCalculatorParm    invoiceCalculatorParm;
        VendInvoiceInfoLine         savedVendInvoiceInfoLine;

        while select forUpdate invoiceCalculatorParm
            join  savedVendInvoiceInfoLine
            where savedVendInvoiceInfoLine.TableRefId == _savedVendInvoiceInfoTable.TableRefId
            &&    savedVendInvoiceInfoLine.TableId == invoiceCalculatorParm.ParmLineTableId
            &&    savedVendInvoiceInfoLine.RecId == invoiceCalculatorParm.ParmLineRecId
            &&    savedVendInvoiceInfoLine.ParmId != invoiceCalculatorParm.ParmId
        {
            invoiceCalculatorParm.ParmId = savedVendInvoiceInfoLine.ParmId;
            invoiceCalculatorParm.update();
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromPurchParmUpdate</Name>
				<Source><![CDATA[
    public void FINInitFromPurchParmUpdate(PurchParmUpdate _purchParmUpdate)
    {
        this.INVCalculationDateTime         = _purchParmUpdate.INVCalculationDateTime;
        this.INVIncludeCredits              = _purchParmUpdate.INVIncludeCredits;
        this.INVIncludeUninvoiced           = _purchParmUpdate.INVIncludeUninvoiced;
        this.FINForceInvoiceUntilPoint      = _purchParmUpdate.FINForceInvoiceUntilPoint;
        this.FINSavedInvoice                = NoYes::Yes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>