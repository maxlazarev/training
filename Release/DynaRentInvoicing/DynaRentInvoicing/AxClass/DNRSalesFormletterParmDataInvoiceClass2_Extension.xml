<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesFormletterParmDataInvoiceClass2_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormletterParmDataInvoice))]
public final class DNRSalesFormletterParmDataInvoiceClass2_Extension
{
    private Set emptyHeaderOrderIdSet;
    private boolean shouldInitializeReselectProcess;
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reArrange</Name>
				<Source><![CDATA[
    public void reArrange()
    {
        SalesParmSubTable   localSalesParmSubTable;
        SalesParmLine       localSalesParmLine;
        Set                 localOrigOrderIdSet = new Set(Types::String);

        while select OrigSalesId from localSalesParmSubTable
        where localSalesParmSubTable.ParmId == salesParmUpdate.ParmId
            notexists join localSalesParmLine
                where localSalesParmLine.ParmId      == localSalesParmSubTable.ParmId
                   && localSalesParmLine.TableRefId  == localSalesParmSubTable.TableRefId
                   && localSalesParmLine.OrigSalesId == localSalesParmSubTable.OrigSalesId
        {
            localOrigOrderIdSet.add(localSalesParmSubTable.OrigSalesId);
        }

        next reArrange();
        
        DNRSalesFormLetterParmDataInvoiceReArrangeDisposableContext context = DNRSalesFormLetterParmDataInvoiceReArrangeDisposableContext::current();
        if(context && context.DNRParmMustReSelectAndDeleteEmptySalesParmTable())
        {
            emptyHeaderOrderIdSet = Set::union(origOrderIdSet, localOrigOrderIdSet);

            // Reselect only if empty headers exist.
            if (emptyHeaderOrderIdSet.elements())
            {
                shouldInitializeReselectProcess = true;
                this.reSelect();
                shouldInitializeReselectProcess = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitializeReselectProcess</Name>
				<Source><![CDATA[
    protected boolean shouldInitializeReselectProcess()
    {
        boolean ret = next shouldInitializeReselectProcess();

        ret = ret || salesParmUpdate.INVParmUpdateModified() || shouldInitializeReselectProcess;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalTransBePosted(Common _salesLine)
    {
        boolean     ret = next mayJournalTransBePosted(_salesLine);
        SalesLine   hostSalesLine   = _salesLine as SalesLine;

        if (ret)
        {
            SalesFormLetterContract formLetterContract = this.INVParmFormLetterContract();

            ret = (formLetterContract.FINParmIsEstimation() ||
                    hostSalesLine.RORmaySubStatusBeUpdated(formLetterContract.RORparmRentalSubStatus()))
                && (formLetterContract.parmCallerMenuItem() != menuitemActionStr(RORSalesFormLetter_InvoiceProj_Action) ||
                    InventTable::find(hostSalesLine.ItemId).RORProjCategoryIdRental)
                && (hostSalesLine.FINisCalculationEngineEnabled(FINRentalAccountType::Price) || hostSalesLine.FINisCalculationEngineEnabled(FINRentalAccountType::ProjectHours));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordLists</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2021. The logic of this method have been moved to /Classes/FINSalesFormletterParmDataInvoiceClass_Extension/Methods/FINPerformRentalInvoiceCalculation", false)]
    protected void insertRecordLists()
    {
        next insertRecordLists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSalesTableOrig</Name>
				<Source><![CDATA[
    public SalesTable FINSalesTableOrig()
    {
        return salesTableOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCreateParmTable</Name>
				<Source><![CDATA[
    public Common FINCreateParmTable(Common _salesTable)
    {
        return this.INVCreateParmTable(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCreateParmTable</Name>
				<Source><![CDATA[
    public Common INVCreateParmTable(Common _salesTable)
    {
        Common common = this.createParmTable(_salesTable, null, this.getTableRefId(null, false));
        this.insertRecordLists();
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        next updateQueryBuild();

        if ((! this.parmDatasourceRecordsPacked() || this.parmCreateFromLines()) && ! interCompanyMapPacked)
        {
            if (salesTable)
            {
                if (salesTable.SalesType == SalesType::RORRental)
                {
                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).clearRange(fieldNum(SalesTable, SalesStatus));
                }

                SalesFormLetterContract formLetterContract = this.INVParmFormLetterContract();

                if (this.INVParmCustInvoiceJour()
                && salesTable.SalesId == this.INVParmCustInvoiceJour().SalesId)
                {
                    QueryBuildDataSource qbdsSalesTable = chooseLines.query().dataSourceTable(tableNum(SalesTable));
                    qbdsSalesTable.addRange(fieldNum(SalesTable, DataAreaId)).value(this.FINSalesIdRange(qbdsSalesTable.name()));

                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).clearRange(fieldNum(SalesTable, SalesId));

                    if (this.invoiceAccountInQuery())
                    {
                        chooseLines.query().dataSourceTable(tableNum(SalesTable)).clearRange(fieldNum(SalesTable, InvoiceAccount));
                    }

                    if (this.custAccountInQuery())
                    {
                        chooseLines.query().dataSourceTable(tableNum(SalesTable)).clearRange(fieldNum(SalesTable, CustAccount));
                    }

                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).clearRange(fieldNum(SalesTable, SalesPoolId));
                }
                else if (formLetterContract.FINParmProformaInvoiceJourRecId())
                {
                    QueryBuildDataSource qbdsSalesTable = chooseLines.query().dataSourceTable(tableNum(SalesTable));
                    qbdsSalesTable.addRange(fieldNum(SalesTable, DataAreaId)).value(this.FINSalesIdRangeProforma(qbdsSalesTable.name()));

                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).clearRange(fieldNum(SalesTable, SalesId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSalesIdRangeProforma</Name>
				<Source><![CDATA[
    private str FINSalesIdRangeProforma(str _dsName)
    {
        SalesFormLetterContract formLetterContract = this.INVParmFormLetterContract();
        RecId proformaInvoiceJourRecId = formLetterContract.FINParmProformaInvoiceJourRecId();
        FINCustInvoiceJourProForma custInvoiceJourProforma;
        FINCustInvoiceTransProForma custInvoiceTransProforma;
        str salesIdRange;
        boolean firstLoop = true;

        while select OrigSalesId from custInvoiceTransProforma
            join TableId from custInvoiceJourProforma
            where custInvoiceJourProforma.SalesId == custInvoiceTransProforma.SalesId
            &&    custInvoiceJourProforma.InvoiceId == custInvoiceTransProforma.InvoiceId
            &&    custInvoiceJourProforma.InvoiceDate == custInvoiceTransProforma.InvoiceDate
            &&    custInvoiceJourProforma.numberSequenceGroup == custInvoiceTransProforma.numberSequenceGroup
            &&    custInvoiceJourProforma.ProFormaInvoiceVersion == custInvoiceTransProforma.ProFormaInvoiceVersion
            &&    custInvoiceJourProforma.RecId == proformaInvoiceJourRecId
        {
            if (firstLoop)
            {
                firstLoop = false;
                salesIdRange = '(';
            }
            else
            {
                salesIdRange += ' || ';
            }
    
            salesIdRange += strFmt('(%1.%2 == "%3")', _dsName, fieldStr(SalesTable, SalesId), custInvoiceTransProforma.OrigSalesId);
        }
    
        if (firstLoop)
        {
            salesIdRange = '';
        }
        else
        {
            salesIdRange += ')';
        }
        
        return salesIdRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSalesIdRange</Name>
				<Source><![CDATA[
    private str FINSalesIdRange(str _dsName)
    {
        CustInvoiceJour         custInvoiceJourLocal = this.INVParmCustInvoiceJour();
        CustInvoiceTrans        custInvoiceTransLocal;
        FINCreditLine           creditParmLine;
        FINCreditLineDetails    creditParmLineDetails;
        str                     salesIdRange;
        boolean                 firstLoop = true;
        
        while select custInvoiceTransLocal
        group by OrigSalesId
        where custInvoiceTransLocal.SalesId             == custInvoiceJourLocal.SalesId
        &&    custInvoiceTransLocal.InvoiceDate         == custInvoiceJourLocal.InvoiceDate
        &&    custInvoiceTransLocal.InvoiceId           == custInvoiceJourLocal.InvoiceId
        &&    custInvoiceTransLocal.numberSequenceGroup == custInvoiceJourLocal.numberSequenceGroup
            exists join creditParmLine
            where creditParmLine.RefTableId == custInvoiceTransLocal.TableId
            &&    creditParmLine.RefRecId   == custInvoiceTransLocal.RecId
                join creditParmLineDetails
                where creditParmLineDetails.CreditLineRefRecId == creditParmLine.RecId
        {
            if (firstLoop)
            {
                firstLoop = false;
                salesIdRange = '(';
            }
            else
            {
                salesIdRange += ' || ';
            }
    
            salesIdRange += strFmt('(%1.%2 == "%3")', _dsName, fieldStr(SalesTable, SalesId), custInvoiceTransLocal.OrigSalesId);
        }
    
        if (firstLoop)
        {
            salesIdRange = '';
        }
        else
        {
            salesIdRange += ')';
        }
        
        return salesIdRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINgetEmptyHeaderOrderIdSet</Name>
				<Source><![CDATA[
    public Set FINgetEmptyHeaderOrderIdSet()
    {
        return emptyHeaderOrderIdSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>