<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINRentalPeriodJournalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FINRentalPeriodJournalizer extends FINRentalPeriodJournalizerBase
{
    FINInvoiceCalculatorParm                invoiceCalculatorParm;
    FINRentalTransPeriod                    rentalTransPeriod;
    FINRentalTransPeriodPriceComponent      rentalTransPeriodPriceComponent;
    FINRentalTransCalcResult                rentalTransCalcResult;
    FINRentalTransCredit                    rentalTransCredit;
    FINRentalTransPriceAmendment            rentalTransPriceAmendment;
    FINRentalTransTransportPrice            rentalTransTransportPrice;
    FINRentalTransCostPrice                 rentalTransCostPrice;
    FINRentalTransManualComponent           rentalTransManualComponent;
    FINRentalTransProjHour                  rentalTransProjHour;
    FINRentalTransTotals                    rentalTransTotals;
    FINRentalInvoiceLinePacked              rentalInvoiceLinePacked;
    RecordInsertList                        rentalTransPeriodPriceComponentInsertList;
    RecordInsertList                        rentalTransCalcResultInsertList;
    RecordInsertList                        rentalTransCreditInsertList;
    RecordInsertList                        rentalTransTransportPriceInsertList;
    RecordInsertList                        rentalTransPriceAmendmentInsertList;
    RecordInsertList                        rentalTransManualComponentInsertList;
    RecordInsertList                        rentalTransProjHourInsertList;
    RORRentalDateTime                       rentalStartDateTime = DateTimeUtil::maxValue();
    RORRentalDateTime                       rentalEndDateTime = DateTimeUtil::minValue();

    [SysObsolete("DNRDeletedObjects01_2021. No longer used, stored on Period level - rentalTransPeriod.InsurancePercentage", false)]
    DiscPct                                 insurancePct;
    [SysObsolete("DNRDeletedObjects01_2021. No longer used, moved to  rentalTransTotals.InsuranceCalcBasis field", false)]
    RORInsuranceCalcBasis                   insuranceCalcBasis;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINRentalPeriodJournalizer construct(Common _buffer, FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
        FINRentalPeriodJournalizerAttribute attribute       = new FINRentalPeriodJournalizerAttribute(tableId2Name(_buffer.TableId));
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_buffer, _invoiceCalculatorParm);

        FINRentalPeriodJournalizer rentalPeriodJournalizer = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(FINRentalPeriodJournalizer), attribute, instantiation) as FINRentalPeriodJournalizer;

        if (!rentalPeriodJournalizer)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return rentalPeriodJournalizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _buffer, FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
        super(_buffer, _invoiceCalculatorParm);

        invoiceCalculatorParm = _invoiceCalculatorParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalize</Name>
				<Source><![CDATA[
    public void journalize()
    {
        if (invoiceCalculatorParm.RecId)
        {
            this.initFromInvoiceCalculatorParm();
            this.journalizeLine();
        }
        else
        {
            this.journalizeJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeLine</Name>
				<Source><![CDATA[
    protected void journalizeLine()
    {
        super();
        
        this.unloadData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    protected void initFromInvoiceCalculatorParm()
    {
        this.parmPeriodSpecificationPacked(invoiceCalculatorParm.PeriodSpecificationPacked);
        this.parmRentalCalcPacked(invoiceCalculatorParm.RentalCalcPacked);
        this.parmCalcResultListPacked(invoiceCalculatorParm.InvoiceCalcResultListPacked);
        this.parmTransportCalcPacked(invoiceCalculatorParm.TransportCalcPacked);
        this.parmCreditCalcPacked(invoiceCalculatorParm.CreditCalcPacked);
        this.parmPriceComponentsAmendmentPacked(invoiceCalculatorParm.PriceComponentsAmendmentPacked);
        this.parmCostPriceCalcPacked(invoiceCalculatorParm.CostPriceCalcPacked);
        this.parmManualComponentPacked(invoiceCalculatorParm.ManualCalcPacked);
        this.parmProjHourPacked(invoiceCalculatorParm.ProjHoursCalcPacked);
        this.parmTimezone(invoiceCalculatorParm.Timezone);

        rentalTransPeriod.setTmp();
        rentalTransPeriodPriceComponent.setTmp();
        rentalTransCalcResult.setTmp();
        rentalTransCredit.setTmp();
        rentalTransPriceAmendment.setTmp();
        rentalTransTransportPrice.setTmp();
        rentalTransCostPrice.setTmp();
        rentalTransManualComponent.setTmp();
        rentalTransProjHour.setTmp();
        rentalTransTotals.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRecId</Name>
				<Source><![CDATA[
    protected abstract RefRecId getSourceRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableId</Name>
				<Source><![CDATA[
    protected abstract TableId getSourceTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodFromPeriodSpecification</Name>
				<Source><![CDATA[
    protected void createPeriodFromPeriodSpecification(TransDateTime _fromDateTime, TransDateTime _toDateTime, FINPeriodSpecification _periodSpecification)
    {
        if (_periodSpecification.invoiceAmountCur || _periodSpecification.numOfCalendarPeriods)
        {
            rentalTransPeriod.clear();
            rentalTransPeriod.SourceRecId = this.getSourceRecId();
            rentalTransPeriod.PeriodStartDateTime = DateTimeUtil::removeTimeZoneOffset(_periodSpecification.fromDateTime, timezone);
            rentalTransPeriod.PeriodEndDateTime = DateTimeUtil::removeTimeZoneOffset(_periodSpecification.toDateTime, timezone);
            rentalTransPeriod.QtyInvoiced = invoiceQty;
            rentalTransPeriod.DiscAmount = _periodSpecification.periodDisc;
            rentalTransPeriod.LineAmount = (_periodSpecification.invoiceAmountCur + _periodSpecification.periodDisc);
            rentalTransPeriod.NumOfCalendarPeriods = _periodSpecification.numOfCalendarPeriods;
            rentalTransPeriod.NumOfChargeablePeriods = _periodSpecification.numOfChargedPeriods;
            rentalTransPeriod.PriceTierMultiplier = _periodSpecification.tierMultiplier;
            rentalTransPeriod.InsuranceCalcBasis = _periodSpecification.insuranceCalcBasis;
            rentalTransPeriod.InsuranceAmount = _periodSpecification.insuranceAmount;
            rentalTransPeriod.InsurancePercentage = _periodSpecification.insurancePct;
            rentalTransPeriod.PriceTimeUnit = _periodSpecification.PriceTimeUnit;
            rentalTransPeriod.InvoicePeriodQtyFinancialRefRecId = invoicePeriodQtyRecId;

            RORRentalLine rentalLine = this.getOrderLine();

            if (rentalLine.RecId)
            {
                this.setInvoicePeriodLink(rentalTransPeriod, rentalLine);
            }

            this.initRentalTransPeriod();

            rentalTransPeriod.insert();

            this.updateRentalTotalsFromRentalTransPeriod(rentalTransPeriod);

            rentalStartDateTime = min(rentalStartDateTime, rentalTransPeriod.PeriodStartDateTime);
            rentalEndDateTime = max(rentalEndDateTime, rentalTransPeriod.PeriodEndDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodFromCredit</Name>
				<Source><![CDATA[
    protected void createPeriodFromCredit(RefTableId _recordRefTableId, RefRecId _recordRefRecId)
    {
        FINJournalizedInvoicePeriod invoicePeriod;
        RefRecId                    invPeriodQtyPhysicalRecId;
        boolean                     hasAnyPeriod;

        while select invoicePeriod
        order by InvPeriodQtyPhysicalRecId
        where invoicePeriod.RefTableId == _recordRefTableId
        &&    invoicePeriod.RefRecId   == _recordRefRecId
        {
            hasAnyPeriod = true;

            // One record per delivery
            if (invPeriodQtyPhysicalRecId != invoicePeriod.InvPeriodQtyPhysicalRecId)
            {
                if (invPeriodQtyPhysicalRecId)
                {
                    rentalTransPeriod.setExchangeInfo(this.getOrderLine());
                    rentalTransPeriod.insert();

                    this.createPriceComponent(FINInvoicePeriodPriceComponent::LinePercent, 0, rentalTransPeriod.NumOfChargeablePeriods);
                    this.createPriceComponent(FINInvoicePeriodPriceComponent::RentalModeId, 1, rentalTransPeriod.NumOfChargeablePeriods);
                    this.createPriceComponent(FINInvoicePeriodPriceComponent::RentalPrice, rentalTransPeriod.displayAvgGrossPrice(), rentalTransPeriod.NumOfChargeablePeriods);
                }

                rentalTransPeriod.clear();
                rentalTransPeriod.SourceRecId = this.getSourceRecId();
                rentalTransPeriod.QtyInvoiced = invoicePeriod.QtyInvoiced;
            }

            rentalTransPeriod.DiscAmount += invoicePeriod.DiscAmount;
            rentalTransPeriod.LineAmount += (invoicePeriod.LineAmount + invoicePeriod.DiscAmount);
            rentalTransPeriod.NumOfCalendarPeriods += invoicePeriod.NumOfCalendarPeriods;
            rentalTransPeriod.NumOfChargeablePeriods += invoicePeriod.NumOfChargeablePeriods;
                
            TransDateTime fromDateTime = invoicePeriod.PeriodStartDateTime;
            TransDateTime toDateTime = invoicePeriod.PeriodEndDateTime;
            if (rentalTransPeriod.PeriodStartDateTime == DateTimeUtil::minValue())
            {
                rentalTransPeriod.PeriodStartDateTime = fromDateTime;
            }
            rentalTransPeriod.PeriodEndDateTime = toDateTime;
          
            invPeriodQtyPhysicalRecId = invoicePeriod.InvPeriodQtyPhysicalRecId;

            rentalStartDateTime = min(rentalStartDateTime, rentalTransPeriod.PeriodStartDateTime);
            rentalEndDateTime = max(rentalEndDateTime, rentalTransPeriod.PeriodEndDateTime);
        }

        if (hasAnyPeriod)
        {
            rentalTransPeriod.PriceTimeUnit = UnitOfMeasure::find(this.getOrderLine().PriceTimeUnit).Symbol;
            rentalTransPeriod.setExchangeInfo(this.getOrderLine());
            rentalTransPeriod.insert();

            this.createPriceComponent(FINInvoicePeriodPriceComponent::LinePercent, 0, rentalTransPeriod.NumOfChargeablePeriods);
            this.createPriceComponent(FINInvoicePeriodPriceComponent::RentalModeId, 1, rentalTransPeriod.NumOfChargeablePeriods);
            this.createPriceComponent(FINInvoicePeriodPriceComponent::RentalPrice, rentalTransPeriod.displayAvgGrossPrice(), rentalTransPeriod.NumOfChargeablePeriods);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRentalTransPeriod</Name>
				<Source><![CDATA[
    protected void initRentalTransPeriod()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        rentalTransTotals.RentalAmount = 0;
        rentalTransTotals.RentalDiscountAmount = 0;
        rentalTransTotals.InsuranceAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLine</Name>
				<Source><![CDATA[
    protected RORRentalLine getOrderLine()
    {
        Common common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoicePeriodLink</Name>
				<Source><![CDATA[
    protected void setInvoicePeriodLink(FINRentalTransPeriod _rentalTransPeriod, RORRentalLine _renntalLine)
    {
        FINInvoicePeriodQtyFinancial    invoicePeriodQtyFinancial;
        FINInvoicePeriodQtyPhysical     invoicePeriodQtyPhysical;

        select firstonly RecId from invoicePeriodQtyFinancial
        where invoicePeriodQtyFinancial.PeriodStartDateTime == _rentalTransPeriod.PeriodStartDateTime
        && invoicePeriodQtyFinancial.PeriodEndDateTime      == _rentalTransPeriod.PeriodEndDateTime
            join TableId from invoicePeriodQtyPhysical
            where invoicePeriodQtyPhysical.RecId    == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId
            && invoicePeriodQtyPhysical.RefRecId    == _renntalLine.RecId
            && invoicePeriodQtyPhysical.RefTableId  == _renntalLine.TableId;

        if (invoicePeriodQtyFinancial.RecId)
        {
            _rentalTransPeriod.InvoicePeriodQtyFinancialRefRecId = invoicePeriodQtyFinancial.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceComponent</Name>
				<Source><![CDATA[
    protected void createPriceComponent(FINInvoicePeriodPriceComponent _priceComponentType, real _priceComponentValue, INVChargedPeriods _chargedPeriods)
    {
        rentalTransPeriodPriceComponent.clear();
        rentalTransPeriodPriceComponent.PeriodRecId = rentalTransPeriod.RecId;
        rentalTransPeriodPriceComponent.InvoicePeriodPriceComponent = _priceComponentType;
        rentalTransPeriodPriceComponent.PriceComponentValue = _priceComponentValue;
        rentalTransPeriodPriceComponent.NumOfChargeablePeriods = _chargedPeriods;
        
        this.addRentalTransPeriodComponent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRentalTransPeriodComponent</Name>
				<Source><![CDATA[
    protected void addRentalTransPeriodComponent()
    {
        rentalTransPeriodPriceComponentInsertList.add(rentalTransPeriodPriceComponent);

        if (invoiceCalculatorParm.RecId)
        {
            rentalTransPeriodPriceComponent.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcResult</Name>
				<Source><![CDATA[
    protected void createCalcResult(FINInvoiceCalcResult _invoiceCalcResult)
    {
        rentalTransCalcResult.SourceRecId = this.getSourceRecId();
        rentalTransCalcResult.AccountType = _invoiceCalcResult.accountType;
        rentalTransCalcResult.AmountCur = _invoiceCalcResult.amountCur;
        rentalTransCalcResult.MarkupCode = _invoiceCalcResult.markupCode;
        rentalTransCalcResult.MarkupTxt = _invoiceCalcResult.markupTxt;
        rentalTransCalcResult.MarkupTaxItemGroup = _invoiceCalcResult.markupTaxItemGroup;
        rentalTransCalcResult.MustCharge = _invoiceCalcResult.mustCharge;
        rentalTransCalcResult.IsReversal = _invoiceCalcResult.isReversal;

        this.addCustInvoiceTransCalcResult();

        this.updateRentalTotalsFromRentalTransCalcResult(rentalTransCalcResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustInvoiceTransCalcResult</Name>
				<Source><![CDATA[
    protected void addCustInvoiceTransCalcResult()
    {
        if (invoiceCalculatorParm.RecId)
        {
            rentalTransCalcResult.insert();
        }
        else
        {
            rentalTransCalcResultInsertList.add(rentalTransCalcResult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCredit</Name>
				<Source><![CDATA[
    protected void createCredit(RefTableId _recordRefTableId, RefRecId _recordRefRecId)
    {
        rentalTransCredit.SourceRecId = this.getSourceRecId();
        rentalTransCredit.CreditedRecId = _recordRefRecId;

        this.addRentalTransCredit();

    }

]]></Source>
			</Method>
			<Method>
				<Name>addRentalTransCredit</Name>
				<Source><![CDATA[
    protected void addRentalTransCredit()
    {
        if (invoiceCalculatorParm.RecId)
        {
            rentalTransCredit.insert();
        }
        else
        {
            rentalTransCreditInsertList.add(rentalTransCredit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportPrice</Name>
				<Source><![CDATA[
    protected void createTransportPrice(FINRentalAccountType _accountType, container _values)
    {
        rentalTransTransportPrice.SourceRecId = this.getSourceRecId();
        rentalTransTransportPrice.AccountType = _accountType;
        rentalTransTransportPrice.BaseAmount = conPeek(_values, 1);
        rentalTransTransportPrice.DiscountAmount = conPeek(_values, 2);
        rentalTransTransportPrice.Tiermultiplier = conPeek(_values, 3);
        rentalTransTransportPrice.Amount = conPeek(_values, 4);

        this.addRentalTransTransportPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRentalTransTransportPrice</Name>
				<Source><![CDATA[
    protected void addRentalTransTransportPrice()
    {
        if (invoiceCalculatorParm.RecId)
        {
            rentalTransTransportPrice.insert();
        }
        else
        {
            rentalTransTransportPriceInsertList.add(rentalTransTransportPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceComponentAmendment</Name>
				<Source><![CDATA[
    protected void createPriceComponentAmendment(FINTmpInvoicePeriodPrice _tmpInvoicePeriodPrice)
    {
        if (_tmpInvoicePeriodPrice.FromDateTime < rentalEndDateTime
            && _tmpInvoicePeriodPrice.ToDateTime > rentalStartDateTime)
        {
            rentalTransPriceAmendment.SourceRecId = this.getSourceRecId();
            rentalTransPriceAmendment.FromDateTime = _tmpInvoicePeriodPrice.FromDateTime;
            rentalTransPriceAmendment.ToDateTime = _tmpInvoicePeriodPrice.ToDateTime;
            rentalTransPriceAmendment.StrValue = _tmpInvoicePeriodPrice.StrValue;
            rentalTransPriceAmendment.RealValue = _tmpInvoicePeriodPrice.RealValue;
            rentalTransPriceAmendment.PriceComponent = _tmpInvoicePeriodPrice.PriceComponent;

            this.addRentalTransPriceAmendment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRentalTransPriceAmendment</Name>
				<Source><![CDATA[
    protected void addRentalTransPriceAmendment()
    {
        if (invoiceCalculatorParm.RecId)
        {
            rentalTransPriceAmendment.insert();
        }
        else
        {
            rentalTransPriceAmendmentInsertList.add(rentalTransPriceAmendment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCostPrice</Name>
				<Source><![CDATA[
    protected void createCostPrice(FINCostPriceJournalizer _costPriceJournalizer)
    {
        rentalTransCostPrice.SourceRecId = this.getSourceRecId();
        rentalTransCostPrice.ObjectId = _costPriceJournalizer.getObjectId();
        rentalTransCostPrice.ItemId = _costPriceJournalizer.getItemId();
        rentalTransCostPrice.CalculationDate = _costPriceJournalizer.getCalculationDate();
        rentalTransCostPrice.PriceTimeUnit = _costPriceJournalizer.getPriceTimeUnit();
        rentalTransCostPrice.CostPrice = _costPriceJournalizer.getCostPrice();
        rentalTransCostPrice.NumOfChargeablePeriods = _costPriceJournalizer.getNumOfChargeablePeriods();
        rentalTransCostPrice.CostAmount = _costPriceJournalizer.getCostAmount();

        rentalTransCostPrice.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createManualComponent</Name>
				<Source><![CDATA[
    protected void createManualComponent(container _values)
    {
        rentalTransManualComponent.SourceRecId = this.getSourceRecId();
        rentalTransManualComponent.Amount = conPeek(_values, 1);
        rentalTransManualComponent.Description = conPeek(_values, 2);
        rentalTransManualComponent.IsCredit = conPeek(_values, 3);
        rentalTransManualComponent.RentalAccountType = conPeek(_values, 4);
        rentalTransManualComponent.ComponentRecId = conPeek(_values, 5);

        this.addRentalTransManualComponent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRentalTransManualComponent</Name>
				<Source><![CDATA[
    protected void addRentalTransManualComponent()
    {
        if (invoiceCalculatorParm.RecId)
        {
            rentalTransManualComponent.insert();
        }
        else
        {
            rentalTransManualComponentInsertList.add(rentalTransManualComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjHour</Name>
				<Source><![CDATA[
    protected void createProjHour(RefRecId _projEmplTransRecId)
    {
        rentalTransProjHour.SourceRecId = this.getSourceRecId();
        rentalTransProjHour.ProjEmplTransRecId = _projEmplTransRecId;

        this.addProjHour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjHour</Name>
				<Source><![CDATA[
    protected void addProjHour()
    {
        if (invoiceCalculatorParm.RecId)
        {
            rentalTransProjHour.insert();
        }
        else
        {
            rentalTransProjHourInsertList.add(rentalTransProjHour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalTotals</Name>
				<Source><![CDATA[
    protected void updateRentalTotals(FINRentalJournalizer _rentalJournalizer)
    {
        this.calculateChargedAndCostAmounts();

        if (invoiceCalculatorParm.RecId)
        {
            rentalTransTotals.insert();
        }
        else
        {
            rentalTransTotals.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalTotalsFromRentalTransCalcResult</Name>
				<Source><![CDATA[
    protected void updateRentalTotalsFromRentalTransCalcResult(FINRentalTransCalcResult _rentalTransCalcResult)
    {
        if (_rentalTransCalcResult.IsReversal)
        {
            return;
        }

        switch (_rentalTransCalcResult.accountType)
        {
            case FINRentalAccountType::Price:
                rentalTransTotals.RentalAmount += _rentalTransCalcResult.amountCur;
                break;
            case FINRentalAccountType::Discount:
                rentalTransTotals.RentalDiscountAmount += _rentalTransCalcResult.amountCur;
                break;
            case FINRentalAccountType::Insurance:
                rentalTransTotals.InsuranceAmount += _rentalTransCalcResult.amountCur;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalTotalsFromRentalTransPeriod</Name>
				<Source><![CDATA[
    protected void updateRentalTotalsFromRentalTransPeriod(FINRentalTransPeriod _rentalTransPeriod)
    {
        rentalTransTotals.ChargedPeriods += _rentalTransPeriod.NumOfChargeablePeriods;
        rentalTransTotals.InvoicedQty = max(rentalTransTotals.InvoicedQty, _rentalTransPeriod.QtyInvoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateChargedAndCostAmounts</Name>
				<Source><![CDATA[
    protected void calculateChargedAndCostAmounts()
    {

        if (invoiceCalculatorParm.RecId)
        {
            rentalTransTotals.TotalChargedAmount = invoiceCalculatorParm.InvoiceAmount;
            rentalTransTotals.TotalInternalAmount = (invoiceCalculatorParm.MarkupAmount - invoiceCalculatorParm.InvoiceAmount);
        }
        else
        {
            MarkupTable markupTable;
            MarkupTrans markupTrans;

            select sum (CalculatedAmount) from markupTrans
            where markupTrans.TransTableId      == this.getSourceTableId()
            &&    markupTrans.TransRecId        == this.getSourceRecId()
                join TableId from markupTable
                where markupTable.ModuleType    == markupTrans.ModuleType
                &&    markupTable.MarkupCode    == markupTrans.MarkupCode
                &&   (markupTable.CustType      == MarkupType::CustVend
                ||    markupTable.VendType      == MarkupType::CustVend);

            rentalTransTotals.TotalChargedAmount = markupTrans.CalculatedAmount;

            select sum (CalculatedAmount) from markupTrans
            where markupTrans.TransTableId      == this.getSourceTableId()
            &&    markupTrans.TransRecId        == this.getSourceRecId()
                join TableId from markupTable
                where markupTable.ModuleType    == markupTrans.ModuleType
                &&    markupTable.MarkupCode    == markupTrans.MarkupCode
                &&   (markupTable.CustType      != MarkupType::CustVend
                &&    markupTable.VendType      != MarkupType::CustVend);

            rentalTransTotals.TotalInternalAmount = -markupTrans.CalculatedAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    protected void insertRecordList()
    {
        if (!invoiceCalculatorParm.RecId)
        {
            rentalTransPeriodPriceComponentInsertList.insertDatabase();
            rentalTransCalcResultInsertList.insertDatabase();
            rentalTransCreditInsertList.insertDatabase();
            rentalTransTransportPriceInsertList.insertDatabase();
            rentalTransPriceAmendmentInsertList.insertDatabase();
            rentalTransManualComponentInsertList.insertDatabase();
            rentalTransProjHourInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unloadData</Name>
				<Source><![CDATA[
    protected void unloadData()
    {
        rentalInvoiceLinePacked.FINRentalInvoiceLinePacked::unloadData();
        rentalInvoiceLinePacked.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransPeriod</Name>
				<Source><![CDATA[
    public FINRentalTransPeriod getTmpRentalTransPeriod()
    {
        return rentalTransPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransPeriodPriceComponent</Name>
				<Source><![CDATA[
    public FINRentalTransPeriodPriceComponent getTmpRentalTransPeriodPriceComponent()
    {
        return rentalTransPeriodPriceComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransCalcResult</Name>
				<Source><![CDATA[
    public FINRentalTransCalcResult getTmpRentalTransCalcResult()
    {
        return rentalTransCalcResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransCredit</Name>
				<Source><![CDATA[
    public FINRentalTransCredit getTmpRentalTransCredit()
    {
        return rentalTransCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransPriceAmendment</Name>
				<Source><![CDATA[
    public FINRentalTransPriceAmendment getTmpRentalTransPriceAmendment()
    {
        return rentalTransPriceAmendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransTransportPrice</Name>
				<Source><![CDATA[
    public FINRentalTransTransportPrice getTmpRentalTransTransportPrice()
    {
        return rentalTransTransportPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransCostPrice</Name>
				<Source><![CDATA[
    public FINRentalTransCostPrice getTmpRentalTransCostPrice()
    {
        return rentalTransCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransManualComponent</Name>
				<Source><![CDATA[
    public FINRentalTransManualComponent getTmpRentalTransManualComponent()
    {
        return rentalTransManualComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransProjHour</Name>
				<Source><![CDATA[
    public FINRentalTransProjHour getTmpRentalTransProjHour()
    {
        return rentalTransProjHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTransTotals</Name>
				<Source><![CDATA[
    public FINRentalTransTotals getTmpRentalTransTotals()
    {
        return rentalTransTotals;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>