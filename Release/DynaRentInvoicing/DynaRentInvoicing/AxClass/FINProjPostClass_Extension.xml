<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINProjPostClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjPost))]
final class FINProjPostClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLedgerVoucherTransObjectForPostTurnover</Name>
				<Source><![CDATA[
    final protected LedgerVoucherTransObject initLedgerVoucherTransObjectForPostTurnover(
        LedgerVoucherObject     _ledgerVoucherObject,
        LedgerDimensionAccount  _mergedLedgerDimension,
        MapEnumerator           _fundingAllocationEnumerator,
        CurrencyExchangeHelper  _exchangeRateHelper,
        Map                     _splitTransQty,
        ProjLedger              _tmpProjLedger
        )
    {
        LedgerVoucherTransObject ledgerVoucherTransObject = next initLedgerVoucherTransObjectForPostTurnover(_ledgerVoucherObject, 
                                                                                                            _mergedLedgerDimension, 
                                                                                                            _fundingAllocationEnumerator, 
                                                                                                            _exchangeRateHelper, 
                                                                                                            _splitTransQty, 
                                                                                                            _tmpProjLedger);
        ProjOnAccTransSale projOnAccTransDeduct;
        boolean isTransTypeOnAccDeduction;

        select firstonly RecId, LedgerTransdate, TransId from projOnAccTransDeduct
            where projOnAccTransDeduct.TransId == projTrans.transId();

        isTransTypeOnAccDeduction = (projTrans.transType() == ProjTransType::OnAccount &&
            projTrans.psaIsOnAccount() == NoYes::Yes &&
            projOnAccTransDeduct.projOnAccTrans().TransactionOrigin == ProjOrigin::Deduction);

        if (!isTransTypeOnAccDeduction && !ledgerVoucher.parmIsAdvanceDeducted())
        {
            PSAProjProposalProj psaProjProposalProj;
            select firstonly ProjProposalId, InvoicedNow from psaProjProposalProj
                    where psaProjProposalProj.ProjProposalId == projTrans.proposalId()
                        && psaProjProposalProj.ProjId == projTrans.projId()
                        && psaProjProposalProj.IsPreBill == NoYes::Yes;

            if (psaProjProposalProj.InvoicedNow)
            {
                ledgerVoucherTransObject.FINparmSkipDistribution(true);
            }
        }

        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>