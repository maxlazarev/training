<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINForecastSalesTbl_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ForecastSales))]
public final class FINForecastSalesTbl_Extension
{
    // chain-of-command wrapper methods    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void initFromSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {        
        next initFromSalesQuotationLine(_salesQuotationLine);
    
        // overwrite costPrice, salesPrice and amount if it is rental quotation line
        if (_salesQuotationLine.RORTradeType != RORTradeType::SalesPurch)
        {
            boolean skipCalcTotal = RORParameters::find().SkipCalcRentalAmtOnTransferToForecast;

            if (!skipCalcTotal)
            {
                ttsbegin;

                FINSalesQuotationTotals finSalesQuotationTotals;
                FINSalesQuotationTotalsDisposableContext context = FINSalesQuotationTotalsDisposableContext::current();

                if (context)
                {
                    finSalesQuotationTotals = context.parmSalesQuotationTotals();
                }
                else
                {
                    finSalesQuotationTotals = new FINSalesQuotationTotals();
                    finSalesQuotationTotals.parmCallerBuffer(_salesQuotationLine.salesQuotationTable());
                    finSalesQuotationTotals.prepareDataForTotals();
                }

                if (finSalesQuotationTotals.getParmTable())
                {
                    ParmId parmId = finSalesQuotationTotals.getParmTable().ParmId;
                    FINInvoiceCalculatorParm invoiceCalculatorParm;

                    select firstonly invoiceCalculatorParm
                    where invoiceCalculatorParm.ParmId == parmId
                    &&    invoiceCalculatorParm.OrderLineTableId == _salesQuotationLine.TableId
                    &&    invoiceCalculatorParm.OrderLineRecId == _salesQuotationLine.RecId;

                    this.CostPrice = (this.SalesQty ? (invoiceCalculatorParm.MarkupAmount - invoiceCalculatorParm.InvoiceAmount) / this.SalesQty : (invoiceCalculatorParm.MarkupAmount - invoiceCalculatorParm.InvoiceAmount));
                    this.SalesPrice = (this.SalesQty ? invoiceCalculatorParm.InvoiceAmount / this.SalesQty : invoiceCalculatorParm.InvoiceAmount);
                    this.Amount = invoiceCalculatorParm.InvoiceAmount;
                }

                if (!context)
                {
                    finSalesQuotationTotals.cleanupPrecalculatedData();
                }

                ttscommit;
            }
            else
            {
                this.CostPrice  = _salesQuotationLine.CostPrice;
                this.SalesPrice = _salesQuotationLine.SalesPrice;
                this.Amount     = _salesQuotationLine.LineAmount;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>