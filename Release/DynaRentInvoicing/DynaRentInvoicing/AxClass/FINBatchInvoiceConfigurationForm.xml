<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINBatchInvoiceConfigurationForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>FINBatchInvoiceConfigurationForm</c> serves as a helper class to Advance rental invoicing management forms.
/// </summary>
class FINBatchInvoiceConfigurationForm
{
    FINBatchInvoiceConfiguration    invoiceConfiguration;
    NumberSeqFormHandler            numberSeqFormHandler;
    SalesPurchSummarySumByCtrl      sumByCtrl;
    FormDataSource                  batchInvoiceConfiguration_ds;
    FormComboBoxControl             ctrlSumBy;
    FormFunctionButtonControl       ctrlScheduledRecurrence;
    FormFunctionButtonControl       ctrlCalculationRecurrence;
    str                             activeRecurrenceButton;
    FormRun                         formRun;
    Map                             invoiceCheckSelectionMap;
    Map                             invoiceCheckSelectionControlMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSumBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SumBy ctrl 
    /// </summary>
    /// <param name = "_ctrlSumBy"></param>
    /// <returns>
    /// Returns the form SumBy ComboBox Ctrl
    /// </returns>
    public FormComboBoxControl parmSumBy(FormComboBoxControl _ctrlSumBy = ctrlSumBy)
    {
        ctrlSumBy = _ctrlSumBy;
        return ctrlSumBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduledRecurrenceCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Scheduled recurrrence Ctrl
    /// </summary>
    /// <param name = "_ctrlScheduledRecurrence">Recurrence Ctrl to set</param>
    /// <returns>
    /// Returns the Form Scheduled recurrence Ctrl
    /// </returns>
    public FormFunctionButtonControl parmScheduledRecurrenceCtrl(FormFunctionButtonControl _ctrlScheduledRecurrence = ctrlScheduledRecurrence)
    {
        ctrlScheduledRecurrence = _ctrlScheduledRecurrence;
        return ctrlScheduledRecurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationRecurrenceCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Calculation Recurrence Ctrl
    /// </summary>
    /// <param name = "_ctrlCalculationRecurrence">Recurrence Ctrl to set</param>
    /// <returns>
    /// /// Returns the Form Calculation recurrence Ctrl
    /// </returns>
    public FormFunctionButtonControl parmCalculationRecurrenceCtrl(FormFunctionButtonControl _ctrlCalculationRecurrence = ctrlCalculationRecurrence)
    {
        ctrlCalculationRecurrence = _ctrlCalculationRecurrence;
        return ctrlCalculationRecurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceCheckSelectionMap</Name>
				<Source><![CDATA[
    public Map parmInvoiceCheckSelectionMap(Map _invoiceCheckSelectionMap = invoiceCheckSelectionMap)
    {
        invoiceCheckSelectionMap = _invoiceCheckSelectionMap;
        return invoiceCheckSelectionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveRecurrenceButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the active Recurrence button which is clicked.
    /// </summary>
    /// <param name = "_activeRecurrenceButton">Active Recurrence Ctrl Name to set</param>
    /// <returns>
    /// Returns the name of clicked Recurrence button
    /// </returns>
    public str parmActiveRecurrenceButton(str _activeRecurrenceButton = activeRecurrenceButton)
    {
        activeRecurrenceButton = _activeRecurrenceButton;
        return activeRecurrenceButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called from caller form datasource create method.
    /// </summary>
    public void formMethodDataSourceCreate()
    {
        numberSeqFormHandler.formMethodDataSourceCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the caller form is closed.
    /// </summary>
    public void formMethodClose()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called from caller form datasource delete method
    /// </summary>
    public void formMethodDataSourceDelete()
    {
        numberSeqFormHandler.formMethodDataSourceDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called from caller form datasouce validate write method.
    /// </summary>
    /// <returns>
    /// returns true if validation passes
    /// </returns>
    public boolean formMethodDataSourceValidateWrite()
    {
        boolean ret = true;

        if (!numberSeqFormHandler.formMethodDataSourceValidateWrite())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called from caller form datasouce write method.
    /// </summary>
    public void formMethodDataSourceWrite()
    {
        numberSeqFormHandler.formMethodDataSourceWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called during creation of a new record.
    /// </summary>
    /// <returns>
    /// returns true if a record is created
    /// </returns>
    public boolean datasourceCreatePre()
    {
        boolean ret;
        Args    args = new Args();
        FormRun invoiceConfigurationEditor;

        args.name(formStr(FINBatchInvoiceConfigurationCreate));
        args.caller(this);
        invoiceConfigurationEditor = classfactory.formRunClass(args);
        invoiceConfigurationEditor.init();
        invoiceConfigurationEditor.run();
        invoiceConfigurationEditor.wait();
        if (invoiceConfigurationEditor.closedOk())
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupSumByControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method must be called from the caller form to initialize the SumByCTrl
    /// </summary>
    /// <param name = "_sumByControl">The Sumby Ctrl </param>
    /// <param name = "_specQty">Spec Qty</param>
    /// <param name = "_accountOrder">Account Order</param>
    public  void setupSumByControl(FormComboBoxControl  _sumByControl,
                                   SalesUpdate          _specQty,
                                   AccountOrder         _accountOrder)
    {
        sumByCtrl = SalesPurchSummarySumByCtrl::newSumByControl(_sumByControl);
        
        if (_specQty != SalesUpdate::PackingSlip)
        {
            sumByCtrl.remove(AccountOrder::Journal);
        }
        else
        {
            sumByCtrl.setText(AccountOrder::Journal, "@SYS11549");
        }
        sumByCtrl.build();
        sumByCtrl.setSelection(_accountOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceCheckSelectionMap</Name>
				<Source><![CDATA[
    public void initInvoiceCheckSelectionMap(FINBatchInvoiceConfiguration _invoiceConfiguration)
    {
        if (conLen(_invoiceConfiguration.InvoiceCheckSelectionPacked) < 4)
        {
            invoiceCheckSelectionMap = DNRPreInvoiceCheck::getDefaultInvoiceCheckSelectionMap();
        }
        else
        {
            invoiceCheckSelectionMap = Map::create(_invoiceConfiguration.InvoiceCheckSelectionPacked);
        }

        this.updateInvoiceCheckValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceCheckControls</Name>
				<Source><![CDATA[
    public void createInvoiceCheckControls(FormTabPageControl _parentTabPageControl)
    {
        //data structure could be subject to refacoring in case perfomance is affected
        FormGroupControl preCheckHeaderGroup, postCheckHeaderGroup, preCheckLineGroup, postCheckLineGroup;
        invoiceCheckSelectionControlMap = new Map(Types::Enum, Types::Class);

        preCheckHeaderGroup = _parentTabPageControl.addControl(FormControlType::Group, "preCheckHeaderGroup");
        preCheckHeaderGroup.caption("@DNR:PreInvoiceHeaderChecks");
        this.fillInvoiceCheckGroup(preCheckHeaderGroup, DNRPrePostInvoiceCheck::PreInvoice, HeadingLine::Heading);

        postCheckHeaderGroup = _parentTabPageControl.addControl(FormControlType::Group, "postCheckHeaderGroup");
        postCheckHeaderGroup.caption("@DNR:PostInvoiceHeaderChecks");
        this.fillInvoiceCheckGroup(postCheckHeaderGroup, DNRPrePostInvoiceCheck::PostInvoice, HeadingLine::Heading);

        postCheckHeaderGroup = _parentTabPageControl.addControl(FormControlType::Group, "preCheckLineGroup");
        postCheckHeaderGroup.caption("@DNR:PreInvoiceLineChecks");
        this.fillInvoiceCheckGroup(postCheckHeaderGroup, DNRPrePostInvoiceCheck::PreInvoice, HeadingLine::Line);

        postCheckHeaderGroup = _parentTabPageControl.addControl(FormControlType::Group, "postCheckLineGroup");
        postCheckHeaderGroup.caption("@DNR:PostInvoiceLineChecks");
        this.fillInvoiceCheckGroup(postCheckHeaderGroup, DNRPrePostInvoiceCheck::PostInvoice, HeadingLine::Line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInvoiceCheckGroup</Name>
				<Source><![CDATA[
    private void fillInvoiceCheckGroup(FormGroupControl _groupControl, DNRPrePostInvoiceCheck _prePostInvoiceCheck, HeadingLine _headerLine)
    {
        DNRPrePostInvoiceCheck prePostInvoiceCheck;
        HeadingLine headerLine;
        boolean enabled;
        SysDictEnum dictEnum = new SysDictEnum(enumnum(FINInvoiceCheckCategory));
        FINInvoiceCheckCategory invoiceCheckCategoryLocal;

        if (!invoiceCheckSelectionMap)
        {
            invoiceCheckSelectionMap = DNRPreInvoiceCheck::getDefaultInvoiceCheckSelectionMap();
        }

        MapEnumerator mapEnumerator = invoiceCheckSelectionMap.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            invoiceCheckCategoryLocal = mapEnumerator.currentKey();

            [prePostInvoiceCheck, headerLine, enabled] = mapEnumerator.currentValue();

            if (prePostInvoiceCheck == _prePostInvoiceCheck && headerLine == _headerLine)
            {
                FormCheckBoxControl checkBoxControl = _groupControl.addControl(FormControlType::CheckBox, enum2Symbol(enumNum(FINInvoiceCheckCategory), invoiceCheckCategoryLocal));
                checkBoxControl.label(dictEnum.value2Label(invoiceCheckCategoryLocal));
                checkBoxControl.value(enabled);
                checkBoxControl.helpText(DNRPreInvoiceCheck::getCheckHelpText(invoiceCheckCategoryLocal));
                checkBoxControl.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), "invoiceCheckControlModified", this);
                invoiceCheckSelectionControlMap.add(invoiceCheckCategoryLocal, checkBoxControl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceCheckValues</Name>
				<Source><![CDATA[
    public void updateInvoiceCheckValues()
    {
        DNRPrePostInvoiceCheck prePostInvoiceCheck;
        HeadingLine headerLine;
        boolean enabled;

        MapEnumerator controlMapEnumerator = invoiceCheckSelectionControlMap.getEnumerator();

        while (controlMapEnumerator.moveNext())
        {
            FINInvoiceCheckCategory invoiceCheckCategory = controlMapEnumerator.currentKey();
            FormCheckBoxControl invoiceCheckControl = controlMapEnumerator.currentValue();

            [prePostInvoiceCheck, headerLine, enabled] = invoiceCheckSelectionMap.lookup(invoiceCheckCategory);

            invoiceCheckControl.value(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCheckControlModified</Name>
				<Source><![CDATA[
    public boolean invoiceCheckControlModified(FormCheckBoxControl _formCheckBoxControl)
    {
        DNRPrePostInvoiceCheck prePostInvoiceCheck;
        HeadingLine headerLine;
        boolean enabled;
        int enumValue = symbol2Enum(enumNum(FINInvoiceCheckCategory), _formCheckBoxControl.name());

        if (invoiceCheckSelectionMap.exists(enumValue))
        {
            [prePostInvoiceCheck, headerLine, enabled] = invoiceCheckSelectionMap.lookup(enumValue);
            invoiceCheckSelectionMap.add(enumValue, [prePostInvoiceCheck, headerLine, _formCheckBoxControl.value()]);
        }

        FINBatchInvoiceConfiguration batchInvoiceConfiguration = batchInvoiceConfiguration_ds.cursor();
        batchInvoiceConfiguration.InvoiceCheckSelectionPacked = invoiceCheckSelectionMap.pack();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByIndex2Selection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Index value related to AccountOrder value
    /// </summary>
    /// <param name = "_accountOrder">Account order</param>
    /// <returns>The equivalent interger value</returns>
    public int sumByIndex2Selection(AccountOrder _accountOrder)
    {
        if (!sumByCtrl)
        {
            return -1;
        }
        return sumByCtrl.index2Selection(_accountOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBySelection2Index</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding AccountOrder value related to current selection
    /// </summary>
    /// <param name = "_selection">Selected interger value</param>
    /// <returns>Returns the equivalent AccountOrder value</returns>
    public AccountOrder sumBySelection2Index(int _selection)
    {
        return sumByCtrl.selection2Index(_selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByChanged</Name>
				<Source><![CDATA[
    private void  sumByChanged()
    {
        if (invoiceConfiguration.SumBy == AccountOrder::Order)
        {
            invoiceConfiguration.SumSalesId = '';
            batchInvoiceConfiguration_ds.object(fieldNum(FINBatchInvoiceConfiguration, SumSalesId)).visible(true);
        }
        else
        {
            invoiceConfiguration.SumSalesId = '';
            batchInvoiceConfiguration_ds.object(fieldNum(FINBatchInvoiceConfiguration, SumSalesId)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRentalOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the Rental Orders.
    /// </summary>
    /// <param name = "_formControl">Form control for the lookup</param>
    public void lookupRentalOrder(FormControl _formControl)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsSalesTable = query.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.addRange(fieldNum(SalesTable, SalesType)).value(SysQuery::value(SalesType::RORRental));
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        sysTableLookup.setLabel("@DNR6231");
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method is executed when SumBy control is modified.
    /// </summary>
    public void sumByModified()
    {
        invoiceConfiguration.SumBy = this.sumBySelection2Index(ctrlSumBy.selection());
        this.sumByChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQtyModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when SpecQty is modified from the caller form
    /// </summary>
    public void specQtyModified()
    {
        if (invoiceConfiguration.SumBy == AccountOrder::Journal && invoiceConfiguration.SpecQty != SalesUpdate::PackingSlip)
        {
            invoiceConfiguration.SumBy = AccountOrder::None;
        }
                
        this.setupSumByControl(ctrlSumBy, invoiceConfiguration.SpecQty, invoiceConfiguration.SumBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseQueryClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is executed when Query is selected/edited.
    /// </summary>
    public void chooseQueryClicked()
    {
        container origPackedQueryRun = invoiceConfiguration.PackedQueryRun;
        SysQueryRun queryRun = new SysQueryRun(origPackedQueryRun);
        queryRun.args().caller(formRun);
        queryRun.promptShowSorting(false);
        queryRun.promptShowReset(false);
        if (queryRun.prompt())
        {
            if (origPackedQueryRun != queryRun.pack())
            {
                invoiceConfiguration.PackedQueryRun = queryRun.pack();

                if (batchInvoiceConfiguration_ds.object(fieldNum(FINBatchInvoiceConfiguration, PackedQueryRun)).validate())
                {
                    batchInvoiceConfiguration_ds.object(fieldNum(FINBatchInvoiceConfiguration, PackedQueryRun)).modified();
                }
                else
                {
                    invoiceConfiguration.PackedQueryRun = origPackedQueryRun;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method sets the recurrence data on recurrence related fields.
    /// </summary>
    /// <param name = "_recurrenceData">Recurrence data to set</param>
    /// <returns>The recurrence data of active recurrence Ctrl</returns>
    public SysRecurrenceData recurrence(SysRecurrenceData _recurrenceData = conNull())
    {
        SysRecurrenceData origRecurrenceData;
        
        switch (activeRecurrenceButton)
        {
            case ctrlScheduledRecurrence.name():
                if (_recurrenceData)
                {
                    origRecurrenceData = invoiceConfiguration.ScheduledDateTimeRecurrence;
                    invoiceConfiguration.ScheduledDateTimeRecurrence = _recurrenceData;
                    
                    if (origRecurrenceData != _recurrenceData)
                    {
                        batchInvoiceConfiguration_ds.object(fieldNum(FINBatchInvoiceConfiguration, ScheduledDateTimeRecurrence)).modified();
                    }
                }
                else
                {
                    _recurrenceData = invoiceConfiguration.ScheduledDateTimeRecurrence;
                }
                break;

            case ctrlCalculationRecurrence.name():
                if (_recurrenceData)
                {
                    origRecurrenceData = invoiceConfiguration.CalculationDateTimeRecurrence;
                    invoiceConfiguration.CalculationDateTimeRecurrence = _recurrenceData;
                    
                    if (origRecurrenceData != _recurrenceData)
                    {
                        batchInvoiceConfiguration_ds.object(fieldNum(FINBatchInvoiceConfiguration, CalculationDateTimeRecurrence)).modified();
                    }
                }
                else
                {
                    _recurrenceData = invoiceConfiguration.CalculationDateTimeRecurrence;
                }
                break;
        }

        return _recurrenceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the obejct
    /// </summary>
    /// <param name = "_formRun">Caller formRun instance</param>
    protected void new(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the object of the class
    /// </summary>
    /// <param name = "_formRun">Caller formRun instance</param>
    /// <returns>Returns the object of class <c>FINBatchInvoiceConfigurationForm</c> </returns>
    public static FINBatchInvoiceConfigurationForm newFromForm(FormRun _formRun)
    {
        return new FINBatchInvoiceConfigurationForm(_formRun);
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchFormView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Chnaged the form view to detailed
    /// </summary>
    /// <param name = "_formViewOption">FormView option</param>
    public void switchFormView(FormViewOption _formViewOption)
    {
        #task

        switch (_formViewOption)
        {
            case FormViewOption::Details:
                formRun.task(#taskSwitchToLineDetailsView);
                formRun.firstField(); // Set focus to any focusable control in the Lines view.
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method must be called from Caller form's init method
    /// </summary>
    public void formInitPost()
    {
        numberSeqFormHandler = NumberSeqFormHandler::newForm(RORParameters::FINNumRefInvoiceConfigurationId().NumberSequenceId,
                                                             formRun,
                                                             batchInvoiceConfiguration_ds,
                                                             fieldnum(FINBatchInvoiceConfiguration, ConfigurationId));


    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInvoiceConfiguration_DS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the FormDataSource object
    /// </summary>
    /// <returns>FormDatasource object</returns>
    public FormDataSource batchInvoiceConfiguration_DS()
    {
        return batchInvoiceConfiguration_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Must be called from caller form's main datasource
    /// </summary>
    /// <param name = "_invoiceConfiguration">FINBatchInvoiceConfiguration buffer</param>
    public void datasourceInitPost(FINBatchInvoiceConfiguration _invoiceConfiguration)
    {
        invoiceConfiguration = _invoiceConfiguration;
        batchInvoiceConfiguration_ds = FormDataUtil::getFormDataSource(_invoiceConfiguration);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>