<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoiceServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FINInvoiceServiceController implements System.IDisposable
{
    static FINWorkCalendar workCalendar;
    static Map markupCodeMap = new Map(Types::Container, Types::Container);
    // { [ ItemId, CustVendAccount, FINPostingModuleType, FINRentalAccountType ], [ MarkupCode, mustCharge ] }
    static Map numOfPeriodsForExchange = new Map(Types::Int64, Types::Container);
    // { originRecIdInExchangeChain, [totalNumOfOpenCalendarPeriodsPerDlv, totalNumOfCalendarPeriodsPerDlv, totalNumOfChargeablePeriodsPerDlv]}
    static Map numOfPeriodsForExchangePreviouslyInvoiced = new Map(Types::Int64, Types::Container);
    static FINMonthlyPeriodsCollection periodsCollection;
    ParmId parmId;
    FormletterParmUpdate parmUpdate;
    // used for calculation multiplier onCreation and for rental totals so no all validation rules apply.
    boolean calcEstimation;
    RecId creditJourRefRecId;
    boolean postInvoiceProposal;
    RecId proformaInvoiceJourRecId;
    container dataSourceRecordMapPacked;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        this.buildWorkCalendar();
        periodsCollection = new FINMonthlyPeriodsCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmUpdate</Name>
				<Source><![CDATA[
    protected void setParmUpdate(FormletterParmUpdate _parmUpdate)
    {
        parmUpdate = _parmUpdate;
        parmId = parmUpdate.ParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalcEstimation</Name>
				<Source><![CDATA[
    public void setCalcEstimation(boolean _calcEstimation)
    {
        calcEstimation = _calcEstimation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostInvoiceProposal</Name>
				<Source><![CDATA[
    public void setPostInvoiceProposal(boolean _postInvoiceProposal)
    {
        postInvoiceProposal = _postInvoiceProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProformaJourRefRecId</Name>
				<Source><![CDATA[
    public  void setProformaJourRefRecId(RecId _proformaInvoiceJourRecId)
    {
        proformaInvoiceJourRecId = _proformaInvoiceJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreditJourRefRecId</Name>
				<Source><![CDATA[
    public void setCreditJourRefRecId(RecId _creditJourRefRecId)
    {
        creditJourRefRecId = _creditJourRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkCalendar</Name>
				<Source><![CDATA[
    protected abstract void buildWorkCalendar()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        workCalendar = null;
        markupCodeMap = new Map(Types::Container, Types::Container);
        numOfPeriodsForExchange = null;
        numOfPeriodsForExchangePreviouslyInvoiced = null;
        periodsCollection = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkCalendar</Name>
				<Source><![CDATA[
    public static void setWorkCalendar(FINWorkCalendar _workCalendar)
    {
        workCalendar = _workCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkCalendar</Name>
				<Source><![CDATA[
    public static FINWorkCalendar getWorkCalendar()
    {
        return workCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumOfPeriodsForExchange</Name>
				<Source><![CDATA[
    public static void setNumOfPeriodsForExchange(Map _numOfPeriodsForExchange)
    {
        numOfPeriodsForExchange = _numOfPeriodsForExchange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfPeriodsForExchange</Name>
				<Source><![CDATA[
    public static Map getNumOfPeriodsForExchange()
    {
        if (!numOfPeriodsForExchange)
        {
            numOfPeriodsForExchange = new Map(Types::Int64, Types::Container);
        }

        return numOfPeriodsForExchange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodsCollection</Name>
				<Source><![CDATA[
    public static void setPeriodsCollection(FINMonthlyPeriodsCollection _periodsCollection)
    {
        periodsCollection = _periodsCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodsCollection</Name>
				<Source><![CDATA[
    public static FINMonthlyPeriodsCollection getPeriodsCollection()
    {
        if (!periodsCollection)
        {
            periodsCollection = new FINMonthlyPeriodsCollection();
        }

        return periodsCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviouslyInvoicedNumOfPeriodsForExchange</Name>
				<Source><![CDATA[
    public static void setPreviouslyInvoicedNumOfPeriodsForExchange(Map _numOfPeriodsForExchangePreviouslyInvoiced)
    {
        numOfPeriodsForExchangePreviouslyInvoiced = _numOfPeriodsForExchangePreviouslyInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviouslyInvoicedNumOfPeriodsForExchange</Name>
				<Source><![CDATA[
    public static Map getPreviouslyInvoicedNumOfPeriodsForExchange()
    {
        if (!numOfPeriodsForExchangePreviouslyInvoiced)
        {
            numOfPeriodsForExchangePreviouslyInvoiced = new Map(Types::Int64, Types::Container);
        }

        return numOfPeriodsForExchangePreviouslyInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeOrderLineRecId</Name>
				<Source><![CDATA[
    public static Set getExchangeOrderLineRecId(RORRentalLine _newestReplacementRentalLine)
    {
        Set ret = new Set(Types::Int64);
        RORRentalLine rentalLineLocal = _newestReplacementRentalLine.RORLineBuffer();
        RORRentalLine rentalLineReplacementChild = _newestReplacementRentalLine.RORLineBuffer();
        RecId recIdExchanged;
        RecId recId = _newestReplacementRentalLine.RecId;
         
        ret.add(_newestReplacementRentalLine.RecId);

        rentalLineLocal.data(_newestReplacementRentalLine);
 
        select rentalLineReplacementChild
        where rentalLineReplacementChild.RecIdExchanged == _newestReplacementRentalLine.RecId;
 
        if (_newestReplacementRentalLine.TableId != tableNum(SalesQuotationLine)
        && _newestReplacementRentalLine.TableId != tableNum(RORRentalEditorLine)
        && (_newestReplacementRentalLine.RecIdExchanged || rentalLineReplacementChild.RecId))
        {
            if (rentalLineReplacementChild.RecId)
            {
                recIdExchanged = rentalLineReplacementChild.RecId;
                if (recIdExchanged)
                {
                    recId = recIdExchanged;
                    ret.add(rentalLineReplacementChild.RecId);
                }
            }
            else
            {
                recIdExchanged = _newestReplacementRentalLine.RecId;
                ret.add(_newestReplacementRentalLine.RecId);
            }

            while (recIdExchanged)
            {
                select firstOnly rentalLineLocal
                where rentalLineLocal.RecIdExchanged == recIdExchanged;
 
                recIdExchanged = rentalLineLocal.RecId;

                if (rentalLineLocal)
                {
                    recId = rentalLineLocal.RecId;
                    ret.add(rentalLineLocal.RecId);
                }
            }
        }
 
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupCodeFromCache</Name>
				<Source><![CDATA[
    [SysObsolete("Method is not used anymore because didn't use Concept Code during searching result.", false)]
    public static container getMarkupCodeFromCache(ItemId               _itemId,
                                                   CustVendAc           _custVendAccount,
                                                   FINPostingModuleType _moduleType,
                                                   FINRentalAccountType _accountType)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupCodeToCache</Name>
				<Source><![CDATA[
    [SysObsolete("Method is not used anymore because didn't use Concept Code for storing searching result.", false)]
    public static void addMarkupCodeToCache(ItemId                  _itemId,
                                            CustVendAc              _custVendAccount,
                                            FINPostingModuleType    _moduleType,
                                            FINRentalAccountType    _accountType,
                                            MarkupTable             _markupTable,
                                            NoYes                   _mustCharge)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupFromCache</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2020. This method is obsolete')]
    public static container getMarkupFromCache(ItemId               _itemId,
                                               CustVendAc           _custVendAccount,
                                               FINRentalConceptCode _conceptCode,
                                               FINPostingModuleType _moduleType,
                                               FINRentalAccountType _accountType)
    {
        container keyCon = [ _itemId, _custVendAccount, _conceptCode, _moduleType, _accountType ];
        container ret = (markupCodeMap && markupCodeMap.exists(keyCon) ? markupCodeMap.lookup(keyCon) : conNull());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupToCache</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2020. This method is obsolete')]
    public static void addMarkupToCache(ItemId                  _itemId,
                                        CustVendAc              _custVendAccount,
                                        FINRentalConceptCode    _conceptCode,
                                        FINPostingModuleType    _moduleType,
                                        FINRentalAccountType    _accountType,
                                        MarkupTable             _markupTable,
                                        NoYes                   _mustCharge)
    {
        if(_itemId && _custVendAccount && _moduleType && _accountType && _markupTable.MarkupCode)
        {
            container keyCon = [ _itemId, _custVendAccount, _conceptCode, _moduleType, _accountType ];
            container valueCon = FINInvoiceServiceController::createMarkupCodeCacheValue(_markupTable, _mustCharge);
            markupCodeMap.insert(keyCon, valueCon);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupCodeCacheValue</Name>
				<Source><![CDATA[
    public static container createMarkupCodeCacheValue(MarkupTable _markupTable, NoYes _mustCharge)
    {
        return [ _markupTable.MarkupCode, _markupTable.Txt, _markupTable.TaxItemGroup, _mustCharge ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpPreviousCalcParm</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2021. This method is obsolete')]
    protected void cleanUpPreviousCalcParm(RecId _recIdUpperRange = 0)
    {
        if (_recIdUpperRange)
        {
            Counter retryCount;

            try
            {
                FINInvoiceCalculatorParm parmDelete;

                ttsbegin;

                delete_from parmDelete
                where parmDelete.ParmId == parmId
                &&    parmDelete.RecId <= _recIdUpperRange;

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                ttsabort;

                if (!retryCount)
                {
                    retryCount += 1;
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOrder</Name>
				<Source><![CDATA[
    public void processOrder()
    {
        this.performInvoiceCalculation();
        this.modifyParmLine();
        this.journalizeInvoiceRunData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceRecordMapPacked</Name>
				<Source><![CDATA[
    [HookableAttribute(false)]
    public container parmDataSourceRecordMapPacked(container _dataSourceRecordMapPacked = dataSourceRecordMapPacked)
    {
        dataSourceRecordMapPacked = _dataSourceRecordMapPacked;
        return dataSourceRecordMapPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.processOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceCalculatorParmRecords</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2021')]
    protected void insertInvoiceCalculatorParmRecords(FINTmpInvoiceCalculatorParm _tmpInvoiceCalculatorParm)
    {
        FINInvoiceCalculatorParm invoiceCalculatorParm;

        insert_recordset invoiceCalculatorParm (ChargedPeriods, ConsumptionCalcPacked, CostPriceCalcPacked, CreditCalcPacked, CreditJourRefRecId,
            InvoiceAmount, InvoiceCalcResultListPacked, IsEstimation, IsPeriodSpecificationCalculated, IsProforma, ManualCalcPacked, MarkupAmount,
            MustBeInvoiced, OrderLinePacked, OrderLineRecId, OrderLineTableId, ParmId, ParmLinePacked, ParmLineRecId, ParmLineTableId, ParmUpdatePacked,
            PeriodSpecificationPacked, PostInvoiceProposal, PriceComponentsAmendmentPacked, ProformaJourRefRecId, ProjHoursCalcPacked, RAGContractLinePacked,
            RAGContractTiersPacked, RentalCalcPacked, Timezone, TransportCalcPacked, WasAnyEngineExecuted)
        select ChargedPeriods, ConsumptionCalcPacked, CostPriceCalcPacked, CreditCalcPacked, CreditJourRefRecId, InvoiceAmount, InvoiceCalcResultListPacked,
            IsEstimation, IsPeriodSpecificationCalculated, IsProforma, ManualCalcPacked, MarkupAmount, MustBeInvoiced, OrderLinePacked, OrderLineRecId,
            OrderLineTableId, ParmId, ParmLinePacked, ParmLineRecId, ParmLineTableId, ParmUpdatePacked, PeriodSpecificationPacked, PostInvoiceProposal,
            PriceComponentsAmendmentPacked, ProformaJourRefRecId, ProjHoursCalcPacked, RAGContractLinePacked, RAGContractTiersPacked, RentalCalcPacked,
            Timezone, TransportCalcPacked, WasAnyEngineExecuted from _tmpInvoiceCalculatorParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performInvoiceCalculation</Name>
				<Source><![CDATA[
    abstract protected void performInvoiceCalculation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyParmLine</Name>
				<Source><![CDATA[
    abstract protected void modifyParmLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeInvoiceRunData</Name>
				<Source><![CDATA[
    abstract protected void journalizeInvoiceRunData()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>