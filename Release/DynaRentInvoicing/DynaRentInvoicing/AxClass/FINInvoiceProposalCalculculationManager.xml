<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoiceProposalCalculculationManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINInvoiceProposalCalculculationManager
{
    FINInvoiceCalculatorParm invoiceCalculatorParm;
    InventTransId inventTransId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructProposalPost</Name>
				<Source><![CDATA[
    public static FINInvoiceProposalCalculculationManager constructProposalPost(RORRentalLine _rentalLine, Common _parmLine, FINInvoiceCalculatorParm _calcParm)
    {
        FINInvoiceProposalCalculculationManager    invoiceCalculator = new FINInvoiceProposalCalculculationManager();

        invoiceCalculator.initInvoiceCalculatorParm(_rentalLine, _parmLine, _calcParm);
        
        return invoiceCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (invoiceCalculatorParm.PostInvoiceProposal)
        {
            this.copyCalculatedValuesToInvoiceCalculatorParm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCalculatedValuesToInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    private void copyCalculatedValuesToInvoiceCalculatorParm()
    {
        FINCustInvoiceJourProForma custInvoiceJourProforma;
        FINCustInvoiceTransProForma custInvoiceTransProforma;
        FINCustInvoiceTransProFormaInvoiceTrans custInvoiceTransProFormaInvoiceTrans;

        if (invoiceCalculatorParm.ProformaJourRefRecId)
        {
            select firstonly custInvoiceTransProFormaInvoiceTrans
                join RecId, TableId from custInvoiceTransProforma
                where custInvoiceTransProforma.RecId == custInvoiceTransProFormaInvoiceTrans.CustInvoiceTransRecId
                &&    custInvoiceTransProforma.InventTransId == inventTransId
                    join TableId from custInvoiceJourProforma
                    where custInvoiceJourProforma.InvoiceId == custInvoiceTransProforma.InvoiceId 
                    &&    custInvoiceJourProforma.InvoiceDate == custInvoiceTransProforma.InvoiceDate
                    &&    custInvoiceJourProforma.numberSequenceGroup == custInvoiceTransProforma.NumberSequenceGroup
                    &&    custInvoiceJourProforma.salesId == custInvoiceTransProforma.SalesId
                    &&    custInvoiceJourProforma.RecId == invoiceCalculatorParm.ProformaJourRefRecId;

            if (custInvoiceTransProFormaInvoiceTrans.RecId)
            {
                invoiceCalculatorParm.initFromFINCustInvoiceTransProformaInvoiceTrans(custInvoiceTransProFormaInvoiceTrans);
                invoiceCalculatorParm.addProformaCorrectionToManualCalc(custInvoiceTransProforma.TableId, custInvoiceTransProforma.RecId);
                // Set invoiceAmount and markupAmount
                FINMarkupTransGenerator::construct(invoiceCalculatorParm).getMarkupCodeForResult();

                //Because the line was created on the proposal, the line must be invoiced (the line can have child sale/purchse lines), even if amounts are 0
                invoiceCalculatorParm.MustBeInvoiced = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    public FINInvoiceCalculatorParm getInvoiceCalculatorParm()
    {
        return invoiceCalculatorParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceCalculatorParm</Name>
				<Source><![CDATA[
    protected void initInvoiceCalculatorParm(RORRentalLine _rentalLine, Common _parmLine, FINInvoiceCalculatorParm _calcParm)
    {
        inventTransId = _rentalLine.InventTransId;

        invoiceCalculatorParm.clear();
        invoiceCalculatorParm.data(_calcParm);
        // In case of rearange or reselect we want to keep some data that is already fetched from DB.
        // Data that needs recalculation will be cleared regardles if *Parm record existed before or not.
        // It also initialize empty packed list/Map/Set fields
        invoiceCalculatorParm.clearCalculatedData();

        if (!invoiceCalculatorParm)
        {
            if (!invoiceCalculatorParm.OrderLineRecId)
            {
                // Check rental agreement and price amendments only once per line/invoicing. It stays the same when you for instance change calculation dateTime.
                RAGContractDataParm contractDataParm;
                contractDataParm.initFromRentalLine(_rentalLine);
                
                RAGContractData contractData = new RAGContractData();
                contractData.parmDataParm(contractDataParm);
                contractData.populateData();
            
                invoiceCalculatorParm.RAGContractLinePacked = contractData.pack();
                
                invoiceCalculatorParm.PriceComponentsAmendmentPacked = FINTmpInvoicePeriodPrice::packTmpData(_rentalLine);
            }

            FieldId parmIdFieldId = fieldName2Id(_parmLine.TableId, 'ParmId');
            invoiceCalculatorParm.OrderLineTableId  = _rentalLine.TableId;
            invoiceCalculatorParm.OrderLineRecId    = _rentalLine.RecId;
            invoiceCalculatorParm.Timezone          = _rentalLine.RORRentalLine::FINTimeZoneOrder();
            invoiceCalculatorParm.OrderLinePacked   = buf2Con(_rentalLine);
            if (parmIdFieldId)
            {
                invoiceCalculatorParm.ParmId        = _parmLine.(parmIdFieldId);
            }
        }
        
        invoiceCalculatorParm.ParmLineTableId   = _parmLine.TableId;
        invoiceCalculatorParm.ParmLineRecId     = _parmLine.RecId;
        invoiceCalculatorParm.ParmLinePacked    = buf2Con(_parmLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>