<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINPeriodSpecification</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINPeriodSpecification implements SysPackable
{
    public FromDateTime fromDateTime;
    public ToDateTime   toDateTime;
    public NumberOf     numOfChargedPeriods;
    public NumberOf     numOfCalendarPeriods;
    public NumberOf     numOfOpenCalendarPeriods;
    public AmountCur    baseAmountCur;
    public AmountCur    invoiceAmountCur;
    public RORInsuranceCalcBasis insuranceCalcBasis;
    public AmountCur    insuranceAmount;
    public Percent      insurancePct;
    public DiscAmount   periodDisc;
    public UnitQty      lineQty;
    public INVRentalModeId  rentalModeId;
    public real rentalModeMultiplier;
    public Price rentalPrice;
    public SalesLinePercent linePercent;
    public RAGTierMultiplier tierMultiplier;
    public RefRecId     invPeriodQtyPhysicalRecId;
    public RefRecId     invPeriodQtyFinancialRecId;
    public boolean mustBeInvoiced;
    public Map priceComponentMap;
    public UnitOfMeasureSymbol  priceTimeUnit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container priceComponentMapContainer = priceComponentMap ? priceComponentMap.pack() : (new Map(Types::Integer, Types::Class)).pack();

        return [fromDateTime, toDateTime, numOfChargedPeriods, numOfCalendarPeriods, numOfOpenCalendarPeriods,
            baseAmountCur, invoiceAmountCur, periodDisc, lineQty, invPeriodQtyPhysicalRecId, invPeriodQtyFinancialRecId,
            rentalModeId, rentalPrice, linePercent, tierMultiplier, mustBeInvoiced, priceComponentMapContainer, priceTimeUnit, insuranceCalcBasis, insuranceAmount, insurancePct
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = true;

        container priceComponentMapContainer;

        [fromDateTime, toDateTime, numOfChargedPeriods, numOfCalendarPeriods, numOfOpenCalendarPeriods,
            baseAmountCur, invoiceAmountCur, periodDisc, lineQty, invPeriodQtyPhysicalRecId, invPeriodQtyFinancialRecId,
            rentalModeId, rentalPrice, linePercent, tierMultiplier, mustBeInvoiced, priceComponentMapContainer, priceTimeUnit, insuranceCalcBasis, insuranceAmount, insurancePct
        ] = _packedClass;

        priceComponentMap = priceComponentMapContainer ? Map::create(priceComponentMapContainer) : new Map(Types::Integer, Types::Class);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static FINPeriodSpecification create(container _periodSpecification)
    {
        FINPeriodSpecification periodSpecification = new FINPeriodSpecification();
        
        periodSpecification.unpack(_periodSpecification);
        return periodSpecification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINPeriodSpecification construct()
    {
        return new FINPeriodSpecification();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>