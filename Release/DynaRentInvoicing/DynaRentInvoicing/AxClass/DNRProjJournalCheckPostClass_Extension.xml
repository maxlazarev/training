<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjJournalCheckPostClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjJournalCheckPost))]
public final class DNRProjJournalCheckPostClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runEnd</Name>
				<Source><![CDATA[
    protected Integer runEnd(boolean _deleteErrors)
    {
        Integer             ret;
        JournalTransList    journalTransList;
        JournalTransMap     journalTransMap;
        ProjJournalTrans    projJournalTrans;
    
        ret = next runEnd(_deleteErrors);
    
        journalTransList = journalTableData.journalTransList();
        journalTransList.reset();
    
        if (journalTransList.first())
        {
            do
            {
                journalTransMap = journalTransList.item();
                projJournalTrans = journalTransMap;
                if (projJournalTrans)
                {
                    this.WPPUpdateInvoicePeriodStatus(projJournalTrans);
                }
    
            }
            while (journalTransList.next());
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPUpdateInvoicePeriodStatus</Name>
				<Source><![CDATA[
    // extension methods

    public boolean WPPUpdateInvoicePeriodStatus(ProjJournalTrans _projJournalTrans)
    {
        SalesLine           salesLine;
        TransDateTime       fromDateTime, toDateTime;
        boolean             periodsUpdated;
    
        if (journalCheckPostType == JournalCheckPostType::Post
        &&  _projJournalTrans.ProjId
        &&  _projJournalTrans.projJournalTable().JournalType == ProjJournalType::Hour
        &&  _projJournalTrans.INVRefTableId == tableNum(SalesLine))
        {
            salesLine = salesLine::findRecId(_projJournalTrans.INVRefRecId);

            if (this.WPPMustUpdateInvoicePeriodStatus(salesLine, _projJournalTrans))
            {
                fromDateTime = DateTimeUtil::newDateTime(_projJournalTrans.ProjTransDate, _projJournalTrans.FromTime, DateTimeUtil::getUserPreferredTimeZone());
                toDateTime = DateTimeUtil::newDateTime(_projJournalTrans.ProjTransDate, _projJournalTrans.ToTime, DateTimeUtil::getUserPreferredTimeZone());
    
                this.FINUpdatePeriods(_projJournalTrans, salesLine, fromDateTime, toDateTime);
                periodsUpdated = true;
            }
        }

        return periodsUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPMustUpdateInvoicePeriodStatus</Name>
				<Source><![CDATA[
    public boolean WPPMustUpdateInvoicePeriodStatus(SalesLine _salesLine, ProjJournalTrans _projJournalTrans)
    {
        return (RORParameters::find().RentalProjectInvoicing == NoYes::No
            &&  _salesLine
            &&  _salesLine.FINisCalculationEngineEnabled(FINRentalAccountType::ProjectHours)
            &&  ProjCategory::find(_projJournalTrans.CategoryId).WPPWorkType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUpdatePeriods</Name>
				<Source><![CDATA[
    public void FINUpdatePeriods(ProjJournalTrans _projJournalTrans, SalesLine _salesLine, TransDateTime _fromDateTime, TransDateTime _toDateTime)
    {
        FINInvoicePeriodQtyFinancial::markUnMarkDateTimeForCredit(FINInvoiceTransPeriodStatus::PendingCredit, _fromDateTime, _toDateTime, _salesLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>