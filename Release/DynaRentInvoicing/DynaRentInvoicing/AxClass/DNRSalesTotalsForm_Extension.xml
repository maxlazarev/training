<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesTotalsForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(SalesTotals))]
public final class DNRSalesTotalsForm_Extension
{
    private Set recIdSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRecIdSet</Name>
				<Source><![CDATA[
    // extension method 
    private Set parmRecIdSet(Set _recIdSet = recIdSet)
    {
        if (!prmIsDefault(_recIdSet))
        {
            recIdSet = _recIdSet;
        }

        return recIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTotals_Pre_init</Name>
				<Source><![CDATA[
    // event handler methods

    [PreHandlerFor(formStr(SalesTotals), formMethodStr(SalesTotals, init))]
    public static void SalesTotals_Pre_init(XppPrePostArgs _args)
    {
        // Obsolete
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTotals_Pre_setDisplayFields</Name>
				<Source><![CDATA[
    [PreHandlerFor(formStr(SalesTotals), formMethodStr(SalesTotals, setDisplayFields))]
    public static void SalesTotals_Pre_setDisplayFields(XppPrePostArgs _args)
    {
        Set recIdSet = new Set(Types::Int64);

        FormRun element = _args.getThis();

        // for SalesParmTable method setDisplayFields is called only once.
        if (element.args().record().TableId == tableNum(SalesParmTable))
        {
            SalesParmTable  salesParmTable = element.args().record();

            if (!FINMarkupWorkTrans::existParmId(salesParmTable.ParmId))
            {
                FINMarkupTransGenerator::createMarkupWorkTrans(salesParmTable.ParmId);
            } 
            
            FINInvoiceCalculatorParm invoiceCalculatorParm;
            salesParmLine salesParmLine;

            select firstOnly RecId from  salesParmLine
            where salesParmLine.ParmId == salesParmTable.ParmId
                join ProformaJourRefRecId from invoiceCalculatorParm
                where  invoiceCalculatorParm.ParmId       == salesParmLine.ParmId
                && invoiceCalculatorParm.ParmLineRecId    == salesParmLine.RecId
                && invoiceCalculatorParm.ParmLineTableId  == salesParmLine.TableId
                && invoiceCalculatorParm.ProformaJourRefRecId;

            if (invoiceCalculatorParm.ProformaJourRefRecId)
            {
                recIdSet = FINCustInvoiceJourProForma::restoreMarkupForSalesOrder( invoiceCalculatorParm.ProformaJourRefRecId, salesParmTable.salesTable());
            }
           
            recIdSet = Set::union(recIdSet, FINMarkupTransGenerator::createMarkupTransForParmId(salesParmTable.ParmId));
            element.parmRecIdSet(recIdSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTotals_Post_setDisplayFields</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(SalesTotals), formMethodStr(SalesTotals, setDisplayFields))]
    public static void SalesTotals_Post_setDisplayFields(XppPrePostArgs _args)
    {
        FormRun element = _args.getThis();

        Set recIdSet = element.parmRecIdSet();
        FINMarkupTransGenerator::deleteMarkupTransForSet(recIdSet);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>