<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoiceParmCleanerService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINInvoiceParmCleanerService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearInvoiceParmData</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2021. This method is obsolete')]
    public void clearInvoiceParmData(FINInvoiceParmCleanerContract _contract)
    {
        FromDateTime    fromDateTime = _contract.parmFromDateTime();
        ToDateTime      toDateTime = _contract.parmToDateTime();
                
        ttsBegin;
        FINInvoiceCalculatorParm    invoiceCalcParm;

        delete_from invoiceCalcParm
        where invoiceCalcParm.CreatedDateTime >= fromDateTime
            && invoiceCalcParm.CreatedDateTime <= toDateTime;

        FINCustInvoiceRun   custInvoiceRun;
        CustInvoiceJour     custInvoiceJour;

        delete_from custInvoiceRun
            notexists join custInvoiceJour
            where custInvoiceJour.ParmId == custInvoiceRun.ParmId;

        FINVendInvoiceRun   vendInvoiceRun;
        VendInvoiceJour     vendInvoiceJour;

        delete_from vendInvoiceRun
            notexists join vendInvoiceJour
            where vendInvoiceJour.ParmId == vendInvoiceRun.ParmId;

        ttsCommit;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupInvoiceParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method cleans up the data in FINInvoiceCalculatorParm which is older than 15 days and orphan data in FINVendInvoiceRun
    /// and FINVendInvoiceRun tables
    /// </summary>
    internal void cleanupInvoiceParmData()
    {
        Counter numOfDeletedRecords;
        TransDateTime cleanupDateTime;
        FINInvoiceCalculatorParm invoiceCalcParm;
        FINInvoiceCalculatorParm invoiceCalcParmDel;

        //Cleanup the table data for record prior to 15 days
        cleanupDateTime = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -15);
                
        ttsBegin;

        while select RecId, OrderLineTableId, ParmId  from invoiceCalcParm
        where invoiceCalcParm.CreatedDateTime < cleanupDateTime
        {
            if (invoiceCalcParm.OrderLineTableId == tableNum(ProjProposalItem))
            {
                ProjProposalJour projProposalJour = ProjProposalJour::find(invoiceCalcParm.ParmId);
                
                if (projProposalJour.LineProperty != ProjLinePropertyCode::Invoiced
                &&  projProposalJour.LineProperty != ProjLinePropertyCode::Canceled)
                {
                    continue;
                }
            }
            
            // Delete the records one by one to avoid blokcing issue
            delete_from invoiceCalcParmDel where invoiceCalcParmDel.RecId == invoiceCalcParm.RecId;
            numOfDeletedRecords++;
        }

        FINCustInvoiceRun   custInvoiceRun;
        CustInvoiceJour     custInvoiceJour;

        delete_from custInvoiceRun
            notexists join custInvoiceJour
            where custInvoiceJour.ParmId == custInvoiceRun.ParmId;

        numOfDeletedRecords = numOfDeletedRecords + custInvoiceRun.RowCount();

        FINVendInvoiceRun   vendInvoiceRun;
        VendInvoiceJour     vendInvoiceJour;

        delete_from vendInvoiceRun
            notexists join vendInvoiceJour
            where vendInvoiceJour.ParmId == vendInvoiceRun.ParmId;
        
        numOfDeletedRecords = numOfDeletedRecords + vendInvoiceRun.RowCount();

        ttsCommit;

        Message::Add(MessageSeverity::Informational, strFmt('@DNR:X1recordsDeletedInTotal', numOfDeletedRecords));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>