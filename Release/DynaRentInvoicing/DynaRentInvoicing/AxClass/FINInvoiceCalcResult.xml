<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoiceCalcResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINInvoiceCalcResult implements SysPackable
{
    public FINRentalAccountType accountType;
    public AmountCur amountCur;
    public MarkupTable markupTable;
    public MarkupCode markupCode;
    public TransTxt markupTxt;
    public TaxItemGroup markupTaxItemGroup;
    public MarkupTransRefRecId markupTransRecId;
    public NoYes mustCharge;
    public NoYes isReversal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINInvoiceCalcResult construct(FINRentalAccountType _accountType, AmountCur _amountCur)
    {
        FINInvoiceCalcResult    calcResult = new FINInvoiceCalcResult();

        calcResult.initParameters(_accountType, _amountCur);

        return calcResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(FINRentalAccountType _accountType, AmountCur _amountCur)
    {
        accountType = _accountType;
        amountCur = _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [accountType, amountCur, markupCode, mustCharge, isReversal, markupTxt, markupTaxItemGroup, markupTransRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = true;

        [accountType, amountCur, markupCode, mustCharge, isReversal, markupTxt, markupTaxItemGroup, markupTransRecId] = _packedClass;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static FINInvoiceCalcResult create(container _invoiceCalcResultContainer)
    {
        FINInvoiceCalcResult calcResult = new FINInvoiceCalcResult();
        
        calcResult.unpack(_invoiceCalcResultContainer);
        return calcResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCacheContainer</Name>
				<Source><![CDATA[
    public void initFromCacheContainer(container _cacheContainer)
    {
        this.markupCode = conPeek(_cacheContainer, 1);
        this.markupTxt = conPeek(_cacheContainer, 2);
        this.markupTaxItemGroup = this.isReversal ? MarkupTrans::findRecId(this.markupTransRecId).TaxItemGroup : conPeek(_cacheContainer, 3);
        this.mustCharge = conPeek(_cacheContainer, 4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValuesPerMarkup</Name>
				<Source><![CDATA[
    public static Map getChargedValuesPerMarkup(container _resultList, boolean _onlyCharged)
    {
        // { MarkupCode, Set : [ FINRentalAccountType, Amount, Description] }
        Map ret = new Map(Types::String, Types::Class);
        
        if (_resultList)
        {
            List resultList = List::create(_resultList);
            ListEnumerator enumerator = resultList.getEnumerator();

            while (enumerator.moveNext())
            {
                FINInvoiceCalcResult calcResult = enumerator.current();

                FINRentalAccountType accountType = calcResult.accountType;
                MarkupCode markupCode = calcResult.markupCode;
                AmountCur amount = calcResult.amountCur;
                Description description = calcResult.markupTxt;
                
                if (!_onlyCharged || calcResult.mustCharge)
                {
                    Set amountSet = new Set(Types::Container);

                    if (ret.exists(markupCode))
                    {
                        amountSet = ret.lookup(markupCode);
                    }
                    amountSet.add([accountType, amount, description]);
                    ret.insert(markupCode, amountSet);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>