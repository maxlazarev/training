<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINSalesInvoiceJournalPostProjClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesInvoiceJournalPostProj))]
public final class FINSalesInvoiceJournalPostProjClass_Extension
{
    private boolean mustCheckMustUpdateInventory = false;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustUpdateInventory</Name>
				<Source><![CDATA[
    protected boolean mustUpdateInventory(InventMovement _inventMovement)
    {
        boolean ret = next mustUpdateInventory(_inventMovement);
        SalesLine salesLine  = this.RORSalesLine();
    
        if (mustCheckMustUpdateInventory && salesLine && salesLine.RORTradeType != RORTradeType::SalesPurch)
        {
            ret = false;
            this.FINUpdateLineValuesForRental();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    protected void postLine()
    {
        ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projProposalJour.ProjInvoiceId, projProposalJour.InvoiceDate);
            
        if (isConfigurationkeyEnabled(configurationKeyNum(INVInvoicePeriod))
        &&  projInvoiceJour 
        &&  projInvoiceJour.ProposalId)
        {
            ProjInvoiceItem projInvoiceItem;
            SalesLine salesLine;
            FINInvoiceCalculatorParm invoiceCalculatorParm;
            FINProjInvoiceItem finProjInvoiceItem;

            while select RecId, TableId from projInvoiceItem
            where projInvoiceItem.InvoiceDate == projInvoiceJour.InvoiceDate
            &&    projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                join salesLine
                where salesLine.InventTransId == projInvoiceItem.InventTransId
                    join invoiceCalculatorParm
                    where invoiceCalculatorParm.ParmId == projInvoiceJour.ProposalId
                    &&    invoiceCalculatorParm.OrderLineRecId == salesLine.RecId
                    &&    invoiceCalculatorParm.OrderLineTableId == salesLine.TableId
                        notexists join finProjInvoiceItem
                        where finProjInvoiceItem.ProjInvoiceItemRecId == projInvoiceItem.RecId
            {
                invoiceCalculatorParm.journalizeProjInvoiceItem(projInvoiceItem.RecId);

                FINInvoicePeriodManager_Invoice invoicePeriodManager = FINInvoicePeriodManager::construct(FINInvoicePeriodAction::Invoice, salesLine);
                invoicePeriodManager.setInvoiceCalculatorParm(invoiceCalculatorParm);
                invoicePeriodManager.setInvoiceId(projInvoiceJour.ProjInvoiceId);
                invoicePeriodManager.setInvoiceTransReference(projInvoiceItem.TableId, projInvoiceItem.RecId);
                invoicePeriodManager.run();

                FINOrderLineComponentInvoiceLog::setOrderLineComponentInvoiced(salesLine, projInvoiceJour.ProjInvoiceId, invoiceCalculatorParm);
            }
        }

        next postLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    protected void updateInventory(InventMovement _inventMovement)
    {
        // Set 'mustUpdateInventory' based on RORTradeType only when called from updateInventory method otherwise posting throws error because some logic not linked directly to inventory update is missing.
        mustCheckMustUpdateInventory = true;

        next updateInventory(_inventMovement);

        mustCheckMustUpdateInventory = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUpdateLineValuesForRental</Name>
				<Source><![CDATA[
    // Extension methods

    protected void FINUpdateLineValuesForRental()
    {
        // Rental lines don't have any value on a line itself. Everything is charged via misch. charges.
        // Fetching lineAmount from rentalLine.LineAmount is blocked in other place.
        // However if we post together sales and rental lines and previous line in a query was sales then line value still stored previous value even when processing rental line.
        lineValue = 0;
        lineValueInclTax = 0;
        discValue = 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>