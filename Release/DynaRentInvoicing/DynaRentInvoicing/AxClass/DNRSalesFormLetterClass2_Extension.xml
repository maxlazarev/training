<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesFormLetterClass2_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormLetter))]
public final class DNRSalesFormLetterClass2_Extension
{
    private static boolean isCalledFromMain;
    private static Args argsFromMain;

    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FINSetInvoicingOption</Name>
				<Source><![CDATA[
    public void  FINSetInvoicingOption(FINInvoicingOptions _invoicingOption)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.INVIncludeUninvoiced = _invoicingOption.includeUninvoiced;
        salesParmUpdate.INVIncludeCredits = _invoicingOption.includeCredited;
        salesParmUpdate.INVCalculationDateTime = _invoicingOption.calculationDateTime;
        salesParmUpdate.FINForceInvoiceUntilPoint = _invoicingOption.forceUntilCalculationPoint;
        salesParmUpdate.FINIsCreditPreview = _invoicingOption.isCreditPreview;
        salesParmUpdate.FINSkipSetCalculationDateTime = _invoicingOption.skipSetCalculationDateTime;
        this.salesParmUpdate(salesParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINParmCalcEstimation</Name>
				<Source><![CDATA[
    public boolean FINParmCalcEstimation(boolean _calcEstimation = this.getSalesFormLetterContract().FINParmIsEstimation())
    {
        if (prmIsDefault(_calcEstimation))
        {
            return this.getSalesFormLetterContract().FINParmIsEstimation();
        }
        else
        {
            return this.getSalesFormLetterContract().FINParmIsEstimation(_calcEstimation);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods

    static void main(Args _args)
    {
        isCalledFromMain = true;
        argsFromMain = _args;
        next main(_args);
        argsFromMain = null;
        isCalledFromMain = false;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesFormLetter construct(DocumentStatus _documentStatus, IdentifierName _className, IdentifierName _methodName, SysOperationExecutionMode _executionMode)
    {        
        SalesFormLetter ret = next construct(_documentStatus, _className, _methodName, _executionMode);
        RecId creditJourRefRecId;
        RecId proformaJourRefRecId;
        boolean postInvoiceProposal;

        if (isCalledFromMain && argsFromMain.parmObject())
        {
            if (argsFromMain.parmObject() is FINCreditInvoiceJournalReference)
            {
                FINCreditInvoiceJournalReference creditInvoiceJournalReference = argsFromMain.parmObject();
                creditJourRefRecId = creditInvoiceJournalReference.getJourRefRecId();
            }
            else if (argsFromMain.parmObject() is FINProformaInvoiceJournalReference)
            {
                FINProformaInvoiceJournalReference proformaInvoiceJournalReference = argsFromMain.parmObject();
                proformaJourRefRecId = proformaInvoiceJournalReference.getJourRefRecId();
                postInvoiceProposal = true;
                ret.FINParmProformaInvoiceJourRecId(proformaJourRefRecId);
                ret.FINParmPostInvoiceProposal(postInvoiceProposal);
            }
            else if (argsFromMain.parmObject() is FINRentalCreditWizardInvoiceReference)
            {
                FINRentalCreditWizardInvoiceReference creditWizardInvoiceReference = argsFromMain.parmObject();
                creditJourRefRecId = creditWizardInvoiceReference.parmJourRefRecId();
                //FINTmpInvoicePeriodAmendment tmpAmendmentData = creditWizardInvoiceReference.parmTmpData();
                FINRentalCreditWizard rentalCreditWizard = creditWizardInvoiceReference.parmRentalCreditWizard();
                ret.FINParmRentalCreditWizard(rentalCreditWizard);
            }
        }

        if (isCalledFromMain && creditJourRefRecId)
        {
            ret.FINParmInvoiceJourRecId(creditJourRefRecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCallerForm</Name>
				<Source><![CDATA[
    protected boolean initializeFromCallerForm(SalesFormLetterCachedArguments _cachedArgs)
    {
        boolean ret = next initializeFromCallerForm(_cachedArgs);

        switch (_cachedArgs.callerFormName)
        {
            case formStr(FINRentalCreditCreate):
                this.specQty(SalesUpdate::PackingSlip);
                SalesFormLetterContract formLetterContract = this.getSalesFormLetterContract();
                SalesTable salesTable = this.getSalesFormLetterContract().parmSalesTable();

                if (formLetterContract)
                {
                    salesTable = formLetterContract.parmSalesTable() as SalesTable;
                }
                
                if (formLetterContract && salesTable)
                {
                    FINCreditLine creditParmLine;
                    CustInvoiceJour custInvoiceJourLocal;
                    
                    RecId jourRefRecId = formLetterContract.FINParmInvoiceJourRecId();
                    TableId jourReftableId = tableNum(CustInvoiceJour);

                    select firstOnly creditParmLine   
                    where creditParmLine.JourRefTableId == jourReftableId
                        exists join custInvoiceJourLocal
                        where custInvoiceJourLocal.TableId == creditParmLine.JourRefTableId
                        &&    custInvoiceJourLocal.RecId == creditParmLine.JourRefRecId
                        &&    custInvoiceJourLocal.RecId == jourRefRecId
                        &&    custInvoiceJourLocal.SalesId == salesTable.SalesId;

                    if (creditParmLine)
                    {
                        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
                        salesParmUpdate.INVIncludeUninvoiced = NoYes::Yes;
                        salesParmUpdate.INVIncludeCredits = NoYes::Yes;
                        this.salesParmUpdate(salesParmUpdate);

                    }
                }
                else if (formLetterContract)
                {
                    CustInvoiceJour custInvoiceJour = formLetterContract.parmCallerTable() as CustInvoiceJour;

                    if (custInvoiceJour)
                    {
                        formLetterContract.parmSalesTable(custInvoiceJour.salesTable());
                    }
                }

                this.proforma(_cachedArgs.isProforma);
                this.enableUpdateNowField(!_cachedArgs.isProforma);

                ret = true;
                break;

            case formStr(FINRentalCreditWizard):
                this.specQty(SalesUpdate::PackingSlip);
                
                SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
                salesParmUpdate.INVIncludeUninvoiced = NoYes::Yes;
                salesParmUpdate.INVIncludeCredits = NoYes::Yes;
                salesParmUpdate.INVCalculationDateTime = this.FINParmRentalCreditWizard().formRun().getInvoiceCalculationDateTime();
                this.salesParmUpdate(salesParmUpdate);

                this.proforma(_cachedArgs.isProforma);
                this.enableUpdateNowField(!_cachedArgs.isProforma);

                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCallerRecord</Name>
				<Source><![CDATA[
    protected void initializeFromCallerRecord(
        SalesFormLetterCachedArguments  _cachedArgs,
        Common                          _record,
        container                       _dataSourceRecordsPacked)
    {
        next initializeFromCallerRecord(_cachedArgs, _record, _dataSourceRecordsPacked);

        switch (_record.TableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _record as CustInvoiceJour;
                SalesTable salesTable = custInvoiceJour.salesTable() as SalesTable;
                this.initParmSalesTable(salesTable);
                break;            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperationBody</Name>
				<Source><![CDATA[
    protected void afterOperationBody()
    {
        next afterOperationBody();

        if (!BatchHeader::isExecutingInBatch())
        {
            Set journalSet = Set::create(formletterOutputContract.parmAllJournalsPacked());
            SetEnumerator enumerator = journalSet.getEnumerator();

            ttsbegin;
            while (enumerator.moveNext())
            {
                Common journal = enumerator.current();

                if (journal.TableId == tableNum(CustInvoiceJour))
                {
                    CustInvoiceJour custInvoiceJour = journal;

                    if (custInvoiceJour.RecId && custInvoiceJour.FINIsRentalProposal)
                    {
                        CustInvoiceJour custInvoiceJourDel = CustInvoiceJour::findRecId(custInvoiceJour.RecId, true);

                        custInvoiceJourDel.delete();
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>