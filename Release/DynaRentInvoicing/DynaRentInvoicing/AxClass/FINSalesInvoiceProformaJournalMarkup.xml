<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINSalesInvoiceProformaJournalMarkup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINSalesInvoiceProformaJournalMarkup extends FINSalesInvoiceProformaJournalCreate
{
    SalesInvoiceJournalPost salesInvoiceJournalPost;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.transferMarkupToProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferMarkupToProforma</Name>
				<Source><![CDATA[
    private void transferMarkupToProforma()
    {
        CustInvoiceJour  custInvoiceJour = salesInvoiceJournalPost.parmJournalTable();
        CustInvoiceTrans custInvoiceTrans;
        SalesLine        salesLine;
        SalesParmLine    salesParmLine;
        Set              markupRecIdSet  = new Set(Types::Int64);
        SalesParmUpdate  salesParmUpdate = salesParmTable.salesParmUpdate();
        
        while select custInvoiceTrans
        where custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
        && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
        && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.NumberSequenceGroup
        && custInvoiceTrans.salesId == custInvoiceJour.SalesId
            join salesLine
            where salesLine.InventTransId == custInvoiceTrans.InventTransId
                join RecId, TableId from salesParmLine
                where salesParmLine.SalesLineRecId == salesLine.RecId
                &&    salesParmLine.ParmId == salesParmTable.ParmId
                &&    salesParmLine.TableRefId == salesParmTable.TableRefId
        {
            markupRecIdSet = Set::union(markupRecIdSet, FINMarkupTransGenerator::createMarkupTransForParmIdParmLine(salesParmTable.ParmId, salesParmTable.TableId, salesParmTable.RecId));
            this.copyMarkupTransForCustInvoiceJour(salesLine.salesTable(), custInvoiceJour, markupRecIdSet);

            FINMarkupTransGenerator::createMarkupWorkTrans(salesParmTable.ParmId, salesParmLine.TableId, salesParmLine.RecId);
            markupRecIdSet = Set::union(markupRecIdSet, FINMarkupTransGenerator::createMarkupTransForParmIdParmLine(salesParmTable.ParmId, salesParmLine.TableId, salesParmLine.RecId));
            this.copyMarkupTransForCustInvoiceTrans(salesLine, custInvoiceTrans);
        }

        if (markupRecIdSet)
        {
            SalesTotals salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, AccountOrder::None, salesParmTable.ParmId, '', salesParmTable.Ordering);
            salesTotals.calc();
            salesInvoiceJournalPost.parmTotals(salesTotals);
            FINMarkupTransGenerator::deleteMarkupTransForSet(markupRecIdSet);
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesInvoiceJournalPost</Name>
				<Source><![CDATA[
    public SalesInvoiceJournalPost parmSalesInvoiceJournalPost(SalesInvoiceJournalPost _salesInvoiceJournalPost = salesInvoiceJournalPost)
    {
        if (!prmIsDefault(_salesInvoiceJournalPost))
        {
            salesInvoiceJournalPost = _salesInvoiceJournalPost;
        }

        return salesInvoiceJournalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormLetterService</Name>
				<Source><![CDATA[
    public static FINSalesInvoiceProformaJournalMarkup newFormLetterService(FormletterService _formLetterService, SalesParmTable _salesParmTable, SalesInvoiceJournalPost _salesInvoiceJournalPost)
    {
        FINSalesInvoiceProformaJournalMarkup ret = new FINSalesInvoiceProformaJournalMarkup();

        ret.parmFormLetterService(_formLetterService);
        ret.parmSalesParmTable(_salesParmTable);
        ret.parmSalesInvoiceJournalPost(_salesInvoiceJournalPost);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>