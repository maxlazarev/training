<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoiceCheckChangeStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class to change the Invoice check status of the selected records
/// </summary>
class FINInvoiceCheckChangeStatus 
{
    List list = new List(Types::Int64);
    public FINInvoiceCheckStatus status;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object from caller form datasource 
    /// </summary>
    /// <param name = "_fds"></param>
    /// <returns>
    ///  Returns the object of class <c>FINInvoiceCheckChangeStatus</c>
    /// </returns>
    public static FINInvoiceCheckChangeStatus initFromForm(FormDataSource _fds)
    {
        FINInvoiceCheckChangeStatus changeStatus = new FINInvoiceCheckChangeStatus();
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(_fds);

        FinBatchInvoiceCheckLog  invoiceCheckLog = helper.getFirst();
        while (invoiceCheckLog)
        {
            changeStatus.insertQueue(invoiceCheckLog.RecId);
            invoiceCheckLog = helper.getNext();
        }

        return changeStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertQueue</Name>
				<Source><![CDATA[
    void insertQueue(RefRecId _invoiceCheckLogRecId)
    {
        list.addEnd(_invoiceCheckLogRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calls the logic to update status of selected records.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        ListIterator    listI = new ListIterator(list);

        try
        {
            listI.begin();

            while (listI.more())
            {
                ttsbegin;

                this.updateStatus(listI.value());

                ttscommit;

                listI.next();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method executes the logic to update the invoice check status of the logged records.
    /// </summary>
    /// <param name = "_invoiceCheckLogRecId">
    /// RecId of the logged record to be updated
    /// </param>
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    protected void updateStatus(RefRecId _invoiceCheckLogRecId)
    {
        FINBatchInvoiceCheckLog invoiceCheckLog;

        update_recordset invoiceCheckLog
        setting Status = status
        where invoiceCheckLog.RecId == _invoiceCheckLogRecId
        &&    invoiceCheckLog.Status != status;
            
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>