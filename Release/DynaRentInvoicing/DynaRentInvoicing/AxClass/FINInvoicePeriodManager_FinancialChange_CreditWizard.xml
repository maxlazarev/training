<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoicePeriodManager_FinancialChange_CreditWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FINInvoicePeriodManagerAttribute(FINInvoicePeriodAction::FinancialChangeCreditWizard)]
class FINInvoicePeriodManager_FinancialChange_CreditWizard extends FINInvoicePeriodManager_FinancialChange
{
    RefRecId invoicePeriodAmendmentRecId, rateCodeInvoicePeriodAmendmentRecId;
    FINTmpInvoicePeriodAmendment tmpAmendment;
    boolean isProforma;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processSingleChange</Name>
				<Source><![CDATA[
    protected void processSingleChange(TransDateTime _fromDateTime, TransDateTime _toDateTime, FINInvoicePeriodPriceComponent _priceComponent, anytype _value)
    {
        ttsbegin;

        this.createPeriod(_fromDateTime, _toDateTime, _priceComponent, _value);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoicePeriodAmendment</Name>
				<Source><![CDATA[
    protected FINInvoicePeriodAmendment initInvoicePeriodAmendment(TransDateTime _fromDateTime, TransDateTime _toDateTime, FINInvoicePeriodPriceComponent _priceComponent, anytype _value)
    {
        FINInvoicePeriodAmendment invoicePeriodAmendment = super(_fromDateTime, _toDateTime, _priceComponent, _value);

        invoicePeriodAmendment.DocumentState = FINAmendmentDocumentState::Draft;
        invoicePeriodAmendment.MustReinvoiceFullCredit = tmpAmendment.MustReinvoice;

        return invoicePeriodAmendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAmendmentLogOnCreatePeriod</Name>
				<Source><![CDATA[
    protected void createAmendmentLogOnCreatePeriod(FINInvoicePeriodAmendment _invoicePeriodAmendment)
    {
        if (!isProforma)
        {
            // For insurance amount change, we log the change in amount but the caclulations should still be percentage based
            if (tmpAmendment.AmendmentType == FINAmendmentType::Insurance && tmpAmendment.AmendmentSubType == FINAmendmentSubType::Amount)
            {
                _invoicePeriodAmendment.OldRealValue = tmpAmendment.OldRealValue;
                _invoicePeriodAmendment.RealValue = tmpAmendment.NewRealValue;
            }

            _invoicePeriodAmendment.createAmendmentLogFromCreditWizard(AccessType::Add, tmpAmendment.ReasonCode, tmpAmendment.ReasonText, tmpAmendment.ContactPersonId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoicePeriodAmendment</Name>
				<Source><![CDATA[
    protected FINInvoicePeriodAmendment createInvoicePeriodAmendment(TransDateTime _fromDateTime, TransDateTime _toDateTime, FINInvoicePeriodPriceComponent _priceComponent, anytype _value)
    {
        FINInvoicePeriodAmendment invoicePeriodAmendment = super(_fromDateTime, _toDateTime, _priceComponent, _value);

        if (_priceComponent == FINInvoicePeriodPriceComponent::RateCode)
        {
            rateCodeInvoicePeriodAmendmentRecId = invoicePeriodAmendment.RecId;
        }
        else
        {
            invoicePeriodAmendmentRecId = invoicePeriodAmendment.RecId;
        }

        return invoicePeriodAmendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicePeriodAmendmentRecIds</Name>
				<Source><![CDATA[
    public container getInvoicePeriodAmendmentRecIds()
    {
        return [invoicePeriodAmendmentRecId, rateCodeInvoicePeriodAmendmentRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpAmendment</Name>
				<Source><![CDATA[
    public void setTmpAmendment(FINTmpInvoicePeriodAmendment _tmpAmendment)
    {
        tmpAmendment = _tmpAmendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsProforma</Name>
				<Source><![CDATA[
    public void setIsProforma(boolean _isProforma)
    {
        isProforma = _isProforma;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>