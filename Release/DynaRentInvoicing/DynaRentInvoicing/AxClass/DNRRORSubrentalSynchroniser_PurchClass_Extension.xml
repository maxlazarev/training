<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRORSubrentalSynchroniser_PurchClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(RORSubrentalSynchroniser_Purch))]
public final class DNRRORSubrentalSynchroniser_PurchClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasSubrentalReferenceEnd</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    protected container hasSubrentalReferenceEnd(InventTransId _lineId, INVPeriodEndDateTime _periodEndDateTime)
    {
        boolean hasReference;
        boolean isOnlyInfo;
        
        [hasReference, isOnlyInfo] = next hasSubrentalReferenceEnd(_lineId, _periodEndDateTime);
        
        [hasReference, isOnlyInfo] = this.FINCheckHasSubrentalReferenceEnd(_lineId, _periodEndDateTime);

        return [hasReference, isOnlyInfo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSubrentalReferenceStart</Name>
				<Source><![CDATA[
    protected container hasSubrentalReferenceStart(InventTransId _lineId, INVPeriodStartDateTime _periodStartDateTime)
    {
        boolean hasReference;
        boolean isOnlyInfo;
        
        [hasReference, isOnlyInfo] = next hasSubrentalReferenceStart(_lineId, _periodStartDateTime);
        
        [hasReference, isOnlyInfo] = this.FINCheckHasSubrentalReferenceStart(_lineId, _periodStartDateTime);

        return [hasReference, isOnlyInfo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCheckHasSubrentalReferenceEnd</Name>
				<Source><![CDATA[
    // extension methods
    private container FINCheckHasSubrentalReferenceEnd(InventTransId _lineId, INVPeriodEndDateTime _periodEndDateTime)
    {
        boolean hasReference;
        boolean isOnlyInfo;

        RORSubrentalReference   subrentalReference;
        FINInvoicePeriodQtyPhysical invoicePeriodQtyPhysical;
        FINInvoicePeriodQtyFinancial invoicePeriodQtyFinancial;
                        
        select firstOnly subrentalReference
        where subrentalReference.PurchInventTransId == _lineId
            // Ensure that requested end date isn't before the start date of the period in referenced order line
            exists join invoicePeriodQtyFinancial
            where invoicePeriodQtyFinancial.PeriodStartDateTime > _periodEndDateTime
                join TableId from invoicePeriodQtyPhysical
                where invoicePeriodQtyPhysical.RefTableId == subrentalReference.TableId
                &&    invoicePeriodQtyPhysical.RefRecId == subrentalReference.RecId
                &&    invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId;

        if (subrentalReference)
        {
            warning(strFmt("@DNR2695",
                           "@DNR4151",
                           subrentalReference.PurchId,
                           subrentalReference.PurchInventTransId,
                           "@DNR975",
                           subrentalReference.SalesId,
                           subrentalReference.SalesInventTransId));
            hasReference = true;
            isOnlyInfo = false;
        }        

        return [hasReference, isOnlyInfo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCheckHasSubrentalReferenceStart</Name>
				<Source><![CDATA[
    private container FINCheckHasSubrentalReferenceStart(InventTransId _lineId, INVPeriodStartDateTime _periodStartDateTime)
    {
        boolean hasReference;
        boolean isOnlyInfo = true;

        RORSubrentalReference   subrentalReference;
        RORSubrentalReference   subrentalReferenceOther;
        FINInvoicePeriodQtyPhysical invoicePeriodQtyPhysical;
        FINInvoicePeriodQtyFinancial invoicePeriodQtyFinancial;
                        
        select firstOnly subrentalReference
        where subrentalReference.PurchInventTransId == _lineId
            // Ensure that requested end date isn't before the start date of the period in referenced order line
            exists join invoicePeriodQtyFinancial
            where invoicePeriodQtyFinancial.PeriodEndDateTime < _periodStartDateTime
                join TableId from invoicePeriodQtyPhysical
                where invoicePeriodQtyPhysical.RefTableId == subrentalReference.TableId
                &&    invoicePeriodQtyPhysical.RefRecId == subrentalReference.RecId
                &&    invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId;

        if (subrentalReference)
        {
            warning(strFmt("@DNR2695",
                           "@DNR4151",
                           subrentalReference.PurchId,
                           subrentalReference.PurchInventTransId,
                           "@DNR975",
                           subrentalReference.SalesId,
                           subrentalReference.SalesInventTransId));
            hasReference = true;
            isOnlyInfo = false;
        }                

        return [hasReference, isOnlyInfo];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>