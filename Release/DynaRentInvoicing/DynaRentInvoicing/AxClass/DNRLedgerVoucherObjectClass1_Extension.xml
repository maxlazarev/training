<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLedgerVoucherObjectClass1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerVoucherObject))]
public final class DNRLedgerVoucherObjectClass1_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public boolean post(LedgerVoucher _journal)
    {
        boolean ret = next post(_journal);

        if (ret)
        {
            GeneralJournalEntry generalJournalEntry = this.parmGeneralJournalEntry();
            LedgerVoucherTransList transactionCollection = this.FINTransactionCollection(); 

            FINLedgerVoucherObjectProcessor ledgerVoucherObjectProcessor = FINLedgerVoucherObjectProcessor::construct(generalJournalEntry, transactionCollection, 0, null);
            ledgerVoucherObjectProcessor.run();
            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINTransactionCollection</Name>
				<Source><![CDATA[
    // extension methods

    public LedgerVoucherTransList FINTransactionCollection()
    {
        return this.transactionCollection_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrans_pre</Name>
				<Source><![CDATA[
    // event handler methods
    [PreHandlerFor(classStr(LedgerVoucherObject), methodStr(LedgerVoucherObject, addTrans))]
    public static void addTrans_pre(XppPrePostArgs _args)
    {
        LedgerVoucherTransObject transaction = _args.getArg('_transaction');
        str mdaStr = "@DNR988";
        
        if (transaction.parmText()
        &&  transaction.parmPostingType() == LedgerPostingType::LedgerJournal
        &&  strScan(transaction.parmText(), mdaStr, 0, strLen(transaction.parmText())))
        {
            transaction.parmPostingType(LedgerPostingType::Allocation);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>