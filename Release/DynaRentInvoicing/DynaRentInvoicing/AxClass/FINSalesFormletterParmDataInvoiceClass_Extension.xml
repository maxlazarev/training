<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINSalesFormletterParmDataInvoiceClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormletterParmDataInvoice))]
public final class FINSalesFormletterParmDataInvoiceClass_Extension
{
    // chain-of-command wrapper methods
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    protected Common createParmUpdate()
    {
        Common ret = next createParmUpdate();
        SalesFormLetterContract formLetterContract = this.INVParmFormLetterContract();

        if (formLetterContract && formLetterContract.FINParmInvoiceJourRecId())
        {
            FINJournalizedInvoicePeriod journalizedInvoicePeriod;
            CustInvoiceTrans custInvoiceTransLoc;
            CustInvoiceJour  custInvoiceJourLoc;

            select maxof(PeriodEndDateTime) from journalizedInvoicePeriod
                exists join custInvoiceTransLoc
                where custInvoiceTransLoc.RecId == journalizedInvoicePeriod.RefRecId
                &&    custInvoiceTransLoc.TableId == journalizedInvoicePeriod.RefTableId
                    join  custInvoiceJourLoc
                    where custInvoiceJourLoc.RecId == formLetterContract.FINParmInvoiceJourRecId()
                    &&    custInvoiceJourLoc.SalesId == custInvoiceTransLoc.SalesId
                    &&    custInvoiceJourLoc.InvoiceId == custInvoiceTransLoc.InvoiceId
                    &&    custInvoiceJourLoc.InvoiceDate == custInvoiceTransLoc.InvoiceDate
                    &&    custInvoiceJourLoc.numberSequenceGroup == custInvoiceTransLoc.numberSequenceGroup;

            if (journalizedInvoicePeriod.PeriodEndDateTime)
            {
                salesParmUpdate.INVCalculationDateTime = max(journalizedInvoicePeriod.PeriodEndDateTime, salesParmUpdate.INVCalculationDateTime);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    public void createData(boolean _append)
    {
        next createData(_append);
        this.FINPerformRentalInvoiceCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    public void  reSelect()
    {
        next reSelect();
        this.FINPerformRentalInvoiceCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINPerformRentalInvoiceCalculation</Name>
				<Source><![CDATA[
    private void FINPerformRentalInvoiceCalculation()
    {
        SalesFormLetterContract formLetterContract = this.INVParmFormLetterContract();
        
        if (this is SalesFormletterParmDataInvoice && formLetterContract.RORIsRentalPosting())
        {
            using (FINInvoiceServiceController_RentalInvoice invoiceServiceController = FINInvoiceServiceController_RentalInvoice::construct(this.parmParmUpdate()))
            {
                ttsbegin;

                if (formLetterContract)
                {
                    invoiceServiceController.setCalcEstimation(formLetterContract.FINParmIsEstimation());
                    invoiceServiceController.setCreditJourRefRecId(formLetterContract.FINParmInvoiceJourRecId());
                    invoiceServiceController.setPostInvoiceProposal(formLetterContract.FINParmPostInvoiceProposal());
                    invoiceServiceController.setProformaJourRefRecId(formLetterContract.FINParmProformaInvoiceJourRecId());
                    invoiceServiceController.parmDataSourceRecordMapPacked(formLetterContract.parmDataSourceRecordMapPacked());
                }

                invoiceServiceController.init();
                invoiceServiceController.run();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>