<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINLedgerTransVoucherForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(LedgerTransVoucher))]
public final class FINLedgerTransVoucherForm_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performInitForDataset</Name>
				<Source><![CDATA[
    // Chain-of-command wrapper methods
    public void performInitForDataset(TableId _sourceTable, Query _query)
    {
        next performInitForDataset(_sourceTable, _query);

        switch (_sourceTable)
        {
            case tableNum(ProjInvoiceJour):
                this.FINUpdateQueryForProject(_query);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUpdateQueryForProject</Name>
				<Source><![CDATA[
    // Extension methods
    private void FINUpdateQueryForProject(Query _query)
    {              
        ProjTransIdBase projTransId;
        Voucher projVoucher;
        [projTransId, projVoucher] = this.getInputForProject();

        if (projVoucher != '')
        {
            str rangeValue = this.getRangeValueForProjVoucher(_query, projVoucher);
            if (rangeValue == SysQuery::valueEmptyString() && this.FINIsRentalLineInvoice(projVoucher))
            {
                // There might be rental line invoiced that has no ProjTransPosting in such case use projVoucher directly
                rangeValue = projVoucher;

                QueryBuildDataSource qbd = this.getSubledgerVoucherLinkDataSource(_query);
                QueryBuildRange qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

                qbr.value(rangeValue);
                qbr.status(RangeStatus::Hidden);
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINIsRentalLineInvoice</Name>
				<Source><![CDATA[
    private boolean FINIsRentalLineInvoice(Voucher _projVoucher)
    {
        boolean ret = false;
        ProjInvoiceJour projInvoiceJour;
        ProjInvoiceItem projInvoiceItem;
        SalesTable salesTable;
        
        select firstonly RecId from projInvoiceJour
        where projInvoiceJour.LedgerVoucher == _projVoucher
            exists join projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
            &&    projInvoiceItem.InvoiceDate == projInvoiceJour.InvoiceDate
                join RecId from salesTable
                where salesTable.SalesId == projInvoiceItem.SalesId
                &&    salesTable.SalesType == SalesType::RORRental;

        if (projInvoiceJour)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>