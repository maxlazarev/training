<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesParmUpdateTable2_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesParmUpdate))]
public final class DNRSalesParmUpdateTable2_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteWithoutUpdate</Name>
				<Source><![CDATA[
    static void  deleteWithoutUpdate(ParmId  parmId)
    {
        next deleteWithoutUpdate(parmId);

        ttsbegin;

        FINMarkupWorkTrans  markupWorkTrans;
        delete_from markupWorkTrans
            where markupWorkTrans.ParmId == parmId;

        FINInvoiceCalculatorParm    invoiceCalcParm;
        delete_from invoiceCalcParm
            where invoiceCalcParm.ParmId == parmId;

        FINCustInvoiceRun   custInvoiceRun;
        delete_from custInvoiceRun
            where custInvoiceRun.ParmId == parmId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityModified</Name>
				<Source><![CDATA[
    public boolean isQuantityModified(SalesParmUpdate _otherSalesParmUpdate)
    {
        boolean ret = next isQuantityModified(_otherSalesParmUpdate);

        if (!ret && this.FINMustReselect(_otherSalesParmUpdate))
        {
            ret = true;            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        
        next modifiedField(_fieldId);

        switch (_fieldId)
        {           
            case fieldNum(SalesParmUpdate, INVTransDate) :
                SalesParmTable salesParmTable;
                ttsBegin;
                while select forupdate salesParmTable
                where salesParmTable.ParmId == this.ParmId
                {
                    salesParmTable.Transdate =  this.INVTransdate;
                    salesParmTable.modifiedField(fieldNum(SalesParmTable, TransDate));
                    salesParmTable.update();
                }
                ttsCommit;
                break;

            case fieldNum(SalesParmUpdate, FINProforma) :
                if (this.FINProforma && this.Proforma)
                {
                    // Make sure that when you want to create invoice proposal "Posting" is set to Yes.
                    this.Proforma = !this.FINProforma;
                }
                break;
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    edit boolean  updateNow(boolean  set, boolean  _updateNow)
    {
        boolean ret = next updateNow(set, _updateNow);

        if (set && !_updateNow && this.FINProforma)
        {
            // Make sure that when you want to create standard D365 proforma invoice proposal is set to No.                    
            this.FINProforma = _updateNow;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromProjInvoiceProposalParams</Name>
				<Source><![CDATA[
    // extension methods 

    public void FINInitFromProjInvoiceProposalParams(ProjInvoiceProposalCreateLinesParams _projInvoiceProposalCreateLinesParams)
    {
        this.INVCalculationDateTime = _projInvoiceProposalCreateLinesParams.INVparmCalculationDateTime();
        this.INVIncludeUninvoiced = _projInvoiceProposalCreateLinesParams.INVparmIncludeUninvoiced();
        this.INVIncludeCredits = _projInvoiceProposalCreateLinesParams.INVparmIncludeCredits();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCalculationDateTime</Name>
				<Source><![CDATA[
    public FINCalculationDateTime FINCalculationDateTime(TransDate _transDate, TimeOfDay _transTime)
    {
        return this.INVCalculationDateTime ? this.INVCalculationDateTime : DateTimeUtil::newDateTime(_transDate, _transTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINMustReselect</Name>
				<Source><![CDATA[
    public boolean FINMustReselect(SalesParmUpdate _salesParmUpdate)
    {
        return (this.INVCalculationDateTime       != _salesParmUpdate.INVCalculationDateTime
             || this.INVIncludeCredits            != _salesParmUpdate.INVIncludeCredits
             || this.INVIncludeUninvoiced         != _salesParmUpdate.INVIncludeUninvoiced
             || this.FINForceInvoiceUntilPoint    != _salesParmUpdate.FINForceInvoiceUntilPoint);
            
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>