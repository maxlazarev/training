<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINPeriodSpecificationJournalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINPeriodSpecificationJournalizer implements FINIGenericJournalizer
{
    container   containerResult;
    Map         periodSpecificationMap;
    Timezone    timezone;
        
    //periodSpecificationMap   Key: [invoicePeriodQtyRecId, invoiceQty, defaultDaysSplitPerDelivery]
    //                       Value: Map   Key: [fromDateTimeInTimeZone, toDateTimeInTimeZone]
    //                                  Value: List FINPeriodSpecification

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResult</Name>
				<Source><![CDATA[
    public void addResult(anytype _result)
    {
        containerResult = _result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return containerResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedValues)
    {
        containerResult = _packedValues;

        if (containerResult)
        {
            periodSpecificationMap = Map::create(containerResult);
        }
        // If there are no (debit) periods, then the map should still be initialized.
        else
        {
            periodSpecificationMap = new Map(Types::Container, Types::Class);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValues</Name>
				<Source><![CDATA[
    public Set getChargedValues()
    {
        return this.getSummarizedValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimezone</Name>
				<Source><![CDATA[
    public Timezone parmTimezone(Timezone _timezone = timezone)
    {
        timezone = _timezone;
        return timezone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummarizedValues</Name>
				<Source><![CDATA[
    public Set getSummarizedValues()
    {
        Set result = new Set(Types::Container);

        MapEnumerator periodSpecificationMapEnumerator = periodSpecificationMap.getEnumerator();

        while(periodSpecificationMapEnumerator.moveNext())
        {
            RefRecId    invoicePeriodQtyRecId;
            Qty         invoiceQty;
            TimeOfDay   defaultDaysSplitPerDelivery;

            [invoicePeriodQtyRecId, invoiceQty, defaultDaysSplitPerDelivery] = periodSpecificationMapEnumerator.currentKey();

            MapEnumerator periodsMapEnumerator = periodSpecificationMapEnumerator.currentValue().getEnumerator();

            while (periodsMapEnumerator.moveNext())
            {
                utcdatetime             fromDateTime, toDateTime;
                FINPeriodSpecification  periodSpecTotal = FINPeriodSpecification::construct();

                [fromDateTime, toDateTime] = periodsMapEnumerator.currentKey();
                fromDateTime = DateTimeUtil::removeTimeZoneOffset(fromDateTime, timezone);
                toDateTime = DateTimeUtil::removeTimeZoneOffset(toDateTime, timezone);

                ListEnumerator periodSpecListEnumaretor = periodsMapEnumerator.currentValue().getEnumerator();

                while (periodSpecListEnumaretor.moveNext())
                {
                    FINPeriodSpecification periodSpec = periodSpecListEnumaretor.current();
                    periodSpecTotal.periodDisc += periodSpec.periodDisc;
                    periodSpecTotal.invoiceAmountCur += periodSpec.invoiceAmountCur;
                    periodSpecTotal.numOfCalendarPeriods += periodSpec.numOfCalendarPeriods;
                    periodSpecTotal.numOfChargedPeriods += periodSpec.numOfChargedPeriods;
                    periodSpecTotal.numOfOpenCalendarPeriods += periodSpec.numOfOpenCalendarPeriods;
                    periodSpecTotal.tierMultiplier = periodSpec.tierMultiplier;
                    periodSpecTotal.priceTimeUnit = periodSpec.priceTimeUnit;
                }

                result.add([invoicePeriodQtyRecId, invoiceQty, defaultDaysSplitPerDelivery, fromDateTime, toDateTime, periodSpecTotal.pack()]);
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>