<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoicePeriodAmendmentHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINInvoicePeriodAmendmentHelper extends RunBase
{
    FormDataSource callerDataSource;
    FINInvoicePeriodAmendment callerInvoicePeriodAmendment;
    RORAmendmentReasonText reasonText;
    DNRReasonCode reasonCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmReasonText</Name>
				<Source><![CDATA[
    public RORAmendmentReasonText parmReasonText(RORAmendmentReasonText _reasonText = reasonText)
    {
        reasonText = _reasonText;
        return reasonText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    public DNRReasonCode parmReasonCode(DNRReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;
    
        dialog = Dialog::newFormnameRunbase(formStr(FINInvoicePeriodAmendmentHelperDialog), this);
        dialog = this.dialogInternal(dialog);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static client void main(Args _args)
    {
        FINInvoicePeriodAmendmentHelper invoicePeriodAmendmentHelper;
            
        if (!_args.record() || _args.dataset() != tableNum(FINInvoicePeriodAmendment))
        {
            throw error(Error::missingParameter(null));
        }
    
        invoicePeriodAmendmentHelper = new FINInvoicePeriodAmendmentHelper();
        invoicePeriodAmendmentHelper.initValues(_args.record());
    
        if (invoicePeriodAmendmentHelper.prompt())
        {
            invoicePeriodAmendmentHelper.runOperation();
    
            invoicePeriodAmendmentHelper.refreshCallerForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    public void initValues(FINInvoicePeriodAmendment _invoicePeriodAmendment)
    {
        callerInvoicePeriodAmendment = _invoicePeriodAmendment;

        if (FormDataUtil::getFormDataSource(callerInvoicePeriodAmendment))
        {
            callerDataSource = FormDataUtil::getFormDataSource(callerInvoicePeriodAmendment);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerForm</Name>
				<Source><![CDATA[
    public void refreshCallerForm()
    {
        if (callerDataSource)
        {
            callerDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.validateAllSelectedRecords())
        {
            ttsbegin;

            if (callerDataSource)
            {
                FINInvoicePeriodAmendment invoicePeriodAmendment;
                MultiSelectionHelper helper = MultiSelectionHelper::construct();
    
                helper.parmDatasource(callerDataSource);

                invoicePeriodAmendment = helper.getFirst();
                while (invoicePeriodAmendment.RecId != 0)
                {                   
                    this.deleteAmendment(invoicePeriodAmendment);

                    invoicePeriodAmendment = helper.getNext();
                }
            }
            else
            {
                this.deleteAmendment(callerInvoicePeriodAmendment);
            }
    
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllSelectedRecords</Name>
				<Source><![CDATA[
    private boolean validateAllSelectedRecords()
    {
        boolean ret = true;
                
        if (callerDataSource)
        {
            FINInvoicePeriodAmendment invoicePeriodAmendment;
            MultiSelectionHelper helper = MultiSelectionHelper::construct();
    
            helper.parmDatasource(callerDataSource);

            invoicePeriodAmendment = helper.getFirst();
            while (invoicePeriodAmendment.RecId != 0)
            {                
                if (!this.canDeleteAmendment(invoicePeriodAmendment))
                {
                    ret = false;
                }

                invoicePeriodAmendment = helper.getNext();
            }
        }
        else
        {
            ret = this.canDeleteAmendment(callerInvoicePeriodAmendment);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteAmendment</Name>
				<Source><![CDATA[
    private boolean canDeleteAmendment(FINInvoicePeriodAmendment _invoicePeriodAmendment)
    {
        boolean ret = true;
        CustInvoiceJour custInvoiceJour;
        FINCreditLine creditLine;
        FINCreditPendingChangesReference creditPendingChangesReference;
        
        select firstonly InvoiceId from custInvoiceJour
            exists join creditLine
            where creditLine.JourRefTableId == custInvoiceJour.TableId
            &&    creditLine.JourRefRecId == custInvoiceJour.RecId
                join TableId from creditPendingChangesReference
                where creditPendingChangesReference.RefTableId == _invoicePeriodAmendment.TableId
                &&    creditPendingChangesReference.RefRecId == _invoicePeriodAmendment.RecId
                &&    creditPendingChangesReference.CreditParmLineRecId == creditLine.RecId;

        if (custInvoiceJour.InvoiceId)
        {
            ret = checkFailed(strFmt("@DNR:DeleteAmendmentCreditNotValid",
                _invoicePeriodAmendment.PriceComponent,
                DateTimeUtil::applyTimeZoneOffset(_invoicePeriodAmendment.FromDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                DateTimeUtil::applyTimeZoneOffset(_invoicePeriodAmendment.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                custInvoiceJour.InvoiceId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAmendment</Name>
				<Source><![CDATA[
    private void deleteAmendment(FINInvoicePeriodAmendment _invoicePeriodAmendment)
    {
        _invoicePeriodAmendment.createAmendmentLogFromDeletetionDialog(AccessType::Delete, reasonCode, reasonText);
        _invoicePeriodAmendment.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>