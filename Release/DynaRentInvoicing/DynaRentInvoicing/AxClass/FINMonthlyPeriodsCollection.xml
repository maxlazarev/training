<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINMonthlyPeriodsCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINMonthlyPeriodsCollection implements SysPackable
{
    // { ( originRecIdInExchangeChain, [periodStartDateTime, periodEndDateTime], [chargedPeriods, isCharged]) }
    Map periodsCollectionMap = new Map(Types::Int64, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return (periodsCollectionMap) ? [ periodsCollectionMap.pack() ] : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = false;
        container periodsCollectionCon;
        
        periodsCollectionMap = null;
                
        [ periodsCollectionCon ] = _packedClass;
        
        if (periodsCollectionCon)
        {
            periodsCollectionMap = Map::create(periodsCollectionCon);
        }

        if (periodsCollectionMap)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInvoiceEntirePeriod</Name>
				<Source><![CDATA[
    public boolean mustInvoiceEntirePeriod(Common _newestReplacementLineBuffer, FINPeriodSpecification _periodSpecification)
    {
        boolean ret = true;
        Map notChargedPeriodsDefinition;

        if (periodsCollectionMap && periodsCollectionMap.exists(_newestReplacementLineBuffer.RecId))
        {
            notChargedPeriodsDefinition = periodsCollectionMap.lookup(_newestReplacementLineBuffer.RecId);
            MapEnumerator enumerator = notChargedPeriodsDefinition.getEnumerator();

            while (enumerator.moveNext())
            {
                TransDateTime periodStartDateTime;
                TransDateTime periodEndDateTime;
                int numOfChargedPeriods;
                boolean charged;

                [periodStartDateTime, periodEndDateTime] = enumerator.currentKey();
                [numOfChargedPeriods, charged] = enumerator.currentValue();

                if (periodStartDateTime <= _periodSpecification.fromDateTime
                &&  periodEndDateTime >= _periodSpecification.toDateTime)
                {
                    if (charged)
                    {
                        ret = false;
                    }
                    else
                    {
                        notChargedPeriodsDefinition.insert([periodStartDateTime, periodEndDateTime], [numOfChargedPeriods, true]);
                        periodsCollectionMap.insert(_newestReplacementLineBuffer.RecId, notChargedPeriodsDefinition);
                    }
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInvoiceEntireProRataPeriod</Name>
				<Source><![CDATA[
    public boolean mustInvoiceEntireProRataPeriod(Common _newestReplacementLineBuffer, FINPeriodSpecification _periodSpecification, int _periodsTotalChargeable)
    {
        boolean ret = true;
        Map notChargedPeriodsDefinition;

        if (periodsCollectionMap && periodsCollectionMap.exists(_newestReplacementLineBuffer.RecId))
        {
            notChargedPeriodsDefinition = periodsCollectionMap.lookup(_newestReplacementLineBuffer.RecId);
            MapEnumerator enumerator = notChargedPeriodsDefinition.getEnumerator();

            while (enumerator.moveNext())
            {
                TransDateTime periodStartDateTime;
                TransDateTime periodEndDateTime;
                int numOfChargedPeriods;
                boolean charged;

                [periodStartDateTime, periodEndDateTime] = enumerator.currentKey();
                [numOfChargedPeriods, charged] = enumerator.currentValue();

                if (periodStartDateTime <= _periodSpecification.fromDateTime
                &&  periodEndDateTime >= _periodSpecification.toDateTime)
                {
                    if (numOfChargedPeriods != _periodsTotalChargeable)
                    {
                        ret = false;
                    }
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePeriodsCollection</Name>
				<Source><![CDATA[
    public void populatePeriodsCollection(Common _newestReplacementLineBuffer, Map _specificationMap)
    {
        if (periodsCollectionMap.exists(_newestReplacementLineBuffer.RecId))
        {
            Map notChargedPeriodsDefinition = periodsCollectionMap.lookup(_newestReplacementLineBuffer.RecId);
            MapEnumerator notChargedPeriodsDefinitionEnumerator = notChargedPeriodsDefinition.getEnumerator();

            while (notChargedPeriodsDefinitionEnumerator.moveNext())
            {
                TransDateTime periodStartDateTimePrevious;
                TransDateTime periodEndDateTimePrevious;
                int numOfChargedPeriodsPrevious;
                boolean isChargedPrevious;

                [periodStartDateTimePrevious, periodEndDateTimePrevious] = notChargedPeriodsDefinitionEnumerator.currentKey();
                [numOfChargedPeriodsPrevious, isChargedPrevious] = notChargedPeriodsDefinitionEnumerator.currentValue();

                MapEnumerator periodEnumerator = _specificationMap.getEnumerator();

                while (periodEnumerator.moveNext())
                {
                    Map periodDefinitionMap = periodEnumerator.currentValue();
                    MapEnumerator enumerator = periodDefinitionMap.getEnumerator();
                
                    while(enumerator.moveNext())
                    {
                        TransDateTime periodStartDateTime;
                        TransDateTime periodEndDateTime;
                        [periodStartDateTime, periodEndDateTime] = enumerator.currentKey();
                        
                        if (periodStartDateTime >= periodStartDateTimePrevious && periodEndDateTime <= periodEndDateTimePrevious)
                        {
                            List specificationList = enumerator.currentValue();
                            ListEnumerator listEnumerator = specificationList.getEnumerator();
                        
                            while (listEnumerator.moveNext())
                            {
                                FINPeriodSpecification periodSpec = listEnumerator.current();
                                numOfChargedPeriodsPrevious += periodSpec.numOfChargedPeriods;
                            }

                            notChargedPeriodsDefinition.insert([periodStartDateTimePrevious, periodEndDateTimePrevious], [numOfChargedPeriodsPrevious, isChargedPrevious]);
                            break;
                        }
                    }
                }
            }

        }
        else
        {
            MapEnumerator periodEnumerator = _specificationMap.getEnumerator();
        
            Map notChargedPeriodsDefinition = new Map(Types::Container, Types::Container);

            while (periodEnumerator.moveNext())
            {
                Map periodDefinitionMap = periodEnumerator.currentValue();
                MapEnumerator enumerator = periodDefinitionMap.getEnumerator();
                
                while(enumerator.moveNext())
                {
                    TransDateTime periodStartDateTime;
                    TransDateTime periodEndDateTime;
                    [periodStartDateTime, periodEndDateTime] = enumerator.currentKey();
                    List specificationList = enumerator.currentValue();
                    ListEnumerator listEnumerator = specificationList.getEnumerator();
                    int numOfChargedPeriods = 0;

                    while (listEnumerator.moveNext())
                    {
                        FINPeriodSpecification periodSpec = listEnumerator.current();
                        numOfChargedPeriods += periodSpec.numOfChargedPeriods;
                    }

                    notChargedPeriodsDefinition.insert([periodStartDateTime, periodEndDateTime], [numOfChargedPeriods, false]);
                }
            }

            periodsCollectionMap.insert(_newestReplacementLineBuffer.RecId, notChargedPeriodsDefinition);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>