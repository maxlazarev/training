<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINPurchFormletterParmDataInvoiceClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchFormletterParmDataInvoice))]
public final class FINPurchFormletterParmDataInvoiceClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateQueryBuildSpecQty</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    protected void updateQueryBuildSpecQty()
    {
        next updateQueryBuildSpecQty();

        if (isFromPackingSlip)
        {
            QueryBuildDataSource qbds = chooseLines.query().dataSourceTable(tableNum(VendPackingSlipTrans));
            if (qbds)
            {
                if (callerTable && callerTable.TableId == tableNum(PurchTable))
                {
                    PurchTable purchTableLocal = callerTable;
                    // sub-rental order will invoice several times the same lines so ignore FullyMatched range for packingSlip
                    if (purchTableLocal.PurchaseType == PurchaseType::RORSubRental)
                    {
                        qbds.clearRange(fieldNum(VendPackingSlipTrans, FullyMatched));

                        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(VendPackingSlipTrans, RecId));

                        qbr.value(strFmt('((%1 == %2) || (%3.%4 == %5))',
                            fieldStr(VendPackingSlipTrans, FullyMatched),
                            any2int(NoYes::No),
                            chooseLines.query().dataSourceTable(tableNum(PurchLine)).name(),
                            fieldStr(PurchLine, RORTradeType),
                            any2int(RORTradeType::SubRental)));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventoryTransactionsQuery</Name>
				<Source><![CDATA[
    protected Query buildInventoryTransactionsQuery(PurchId _origOrderId)
    {
        Query ret = next buildInventoryTransactionsQuery(_origOrderId);

        if (_origOrderId && PurchTable::find(_origOrderId).PurchaseType == PurchaseType::RORSubRental)
        {
            QueryBuildDataSource qbds = ret.dataSourceTable(tableNum(VendPackingSlipTrans));
            if (qbds)
            {
                qbds.clearRange(fieldNum(VendPackingSlipTrans, FullyMatched));

                QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(VendPackingSlipTrans, RecId));

                qbr.value(strFmt('((%1 == %2) || (%3.%4 == %5))',
                            fieldStr(VendPackingSlipTrans, FullyMatched),
                            any2int(NoYes::No),
                            ret.dataSourceTable(tableNum(PurchLine)).name(),
                            fieldStr(PurchLine, RORTradeType),
                            any2int(RORTradeType::SubRental)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>