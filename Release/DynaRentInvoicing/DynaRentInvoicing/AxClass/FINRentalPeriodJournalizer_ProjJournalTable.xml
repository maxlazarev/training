<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINRentalPeriodJournalizer_ProjJournalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FINRentalPeriodJournalizerAttribute(tableStr(ProjJournalTable))]
class FINRentalPeriodJournalizer_ProjJournalTable extends FINRentalPeriodJournalizer
{  
    SalesLine                               salesLine;
    ProjJournalTable                        projJournalTable;
    ProjJournalTrans                        projJournalTrans;
    FINProjJournalTrans                     finProjJournalTrans;
    FINProjJournalTransPeriod               projJournalTransPeriod;
    FINProjJournalTransPeriodPriceComponent projJournalTransPeriodPriceComponent;
    FINProjJournalTransCalcResult           projJournalTransCalcResult;
    FINProjJournalTransCredit               projJournalTransCredit;
    FINProjJournalTransPriceAmendment       projJournalTransPriceAmendment;
    FINProjJournalTransTransportPrice       projJournalTransTransportPrice;
    FINProjJournalTransManualComponent      projJournalTransManualComponent;
    FINProjJournalTransCostPrice            projJournalTransCostPrice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _buffer, FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
        super(_buffer, _invoiceCalculatorParm);

        projJournalTable = _buffer;

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source>
          <![CDATA[
    protected void init()
    {
        rentalTransPeriod = projJournalTransPeriod;
        rentalTransPeriodPriceComponent = projJournalTransPeriodPriceComponent;
        rentalTransCalcResult = projJournalTransCalcResult;
        rentalTransCredit = projJournalTransCredit;
        rentalTransPriceAmendment = projJournalTransPriceAmendment;
        rentalTransTransportPrice = projJournalTransTransportPrice;
        rentalTransCostPrice = projJournalTransCostPrice;
        rentalTransManualComponent = projJournalTransManualComponent;
        rentalTransTotals = finProjJournalTrans;
        rentalInvoiceLinePacked = finProjJournalTrans;

        rentalTransPeriodPriceComponentInsertList = new RecordInsertList(tableNum(FINProjJournalTransPeriodPriceComponent));
        rentalTransCalcResultInsertList = new RecordInsertList(tableNum(FINProjJournalTransCalcResult));
        rentalTransCreditInsertList = new RecordInsertList(tableNum(FINProjJournalTransCredit));
        rentalTransTransportPriceInsertList = new RecordInsertList(tableNum(FINProjJournalTransTransportPrice));
        rentalTransPriceAmendmentInsertList = new RecordInsertList(tableNum(FINProjJournalTransPriceAmendment));
        rentalTransManualComponentInsertList = new RecordInsertList(tableNum(FINProjJournalTransManualComponent));
        rentalTransProjHourInsertList = new RecordInsertList(tableNum(Common));
   }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeJournal</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent", "update happens in another method")]
    protected void journalizeJournal()
    {
        ttsbegin;

        while select forupdate finProjJournalTrans
            join projJournalTrans
            where finProjJournalTrans.ProjJournalTransRecId == projJournalTrans.RecId
            &&    projJournalTrans.JournalId                == projJournalTable.JournalId
        {
            this.initFromLine();
            this.journalizeLine();
        }

        this.insertRecordList();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLine</Name>
				<Source><![CDATA[
    protected void initFromLine()
    {
        this.initTotals();

        this.parmPeriodSpecificationPacked(finProjJournalTrans.PeriodSpecificationPacked);
        this.parmRentalCalcPacked(finProjJournalTrans.RentalCalcPacked);
        this.parmCalcResultListPacked(finProjJournalTrans.InvoiceCalcResultListPacked);
        this.parmTransportCalcPacked(finProjJournalTrans.TransportCalcPacked);
        this.parmCreditCalcPacked(finProjJournalTrans.CreditCalcPacked);
        this.parmPriceComponentsAmendmentPacked(finProjJournalTrans.PriceComponentsAmendmentPacked);
        this.parmCostPriceCalcPacked(finProjJournalTrans.CostPriceCalcPacked);
        this.parmManualComponentPacked(finProjJournalTrans.ManualCalcPacked);
        this.parmProjHourPacked(finProjJournalTrans.ProjHoursCalcPacked);
        this.parmTimezone(finProjJournalTrans.Timezone);

        salesLine = SalesLine::findRecId(projJournalTrans.INVRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRentalTransPeriod</Name>
				<Source><![CDATA[
    protected void initRentalTransPeriod()
    {
        projJournalTransPeriod.setExchangeInfo(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRecId</Name>
				<Source><![CDATA[
    protected RefRecId getSourceRecId()
    {
        return projJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableId</Name>
				<Source><![CDATA[
    protected TableId getSourceTableId()
    {
        return projJournalTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLine</Name>
				<Source><![CDATA[
    protected RORRentalLine getOrderLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalTotalsFromRentalTransCalcResult</Name>
				<Source><![CDATA[
    protected void updateRentalTotalsFromRentalTransCalcResult(FINRentalTransCalcResult _rentalTransCalcResult)
    {
        super(_rentalTransCalcResult);

        if (_rentalTransCalcResult.accountType != FINRentalAccountType::CostPrice)
        {
            rentalTransTotals.TotalChargedAmount += _rentalTransCalcResult.AmountCur;
        }
        else
        {
            rentalTransTotals.TotalInternalAmount += _rentalTransCalcResult.AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateChargedAndCostAmounts</Name>
				<Source><![CDATA[
    protected void calculateChargedAndCostAmounts()
    {
        if (invoiceCalculatorParm.RecId)
        {
            rentalTransTotals.TotalChargedAmount = invoiceCalculatorParm.InvoiceAmount;
            rentalTransTotals.TotalInternalAmount = (invoiceCalculatorParm.MarkupAmount - invoiceCalculatorParm.InvoiceAmount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>