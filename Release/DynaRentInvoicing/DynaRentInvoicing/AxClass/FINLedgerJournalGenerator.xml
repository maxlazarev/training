<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINLedgerJournalGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINLedgerJournalGenerator
{
    List                journalLineList;
    boolean             mustShowJournalInfoLog;
    boolean             mustOpenJournals;
    boolean             mustAutoPostJournals;
    Map                 journalTableMap;
    Map                 voucherMap;
    RecordInsertList    insertListVoucherRef;
    RecordInsertList    insertListJournalTable;
    RecordInsertList    insertListJournalTrans;
    DataAreaId          originCompanyId;
    Voucher             originVoucher;
    RORParameters       rorParameters;
    Name                genericJournalTableName;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmGenericJournalTableName</Name>
				<Source><![CDATA[
    public Name parmGenericJournalTableName(Name _genericJournalTableName = genericJournalTableName)
    {
        genericJournalTableName = _genericJournalTableName;
        return genericJournalTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTableName</Name>
				<Source><![CDATA[
    public Name getJournalTableName(FINTmpLedgerJournalGeneratorParm _ledgerJournalGeneratorParm)
    {
        // By default we use the same journal name for all transactions.
        // If there would be need to add to journal name some data related information then it can be implemented in post even of this method.
        return genericJournalTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTableMap</Name>
				<Source><![CDATA[
    public Map parmJournalTableMap(Map _journalTableMap = journalTableMap)
    {
        journalTableMap = _journalTableMap;
        return journalTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInsertListJournalTable</Name>
				<Source><![CDATA[
    public RecordInsertList parmInsertListJournalTable(RecordInsertList _insertListJournalTable = insertListJournalTable)
    {
        insertListJournalTable = _insertListJournalTable;
        return insertListJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherMap</Name>
				<Source><![CDATA[
    public Map parmVoucherMap(Map _voucherMap = voucherMap)
    {
        voucherMap = _voucherMap;
        return voucherMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINLedgerJournalGenerator construct(List _journalLineList)
    {
        FINLedgerJournalGenerator   ret;

        ret = new FINLedgerJournalGenerator();
        ret.setJournalLineList(_journalLineList);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginVoucher</Name>
				<Source><![CDATA[
    public void setOriginVoucher(DataAreaId _originCompanyId, Voucher _originVoucher)
    {
        originCompanyId = _originCompanyId;
        originVoucher   = _originVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalLineList</Name>
				<Source><![CDATA[
    public void setJournalLineList(List _journalLineList)
    {
        journalLineList = _journalLineList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.initialize();

        ttsbegin;

        this.createJournals();

        this.insertJournalLists();

        // Create vouchers relation even if journal is not posted.
        this.setVoucherRef();

        if (mustAutoPostJournals)
        {
            this.postJournals();
        }

        this.insertVoucherRefList();

        ttscommit;

        if (mustShowJournalInfoLog)
        {
            this.showJournalInfoLog();
        }

        if (mustOpenJournals)
        {
            this.openJournals();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyCon</Name>
				<Source><![CDATA[
    public container getKeyCon(FINTmpLedgerJournalGeneratorParm _ledgerJournalGeneratorParm)
    {
        // This method determines how we split general journal transactions across different journal headers.
        return [_ledgerJournalGeneratorParm.CurrentOperationsTax];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournals</Name>
				<Source><![CDATA[
    public void createJournals()
    {
        ListEnumerator resultEnumerator = journalLineList.getEnumerator();
       
        while (resultEnumerator.moveNext())
        {
            FINTmpLedgerJournalGeneratorParm ledgerJournalGeneratorParm = resultEnumerator.current();
            
            if (ledgerJournalGeneratorParm.AmountCurCredit || ledgerJournalGeneratorParm.AmountCurDebit)
            {
                LedgerJournalTable ledgerJournalTable = this.findOrCreateLedgerJournalTable(ledgerJournalGeneratorParm);
                this.createLedgerJournalTrans(ledgerJournalTable, ledgerJournalGeneratorParm);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>engineLedgerJournalName</Name>
				<Source><![CDATA[
    public static LedgerJournalNameId engineLedgerJournalName(CurrentOperationsTax _currentOperationsTax)
    {
        LedgerJournalNameId ret;
        RORParameters parameters = RORParameters::find();

        switch (_currentOperationsTax)
        {
            case CurrentOperationsTax::Current :
                ret = parameters.FINEngineJournalNameCurrent;
                break;

            case CurrentOperationsTax::Operations :
                ret = parameters.FINEngineJournalNameOperations;
                break;

            case CurrentOperationsTax::Tax :
                ret = parameters.FINEngineJournalNameTax;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLedgerJournalTable</Name>
				<Source><![CDATA[
    protected LedgerJournalTable findOrCreateLedgerJournalTable(FINTmpLedgerJournalGeneratorParm _ledgerJournalGeneratorParm)
    {
        container           keyCon = this.getKeyCon(_ledgerJournalGeneratorParm);
        LedgerJournalTable  ret;
        
        if (journalTableMap.exists(keyCon)) // find
        {
            ret = journalTableMap.lookup(keyCon);
        }
        else // create
        {
            LedgerJournalNameId     ledgerJournalNameId = FINLedgerJournalGenerator::engineLedgerJournalName(_ledgerJournalGeneratorParm.CurrentOperationsTax); 
            JournalTableData        journalTableData = JournalTableData::newTable(ret);
            NumberSequenceReference numSeqRef = NumberSeqReference::findReference(extendedTypeNum(LedgerJournalId));
    
            ret.JournalNum = NumberSeq::newGetNum(numSeqRef).num();
            journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(ledgerJournalNameId));
            ret.Name = this.getJournalTableName(_ledgerJournalGeneratorParm);

            journalTableMap.insert(keyCon, ret);
            insertListJournalTable.add(ret);

            NumberSeq numberSeq = NumberSeq::newGetNumFromId(ret.NumberSequenceTable);

            if (numberSeq)
            {
                Voucher voucher = numberSeq.num();
                voucherMap.insert(ret.JournalNum, voucher);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        insertListJournalTable  = new RecordInsertList(tableNum(LedgerJournalTable));
        insertListJournalTrans  = new RecordInsertList(tableNum(LedgerJournalTrans));
        insertListVoucherRef    = new RecordInsertList(tableNum(FINVoucherRef));

        journalTableMap         = new Map(Types::Container, Types::Record);
        voucherMap              = new Map(Types::String, Types::String);

        rorParameters           = RORParameters::find();

        if (!genericJournalTableName)
        {
            // Could be already set by parm method.
            genericJournalTableName = strFmt('%1 %2', "@DNR988", strLwr("@SYS24010"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void createLedgerJournalTrans(LedgerJournalTable _ledgerJournalTable, FINTmpLedgerJournalGeneratorParm _ledgerJournalGeneratorParm)
    {
        LedgerJournalTrans newTrans;

        if (_ledgerJournalGeneratorParm.AmountCurCredit || _ledgerJournalGeneratorParm.AmountCurDebit)
        {
            newTrans.JournalNum = _ledgerJournalTable.JournalNum;
            newTrans.FINInitFromTmpLedgerJournalGeneratorParm(_ledgerJournalGeneratorParm);

            if (voucherMap.exists(newTrans.JournalNum))
            {
                newTrans.Voucher = voucherMap.lookup(newTrans.JournalNum);
            }

            insertListJournalTrans.add(newTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalLists</Name>
				<Source><![CDATA[
    private void insertJournalLists()
    {
        insertListJournalTable.insertDatabase();
        insertListJournalTrans.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustShowJournalInfoLog</Name>
				<Source><![CDATA[
    public boolean parmMustShowJournalInfoLog(boolean _mustShowJournalInfoLog = mustShowJournalInfoLog)
    {
        mustShowJournalInfoLog = _mustShowJournalInfoLog;
        return mustShowJournalInfoLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustOpenJournals</Name>
				<Source><![CDATA[
    public boolean parmMustOpenJournals(boolean _mustOpenJournals = mustOpenJournals)
    {
        mustOpenJournals = _mustOpenJournals;
        return mustOpenJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustAutoPostJournals</Name>
				<Source><![CDATA[
    public boolean parmMustAutoPostJournals(boolean _mustAutoPostJournals = mustAutoPostJournals)
    {
        mustAutoPostJournals = _mustAutoPostJournals;
        return mustAutoPostJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJournalInfoLog</Name>
				<Source><![CDATA[
    protected void showJournalInfoLog()
    {
        MapEnumerator enumerator = journalTableMap.getEnumerator();

        while (enumerator.moveNext())
        {
            LedgerJournalTable journalTable = enumerator.currentValue();
            info(strFmt("@FixedAssets:JournalCreateNotification", journalTable.JournalNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openJournals</Name>
				<Source><![CDATA[
    protected void openJournals()
    {
        Args            args = new Args();
        FormRun         formRun;
        FormDataSource  dataSource;
        MapEnumerator   enumerator = voucherMap.getEnumerator();
        Range           journalNumRangeValue;
        container       rangeValueCon;
        ;

        // build range of journal numbers
        // Range only has a StringSize of 250, but we will never have more than 3 IDs here
        while (enumerator.moveNext())
        {
            rangeValueCon += [enumerator.currentKey()];
        }
        
        journalNumRangeValue = con2Str(rangeValueCon, ',');
    
        args.name(formStr(LedgerJournalTable));
        args.caller(this);
        args.parmEnumType(enumNum(LedgerJournalType));
        args.parmEnum(enum2int(LedgerJournalType::Daily));
    
        formRun = classFactory.formRunClass(args);
        formRun.init();
        formRun.run();
    
        dataSource = formRun.dataSource();
        dataSource.filter(fieldNum(LedgerJournalTable, JournalNum), journalNumRangeValue);
    
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournals</Name>
				<Source><![CDATA[
    protected void postJournals()
    {
        MapEnumerator           enumerator = voucherMap.getEnumerator();
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        DataAreaId              linkedCompanyId;
        Voucher                 linkedVoucher;
        LedgerJournalTable      journalTable;

        while (enumerator.moveNext())
        {
            journalTable = LedgerJournalTable::find(enumerator.current());
            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(journalTable, true);

            if (ledgerJournalCheckPost)
            {
                ledgerJournalCheckPost.runOperation();
                linkedCompanyId = journalTable.DataAreaId;
                linkedVoucher = voucherMap.lookup(journalTable.JournalNum);
            }                                       
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherRef</Name>
				<Source><![CDATA[
    protected void setVoucherRef()
    {
        MapEnumerator           enumerator = voucherMap.getEnumerator();
        DataAreaId              linkedCompanyId;
        Voucher                 linkedVoucher;
        LedgerJournalTable      journalTable;

        this.createVoucherRef(originCompanyId, originVoucher, originCompanyId, originVoucher);

        while (enumerator.moveNext())
        {
            journalTable    = LedgerJournalTable::find(enumerator.current());
            linkedCompanyId = journalTable.DataAreaId;
            linkedVoucher   = voucherMap.lookup(journalTable.JournalNum);
                              
            this.createVoucherRef(originCompanyId, originVoucher, linkedCompanyId, linkedVoucher);

            if (journalTable.JournalNum)
            {
                LedgerJournalTrans  ledgerJournalTrans;
                Set                 icCompanies = new Set(Types::String);

                while select RecId, Company, OffsetCompany from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == journalTable.JournalNum
                    &&    (ledgerJournalTrans.Company != journalTable.DataAreaId ||
                           ledgerJournalTrans.OffsetCompany != journalTable.DataAreaId)
                {
                    icCompanies.add(ledgerJournalTrans.Company);
                    icCompanies.add(ledgerJournalTrans.OffsetCompany);
                }
                
                if (icCompanies.elements())
                {
                    SetEnumerator   setEnumerator = icCompanies.getEnumerator();
                    while (setEnumerator.moveNext())
                    {
                        if (setEnumerator.current() != journalTable.DataAreaId)
                        {
                            this.createVoucherRef(originCompanyId, originVoucher, setEnumerator.current(), linkedVoucher);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherRef</Name>
				<Source><![CDATA[
    protected void createVoucherRef(DataAreaId _originCompanyId, Voucher _originVoucher, DataAreaId _linkedCompanyId, Voucher _linkedVoucher)
    {
        FINVoucherRef voucherRef;

        if (_originVoucher && _linkedVoucher && !FINVoucherRef::exist(_originCompanyId, _originVoucher, _linkedCompanyId, _linkedVoucher))
        {
            voucherRef.OriginCompanyId  = _originCompanyId;
            voucherRef.OriginVoucher    = _originVoucher;
            voucherRef.RelatedCompanyId = _linkedCompanyId;
            voucherRef.RelatedVoucher   = _linkedVoucher;
        
            insertListVoucherRef.add(voucherRef);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVoucherRefList</Name>
				<Source><![CDATA[
    protected void insertVoucherRefList()
    {
        insertListVoucherRef.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>