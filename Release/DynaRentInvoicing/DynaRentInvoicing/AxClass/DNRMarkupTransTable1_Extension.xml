<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRMarkupTransTable1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(MarkupTrans))]
public final class DNRMarkupTransTable1_Extension
{
    // extension methods


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FINInitFromInvoiceCalcResult</Name>
				<Source><![CDATA[
    public void FINInitFromInvoiceCalcResult(FINInvoiceCalcResult _calculatorResult)
    {
        this.MarkupCode = _calculatorResult.MarkupCode;
        this.Txt = _calculatorResult.markupTxt;
        this.TaxItemGroup = _calculatorResult.markupTaxItemGroup;
        this.Value = CurrencyExchangeHelper::amount(_calculatorResult.amountCur, this.CurrencyCode);
        this.MarkupCategory = MarkupCategory::Fixed;
        this.FINMarkupAccountType = MarkupTrans::FINRentalToMarkupAccountType(_calculatorResult.accountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINRentalToMarkupAccountType</Name>
				<Source><![CDATA[
    public static FINMarkupAccountType FINRentalToMarkupAccountType(FINRentalAccountType _rentalAccountType)
    {
        FINMarkupAccountType ret;
         
        switch (_rentalAccountType)
        {
            case FINRentalAccountType::Consumption :
                ret = FINMarkupAccountType::Consumption;
                break;

            case FINRentalAccountType::CostPrice :
                ret = FINMarkupAccountType::CostPrice;
                break;

            case FINRentalAccountType::DeliveryTransport :
                ret = FINMarkupAccountType::DeliveryTransport;
                break;

            case FINRentalAccountType::Discount :
                ret = FINMarkupAccountType::Discount;
                break;

            case FINRentalAccountType::Insurance :
                ret = FINMarkupAccountType::Insurance;
                break;

            case FINRentalAccountType::Manual :
                ret = FINMarkupAccountType::Manual;
                break;

            case FINRentalAccountType::Price :
                ret = FINMarkupAccountType::Price;
                break;

            case FINRentalAccountType::ReturnTransport :
                ret = FINMarkupAccountType::ReturnTransport;
                break;

            case FINRentalAccountType::ProjectHours :
                ret = FINMarkupAccountType::ProjectHours;

                break;
            case FINRentalAccountType::Variance :
                ret = FINMarkupAccountType::Variance;
                break;

            default:
                ret = FINMarkupAccountType::None;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromRentalLine</Name>
				<Source><![CDATA[
    public void FINInitFromRentalLine(RORRentalLine _rentalLine)
    {
        boolean isInternalPosting = FINMarkupWorkTrans::isInternalPosting(this.MarkupCode);

        switch (_rentalLine.TableId)
        {
            case tableNum(SalesLine):
                SalesLine salesLine = _rentalLine;
                this.CurrencyCode   = salesLine.CurrencyCode;
                this.TaxGroup       = salesLine.TaxGroup;
                if (isInternalPosting)
                {
                    this.TaxItemGroup = '';
                }
                else
                {
                    this.TaxItemGroup = (this.TaxItemGroup ? this.TaxItemGroup : salesLine.TaxItemGroup);
                }
                this.ModuleType     = MarkupModuleType::Cust;
                break;

            case tableNum(PurchLine):
                PurchLine   purchLine = _rentalLine;
                this.CurrencyCode   = purchLine.CurrencyCode;
                this.TaxGroup       = purchLine.TaxGroup;
                if (isInternalPosting)
                {
                    this.TaxItemGroup = '';
                }
                else
                {
                    this.TaxItemGroup = (this.TaxItemGroup ? this.TaxItemGroup : purchLine.TaxItemGroup);
                }
                this.ModuleType     = MarkupModuleType::Vend;
                break;

            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = _rentalLine;
                this.CurrencyCode   = salesQuotationLine.CurrencyCode;
                this.TaxGroup       = salesQuotationLine.TaxGroup;
                if (isInternalPosting)
                {
                    this.TaxItemGroup = '';
                }
                else
                {
                    this.TaxItemGroup = (this.TaxItemGroup ? this.TaxItemGroup : salesQuotationLine.TaxItemGroup);
                }
                this.ModuleType     = MarkupModuleType::Cust;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINIsSubRentalInvoiceMarkup</Name>
				<Source><![CDATA[
    public boolean FINIsSubRentalInvoiceMarkup()
    {
        boolean ret;

        switch (this.TransTableId)
        {
            case tableNum(VendInvoiceInfoLine):
                ret = VendInvoiceInfoLine::findRecId(this.TransRecId).RORTradeType == RORTradeType::SubRental;
                break;
            case tableNum(VendInvoiceInfoSubLine):
                VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
                VendInvoiceInfoLine vendInvoiceInfoLine;

                select firstonly RecId from vendInvoiceInfoLine
                where vendInvoiceInfoLine.RORTradeType == RORTradeType::SubRental
                    exists join vendInvoiceInfoSubLine
                    where vendInvoiceInfoSubLine.RecId          == this.TransRecId
                    &&    vendInvoiceInfoSubLine.LineRefRecId   == vendInvoiceInfoLine.RecId;

                if (vendInvoiceInfoLine.RecId)
                {
                    ret = true;
                }
                
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingAllowed</Name>
				<Source><![CDATA[
    boolean editingAllowed(boolean _hasVendorInvoice, boolean _isCallerDatasourceEditable)
    {
        boolean editing = next editingAllowed(_hasVendorInvoice, _isCallerDatasourceEditable);

        if (editing  
        && (this.TransTableId == tableNum(VendInvoiceInfoLine) 
        ||  this.TransTableId == tableNum(VendInvoiceInfoSubLine))
        &&  this.FINIsSubRentalInvoiceMarkup())
        {
            editing = _isCallerDatasourceEditable;
        }

        return editing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    static DialogButton promptCopyTaxGroupToMarkupTrans(TableId _tableId, RecId _recId)
    {
        DialogButton ret;

        if ((_tableId == tableNum(VendInvoiceInfoLine)) && VendInvoiceInfoLine::findRecId(_recId).RORTradeType != RORTradeType::SalesPurch)
        {
            //No need to promt in case of sub-rental lines
            _recId = 0;
        }

        ret = next promptCopyTaxGroupToMarkupTrans(_tableId, _recId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowOnlyView</Name>
				<Source><![CDATA[
    public static boolean allowOnlyView(TableId _tableId)
    {
        boolean ret = next allowOnlyView(_tableId);

        if (_tableId == tableNum(FINCustInvoiceJourProForma) || _tableId == tableNum(FINCustInvoiceTransProForma))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _updateMiscMatching, boolean _isEditingBlockedByVendorInvoice)
    {
        MarkupTrans::DNRUpdateInterCompanySync(this);

        next update(_updateMiscMatching, _isEditingBlockedByVendorInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUpdateInterCompanySync</Name>
				<Source><![CDATA[
    public static void DNRUpdateInterCompanySync(MarkupTrans _markupTrans)
    {
        if (_markupTrans && (_markupTrans.transTableId == tableNum(SalesLine)
            || _markupTrans.transTableId == tableNum(PurchLine)
            || _markupTrans.transTableId == tableNum(CustInvoiceTrans)
            || _markupTrans.transTableId == tableNum(VendInvoiceTrans)))
        {
            Common common = _markupTrans.parentRecord();

            if (common.getFieldValue(literalStr(RORTradeType)) != RORTradeType::SalesPurch && _markupTrans.FINManualCharge == NoYes::No && _markupTrans.FINMarkupAccountType != FINMarkupAccountType::None)
            {
                _markupTrans.InterCompanySkipUpdate = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(MarkupTrans), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        MarkupTrans hostRecord = _sender as MarkupTrans;

        MarkupTrans::DNRUpdateInterCompanySync(hostRecord);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>