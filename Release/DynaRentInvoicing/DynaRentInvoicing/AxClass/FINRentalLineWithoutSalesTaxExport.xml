<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINRentalLineWithoutSalesTaxExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINRentalLineWithoutSalesTaxExport
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        FINRentalLineWithoutSalesTaxExport obj = new FINRentalLineWithoutSalesTaxExport();
        obj.exportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportData</Name>
				<Source><![CDATA[
    private void exportData()
    {
        CommaTextStreamIo textStreamObj = CommaTextStreamIo::constructForWrite();
        textStreamObj.outFieldDelimiter(';');
        container con;

        con = ["@SYS37144","@SYS23057","@Proj:InvoiceId", "@SYS328584", "@SYS86923","@DNR6238", "@SYS4082726","@DMF966", "@DMF970", "@SYS11466", "@AccountsReceivable:CurrencyCode"];

        textStreamObj.writeExp(con);

        TaxTrans         taxTrans;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceTrans custInvoiceTransLoc;
        CustInvoiceJour  custInvoiceJour;
        CustInvoiceJour  custInvoiceJourLoc;
        SalesLine        salesLine;
        MarkupTrans      markupTrans;

        while select count(RecId), InventTransId,  Voucher, InvoiceId
        from taxTrans
        group by taxTrans.InventTransId, taxTrans.Voucher, taxTrans.InvoiceId
            join custInvoiceTrans
            where custInvoiceTrans.InventTransId == taxTrans.InventTransId
            && custInvoiceTrans.TaxGroup != ''
            && custInvoiceTrans.TaxItemGroup != ''
                join custInvoiceJour
                where custInvoiceJour.LedgerVoucher == taxTrans.Voucher
                &&    custInvoiceJour.SalesId == custInvoiceTrans.SalesId
                &&    custInvoiceJour.InvoiceId ==  custInvoiceTrans.InvoiceId
                &&    custInvoiceJour.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup
                join salesLine
                where salesLine.InventTransId ==  custInvoiceTrans.InventTransId
                &&    salesLine.RORTradeType  == RORTradeType::Rental
                    exists join markupTrans
                    where markupTrans.TransTableId == custInvoiceTrans.TableId
                    &&    markupTrans.TransRecId   == custInvoiceTrans.RecId
                    &&    markupTrans.Voucher      == taxTrans.Voucher
                    &&    markupTrans.FINMarkupAccountType != FINMarkupAccountType::CostPrice
        {
        
            if (taxTrans.RecId == 1)
            {
                select firstonly custInvoiceTransLoc
                where custInvoiceTransLoc.InventTransId ==  taxTrans.InventTransId
                    join custInvoiceJourLoc
                    where custInvoiceJourLoc.LedgerVoucher == taxTrans.Voucher
                    &&    custInvoiceJourLoc.SalesId == custInvoiceTransLoc.SalesId
                    &&    custInvoiceJourLoc.InvoiceId ==  custInvoiceTransLoc.InvoiceId
                    &&    custInvoiceJourLoc.numberSequenceGroup == custInvoiceTransLoc.numberSequenceGroup ;

                select sum(Value) from markupTrans
                group by CurrencyCode
                where markupTrans.TransTableId == custInvoiceTransLoc.TableId
                &&    markupTrans.TransRecId   == custInvoiceTransLoc.RecId
                &&    markupTrans.Voucher      == taxTrans.Voucher
                &&    markupTrans.FINMarkupAccountType != FINMarkupAccountType::CostPrice;
         
                con = [taxTrans.RecId, taxTrans.InventTransId, custInvoiceTransLoc.InvoiceId, custInvoiceJourLoc.CreatedDateTime, taxTrans.Voucher, custInvoiceTransLoc.OrigSalesId, custInvoiceTransLoc.InvoiceDate, custInvoiceTransLoc.TaxGroup, custInvoiceTransLoc.TaxItemGroup, markupTrans.Value, markupTrans.CurrencyCode];
                textStreamObj.writeExp(con);
            }
        }

        Filename    fileName =  'RentalLinesInvoicedWihtoutSalesTax'+ datetime2Str(DateTimeUtil::utcNow()) +'.csv';
        File::SendFileToUser(textStreamObj.getStream(), fileName);

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>