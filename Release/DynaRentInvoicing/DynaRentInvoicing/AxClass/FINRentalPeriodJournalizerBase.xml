<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINRentalPeriodJournalizerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FINRentalPeriodJournalizerBase
{
    container   periodSpecificationPacked;
    container   rentalCalcPacked;
    container   calcResultListPacked;
    container   transportCalcPacked;
    container   creditCalcPacked;
    container   priceComponentsAmendmentPacked;
    container   costPriceCalcPacked;
    container   manualComponentPacked;
    container   projHourPacked;
    container   insuranceCalcPacked;
    Timezone    timezone;

    RecId       invoicePeriodQtyRecId;
    Qty         invoiceQty;
    boolean     createPeriodsFromCredit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _buffer, FINInvoiceCalculatorParm _invoiceCalculatorParm)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodSpecificationPacked</Name>
				<Source><![CDATA[
    public container parmPeriodSpecificationPacked(container _periodSpecificationPacked = periodSpecificationPacked)
    {
        periodSpecificationPacked = _periodSpecificationPacked;
        return periodSpecificationPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRentalCalcPacked</Name>
				<Source><![CDATA[
    public container parmRentalCalcPacked(container _rentalCalcPacked = rentalCalcPacked)
    {
        rentalCalcPacked = _rentalCalcPacked;
        return rentalCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcResultListPacked</Name>
				<Source><![CDATA[
    public container parmCalcResultListPacked(container _calcResultListPacked = calcResultListPacked)
    {
        calcResultListPacked = _calcResultListPacked;
        return calcResultListPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransportCalcPacked</Name>
				<Source><![CDATA[
    public container parmTransportCalcPacked(container _tranportCalc = transportCalcPacked)
    {
        transportCalcPacked = _tranportCalc;
        return transportCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditCalcPacked</Name>
				<Source><![CDATA[
    public container parmCreditCalcPacked(container _creditCalcPacked = creditCalcPacked)
    {
        creditCalcPacked = _creditCalcPacked;
        return creditCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPriceCalcPacked</Name>
				<Source><![CDATA[
    public container parmCostPriceCalcPacked(container _costPriceCalcPacked = costPriceCalcPacked)
    {
        costPriceCalcPacked = _costPriceCalcPacked;
        return costPriceCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceComponentsAmendmentPacked</Name>
				<Source><![CDATA[
    public container parmPriceComponentsAmendmentPacked(container _priceComponentsAmendmentPacked = priceComponentsAmendmentPacked)
    {
        priceComponentsAmendmentPacked = _priceComponentsAmendmentPacked;
        return priceComponentsAmendmentPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManualComponentPacked</Name>
				<Source><![CDATA[
    public container parmManualComponentPacked(container _manualComponentPacked = manualComponentPacked)
    {
        manualComponentPacked = _manualComponentPacked;
        return manualComponentPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjHourPacked</Name>
				<Source><![CDATA[
    public container parmProjHourPacked(container _projHourPacked = projHourPacked)
    {
        projHourPacked = _projHourPacked;
        return projHourPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInsuranceCalcPacked</Name>
				<Source><![CDATA[
    public container parmInsuranceCalcPacked(container _insuranceCalcPacked = insuranceCalcPacked)
    {
        insuranceCalcPacked = _insuranceCalcPacked;
        return insuranceCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimezone</Name>
				<Source><![CDATA[
    public Timezone parmTimezone(Timezone _timezone = timezone)
    {
        timezone = _timezone;
        return timezone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalize</Name>
				<Source><![CDATA[
    public abstract void journalize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeLine</Name>
				<Source><![CDATA[
    protected void journalizeLine()
    {
        this.journalizePeriodSpecification();
        this.journalizeCalcResultList();
        this.journalizeTransportPrice();
        this.journalizeCredits();
        this.journalizePriceComponentsAmendments();
        this.journalizeCostPrice();
        this.journalizeManualComponent();
        this.journalizeProjHour();
        this.journalizeRentalTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeJournal</Name>
				<Source><![CDATA[
    abstract protected void journalizeJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizePeriodSpecification</Name>
				<Source><![CDATA[
    protected void journalizePeriodSpecification()
    {
        // Map( [InvoicePeriodQtyRecId, qtyInvoiced], Map([ FromDateTime, ToDateTime ] , List(FINPeriodSpecification)))
        if (!periodSpecificationPacked)
        {
            return;
        }
        
        Map specificationMap = Map::create(periodSpecificationPacked);

        if (!specificationMap.empty())
        {        
            ttsbegin;

            MapEnumerator enumerator = specificationMap.getEnumerator();

            while (enumerator.moveNext())
            {
                // qty is also stamped on periodSpec.lineQty so no need to pass the value here.
                [invoicePeriodQtyRecId, invoiceQty] = enumerator.currentKey();

                Map periodDefinitionMap = enumerator.currentValue();

                this.journalizeSinglePeriodDefinition(periodDefinitionMap);
            }

            ttscommit;
        }
        else
        {
            createPeriodsFromCredit = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodFromCredit</Name>
				<Source><![CDATA[
    protected void createPeriodFromCredit(RefTableId _recordRefTableId, RefRecId _recordRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeSinglePeriodDefinition</Name>
				<Source><![CDATA[
    protected void journalizeSinglePeriodDefinition(Map _periodDefinitionMap)
    {
        MapEnumerator specificationEnumerator = _periodDefinitionMap.getEnumerator();
        
        while (specificationEnumerator.moveNext())
        {
            TransDateTime fromDateTimeInTimeZone;
            TransDateTime toDateTimeInTimeZone;
            TransDateTime fromDateTime;
            TransDateTime toDateTime;
            // DateTimes are in order line site specific timezone
            [fromDateTimeInTimeZone, toDateTimeInTimeZone] = specificationEnumerator.currentKey();
            fromDateTime = DateTimeUtil::removeTimeZoneOffset(fromDateTimeInTimeZone, timezone);
            toDateTime = DateTimeUtil::removeTimeZoneOffset(toDateTimeInTimeZone, timezone);
           
            List specificationList = specificationEnumerator.currentValue();

            ListEnumerator listEnumerator = specificationList.getEnumerator();
        
            while (listEnumerator.moveNext())
            {
                FINPeriodSpecification periodSpecification = listEnumerator.current();

                this.createPeriodFromPeriodSpecification(fromDateTime, toDateTime, periodSpecification);
                this.createPriceComponents(periodSpecification.priceComponentMap);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLine</Name>
				<Source><![CDATA[
    protected abstract void initFromLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodFromPeriodSpecification</Name>
				<Source><![CDATA[
    protected abstract void createPeriodFromPeriodSpecification(TransDateTime _fromDateTime, TransDateTime _toDateTime, FINPeriodSpecification _periodSpecification)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceComponents</Name>
				<Source><![CDATA[
    protected void createPriceComponents(Map _priceComponents)
    {
        if (_priceComponents.elements())
        {
            MapEnumerator priceComponentEumerator = _priceComponents.getEnumerator();

            while (priceComponentEumerator.moveNext())
            {
                FINInvoicePeriodPriceComponent priceComponentType = priceComponentEumerator.currentKey();

                Map pricesMap = priceComponentEumerator.currentValue();
                
                MapEnumerator pricesEnumerator = pricesMap.getEnumerator();

                while(pricesEnumerator.moveNext())
                {
                    real                priceComponentValue = pricesEnumerator.currentKey();
                    INVChargedPeriods   chargedPeriods      = pricesEnumerator.currentValue();

                    this.createPriceComponent(priceComponentType, priceComponentValue, chargedPeriods);
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceComponent</Name>
				<Source><![CDATA[
    protected abstract void createPriceComponent(FINInvoicePeriodPriceComponent _priceComponentType, real _priceComponentValue, INVChargedPeriods _chargedPeriods)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeRentalTotals</Name>
				<Source><![CDATA[
    protected void journalizeRentalTotals()
    {
        FINRentalJournalizer rentalJournalizer = new FINRentalJournalizer();
        rentalJournalizer.unpack(rentalCalcPacked);

        this.updateRentalTotals(rentalJournalizer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalTotals</Name>
				<Source><![CDATA[
    protected abstract void updateRentalTotals(FINRentalJournalizer _rentalJournalizer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCalcResultList</Name>
				<Source><![CDATA[
    protected void journalizeCalcResultList()
    {
        if (calcResultListPacked)
        {
            List calcResultList = List::create(calcResultListPacked);

            if (calcResultList.elements())
            {
                ListEnumerator enumerator = calcResultList.getEnumerator();

                while (enumerator.moveNext())
                {
                    FINInvoiceCalcResult invoiceCalcResult = enumerator.current();

                    this.createCalcResult(invoiceCalcResult);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcResult</Name>
				<Source><![CDATA[
    protected abstract void createCalcResult(FINInvoiceCalcResult _invoiceCalcResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeTransportPrice</Name>
				<Source><![CDATA[
    protected void journalizeTransportPrice()
    {
        if (transportCalcPacked)
        {
            Map transportMap = Map::create(transportCalcPacked);

            if (transportMap.elements())
            {
                MapEnumerator enumerator = transportMap.getEnumerator();

                while (enumerator.moveNext())
                {
                    this.createTransportPrice(enumerator.currentKey(), enumerator.currentValue());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportPrice</Name>
				<Source><![CDATA[
    protected abstract void createTransportPrice(FINRentalAccountType _accountType, container _values)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCredits</Name>
				<Source><![CDATA[
    protected void journalizeCredits()
    {
        if (creditCalcPacked)
        {
            Set creditSet = Set::create(creditCalcPacked);

            if (creditSet.elements())
            {
                SetEnumerator enumerator = creditSet.getEnumerator();

                while (enumerator.moveNext())
                {
                    RefRecId recordRefRecId;
                    RefTableId recordRefTableId;

                    [recordRefTableId, recordRefRecId] = enumerator.current();
                    this.createCredit(recordRefTableId, recordRefRecId);

                    if (createPeriodsFromCredit)
                    {
                        this.createPeriodFromCredit(recordRefTableId, recordRefRecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCredit</Name>
				<Source><![CDATA[
    protected abstract void createCredit(RefTableId _recordRefTableId, RefRecId _recordRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizePriceComponentsAmendments</Name>
				<Source><![CDATA[
    protected void journalizePriceComponentsAmendments()
    {
        if (priceComponentsAmendmentPacked)
        {
            Types conElementType = typeOf(conPeek(priceComponentsAmendmentPacked, conLen(priceComponentsAmendmentPacked)));

            if (conElementType != Types::Record)
            {
                return;
            }

            Set priceComponentsAmendmentsSet = Set::create(priceComponentsAmendmentPacked);

            SetEnumerator enumerator = priceComponentsAmendmentsSet.getEnumerator();

            while (enumerator.moveNext())
            {
                FINTmpInvoicePeriodPrice tmpInvoicePeriodPrice = enumerator.current();

                this.createPriceComponentAmendment(tmpInvoicePeriodPrice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceComponentAmendment</Name>
				<Source><![CDATA[
    protected abstract void createPriceComponentAmendment(FINTmpInvoicePeriodPrice _tmpInvoicePeriodPrice)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCostPrice</Name>
				<Source><![CDATA[
    protected void journalizeCostPrice()
    {
        if(costPriceCalcPacked)
        {
            FINCostPriceJournalizer costPriceJournalizer = new FINCostPriceJournalizer();
            costPriceJournalizer.unpack(costPriceCalcPacked);

            this.createCostPrice(costPriceJournalizer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCostPrice</Name>
				<Source><![CDATA[
    protected abstract void createCostPrice(FINCostPriceJournalizer _costPriceJournalizer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeManualComponent</Name>
				<Source><![CDATA[
    protected void journalizeManualComponent()
    {
        if (manualComponentPacked)
        {
            Set manualComponentSet = Set::create(manualComponentPacked);

            SetEnumerator setEnumerator = manualComponentSet.getEnumerator();

            while (setEnumerator.moveNext())
            {
                container values = setEnumerator.current();

                this.createManualComponent(values);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createManualComponent</Name>
				<Source><![CDATA[
    protected abstract void createManualComponent(container _values)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeProjHour</Name>
				<Source><![CDATA[
    protected void journalizeProjHour()
    {
        if (projHourPacked)
        {
            Set projHourSet = Set::create(projHourPacked);
            SetEnumerator setEnumerator = projHourSet.getEnumerator();

            while (setEnumerator.moveNext())
            {
                this.createProjHour(setEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjHour</Name>
				<Source><![CDATA[
    protected abstract void createProjHour(RefRecId _projEmplTransRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    protected abstract void insertRecordList()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>