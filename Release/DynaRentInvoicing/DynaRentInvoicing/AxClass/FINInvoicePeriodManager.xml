<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoicePeriodManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FINInvoicePeriodManager
{
    INVInvoicePeriodHost    invoicePeriodHost;
    anytype                 amendmentOldValue;
    RORAmendmentReasonText  amendmentReasonText;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public server static FINInvoicePeriodManager construct(FINInvoicePeriodAction _action, INVInvoicePeriodHost _invoicePeriodHost)
    {
        FINInvoicePeriodManagerAttribute periodManagerAttr = new FINInvoicePeriodManagerAttribute(_action);
        FINInvoicePeriodManager instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(FINInvoicePeriodManager), periodManagerAttr) as FINInvoicePeriodManager;

        if (!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // Call more parameters outside of constructor because they are action specific.
        instance.parmInvoicePeriodHost(_invoicePeriodHost);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoicePeriodHost</Name>
				<Source><![CDATA[
    public INVInvoicePeriodHost parmInvoicePeriodHost(INVInvoicePeriodHost _invoicePeriodHost = invoicePeriodHost)
    {
        invoicePeriodHost = _invoicePeriodHost;

        return invoicePeriodHost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmendmentOldValue</Name>
				<Source><![CDATA[
    public anytype parmAmendmentOldValue(anytype _amendmentOldValue = amendmentOldValue)
    {
        amendmentOldValue = _amendmentOldValue;

        return amendmentOldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmendmentReasonText</Name>
				<Source><![CDATA[
    public anytype parmAmendmentReasonText(anytype _amendmentReasonText = amendmentReasonText)
    {
        amendmentReasonText = _amendmentReasonText;

        return amendmentReasonText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicatePeriods</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInsertMethodInLoop", "Cannot be refactored without altering functionality of method")]
    public server static Map duplicatePeriods(Common _hostBufferFrom, Common _hostBufferTo)
    {
        Map expectedPeriodLinkMap = new Map(Types::Int64, Types::Int64);
        FINInvoicePeriodQtyPhysical invoicePeriodPhysical;
        FINInvoicePeriodQtyFinancial invoicePeriodFinancial;
        FINInvoicePeriodQtyPhysical invoicePeriodPhysicalNew;
        FINInvoicePeriodQtyFinancial invoicePeriodFinancialNew;

        ttsbegin;

        while select invoicePeriodPhysical
        order by RecId asc
        where invoicePeriodPhysical.RefTableId == _hostBufferFrom.TableId
        &&    invoicePeriodPhysical.RefRecId == _hostBufferFrom.RecId
            join invoicePeriodFinancial
            where invoicePeriodFinancial.InvPeriodQtyPhysicalRecId == invoicePeriodPhysical.RecId
        {
            if (!expectedPeriodLinkMap.exists(invoicePeriodPhysical.RecId))
            {
                invoicePeriodPhysicalNew.data(invoicePeriodPhysical);
                invoicePeriodPhysicalNew.RefTableId = _hostBufferTo.TableId;
                invoicePeriodPhysicalNew.RefRecId = _hostBufferTo.RecId;
                invoicePeriodPhysicalNew.insert();
            
                expectedPeriodLinkMap.insert(invoicePeriodPhysical.RecId, invoicePeriodPhysicalNew.RecId);
            }

            invoicePeriodFinancialNew.data(invoicePeriodFinancial);
            invoicePeriodFinancialNew.InvPeriodQtyPhysicalRecId = expectedPeriodLinkMap.lookup(invoicePeriodPhysical.RecId);
            invoicePeriodFinancialNew.insert();
        }
        
        ttscommit;

        return expectedPeriodLinkMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>