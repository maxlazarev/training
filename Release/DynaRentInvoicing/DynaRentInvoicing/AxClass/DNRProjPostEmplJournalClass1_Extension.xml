<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjPostEmplJournalClass1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjPostEmplJournal))]
public final class DNRProjPostEmplJournalClass1_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projTransCreate_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProjPostEmplJournal), methodStr(ProjPostEmplJournal, projTransCreate))]
    public static void projTransCreate_post(XppPrePostArgs _args)
    {
        ProjPostEmplJournal hostObject = _args.getThis();
        ProjEmplTrans projEmplTrans = ProjEmplTrans::find(hostObject.parmTransIdNew());

        ProjPostEmplJournal::FINOpenInvoicePeriod(projEmplTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINOpenInvoicePeriod</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public static void FINOpenInvoicePeriod(ProjEmplTrans _projEmplTrans)
    {
        if (_projEmplTrans.ProjId && _projEmplTrans.INVRefTableId == tableNum(SalesLine))
        {
            SalesLine salesLine = salesLine::findRecId(_projEmplTrans.INVRefRecId);
    
            if (salesLine
            &&  salesLine.FINisCalculationEngineEnabled(FINRentalAccountType::ProjectHours)
            &&  ProjCategory::find(salesLine.ProjCategoryId).WPPWorkType)
            {
                TransDateTime fromDateTime = DateTimeUtil::newDateTime(_projEmplTrans.TransDate, _projEmplTrans.FromTime, DateTimeUtil::getUserPreferredTimeZone());
                TransDateTime toDateTime = DateTimeUtil::newDateTime(_projEmplTrans.TransDate, _projEmplTrans.ToTime, DateTimeUtil::getUserPreferredTimeZone());
                FINInvoicePeriodQtyFinancial invoicePeriodQtyFinancial;
                FINInvoicePeriodQtyPhysical invoicePeriodQtyPhysical;
                RORRentalDateTimes rentalDateTimes = salesLine.RORRentalDateTimesHost::RentalDateTimes();
                RORRentalDateTime onRentDateTime = rentalDateTimes.getOnRentDateTime();
                RORRentalDateTime offRentDateTime = rentalDateTimes.getOffRentDateTime();

                ttsBegin;

                if (toDateTime <= onRentDateTime)
                {
                    // update first period
                    select forupdate invoicePeriodQtyFinancial
                    order by PeriodStartDateTime asc
                    where invoicePeriodQtyFinancial.InvoiceId
                        exists join invoicePeriodQtyPhysical
                        where invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId
                        &&    invoicePeriodQtyPhysical.RefTableId == salesLine.TableId
                        &&    invoicePeriodQtyPhysical.RefRecId == salesLine.RecId;

                    if (invoicePeriodQtyFinancial)
                    {
                        invoicePeriodQtyFinancial.InvoiceId = '';
                        invoicePeriodQtyFinancial.QtyInvoiced = 0;
                        invoicePeriodQtyFinancial.NumOfCalendarPeriods = 0;
                        invoicePeriodQtyFinancial.NumOfChargeablePeriods = 0;
                        invoicePeriodQtyFinancial.LineAmount = 0;
                        invoicePeriodQtyFinancial.DiscAmount = 0;
                        invoicePeriodQtyFinancial.update();
                    }
                }
                else if (fromDateTime >= offRentDateTime)
                {
                    // update last period
                    select forupdate invoicePeriodQtyFinancial
                    order by PeriodStartDateTime desc
                    where invoicePeriodQtyFinancial.InvoiceId
                        exists join invoicePeriodQtyPhysical
                        where invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId
                        &&    invoicePeriodQtyPhysical.RefTableId == salesLine.TableId
                        &&    invoicePeriodQtyPhysical.RefRecId == salesLine.RecId;

                    if (invoicePeriodQtyFinancial)
                    {
                        invoicePeriodQtyFinancial.InvoiceId = '';
                        invoicePeriodQtyFinancial.QtyInvoiced = 0;
                        invoicePeriodQtyFinancial.NumOfCalendarPeriods = 0;
                        invoicePeriodQtyFinancial.NumOfChargeablePeriods = 0;
                        invoicePeriodQtyFinancial.LineAmount = 0;
                        invoicePeriodQtyFinancial.DiscAmount = 0;
                        invoicePeriodQtyFinancial.update();
                    }
                }
                else
                {
                    update_recordset invoicePeriodQtyFinancial
                    setting InvoiceId = '',  QtyInvoiced = 0, NumOfCalendarPeriods = 0, NumOfChargeablePeriods = 0, LineAmount = 0, DiscAmount = 0
                    where invoicePeriodQtyFinancial.InvoiceId
                    &&    invoicePeriodQtyFinancial.PeriodEndDateTime > fromDateTime
                    &&    invoicePeriodQtyFinancial.PeriodStartDateTime < toDateTime
                        exists join invoicePeriodQtyPhysical
                        where invoicePeriodQtyPhysical.RecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId
                        &&    invoicePeriodQtyPhysical.RefTableId == salesLine.TableId
                        &&    invoicePeriodQtyPhysical.RefRecId == salesLine.RecId;
                }
                
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>