<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesFormLetterParmDataClass1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormLetterParmData))]
public final class DNRSalesFormLetterParmDataClass1_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    protected Common createParmUpdate()
    {
        SalesParmUpdate ret = next createParmUpdate() as SalesParmUpdate;

        this.FINSetInvoicingOptions(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    public void  reSelect()
    {
        next reSelect();

        this.FINReSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine</Name>
				<Source><![CDATA[
    protected void insertParmLine(Common _parmLine)
    {
        this.FINInsertParmLine(_parmLine);

        next insertParmLine(_parmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmTable</Name>
				<Source><![CDATA[
    protected void insertParmTable(Common _parmTable)
    {
        this.FINInsertParmTable(_parmTable);

        next insertParmTable(_parmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSetInvoicingOptions</Name>
				<Source><![CDATA[
    // extension methods
    private SalesParmUpdate FINSetInvoicingOptions(SalesParmUpdate _salesParmUpdate)
    {
        SalesParmUpdate salesParmUpdate = _salesParmUpdate;
        FormLetterContract formLetterContract = this.INVParmFormLetterContract();
            
        if (isConfigurationkeyEnabled(configurationKeyNum(INVInvoicePeriod))
        && formLetterContract is SalesFormLetterContract)
        {
            SalesFormLetterContract salesFormLetterContractLocal = formLetterContract;
            SalesParmUpdate contractSalesParmUpdate = salesFormLetterContractLocal.parmParmUpdate() as  SalesParmUpdate;

            if (!this.FINInitFromProforma(salesParmUpdate))
            {
                if (contractSalesParmUpdate.INVCalculationDateTime)
                {
                    salesParmUpdate.INVCalculationDateTime = contractSalesParmUpdate.INVCalculationDateTime;
                    salesParmUpdate.INVIncludeUninvoiced = contractSalesParmUpdate.INVIncludeUninvoiced;
                    salesParmUpdate.INVIncludeCredits = contractSalesParmUpdate.INVIncludeCredits;
                    salesParmUpdate.FINForceInvoiceUntilPoint = contractSalesParmUpdate.FINForceInvoiceUntilPoint;
                    salesParmUpdate.FINIsCreditPreview = contractSalesParmUpdate.FINIsCreditPreview;
                }

                str callerMenuItemName = formLetterContract.DNRParmCallerMenuItem();
                // When called for rental totals there is no menu item used but also no possibility to set invoicing flags on parmUpdate record
                if (!callerMenuItemName)
                {
                    salesParmUpdate.INVIncludeUninvoiced = NoYes::Yes;
                    salesParmUpdate.INVIncludeCredits = NoYes::Yes;
                }
            }
        }

        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromProforma</Name>
				<Source><![CDATA[
    private boolean FINInitFromProforma(SalesParmUpdate _salesParmUpdate)
    {
        boolean ret = false;
        SalesFormLetterContract salesFormLetterContractLocal = this.INVParmFormLetterContract();

        if (salesFormLetterContractLocal.FINParmPostInvoiceProposal() && salesFormLetterContractLocal.FINParmProformaInvoiceJourRecId())
        {
            // Try to fetch values from the original proforma posting
            SalesParmUpdate salesParmUpdateProforma;
            FINCustInvoiceJourProForma custInvoiceJourProforma;
            RecId proformaJourRecId = salesFormLetterContractLocal.FINParmProformaInvoiceJourRecId();

            select firstonly salesParmUpdateProforma
                join custInvoiceJourProforma
                where custInvoiceJourProforma.RecId == proformaJourRecId
                &&    custInvoiceJourProforma.ParmId == salesParmUpdateProforma.ParmId;

            if (salesParmUpdateProforma)
            {
                SalesParmUpdate salesParmUpdate = _salesParmUpdate;
                buf2Buf(salesParmUpdateProforma, salesParmUpdate);

                salesParmUpdate.ParmId = this.parmId();
                salesParmUpdate.Proforma = this.parmProforma();
                salesParmUpdate.FINProforma = NoYes::No;
                salesParmUpdate.lateSelection = NoYes::No;

                this.FINInitChooseLinesQuery(custInvoiceJourProforma);
                
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitChooseLinesQuery</Name>
				<Source><![CDATA[
    private void FINInitChooseLinesQuery(FINCustInvoiceJourProForma _custInvoiceJourProforma)
    {
        this.initLinesQuery();

        FINCustInvoiceTransProForma custInvoiceTransProforma;

        chooseLines.query().dataSourceTable(tableNum(SalesTable)).clearRanges();
        chooseLines.query().dataSourceTable(tableNum(SalesLine)).clearRanges();

        while select custInvoiceTransProforma
        where custInvoiceTransProforma.SalesId              == _custInvoiceJourProforma.SalesId
        && custInvoiceTransProforma.InvoiceId               == _custInvoiceJourProforma.InvoiceId
        && custInvoiceTransProforma.InvoiceDate             == _custInvoiceJourProforma.InvoiceDate
        && custInvoiceTransProforma.numberSequenceGroup     == _custInvoiceJourProforma.numberSequenceGroup
        && custInvoiceTransProforma.ProFormaInvoiceVersion  == _custInvoiceJourProforma.ProFormaInvoiceVersion
        {
            chooseLines.query().dataSourceTable(tableNum(SalesLine)).addRange(fieldNum(SalesLine, InventTransId)).value(SysQuery::value(custInvoiceTransProforma.InventTransId));
        }

        skipInitChooseLinesQuery = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINReSelect</Name>
				<Source><![CDATA[
    private void FINReSelect()
    {
        if (this is SalesFormletterParmDataInvoice)
        {
            SalesFormletterParmDataInvoice salesFormletterParmDataInvoice = this;
            Common common = salesFormletterParmDataInvoice.parmSourceTable();
            
            if (!common && salesFormletterParmDataInvoice.FINSalesTableOrig())
            {
                common = salesFormletterParmDataInvoice.FINSalesTableOrig();
            }

            SalesTable localSalesTable = common as SalesTable;

            if (localSalesTable.SalesType == SalesType::RORRental)
            {
                SalesParmTable salesParmTable;
                ParmId parmId = salesFormletterParmDataInvoice.parmParmId();
                
                select firstonly RecId from salesParmTable
                where salesParmTable.ParmId == parmId;

                if (!parmId || !salesParmTable)
                {
                    Set emptyHeaderOrderIdSet = salesFormletterParmDataInvoice.FINgetEmptyHeaderOrderIdSet();

                    if (emptyHeaderOrderIdSet)
                    {
                        SetEnumerator enumerator = emptyHeaderOrderIdSet.getEnumerator();

                        while (enumerator.moveNext())
                        {
                            localSalesTable = SalesTable::find(enumerator.current());

                            if (localSalesTable)
                            {
                                salesFormletterParmDataInvoice.FINCreateParmTable(localSalesTable);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInsertParmLine</Name>
				<Source><![CDATA[
    private void FINInsertParmLine(Common _parmLine)
    {
        if (this is SalesFormletterParmDataRORReturnNote)
        {
            SalesFormletterParmDataRORReturnNote salesFormletterParmDataRORReturnNote = this;
            SalesParmLine salesParmLine = _parmLine;
            SalesLine salesLine = SalesLine::findInventTransId(salesParmLine.InventTransId);

            if (salesLine)
            {
                salesParmLine.INVSetInvoiceDateTime(null, salesLine, true, DateTimeUtil::minValue(), salesFormletterParmDataRORReturnNote);
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInsertParmTable</Name>
				<Source><![CDATA[
    private void FINInsertParmTable(Common _parmTable)
    {
        if (this is SalesFormletterParmDataRORReturnNote)
        {
            SalesParmTable salesParmTable = _parmTable;

            if (!salesParmTable.Transdate)
            {
                SalesFormletterParmDataRORReturnNote salesFormletterParmDataRORReturnNote = this;
                salesFormletterParmDataRORReturnNote.BOBSetTransDateTime(salesParmTable, salesParmTable.salesTable(), null);
            }
        }   
        else if (this is SalesFormletterParmDataInvoice)
        {
            this.FINInitParmTableFromProforma(_parmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitParmTableFromProforma</Name>
				<Source><![CDATA[
    private void FINInitParmTableFromProforma(SalesParmTable _salesParmTable)
    {
        SalesFormLetterContract salesFormLetterContractLocal = this.INVParmFormLetterContract();
        
        if (salesFormLetterContractLocal.FINParmPostInvoiceProposal() && salesFormLetterContractLocal.FINParmProformaInvoiceJourRecId())
        {
            // Try to fetch values from the original proforma posting
            SalesParmTable salesParmTableProforma;
            FINCustInvoiceJourProForma custInvoiceJourProforma;
            RecId proformaJourRecId = salesFormLetterContractLocal.FINParmProformaInvoiceJourRecId();
            
            select firstonly Transdate, BOBTransTime from salesParmTableProforma
            where salesParmTableProforma.SalesId == _salesParmTable.SalesId
                exists join custInvoiceJourProforma
                where custInvoiceJourProforma.RecId == proformaJourRecId
                &&    custInvoiceJourProforma.ParmId == salesParmTableProforma.ParmId;

            if (salesParmTableProforma)
            {
                _salesParmTable.BOBTransTime = salesParmTableProforma.BOBTransTime;
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINevent_FINmustSetCalculationDateTime_Post</Name>
				<Source><![CDATA[
    // Event handler methods
    
    [PostHandlerFor(classStr(DNRSalesFormletterParmDataClass_Extension), methodStr(DNRSalesFormletterParmDataClass_Extension, FINmustSetCalculationDateTime))]
    public static void FINevent_FINmustSetCalculationDateTime_Post(XppPrePostArgs _args)
    {
        SalesFormLetterContract salesFormLetterContractLocal = _args.getArg('_formLetterContract');
        SalesParmUpdate salesParmUpdate = _args.getArg('_salesParmUpdate');
        SalesParmUpdate contractSalesParmUpdate = salesFormLetterContractLocal.parmParmUpdate() as  SalesParmUpdate;
        boolean ret = _args.getReturnValue();

        if (ret
        && ((salesParmUpdate.FINIsCreditPreview || contractSalesParmUpdate.FINIsCreditPreview)
           || (salesParmUpdate.FINSkipSetCalculationDateTime || contractSalesParmUpdate.FINSkipSetCalculationDateTime)))
        {
            // For credit preview prevent overwriting credit specific calculationDateTime
            _args.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINevent_FINmustSetInvoiceDateTimes_Post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(DNRSalesFormletterParmDataClass_Extension), methodStr(DNRSalesFormletterParmDataClass_Extension, FINmustSetInvoiceDateTimes))]
    public static void FINevent_FINmustSetInvoiceDateTimes_Post(XppPrePostArgs _args)
    {
        SalesFormLetterContract salesFormLetterContractLocal = _args.getArg('_formLetterContract');
        boolean ret = _args.getReturnValue();

        if (ret 
        &&  salesFormLetterContractLocal.FINParmPostInvoiceProposal() 
        &&  salesFormLetterContractLocal.FINParmProformaInvoiceJourRecId())
        {
            // For rental invoice proposals, prevent overwriting the calculation and invoice datetimes
            _args.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>