<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINTransportPriceJournalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINTransportPriceJournalizer implements FINIGenericJournalizer
{
    Map transportAmountMap = new Map(Types::Enum, Types::Container); // [ FINRentalAccountType::DeliveryTransport, [deliveryBaseAmount, deliveryDiscount, priceTier, deliveryAmount] ]
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResult</Name>
				<Source><![CDATA[
    public void addResult(anytype _result)
    {
        container result = _result;
        FINRentalAccountType accountType = conPeek(result, 1);
        container resultDetails = conPeek(result, 2);
        
        transportAmountMap.insert(accountType, resultDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryAmount</Name>
				<Source><![CDATA[
    public AmountCur getDeliveryAmount()
    {
        AmountCur ret;

        if (transportAmountMap.exists(FINRentalAccountType::DeliveryTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::DeliveryTransport);
            ret = conPeek(resultDetails, 4);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnAmount</Name>
				<Source><![CDATA[
    public AmountCur getReturnAmount()
    {
        AmountCur ret;

        if (transportAmountMap.exists(FINRentalAccountType::ReturnTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::ReturnTransport);
            ret = conPeek(resultDetails, 4);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryBaseAmount</Name>
				<Source><![CDATA[
    public AmountCur getDeliveryBaseAmount()
    {
        AmountCur ret;

        if (transportAmountMap.exists(FINRentalAccountType::DeliveryTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::DeliveryTransport);
            ret = conPeek(resultDetails, 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnBaseAmount</Name>
				<Source><![CDATA[
    public AmountCur getReturnBaseAmount()
    {
        AmountCur ret;

        if (transportAmountMap.exists(FINRentalAccountType::ReturnTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::ReturnTransport);
            ret = conPeek(resultDetails, 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDiscountAmount</Name>
				<Source><![CDATA[
    public AmountCur getDeliveryDiscountAmount()
    {
        AmountCur ret;

        if (transportAmountMap.exists(FINRentalAccountType::DeliveryTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::DeliveryTransport);
            ret = conPeek(resultDetails, 2);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnDiscountAmount</Name>
				<Source><![CDATA[
    public AmountCur getReturnDiscountAmount()
    {
        AmountCur ret;

        if (transportAmountMap.exists(FINRentalAccountType::ReturnTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::ReturnTransport);
            ret = conPeek(resultDetails, 2);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryTierMultiplier</Name>
				<Source><![CDATA[
    public INVRateMultiplier getDeliveryTierMultiplier()
    {
        INVRateMultiplier ret;

        if (transportAmountMap.exists(FINRentalAccountType::DeliveryTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::DeliveryTransport);
            ret = conPeek(resultDetails, 3);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnTierMultiplier</Name>
				<Source><![CDATA[
    public INVRateMultiplier getReturnTierMultiplier()
    {
        INVRateMultiplier ret;

        if (transportAmountMap.exists(FINRentalAccountType::ReturnTransport))
        {
            container resultDetails = transportAmountMap.lookup(FINRentalAccountType::ReturnTransport);
            ret = conPeek(resultDetails, 3);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return transportAmountMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedValues)
    {
        transportAmountMap = Map::create(_packedValues);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValues</Name>
				<Source><![CDATA[
    public Set getChargedValues()
    {
        MapEnumerator enumerator = transportAmountMap.getEnumerator();
        Set ret = new Set(Types::Container);
        Counter idx;

        while (enumerator.moveNext())
        {
            FINRentalAccountType accountType = enumerator.currentKey();
            container resultDetails = enumerator.currentValue();
            AmountCur amount = conPeek(resultDetails, 4);
            Description description = enum2Str(accountType);

            if (amount)
            {
                boolean hasCreditAccountType; // Default is false
                idx += 1;
                ret.add([accountType, amount, description, hasCreditAccountType, 0, idx]);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>