<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINSalesConfirmJournalPostCls_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesConfirmJournalPost))]
public final class FINSalesConfirmJournalPostCls_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postJournalPost</Name>
				<Source><![CDATA[
    public void postJournalPost()
    {
        next postJournalPost();
    
        this.FINJournalizeTotals();

        this.FINUnloadContainerData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINJournalizeTotals</Name>
				<Source><![CDATA[
    // Extension methods
    private void FINJournalizeTotals()
    {                    
        RORParameters parameters = RORParameters::find();

        if (parameters.FINSkipTotalJournalizationCalcOnConfirmation)
        {
            return;
        }

        if (salesTable.SalesType == SalesType::RORRental
        && FINInvoiceServiceController_RentalInvoice::mustJournalizeRentalTotalsDuringConfirmation())
        {
            FINSalesTotalsDisposableContext context = FINSalesTotalsDisposableContext::current();

            if (context)
            {
                FINSalesTotals finSalesTotals = context.parmSalesTotals();

                if (finSalesTotals)
                {
                    ParmId parmId = finSalesTotals.getParmTable().ParmId;

                    if (!parmId)
                    {
                        parmId = finSalesTotals.estimationParmId;
                    }

                    ttsbegin;

                    CustConfirmTrans            custConfirmTransLoc;
                    SalesLine                   salesLineLoc;
                    FINInvoiceCalculatorParm    invoiceCalculatorParmLoc;
                    FINCustConfirmTrans         finCustConfirmTrans;

                    insert_recordset finCustConfirmTrans(CustConfirmTransRecId, RAGContractLinePacked, InvoiceCalcResultListPacked, ProjHoursCalcPacked, ManualCalcPacked, ConsumptionCalcPacked,
                                                         CostPriceCalcPacked, RentalCalcPacked, CreditCalcPacked, TransportCalcPacked, PeriodSpecificationPacked, InvoiceAmount, MarkupAmount, Timezone)
                    select RecId from custConfirmTransLoc
                    where custConfirmTransLoc.OrigSalesId == salesTable.SalesId
                    &&    custConfirmTransLoc.SalesId == custConfirmJour.SalesId
                    &&    custConfirmTransLoc.ConfirmId == custConfirmJour.ConfirmId
                    &&    custConfirmTransLoc.ConfirmDate == custConfirmJour.ConfirmDate
                        join  salesLineLoc
                        where salesLineLoc.SalesId == custConfirmTransLoc.OrigSalesId
                        &&    salesLineLoc.InventTransId == custConfirmTransLoc.InventTransId
                        &&    salesLineLoc.RORTradeType != RORTradeType::SalesPurch
                            join RAGContractLinePacked, InvoiceCalcResultListPacked, ProjHoursCalcPacked, ManualCalcPacked, ConsumptionCalcPacked, CostPriceCalcPacked,
                            RentalCalcPacked, CreditCalcPacked, TransportCalcPacked, PeriodSpecificationPacked, InvoiceAmount, MarkupAmount, Timezone
                            from  invoiceCalculatorParmLoc
                            where invoiceCalculatorParmLoc.ParmId == parmId
                            &&    invoiceCalculatorParmLoc.OrderLineTableId == salesLineLoc.TableId
                            &&    invoiceCalculatorParmLoc.OrderLineRecId == salesLineLoc.RecId;

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUnloadContainerData</Name>
				<Source><![CDATA[
    private void FINUnloadContainerData()
    {
        FINCustConfirmTrans finCustConfirmTrans;
        CustConfirmTrans    custConfirmTrans;

        ttsbegin;

        while select forupdate finCustConfirmTrans
            join TableId from custConfirmTrans 
            where custConfirmTrans.RecId == finCustConfirmTrans.CustConfirmTransRecId
            &&    custConfirmTrans.OrigSalesId == salesTable.SalesId
            &&    custConfirmTrans.SalesId == custConfirmJour.SalesId
            &&    custConfirmTrans.ConfirmId == custConfirmJour.ConfirmId
            &&    custConfirmTrans.ConfirmDate == custConfirmJour.ConfirmDate
        {
            finCustConfirmTrans.FINRentalInvoiceLinePacked::unloadData();
            finCustConfirmTrans.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>