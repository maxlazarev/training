<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLedgerVoucherTransObjectClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerVoucherTransObject))]
final class DNRLedgerVoucherTransObjectClass_Extension
{
    private boolean             forcePostingType;
    private LedgerPostingType   postingTypeFromTransactionType;
    private TransDate           accountingDateDistributed;
    private boolean             skipDistribution;

    #DEFINE.CurrentVersion(10)
    #LOCALMACRO.CurrentList
        accountingDateDistributed,
        generalJournalAccountEntry.FINAnalyticalDate        
    ENDMACRO

    // chain-of-command wrapper methods
       
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerPostingTransaction</Name>
				<Source><![CDATA[
    public LedgerPostingTransactionTmp getLedgerPostingTransaction()
    {
        LedgerPostingTransactionTmp ledgerPostingTransaction = next getLedgerPostingTransaction();
        
        ledgerPostingTransaction.FINAccountingDate      = this.FINParmAccountingDateDistributed();
        ledgerPostingTransaction.FINAnalyticalDate      = this.FINParmAnalyticalDateDistributed();
        ledgerPostingTransaction.FINSkipDistribution    = this.FINparmSkipDistribution();

        return ledgerPostingTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerPostingTransaction</Name>
				<Source><![CDATA[
    public void initFromLedgerPostingTransaction(
        LedgerPostingTransactionTmp _ledgerPostingTransaction,
        LedgerPostingTransactionProjectTmp _projectPostingTransaction)
    {
        next initFromLedgerPostingTransaction(_ledgerPostingTransaction, _projectPostingTransaction);

        this.FINParmAccountingDateDistributed(_ledgerPostingTransaction.FINAccountingDate);
        this.FINParmAnalyticalDateDistributed(_ledgerPostingTransaction.FINAnalyticalDate);
        this.FINparmSkipDistribution(_ledgerPostingTransaction.FINSkipDistribution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransLedgerJournal_post</Name>
				<Source><![CDATA[
    // event handler methods
    [PostHandlerFor(classStr(LedgerVoucherTransObject), staticmethodStr(LedgerVoucherTransObject, newTransLedgerJournal))]
    public static void newTransLedgerJournal_post(XppPrePostArgs _args)
    {
        LedgerJournalTrans              ledgerJournalTrans = _args.getArg('_ledgerJournalTrans');
        LedgerVoucherTransObject        ledgerTransObject = _args.getReturnValue();
        LedgerPostingType               ledgerPostingType;
        
        ledgerPostingType = LedgerVoucherTransObject::DNRTransType2PostingType(ledgerJournalTrans.TransactionType);
        if (ledgerPostingType != LedgerPostingType::LedgerJournal)
        {
            ledgerTransObject.DNRParmForcePostingType(true);
            ledgerTransObject.DNRParmPostingTypeFromTransactionType(ledgerPostingType);
        }

        ledgerTransObject.FINParmAnalyticalDateDistributed(ledgerJournalTrans.FINAnalyticalDate);
        _args.setReturnValue(ledgerTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINParmAccountingDateDistributed</Name>
				<Source><![CDATA[
    // extension methods
    public TransDate FINParmAccountingDateDistributed(TransDate _accountingDateDistributed = accountingDateDistributed)
    {
        if (!prmisDefault(_accountingDateDistributed))
        {
            accountingDateDistributed = _accountingDateDistributed;
        }
    
        return accountingDateDistributed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINParmAnalyticalDateDistributed</Name>
				<Source><![CDATA[
    public TransDate FINParmAnalyticalDateDistributed(TransDate _analyticalDateDistributed = generalJournalAccountEntry.FINAnalyticalDate) 
    {
        if (!prmisDefault(_analyticalDateDistributed))
        {
            generalJournalAccountEntry.FINAnalyticalDate = _analyticalDateDistributed;
        }
    
        return generalJournalAccountEntry.FINAnalyticalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRDocumentSourceLine</Name>
				<Source><![CDATA[
    public Common DNRDocumentSourceLine()
    {
        Common  common;
    
        switch (this.parmTaxParentReferenceTableId())
        {
            case tableNum(CustInvoiceTrans) :
                CustInvoiceTrans    custInvoiceTrans = CustInvoiceTrans::findRecId(this.parmTaxParentReferenceRecId());
                common = custInvoiceTrans.salesLine();
                break;

            case tableNum(VendInvoiceTrans) :
                VendInvoiceTrans    vendInvoiceTrans = VendInvoiceTrans::findRecId(this.parmTaxParentReferenceRecId());
                common = vendInvoiceTrans.purchLine();
                break;

            case tableNum(MarkupTrans) :
                MarkupTrans    markupTrans = MarkupTrans::findRecId(this.parmTaxParentReferenceRecId());
                common = markupTrans;
                break;

            case tableNum(ProjInvoiceEmpl):
                ProjInvoiceEmpl projInvoiceEmpl = ProjInvoiceEmpl::findRecId(this.parmTaxParentReferenceRecId());
                common = projInvoiceEmpl;
                break;

            default:
                common = this.FINgetProjJournalTransCost();
                break;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINgetProjJournalTransCost</Name>
				<Source><![CDATA[
    protected ProjJournalTrans FINgetProjJournalTransCost()
    {
        ProjJournalTrans projJournalTrans;

        if (generalJournalAccountEntry.PostingType != LedgerPostingType::ProjCost)
        {
            return ProjJournalTrans;
        }

        if (this.parmProjLedger())
        {
            ProjLedger projLedger = this.parmProjLedger();
            SalesLine salesLine;

            select firstonly projJournalTrans
            where projJournalTrans.TransId          == projLedger.parmProjTransId()
            &&    projJournalTrans.FINExtraItemId   == ""
                join TableId from salesLine
                where  salesLine.TableId        == projJournalTrans.INVRefTableId
                    && salesLine.RecId          == projJournalTrans.INVRefRecId
                    && salesLine.RORTradeType   != RORTradeType::SalesPurch;
        }

        return projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId DNRInvoiceId()
    {
        InvoiceId  invoiceId;
        TableId custVendTransTableId = this.parmTaxParentReferenceTableId();
        RecId custVendTransRecId = this.parmTaxParentReferenceRecId();

        if (custVendTransTableId == tableNum(MarkupTrans))
        {
            MarkupTrans markupTrans = MarkupTrans::findRecId(this.parmTaxParentReferenceRecId());
            custVendTransTableId = markupTrans.TransTableId;
            custVendTransRecId = markupTrans.TransRecId;
        }

        switch (custVendTransTableId)
        {
            case tableNum(CustInvoiceTrans) :
                CustInvoiceTrans    custInvoiceTrans = CustInvoiceTrans::findRecId(custVendTransRecId);
                invoiceId = custInvoiceTrans.InvoiceId;
                break;

            case tableNum(VendInvoiceTrans) :
                VendInvoiceTrans    vendInvoiceTrans = VendInvoiceTrans::findRecId(custVendTransRecId);
                invoiceId = vendInvoiceTrans.InvoiceId;
                break;

            case tableNum(ProjInvoiceEmpl):
                ProjInvoiceEmpl projInvoiceEmpl = ProjInvoiceEmpl::findRecId(this.parmTaxParentReferenceRecId());
                ProjJournalTrans projJournalTrans;

                select firstonly JournalId from projJournalTrans
                where projJournalTrans.TransId == projInvoiceEmpl.TransId;

                invoiceId = projJournalTrans.JournalId;
                break;

            default:
                ProjJournalTrans projJournalTransCost = this.FINgetProjJournalTransCost();
                invoiceId = projJournalTransCost.JournalId;
                break;
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmForcePostingType</Name>
				<Source><![CDATA[
    public boolean DNRParmForcePostingType(boolean _forcePostingType = forcePostingType)
    {
        forcePostingType = _forcePostingType;
        return forcePostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmPostingTypeFromTransactionType</Name>
				<Source><![CDATA[
    public LedgerPostingType DNRParmPostingTypeFromTransactionType(LedgerPostingType _postingTypeFromTransactionType = postingTypeFromTransactionType)
    {
        postingTypeFromTransactionType = _postingTypeFromTransactionType;
            
        if (!prmIsDefault(_postingTypeFromTransactionType) && forcePostingType)
        {
            GeneralJournalAccountEntry generalJournalAccountEntryLocal;

            generalJournalAccountEntryLocal = this.parmGeneralJournalAccountEntry();
            generalJournalAccountEntryLocal.PostingType = _postingTypeFromTransactionType;
            this.parmGeneralJournalAccountEntry(generalJournalAccountEntryLocal);
            this.parmPostingType(_postingTypeFromTransactionType);
        }

        return postingTypeFromTransactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINparmSkipDistribution</Name>
				<Source><![CDATA[
    public boolean FINparmSkipDistribution(boolean _skipDistribution = skipDistribution)
    {
        skipDistribution = _skipDistribution;
        return skipDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRSetFINAnalyticalDate</Name>
				<Source><![CDATA[
    public void DNRSetFINAnalyticalDate(FINAnalyticalDate _analyticalDate)
    {
        GeneralJournalAccountEntry generalJournalAccountEntryLocal;

        generalJournalAccountEntryLocal = this.parmGeneralJournalAccountEntry();
        generalJournalAccountEntryLocal.FINAnalyticalDate = _analyticalDate;
        this.parmGeneralJournalAccountEntry(generalJournalAccountEntryLocal);
        this.FINParmAnalyticalDateDistributed(_analyticalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRTransType2PostingType</Name>
				<Source><![CDATA[
    public static LedgerPostingType DNRTransType2PostingType(LedgerTransType _transType)
    {
        LedgerPostingType   ret;

        switch (_transType)
        {
            case LedgerTransType::FINMDA :
                ret = LedgerPostingType::FINMDA;
                break;
            case LedgerTransType::FINMDAReversal :
                ret = LedgerPostingType::FINMDAReversal;
                break;
            case LedgerTransType::FINPeriodDistribution :
                ret = LedgerPostingType::FINPeriodDistribution;
                break;

            default:
                ret = LedgerPostingType::LedgerJournal;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>