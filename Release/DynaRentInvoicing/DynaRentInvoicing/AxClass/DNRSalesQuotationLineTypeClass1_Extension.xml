<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationLineTypeClass1_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationLineType))]
public final class DNRSalesQuotationLineTypeClass1_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable, boolean _searchPrice)
    {
        next initFromInventTable(_inventTable, _searchPrice);
        
        this.FINInitFromInventTable(salesQuotationLine, _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesQuotationLineType_Post_inserted</Name>
				<Source><![CDATA[
    // Event handler methods

    [PostHandlerFor(classStr(SalesQuotationLineType), methodStr(SalesQuotationLineType, inserted))]
    public static void SalesQuotationLineType_Post_inserted(XppPrePostArgs _eventArgs)
    {
        SalesQuotationLineType hostObject = _eventArgs.getThis();
        SalesQuotationLine     hostRecord = hostObject.parmSalesQuotationLine();
        
        if (hostRecord.RORTradeType != RORTradeType::SalesPurch)
        {
            SalesQuotationLineType::FINCreateRentalDates(hostRecord);  
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesQuotationLineType_Pre_updating</Name>
				<Source><![CDATA[
    [PreHandlerFor(classStr(SalesQuotationLineType), methodStr(SalesQuotationLineType, updating))]
    public static void SalesQuotationLineType_Pre_updating(XppPrePostArgs _eventArgs)
    {
        SalesQuotationLineType hostObject = _eventArgs.getThis();
        SalesQuotationLine     hostRecord = hostObject.parmSalesQuotationLine();
        
        SalesQuotationLineType::FINUpdateInvoicePeriod(hostObject, hostRecord);
       
        hostRecord.FINSetTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINsyncContractLineTiersAsync</Name>
				<Source><![CDATA[
    // extension methods
    protected static void FINsyncContractLineTiersAsync(container _params, System.Threading.CancellationToken _cancellationToken)
    {
        using (FINSyncContractLineTierAsyncDisposableContext syncContractLineTierAsyncContext = new FINSyncContractLineTierAsyncDisposableContext())
        {
            SalesQuotationLine hostRecord = con2Buf(conPeek(_params, 1));

            RORRentalDateTimes rentalDateTimes = con2Buf(conPeek(_params, 2));
            syncContractLineTierAsyncContext.parmRentalDateTimes(rentalDateTimes);

            FINRAGContractLineTier::syncContractLineTiers(hostRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCreateRentalDates</Name>
				<Source><![CDATA[
    private static void FINCreateRentalDates(SalesQuotationLine _salesQuotationLine)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes)))
        {
            RORRentalDateTimes rentalDateTimes;

            select firstonly rentalDateTimes
            where rentalDateTimes.RefTableId == _salesQuotationLine.TableId
            &&    rentalDateTimes.RefRecId == _salesQuotationLine.RecId;

            if (!rentalDateTimes)
            {
                rentalDateTimes = _salesQuotationLine.RORRentalLine::createRentalDateTimes();
            }
            
            FINInvoicePeriodManager_Creation invoicePeriodManager = FINInvoicePeriodManager::construct(FINInvoicePeriodAction::Creation, _salesQuotationLine);
            invoicePeriodManager.setRentalDateTimes(rentalDateTimes);
            invoicePeriodManager.run();
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINUpdateInvoicePeriod</Name>
				<Source><![CDATA[
    private static void FINUpdateInvoicePeriod(SalesQuotationLineType _salesQuotationLineType, SalesQuotationLine _salesQuotationLine)
    {
        if (_salesQuotationLine.RORTradeType != RORTradeType::SalesPurch)
        {
            INVInvoicePeriodHost invoicePeriodHost = _salesQuotationLine;
            INVInvoicePeriodHost origBuffer = _salesQuotationLineType.parmSalesQuotationLine().orig();

            if (invoicePeriodHost.RentQty != origBuffer.RentQty)
            {
                Qty deltaQty = (invoicePeriodHost.RentQty - origBuffer.RentQty);
                Map changesMap = new Map(Types::Enum, Types::Container);
                changesMap.insert(FINInvoicePeriodPhysicalChange::Qty, [deltaQty]);
                
                FINInvoicePeriodManager_PhysicalChange invoicePeriodManager = FINInvoicePeriodManager::construct(FINInvoicePeriodAction::PhysicalChange, invoicePeriodHost);
                invoicePeriodManager.setChanges(changesMap);
                invoicePeriodManager.run();
            }

            if (invoicePeriodHost.InvoiceProfileId  != origBuffer.InvoiceProfileId
             || invoicePeriodHost.CalendarId        != origBuffer.CalendarId)
            {
                FINRAGContractLineTier::syncContractLineTiers(_salesQuotationLineType.parmSalesQuotationLine());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromInventTable</Name>
				<Source><![CDATA[
    private void FINInitFromInventTable(SalesQuotationLine _salesQuotationLine, InventTable _inventTable)
    {
        if (_salesQuotationLine.QuotationType == QuotationType::RORProjRental && _salesQuotationLine.RORProjTransType == RORProjTransType::Rental)
        {
            BOBObjectTable objectTable;

            if (_salesQuotationLine.inventDim().inventSerialId)
            {
                objectTable = BOBObjectTable::findInventSerialId(_salesQuotationLine.inventDim().inventSerialId);
            }
                
            _salesQuotationLine.CostPrice = FINRentalCostPrice::findCostPrice(objectTable.ObjectId, _salesQuotationLine.ItemId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), _salesQuotationLine.RORPriceTimeUnit);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>