<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINPeriodDatesDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINPeriodDatesDefinition
{
    Map                             periodDatesDefinitionMap;
    RORRentalLine                   callerRentalLine;
    Timezone                        callerTimeZone;
    RORRentalDateTimes              rentalDateTimes;
    RORRentalLine                   parentRentalLine;
    FINInvoicePeriodQtyPhysical     invPeriodQtyPhysical;
    FINRentalInvoiceProfile         invoiceProfile;
    boolean                         calcEstimation;
    TimeOfDay                       defaultDaysSplit;
    BOBRentalType                   callerRentalType;
    TransDateTime                   forcedPeriodsEndDateTime;
    FINForceInvoiceUntilPoint       forceUntilCalculationPoint;
    FINForceFromCalculationDateTime forceFromCalculationDateTime;
    TransDateTime                   deliveryDateTimeCalculated;
    TransDateTime                   calculationDateTime;
    boolean                         isTechnicalExchange;
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setForcedPeriodsEndDateTime</Name>
				<Source><![CDATA[
    public void setForcedPeriodsEndDateTime(TransDateTime _forcedPeriodsEndDateTime)
    {
        forcedPeriodsEndDateTime = _forcedPeriodsEndDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setForceUntilCalculationPoint</Name>
				<Source><![CDATA[
    public void setForceUntilCalculationPoint(FINForceInvoiceUntilPoint _forceUntilCalculationPoint)
    {
        forceUntilCalculationPoint = _forceUntilCalculationPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setForceFromCalculationDateTime</Name>
				<Source><![CDATA[
    public void setForceFromCalculationDateTime(FINForceFromCalculationDateTime _forceFromCalculationDateTime)
    {
        forceFromCalculationDateTime = _forceFromCalculationDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINPeriodDatesDefinition construct(Common _common, FINInvoicePeriodQtyPhysical _invPeriodQtyPhysical, boolean _calcEstimation, Timezone _timeZone)
    {
        FINPeriodDatesDefinition    periodDatesDefinition = new FINPeriodDatesDefinition();
        
        periodDatesDefinition.init(_common, _invPeriodQtyPhysical, _calcEstimation, _timeZone);

        return periodDatesDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDaysSplit</Name>
				<Source><![CDATA[
    public TimeOfDay defaultDaysSplit()
    {
        return defaultDaysSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDeliveryDateTime</Name>
				<Source><![CDATA[
    private void calculateDeliveryDateTime()
    {
        deliveryDateTimeCalculated = invPeriodQtyPhysical.DeliveryDateTime;

        if (isTechnicalExchange)
        {
            if (callerRentalLine.TableId == tableNum(SalesLine)
                ||  callerRentalLine.TableId == tableNum(PurchLine))
            {
                Common common = callerRentalLine.RORRentalLine::getOrigReplacementLineBuffer();

                if (common)
                {
                    RORRentalDateTimesHost dateTimeHost = common;
                    RORRentalDateTimes origRentalDateTimes = dateTimeHost.RORRentalDateTimesHost::rentalDateTimes();

                    if (origRentalDateTimes)
                    {
                        deliveryDateTimeCalculated = origRentalDateTimes.OnRentDateTime;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDateTime</Name>
				<Source><![CDATA[
    protected TransDateTime getDeliveryDateTime()
    {
        TransDateTime deliveryDateTime;
        
        if (!deliveryDateTimeCalculated)
        {
            this.calculateDeliveryDateTime();
        }

        deliveryDateTime = deliveryDateTimeCalculated;

        return deliveryDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMidnightCutOffTime</Name>
				<Source><![CDATA[
    protected void setMidnightCutOffTime()
    {
        if (invoiceProfile.MidnightCutOffType == INVInvoicingMidnightCutOffType::Fixed)
        {
            defaultDaysSplit = invoiceProfile.MidnightCutOffTime;
        }
        else if (invoiceProfile.MidnightCutOffType == INVInvoicingMidnightCutOffType::LinkedToDelivery)
        {
            // calculate 24 hours from delivery
            TransDateTime deliveryDatetime = DateTimeUtil::applyTimeZoneOffset(this.getDeliveryDateTime(), callerTimeZone);
            defaultDaysSplit = DateTimeUtil::time(deliveryDatetime);
        }
        else
        {
            // By default day ends at 23:59:59
            defaultDaysSplit = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(Common _common, FINInvoicePeriodQtyPhysical _invPeriodQtyPhysical, boolean _calcEstimation, Timezone _timeZone)
    {
        calcEstimation              = _calcEstimation;
        callerRentalLine            = _common;
        callerTimeZone              = _timeZone;
        rentalDateTimes             = callerRentalLine.RORRentalDateTimesHost::rentalDateTimes();
        invPeriodQtyPhysical        = _invPeriodQtyPhysical;
        callerRentalType            = BOBRentalType::find(callerRentalLine.BOBRentalTypeId);
        isTechnicalExchange         = callerRentalLine.RORRentalLine::isTechnicalExchange();
        
        if (callerRentalLine.INVInvoiceProfileId)
        {
            invoiceProfile = FINRentalInvoiceProfile::find(callerRentalLine.INVInvoiceProfileId);
        }
      
        if (!invoiceProfile)
        {
            throw error(strFmt("@DNR6257", this.getLineIdentifier()));
        }

        this.setMidnightCutOffTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceToDate</Name>
				<Source><![CDATA[
    public void calculateInvoiceToDate(TransDateTime   _asAtDateTime)
    {
        TransDateTime   startDateTime;
        TransDateTime   endDateTime;
        
        periodDatesDefinitionMap = new Map(Types::Container, Types::Class);
        calculationDateTime = _asAtDateTime;

        // Find first possible invoice date (based on overall start of invoicable period. Even if some periods were already invoice we need to check entire rental because of possilbe linked proj hours journals)
        // and last possible invoice date (based on return date/off hire)
        [startDateTime, endDateTime] = this.findStartEndPossibleInvoicing();

        // if fully invoiced then periodDatesDefinitionMap will be empty.
        if (startDateTime && startDateTime < endDateTime)
        {
            // All calculations are in an order line specific site time zone
            this.calculateGenerationPeriods(startDateTime, DateTimeUtil::applyTimeZoneOffset(_asAtDateTime, callerTimeZone), endDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCheckStartPossibleInvoicing</Name>
				<Source><![CDATA[
    protected boolean canCheckStartPossibleInvoicing()
    {
        boolean ret;

        // Order needs to be either delivered and has something on rent or calculating estimated values for Totals form or invoiceProfile require priecTier calculation on line creation.
        if (calcEstimation || invPeriodQtyPhysical.QtyRented)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStartEndPossibleInvoicing</Name>
				<Source><![CDATA[
    public container findStartEndPossibleInvoicing()
    {
        INVPeriodStartDateTime periodsStartDateTime;
        INVPeriodEndDateTime periodsEndDateTime;
        
        if (this.canCheckStartPossibleInvoicing())
        {            
            // For caluclation tier multiplier "on creation" use expected off-rent if off-rent is not specified
            if (forcedPeriodsEndDateTime)
            {
                periodsStartDateTime = FINInvoicePeriodTableHelper::findStartPossibleInvoicing(invPeriodQtyPhysical.RecId, callerRentalLine);
                periodsEndDateTime = forcedPeriodsEndDateTime;
            }
            else
            {
                [periodsStartDateTime, periodsEndDateTime] = FINInvoicePeriodTableHelper::findStartEndPossibleInvoicingForCalculationDateTime(invPeriodQtyPhysical.RecId, callerRentalLine, calculationDateTime);
            }
        }

        if (invoiceProfile.MonthlyPeriod == INVMonthlyPeriod::LinkedToDate && forceFromCalculationDateTime)
        {
            if (forceFromCalculationDateTime >= periodsStartDateTime)
            {
                periodsStartDateTime = forceFromCalculationDateTime;
            }
            else
            {
                FINInvoicePeriodQtyFinancial invPeriodQtyFinancial;

                select firstonly RecId, InvoiceId from invPeriodQtyFinancial
                where invPeriodQtyFinancial.PeriodStartDateTime >= forceFromCalculationDateTime
                &&    invPeriodQtyFinancial.InvPeriodQtyPhysicalRecId == invPeriodQtyPhysical.RecId;

                if (invPeriodQtyFinancial && !invPeriodQtyFinancial.InvoiceId)
                {
                    periodsStartDateTime = forceFromCalculationDateTime;
                }
            }

        }
  
        return [DateTimeUtil::applyTimeZoneOffset(periodsStartDateTime, callerTimeZone), DateTimeUtil::applyTimeZoneOffset(periodsEndDateTime, callerTimeZone)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextGenerationPeriod</Name>
				<Source><![CDATA[
    protected container findNextGenerationPeriod(TransDateTime _startDateTime, TransDateTime _asAtDateTime)
    {
        container           retVal;
        INVInvoiceWeekDays  weekDay = 0;
                       
        switch (invoiceProfile.GenerationPeriod)
        {
            case INVGenerationPeriod::Days:
                retVal = this.days(_startDateTime, invoiceProfile.NumGenerationPeriods);
                break;

            case INVGenerationPeriod::Weeks:
                if (invoiceProfile.InvoiceWeekday == INVInvoiceWeekDays::LinkedToDate)
                {
                    TransDateTime transDateTime;
        
                    transDateTime = DateTimeUtil::applyTimeZoneOffset(this.getDeliveryDateTime(), callerTimeZone);

                    weekDay = dayofwk(DateTimeUtil::date(transDateTime));
                }
                else
                {
                    weekDay = invoiceProfile.InvoiceWeekday;
                }
                retVal = this.weeks(_startDateTime, weekDay, invoiceProfile.NumGenerationPeriods);
                break;

            case INVGenerationPeriod::Months:
                int                 targetDay = 0;
                WeekOfMonth         weekOfMonth = 0;

                if (invoiceProfile.MonthlyPeriod == INVMonthlyPeriod::SpecifiedDay)
                {
                    targetDay = invoiceProfile.InvoiceDay;
                }
                else if (invoiceProfile.MonthlyPeriod == INVMonthlyPeriod::LinkedToDate)
                {
                    RORRentalDateTimes origReplacementRentalDateTimes;

                    if (callerRentalLine && isTechnicalExchange)
                    {
                        Common common = callerRentalLine.RORRentalLine::getOrigReplacementLineBuffer();
                        origReplacementRentalDateTimes = RORRentalDateTimes::findReference(common.TableId, common.RecId);
                    }

                    RORRentalDateTimes rentalDateTimesLocal = (origReplacementRentalDateTimes ? origReplacementRentalDateTimes : rentalDateTimes);

                    targetDay = forceFromCalculationDateTime ?
                                DateTimeUtil::day(DateTimeUtil::applyTimeZoneOffset(forceFromCalculationDateTime, callerTimeZone)) :
                                dayOfMth(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(rentalDateTimesLocal.(RORRentalDateTimes::dateTimeType2FieldId(invoiceProfile.RORRentalDateTimeType)), callerTimeZone)));
                }
                else if (invoiceProfile.MonthlyPeriod == INVMonthlyPeriod::SpecifiedWeekAndDay)
                {
                    weekDay = invoiceProfile.InvoiceWeekday;
                    weekOfMonth = invoiceProfile.InvoiceWeekOfMonth;
                }

                retVal = this.months(_startDateTime, invoiceProfile.NumGenerationPeriods, targetDay, weekDay, weekOfMonth);
                break;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodDatesDefinitionMap</Name>
				<Source><![CDATA[
    public Map periodDatesDefinitionMap()
    {
        return periodDatesDefinitionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGenerationPeriods</Name>
				<Source><![CDATA[
    protected TransDateTime calculateGenerationPeriods(TransDateTime _startDateTime, TransDateTime _asAtDateTime, TransDateTime _invoiceDateTimeEnd)
    {
        TransDateTime   invoiceDateTime, invoiceDateTimeNext, invoiceDateTimeEnd, endDateTimeCalculated, pricePeriodDateTime, periodStartDateTime;
        TransDate       invoiceDateNext;
        TimeOfDay       invoiceTimeNext;
        ;

        invoiceDateTimeEnd = _invoiceDateTimeEnd;
        endDateTimeCalculated = DNRDateTimeUtil::getEarliestDateTime(invoiceDateTimeEnd, _asAtDateTime);

        // Find the first period after our start point)
        [periodStartDateTime, invoiceDateTimeNext] = this.findNextGenerationPeriod(DateTimeUtil::newDateTime(DateTimeUtil::date(_startDateTime), defaultDaysSplit), _asAtDateTime);

        if (periodStartDateTime < _startDateTime
        || (defaultDaysSplit && periodStartDateTime > _startDateTime && DateTimeUtil::date(periodStartDateTime) == DateTimeUtil::date(_startDateTime)))
        {
            periodStartDateTime = _startDateTime;
        }

        if (periodStartDateTime > _startDateTime)
        {
            pricePeriodDateTime = this.addGenerationPeriod(_startDateTime, periodStartDateTime);
        }

        // Option on invoicing screen allow to overrule invoice generation setup
        // and invoice until calculation date instead. Also if the calculation date is beyond the next invoice date.
        if (periodStartDateTime < endDateTimeCalculated && forceUntilCalculationPoint)
        {
            invoiceDateTimeNext = endDateTimeCalculated;
        }

        // If this period is already after the _asAt point then return a null date and time as nothing to be
        // invoiced yet unless we are after the final invoicing point (ie last invoice) which will be picked up below
        if (!invoiceDateTimeNext || (invoiceDateTimeNext > endDateTimeCalculated && _asAtDateTime < invoiceDateTimeEnd))
        {
            invoiceDateTime = DateTimeUtil::minValue();
        }
        else
        if ((periodStartDateTime < endDateTimeCalculated && invoiceDateTimeNext >= invoiceDateTimeEnd)
        || (_asAtDateTime >= invoiceDateTimeEnd && invoiceDateTimeNext > _asAtDateTime))
        {
            pricePeriodDateTime = this.addGenerationPeriod(pricePeriodDateTime ? pricePeriodDateTime : DNRDateTimeUtil::getLatestDateTime(periodStartDateTime, _startDateTime),
                invoiceDateTimeEnd);
                
            invoiceDateTime = invoiceDateTimeEnd;
        }
        else
        {
            pricePeriodDateTime = periodStartDateTime;//_startDateTime;
            pricePeriodDateTime = this.addGenerationPeriod(pricePeriodDateTime, invoiceDateTimeNext);
            
            invoiceDateTime = invoiceDateTimeNext;
            [periodStartDateTime, invoiceDateTimeNext] = this.findNextGenerationPeriod(invoiceDateTime, _asAtDateTime);

            // Still before the asAt point so try again - findNextPeriodBoundaries can return dateNull for invoiceDateNext if not enough periods
            // available for period-based invoicing.
            while (invoiceDateTimeNext && invoiceDateTimeNext <= endDateTimeCalculated)
            {
                pricePeriodDateTime = this.addGenerationPeriod(pricePeriodDateTime, invoiceDateTimeNext);
                
                invoiceDateTime = invoiceDateTimeNext;
                [periodStartDateTime, invoiceDateTimeNext] = this.findNextGenerationPeriod(invoiceDateTime, _asAtDateTime);
            }

            // If supplied asAtDate/Time is after end of possible invoicing as calculated above (ie after return/off-hire date) then
            // must use that as end point of invoicing, ignoring the real period end.  End point of period is still held in invoiceDateNext from above
            if (_asAtDateTime > invoiceDateTimeEnd)
            {
                pricePeriodDateTime = this.addGenerationPeriod(pricePeriodDateTime ? pricePeriodDateTime : _startDateTime, invoiceDateTimeEnd);
                
                invoiceDateTime = invoiceDateTimeEnd;
            }
        }
           
        // If supplied asAtDate/Time is after end of possible invoicing as calculated above (ie after return/off-hire date) then
        // must use that as end point of invoicing, ignoring the real period end.  End point of period is still held in invoiceDateNext from above
        if (invoiceDateTime == DateTimeUtil::minValue() && _asAtDateTime >= invoiceDateTimeEnd)
        {
            pricePeriodDateTime = this.addGenerationPeriod(pricePeriodDateTime ? pricePeriodDateTime : _startDateTime, invoiceDateTimeEnd);
                
            invoiceDateTime = invoiceDateTimeEnd;
        }

        return invoiceDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineIdentifier</Name>
				<Source><![CDATA[
    protected Description getLineIdentifier()
    {
        return strfmt("@DNR6261", callerRentalLine.HeaderId, callerRentalLine.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>days</Name>
				<Source><![CDATA[
    protected container days(TransDateTime _startDateTime, int _periodMultiplier)
    {
        return [_startDateTime, DateTimeUtil::newDateTime(DateTimeUtil::date(_startDateTime) + _periodMultiplier, defaultDaysSplit)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>weeks</Name>
				<Source><![CDATA[
    protected container weeks(TransDateTime _startDateTime, INVInvoiceWeekdays _invoiceWeekday, int _periodMultiplier)
    {
        TransDate       testDate;
        TransDate       startDate   = DateTimeUtil::date(_startDateTime);
        
        testDate = DNRDateTimeUtil::findWeekDay(startDate, _invoiceWeekday);
        
        // If a specified week day is after start date then count it as a first week.
        int multiplierAdjustment = 0;

        if (testDate > startDate)
        {
            multiplierAdjustment = -1;
        }
    
        testDate = testDate + (7 * (_periodMultiplier + multiplierAdjustment));
                
        return [_startDateTime, DateTimeUtil::newDateTime(testDate, defaultDaysSplit)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>months</Name>
				<Source><![CDATA[
    protected container months(
        TransDateTime       _startDateTime,
        int                 _periodMultiplier,
        // If there is no target day then fetch last day of a month or specific day of week
        int                 _targetDay = 0,
        // Defines specific day/week of month
        INVInvoiceWeekDays  _weekDay = 0,
        WeekOfMonth         _weekOfMonth = 0)
    {
        TransDate startDate = DateTimeUtil::date(_startDateTime);
        TransDate testDate = DNRDateTimeUtil::adjustDateToSpecificMonthDay(startDate, _targetDay, _weekDay, _weekOfMonth);
        
        // If a specified week day is after start date then count it as a first month.
        int multiplierAdjustment = 0;

        if (testDate > startDate)
        {
            multiplierAdjustment = -1;
        }

        testDate = dateMthFwd(testDate, (_periodMultiplier + multiplierAdjustment));

        Days startDateDay = DateTimeUtil::day(_startDateTime);

        if (startDateDay > dayOfMth(endMth(testDate))
        &&  invoiceProfile.MonthlyPeriod == INVMonthlyPeriod::LinkedToDate)
        {
            testDate = mkDate(1, mthOfYr(testDate) + 1, year(testDate));
        }
        else
        {      
            // dateMthFwd only increments month number so we need to adjust the date again.
            testDate = DNRDateTimeUtil::adjustDateToSpecificMonthDay(testDate, _targetDay, _weekDay, _weekOfMonth);
        }

        return [_startDateTime, DateTimeUtil::newDateTime(testDate, defaultDaysSplit)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekAndDay</Name>
				<Source><![CDATA[
    protected container weekAndDay(
        TransDateTime       _startDateTime,
        FINInvoiceWeekDays  _weekDay,
        WeekOfMonth         _weekOfMonth,
        int                 _periodMultiplier)
    {
        TransDate   testDate;
                
        testDate = DNRDateTimeUtil::findWeekAndDay(DateTimeUtil::date(_startDateTime), _weekDay, _weekOfMonth);

        if (testDate <= DateTimeUtil::date(_startDateTime))
        {
            testDate = DNRDateTimeUtil::findWeekAndDay(dateMthFwd(testDate, _periodMultiplier), _weekDay, _weekOfMonth);
        }
        
        return [_startDateTime, DateTimeUtil::newDateTime(testDate, defaultDaysSplit)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGenerationPeriod</Name>
				<Source><![CDATA[
    protected TransDateTime addGenerationPeriod(TransDateTime _periodStartDateTime, TransDateTime _periodEndDateTime)
    {
        List emptyList = new List(Types::Class);
        
        // Add this price period - the chargeable dates and times will be dateNull()/0 if there is no chargeable period during this full period
        periodDatesDefinitionMap.insert([_periodStartDateTime, _periodEndDateTime], emptyList);
       
        return _periodEndDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullInvoicePeriodStartEnd</Name>
				<Source><![CDATA[
    public static container getFullInvoicePeriodStartEnd(Common                         _common, 
                                                         FINInvoicePeriodQtyPhysical    _invPeriodQtyPhysical,
                                                         boolean                        _calcEstimation, 
                                                         Timezone                       _timeZone, 
                                                         TransDateTime                  _transDateTime,
                                                         StartEnd                       _startEnd = StartEnd::Start)
    {
        TransDateTime               startDateTime;
        TransDateTime               endDateTime = _transDateTime;
        FINPeriodDatesDefinition    periodDatesDefinition = FINPeriodDatesDefinition::construct(_common, _invPeriodQtyPhysical, _calcEstimation, _timeZone);
        
        while (startDateTime <= _transDateTime)
        {
            [startDateTime, endDateTime] = periodDatesDefinition.findNextGenerationPeriod(endDateTime, endDateTime);

            if (startDateTime == DateTimeUtil::minValue())
            {
                break;
            }
        }

        int64 offSet    = DateTimeUtil::getDifference(endDateTime, startDateTime);

        startDateTime   = DateTimeUtil::addSeconds(startDateTime, -offSet);
        endDateTime     = DateTimeUtil::addSeconds(endDateTime, -offSet);

        if (_transDateTime < startDateTime || _transDateTime > endDateTime)
        {
            throw error("@DNR:InvoicingFullPeriodCalculatedInvalidRange");
        }
        
        return [DateTimeUtil::date(startDateTime), DateTimeUtil::date(endDateTime)];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>