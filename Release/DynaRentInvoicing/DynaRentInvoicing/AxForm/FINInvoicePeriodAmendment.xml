<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>FINInvoicePeriodAmendment</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class FINInvoicePeriodAmendment extends FormRun
{

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        QueryBuildDataSource        qbds;
        QueryBuildRange             qbr;
        Common                      callerBuffer;
        ProjCostTrans               projCostTrans;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
    
        super();
    
        callerBuffer = element.args().record();
    
        switch (callerBuffer.TableId)
        {
            case tableNum(ProjCostTrans) :
                projCostTrans = callerBuffer;
                select firstOnly RecId, TableId from ledgerJournalTrans_Project
                where ledgerJournalTrans_Project.TransId == projCostTrans.TransId;
    
                qbds = InvoicePeriodAmendment_ds.query().dataSourceTable(tableNum(FINInvoicePeriodAmendment));
                qbds.addDynalink(fieldNum(FINInvoicePeriodAmendment, RefRecId), ledgerJournalTrans_Project, fieldNum(LedgerJournalTrans_Project, INVRefRecId));
                qbr = qbds.addRange(fieldNum(FINInvoicePeriodAmendment, RefTableId));
                qbr.value(SysQuery::value(ledgerJournalTrans_Project.INVRefTableId));
                qbr.status(RangeStatus::Hidden);
                break;
            
            case tableNum(FINRentalInvoiceDetailPeriod) :
                FINRentalInvoiceDetailPeriod    rentalInvoiceDetailPeriod = callerBuffer;
                PurchLine                       purchLine;
                SalesQuotationLine              salesQuotationLine;
                SalesLine                       salesLine;
                RefTableId                      refTableId;
                RefRecId                        refRecId;
                
                switch (rentalInvoiceDetailPeriod.RefTableId)
                {
                    case tableNum(SalesQuotationParmLine) :
                        SalesQuotationParmLine salesQuotationParmLine;

                        select firstonly RecId from salesQuotationLine
                            exists join salesQuotationParmLine
                            where salesQuotationParmLine.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    salesQuotationParmLine.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    salesQuotationParmLine.SalesQuotationLineRecId == salesQuotationLine.RecId;

                        refTableId  = salesQuotationLine.TableId;
                        refRecId    = salesQuotationLine.RecId;
                        break;

                    case tableNum(SalesParmLine) :
                        SalesParmLine salesParmLine;

                        select firstonly RecId from salesLine
                            exists join salesParmLine
                            where salesParmLine.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    salesParmLine.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    salesParmLine.InventTransId == salesLine.InventTransId;

                        refTableId  = salesLine.TableId;
                        refRecId    = salesLine.RecId;
                        break;

                    case tableNum(CustConfirmTrans) :
                        CustConfirmTrans custConfirmTrans;
                            
                        select firstonly RecId from salesLine
                            exists join custConfirmTrans
                            where custConfirmTrans.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    custConfirmTrans.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    custConfirmTrans.InventTransId == salesLine.InventTransId;

                        refTableId  = salesLine.TableId;
                        refRecId    = salesLine.RecId;
                        break;

                    case tableNum(CustInvoiceTrans) :

                        //if there are journalized amendments, show them instead of existing records
                        if (element.args().parmObject() is FINRentalInvoiceDetailHelper)
                        {
                            FINRentalInvoiceDetailHelper helper = element.args().parmObject();

                            this.populateTmpData(helper.invoicePeriodAmendmentJournalized, callerBuffer);

                            this.updateDesign();

                            return;
                        }

                        CustInvoiceTrans custInvoiceTrans;
                            
                        select firstonly RecId from salesLine
                            exists join custInvoiceTrans
                            where custInvoiceTrans.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    custInvoiceTrans.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    custInvoiceTrans.InventTransId == salesLine.InventTransId;

                        refTableId  = salesLine.TableId;
                        refRecId    = salesLine.RecId;
                        break;

                    case tableNum(CustQuotationConfirmTrans) :
                        CustQuotationConfirmTrans custQuotationConfirmTrans;
                            
                        select firstonly RecId from salesQuotationLine
                            exists join CustQuotationConfirmTrans
                            where CustQuotationConfirmTrans.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    CustQuotationConfirmTrans.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    CustQuotationConfirmTrans.InventTransId == salesQuotationLine.InventTransId;

                        refTableId  = salesQuotationLine.TableId;
                        refRecId    = salesQuotationLine.RecId;
                        break;

                    case tableNum(CustQuotationTrans) :
                        CustQuotationTrans custQuotationTrans;
                            
                        select firstonly RecId from salesQuotationLine
                            exists join custQuotationTrans
                            where custQuotationTrans.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    custQuotationTrans.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    custQuotationTrans.InventTransId == salesQuotationLine.InventTransId;

                        refTableId  = salesQuotationLine.TableId;
                        refRecId    = salesQuotationLine.RecId;
                        break;

                    case tableNum(PSATmpProjProposalTrans) :
                        PSATmpProjProposalTrans psaTmpProjProposalTrans;
                            
                        select firstonly RecId from salesLine
                            exists join psaTmpProjProposalTrans
                            where psaTmpProjProposalTrans.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    psaTmpProjProposalTrans.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    psaTmpProjProposalTrans.RefTableId == salesLine.TableId
                            &&    psaTmpProjProposalTrans.RefRecId == salesLine.RecId;

                        refTableId  = salesLine.TableId;
                        refRecId    = salesLine.RecId;
                        break;

                    case tableNum(ProjProposalItem) :
                        ProjProposalItem projProposalItem;
                            
                        select firstonly RecId from salesLine
                            exists join projProposalItem
                            where projProposalItem.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    projProposalItem.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    projProposalItem.InventTransId == salesLine.InventTransId;

                        refTableId  = salesLine.TableId;
                        refRecId    = salesLine.RecId;
                        break;

                    case tableNum(VendInvoiceInfoLine) :
                        VendInvoiceInfoLine vendInvoiceInfoLine;

                        select firstonly RecId from purchLine
                            exists join vendInvoiceInfoLine
                            where vendInvoiceInfoLine.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    vendInvoiceInfoLine.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    vendInvoiceInfoLine.InventTransId == purchLine.InventTransId;

                        refTableId  = purchLine.TableId;
                        refRecId    = purchLine.RecId;
                        break;

                    case tableNum(VendInvoiceTrans) :
                        VendInvoiceTrans vendInvoiceTrans;

                        select firstonly RecId from purchLine
                            exists join vendInvoiceTrans
                            where vendInvoiceTrans.TableId == rentalInvoiceDetailPeriod.RefTableId
                            &&    vendInvoiceTrans.RecId == rentalInvoiceDetailPeriod.RefRecId
                            &&    vendInvoiceTrans.InventTransId == purchLine.InventTransId;

                        refTableId  = purchLine.TableId;
                        refRecId    = purchLine.RecId;
                        break;
                }

                if (refTableId && refRecId)
                {
                    str strPeriodStartDateTime  = DateTimeUtil::toStr(rentalInvoiceDetailPeriod.PeriodStartDateTime);
                    str strPeriodEndDateTime    = DateTimeUtil::toStr(rentalInvoiceDetailPeriod.PeriodEndDateTime);

                    qbds = InvoicePeriodAmendment_ds.queryBuildDataSource();
                    qbds.addRange(fieldNum(FINInvoicePeriodAmendment, RefTableId)).value(SysQuery::value(refTableId));
                    qbds.addRange(fieldNum(FINInvoicePeriodAmendment, RefRecId)).value(SysQuery::value(refRecId));
                    qbds.addRange(fieldNum(FINInvoicePeriodAmendment, DataAreaId)).value(strFmt('((%1.%2 < %3) && (%1.%4 > %5))',
                                                                                        qbds.name(),
                                                                                        fieldStr(FINInvoicePeriodAmendment, FromDateTime),
                                                                                        strPeriodEndDateTime,
                                                                                        fieldStr(FINInvoicePeriodAmendment, ToDateTime),
                                                                                        strPeriodStartDateTime));
                }
                break;
        
            default :
                qbds = InvoicePeriodAmendment_ds.query().dataSourceTable(tableNum(FINInvoicePeriodAmendment));
                qbds.addDynalink(fieldNum(FINInvoicePeriodAmendment, RefRecId), callerBuffer, fieldNum(SalesLine, RecId));
                qbr = qbds.addRange(fieldNum(FINInvoicePeriodAmendment, RefTableId));
                qbr.value(SysQuery::value(callerBuffer.TableId));
                qbr.status(RangeStatus::Hidden);
        }

        // No need to show in this form amendments awaiting for approval
        QueryBuildDataSource qbdsNotApprovedChanges;
        qbdsNotApprovedChanges = qbds.addDataSource(tableNum(FINCreditPendingChangesReference));
        qbdsNotApprovedChanges.relations(true);
        qbdsNotApprovedChanges.joinMode(JoinMode::NoExistsJoin);
        qbdsNotApprovedChanges.addRange(fieldNum(FINCreditPendingChangesReference, DocumentState)).value(SysQuery::value(VersioningDocumentState::Draft));
        qbdsNotApprovedChanges.addRange(fieldNum(FINCreditPendingChangesReference, DocumentState)).value(SysQuery::value(VersioningDocumentState::InReview));
        qbdsNotApprovedChanges.addRange(fieldNum(FINCreditPendingChangesReference, DocumentState)).value(SysQuery::value(VersioningDocumentState::InExternalReview));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        boolean journalizedData = InvoicePeriodAmendment.isTmp();

        FINInvoicePeriodAmendmentHelper.enabled(!journalizedData);
        ROROrderAmendmentLog.enabled(!journalizedData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    protected void populateTmpData(FINInvoicePeriodAmendment _callerBuffer, FINRentalInvoiceDetailPeriod _rentalInvoiceDetailPeriod)
    {
        InvoicePeriodAmendment.setTmp();

        insert_recordset InvoicePeriodAmendment (FromDateTime, ToDateTime, PriceComponent, RealValue, StrValue, RefRecId, RefTableId)
            select FromDateTime, ToDateTime, PriceComponent, RealValue, StrValue, RefRecId, RefTableId from _callerBuffer
            where  (_callerBuffer.FromDateTime >= _rentalInvoiceDetailPeriod.PeriodStartDateTime && _callerBuffer.FromDateTime  <= _rentalInvoiceDetailPeriod.PeriodEndDateTime)
                || (_callerBuffer.ToDateTime   >= _rentalInvoiceDetailPeriod.PeriodStartDateTime && _callerBuffer.ToDateTime    <= _rentalInvoiceDetailPeriod.PeriodEndDateTime)
                || (_callerBuffer.FromDateTime <= _rentalInvoiceDetailPeriod.PeriodStartDateTime && _callerBuffer.ToDateTime    >= _rentalInvoiceDetailPeriod.PeriodEndDateTime);
        
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InvoicePeriodAmendment</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
    
            ret = super();
    
            FINEnableReInvoicingFullCredit.enabled(InvoicePeriodAmendment.PriceComponent == FINInvoicePeriodPriceComponent::FullCredit && InvoicePeriodAmendment.MustReinvoiceFullCredit == NoYes::No);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ROROrderAmendmentLog</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            //super();
            Args args = new Args();
            args.record(element.args().record());
            args.caller(element);

            this.menufunction().run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InvoicePeriodAmendment</Name>
			<Table>FINInvoicePeriodAmendment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceComponent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RealValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StrValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToDateTime</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DNR645</Caption>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">InvoicePeriodAmendment</TitleDataSource>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>FINInvoicePeriodAmendmentHelper</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>InvoicePeriodAmendment</DataSource>
								<MenuItemName>FINInvoicePeriodAmendmentHelper</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ROROrderAmendmentLog</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>InvoicePeriodAmendment</DataSource>
								<MenuItemName>ROROrderAmendmentLog</MenuItemName>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InvoicePeriods</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>InvoicePeriodsActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ActionGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>FINEnableReInvoicingFullCredit</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>MenuFunctionButton</Type>
												<FormControlExtension
													i:nil="true" />
												<DataSource>InvoicePeriodAmendment</DataSource>
												<MenuItemName>FINEnableReInvoicingFullCredit</MenuItemName>
												<MenuItemType>Action</MenuItemType>
												<NeedsRecord>Yes</NeedsRecord>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>Grid_FromDateTime</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FromDateTime</DataField>
										<DataSource>InvoicePeriodAmendment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>Grid_ToDateTime</Name>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ToDateTime</DataField>
										<DataSource>InvoicePeriodAmendment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Grid_PriceComponent</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PriceComponent</DataField>
										<DataSource>InvoicePeriodAmendment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_StrValue</Name>
										<ConfigurationKey>DNRDeletedObjects07_2020</ConfigurationKey>
										<Enabled>No</Enabled>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>StrValue</DataField>
										<DataSource>InvoicePeriodAmendment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Grid_RealValue</Name>
										<ConfigurationKey>DNRDeletedObjects07_2020</ConfigurationKey>
										<Enabled>No</Enabled>
										<Type>Real</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>RealValue</DataField>
										<DataSource>InvoicePeriodAmendment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Grid_displayNewValue</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayNewValue</DataMethod>
										<DataSource>InvoicePeriodAmendment</DataSource>
										<Label>@SYS41043</Label>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataGroup>Overview</DataGroup>
								<DataSource>InvoicePeriodAmendment</DataSource>
								<VisibleRows>9</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@DNR6060</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>