<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>FINRentalCreditWizard</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class FINRentalCreditWizard extends FormRun
{
    FINAmendmentType prevAmendmentType, amendmentType;
    FINAmendmentSubType amendmentSubType;
    FINRentalCreditWizard sysWizard;
    Timezone userTimezone;
    QueryBuildRange qbrAmendmentType, qbrTradeType, qbrInvoiceNum, qbrSellFixedAsset;
    RORParameters rentalParameters;
    TransDateTime invoiceStartDateTime, invoiceEndDateTime, invoiceStartDateTimeInTimezone, invoiceEndDateTimeInTimeZone;
    CustInvoiceId selectedInvoiceId;
    FINTmpInvoicePeriodAmendment validateTmpInvoicePeriodAmendment;
    boolean disableEffectivityDateTimeGroup;

    #FINConstants



}
]]></Source>
			</Method>
			<Method>
				<Name>performOrderLookup</Name>
				<Source><![CDATA[
    public void performOrderLookup(FormControl _ctrl)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsSalesTable = query.addDataSource(tableNum(SalesTable));
    
        qbdsSalesTable.addRange(fieldNum(SalesTable, SalesType)).value(queryValue(SalesType::RORRental));

        QueryBuildDataSource qbdsCustInvoiceTransSameInvoice = qbdsSalesTable.addDataSource(tableNum(CustInvoiceTrans));
        qbdsCustInvoiceTransSameInvoice.joinMode(JoinMode::ExistsJoin);
        qbdsCustInvoiceTransSameInvoice.addLink(fieldNum(SalesTable, SalesId), fieldNum(CustInvoiceTrans, OrigSalesId));

        qbdsCustInvoiceTransSameInvoice.addRange(fieldNum(CustInvoiceTrans, SalesId)).value(custInvoiceJour.SalesId);
        qbdsCustInvoiceTransSameInvoice.addRange(fieldNum(CustInvoiceTrans, InvoiceId)).value(custInvoiceJour.InvoiceId);
        qbdsCustInvoiceTransSameInvoice.addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(queryValue(custInvoiceJour.InvoiceDate));
        qbdsCustInvoiceTransSameInvoice.addRange(fieldNum(CustInvoiceTrans, numberSequenceGroup)).value(custInvoiceJour.numberSequenceGroup);
    
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), _ctrl);
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId), true);
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmendmentCombinationsFullCredit</Name>
				<Source><![CDATA[
    private boolean validateAmendmentCombinationsFullCredit()
    {
        boolean ret = true;

        if (amendmentType != FINAmendmentType::FullCredit)
        {
            return true;
        }

        select firstonly RecId from validateTmpInvoicePeriodAmendment
        where validateTmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Invoice;

        if (validateTmpInvoicePeriodAmendment.RecId)
        {
            ret = checkFailed(strFmt("@DNR:AmendmentXAlreadyExists", enum2Str(FINAmendmentSubType::Invoice)));
        }

        if (ret)
        {
            if (amendmentSubType == FINAmendmentSubType::Order)
            {
                select firstonly RecId from validateTmpInvoicePeriodAmendment
                where validateTmpInvoicePeriodAmendment.OrderId == FullCreditGroup_OrderIdFilter.text();

                if (validateTmpInvoicePeriodAmendment.RecId)
                {
                    ret = checkFailed(strFmt("@DNR:AmendmentAlreadyExistsForOrderX", FullCreditGroup_OrderIdFilter.text()));
                }
            }
            else if (amendmentSubType == FINAmendmentSubType::Line)
            {
                select firstonly RecId from validateTmpInvoicePeriodAmendment
                where validateTmpInvoicePeriodAmendment.OrderId == custInvoiceTrans.OrigSalesId
                &&    validateTmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order;
                        
                if (validateTmpInvoicePeriodAmendment.RecId)
                {
                    ret = checkFailed(strFmt("@DNR:AmendmentXAlreadyExistsForOrderY", enum2Str(FINAmendmentSubType::Order), custInvoiceTrans.OrigSalesId));
                }
            }
            else if (amendmentSubType == FINAmendmentSubType::Invoice)
            {
                select firstonly RecId from validateTmpInvoicePeriodAmendment;

                if (validateTmpInvoicePeriodAmendment.RecId)
                {
                    ret = checkFailed("@DNR:AmendmentAlreadyExists");
                }
            }
        }

        if (ret)
        {
            select firstonly RecId from validateTmpInvoicePeriodAmendment
            where validateTmpInvoicePeriodAmendment.MustReinvoice != FullCreditGroup_MustReinvoice.checked();

            if (validateTmpInvoicePeriodAmendment.RecId)
            {
                ret = checkFailed("@DNR:InvalidCombinationWithWithoutReinvoicing");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConversionJournalPosted</Name>
				<Source><![CDATA[
    private boolean validateConversionJournalPosted()
    {
        boolean ret = true;

        if (amendmentType != FINAmendmentType::FullCredit)
        {
            return true;
        }

        InventJournalTable inventJournalTable;
        SalesLine salesLineLoc;

        if (amendmentSubType == FINAmendmentSubType::Line
        &&  custInvoiceTrans.RORTradeType == RORTradeType::SalesPurch)
        {
            select firstonly RecId, SalesId, LineNum from salesLineLoc
            where salesLineLoc.InventTransId == custInvoiceTrans.InventTransId
            &&    salesLineLoc.BOBSellFixedAsset == NoYes::Yes
            &&    salesLineLoc.BOBConversionJourId
                join JournalId from inventJournalTable
                where inventJournalTable.JournalId == salesLineLoc.BOBConversionJourId
                &&    inventJournalTable.Posted == NoYes::No;
        }
        else if (amendmentSubType == FINAmendmentSubType::Order)
        {
            CustInvoiceTrans custInvoiceTransSameOrder;

            select firstonly RecId, SalesId, LineNum from salesLineLoc
            where salesLineLoc.BOBSellFixedAsset == NoYes::Yes
            &&    salesLineLoc.BOBConversionJourId
                join JournalId from inventJournalTable
                where inventJournalTable.JournalId == salesLineLoc.BOBConversionJourId
                &&    inventJournalTable.Posted == NoYes::No
                    exists join custInvoiceTransSameOrder
                    where custInvoiceTransSameOrder.InventTransId == salesLineLoc.InventTransId
                    &&    custInvoiceTransSameOrder.OrigSalesId == FullCreditGroup_OrderIdFilter.text()
                    &&    custInvoiceTransSameOrder.SalesId == custInvoiceJour.SalesId
                    &&    custInvoiceTransSameOrder.InvoiceDate == custInvoiceJour.InvoiceDate
                    &&    custInvoiceTransSameOrder.InvoiceId == custInvoiceJour.InvoiceId
                    &&    custInvoiceTransSameOrder.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;
        }
        else if (amendmentSubType == FINAmendmentSubType::Invoice)
        {
            CustInvoiceTrans custInvoiceTransSameInvoice;

            select firstonly RecId, SalesId, LineNum from salesLineLoc
            where salesLineLoc.BOBSellFixedAsset == NoYes::Yes
            &&    salesLineLoc.BOBConversionJourId
                join JournalId from inventJournalTable
                where inventJournalTable.JournalId == salesLineLoc.BOBConversionJourId
                &&    inventJournalTable.Posted == NoYes::No
                    exists join custInvoiceTransSameInvoice
                    where custInvoiceTransSameInvoice.InventTransId == salesLineLoc.InventTransId
                    &&    custInvoiceTransSameInvoice.SalesId == custInvoiceJour.SalesId
                    &&    custInvoiceTransSameInvoice.InvoiceDate == custInvoiceJour.InvoiceDate
                    &&    custInvoiceTransSameInvoice.InvoiceId == custInvoiceJour.InvoiceId
                    &&    custInvoiceTransSameInvoice.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;
        }

        if (salesLineLoc.RecId)
        {
            ret = checkFailed(strFmt("@DNR:ConversionJournalXNotPostedForOrderYLineZ", inventJournalTable.JournalId, salesLineLoc.SalesId, salesLineLoc.LineNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTmpAmendment</Name>
				<Source><![CDATA[
    public boolean validateTmpAmendment(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        boolean ret = true;

        ret = ret && element.validateCollidingLine(_tmpInvoicePeriodAmendment);
        ret = ret && element.validateMandatoryFields(_tmpInvoicePeriodAmendment);
        ret = ret && element.validateScenarioSpecificRequirements(_tmpInvoicePeriodAmendment);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCollidingLine</Name>
				<Source><![CDATA[
    private boolean validateCollidingLine(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        boolean ret = true;

        select firstonly RecId, EffectiveDateTimeFrom, EffectiveDateTimeTo from validateTmpInvoicePeriodAmendment
        where validateTmpInvoicePeriodAmendment.AmendmentType == _tmpInvoicePeriodAmendment.AmendmentType
        &&    validateTmpInvoicePeriodAmendment.InventTransId == _tmpInvoicePeriodAmendment.InventTransId
        &&    validateTmpInvoicePeriodAmendment.EffectiveDateTimeFrom < _tmpInvoicePeriodAmendment.EffectiveDateTimeTo
        &&    validateTmpInvoicePeriodAmendment.EffectiveDateTimeTo > _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom
        &&    (_tmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::ManualPriceComponents 
            || validateTmpInvoicePeriodAmendment.CustInvoiceTransComponentRecId == _tmpInvoicePeriodAmendment.CustInvoiceTransComponentRecId);

        if (validateTmpInvoicePeriodAmendment.RecId)
        {
            ret = checkFailed(strFmt("@DNR:Placeholder12",
                                    strFmt("@DNR:FailedToAddAmendment", _tmpInvoicePeriodAmendment.OrderId, _tmpInvoicePeriodAmendment.ItemId, _tmpInvoicePeriodAmendment.OrderLineNum),
                                    strFmt("@DNR:AmendmentXAlreadyExistsFromYToZ", enum2Str(_tmpInvoicePeriodAmendment.AmendmentType), 
                                                                                            DateTimeUtil::applyTimeZoneOffset(validateTmpInvoicePeriodAmendment.EffectiveDateTimeFrom, userTimeZone), 
                                                                                            DateTimeUtil::applyTimeZoneOffset(validateTmpInvoicePeriodAmendment.EffectiveDateTimeTo, userTimeZone))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMandatoryFields</Name>
				<Source><![CDATA[
    private boolean validateMandatoryFields(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        boolean ret = true;

        if (!_tmpInvoicePeriodAmendment.ReasonText)
        {
            ret = checkFailed(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(RORAmendmentReasonText))));
        }

        if (!_tmpInvoicePeriodAmendment.ReasonCode)
        {
            ret = checkFailed(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(DNRReasonCode))));
        }
            
        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::RentalStop)
        {
            if (!_tmpInvoicePeriodAmendment.ContactPersonId)
            {
                ret = checkFailed(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(ContactPersonId))));
            }

            if (RentalStopOneDayGroup.optionValue() == 1) // One day
            {
                if (!RentalStopOneDayGroup_RentalStopDate.dateValue())
                {
                    ret = checkFailed(strFmt("@SYS26332", "@SYS7402"));
                }
            }
            else
            {
                if (!RentalStopFreeRangeGroup_RentalStopFromDateTime.dateTimeValue())
                {
                    ret = checkFailed(strFmt("@SYS26332", "@DNR1039"));
                }

                if (!RentalStopFreeRangeGroup_RentalStopToDateTime.dateTimeValue())
                {
                    ret = checkFailed(strFmt("@SYS26332", "@SYS177352"));
                }
            }
        }

        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit
        &&  _tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order
        &&  !FullCreditGroup_OrderIdFilter.text())
        {
            ret = checkFailed(strFmt("@SYS26332", "@DNR10"));
        }

        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::ManualCredit
        &&  _tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Order
        &&  !ManualCreditGroup_OrderIdFilter.text())
        {
            ret = checkFailed(strFmt("@SYS26332", "@DNR10"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateScenarioSpecificRequirements</Name>
				<Source><![CDATA[
    private boolean validateScenarioSpecificRequirements(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        boolean ret = true;

        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::Price)
        {
            if (_tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Net)
            {
                RORRentalGrossAmount grossAmountInvoiced;

                if (custInvoiceTrans.RORTradeType == RORTradeType::SalesPurch)
                {
                    grossAmountInvoiced = custInvoiceTrans.SalesPrice;
                }
                else
                {
                    FINRentalInvoiceDetailHelper rentalInvoiceDetailHelper = FINRentalInvoiceDetailHelper::getRentalInvoiceDetails(custInvoiceTrans);
                    grossAmountInvoiced = rentalInvoiceDetailHelper.grossPrice;
                }

                if (_tmpInvoicePeriodAmendment.NewRealValue > grossAmountInvoiced)
                {
                    ret = checkFailed(strFmt("@DNR:Placeholder12",
                                             strFmt("@DNR:FailedToAddAmendment", _tmpInvoicePeriodAmendment.OrderId, _tmpInvoicePeriodAmendment.ItemId, _tmpInvoicePeriodAmendment.OrderLineNum),
                                             "@DNR:NetPriceGreaterThanGross"));
                }
            }

            if (_tmpInvoicePeriodAmendment.TradeType != RORTradeType::SalesPurch)
            {
                ret = ret && element.validateTmpAmendmentDateTimes(_tmpInvoicePeriodAmendment);
            }
        }

        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::ManualCredit)
        {
            if (ManualCreditGroup_CreditAmount.realValue() > ManualCreditGroup_InvoicedAmount.realValue())
            {
                ret = checkFailed("@DNR8193");
            }

            select firstonly RecId from validateTmpInvoicePeriodAmendment
            where validateTmpInvoicePeriodAmendment.AmendmentSubType != ManualCreditGroup_UpdateType.selection();

            if (validateTmpInvoicePeriodAmendment.RecId)
            {
                ret = checkFailed("@DNR:InvalidCombinationLineInvoiceAmendments");
            }
        }

        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::RentalStop)
        {
            if (RentalStopOneDayGroup.optionValue() == 1) // One day
            {
                if (_tmpInvoicePeriodAmendment.EffectiveDateTimeFrom >= _tmpInvoicePeriodAmendment.EffectiveDateTimeTo)
                {
                    ret = checkFailed("@DNR:EffectiveDateTimeFromBeforeEffectiveTo");
                }

                CustInvoiceTrans custInvoiceTransValidate = CustInvoiceTrans::findRecId(_tmpInvoicePeriodAmendment.CustInvoiceTransRecId);
                TransDateTime invoiceStartDateTimeValidate, invoiceEndDateTimeValidate;

                [invoiceStartDateTimeValidate, invoiceEndDateTimeValidate] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(custInvoiceTransValidate.InvoiceId, custInvoiceTransValidate.TableId, custInvoiceTransValidate.RecId);
                
                TransDate amendmendStartDate = DateTimeUtil::date(_tmpInvoicePeriodAmendment.EffectiveDateTimeFrom);
                TransDate amendmendEndDate = DateTimeUtil::date(_tmpInvoicePeriodAmendment.EffectiveDateTimeTo);
                TransDate periodStartDate = DateTimeUtil::date(invoiceStartDateTimeValidate);
                TransDate periodEndDate = DateTimeUtil::date(invoiceEndDateTimeValidate);

                if (amendmendStartDate < periodStartDate || amendmendEndDate > periodEndDate)
                {
                    TransDateTime invoiceStartDateTimeInTimezoneValidate = DateTimeUtil::applyTimeZoneOffset(invoiceStartDateTimeValidate, userTimezone);
                    TransDateTime invoiceEndDateTimeInTimezoneValidate = DateTimeUtil::applyTimeZoneOffset(invoiceEndDateTimeValidate, userTimezone);
                    TransDate periodStartDateInTimeZone = DateTimeUtil::date(invoiceStartDateTimeInTimezoneValidate);
                    TransDate periodEndDateInTimeZone = DateTimeUtil::date(invoiceEndDateTimeInTimezoneValidate);

                    ret = checkFailed(strFmt("@DNR:Placeholder12", 
                                             strFmt("@DNR:FailedToAddAmendment", _tmpInvoicePeriodAmendment.OrderId, _tmpInvoicePeriodAmendment.ItemId, _tmpInvoicePeriodAmendment.OrderLineNum),
                                             strFmt("@DNR:EffectiveDateBetweenXAndY", periodStartDateInTimeZone, periodEndDateInTimeZone)));
                }
            }
            else
            {
                ret = element.validateTmpAmendmentDateTimes(_tmpInvoicePeriodAmendment);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTmpAmendmentDateTimes</Name>
				<Source><![CDATA[
    private boolean validateTmpAmendmentDateTimes(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        boolean ret = true;
        CustInvoiceTrans custInvoiceTransValidate = CustInvoiceTrans::findRecId(_tmpInvoicePeriodAmendment.CustInvoiceTransRecId);
        TransDateTime invoiceStartDateTimeValidate, invoiceEndDateTimeValidate, invoiceStartDateTimeInTimezoneValidate, invoiceEndDateTimeInTimeZoneValidate;

        [invoiceStartDateTimeValidate, invoiceEndDateTimeValidate] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(custInvoiceTransValidate.InvoiceId, custInvoiceTransValidate.TableId, custInvoiceTransValidate.RecId);
        invoiceStartDateTimeInTimezoneValidate = DateTimeUtil::applyTimeZoneOffset(invoiceStartDateTimeValidate, userTimezone);
        invoiceEndDateTimeInTimezoneValidate = DateTimeUtil::applyTimeZoneOffset(invoiceEndDateTimeValidate, userTimezone);

        if (_tmpInvoicePeriodAmendment.EffectiveDateTimeFrom < invoiceStartDateTimeValidate || _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom > invoiceEndDateTimeValidate)
        {
            ret = checkFailed(strFmt("@DNR:Placeholder12",
                                     strFmt("@DNR:FailedToAddAmendment", _tmpInvoicePeriodAmendment.OrderId, _tmpInvoicePeriodAmendment.ItemId, _tmpInvoicePeriodAmendment.OrderLineNum),
                                     strFmt("@DNR:EffectiveDateTimeFromBetweenXAndY", invoiceStartDateTimeInTimezoneValidate, invoiceEndDateTimeInTimezoneValidate)));
        }

        if (ret && _tmpInvoicePeriodAmendment.EffectiveDateTimeTo < invoiceStartDateTimeValidate || _tmpInvoicePeriodAmendment.EffectiveDateTimeTo > invoiceEndDateTimeValidate)
        {
            ret = checkFailed(strFmt("@DNR:Placeholder12",
                                     strFmt("@DNR:FailedToAddAmendment", _tmpInvoicePeriodAmendment.OrderId, _tmpInvoicePeriodAmendment.ItemId, _tmpInvoicePeriodAmendment.OrderLineNum),
                                     strFmt("@DNR:EffectiveDateTimeToBetweenXAndY", invoiceStartDateTimeInTimezoneValidate, invoiceEndDateTimeInTimezoneValidate)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpAmendmentDateTimes</Name>
				<Source><![CDATA[
    private void initTmpAmendmentDateTimes(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment, CustInvoiceTrans _custInvoiceTrans)
    {
        switch (amendmentType)
        {
            case FINAmendmentType::RentalStop:
                if (RentalStopOneDayGroup.optionValue() == 1) // One day
                {
                    // rentalStopDate is interpreted as "midnight on that date in user timezone"
                    // So we must apply the same timezone to everything we compare with rentalStopDate
                    date rentalStopDate = RentalStopOneDayGroup_RentalStopDate.dateValue();
                    
                    TransDateTime rentalStopInvoiceStartDateTime, rentalStopInvoiceEndDateTime;
                    [rentalStopInvoiceStartDateTime, rentalStopInvoiceEndDateTime] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(_custInvoiceTrans.InvoiceId, _custInvoiceTrans.TableId, _custInvoiceTrans.RecId);
         
                    // If the one day rental stop is at the invoice period start then take the time value from it
                    if (rentalStopDate == DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(rentalStopInvoiceStartDateTime, userTimezone)))
                    {
                        _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom = rentalStopInvoiceStartDateTime;
                    }
                    else
                    {
                        _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom = DateTimeUtil::newDateTime(rentalStopDate, 0, userTimezone);
                    }

                    // If the one day rental stop is at the invoice period end then take the time value from it
                    if (rentalStopDate == DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(rentalStopInvoiceEndDateTime, userTimezone)))
                    {
                        _tmpInvoicePeriodAmendment.EffectiveDateTimeTo = rentalStopInvoiceEndDateTime;
                    }
                    else
                    {
                        _tmpInvoicePeriodAmendment.EffectiveDateTimeTo = DateTimeUtil::newDateTime(rentalStopDate + 1, 0, userTimezone);
                    }
                }
                else
                {
                    _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom = DateTimeUtil::removeTimeZoneOffset(RentalStopFreeRangeGroup_RentalStopFromDateTime.dateTimeValue(), userTimezone);
                    _tmpInvoicePeriodAmendment.EffectiveDateTimeTo = DateTimeUtil::removeTimeZoneOffset(RentalStopFreeRangeGroup_RentalStopToDateTime.dateTimeValue(), userTimezone);
                }
                break;

            case FINAmendmentType::FullCredit:
                TransDateTime fullCreditStartDateTime, fullCreditEndDateTime;
                [fullCreditStartDateTime, fullCreditEndDateTime] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(_custInvoiceTrans.InvoiceId, _custInvoiceTrans.TableId, _custInvoiceTrans.RecId);
        
                _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom = fullCreditStartDateTime;
                _tmpInvoicePeriodAmendment.EffectiveDateTimeTo = fullCreditEndDateTime;
                break;

            case FINAmendmentType::ManualPriceComponents:
                _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom = invoiceStartDateTime;
                _tmpInvoicePeriodAmendment.EffectiveDateTimeTo = invoiceEndDateTime;
                break;

            case FINAmendmentType::RateCode:
                TransDateTime invoiceStartDateTimeToCredit, invoiceEndDateTimeToCredit;
                [invoiceStartDateTimeToCredit, invoiceEndDateTimeToCredit] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(_custInvoiceTrans.InvoiceId, _custInvoiceTrans.TableId, _custInvoiceTrans.RecId);

                _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom = invoiceStartDateTimeToCredit;
                _tmpInvoicePeriodAmendment.EffectiveDateTimeTo = invoiceEndDateTimeToCredit;
                break;

            default:
                if (_tmpInvoicePeriodAmendment.TradeType != RORTradeType::SalesPurch)
                {
                    _tmpInvoicePeriodAmendment.EffectiveDateTimeFrom = DateTimeUtil::removeTimeZoneOffset(EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue(), userTimezone);
                    _tmpInvoicePeriodAmendment.EffectiveDateTimeTo = DateTimeUtil::removeTimeZoneOffset(EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue(), userTimezone);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpAmendmentDefaults</Name>
				<Source><![CDATA[
    private void initTmpAmendmentDefaults(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        _tmpInvoicePeriodAmendment.Description = amendmentSubType != FINAmendmentSubType::None ?
                                                                     enum2Str(amendmentType) + ' - ' + enum2Str(amendmentSubType) :
                                                                     enum2Str(amendmentType);
        _tmpInvoicePeriodAmendment.AmendmentType = amendmentType;
        _tmpInvoicePeriodAmendment.AmendmentSubType = amendmentSubType;
        _tmpInvoicePeriodAmendment.ReasonText = ReasonText.text();
        _tmpInvoicePeriodAmendment.ReasonCode = ReasonCode.text();
        _tmpInvoicePeriodAmendment.ContactPersonId = ContactPerson.text();

        _tmpInvoicePeriodAmendment.MustRecalculatePrice = RateCodeGroup_MustRecalculatePrice.checked();
        _tmpInvoicePeriodAmendment.MustReinvoice = FullCreditGroup_MustReinvoice.checked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpAmendmentValues</Name>
				<Source><![CDATA[
    private void initTmpAmendmentValues(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        CustInvoiceTrans custInvoiceTransToCredit;

        switch (amendmentType)
        {
            case FINAmendmentType::Price:
                custInvoiceTransToCredit = CustInvoiceTrans::findRecId(_tmpInvoicePeriodAmendment.CustInvoiceTransRecId);

                if (custInvoiceTransToCredit.RORTradeType == RORTradeType::SalesPurch)
                {
                    if (amendmentSubType == FINAmendmentSubType::Gross)
                    {
                        _tmpInvoicePeriodAmendment.OldRealValue = custInvoiceTransToCredit.SalesPrice;
                    }
                    else
                    {
                        RORRentalNetAmount netAmount = custInvoiceTransToCredit.LinePercent ?
                                                       custInvoiceTransToCredit.SalesPrice * (1 - custInvoiceTransToCredit.LinePercent / 100) :
                                                       custInvoiceTransToCredit.SalesPrice;
            
                        _tmpInvoicePeriodAmendment.OldRealValue = netAmount;
                    }
                }
                else
                {
                    FINRentalInvoiceDetailHelper rentalInvoiceDetailHelper = FINRentalInvoiceDetailHelper::getRentalInvoiceDetails(custInvoiceTransToCredit);

                    if (amendmentSubType == FINAmendmentSubType::Gross)
                    {
                        _tmpInvoicePeriodAmendment.OldRealValue = rentalInvoiceDetailHelper.grossPrice;
                    }
                    else
                    {
                        RORRentalNetAmount netAmount = rentalInvoiceDetailHelper.discPct ?
                                                       rentalInvoiceDetailHelper.grossPrice * (1 - rentalInvoiceDetailHelper.discPct / 100) :
                                                       rentalInvoiceDetailHelper.grossPrice;

                        _tmpInvoicePeriodAmendment.OldRealValue = netAmount;
                    }

                    FINRentalInvoiceDetailPeriod rentalInvoiceDetailPeriod;
        
                    select firstonly RateCode from rentalInvoiceDetailPeriod
                    where rentalInvoiceDetailPeriod.RefTableId == custInvoiceTransToCredit.TableId
                    &&    rentalInvoiceDetailPeriod.RefRecId == custInvoiceTransToCredit.RecId;

                    _tmpInvoicePeriodAmendment.RateCodeSymbol = rentalInvoiceDetailPeriod.RateCode;
                }
                
                _tmpInvoicePeriodAmendment.NewRealValue = EquipmentPriceGroup_NewPrice.realValue();
                break;

            case FINAmendmentType::RentalStop:
                _tmpInvoicePeriodAmendment.OldStrValue = '';
                _tmpInvoicePeriodAmendment.NewStrValue = amendmentSubType == FINAmendmentSubType::RentalStop ? rentalParameters.RentalStopCalendar : rentalParameters.RentalActiveCalendar;
                break;

            case FINAmendmentType::RateCode:
                custInvoiceTransToCredit = CustInvoiceTrans::findRecId(_tmpInvoicePeriodAmendment.CustInvoiceTransRecId);
                FINRentalInvoiceDetailHelper rentalInvoiceDetailHelper = FINRentalInvoiceDetailHelper::getRentalInvoiceDetails(custInvoiceTransToCredit);
                FINRentalInvoiceDetailPeriod rentalInvoiceDetailPeriod;
        
                select firstonly RateCode from rentalInvoiceDetailPeriod
                where rentalInvoiceDetailPeriod.RefTableId == custInvoiceTransToCredit.TableId
                &&    rentalInvoiceDetailPeriod.RefRecId == custInvoiceTransToCredit.RecId;

                _tmpInvoicePeriodAmendment.OldRateCode = UnitOfMeasure::findBySymbol(rentalInvoiceDetailPeriod.RateCode).RecId;
                _tmpInvoicePeriodAmendment.NewRateCode = RateCodeGroup_RateCode.value();

                if (RateCodeGroup_MustRecalculatePrice.checked())
                {
                    Factor factor = UnitOfMeasureConverter::convert(1, RateCodeGroup_RateCode.value(), _tmpInvoicePeriodAmendment.OldRateCode, NoYes::No);
                    _tmpInvoicePeriodAmendment.OldRealValue = rentalInvoiceDetailHelper.grossPrice;
                    _tmpInvoicePeriodAmendment.NewRealValue = rentalInvoiceDetailHelper.grossPrice * factor;
                }
                break;

            case FINAmendmentType::FullCredit :
                _tmpInvoicePeriodAmendment.OldStrValue = '';
                _tmpInvoicePeriodAmendment.NewStrValue = enum2Str(FINAmendmentType::FullCredit);
                break;

            case FINAmendmentType::Insurance :
                _tmpInvoicePeriodAmendment.OldRealValue = _tmpInvoicePeriodAmendment.AmendmentSubType == FINAmendmentSubType::Percentage ? InsuranceGroup_Percentage.realValue() : InsuranceGroup_Amount.realValue();
                _tmpInvoicePeriodAmendment.NewRealValue = InsuranceGroup_NewChangedValue.realValue();
                break;
                
            case FINAmendmentType::ManualCredit :
                _tmpInvoicePeriodAmendment.OldRealValue = 0;
                _tmpInvoicePeriodAmendment.NewRealValue = ManualCreditGroup_CreditAmount.realValue();
                break;

            default:
                break; // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpInvoicePeriodAmendment</Name>
				<Source><![CDATA[
    public void initTmpInvoicePeriodAmendment(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment, CustInvoiceTrans _custInvoiceTrans)
    {
        _tmpInvoicePeriodAmendment.clear();
        element.initTmpAmendmentDefaults(_tmpInvoicePeriodAmendment);
        _tmpInvoicePeriodAmendment.initFromSalesLine(SalesLine::findInventTransId(_custInvoiceTrans.InventTransId));
        _tmpInvoicePeriodAmendment.initFromCustInvoiceTrans(_custInvoiceTrans);
        element.initTmpAmendmentDateTimes(_tmpInvoicePeriodAmendment, _custInvoiceTrans);
        element.initTmpAmendmentValues(_tmpInvoicePeriodAmendment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertManualPriceCompontentsTmpAmendments</Name>
				<Source><![CDATA[
    public boolean insertManualPriceCompontentsTmpAmendments()
    {
        boolean ret = false;

        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendmentToInsert;
        tmpInvoicePeriodAmendmentToInsert.setTmpData(tmpInvoicePeriodAmendment);
        FINTmpManualPriceComponent tmpManualPriceComponentRef;
        tmpManualPriceComponentRef.setTmpData(tmpManualPriceComponent);

        while select tmpManualPriceComponentRef
        {
            tmpInvoicePeriodAmendmentToInsert.clear();
            element.initTmpInvoicePeriodAmendment(tmpInvoicePeriodAmendmentToInsert, custInvoiceTrans);
            tmpInvoicePeriodAmendmentToInsert.initFromTmpManualPriceComponent(tmpManualPriceComponentRef);

            if (element.validateTmpAmendment(tmpInvoicePeriodAmendmentToInsert))
            {
                tmpInvoicePeriodAmendmentToInsert.insert();
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMiscellaneousChargesTmpAmendments</Name>
				<Source><![CDATA[
    public boolean insertMiscellaneousChargesTmpAmendments()
    {
        boolean ret = false;

        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendmentToInsert;
        tmpInvoicePeriodAmendmentToInsert.setTmpData(tmpInvoicePeriodAmendment);
        FINTmpMarkupTrans tmpMarkupTransRef;
        tmpMarkupTransRef.setTmpData(tmpMarkupTrans);

        while select tmpMarkupTransRef
        {
            tmpInvoicePeriodAmendmentToInsert.clear();

            element.initTmpAmendmentDefaults(tmpInvoicePeriodAmendmentToInsert);
            tmpInvoicePeriodAmendmentToInsert.initFromTmpMarkupTrans(tmpMarkupTransRef);

            if (amendmentSubType == FINAmendmentSubType::Line)
            {
                tmpInvoicePeriodAmendmentToInsert.initFromSalesLine(SalesLine::findInventTransId(custInvoiceTrans.InventTransId));
                tmpInvoicePeriodAmendmentToInsert.initFromCustInvoiceTrans(custInvoiceTrans);
            }
            else
            {
                tmpInvoicePeriodAmendmentToInsert.OrderId = MiscellaneousChargesGroup_OrderIdFilter.text();
            }

            if (element.validateTmpAmendment(tmpInvoicePeriodAmendmentToInsert)
            &&  element.validateMiscChargeTmpAmendment(tmpInvoicePeriodAmendmentToInsert))
            {
                tmpInvoicePeriodAmendmentToInsert.insert();
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultTmpAmendmentsMultiSelect</Name>
				<Source><![CDATA[
    public boolean insertDefaultTmpAmendmentsMultiSelect()
    {
        boolean isInserted;
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(custInvoiceTrans_ds);
        CustInvoiceTrans custInvoiceTransSelected = helper.getFirst();
                        
        while (custInvoiceTransSelected.RecId != 0)
        {
            // In case of a rental stop, supplementary lines will be added by the cascadeRentalStopToChildLines method
            // We skip the validation and addition of such supplementary lines to avoid confusing warnings
            if (amendmentType == FINAmendmentType::RentalStop)
            {
                SalesLine salesLine, salesLineParent;

                select firstonly RecId, InventTransId from salesLine
                where salesLine.InventTransId == custInvoiceTransSelected.InventTransId
                    join TableId from salesLineParent
                    where salesLineParent.RecId == salesLine.RORParentLineRecId;
                            
                if (salesLine)
                {
                    select firstonly RecId from validateTmpInvoicePeriodAmendment
                    where validateTmpInvoicePeriodAmendment.InventTransId == salesLine.InventTransId;

                    if (validateTmpInvoicePeriodAmendment)
                    {
                        custInvoiceTransSelected = helper.getNext();
                        continue;
                    }
                }
            }

            element.initTmpInvoicePeriodAmendment(tmpInvoicePeriodAmendment, custInvoiceTransSelected);

            if (element.validateTmpAmendment(tmpInvoicePeriodAmendment))
            {
                tmpInvoicePeriodAmendment.insert();
                element.cascadeRentalStopToChildLines(tmpInvoicePeriodAmendment);
                isInserted = true;
            }

            custInvoiceTransSelected = helper.getNext();
        }

        return isInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultTmpAmendmentsSingleSelect</Name>
				<Source><![CDATA[
    public boolean insertDefaultTmpAmendmentsSingleSelect()
    {
        boolean isInserted;

        element.initTmpInvoicePeriodAmendment(tmpInvoicePeriodAmendment, custInvoiceTrans);

        if (element.validateTmpAmendment(tmpInvoicePeriodAmendment))
        {
            tmpInvoicePeriodAmendment.insert();
            isInserted = true;
        }

        return isInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMiscChargeTmpAmendment</Name>
				<Source><![CDATA[
    private boolean validateMiscChargeTmpAmendment(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        boolean ret = true;

        if (amendmentType != FINAmendmentType::MiscellaneousCharges)
        {
            return true;
        }

        select firstonly RecId from validateTmpInvoicePeriodAmendment
        where validateTmpInvoicePeriodAmendment.MarkupTransRecId == _tmpInvoicePeriodAmendment.MarkupTransRecId;

        if (validateTmpInvoicePeriodAmendment.RecId)
        {
            ret = checkFailed(strFmt("@DNR:AmendmentAlreadyExists"));
        }
       
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFullCreditTmpAmendments</Name>
				<Source><![CDATA[
    public boolean insertFullCreditTmpAmendments()
    {
        boolean ret = element.validateAmendmentCombinationsFullCredit();
        ret = ret && element.validateConversionJournalPosted();

        if (ret)
        {
            if (amendmentSubType == FINAmendmentSubType::Line)
            {
                element.initTmpInvoicePeriodAmendment(tmpInvoicePeriodAmendment, custInvoiceTrans);
                ret = ret && element.validateTmpAmendment(tmpInvoicePeriodAmendment);

                if (ret)
                {
                    tmpInvoicePeriodAmendment.insert();
                }
            }
            else if (amendmentSubType == FINAmendmentSubType::Order)
            {
                CustInvoiceTrans custInvoiceTransSameOrder;
                SalesLine salesLine;
                FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendmentToInsert;
                tmpInvoicePeriodAmendmentToInsert.setTmpData(tmpInvoicePeriodAmendment);

                while select custInvoiceTransSameOrder
                where custInvoiceTransSameOrder.OrigSalesId == FullCreditGroup_OrderIdFilter.text()
                &&    custInvoiceTransSameOrder.InvoiceDate == custInvoiceJour.InvoiceDate
                &&    custInvoiceTransSameOrder.InvoiceId == custInvoiceJour.InvoiceId
                &&    custInvoiceTransSameOrder.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
                {
                    tmpInvoicePeriodAmendmentToInsert.clear();
                    element.initTmpInvoicePeriodAmendment(tmpInvoicePeriodAmendmentToInsert, custInvoiceTransSameOrder);
                    ret = ret && element.validateTmpAmendment(tmpInvoicePeriodAmendmentToInsert);

                    if (ret)
                    {
                        tmpInvoicePeriodAmendmentToInsert.insert();
                    }
                }
            }
            else if (amendmentSubType == FINAmendmentSubType::Invoice)
            {
                CustInvoiceTrans custInvoiceTransSameInvoice;
                SalesLine salesLine;
                FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendmentToInsert;
                tmpInvoicePeriodAmendmentToInsert.setTmpData(tmpInvoicePeriodAmendment);

                while select custInvoiceTransSameInvoice
                where custInvoiceTransSameInvoice.SalesId == custInvoiceTrans.SalesId
                &&    custInvoiceTransSameInvoice.InvoiceDate == custInvoiceTrans.InvoiceDate
                &&    custInvoiceTransSameInvoice.InvoiceId == custInvoiceTrans.InvoiceId
                &&    custInvoiceTransSameInvoice.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup
                {
                    tmpInvoicePeriodAmendmentToInsert.clear();
                    element.initTmpInvoicePeriodAmendment(tmpInvoicePeriodAmendmentToInsert, custInvoiceTransSameInvoice);
                    ret = element.validateTmpAmendment(tmpInvoicePeriodAmendmentToInsert);

                    if (ret)
                    {
                        tmpInvoicePeriodAmendmentToInsert.insert();
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeRentalStopToChildLines</Name>
				<Source><![CDATA[
    public void cascadeRentalStopToChildLines(FINTmpInvoicePeriodAmendment _tmpInvoicePeriodAmendment)
    {
        if (_tmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::RentalStop)
        {
            SalesLine salesLineChild;
            CustInvoiceTrans custInvoiceTransChild;
            SalesLine salesLineParent;

            FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendmentChild;
            tmpInvoicePeriodAmendmentChild.setTmpData(_tmpInvoicePeriodAmendment);

            while select salesLineChild
            where salesLineChild.RORTradeType != RORTradeType::SalesPurch
                join custInvoiceTransChild
                where custInvoiceTransChild.InventTransId == salesLineChild.InventTransId
                &&    custInvoiceTransChild.InvoiceId == custInvoiceJour.InvoiceId
                    join TableId from salesLineParent
                    where salesLineParent.SalesId == salesLineChild.SalesId
                    &&    salesLineParent.RecId == salesLineChild.RORParentLineRecId
                    &&    salesLineParent.DNRCalendarId == salesLineChild.DNRCalendarId
                    &&    salesLineParent.InventTransId == _tmpInvoicePeriodAmendment.InventTransId
            {
                buf2Buf(_tmpInvoicePeriodAmendment, tmpInvoicePeriodAmendmentChild);
                tmpInvoicePeriodAmendmentChild.initFromSalesLine(salesLineChild);
                tmpInvoicePeriodAmendmentChild.initFromCustInvoiceTrans(custInvoiceTransChild);

                if (element.validateTmpAmendment(tmpInvoicePeriodAmendmentChild))
                {
                    tmpInvoicePeriodAmendmentChild.insert();
                    this.cascadeRentalStopToChildLines(tmpInvoicePeriodAmendmentChild);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    public FINTmpInvoicePeriodAmendment getTmpData()
    {
        FINTmpInvoicePeriodAmendment tmpInvoicePeriodAmendmentRef;
        tmpInvoicePeriodAmendmentRef.setTmpData(tmpInvoicePeriodAmendment);

        return tmpInvoicePeriodAmendmentRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCalculationDateTime</Name>
				<Source><![CDATA[
    public INVCalculationDateTime getInvoiceCalculationDateTime()
    {
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
        CustInvoiceTrans custInvoiceTransLoc;

        select maxof(PeriodEndDateTime) from journalizedInvoicePeriod
            exists join custInvoiceTransLoc
            where custInvoiceTransLoc.RecId == journalizedInvoicePeriod.RefRecId
            &&    custInvoiceTransLoc.TableId == journalizedInvoicePeriod.RefTableId
            &&    custInvoiceTransLoc.SalesId == custInvoiceJour.SalesId
            &&    custInvoiceTransLoc.InvoiceId == custInvoiceJour.InvoiceId
            &&    custInvoiceTransLoc.InvoiceDate == custInvoiceJour.InvoiceDate
            &&    custInvoiceTransLoc.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

        return journalizedInvoicePeriod.PeriodEndDateTime ? journalizedInvoicePeriod.PeriodEndDateTime : DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInvalidInitFormMethodWarning", "Validation of caller must be performed before invoking super()")]
    public void init()
    {
        if (element.args() && element.args().caller() is FINRentalCreditWizard)
        {
            sysWizard = element.args().caller();
        }
        else
        {
            throw error(Error::missingParameter(null));
        }

        sysWizard.preFormRunInit();

        super();

        validateTmpInvoicePeriodAmendment.setTmpData(tmpInvoicePeriodAmendment);

        userTimezone = DateTimeUtil::getUserPreferredTimeZone();
        rentalParameters = RORParameters::find();
        sysWizard.postFormRunInit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAmendmentUpdateFields</Name>
				<Source><![CDATA[
    public void clearAmendmentUpdateFields()
    {
        FormBuildControl UpdateTabPageContentGroupCtrl = element.form().design().control(formControlStr(FINRentalCreditWizard, UpdateTabPageContentGroup));
        element.clearFormControls(UpdateTabPageContentGroupCtrl);

        if (amendmentType == FINAmendmentType::MiscellaneousCharges)
        {
            delete_from tmpMarkupTrans;
        }
        else if (amendmentType == FINAmendmentType::ManualPriceComponents)
        {
            delete_from tmpManualPriceComponent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableAmendmentUpdateFields</Name>
				<Source><![CDATA[
    public void enableDisableAmendmentUpdateFields(boolean _enabled)
    {
        boolean forceAmendmentUpdateSectionEnabled = (amendmentType == FINAmendmentType::MiscellaneousCharges
                                                   || amendmentType == FINAmendmentType::RentalStop
                                                   || amendmentType == FINAmendmentType::Price
                                                   || amendmentType == FINAmendmentType::RateCode);

        FormBuildControl UpdateTabPageContentGroupCtrl = element.form().design().control(formControlStr(FINRentalCreditWizard, UpdateTabPageContentGroup));
        element.enableDisableFormControls(UpdateTabPageContentGroupCtrl, _enabled || forceAmendmentUpdateSectionEnabled);

        this.enableDisableAmendmentUpdateFieldsByScenario();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableAmendmentUpdateFieldsByScenario</Name>
				<Source><![CDATA[
    private void enableDisableAmendmentUpdateFieldsByScenario()
    {
        disableEffectivityDateTimeGroup = (amendmentType == FINAmendmentType::RateCode
                                        || amendmentType == FINAmendmentType::FullCredit
                                        || amendmentType == FINAmendmentType::Insurance
                                        || amendmentType == FINAmendmentType::ManualCredit);

        EffectivityDateTimeGroup.enabled(!disableEffectivityDateTimeGroup);

        UpdateTabPageManualCreditGroup.enabled(amendmentType == FINAmendmentType::ManualCredit);
        ManualCreditGroup_UpdateType.enabled(amendmentType == FINAmendmentType::ManualCredit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFormControls</Name>
				<Source><![CDATA[
    private void clearFormControls(FormBuildControl _formBuildControl)
    {
        for (int i = 1; i <= _formBuildControl.controlCount(); i++)
        {
            FormBuildControl formBuildControl = _formBuildControl.controlNum(i);

            switch (ClassId2Name(classIdGet(element.control(formBuildControl.id()))))
            {
                case classStr(FormStringControl):
                    FormStringControl formStringControl = element.control(formBuildControl.id());
                    formStringControl.text('');
                    break;

                case classStr(FormIntControl):
                    FormIntControl formIntControl = element.control(formBuildControl.id());
                    formIntControl.value(0);
                    break;

                case classStr(FormInt64Control):
                    FormInt64Control formInt64Control = element.control(formBuildControl.id());
                    formInt64Control.value(0);
                    break;

                case classStr(FormRealControl):
                    FormRealControl formRealControl = element.control(formBuildControl.id());
                    formRealControl.realValue(0);
                    break;

                case classStr(FormTimeControl):
                    FormTimeControl formTimeControl = element.control(formBuildControl.id());
                    formTimeControl.value(0);
                    break;

                case classStr(FormCheckBoxControl):
                    FormCheckBoxControl formCheckBoxControl = element.control(formBuildControl.id());
                    formCheckBoxControl.value(0);
                    break;

                case classStr(FormDateControl):
                    FormDateControl formDateControl = element.control(formBuildControl.id());
                    Date emptyDate;

                    formDateControl.dateValue(emptyDate);
                    break;

                case classStr(FormDateTimeControl):
                    FormDateTimeControl formDateTimeControl = element.control(formBuildControl.id());
                    utcdatetime emptyDateTime;

                    formDateTimeControl.dateTimeValue(emptyDateTime);
                    break;

                case classStr(FormReferenceGroupControl):
                    FormReferenceGroupControl formReferenceGroupControl = element.control(formBuildControl.id());
                    formReferenceGroupControl.value(0);
                    break;
            }

            if (formBuildControl.isContainer())
            {
                element.clearFormControls(formBuildControl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableFormControls</Name>
				<Source><![CDATA[
    private void enableDisableFormControls(FormBuildControl _formBuildControl, boolean _enabled)
    {
        for (int i = 1; i <= _formBuildControl.controlCount(); i++)
        {
            FormBuildControl formBuildControl = _formBuildControl.controlNum(i);
            FormControl formControl = element.control(formBuildControl.id());
            formControl.enabled(_enabled);

            if (formBuildControl.isContainer())
            {
                element.enableDisableFormControls(formBuildControl, _enabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wizard</Name>
				<Source><![CDATA[
    SysWizard wizard()
    {
        return sysWizard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        sysWizard.setIsProforma(false);
        sysWizard.processInvoice();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2022. Method has been made obsolete because the same has been achieved when calling ttsabort from the proforma calculation", false)]
    public void closeCancel()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustInvoiceJour</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            qbrInvoiceNum = this.queryBuildDataSource().addRange(fieldNum(CustInvoiceJour, InvoiceId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CustInvoiceTrans</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret = super();

            [invoiceStartDateTime, invoiceEndDateTime] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(custInvoiceTrans.InvoiceId, custInvoiceTrans.TableId, custInvoiceTrans.RecId);
            invoiceStartDateTimeInTimezone = DateTimeUtil::applyTimeZoneOffset(invoiceStartDateTime, userTimezone);
            invoiceEndDateTimeInTimezone = DateTimeUtil::applyTimeZoneOffset(invoiceEndDateTime, userTimezone);

            this.updateDesign();
    
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateDesign</Name>
						<Source><![CDATA[
        private void updateDesign()
        {
            boolean isRentalLine = (custInvoiceTrans.RORTradeType == RORTradeType::Rental || custInvoiceTrans.RORTradeType == RORTradeType::SubRental);
            CustInvoiceTransPeriods.enabled(isRentalLine);

            if (custInvoiceTrans_ds.recordsMarked().lastIndex() < 2)
            {
                element.clearAmendmentUpdateFields();
                element.enableDisableAmendmentUpdateFields(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            qbrTradeType = this.queryBuildDataSource().addRange(fieldNum(CustInvoiceTrans, DataAreaId));
            qbrTradeType.status(RangeStatus::Locked);

            QueryBuildDataSource qbdsSalesLine = this.queryBuildDataSource().addDataSource(tableNum(SalesLine));
            qbdsSalesLine.joinMode(JoinMode::ExistsJoin);
            qbdsSalesLine.addLink(fieldNum(CustInvoiceTrans, InventTransId), fieldNum(SalesLine, InventTransId));

            qbrSellFixedAsset = qbdsSalesLine.addRange(fieldNum(SalesLine, BOBSellFixedAsset));
            qbrSellFixedAsset.status(RangeStatus::Locked);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayInvoiceStartDateTime</Name>
						<Source><![CDATA[
        display TransDateTime displayInvoiceStartDateTime(CustInvoiceTrans _custInvoiceTrans)
        {
            TransDateTime displayInvoiceStartDateTime, displayInvoiceEndDateTime;
            [displayInvoiceStartDateTime, displayInvoiceEndDateTime] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(_custInvoiceTrans.InvoiceId, _custInvoiceTrans.TableId, _custInvoiceTrans.RecId);

            return displayInvoiceStartDateTime;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayInvoiceEndDateTime</Name>
						<Source><![CDATA[
        display TransDateTime displayInvoiceEndDateTime(CustInvoiceTrans _custInvoiceTrans)
        {
            TransDateTime displayInvoiceStartDateTime, displayInvoiceEndDateTime;
            [displayInvoiceStartDateTime, displayInvoiceEndDateTime] = FINJournalizedInvoicePeriod::getInvoiceStartEndDate(_custInvoiceTrans.InvoiceId, _custInvoiceTrans.TableId, _custInvoiceTrans.RecId);

            return displayInvoiceEndDateTime;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TmpInvoicePeriodAmendment</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            qbrAmendmentType =  this.queryBuildDataSource().addRange(fieldNum(FINTmpInvoicePeriodAmendment, AmendmentType));
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            CreateAmendmentTabPage.setNextEnabled();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret = super();

            this.updateDesign();
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateDesign</Name>
						<Source><![CDATA[
        private void updateDesign()
        {
            FINTmpInvoicePeriodAmendment tmpinvoicePeriodAmendmentLocal = this.cursor();
            FINCustInvoiceTransPeriods.enabled(tmpinvoicePeriodAmendmentLocal.TradeType != RORTradeType::SalesPurch);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>FilterTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            this.setNextEnabled();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setNextEnabled</Name>
						<Source><![CDATA[
        public void setNextEnabled(boolean _forceDisabled = false)
        {
            sysWizard.nextEnabled(!_forceDisabled && custInvoiceJour.RecId ? true : false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OrderIdFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            SalesTable salesTableLoc = SalesTable::find(this.text());
            
            if (salesTableLoc)
            {
                CustAccountFilter.text(salesTableLoc.InvoiceAccount);
            }
    
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbdsSalesTable = query.addDataSource(tableNum(SalesTable));

            qbdsSalesTable.addRange(fieldNum(SalesTable, SalesType)).value(queryValue(SalesType::RORRental));
            qbdsSalesTable.addSortField(fieldNum(SalesTable, CreatedDateTime), SortOrder::Descending);

            if (CustAccountFilter.text())
            {
                qbdsSalesTable.addRange(fieldNum(SalesTable, InvoiceAccount)).value(CustAccountFilter.text());
            }

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), this);
            sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId), true);
            sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InvoiceNumFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbdsCustInvoiceJour = query.addDataSource(tableNum(CustInvoiceJour));

            qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, SalesType)).value(queryValue(SalesType::RORRental));

            if (CustAccountFilter.text())
            {
                qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceAccount)).value(CustAccountFilter.text());
            }

            if (OrderIdFilter.text())
            {
                qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, SalesId)).value(OrderIdFilter.text());
            }

            if (CustomerRequisitionFilter.text())
            {
                qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, PurchaseOrder)).value(CustomerRequisitionFilter.text());
            }

            QueryBuildDataSource qbdsCustInvoiceTable = qbdsCustInvoiceJour.addDataSource(tableNum(CustInvoiceTable));
            qbdsCustInvoiceTable.joinMode(JoinMode::NoExistsJoin);
            qbdsCustInvoiceTable.addLink(fieldNum(CustInvoiceJour, InvoiceId), fieldNum(CustInvoiceTable, InvoiceId));
 
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustInvoiceJour), this);
            sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceId), true);
            sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceAccount));
            sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, SalesId));
            sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceDate));
            sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, LedgerVoucher));
            sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, CurrencyCode));
            sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceAmount));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            CustInvoiceId curInvoiceId = this.text();

            CustInvoiceJour custInvoiceJourLoc;
            CustInvoiceTable custInvoiceTableLoc;
                
            select firstonly RecId, InvoiceAccount from custInvoiceJourLoc
            where custInvoiceJourLoc.InvoiceId == curInvoiceId
                notexists join custInvoiceTableLoc
                where custInvoiceTableLoc.InvoiceId == custInvoiceJourLoc.InvoiceId;
            
            if (custInvoiceJourLoc.RecId)
            {
                qbrInvoiceNum.value(curInvoiceId);
                qbrInvoiceNum.status(RangeStatus::Locked);
                CustInvoiceJour_ds.executeQuery();

                FilterTabPage.setNextEnabled();
                CustAccountFilter.text(custInvoiceJourLoc.InvoiceAccount);
                sysWizard.setCustInvoiceJour(custInvoiceJour);
            }
            else
            {
                FilterTabPage.setNextEnabled(true);
                CustAccountFilter.text('');
            }

            if (selectedInvoiceId != curInvoiceId)
            {
                selectedInvoiceId = curInvoiceId;

                AmendmentTypeRadioButton.selection(enum2int(FINAmendmentType::Price));
                AmendmentTypeRadioButton.selectionChange();
                delete_from tmpInvoicePeriodAmendment;
            }
                                       
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProductRoadmapImage</Name>
				<Type>Image</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            new Browser().navigate(#ideasPortalNavigationURL);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FeedbackImage</Name>
				<Type>Image</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            SMTPUserName userName = SysEmailParameters::find().SMTPUserName;

            if (userName)
            {
                var messageBuilder = new SysMailerMessageBuilder();
                messageBuilder.addTo(#feedbackEmailAddress)
                              .setSubject("@DNR:RentalCreditWizardFeedback")
                              .setFrom(userName);
                SysMailerFactory::sendInteractive(messageBuilder.getMessage());
            }
            else
            {
                warning("@DNR:EmailSetupMissing");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AmendmentTypeRadioButton</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret = super();

            amendmentType = this.selection();
            this.setAmendmentTypeHelpText();
    
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>setAmendmentTypeHelpText</Name>
						<Source><![CDATA[
        private void setAmendmentTypeHelpText()
        {
            FreeText helpText;

            switch (amendmentType)
            {
                case FINAmendmentType::Price :
                    helpText = "@DNR:AmendmentTypePriceHelpText";
                    break;

                case FINAmendmentType::RentalStop :
                    helpText = "@DNR:AmendmentTypeRentalStopHelpText";
                    break;

                case FINAmendmentType::RateCode :
                    helpText = "@DNR:AmendmentTypeRateCodeHelpText";
                    break;
                    
                case FINAmendmentType::FullCredit :
                    helpText = "@DNR:AmendmentTypeFullCreditHelpText";
                    break;

                case FINAmendmentType::MiscellaneousCharges :
                    helpText = "@DNR:AmendmentTypeMiscChargeHelpText";
                    break;

                case FINAmendmentType::Insurance :
                    helpText = "@DNR:AmendmentTypeInsuranceHelpText";
                    break;

                case FINAmendmentType::ManualPriceComponents :
                    helpText = "@DNR:AmendmentTypeManualPriceComponentHelpText";
                    break;

                case FINAmendmentType::ManualCredit :
                    helpText = "@DNR:AmendmentTypeManualCreditHelpText";
                    break;
            }

            AmendmentTypeHelpText.text(helpText);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateAmendmentTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            if (this.validateAmendmentScenarioCombinations())
            {
                prevAmendmentType = amendmentType;
                
                this.enableQueryRanges();
                this.refreshData();
                this.updateDesign();
                this.setNextEnabled();

                CreateAmendmentsInvoiceDetailsGroup.setFocus();
            }
            else
            {
                sysWizard.back();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>enableQueryRanges</Name>
						<Source><![CDATA[
        private void enableQueryRanges()
        {
            if (amendmentType == FINAmendmentType::RateCode
            ||  amendmentType == FINAmendmentType::ManualCredit
            ||  amendmentType == FINAmendmentType::ManualPriceComponents
            ||  amendmentType == FINAmendmentType::RentalStop)
            {
                qbrTradeType.value(strFmt("(%1.%2 == %3) || (%1.%2 == %4)",
                                              CustInvoiceTrans_ds.queryBuildDataSource().name(),
                                              fieldStr(CustInvoiceTrans, RORTradeType),
                                              any2int(RORTradeType::Rental),
                                              any2int(RORTradeType::SubRental)));
                qbrTradeType.enabled(true);
            }
            else
            {
                qbrTradeType.enabled(false);
            }

            if (amendmentType != FINAmendmentType::FullCredit)
            {
                qbrSellFixedAsset.value(queryValue(NoYes::No));
                qbrSellFixedAsset.enabled(true);
            }
            else
            {
                qbrSellFixedAsset.enabled(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateAmendmentScenarioCombinations</Name>
						<Source><![CDATA[
        private boolean validateAmendmentScenarioCombinations()
        {
            boolean ret = true;

            if (prevAmendmentType != amendmentType)
            {
                select firstonly RecId, AmendmentType from validateTmpInvoicePeriodAmendment
                where validateTmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::FullCredit || validateTmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::MiscellaneousCharges;

                if (validateTmpInvoicePeriodAmendment.RecId)
                {
                    ret = checkFailed(strFmt("@DNR:InvalidAmendmentCombinationFullCredit", enum2str(validateTmpInvoicePeriodAmendment.AmendmentType)));
                }

                if (ret)
                {
                    if (amendmentType == FINAmendmentType::Price
                    ||  amendmentType == FINAmendmentType::RateCode)
                    {
                        FINAmendmentType validateAmendmentType;
                        validateAmendmentType = amendmentType == FINAmendmentType::Price ?
                                                FINAmendmentType::RateCode :
                                                FINAmendmentType::Price;

                        select firstonly RecId from validateTmpInvoicePeriodAmendment
                        where validateTmpInvoicePeriodAmendment.AmendmentType == validateAmendmentType;

                        if (validateTmpInvoicePeriodAmendment.RecId)
                        {
                            ret = checkFailed(strFmt("@DNR:InvalidAmendmentCombination", enum2str(amendmentType), enum2str(validateAmendmentType)));
                        }

                        if (ret && amendmentType == FINAmendmentType::Price)
                        {
                            select firstonly RecId from validateTmpInvoicePeriodAmendment
                            where validateTmpInvoicePeriodAmendment.AmendmentType   == FINAmendmentType::Insurance
                            &&    validateTmpInvoicePeriodAmendment.TradeType       != RORTradeType::SalesPurch;

                            if (validateTmpInvoicePeriodAmendment.RecId)
                            {
                                ret = checkFailed(strFmt("@DNR:CombinationOfInsurnaceAndPriceNotSupported"));
                            }
                        }

                        if (ret && amendmentType == FINAmendmentType::RateCode)
                        {
                            select firstonly RecId from validateTmpInvoicePeriodAmendment
                            where validateTmpInvoicePeriodAmendment.AmendmentType == FINAmendmentType::Insurance;

                            if (validateTmpInvoicePeriodAmendment.RecId)
                            {
                                ret = checkFailed(strFmt("@DNR:InvalidAmendmentCombination", enum2str(amendmentType), FINAmendmentType::Insurance));
                            }
                        }
                    }
                    else if (amendmentType == FINAmendmentType::FullCredit)
                    {
                        select firstonly RecId from validateTmpInvoicePeriodAmendment
                        where validateTmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::FullCredit;

                        if (validateTmpInvoicePeriodAmendment.RecId)
                        {
                            ret = checkFailed(strFmt("@DNR:InvalidAmendmentCombinationFullCredit", enum2str(FINAmendmentType::FullCredit)));
                        }
                    }
                    else if (amendmentType == FINAmendmentType::MiscellaneousCharges)
                    {
                        select firstonly RecId from validateTmpInvoicePeriodAmendment
                        where validateTmpInvoicePeriodAmendment.AmendmentType != FINAmendmentType::MiscellaneousCharges;

                        if (validateTmpInvoicePeriodAmendment.RecId)
                        {
                            ret = checkFailed(strFmt("@DNR:InvalidAmendmentCombinationFullCredit", enum2str(FINAmendmentType::MiscellaneousCharges)));
                        }
                    }
                    else if (amendmentType == FINAmendmentType::Insurance)
                    {
                        select firstonly RecId from validateTmpInvoicePeriodAmendment
                        where validateTmpInvoicePeriodAmendment.AmendmentType   == FINAmendmentType::Price
                        &&    validateTmpInvoicePeriodAmendment.TradeType       != RORTradeType::SalesPurch;

                        if (validateTmpInvoicePeriodAmendment.RecId)
                        {
                            ret = checkFailed(strFmt("@DNR:CombinationOfInsurnaceAndPriceNotSupported"));
                        }
                    }
                }

                if (ret)
                {
                    prevAmendmentType = amendmentType;
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>refreshData</Name>
						<Source><![CDATA[
        private void refreshData()
        {
            CustInvoiceTrans_ds.executeQuery();

            qbrAmendmentType.value(SysQuery::value(amendmentType));
            qbrAmendmentType.enabled(true);

            TmpInvoicePeriodAmendment_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateDesign</Name>
						<Source><![CDATA[
        private void updateDesign()
        {
            CreateAmendmentTabPage.caption(strFmt("%1 - %2", "@DNR:CreateAmendment", enum2Str(amendmentType)));

            UpdateTabPageEquipmentPriceGroup.visible(amendmentType == FINAmendmentType::Price);
            UpdateTabPageRentalStopGroup.visible(amendmentType == FINAmendmentType::RentalStop);
            UpdateTabPageFullCreditGroup.visible(amendmentType == FINAmendmentType::FullCredit);
            UpdateTabPageRateCodeGroup.visible(amendmentType == FINAmendmentType::RateCode);
            UpdateTabPageMiscChargesGroup.visible(amendmentType == FINAmendmentType::MiscellaneousCharges);
            UpdateTabPageInsuranceGroup.visible(amendmentType == FINAmendmentType::Insurance);
            UpdateTabPageManualCreditGroup.visible(amendmentType == FINAmendmentType::ManualCredit);
            UpdateTabPageManualPriceComponentsGroup.visible(amendmentType == FINAmendmentType::ManualPriceComponents);
            
            this.setDefaultAmendmentSubType();
            this.hideShowScenarioSpecificFields();
            element.clearAmendmentUpdateFields();
        }

]]></Source>
					</Method>
					<Method>
						<Name>hideShowScenarioSpecificFields</Name>
						<Source><![CDATA[
        protected void hideShowScenarioSpecificFields()
        {
            EffectivityDateTimeGroup.visible(amendmentType != FINAmendmentType::RentalStop 
                                          && amendmentType != FINAmendmentType::MiscellaneousCharges 
                                          && amendmentType != FINAmendmentType::ManualPriceComponents);

            ContactPerson.visible(amendmentType == FINAmendmentType::RentalStop);
            ContactPerson.mandatory(amendmentType == FINAmendmentType::RentalStop);

            UpdatedAmendmentsGrid_RateCodeSymbol.visible(amendmentType == FINAmendmentType::Price);

            UpdatedAmendmentsGrid_MarkupCode.visible(amendmentType == FINAmendmentType::MiscellaneousCharges);
            UpdatedAmendmentsGrid_MarkupCategory.visible(amendmentType == FINAmendmentType::MiscellaneousCharges);
            UpdatedAmendmentsGrid_EffectiveDateTimeFrom.visible(amendmentType != FINAmendmentType::MiscellaneousCharges);
            UpdatedAmendmentsGrid_EffectiveDateTimeTo.visible(amendmentType != FINAmendmentType::MiscellaneousCharges);
        }

]]></Source>
					</Method>
					<Method>
						<Name>setDefaultAmendmentSubType</Name>
						<Source><![CDATA[
        private void setDefaultAmendmentSubType()
        {
            FormComboBoxControl subTypeCtrl;
            amendmentSubType = FINAmendmentSubType::None;

            switch (amendmentType)
            {
                case FINAmendmentType::Price :
                    amendmentSubType = FINAmendmentSubType::Gross;
                    subTypeCtrl = element.design().controlName(formControlStr(FINRentalCreditWizard, EquipmentPriceGroup_UpdateType));
                    break;

                case FINAmendmentType::FullCredit :
                    amendmentSubType = FINAmendmentSubType::Invoice;
                    subTypeCtrl = element.design().controlName(formControlStr(FINRentalCreditWizard, FullCreditGroup_UpdateType));
                    break;

                case FINAmendmentType::RentalStop :
                    amendmentSubType = FINAmendmentSubType::RentalStop;
                    subTypeCtrl = element.design().controlName(formControlStr(FINRentalCreditWizard, RentalStopGroup_UpdateType));
                    break;

                case FINAmendmentType::MiscellaneousCharges :
                    amendmentSubType = FINAmendmentSubType::Line;
                    subTypeCtrl = element.design().controlName(formControlStr(FINRentalCreditWizard, MiscellaneousChargesGroup_UpdateType));
                    break;

                case FINAmendmentType::Insurance :
                    amendmentSubType = FINAmendmentSubType::Percentage;
                    subTypeCtrl = element.design().controlName(formControlStr(FINRentalCreditWizard, InsuranceGroup_UpdateType));
                    break;

                case FINAmendmentType::ManualCredit :
                    amendmentSubType = FINAmendmentSubType::Line;
                    subTypeCtrl = element.design().controlName(formControlStr(FINRentalCreditWizard, ManualCreditGroup_UpdateType));
                    break;
            }

            if (subTypeCtrl)
            {
                sysWizard.setupSubTypeControl(subTypeCtrl, amendmentType, amendmentSubType);
                subTypeCtrl.modified();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>setNextEnabled</Name>
						<Source><![CDATA[
        public void setNextEnabled()
        {
            select firstonly RecId from validateTmpInvoicePeriodAmendment
            where validateTmpInvoicePeriodAmendment.AmendmentType == amendmentType;

            sysWizard.nextEnabled(validateTmpInvoicePeriodAmendment.RecId ? true : false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateTabPageActionPaneFetchButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            CreateAmendmentsUpdateGroup.setFocus();

            super();

            this.fetchDefaultValues();
            element.enableDisableAmendmentUpdateFields(true);

            if (!disableEffectivityDateTimeGroup)
            {
                FINRentalOrderTimezoneCheck::check(custInvoiceTrans.salesLine().salesTable(), FINTimezoneCheckProcess::RentalCredit);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>fetchDefaultValues</Name>
						<Source><![CDATA[
        private void fetchDefaultValues()
        {
            switch (amendmentType)
            {
                case FINAmendmentType::Price :
                    RORRentalNetAmount netAmount;

                    if (custInvoiceTrans.RORTradeType == RORTradeType::SalesPurch)
                    {
                        EquipmentPriceGroup_GrossPrice.realValue(custInvoiceTrans.SalesPrice);

                        netAmount = custInvoiceTrans.LinePercent ?
                                    custInvoiceTrans.SalesPrice * (1 - custInvoiceTrans.LinePercent / 100) :
                                    custInvoiceTrans.SalesPrice;
            
                        EquipmentPriceGroup_NetPrice.realValue(netAmount);
                    }
                    else
                    {
                        FINRentalInvoiceDetailHelper rentalInvoiceDetailHelper = FINRentalInvoiceDetailHelper::getRentalInvoiceDetails(custInvoiceTrans);

                        FINCustInvoiceTransPriceAmendment grossAmountAmendment = FINCustInvoiceTransPriceAmendment::getAmendmentAsOfDate(custInvoiceTrans, invoiceStartDateTime, FINInvoicePeriodPriceComponent::RentalPrice);
                        FINCustInvoiceTransPriceAmendment discPctAmendment = FINCustInvoiceTransPriceAmendment::getAmendmentAsOfDate(custInvoiceTrans, invoiceStartDateTime, FINInvoicePeriodPriceComponent::LinePercent);
                        
                        RORRentalGrossAmount grossAmount = grossAmountAmendment.RecId ? grossAmountAmendment.RealValue : rentalInvoiceDetailHelper.grossPrice;
                        DiscPct discPct = discPctAmendment.RecId ? discPctAmendment.RealValue : rentalInvoiceDetailHelper.discPct;
                        
                        EquipmentPriceGroup_GrossPrice.realValue(grossAmount);

                        netAmount = discPct ?
                                    grossAmount * (1 - discPct / 100) :
                                    grossAmount;
            
                        EquipmentPriceGroup_NetPrice.realValue(netAmount);

                        FINRentalInvoiceDetailPeriod rentalInvoiceDetailPeriod;
        
                        select firstonly RateCode from rentalInvoiceDetailPeriod
                        where rentalInvoiceDetailPeriod.RefTableId == custInvoiceTrans.TableId
                        &&    rentalInvoiceDetailPeriod.RefRecId == custInvoiceTrans.RecId;

                        EquipmentPriceGroup_RateCode.text(rentalInvoiceDetailPeriod.RateCode);
                    }

                    EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue(invoiceStartDateTimeInTimezone);
                    EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue(invoiceEndDateTimeInTimeZone);
                    break;

                case FINAmendmentType::RentalStop :
                    RentalStopOneDayGroup_RentalStopDate.dateValue(DateTimeUtil::date(invoiceStartDateTimeInTimezone));

                    RentalStopFreeRangeGroup_RentalStopFromDateTime.dateTimeValue(invoiceStartDateTimeInTimezone);
                    RentalStopFreeRangeGroup_RentalStopToDateTime.dateTimeValue(invoiceEndDateTimeInTimeZone);
                    break;

                case FINAmendmentType::RateCode :
                    FINRentalInvoiceDetailHelper rentalInvoiceDetailHelper = FINRentalInvoiceDetailHelper::getRentalInvoiceDetails(custInvoiceTrans);
                    FINRentalInvoiceDetailPeriod rentalInvoiceDetailPeriod;
        
                    select firstonly RateCode from rentalInvoiceDetailPeriod
                    where rentalInvoiceDetailPeriod.RefTableId == custInvoiceTrans.TableId
                    &&    rentalInvoiceDetailPeriod.RefRecId == custInvoiceTrans.RecId;

                    RateCodeGroup_RateCode.value(UnitOfMeasure::findBySymbol(rentalInvoiceDetailPeriod.RateCode).RecId);

                    EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue(invoiceStartDateTimeInTimezone);
                    EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue(invoiceEndDateTimeInTimeZone);
                    break;

                case FINAmendmentType::FullCredit :
                    EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue(invoiceStartDateTimeInTimezone);
                    EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue(invoiceEndDateTimeInTimeZone);
                    break;

                case FINAmendmentType::MiscellaneousCharges :
                    delete_from tmpMarkupTrans;

                    MarkupTrans markupTrans;
                    FINTmpMarkupTrans tmpMarkupTransToInsert;
                    tmpMarkupTransToInsert.setTmpData(tmpMarkupTrans);

                    if (amendmentSubType == FINAmendmentSubType::Order)
                    {
                        SalesTable salesTable;

                        while select MarkupCode, MarkupCategory, Txt, Value from markupTrans
                        where markupTrans.FINMarkupAccountType == FINMarkupAccountType::None
                        &&    markupTrans.FINGeneratedFromPercentage == NoYes::No
                            exists join salesTable
                            where salesTable.SalesId == MiscellaneousChargesGroup_OrderIdFilter.text()
                            &&    salesTable.RecId == markupTrans.FINOrigRecId
                            &&    salesTable.TableId == markupTrans.FINOrigTableId
                        {
                            tmpMarkupTransToInsert.clear();
                            tmpMarkupTransToInsert.initFromMarkupTrans(markupTrans);
                            tmpMarkupTransToInsert.insert();
                        }
                    }
                    else if (amendmentSubType == FINAmendmentSubType::Line)
                    {
                        while select MarkupCode, MarkupCategory, Txt, Value from markupTrans
                        where markupTrans.TransRecId == custInvoiceTrans.RecId
                        &&    markupTrans.TransTableId == custInvoiceTrans.TableId
                        &&    markupTrans.FINMarkupAccountType == FINMarkupAccountType::None
                        &&    markupTrans.FINGeneratedFromPercentage == NoYes::No
                        {
                            tmpMarkupTransToInsert.clear();
                            tmpMarkupTransToInsert.initFromMarkupTrans(markupTrans);
                            tmpMarkupTransToInsert.insert();
                        }
                    }

                    TmpMarkupTrans_ds.research();
                    break;

                case FINAmendmentType::Insurance :
                    FINCustInvoiceTrans finCustInvoiceTrans;

                    select firstonly finCustInvoiceTrans
                    where finCustInvoiceTrans.CustInvoiceTransRecId == custInvoiceTrans.RecId;

                    InsuranceGroup_CalcBasis.selection(finCustInvoiceTrans.getInsuranceCalcBasis());

                    InsuranceGroup_Percentage.realValue(finCustInvoiceTrans.getInsurancePercentage());
                    InsuranceGroup_Amount.realValue(finCustInvoiceTrans.InsuranceAmount);

                    EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue(invoiceStartDateTimeInTimezone);
                    EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue(invoiceEndDateTimeInTimeZone);
                    break;

                case FINAmendmentType::ManualPriceComponents :
                    delete_from tmpManualPriceComponent;

                    FINTmpManualPriceComponent tmpManualPriceComponentToInsert;
                    tmpManualPriceComponentToInsert.setTmpData(tmpManualPriceComponent);
                    FINCustInvoiceTransManualComponent invoicedManualPriceComponent;

                    while select invoicedManualPriceComponent
                    where invoicedManualPriceComponent.CustInvoiceTransRecId == custInvoiceTrans.RecId
                    {
                        tmpManualPriceComponent.clear();
                        tmpManualPriceComponent.initFromCustInvoiceTransManualPriceComponent(invoicedManualPriceComponent);
                        tmpManualPriceComponent.insert();
                    }

                    TmpManualPriceComponent_ds.research();
                    break;
                    
                  case FINAmendmentType::ManualCredit :
                    AmountCur invoicedAmount;

                    if (amendmentSubType == FINAmendmentSubType::Line)
                    {
                        invoicedAmount = custInvoiceTrans.FINdisplayLineAmount();

                        EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue(invoiceStartDateTimeInTimezone);
                        EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue(invoiceEndDateTimeInTimeZone);
                    }
                    else if (amendmentSubType == FINAmendmentSubType::Invoice)
                    {
                        invoicedAmount = custInvoiceJour.InvoiceAmount;

                        EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue(DateTimeUtil::minValue());
                        EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue(DateTimeUtil::minValue());
                    }

                    ManualCreditGroup_InvoicedAmount.realValue(invoicedAmount);
                    break;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateTabPageActionPaneAddButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if ((amendmentType != FINAmendmentType::RentalStop && amendmentType != FINAmendmentType::Price && amendmentType != FINAmendmentType::RateCode)
            &&  custInvoiceTrans_ds.recordsMarked().lastIndex() > 1)
            {
                throw error(strFmt("@DNR:MultiSelectEnabledForScenarios", 
                                   enum2Str(FINAmendmentType::RentalStop),
                                   enum2Str(FINAmendmentType::Price),
                                   enum2Str(FINAmendmentType::RateCode)));
                return;
            }

            super();

            boolean isInserted;

            switch (amendmentType)
            {
                case FINAmendmentType::FullCredit :
                    isInserted = element.insertFullCreditTmpAmendments();
                    break;

                case FINAmendmentType::MiscellaneousCharges :
                    isInserted = element.insertMiscellaneousChargesTmpAmendments();
                    break;

                case FINAmendmentType::ManualPriceComponents :
                    isInserted = element.insertManualPriceCompontentsTmpAmendments();
                    break;

                default:
                    if (amendmentType == FINAmendmentType::RentalStop 
                    ||  amendmentType == FINAmendmentType::Price
                    ||  amendmentType == FINAmendmentType::RateCode)
                    {
                        isInserted = element.insertDefaultTmpAmendmentsMultiSelect();
                    }
                    else
                    {
                        isInserted = element.insertDefaultTmpAmendmentsSingleSelect();
                    }
                    break;
            }

            if (isInserted)
            {
                TmpInvoicePeriodAmendment_ds.research();

                element.clearAmendmentUpdateFields();
                element.enableDisableAmendmentUpdateFields(false);

                CreateAmendmentTabPage.setNextEnabled();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EquipmentPriceGroup_UpdateType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            amendmentSubType = sysWizard.subTypeSelection2Index(this.selection());
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RentalStopGroup_UpdateType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            amendmentSubType = sysWizard.subTypeSelection2Index(this.selection());
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RentalStopFreeRangeGroup_RentalStopFromDateTime</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (ret && this.dateTimeValue() && RentalStopFreeRangeGroup_RentalStopToDateTime.dateTimeValue() && this.dateTimeValue() >= RentalStopFreeRangeGroup_RentalStopToDateTime.dateTimeValue())
            {
                ret = checkFailed("@DNR:EffectiveDateTimeFromBeforeEffectiveTo");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RentalStopFreeRangeGroup_RentalStopToDateTime</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (ret && this.dateTimeValue() && ret && RentalStopFreeRangeGroup_RentalStopFromDateTime.dateTimeValue() && this.dateTimeValue() <= RentalStopFreeRangeGroup_RentalStopFromDateTime.dateTimeValue())
            {
                ret = checkFailed("@DNR:EffectiveDateTimeToBeforeEffectiveFrom");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RateCodeGroup_RateCode</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return UnitOfMeasureLookup::lookupReferenceForUnitOfMeasureClass(this, UnitOfMeasureClass::Time);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FullCreditGroup_UpdateType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
        
            amendmentSubType = sysWizard.subTypeSelection2Index(this.selection());
            
            boolean isOrderSelection = (amendmentType == FINAmendmentType::FullCredit && amendmentSubType == FINAmendmentSubType::Order);
            FullCreditGroup_OrderIdFilter.visible(isOrderSelection);
            FullCreditGroup_OrderIdFilter.mandatory(isOrderSelection);
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FullCreditGroup_OrderIdFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.performOrderLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MiscellaneousChargesGroup_UpdateType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            amendmentSubType = sysWizard.subTypeSelection2Index(this.selection());

            boolean isOrderSelection = (amendmentType == FINAmendmentType::MiscellaneousCharges && amendmentSubType == FINAmendmentSubType::Order);
            MiscellaneousChargesGroup_OrderIdFilter.visible(isOrderSelection);
            MiscellaneousChargesGroup_OrderIdFilter.mandatory(isOrderSelection);

            element.clearAmendmentUpdateFields();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MiscellaneousChargesGroup_OrderIdFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.performOrderLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InsuranceGroup_UpdateType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            amendmentSubType = sysWizard.subTypeSelection2Index(this.selection());
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ManualCreditGroup_UpdateType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            amendmentSubType = sysWizard.subTypeSelection2Index(this.selection());

            boolean isOrderSelection = (amendmentType == FINAmendmentType::ManualCredit && amendmentSubType == FINAmendmentSubType::Order);
            ManualCreditGroup_OrderIdFilter.visible(isOrderSelection);
            ManualCreditGroup_OrderIdFilter.mandatory(isOrderSelection);

            element.clearAmendmentUpdateFields();
            element.enableDisableAmendmentUpdateFields(false);
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ManualCreditGroup_OrderIdFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.performOrderLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EffectivityDateTimeGroup_EffectiveDateTimeFrom</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (custInvoiceTrans_ds.recordsMarked().lastIndex() < 2)
            {
                if (ret && (this.dateTimeValue() < invoiceStartDateTimeInTimezone || this.dateTimeValue() > invoiceEndDateTimeInTimezone))
                {
                    ret = checkFailed(strFmt("@DNR:EffectiveDateTimeFromBetweenXAndY", invoiceStartDateTimeInTimezone, invoiceEndDateTimeInTimezone));
                }
            }

            if (ret && EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue() && this.dateTimeValue() >= EffectivityDateTimeGroup_EffectiveDateTimeTo.dateTimeValue())
            {
                ret = checkFailed("@DNR:EffectiveDateTimeFromBeforeEffectiveTo");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EffectivityDateTimeGroup_EffectiveDateTimeTo</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (custInvoiceTrans_ds.recordsMarked().lastIndex() < 2)
            {
                if (ret && (this.dateTimeValue() < invoiceStartDateTimeInTimezone || this.dateTimeValue() > invoiceEndDateTimeInTimezone))
                {
                    ret = checkFailed(strFmt("@DNR:EffectiveDateTimeToBetweenXAndY", invoiceStartDateTimeInTimezone, invoiceEndDateTimeInTimezone));
                }
            }

            if (ret && EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue() && this.dateTimeValue() <= EffectivityDateTimeGroup_EffectiveDateTimeFrom.dateTimeValue())
            {
                ret = checkFailed("@DNR:EffectiveDateTimeToBeforeEffectiveFrom");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbdsReasonTable = query.addDataSource(tableNum(DNRReasonTable));
            qbdsReasonTable.addRange(fieldNum(DNRReasonTable, Type)).value(queryValue(DNRReasonType::Credit));

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(DNRReasonTable), this);
            sysTableLookup.addLookupfield(fieldNum(DNRReasonTable, ReasonCode), true);
            sysTableLookup.addLookupfield(fieldNum(DNRReasonTable, Description));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ContactPerson</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ContactPerson::lookupDirContactPerson(this,
                                                  CustTable::find(custInvoiceJour.InvoiceAccount).Party,
                                                  this,
                                                  ContactPerson.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdatedAmendmentsDeleteCommandButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            CreateAmendmentsUpdatedAmendmentsGroup.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupTrans_Amendment_Line</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            CustInvoiceTrans amendmentCustInvoiceTrans = CustInvoiceTrans::findRecId(tmpInvoicePeriodAmendment.CustInvoiceTransRecId);
            
            Args args = new Args();
            args.record(amendmentCustInvoiceTrans);
            args.caller(element);
            this.menufunction().run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkupTrans_Amendment_Header</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            CustInvoiceJour amendmentCustInvoiceJour;
            CustInvoiceTrans amendmentCustInvoiceTrans;
            
            select firstonly amendmentCustInvoiceJour
                join TableId from amendmentCustInvoiceTrans
                where amendmentCustInvoiceTrans.RecId == tmpInvoicePeriodAmendment.CustInvoiceTransRecId
                &&    amendmentCustInvoiceTrans.SalesId == amendmentCustInvoiceJour.SalesId
                &&    amendmentCustInvoiceTrans.InvoiceId == amendmentCustInvoiceJour.InvoiceId
                &&    amendmentCustInvoiceTrans.InvoiceDate == amendmentCustInvoiceJour.InvoiceDate
                &&    amendmentCustInvoiceTrans.numberSequenceGroup == amendmentCustInvoiceJour.numberSequenceGroup;

            Args args = new Args();
            args.record(amendmentCustInvoiceJour);
            args.caller(element);
            this.menufunction().run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProFormaTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            this.resetTmpInvoicePeriodAmendmentQuery();
            this.setCreditAmount();
        }

]]></Source>
					</Method>
					<Method>
						<Name>resetTmpInvoicePeriodAmendmentQuery</Name>
						<Source><![CDATA[
        private void resetTmpInvoicePeriodAmendmentQuery()
        {
            qbrAmendmentType.enabled(false);
            TmpInvoicePeriodAmendment_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setCreditAmount</Name>
						<Source><![CDATA[
        private void setCreditAmount()
        {
            ttsbegin;

            sysWizard.setIsProforma(true);
            sysWizard.insertAmendments();
            TotalCreditAmount.realValue(sysWizard.calculateCreditAmount());

            // Revert any changes that are implemented only to calculate the pro-forma amount
            ttsabort;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InvoiceNote</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            
            ret = super();
    
            sysWizard.parmInvoiceNote(this.text());
            
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FINCustInvoiceTransPeriods</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args args = new Args();
    
            args.record(sysWizard.getInvoiceCalculatorParm(TmpInvoicePeriodAmendment_ds.cursor()));
    
            new MenuFunction(menuItemDisplayStr(FINCustInvoiceTransPeriods), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustInvoiceJour</Name>
			<Table>CustInvoiceJour</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Backorder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfLadingId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissionType_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CovStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>creditInvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectDebitMandate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvTerm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceLineSpecific</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDiscMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUSalesList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecondary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedDueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntentLetterFromDate_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntentLetterId_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntentLetterInternalId_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntentLetterToDate_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyPurchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatDispatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoicePostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRoundOff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRoundOffMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoicingName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Listcode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Log</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRDueAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCREmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPaymAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>numberSequenceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OLAPCostValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OnAccountAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OneTimeCustomer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParmId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymDayId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintedOriginals</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintMgmtSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Proforma</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProvisionalAssessment_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchaseOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RCSalesList_UK</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptDateConfirmed_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnItemNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseCharge_UK</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseChargeAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversedRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesBalanceMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesOriginId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SentElectronically</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierBlindShipment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumLineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumLineDiscMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumMarkupMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumTaxMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInvoiceSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPrintOnInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxSpecifyByLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransportationDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Triangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Updated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Volume</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Weight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerSalesTaker</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>InvoiceNumIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustInvoiceTrans</Name>
			<Table>CustInvoiceTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssetBookId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillingCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissCalc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegionOfShipment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustInvoiceLineIdRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerLineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExternalItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GoodsForFree_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyInventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatCommodity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatDispatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventRefTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventRefType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmountTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmountTaxMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRDeliveryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRDlvMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiLnDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiLnPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>numberSequenceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OLAPCostValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderLineReference_NO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigCountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartDelivery</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWQtyPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCWRemain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Port</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCommReportTrans_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Remain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemainBefore</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnArrivalDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnClosedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseCharge_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseChargeApplies_UK</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseChargeSalesList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversedRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RORParentLineRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RORTradeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatLineAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatProcId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StockedProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumLineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumLineDiscMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAutogenerated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdGroup_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWriteCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Weight</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<JoinSource>CustInvoiceJour</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1HashHex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<JoinSource>CustInvoiceTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpInvoicePeriodAmendment</Name>
			<Table>FINTmpInvoicePeriodAmendment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmendmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EffectiveDateTimeFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EffectiveDateTimeTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewRealValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewStrValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OldRealValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OldStrValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpMarkupTrans</Name>
			<Table>FINTmpMarkupTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OldValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TmpManualPriceComponent</Name>
			<Table>FINTmpManualPriceComponent</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreditAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OldValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DNR:RentalCreditWizard</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Pattern xmlns="">Wizard</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Wizard</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>BodyTab</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FilterTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>FilterTabPageStaticText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@DNR:FilterSelection</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FilterTabPageGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FilterGroup</Name>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustAccountFilter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
												<Label>@DNR:CustInvoiceAccount</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>OrderIdFilter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>SalesId</ExtendedDataType>
												<Label>@DNR10</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustomerRequisitionFilter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CaseIdFilter</Name>
												<Type>String</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Label>Case ID</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>InvoiceNumFilter</Name>
												<HelpText>@DNR:InvoiceIdHelpText</HelpText>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>CustInvoiceId</ExtendedDataType>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FeedbackGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>ProductRoadmapImage</Name>
												<ExtendedStyle>card_imageSquare</ExtendedStyle>
												<Height>47</Height>
												<HeightMode>Manual</HeightMode>
												<Type>Image</Type>
												<Width>48</Width>
												<WidthMode>Manual</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ImageLocation>AOTResource</ImageLocation>
												<Label>@DNR:HelpBuildFeatures</Label>
												<NormalImage>FINProductRoadmapIcon</NormalImage>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>FeedbackImage</Name>
												<ExtendedStyle>card_imageSquare</ExtendedStyle>
												<Height>35</Height>
												<HeightMode>Manual</HeightMode>
												<Type>Image</Type>
												<Width>48</Width>
												<WidthMode>Manual</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ImageLocation>AOTResource</ImageLocation>
												<Label>@SYS22522</Label>
												<NormalImage>FINFeedbackIcon</NormalImage>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalWrap</ArrangeMethod>
								<Columns>2</Columns>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalWrap</ArrangeMethod>
						<Caption>@DNR:FilterSelection</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SelectActionTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>SelectActionTabPageStaticText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:SelectAction</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectActionTabPageGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>AmendmentTypeRadioButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>RadioButton</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>FINAmendmentType</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>AmendmentTypeHelpText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text></Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:SelectAction</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CreateAmendmentTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>CreateAmendmentTabPageStaticText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>StaticText</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text></Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CreateAmendmentTabPageGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CreateAmendmentsInvoiceDetailsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Pattern>ToolbarList</Pattern>
										<PatternVersion>1.2</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>CreateAmendmentsInvoiceDetailsTabPageActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>InvoiceDetailsTabPageActionPaneButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>TaxTransactions</Name>
																<ElementPosition>90898776</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>MenuFunctionButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextOnly</ButtonDisplay>
																<MenuItemName>TaxTrans</MenuItemName>
																<SaveRecord>No</SaveRecord>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>MarkupTrans_Header</Name>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>MenuFunctionButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<MenuItemName>FINMarkupTransHeadingSales</MenuItemName>
																<SaveRecord>No</SaveRecord>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>CreateAmendmentsInvoiceDetailsGrid</Name>
												<ExtendedStyle>grid_autoSizeHeight</ExtendedStyle>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InvoiceId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InvoiceId</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>InvoiceDate</Name>
														<Type>Date</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InvoiceDate</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>ChargedAmount</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InvoiceAmount</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>CustomerId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InvoiceAccount</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>CustomerName</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OrderAccount</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>OrderId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>SalesId</DataField>
														<DataSource>CustInvoiceJour</DataSource>
														<Label>@DNR10</Label>
													</AxFormControl>
												</Controls>
												<MultiSelect>No</MultiSelect>
											</AxFormControl>
										</Controls>
										<Caption>@SYS119043</Caption>
										<DataSource>CustInvoiceJour</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CreateAmendmentsInvoiceLineDetailsGroup</Name>
										<Pattern>ToolbarList</Pattern>
										<PatternVersion>1.2</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>CreateAmendmentsInvoiceLineDetailsTabPageActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>InvoiceLineDetailsTabPageActionPaneButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>CustInvoiceTransPeriods</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HeightMode>Auto</HeightMode>
																<Type>MenuFunctionButton</Type>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<MenuItemName>FINCustInvoiceTransPeriods</MenuItemName>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>MarkupTrans_Line</Name>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>MenuFunctionButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<MenuItemName>FINMarkupTransLineSales</MenuItemName>
																<SaveRecord>No</SaveRecord>
															</AxFormControl>
														</Controls>
														<FrameType>None</FrameType>
													</AxFormControl>
												</Controls>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>CreateAmendmentsInvoiceLineDetailsGrid</Name>
												<ExtendedStyle>grid_autoSizeHeight</ExtendedStyle>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InvoiceLineDetailsGrid_OrigSalesId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OrigSalesId</DataField>
														<DataSource>CustInvoiceTrans</DataSource>
														<Label>@DNR10</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InvoiceLineDetailsGrid_ItemId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ItemId</DataField>
														<DataSource>CustInvoiceTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InvoiceLineDetailsGrid_InventSerialId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>inventSerialId</DataField>
														<DataSource>InventDim</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>InvoiceLineDetailsGrid_LineNum</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>LineNum</DataField>
														<DataSource>CustInvoiceTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>InvoiceLineDetailsGrid_Qty</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Qty</DataField>
														<DataSource>CustInvoiceTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>InvoiceLineDetailsGrid_FINdisplayLineAmount</Name>
														<ElementPosition>1476394997</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>FINCustInvoiceTransTableCls_Extension.FINdisplayLineAmount</DataMethod>
														<DataSource>CustInvoiceTrans</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>InvoiceLineDetailsGrid_DiscPct</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>DiscPercent</DataField>
														<DataSource>CustInvoiceTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>InvoiceLineDetailsGrid_DiscAmt</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>DiscAmount</DataField>
														<DataSource>CustInvoiceTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>InvoiceLineDetailsGrid_displayInvoiceStartDateTime</Name>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayInvoiceStartDateTime</DataMethod>
														<DataSource>CustInvoiceTrans</DataSource>
														<Label>@SYS109394</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>InvoiceLineDetailsGrid_displayInvoiceEndDateTime</Name>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayInvoiceEndDateTime</DataMethod>
														<DataSource>CustInvoiceTrans</DataSource>
														<Label>@SYS109395</Label>
													</AxFormControl>
												</Controls>
												<DataSource>CustInvoiceTrans</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@AccountsPayableMobile:InvoiceLineDetails</Caption>
										<DataSource>CustInvoiceTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CreateAmendmentsUpdateGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>CreateAmendmentsUpdateTabPageActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>UpdateTabPageActionPaneButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>UpdateTabPageActionPaneFetchButton</Name>
																<HelpText>@DNR:FetchButtonHelpText</HelpText>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<MultiSelect>No</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<Text>@SYS316269</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>UpdateTabPageActionPaneAddButton</Name>
																<HelpText>@DNR:AddButtonHelpText</HelpText>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<MultiSelect>Yes</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<Text>@SYS2318</Text>
															</AxFormControl>
														</Controls>
														<DataSource>CustInvoiceTrans</DataSource>
													</AxFormControl>
												</Controls>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>UpdateTabPageContentGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageEquipmentPriceGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>EquipmentPriceGroup_GrossPrice</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR314</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>EquipmentPriceGroup_NetPrice</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR315</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>EquipmentPriceGroup_RateCode</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
																<Label>@DNR44</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>EquipmentPriceGroup_UpdateType</Name>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR1675</Label>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>EquipmentPriceGroup_NewPrice</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<AllowNegative>No</AllowNegative>
																<Label>@SYS334962</Label>
															</AxFormControl>
														</Controls>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageRentalStopGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>RentalStopGroup_UpdateType</Name>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR4351</Label>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>RentalStopEffectivityGroup</Name>
																<HeightMode>Auto</HeightMode>
																<Type>Group</Type>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>RentalStopOneDayGroup</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<HeightMode>Auto</HeightMode>
																		<Type>Group</Type>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateControl">
																				<Name>RentalStopOneDayGroup_RentalStopDate</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<HeightMode>Auto</HeightMode>
																				<Type>Date</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Label>@SYS7402</Label>
																			</AxFormControl>
																		</Controls>
																		<Caption>@DNR6331</Caption>
																		<FrameOptionButton>Radio</FrameOptionButton>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>RentalStopFreeRangeGroup</Name>
																		<HeightMode>Auto</HeightMode>
																		<Type>Group</Type>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateTimeControl">
																				<Name>RentalStopFreeRangeGroup_RentalStopFromDateTime</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>DateTime</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Label>@DNR1039</Label>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateTimeControl">
																				<Name>RentalStopFreeRangeGroup_RentalStopToDateTime</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>DateTime</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Label>@SYS177352</Label>
																			</AxFormControl>
																		</Controls>
																		<Caption>@DNR6332</Caption>
																		<FrameOptionButton>Radio</FrameOptionButton>
																		<OptionValue>0</OptionValue>
																	</AxFormControl>
																</Controls>
															</AxFormControl>
														</Controls>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageRateCodeGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormReferenceGroupControl">
																<Name>RateCodeGroup_RateCode</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>ReferenceGroup</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls />
																<ExtendedDataType>RORPriceTimeUnit</ExtendedDataType>
																<Label>@DNR44</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>RateCodeGroup_MustRecalculatePrice</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>CheckBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR:RecalculatePrice</Label>
															</AxFormControl>
														</Controls>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageFullCreditGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>FullCreditGroup_UpdateType</Name>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR1675</Label>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>FullCreditGroup_OrderIdFilter</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<Visible>No</Visible>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>SalesId</ExtendedDataType>
																<Label>@DNR10</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>FullCreditGroup_MustReinvoice</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>CheckBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR:ReInvoice</Label>
															</AxFormControl>
														</Controls>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageMiscChargesGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>MiscellaneousChargesGroup_UpdateType</Name>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR1675</Label>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>MiscellaneousChargesGroup_OrderIdFilter</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<Visible>No</Visible>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>SalesId</ExtendedDataType>
																<Label>@DNR10</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormActionPaneControl">
																<Name>MiscellaneousChargesGroup_ChargesGridActionPane</Name>
																<Type>ActionPane</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonGroupControl">
																		<Name>MiscellaneousChargesGroup_ChargesGridActionPaneButtonGroup</Name>
																		<Type>ButtonGroup</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormCommandButtonControl">
																				<Name>ChargesDeleteCommandButton</Name>
																				<Type>CommandButton</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																				<Command>DeleteRecord</Command>
																				<MultiSelect>Yes</MultiSelect>
																				<NeedsRecord>Yes</NeedsRecord>
																				<NormalImage>Delete</NormalImage>
																				<Text>@SYS135131</Text>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>HorizontalLeft</ArrangeMethod>
																		<DataSource>TmpMarkupTrans</DataSource>
																	</AxFormControl>
																</Controls>
																<DataSource>TmpMarkupTrans</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGridControl">
																<Name>MiscellaneousChargesGroup_ChargesGrid</Name>
																<Type>Grid</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>MiscellaneousChargesGroup_ChargesGrid_MarkupCode</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>MarkupCode</DataField>
																		<DataSource>TmpMarkupTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>MiscellaneousChargesGroup_ChargesGrid_Txt</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Txt</DataField>
																		<DataSource>TmpMarkupTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>MiscellaneousChargesGroup_ChargesGrid_MarkupCategory</Name>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>MarkupCategory</DataField>
																		<DataSource>TmpMarkupTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>MiscellaneousChargesGroup_ChargesGrid_OldValue</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>OldValue</DataField>
																		<DataSource>TmpMarkupTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>MiscellaneousChargesGroup_ChargesGrid_NewValue</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NewValue</DataField>
																		<DataSource>TmpMarkupTrans</DataSource>
																	</AxFormControl>
																</Controls>
																<DataGroup>CreditWizardCharges</DataGroup>
																<DataSource>TmpMarkupTrans</DataSource>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Auto</ArrangeMethod>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageInsuranceGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>InsuranceGroup_CalcBasis</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<EnumType>RORInsuranceCalcBasis</EnumType>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>InsuranceGroup_Percentage</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>RORInsurancePercentage</ExtendedDataType>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>InsuranceGroup_Amount</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>RORRentalGrossAmount</ExtendedDataType>
																<Label>@DNR3363</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>InsuranceGroup_UpdateType</Name>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR198</Label>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>InsuranceGroup_NewChangedValue</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<AllowNegative>No</AllowNegative>
																<Label>@DNR:NewChangedValue</Label>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Auto</ArrangeMethod>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageManualPriceComponentsGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormActionPaneControl">
																<Name>ManualPriceComponentsGroup_PriceComponentsGridActionPane</Name>
																<Type>ActionPane</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonGroupControl">
																		<Name>ManualPriceComponentsGroup_PriceComponentsGridActionPaneButtonGroup</Name>
																		<Type>ButtonGroup</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormCommandButtonControl">
																				<Name>PriceComponentsDeleteCommandButton</Name>
																				<Type>CommandButton</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																				<Command>DeleteRecord</Command>
																				<MultiSelect>Yes</MultiSelect>
																				<NeedsRecord>Yes</NeedsRecord>
																				<NormalImage>Delete</NormalImage>
																				<Text>@SYS135131</Text>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>HorizontalLeft</ArrangeMethod>
																		<DataSource>TmpManualPriceComponent</DataSource>
																	</AxFormControl>
																</Controls>
																<DataSource>TmpManualPriceComponent</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGridControl">
																<Name>ManualPriceComponentsGroup_PriceComponentsGrid</Name>
																<Type>Grid</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>ManualPriceComponentsGroup_PriceComponentsGrid_Description</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Description</DataField>
																		<DataSource>TmpManualPriceComponent</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>ManualPriceComponentsGroup_PriceComponentsGrid_CreditAccountType</Name>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CreditAccountType</DataField>
																		<DataSource>TmpManualPriceComponent</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>ManualPriceComponentsGroup_PriceComponentsGrid_OldValue</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>OldValue</DataField>
																		<DataSource>TmpManualPriceComponent</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>ManualPriceComponentsGroup_PriceComponentsGrid_NewValue</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NewValue</DataField>
																		<DataSource>TmpManualPriceComponent</DataSource>
																	</AxFormControl>
																</Controls>
																<DataGroup>CreditWizardManualPriceComponents</DataGroup>
																<DataSource>TmpManualPriceComponent</DataSource>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Auto</ArrangeMethod>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>UpdateTabPageManualCreditGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>ManualCreditGroup_UpdateType</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>ComboBox</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@DNR1675</Label>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ManualCreditGroup_OrderIdFilter</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<Visible>No</Visible>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>SalesId</ExtendedDataType>
																<Label>@DNR10</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>ManualCreditGroup_InvoicedAmount</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@SYS80230</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>ManualCreditGroup_CreditAmount</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<AllowNegative>No</AllowNegative>
																<Label>@DNR6940</Label>
															</AxFormControl>
														</Controls>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>EffectivityDateTimeGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormDateTimeControl">
																<Name>EffectivityDateTimeGroup_EffectiveDateTimeFrom</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>DateTime</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>Effective From</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormDateTimeControl">
																<Name>EffectivityDateTimeGroup_EffectiveDateTimeTo</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>DateTime</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>Effective To</Label>
															</AxFormControl>
														</Controls>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>AdditionalInformationGroup</Name>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ReasonCode</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>DNRReasonCode</ExtendedDataType>
																<Mandatory>Yes</Mandatory>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ReasonText</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>RORAmendmentReasonText</ExtendedDataType>
																<Mandatory>Yes</Mandatory>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>ContactPerson</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>ContactPersonId</ExtendedDataType>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Columns>3</Columns>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<Caption>@SYS23285</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CreateAmendmentsUpdatedAmendmentsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Pattern>ToolbarList</Pattern>
										<PatternVersion>1.2</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>UpdatedAmendmentsActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>UpdatedAmendmentsActionPaneButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormCommandButtonControl">
																<Name>UpdatedAmendmentsDeleteCommandButton</Name>
																<Type>CommandButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<Command>DeleteRecord</Command>
																<MultiSelect>Yes</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>Delete</NormalImage>
																<Text>@SYS135131</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuButtonControl">
																<Name>UpdatedAmendmentsChargesMenuButton</Name>
																<Type>MenuButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormMenuFunctionButtonControl">
																		<Name>MarkupTrans_Amendment_Line</Name>
																		<ElementPosition>1431655764</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>MenuFunctionButton</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<MenuItemName>FINMarkupTransLineSales</MenuItemName>
																		<SaveRecord>No</SaveRecord>
																		<Text>@SYS15449</Text>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormMenuFunctionButtonControl">
																		<Name>MarkupTrans_Amendment_Header</Name>
																		<ElementPosition>1073741822</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>MenuFunctionButton</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<MenuItemName>FINMarkupTransHeadingSalesAmendment</MenuItemName>
																		<SaveRecord>No</SaveRecord>
																		<Text>@SYS4925</Text>
																	</AxFormControl>
																</Controls>
																<Text>@SYS8371</Text>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>HorizontalLeft</ArrangeMethod>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
												</Controls>
												<DataSource>TmpInvoicePeriodAmendment</DataSource>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>UpdatedAmendmentsGrid</Name>
												<AllowEdit>No</AllowEdit>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_Description</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Description</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_displayOldValue</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayOldValue</DataMethod>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
														<Label>@SYS115748</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_displayNewValue</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayNewValue</DataMethod>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
														<Label>@SYS68002</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_RateCodeSymbol</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>RateCodeSymbol</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>UpdatedAmendmentsGrid_EffectiveDateTimeFrom</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EffectiveDateTimeFrom</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>UpdatedAmendmentsGrid_EffectiveDateTimeTo</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EffectiveDateTimeTo</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_ReasonCode</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ReasonCode</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_MarkupCode</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>MarkupCode</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>UpdatedAmendmentsGrid_MarkupCategory</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>MarkupCategory</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_ItemId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ItemId</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>UpdatedAmendmentsGrid_OrderId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OrderId</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>UpdatedAmendmentsGrid_OrderLineNum</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OrderLineNum</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
												</Controls>
												<DataGroup>Overview</DataGroup>
												<DataSource>TmpInvoicePeriodAmendment</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@DNR6391</Caption>
										<DataSource>TmpInvoicePeriodAmendment</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@DNR:CreateAmendment</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ProFormaTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ProFormaTabPageStaticText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@SYS71007</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProFormaTabPageGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ProFormaInvoiceDetailsGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>ProFormaInvoiceDetailsGrid</Name>
												<ExtendedStyle>grid_autoSizeHeight</ExtendedStyle>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaInvoiceDetailsGrid_InvoiceId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InvoiceId</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaInvoiceDetailsGrid_CustomerId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InvoiceAccount</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaInvoiceDetailsGrid_CustomerName</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OrderAccount</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>ProFormaInvoiceDetailsGrid_ChargedAmount</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InvoiceAmount</DataField>
														<DataSource>CustInvoiceJour</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaInvoiceDetailsGrid_CurrencyCode</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>CurrencyCode</DataField>
														<DataSource>CustInvoiceJour</DataSource>
														<Label>@DNR10</Label>
													</AxFormControl>
												</Controls>
												<DataSource>CustInvoiceJour</DataSource>
												<MultiSelect>No</MultiSelect>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ProFormaTotalsGroup</Name>
												<Pattern>FieldsFieldGroups</Pattern>
												<PatternVersion>1.1</PatternVersion>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TotalCreditAmount</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>Credit amount</Label>
													</AxFormControl>
												</Controls>
												<ColumnsMode>Fill</ColumnsMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AdditionalNotesGroup</Name>
												<Pattern>FieldsFieldGroups</Pattern>
												<PatternVersion>1.1</PatternVersion>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InvoiceNote</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
														<Label>@DNR4360</Label>
														<MultiLine>Yes</MultiLine>
													</AxFormControl>
												</Controls>
												<ColumnsMode>Fill</ColumnsMode>
											</AxFormControl>
										</Controls>
										<Caption>@SYS119043</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ProFormaAmendmentsGroup</Name>
										<Pattern>ToolbarList</Pattern>
										<PatternVersion>1.2</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>ProFormaAmendmentsActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>ProFormaAmendmentButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>FINCustInvoiceTransPeriods</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>MenuFunctionButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataSource>TmpInvoicePeriodAmendment</DataSource>
																<MenuItemName>FINCustInvoiceTransPeriods</MenuItemName>
																<NeedsRecord>Yes</NeedsRecord>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>ProFormaAmendmentsGrid</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>grid_autoSizeHeight</ExtendedStyle>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_Description</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Description</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_displayOldValue</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayOldValue</DataMethod>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
														<Label>@SYS115748</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_displayNewValue</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayNewValue</DataMethod>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
														<Label>@SYS68002</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_RateCodeSymbol</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>RateCodeSymbol</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>ProFormaAmendmentsGrid_EffectiveDateTimeFrom</Name>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EffectiveDateTimeFrom</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateTimeControl">
														<Name>ProFormaAmendmentsGrid_EffectiveDateTimeTo</Name>
														<Type>DateTime</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EffectiveDateTimeTo</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_ReasonCode</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ReasonCode</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_MarkupCode</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>MarkupCode</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>ProFormaAmendmentsGrid_MarkupCategory</Name>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>MarkupCategory</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_ItemId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ItemId</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProFormaAmendmentsGrid_OrderId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OrderId</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>ProFormaAmendmentsGrid_OrderLineNum</Name>
														<Type>Real</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>OrderLineNum</DataField>
														<DataSource>TmpInvoicePeriodAmendment</DataSource>
													</AxFormControl>
												</Controls>
												<DataGroup>Overview</DataGroup>
												<DataSource>TmpInvoicePeriodAmendment</DataSource>
												<MultiSelect>No</MultiSelect>
											</AxFormControl>
										</Controls>
										<Caption>@DNR6391</Caption>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@SYS71007</Caption>
					</AxFormControl>
				</Controls>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>