<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>FINCustInvoiceJournalProFormaPost</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class FINCustInvoiceJournalProFormaPost extends FormRun
{
    FormDataSource callerDataSource;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInvalidInitFormMethodWarning", "Validation of caller must be performed before invoking super()")]
    public void init()
    {
        if (element.args().dataset() != tableNum(FINCustInvoiceJourProForma))
        {
            throw error(strFmt("@SYS19096", element.name(), "@SYS1557"));
        }

        callerDataSource = FormDataUtil::getFormDataSource(element.args().record());

        super();

        dlgInvoiceDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        super();

        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(callerDataSource);
        
        FINCustInvoiceJourProforma custInvoiceJourProforma = helper.getFirst();
                        
        while (custInvoiceJourProforma.RecId != 0)
        {
            if (custInvoiceJourProforma.validateMultiSelectPosting(FINCustInvoiceJournalProformaAction::Post))
            {
                if (callerDataSource.recordsMarked().lastIndex() < 2)
                {
                    Args args = new Args();
                    args.caller(callerDataSource.formRun());
                    args.parmObject(FINProformaInvoiceJournalReference::newInvoiceJournal(custInvoiceJourProforma.RecId));
                    args.record(custInvoiceJourProforma.salesTable());

                    new MenuFunction(menuItemActionStr(SalesFormLetter_Invoice), MenuItemType::Action).run(args);

                    this.updateStatus(custInvoiceJourProforma);
                }
                else
                {
                    this.postSilent(custInvoiceJourProforma);
                }
            }

            custInvoiceJourProforma = helper.getNext();
        }

        callerDataSource.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSilent</Name>
				<Source><![CDATA[
    private void postSilent(FINCustInvoiceJourProforma _custInvoiceJourProforma)
    {
        try
        {
            ttsbegin;
            SalesFormLetter salesFormLetter;

            using (SalesFormLetterConstructContext context = SalesFormLetterConstructContext::construct())
            {
                // Do not load from SysLastValue as we may select on the wrong criteria.
                context.parmLoadFromSysLastValue(UnknownNoYes::No);
                salesFormLetter = SalesFormLetter::construct(DocumentStatus::Invoice);
            }

            salesFormLetter.FINParmProformaInvoiceJourRecId(_custInvoiceJourProforma.RecId);
            salesFormLetter.FINParmPostInvoiceProposal(true);

            salesFormLetter.initParmSalesTable(_custInvoiceJourProforma.salesTable());
            salesFormLetter.prePromptInit();

            SalesParmUpdate salesParmUpdate = salesFormLetter.salesParmUpdate();
            salesParmUpdate.INVTransdate = dlgInvoiceDate.dateValue();
            salesParmUpdate.modifiedField(fieldNum(SalesParmUpdate, INVTransdate));
            salesFormLetter.salesParmUpdate(salesParmUpdate);

            salesFormLetter.run();

            this.updateStatus(_custInvoiceJourProforma);
            ttscommit;
        }
        catch (Exception::Error)
        {
            // do nothing. The original error will still be displayed in the infolog.
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus(FINCustInvoiceJourProforma _custInvoiceJourProforma)
    {
        CustInvoiceJour custInvoiceJour;

        select firstonly RecId from custInvoiceJour
        where custInvoiceJour.InvoiceId == _custInvoiceJourProforma.InvoiceId
          &&  custInvoiceJour.InvoiceDate == _custInvoiceJourProforma.InvoiceDate
          &&  custInvoiceJour.numberSequenceGroup == _custInvoiceJourProforma.numberSequenceGroup;

        if (custInvoiceJour.RecId)
        {
            FINCustInvoiceJourProformaStatusManager::changeStatus(_custInvoiceJourProforma.RecId, FINCustInvoiceJourProformaStatus::Posted);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DNR:EnterInvoiceDateMultipleRentalInvoiceProposals</Caption>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">DropDialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Group_</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>dlgInvoiceDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TransDate</ExtendedDataType>
								<Label>@SYS57610</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<TopMargin>11</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandOK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<AutoRefreshData>Yes</AutoRefreshData>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS6098</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>