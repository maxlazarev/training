<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINTmpVoucherLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FINTmpVoucherLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateRecords</Name>
				<Source><![CDATA[
    public static FINTmpVoucherLink populateRecords(GeneralJournalEntry _generalJournalEntry, boolean _showRelatedVouchers, boolean _showRelatedCompanies)
    {
        FINTmpVoucherLink tmpVoucherLink;
        
        tmpVoucherLink.SubledgerVoucher             = _generalJournalEntry.SubledgerVoucher;
        tmpVoucherLink.SubledgerVoucherDataAreaId   = _generalJournalEntry.SubledgerVoucherDataAreaId;
        tmpVoucherLink.insert();

        tmpVoucherLink = FINTmpVoucherLink::findForVoucher(tmpVoucherLink, _generalJournalEntry.SubledgerVoucher, _generalJournalEntry.SubledgerVoucherDataAreaId, _showRelatedVouchers, _showRelatedCompanies);

        return tmpVoucherLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForVoucher</Name>
				<Source><![CDATA[
    public static FINTmpVoucherLink findForVoucher(FINTmpVoucherLink _tmpVoucherLink, Voucher _voucher, DataAreaId _company, boolean _showRelatedVouchers, boolean _showRelatedCompanies)
    {
        FINVoucherRef voucherRef;

        if (_showRelatedVouchers)
        {
            while select voucherRef
            where voucherRef.OriginVoucher      == _voucher
            &&    voucherRef.OriginCompanyId    == _company
            &&    (voucherRef.RelatedVoucher     != _voucher ||
                   voucherRef.RelatedCompanyId   != _company)
            {
                // Transactions in the same company as original voucher
                if (voucherRef.RelatedCompanyId == voucherRef.OriginCompanyId)
                {
                    _tmpVoucherLink.SubledgerVoucher             = voucherRef.RelatedVoucher;
                    _tmpVoucherLink.SubledgerVoucherDataAreaId   = voucherRef.RelatedCompanyId;
                    _tmpVoucherLink.insert();

                    // Recursive call for nested MDA
                    _tmpVoucherLink = FINTmpVoucherLink::findForVoucher(_tmpVoucherLink, _tmpVoucherLink.SubledgerVoucher, _tmpVoucherLink.SubledgerVoucherDataAreaId, _showRelatedVouchers, _showRelatedCompanies);
                }

                // Transactions in different company than original voucher
                if (_showRelatedCompanies && voucherRef.RelatedCompanyId != voucherRef.OriginCompanyId)
                {
                    LedgerTransVoucherLink  ledgerTransVoucherLink;
                    
                    select firstonly VoucherGroupId from ledgerTransVoucherLink
                    where ledgerTransVoucherLink.Voucher == voucherRef.RelatedVoucher;
                    
                    if (ledgerTransVoucherLink)
                    {
                        changecompany(voucherRef.RelatedCompanyId)
                        {
                            LedgerTransVoucherLink  ledgerTransVoucherLinkIC;

                            while select ledgerTransVoucherLinkIC
                            where ledgerTransVoucherLinkIC.VoucherGroupId == ledgerTransVoucherLink.VoucherGroupId
                            {
                                changecompany(voucherRef.OriginCompanyId)
                                {
                                    _tmpVoucherLink.SubledgerVoucher             = ledgerTransVoucherLinkIC.Voucher;
                                    _tmpVoucherLink.SubledgerVoucherDataAreaId   = voucherRef.RelatedCompanyId;
                                    _tmpVoucherLink.insert();
                                }

                                // Recursive call for nested MDA
                                _tmpVoucherLink = FINTmpVoucherLink::findForVoucher(_tmpVoucherLink, _tmpVoucherLink.SubledgerVoucher, _tmpVoucherLink.SubledgerVoucherDataAreaId, _showRelatedVouchers, _showRelatedCompanies);
                            }
                        }
                    }
                }
            }
        }

        return _tmpVoucherLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyRangeSet</Name>
				<Source><![CDATA[
    public static Set companyRangeSet(GeneralJournalEntry _generalJournalEntry, boolean _showRelatedCompanies)
    {
        Set             selectedCompaniesSet = new Set(Types::String);
        FINVoucherRef   voucherRef;

        selectedCompaniesSet.add(_generalJournalEntry.SubledgerVoucherDataAreaId);

        if (_showRelatedCompanies)
        {
            while select voucherRef
            where voucherRef.OriginVoucher      == _generalJournalEntry.SubledgerVoucher
            &&    voucherRef.OriginCompanyId    == _generalJournalEntry.SubledgerVoucherDataAreaId
            &&    voucherRef.RelatedCompanyId   != _generalJournalEntry.SubledgerVoucherDataAreaId
            {
                selectedCompaniesSet.add(voucherRef.RelatedCompanyId);
            }
        }
        
        return selectedCompaniesSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@DNR:TmpVoucherLink</Label>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubledgerVoucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubledgerVoucherDataAreaId</Name>
			<ExtendedDataType>CompanyId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>GeneralJournalEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubledgerVoucher</Name>
					<Field>SubledgerVoucher</Field>
					<RelatedField>SubledgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubledgerVoucherDataAreaId</Name>
					<Field>SubledgerVoucherDataAreaId</Field>
					<RelatedField>SubledgerVoucherDataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>