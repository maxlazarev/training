<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINBatchInvoiceConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FINBatchInvoiceConfiguration extends common
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        #TimeConstants
        super();
        
        this.CreationDateOffset = #daysPerWeek;
        SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();
        Timezone timezone = SysRecurrence::getRecurrenceTimezone(recurrenceData);
        recurrenceData = SysRecurrence::setRecurrenceStartDate(recurrenceData, DateTimeUtil::getSystemDate(timezone) + #daysPerWeek + 1);
        recurrenceData = SysRecurrence::setRecurrenceNoEnd(recurrenceData);
        recurrenceData = SysRecurrence::setRecurrenceUnit(recurrenceData, SysRecurrenceUnit::Day);
        this.CalculationDateTimeRecurrence = recurrenceData;
        this.modifiedField(fieldNum(FINBatchInvoiceConfiguration, CalculationDateTimeRecurrence));
        this.ScheduledDateTimeRecurrence = recurrenceData;
        this.modifiedField(fieldNum(FINBatchInvoiceConfiguration, ScheduledDateTimeRecurrence));
        this.PackedQueryRun = this.initQueryRun().pack();
        this.SpecQty = SalesUpdate::PackingSlip;
        this.CheckCreditMax = TypeOfCreditmaxCheck::BalanceAll;
        this.INVIncludeUninvoiced = NoYes::Yes;
        this.UsePrintManagement = NoYes::Yes;
        this.InvoiceCheckEnabled = NoYes::Yes;
        this.InvoiceCheckSelectionPacked = DNRPreInvoiceCheck::getDefaultInvoiceCheckSelectionMap().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        
        Query query = new Query(queryStr(SalesUpdatePackingSlip));
        QueryBuildDataSource qbdsSalesTable = SysQuery::findOrCreateDataSource(query, tableNum(SalesTable));
        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbdsSalesTable, fieldNum(SalesTable, SalesType));
        qbr.value(enum2Str(SalesType::RORRental));
        qbr.status(RangeStatus::Locked);

        SysQuery::findOrCreateRange(qbdsSalesTable, fieldNum(SalesTable, INVInvoiceProfileId));

        qbr = SysQuery::findOrCreateRange(qbdsSalesTable, fieldNum(SalesTable, SalesStatus));
        qbr.value(SysQuery::range(enum2Str(SalesStatus::Backorder), enum2Str(SalesStatus::Delivered)));

        QueryBuildDataSource qbdsSalesLine = SysQuery::findOrCreateDataSource(query, tableNum(SalesLine));
        qbr  = qbdsSalesLine.addRange(fieldNum(SalesLine, Blocked));
        qbr.value(enum2Str(NoYes::No));

        QueryRun queryRun = new QueryRun(query);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextSchedule</Name>
				<Source><![CDATA[
    public void setNextSchedule()
    {
        WPPOffset offset;

        // update current date/times
        this.CreationDate = this.NextCreationDate;
        this.ScheduledDateTime = this.NextScheduledDateTime;
        this.CalculationDateTime = this.NextCalculationDateTime;

        //Next Schedule date /time
        [this.NextScheduledDateTime, offset] = this.getNextDateTimeFromCalendar(this.CalendarId, this.ScheduledDateTimeRecurrence, this.ScheduledDateTime);

        Timezone timezone = SysRecurrence::getRecurrenceTimezone(this.ScheduledDateTimeRecurrence);
        this.NextCreationDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.NextScheduledDateTime, timezone));
        this.NextCreationDate = this.NextCreationDate - this.CreationDateOffset;
        
        //Next Calculation date/time
        this.NextCalculationDateTime = DateTimeUtil::addDays(this.getNextDateTimeFromRecurrence(this.CalculationDateTimeRecurrence,this.CalculationDateTime), offset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextDateTimeFromRecurrence</Name>
				<Source><![CDATA[
    protected TransDateTime getNextDateTimeFromRecurrence(container _recurrence, TransDateTime _transDateTime)
    {
        Timezone timezone = SysRecurrence::getRecurrenceTimezone(_recurrence);
        TransDate transDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_transDateTime, timezone));
        TimeOfDay transTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_transDateTime, timezone));
        [transDate, transTime] = SysRecurrence::next(_recurrence, -1, transDate, transTime);

        return DateTimeUtil::newDateTime(transDate, transTime, timezone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextDateTimeFromCalendar</Name>
				<Source><![CDATA[
    protected container getNextDateTimeFromCalendar(DNRCalendarId _calendarId, container _recurrence, TransDateTime _transDateTime)
    {
        TransDateTime   transDateTime = this.getNextDateTimeFromRecurrence(_recurrence, _transDateTime);
        TransDateTime   firstTransDateTime = transDateTime;
        const int       secondsPerDay = 86400;

        DNRWorkCalendarSched workCalendarSched = new DNRWorkCalendarSched(true);
        
        while (this.CalendarId && !workCalendarSched.isDateOpen(_calendarId, DateTimeUtil::date(transDateTime)))
        {
            transDateTime = this.UseNextOpenDay ? DateTimeUtil::addDays(transDateTime, 1) : this.getNextDateTimeFromRecurrence(_recurrence, transDateTime);
        }

        return [transDateTime, round(DateTimeUtil::getDifference(transDateTime, firstTransDateTime) / secondsPerDay, 0)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        Timezone    timezone;

        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(FINBatchInvoiceConfiguration, CalculationDateTimeRecurrence) :
            case fieldNum(FINBatchInvoiceConfiguration, ScheduledDateTimeRecurrence) :
            case fieldNum(FINBatchInvoiceConfiguration, CalendarId) :
            case fieldNum(FINBatchInvoiceConfiguration, UseNextOpenDay) :
                this.updateScheduledCalculationDatesTimes();
                break;
            
            case fieldNum(FINBatchInvoiceConfiguration, PackedQueryRun) :
                this.queryRunModified();
                break;

            case fieldNum(FINBatchInvoiceConfiguration, CreationDateOffset) :
                timezone = SysRecurrence::getRecurrenceTimezone(this.ScheduledDateTimeRecurrence);
                this.CreationDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ScheduledDateTime, timezone)) - this.CreationDateOffset;
                this.NextCreationDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.NextScheduledDateTime, timezone)) - this.CreationDateOffset;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledCalculationDatesTimes</Name>
				<Source><![CDATA[
    protected void updateScheduledCalculationDatesTimes()
    {
        WPPOffset calculationDateOffset, nextCalculationDateOffset;

        [this.ScheduledDateTime, calculationDateOffset] = this.getNextDateTimeFromCalendar(this.CalendarId, this.ScheduledDateTimeRecurrence, DateTimeUtil::minValue());

        [this.NextScheduledDateTime, nextCalculationDateOffset] = this.getNextDateTimeFromCalendar(this.CalendarId, this.ScheduledDateTimeRecurrence, this.ScheduledDateTime);

        this.modifiedField(fieldNum(FINBatchInvoiceConfiguration, CreationDateOffset));

        this.CalculationDateTime = DateTimeUtil::addDays(this.getNextDateTimeFromRecurrence(this.CalculationDateTimeRecurrence, DateTimeUtil::minValue()), calculationDateOffset);

        this.NextCalculationDateTime = DateTimeUtil::addDays(this.getNextDateTimeFromRecurrence(this.CalculationDateTimeRecurrence, this.CalculationDateTime), nextCalculationDateOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunModified</Name>
				<Source><![CDATA[
    protected void queryRunModified()
    {
        QueryBuildRange qbr = this.getInvoiceProfileRange();

        if (qbr)
        {
            this.InvoiceProfileRange = qbr.value();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceProfileRange</Name>
				<Source><![CDATA[
    public QueryBuildRange getInvoiceProfileRange()
    {
        QueryBuildRange qbr;
        QueryBuildDataSource qbds = this.getSalesTableDS();
        
        if (qbds)
        {
            qbr = qbds.findRange(fieldNum(SalesTable, INVInvoiceProfileId));
        }

        return qbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayQueryTxt</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display str4095 displayQueryTxt()
    {
        str queryTxt;
        QueryBuildDataSource qbds = this.getSalesTableDS();
        
        if (qbds)
        {
            queryTxt = qbds.toString();
        }

        return queryTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculationDateRecurrence</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display SysRecurrenceText displayCalculationDateRecurrence()
    {
        return SysRecurrenceRun::toText(this.CalculationDateTimeRecurrence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayScheduledDateRecurrence</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display SysRecurrenceText displayScheduledDateRecurrence()
    {
        return SysRecurrenceRun::toText(this.ScheduledDateTimeRecurrence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        switch(_fieldIdToCheck)
        {
            case fieldNum(FINBatchInvoiceConfiguration, PackedQueryRun):
                ret = this.validateQueryRun();
                break;
            
            case fieldNum(FINBatchInvoiceConfiguration, SpecQty):
                if (this.SpecQty != SalesUpdate::All && this.SpecQty != SalesUpdate::PackingSlip)
                {
                    ret = checkFailed(strFmt("@DNR7140", this.SpecQty, DocumentStatus::Invoice));
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTableDS</Name>
				<Source><![CDATA[
    private QueryBuildDataSource getSalesTableDS()
    {
        QueryRun queryRun = new QueryRun(this.PackedQueryRun);
        QueryBuildDataSource qbds = queryRun.query().dataSourceTable(tableNum(SalesTable));
        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQueryRun</Name>
				<Source><![CDATA[
    protected boolean validateQueryRun()
    {
        boolean ret;
        QueryBuildRange qbr = this.getInvoiceProfileRange();

        if (qbr && qbr.value())
        {
            ret = true;
        }
        else
        {
            ret = checkFailed("@DNR:QueryMustIncludeInvoiceProfileRange");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        ret = ret && this.validateQueryRun();

        ret = ret && this.validateIncludeParameter();

        ret = ret && this.validateDateFields();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIncludeParameter</Name>
				<Source><![CDATA[
    public boolean validateIncludeParameter()
    {
        boolean ret;
        
        if (this.INVIncludeCredits || this.INVIncludeUninvoiced)
        {
            ret = true;
        }
        else
        {
            ret = checkFailed(strFmt("@DNR:Field1AndField2CannotUncheckedAtSameTime", fieldStr(FINBatchInvoiceConfiguration, INVIncludeCredits),
                                                                                      fieldStr(FINBatchInvoiceConfiguration, INVIncludeUninvoiced)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateFields</Name>
				<Source><![CDATA[
    public boolean validateDateFields()
    {
        boolean ret = true;
        
        // Only warning , validate write must pass if these check fails
        if (this.ScheduledDateTime <= DateTimeUtil::getSystemDateTime())
        {
            checkFailed(strFmt("@DNR:Field1IsBeforeSystemDateTime", fieldStr(FINBatchInvoiceConfiguration, ScheduledDateTime)));
        }

        if (this.CalculationDateTime <= DateTimeUtil::getSystemDateTime())
        {
            checkFailed(strFmt("@DNR:Field1IsBeforeSystemDateTime", fieldStr(FINBatchInvoiceConfiguration, CalculationDateTime)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingAuditTrail</Name>
				<Source><![CDATA[
    public boolean checkExistingAuditTrail()
    {
        FINBatchInvoiceAuditTrail auditTrail;
        boolean ret = true;

        if (this.promptForFieldChange())
        {
            select firstonly RecID from auditTrail
            where auditTrail.ConfigurationId == this.ConfigurationId
            &&    auditTrail.ScheduledDateTime >= DateTimeUtil::getSystemDateTime();

            if (auditTrail)
            {
                if (Box::okCancel("@DNR:InvoiceConfigurationEditConfirmationTxt", DialogButton::Cancel) == DialogButton::Ok)
                {
                    ret = this.cleanupScheduledBatch();
                }
                else
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForFieldChange</Name>
				<Source><![CDATA[
    private boolean promptForFieldChange()
    {
        boolean ret;
        FINBatchInvoiceConfiguration origConfiguration = this.orig();

        if (this.INVIncludeCredits              != origConfiguration.INVIncludeCredits
        ||  this.INVIncludeUninvoiced           != origConfiguration.INVIncludeUninvoiced
        ||  this.SumBy                          != origConfiguration.SumBy
        ||  this.SpecQty                        != origConfiguration.SpecQty
        ||  this.SumSalesId                     != origConfiguration.SumSalesId
        ||  this.CheckCreditMax                 != origConfiguration.CheckCreditMax
        ||  this.ForceInvoiceUntilPoint         != origConfiguration.ForceInvoiceUntilPoint
        ||  this.UsePrintManagement             != origConfiguration.UsePrintManagement
        ||  this.PackedQueryRun                 != origConfiguration.PackedQueryRun
        ||  this.ScheduledDateTimeRecurrence    != origConfiguration.ScheduledDateTimeRecurrence
        ||  this.CalculationDateTimeRecurrence  != origConfiguration.CalculationDateTimeRecurrence)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupScheduledBatch</Name>
				<Source><![CDATA[
    private boolean cleanupScheduledBatch()
    {
        boolean ret;

        try
        {
            BatchJob batchjob;
            FINBatchInvoiceAuditTrail auditTrail;

            delete_from batchjob
                exists join auditTrail
                where auditTrail.InvoiceCheckBatch == batchjob.RecId
                &&    auditTrail.ConfigurationId == this.ConfigurationId
                &&    auditTrail.ScheduledDateTime >= DateTimeUtil::getSystemDateTime();

            delete_from batchjob
                exists join auditTrail
                where auditTrail.InvoiceRunBatch == batchjob.RecId
                &&    auditTrail.ConfigurationId == this.ConfigurationId
                &&    auditTrail.ScheduledDateTime >= DateTimeUtil::getSystemDateTime();
            
            ret = true;
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static FINBatchInvoiceConfiguration find(FINInvoiceConfigurationId _configurationId, boolean _forupdate = false)
    {
        FINBatchInvoiceConfiguration ret;

        ret.selectForUpdate(_forupdate);

        if (_configurationId)
        {
            select ret where ret.ConfigurationId == _configurationId;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR:TableHoldsParameterDataForAdvancedRentalInvoicingBatches</DeveloperDocumentation>
	<FormRef>FINBatchInvoiceConfiguration</FormRef>
	<Label>@DNR:AdvanceRentalInvoiceConfiguration</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>ConfigurationId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ConfigurationIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ConfigurationIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigurationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigurationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigurationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduledDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextCreationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextScheduledDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextCalculationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreationDateOffset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceProfileRange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parameter</Name>
			<Label>@DNR:InvoiceParameter</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SpecQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckCreditMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVIncludeCredits</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVIncludeUninvoiced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsePrintManagement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForceInvoiceUntilPoint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigurationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceCheck</Name>
			<Label>@DNR:InvoiceCheck</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceCheckEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoStartInvoiceBatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCheckOffset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCheckSelectionPacked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Summary</Name>
			<Label>@SYS24079</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SumBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumSalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@DNR538</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduledDateTimeRecurrence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationDateTimeRecurrence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackedQueryRun</DataField>
				</AxTableFieldGroupField>
				
				<AxTableFieldGroupField>
					<DataField>BatchGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseNextOpenDay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfigurationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FINInvoiceConfigurationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CreationDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CreationDate</ExtendedDataType>
			<Label>@DNR:PlannedCreationDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ScheduledDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@DNR:PlannedScheduledDateTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ScheduledDateTimeRecurrence</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRecurrenceData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CalculationDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>INVCalculationDateTime</ExtendedDataType>
			<Label>@DNR:PlannedCalculationDateTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CalculationDateTimeRecurrence</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRecurrenceData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>NextCreationDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CreationDate</ExtendedDataType>
			<Label>@DNR:NextCreationDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>NextScheduledDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@DNR:NextScheduledDateTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>NextCalculationDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>INVCalculationDateTime</ExtendedDataType>
			<Label>@DNR:NextCalculationDateTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedQueryRun</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PackedQueryRun</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>INVIncludeCredits</Name>
			<ExtendedDataType>INVIncludeCredits</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>INVIncludeUninvoiced</Name>
			<ExtendedDataType>INVIncludeUninvoiced</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UsePrintManagement</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS93922</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForceInvoiceUntilPoint</Name>
			<ExtendedDataType>FINForceInvoiceUntilPoint</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SpecQty</Name>
			<Label>@SYS14578</Label>
			<EnumType>SalesUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CheckCreditMax</Name>
			<ExtendedDataType>CustCreditMaxCheck</ExtendedDataType>
			<Label>@SYS13905</Label>
			<EnumType>TypeOfCreditmaxCheck</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CreationDateOffset</Name>
			<ExtendedDataType>WPPOffset</ExtendedDataType>
			<Label>@DNR:CreationDateOffsetDays</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceProfileRange</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@DNR:InvoiceProfileRange</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>InvoiceCheckOffset</Name>
			<ExtendedDataType>WPPOffset</ExtendedDataType>
			<Label>@DNR:InvoiceCheckOffsetDays</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS25665</Label>
			<EnumType>AccountOrder</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SumSalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<Label>@DNR6231</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceCheckEnabled</Name>
			<Label>@DNR:InvoiceCheck</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BatchGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BatchGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<ExtendedDataType>DNRCalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseNextOpenDay</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@DNR:UseNextOpenDay</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoStartInvoiceBatch</Name>
			<Label>@DNR:AutoStartInvoicebatch</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>InvoiceCheckSelectionPacked</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
			<Label>@DNR:InvoiceChecks</Label>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConfigurationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConfigurationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		
		<AxTableRelation>
			<Name>BatchGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125391</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BatchGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BatchGroupId</Name>
					<SourceEDT>BatchGroupId</SourceEDT>
					<Field>BatchGroupId</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DNRCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DNRCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>