<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINInvoiceCalculatorParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FINInvoiceCalculatorParm extends common
{    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLine</Name>
				<Source><![CDATA[
    public Common parmLine()
    {
        // dummy empty buffer
        Common  common;
        

        return (this.ParmLinePacked == conNull() ? common : con2Buf(this.ParmLinePacked));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineQty</Name>
				<Source><![CDATA[
    public Qty parmLineQty()
    {
        Common common = this.parmLine();
        Qty ret;

        switch (common.TableId)
        {
            case tableNum(SalesParmLine) :
                SalesParmLine salesParmLine = common;
                ret = salesParmLine.DeliverNow;
                break;
            case tableNum(VendInvoiceInfoLine) :
                VendInvoiceInfoLine vendInvoiceInfoLine = common;
                ret = vendInvoiceInfoLine.ReceiveNow;
                break;
            case tableNum(SalesQuotationParmLine) :
                SalesQuotationParmLine salesQuotationParmLine = common;
                ret = salesQuotationParmLine.DeliverNow;
                break;
            case tableNum(PSAtmpProjProposalTrans) :
                PSAtmpProjProposalTrans tmpProjProposalTrans = common;
                ret = tmpProjProposalTrans.Qty;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalLine</Name>
				<Source><![CDATA[
    public RORRentalLine rentalLine()
    {
        // dummy empty buffer
        Common  common;

        return (this.OrderLinePacked == conNull() ? common : con2Buf(this.OrderLinePacked));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return this.rentalLine().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUpdateParmLine</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public static void deleteUpdateParmLine(ParmId _parmId, TableId _parmLineTableId)
    {
        FINInvoiceCalculatorParm invoiceCalculatorParm;

        if (_parmLineTableId == tableNum(SalesParmLine))
        {
            SalesParmLine   salesParmLine;
            SalesLine       salesLine;
        
            delete_from salesParmLine
            where salesParmLine.ParmId == _parmId
                exists join salesLine
                where salesLine.RecId == salesParmLine.SalesLineRecId
                &&    salesLine.RORTradeType != RORTradeType::SalesPurch
                    notexists join invoiceCalculatorParm
                    where invoiceCalculatorParm.ParmLineTableId == salesParmLine.TableId
                    &&    invoiceCalculatorParm.ParmLineRecId == salesParmLine.RecId
                    &&    invoiceCalculatorParm.ParmId == salesParmLine.ParmId;

            update_recordset salesParmLine
            setting LineAmount = 0, FINLineAmount = invoiceCalculatorParm.InvoiceAmount
            where salesParmLine.ParmId == _parmId
                join InvoiceAmount from invoiceCalculatorParm
                where invoiceCalculatorParm.ParmLineTableId == salesParmLine.TableId
                &&    invoiceCalculatorParm.ParmLineRecId == salesParmLine.RecId
                &&    invoiceCalculatorParm.ParmId == salesParmLine.ParmId;
        }
        else if (_parmLineTableId == tableNum(VendInvoiceInfoLine))
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            PurchLine           purchLine;
        
            delete_from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _parmId
                exists join purchLine
                where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                &&    purchLine.RORTradeType != RORTradeType::SalesPurch
                    notexists join invoiceCalculatorParm
                    where invoiceCalculatorParm.ParmLineTableId == vendInvoiceInfoLine.TableId
                    &&    invoiceCalculatorParm.ParmLineRecId == vendInvoiceInfoLine.RecId
                    &&    invoiceCalculatorParm.ParmId == vendInvoiceInfoLine.ParmId;

            update_recordset vendInvoiceInfoLine
            setting LineAmount = 0, FINLineAmount = invoiceCalculatorParm.InvoiceAmount
            where vendInvoiceInfoLine.ParmId == _parmId
                join  invoiceCalculatorParm
                where invoiceCalculatorParm.ParmLineTableId == vendInvoiceInfoLine.TableId
                &&    invoiceCalculatorParm.ParmLineRecId == vendInvoiceInfoLine.RecId
                &&    invoiceCalculatorParm.ParmId == vendInvoiceInfoLine.ParmId;;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCalculatedData</Name>
				<Source><![CDATA[
    public void clearCalculatedData()
    {
        this.InvoiceAmount                  = 0;
        this.MarkupAmount                   = 0;
        this.WasAnyEngineExecuted           = false;
        this.MustBeInvoiced                 = false;
        this.ManualCalcPacked               = conNull(); 
        this.ConsumptionCalcPacked          = conNull();
        this.ProjHoursCalcPacked            = conNull();
        this.CostPriceCalcPacked            = conNull();
        this.RentalCalcPacked               = conNull(); 
        this.PeriodSpecificationPacked      = new Map(Types::Container, Types::Class).pack(); //empty Map
        this.InvoiceCalcResultListPacked    = new List(Types::Class).pack(); // empty list    
        this.IsPeriodSpecificationCalculated= NoYes::No;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicingOptions</Name>
				<Source><![CDATA[
    public FINInvoicingOptions getInvoicingOptions()
    {
        FINInvoicingOptions finInvoicingOptions;

        if (this.OrderLineTableId == tableNum(SalesLine) && this.ParmUpdatePacked)
        {
            SalesParmUpdate salesParmUpdate = con2Buf(this.ParmUpdatePacked);

            finInvoicingOptions = FINInvoicingOptions::createFromSalesParmUpdate(salesParmUpdate);
        }
        else if (this.OrderLineTableId == tableNum(PurchLine) && this.ParmUpdatePacked)
        {
            PurchParmUpdate purchParmUpdate = con2Buf(this.ParmUpdatePacked);

            finInvoicingOptions = FINInvoicingOptions::createFromPurchParmUpdate(purchParmUpdate);
        }
        else
        {
            // used for Totals
            RORRentalLine   rentalLine      = con2Buf(this.OrderLinePacked);
            TransDate       calculationDate = endMth(DateTimeUtil::date(rentalLine.RORRentalDateTimes().getOffRentDateTime(true)));

            finInvoicingOptions = FINInvoicingOptions::construct();

            finInvoicingOptions.calculationDateTime         = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(calculationDate+1, 1), rentalLine.RORRentalLine::FINTimeZoneOrder());
            finInvoicingOptions.includeUninvoiced           = true;
            finInvoicingOptions.includeCredited             = true;
            finInvoicingOptions.forceUntilCalculationPoint  = false;
            finInvoicingOptions.parmId                      = this.ParmId;
        }

        return finInvoicingOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCustInvoiceTrans</Name>
				<Source><![CDATA[
    public void journalizeCustInvoiceTrans(RecId _refRecId)
    {
        FINCustInvoiceTrans custInvoiceTrans;

        custInvoiceTrans.CustInvoiceTransRecId = _refRecId;
        custInvoiceTrans.RAGContractLinePacked = this.RAGContractLinePacked;
        custInvoiceTrans.RAGContractTiersPacked = this.RAGContractTiersPacked;
        custInvoiceTrans.InvoiceCalcResultListPacked = this.InvoiceCalcResultListPacked;
        custInvoiceTrans.ProjHoursCalcPacked = this.ProjHoursCalcPacked;
        custInvoiceTrans.ManualCalcPacked = this.ManualCalcPacked;
        custInvoiceTrans.ConsumptionCalcPacked = this.ConsumptionCalcPacked;
        custInvoiceTrans.CostPriceCalcPacked = this.CostPriceCalcPacked;
        custInvoiceTrans.RentalCalcPacked = this.RentalCalcPacked;
        custInvoiceTrans.CreditCalcPacked = this.CreditCalcPacked;
        custInvoiceTrans.TransportCalcPacked = this.TransportCalcPacked;
        custInvoiceTrans.PeriodSpecificationPacked = this.PeriodSpecificationPacked;
        custInvoiceTrans.InvoiceAmount = this.InvoiceAmount;
        custInvoiceTrans.MarkupAmount = this.MarkupAmount;
        custInvoiceTrans.PriceComponentsAmendmentPacked = this.PriceComponentsAmendmentPacked;
        custInvoiceTrans.Timezone = this.Timezone;
        custInvoiceTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCustInvoiceTransProforma</Name>
				<Source><![CDATA[
    public void journalizeCustInvoiceTransProforma(RecId _refRecId)
    {
        FINCustInvoiceTransProFormaInvoiceTrans custInvoiceTransProformaInvoiceTrans;

        custInvoiceTransProformaInvoiceTrans.CustInvoiceTransRecId = _refRecId;
        custInvoiceTransProformaInvoiceTrans.RAGContractLinePacked = this.RAGContractLinePacked;
        custInvoiceTransProformaInvoiceTrans.RAGContractTiersPacked  = this.RAGContractTiersPacked;
        custInvoiceTransProformaInvoiceTrans.InvoiceCalcResultListPacked = this.InvoiceCalcResultListPacked;
        custInvoiceTransProformaInvoiceTrans.ProjHoursCalcPacked = this.ProjHoursCalcPacked;
        custInvoiceTransProformaInvoiceTrans.ManualCalcPacked = this.ManualCalcPacked;
        custInvoiceTransProformaInvoiceTrans.ConsumptionCalcPacked = this.ConsumptionCalcPacked;
        custInvoiceTransProformaInvoiceTrans.CostPriceCalcPacked = this.CostPriceCalcPacked;
        custInvoiceTransProformaInvoiceTrans.RentalCalcPacked = this.RentalCalcPacked;
        custInvoiceTransProformaInvoiceTrans.CreditCalcPacked = this.CreditCalcPacked;
        custInvoiceTransProformaInvoiceTrans.TransportCalcPacked = this.TransportCalcPacked;
        custInvoiceTransProformaInvoiceTrans.PeriodSpecificationPacked = this.PeriodSpecificationPacked;
        custInvoiceTransProformaInvoiceTrans.InvoiceAmount = this.InvoiceAmount;
        custInvoiceTransProformaInvoiceTrans.MarkupAmount = this.MarkupAmount;
        custInvoiceTransProformaInvoiceTrans.PriceComponentsAmendmentPacked = this.PriceComponentsAmendmentPacked;
        custInvoiceTransProformaInvoiceTrans.Timezone = this.Timezone;
        custInvoiceTransProformaInvoiceTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeProjInvoiceItem</Name>
				<Source><![CDATA[
    public void journalizeProjInvoiceItem(RecId _refRecId)
    {
        FINProjInvoiceItem projInvoiceItem;
        
        projInvoiceItem.ProjInvoiceItemRecId = _refRecId;
        projInvoiceItem.RAGContractLinePacked = this.RAGContractLinePacked;
        projInvoiceItem.RAGContractTiersPacked = this.RAGContractTiersPacked;
        projInvoiceItem.InvoiceCalcResultListPacked = this.InvoiceCalcResultListPacked;
        projInvoiceItem.ProjHoursCalcPacked = this.ProjHoursCalcPacked;
        projInvoiceItem.ManualCalcPacked = this.ManualCalcPacked;
        projInvoiceItem.ConsumptionCalcPacked = this.ConsumptionCalcPacked;
        projInvoiceItem.CostPriceCalcPacked = this.CostPriceCalcPacked;
        projInvoiceItem.RentalCalcPacked = this.RentalCalcPacked;
        projInvoiceItem.CreditCalcPacked = this.CreditCalcPacked;
        projInvoiceItem.TransportCalcPacked = this.TransportCalcPacked;
        projInvoiceItem.PeriodSpecificationPacked = this.PeriodSpecificationPacked;
        projInvoiceItem.InvoiceAmount = this.InvoiceAmount;
        projInvoiceItem.MarkupAmount = this.MarkupAmount;
        projInvoiceItem.PriceComponentsAmendmentPacked = this.PriceComponentsAmendmentPacked;
        projInvoiceItem.Timezone = this.Timezone;
        projInvoiceItem.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCustQuotationConfirmTrans</Name>
				<Source><![CDATA[
    public void journalizeCustQuotationConfirmTrans(RecId _refRecId)
    {
        FINCustQuotationConfirmTrans custQuotationConfirmTrans;

        custQuotationConfirmTrans.CustQuotationConfirmTransRecId = _refRecId;
        custQuotationConfirmTrans.RAGContractLinePacked = this.RAGContractLinePacked;
        custQuotationConfirmTrans.RAGContractTiersPacked = this.RAGContractTiersPacked;
        custQuotationConfirmTrans.InvoiceCalcResultListPacked = this.InvoiceCalcResultListPacked;
        custQuotationConfirmTrans.ProjHoursCalcPacked = this.ProjHoursCalcPacked;
        custQuotationConfirmTrans.ManualCalcPacked = this.ManualCalcPacked;
        custQuotationConfirmTrans.ConsumptionCalcPacked = this.ConsumptionCalcPacked;
        custQuotationConfirmTrans.CostPriceCalcPacked = this.CostPriceCalcPacked;
        custQuotationConfirmTrans.RentalCalcPacked = this.RentalCalcPacked;
        custQuotationConfirmTrans.CreditCalcPacked = this.CreditCalcPacked;
        custQuotationConfirmTrans.TransportCalcPacked = this.TransportCalcPacked;
        custQuotationConfirmTrans.PeriodSpecificationPacked = this.PeriodSpecificationPacked;
        custQuotationConfirmTrans.InvoiceAmount = this.InvoiceAmount;
        custQuotationConfirmTrans.MarkupAmount = this.MarkupAmount;
        custQuotationConfirmTrans.PriceComponentsAmendmentPacked = this.PriceComponentsAmendmentPacked;
        custQuotationConfirmTrans.Timezone = this.Timezone;
        custQuotationConfirmTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCustQuotationTrans</Name>
				<Source><![CDATA[
    public void journalizeCustQuotationTrans(RecId _refRecId)
    {
        FINCustQuotationTrans custQuotationTrans;

        custQuotationTrans.CustQuotationTransRecId = _refRecId;
        custQuotationTrans.RAGContractLinePacked = this.RAGContractLinePacked;
        custQuotationTrans.RAGContractTiersPacked = this.RAGContractTiersPacked;
        custQuotationTrans.InvoiceCalcResultListPacked = this.InvoiceCalcResultListPacked;
        custQuotationTrans.ProjHoursCalcPacked = this.ProjHoursCalcPacked;
        custQuotationTrans.ManualCalcPacked = this.ManualCalcPacked;
        custQuotationTrans.ConsumptionCalcPacked = this.ConsumptionCalcPacked;
        custQuotationTrans.CostPriceCalcPacked = this.CostPriceCalcPacked;
        custQuotationTrans.RentalCalcPacked = this.RentalCalcPacked;
        custQuotationTrans.CreditCalcPacked = this.CreditCalcPacked;
        custQuotationTrans.TransportCalcPacked = this.TransportCalcPacked;
        custQuotationTrans.PeriodSpecificationPacked = this.PeriodSpecificationPacked;
        custQuotationTrans.InvoiceAmount = this.InvoiceAmount;
        custQuotationTrans.MarkupAmount = this.MarkupAmount;
        custQuotationTrans.PriceComponentsAmendmentPacked = this.PriceComponentsAmendmentPacked;
        custQuotationTrans.Timezone = this.Timezone;
        custQuotationTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeCustConfirmTrans</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2020', false)]
    public void journalizeCustConfirmTrans(RecId _refRecId)
    {
        FINCustConfirmTrans custConfirmTrans;

        custConfirmTrans.CustConfirmTransRecId = _refRecId;
        custConfirmTrans.RAGContractLinePacked = this.RAGContractLinePacked;
        custConfirmTrans.InvoiceCalcResultListPacked = this.InvoiceCalcResultListPacked;
        custConfirmTrans.ProjHoursCalcPacked = this.ProjHoursCalcPacked;
        custConfirmTrans.ManualCalcPacked = this.ManualCalcPacked;
        custConfirmTrans.ConsumptionCalcPacked = this.ConsumptionCalcPacked;
        custConfirmTrans.CostPriceCalcPacked = this.CostPriceCalcPacked;
        custConfirmTrans.RentalCalcPacked = this.RentalCalcPacked;
        custConfirmTrans.CreditCalcPacked = this.CreditCalcPacked;
        custConfirmTrans.TransportCalcPacked = this.TransportCalcPacked;
        custConfirmTrans.PeriodSpecificationPacked = this.PeriodSpecificationPacked;
        custConfirmTrans.InvoiceAmount = this.InvoiceAmount;
        custConfirmTrans.MarkupAmount = this.MarkupAmount;
        custConfirmTrans.Timezone = this.Timezone;
        custConfirmTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeVendInvoiceTrans</Name>
				<Source><![CDATA[
    public void journalizeVendInvoiceTrans(RecId _refRecId)
    {
        FINVendInvoiceTrans vendInvoiceTrans;

        vendInvoiceTrans.VendInvoiceTransRecId = _refRecId;
        vendInvoiceTrans.RAGContractLinePacked = this.RAGContractLinePacked;
        vendInvoiceTrans.RAGContractTiersPacked = this.RAGContractTiersPacked;
        vendInvoiceTrans.InvoiceCalcResultListPacked = this.InvoiceCalcResultListPacked;
        vendInvoiceTrans.ProjHoursCalcPacked = this.ProjHoursCalcPacked;
        vendInvoiceTrans.ManualCalcPacked = this.ManualCalcPacked;
        vendInvoiceTrans.ConsumptionCalcPacked = this.ConsumptionCalcPacked;
        vendInvoiceTrans.CostPriceCalcPacked = this.CostPriceCalcPacked;
        vendInvoiceTrans.RentalCalcPacked = this.RentalCalcPacked;
        vendInvoiceTrans.CreditCalcPacked = this.CreditCalcPacked;
        vendInvoiceTrans.TransportCalcPacked = this.TransportCalcPacked;
        vendInvoiceTrans.PeriodSpecificationPacked = this.PeriodSpecificationPacked;
        vendInvoiceTrans.InvoiceAmount = this.InvoiceAmount;
        vendInvoiceTrans.MarkupAmount = this.MarkupAmount;
        vendInvoiceTrans.PriceComponentsAmendmentPacked = this.PriceComponentsAmendmentPacked;
        vendInvoiceTrans.Timezone = this.Timezone;
        vendInvoiceTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValuesPerEngine</Name>
				<Source><![CDATA[
    public Set getChargedValuesPerEngine(boolean _useConsumptionCalc = true,
        boolean _useCostPriceCalc = true,
        boolean _useCreditCalc = true,
        boolean _useManualCalc = true,
        boolean _useProjHoursCalc = true,
        boolean _useRentalCalc = true,
        boolean _useTransportCalc = true)
    {
        Set ret = new Set(Types::Container);

        if (_useConsumptionCalc && this.ConsumptionCalcPacked)
        {
            FINConsumptionJournalizer consumptionJournalizer = new FINConsumptionJournalizer();
            consumptionJournalizer.unpack(this.ConsumptionCalcPacked);

            Set consumptionSet = consumptionJournalizer.getChargedValues();

            ret = Set::union(ret, consumptionSet);
        }

        if (_useCostPriceCalc && this.CostPriceCalcPacked)
        {
            FINCostPriceJournalizer costPriceJournalizer = new FINCostPriceJournalizer();
            costPriceJournalizer.unpack(this.CostPriceCalcPacked);

            Set costPriceSet = costPriceJournalizer.getChargedValues();

            ret = Set::union(ret, costPriceSet);
        }

        if (_useCreditCalc && this.CreditCalcPacked)
        {
            FINCreditJournalizer creditJournalizer = new FINCreditJournalizer();
            creditJournalizer.unpack(this.CreditCalcPacked);

            Set creditSet = creditJournalizer.getChargedValues();

            ret = Set::union(ret, creditSet);
        }

        if (_useManualCalc && this.ManualCalcPacked)
        {
            FINManualComponentJournalizer manualJournalizer = new FINManualComponentJournalizer();
            manualJournalizer.unpack(this.ManualCalcPacked);

            Set manualSet = manualJournalizer.getChargedValues();

            ret = Set::union(ret, manualSet);
        }

        if (_useProjHoursCalc && this.ProjHoursCalcPacked)
        {
            FINProjHourJournalizer projHourJournalizer = new FINProjHourJournalizer();
            projHourJournalizer.unpack(this.ProjHoursCalcPacked);

            Set projHourSet = projHourJournalizer.getChargedValues();

            ret = Set::union(ret, projHourSet);
        }

        if (_useRentalCalc && this.RentalCalcPacked)
        {
            FINRentalJournalizer rentalJournalizer = new FINRentalJournalizer();
            rentalJournalizer.unpack(this.RentalCalcPacked);

            Set rentalSet = rentalJournalizer.getChargedValues();

            ret = Set::union(ret, rentalSet);
        }

        if (_useTransportCalc && this.TransportCalcPacked)
        {
            FINTransportPriceJournalizer transportJournalizer = new FINTransportPriceJournalizer();
            transportJournalizer.unpack(this.TransportCalcPacked);

            Set transportSet = transportJournalizer.getChargedValues();

            ret = Set::union(ret, transportSet);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFINCustInvoiceTrans</Name>
				<Source><![CDATA[
    public void initFromFINCustInvoiceTrans(FINCustInvoiceTrans _finCustInvoiceTrans)
    {
        this.RAGContractLinePacked = _finCustInvoiceTrans.RAGContractLinePacked;
        this.InvoiceCalcResultListPacked = _finCustInvoiceTrans.InvoiceCalcResultListPacked;
        this.ProjHoursCalcPacked = _finCustInvoiceTrans.ProjHoursCalcPacked;
        this.ManualCalcPacked = _finCustInvoiceTrans.ManualCalcPacked;
        this.ConsumptionCalcPacked = _finCustInvoiceTrans.ConsumptionCalcPacked;
        this.CostPriceCalcPacked = _finCustInvoiceTrans.CostPriceCalcPacked;
        this.RentalCalcPacked = _finCustInvoiceTrans.RentalCalcPacked;
        this.CreditCalcPacked = _finCustInvoiceTrans.CreditCalcPacked;
        this.TransportCalcPacked = _finCustInvoiceTrans.TransportCalcPacked;
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFINCustInvoiceTransProformaInvoiceTrans</Name>
				<Source><![CDATA[
    public void initFromFINCustInvoiceTransProformaInvoiceTrans(FINCustInvoiceTransProFormaInvoiceTrans _finCustInvoiceTrans)
    {
        this.RAGContractLinePacked          = _finCustInvoiceTrans.RAGContractLinePacked;
        this.InvoiceCalcResultListPacked    = _finCustInvoiceTrans.InvoiceCalcResultListPacked;
        this.ProjHoursCalcPacked            = _finCustInvoiceTrans.ProjHoursCalcPacked;
        this.ManualCalcPacked               = _finCustInvoiceTrans.ManualCalcPacked;
        this.ConsumptionCalcPacked          = _finCustInvoiceTrans.ConsumptionCalcPacked;
        this.CostPriceCalcPacked            = _finCustInvoiceTrans.CostPriceCalcPacked;
        this.RentalCalcPacked               = _finCustInvoiceTrans.RentalCalcPacked;
        this.CreditCalcPacked               = _finCustInvoiceTrans.CreditCalcPacked;
        this.TransportCalcPacked            = _finCustInvoiceTrans.TransportCalcPacked;
        this.PeriodSpecificationPacked      = _finCustInvoiceTrans.PeriodSpecificationPacked;
        this.PriceComponentsAmendmentPacked = _finCustInvoiceTrans.PriceComponentsAmendmentPacked;

        this.ChargedPeriods                 = conPeek(FINPeriodSpecificationManager::populatePeriodsTotalFromMap(Map::create(this.PeriodSpecificationPacked)), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFINProjInvoiceItem</Name>
				<Source><![CDATA[
    public void initFromFINProjInvoiceItem(FINProjInvoiceItem _finProjInvoiceItem)
    {
        this.RAGContractLinePacked = _finProjInvoiceItem.RAGContractLinePacked;
        this.InvoiceCalcResultListPacked = _finProjInvoiceItem.InvoiceCalcResultListPacked;
        this.ProjHoursCalcPacked = _finProjInvoiceItem.ProjHoursCalcPacked;
        this.ManualCalcPacked = _finProjInvoiceItem.ManualCalcPacked;
        this.ConsumptionCalcPacked = _finProjInvoiceItem.ConsumptionCalcPacked;
        this.CostPriceCalcPacked = _finProjInvoiceItem.CostPriceCalcPacked;
        this.RentalCalcPacked = _finProjInvoiceItem.RentalCalcPacked;
        this.CreditCalcPacked = _finProjInvoiceItem.CreditCalcPacked;
        this.TransportCalcPacked = _finProjInvoiceItem.TransportCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFINProjJournalTrans</Name>
				<Source><![CDATA[
    public void initFromFINProjJournalTrans(FINProjJournalTrans _finProjJournalTrans)
    {
        this.RAGContractLinePacked          = _finProjJournalTrans.RAGContractLinePacked;
        this.InvoiceCalcResultListPacked    = _finProjJournalTrans.InvoiceCalcResultListPacked;
        this.ProjHoursCalcPacked            = _finProjJournalTrans.ProjHoursCalcPacked;
        this.ManualCalcPacked               = _finProjJournalTrans.ManualCalcPacked;
        this.ConsumptionCalcPacked          = _finProjJournalTrans.ConsumptionCalcPacked;
        this.CostPriceCalcPacked            = _finProjJournalTrans.CostPriceCalcPacked;
        this.RentalCalcPacked               = _finProjJournalTrans.RentalCalcPacked;
        this.CreditCalcPacked               = _finProjJournalTrans.CreditCalcPacked;
        this.TransportCalcPacked            = _finProjJournalTrans.TransportCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFINVendInvoiceTrans</Name>
				<Source><![CDATA[
    public void initFromFINVendInvoiceTrans(FINVendInvoiceTrans _finVendInvoiceTrans)
    {
        this.RAGContractLinePacked = _finVendInvoiceTrans.RAGContractLinePacked;
        this.InvoiceCalcResultListPacked = _finVendInvoiceTrans.InvoiceCalcResultListPacked;
        this.ProjHoursCalcPacked = _finVendInvoiceTrans.ProjHoursCalcPacked;
        this.ManualCalcPacked = _finVendInvoiceTrans.ManualCalcPacked;
        this.ConsumptionCalcPacked = _finVendInvoiceTrans.ConsumptionCalcPacked;
        this.CostPriceCalcPacked = _finVendInvoiceTrans.CostPriceCalcPacked;
        this.RentalCalcPacked = _finVendInvoiceTrans.RentalCalcPacked;
        this.CreditCalcPacked = _finVendInvoiceTrans.CreditCalcPacked;
        this.TransportCalcPacked = _finVendInvoiceTrans.TransportCalcPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProformaCorrectionToManualCalc</Name>
				<Source><![CDATA[
    public void addProformaCorrectionToManualCalc(RefTableId _refTableId, RefRecId _refRecId)
    {
        FINManualPriceComponentProforma manualPriceComponentProforma;
        List resultList = List::create(this.InvoiceCalcResultListPacked);       
        FINManualComponentJournalizer journalizedData = new FINManualComponentJournalizer();
        boolean hasAnyCorrection;

        journalizedData.unpack(this.ManualCalcPacked);

        while select manualPriceComponentProforma
        where manualPriceComponentProforma.TransTableId == _refTableId
        &&    manualPriceComponentProforma.TransRecId == _refRecId
        {
            hasAnyCorrection = true;
            FINInvoiceCalcResult result = FINInvoiceCalcResult::construct(FINRentalAccountType::Manual, manualPriceComponentProforma.AmountCur);
            resultList.addEnd(result);
            journalizedData.addResult(manualPriceComponentProforma);            
        }
        
        if (hasAnyCorrection)
        {
            this.InvoiceCalcResultListPacked = resultList.pack();
            this.ManualCalcPacked = journalizedData.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAmountsForCredit</Name>
				<Source><![CDATA[
    public void resetAmountsForCredit()
    {
        FINRentalJournalizer rentalJournalizer = new FINRentalJournalizer();
        rentalJournalizer.unpack(this.RentalCalcPacked);
        rentalJournalizer.resetAmountsForCredit();
        this.RentalCalcPacked = rentalJournalizer.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParmLineRef</Name>
				<Source><![CDATA[
    [SysObsolete('DNRDeletedObjects01_2021. This method is obsolete',false)]
    public static FINInvoiceCalculatorParm findParmLineRef(RefTableId _parmLineTableId, RefRecId _parmLineRecId, boolean _forUpdate = false)
    {
        FINInvoiceCalculatorParm invoiceCalculatorParm;

        if (_parmLineTableId && _parmLineRecId)
        {
            if (_forUpdate)
            {
                invoiceCalculatorParm.selectForUpdate(true);
            }

            select firstonly invoiceCalculatorParm
            where invoiceCalculatorParm.ParmLineTableId == _parmLineTableId
            &&    invoiceCalculatorParm.ParmLineRecId == _parmLineRecId;
        }

        return invoiceCalculatorParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static FINInvoiceCalculatorParm find(ParmId _parmId, RefTableId _parmLineTableId, RefRecId _parmLineRecId, boolean _forUpdate = false)
    {
        FINInvoiceCalculatorParm invoiceCalculatorParm;

        if (_parmId && _parmLineTableId && _parmLineRecId)
        {
            if (_forUpdate)
            {
                invoiceCalculatorParm.selectForUpdate(true);
            }

            select firstonly invoiceCalculatorParm
            where invoiceCalculatorParm.ParmId == _parmId
            &&    invoiceCalculatorParm.ParmLineTableId == _parmLineTableId
            &&    invoiceCalculatorParm.ParmLineRecId == _parmLineRecId;
        }

        return invoiceCalculatorParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR:FINInvoiceCalculatorParmDevDoc</DeveloperDocumentation>
	<Label>@DNR:InvoiceCalculatorParameters</Label>
	<TableGroup>Transaction</TableGroup>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<PrimaryIndex>ReferenceIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS80404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmLineTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RAGContractLinePacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCalcResultListPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmLinePacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLinePacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WasAnyEngineExecuted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RAGContractTiersPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodSpecificationPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjHoursCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmUpdatePacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceComponentsAmendmentPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEstimation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MustBeInvoiced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Timezone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChargedPeriods</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPeriodSpecificationCalculated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditJourRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProforma</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProformaJourRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostInvoiceProposal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HeaderForceUntilCalculationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HeaderForceFromCalculationDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ParmLineTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RAGContractLinePacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParmLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>InvoiceCalcResultListPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ParmLinePacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>OrderLinePacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WasAnyEngineExecuted</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OrderLineTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrderLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RAGContractTiersPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PeriodSpecificationPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ManualCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ConsumptionCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ProjHoursCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CostPriceCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RentalCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ParmUpdatePacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CreditCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PriceComponentsAmendmentPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEstimation</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MustBeInvoiced</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Timezone</Name>
			<Label>@SYS102501</Label>
			<EnumType>Timezone</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>TransportCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ChargedPeriods</Name>
			<ExtendedDataType>INVChargedPeriods</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPeriodSpecificationCalculated</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditJourRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProforma</Name>
			<ExtendedDataType>FINCreateProforma</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProformaJourRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostInvoiceProposal</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>HeaderForceUntilCalculationDateTime</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FINForceUntilCalculationDateTime</ExtendedDataType>
			<SaveContents>No</SaveContents>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>HeaderForceFromCalculationDateTime</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FINForceFromCalculationDateTime</ExtendedDataType>
			<SaveContents>No</SaveContents>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReferenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmLineTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderLineRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderLineTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrderLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesParmLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesParmLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SalesParmLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmLineRecId</Name>
					<Field>ParmLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmLineTableId</Name>
					<Field>ParmLineTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmLineRecId</Name>
					<Field>ParmLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmLineTableId</Name>
					<Field>ParmLineTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderLineRecId</Name>
					<Field>OrderLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderLineTableId</Name>
					<Field>OrderLineTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderLineRecId</Name>
					<Field>OrderLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderLineTableId</Name>
					<Field>OrderLineTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmUpdate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmUpdate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjProposalItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjProposalItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderLineTableId</Name>
					<Field>OrderLineTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderLineRecId</Name>
					<Field>OrderLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>