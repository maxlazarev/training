<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINCreditLineDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FINCreditLineDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>creditLine</Name>
				<Source><![CDATA[
    public FINCreditLine creditLine(boolean _forUpdate = false)
    {
        return FINCreditLine::findRecId(this.CreditLineRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateTimeOffset</Name>
				<Source><![CDATA[
    private int dateTimeOffset(TransDateTime _transDateTime)
    {
        #TimeConstants
        int offset;
        int int1, int2;
        int timeZoneDifference = (DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()))
                        - DateTimeUtil::time(DateTimeUtil::getSystemDateTime()));
        
        int1 = DateTimeUtil::time(_transDateTime);
        int2 = timeZoneDifference;
    
        if (int1+int2 >= #secondsPerDay)
        {
            offset++;
        }
    
        return offset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirPartyRecId</Name>
				<Source><![CDATA[
    public DirPartyRecId findDirPartyRecId()
    {
        DirPartyRecId       party;
        CustInvoiceJour     custInvoiceJour;
        FINCreditLine       creditParmLine = this.creditLine();
                
        switch (creditParmLine.JourRefTableId)
        {
            case tableNum(CustInvoiceJour):
                custInvoiceJour = CustInvoiceJour::findRecId(creditParmLine.JourRefRecId);
                party = custInvoiceJour.salesTable().partyTable_CustAccount().RecId;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {            
        #timeConstants
        FINCreditLine creditLine;

        super(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(FINCreditLineDetails, FromDateTime) :
                if (this.DateRangeType == FINCreditDateRangeType::SingleDay)
                {
                    creditLine = this.creditLine();
                    this.setMinFromDateTime(creditLine, DateTimeUtil::newDateTime(DateTimeUtil::date(this.FromDateTime) + this.dateTimeOffset(this.FromDateTime), 0, DateTimeUtil::getUserPreferredTimeZone()));
                    this.setMaxToDateTime(creditLine, DateTimeUtil::newDateTime(DateTimeUtil::date(this.FromDateTime) + 1 + this.dateTimeOffset(this.FromDateTime), 0, DateTimeUtil::getUserPreferredTimeZone()));
                }
                break;
    
            case fieldNum(FINCreditLineDetails, FromDate) :
                creditLine = this.creditLine();
                this.FromDateTime = DateTimeUtil::newDateTime(this.FromDate, 0, DateTimeUtil::getUserPreferredTimeZone());
                this.setMinFromDateTime(creditLine, this.FromDateTime, true);
                this.ToDateTime = DateTimeUtil::newDateTime(this.FromDate + 1, 0, DateTimeUtil::getUserPreferredTimeZone());
                this.setMaxToDateTime(creditLine, this.ToDateTime, true);
                break;
    
            case fieldNum(FINCreditLineDetails, DateRangeType) :
                this.FromDateTime = DateTimeUtil::minValue();
                this.ToDateTime = DateTimeUtil::minValue();
    
                if (this.DateRangeType == FINCreditDateRangeType::EntirePeriod) 
                {
                    creditLine = this.creditLine();
                        
                    this.setMaxFromToDates(creditLine);
                }
                
                break;

            case fieldNum(FINCreditLineDetails, CreditType) :
                if (this.CreditType == FINCreditType::Amount && this.RentalModeId)
                {
                    this.RentalModeId = '';
                }
                else if (this.CreditType == FINCreditType::Days && this.AmountCurCredit)
                {
                    this.AmountCurCredit = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaxFromToDates</Name>
				<Source><![CDATA[
    public void setMaxFromToDates(FINCreditLine _creditParmLine)
    {
        
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
        
        select minOf(PeriodStartDateTime) from journalizedInvoicePeriod
        where journalizedInvoicePeriod.RefTableId == _creditParmLine.RefTableId
        &&    journalizedInvoicePeriod.RefRecId == _creditParmLine.RefRecId;
                        
        this.FromDateTime = journalizedInvoicePeriod.PeriodStartDateTime;

        select maxOf(PeriodEndDateTime) from journalizedInvoicePeriod
        where journalizedInvoicePeriod.RefTableId == _creditParmLine.RefTableId
        &&    journalizedInvoicePeriod.RefRecId == _creditParmLine.RefRecId;
        
        this.ToDateTime = journalizedInvoicePeriod.PeriodEndDateTime;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaxToDateTime</Name>
				<Source><![CDATA[
    private void setMaxToDateTime(FINCreditLine _creditParmLine, TransDateTime _toDateTime, boolean _restrictDate = false)
    {
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;

        select maxOf(PeriodEndDateTime) from journalizedInvoicePeriod
        where (!_restrictDate || journalizedInvoicePeriod.PeriodStartDateTime <= _toDateTime)
        &&    journalizedInvoicePeriod.RefTableId == _creditParmLine.RefTableId
        &&    journalizedInvoicePeriod.RefRecId == _creditParmLine.RefRecId;
                            
        if (DateTimeUtil::date(journalizedInvoicePeriod.PeriodEndDateTime) <= DateTimeUtil::date(_toDateTime))
        {
            this.ToDateTime = min(journalizedInvoicePeriod.PeriodEndDateTime, _toDateTime);
        }
        else
        {
            this.ToDateTime = _toDateTime;
        }            
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMinFromDateTime</Name>
				<Source><![CDATA[
    private void setMinFromDateTime(FINCreditLine _creditParmLine, TransDateTime _fromDateTime, boolean _restrictDate = false)
    {
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;

        select minOf(PeriodStartDateTime) from journalizedInvoicePeriod
        where (!_restrictDate || journalizedInvoicePeriod.PeriodEndDateTime >= _fromDateTime)
        &&    journalizedInvoicePeriod.RefTableId == _creditParmLine.RefTableId
        &&    journalizedInvoicePeriod.RefRecId == _creditParmLine.RefRecId;
            
        if (DateTimeUtil::date(journalizedInvoicePeriod.PeriodStartDateTime) >= DateTimeUtil::date(_fromDateTime))
        {
            this.FromDateTime = max(journalizedInvoicePeriod.PeriodStartDateTime, _fromDateTime);
        }
        else
        {
            this.FromDateTime = _fromDateTime;
        }                
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxToDateTime</Name>
				<Source><![CDATA[
    [SysObsolete("This method is no longer used", false)]
    private TransDateTime getMaxToDateTime(FINCreditLine _creditParmLine, TransDateTime _toDateTime)
    {
        TransDateTime       toDateTime;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
                            
        select maxOf(PeriodEndDateTime) from journalizedInvoicePeriod
        where journalizedInvoicePeriod.PeriodStartDateTime <= _toDateTime
        &&    journalizedInvoicePeriod.RefTableId == _creditParmLine.RefTableId
        &&    journalizedInvoicePeriod.RefRecId == _creditParmLine.RefRecId;
            
        if (DateTimeUtil::date(journalizedInvoicePeriod.PeriodEndDateTime) <= DateTimeUtil::date(_toDateTime))
        {
            toDateTime = min(journalizedInvoicePeriod.PeriodEndDateTime, _toDateTime);
        }
        else
        {
            toDateTime = _toDateTime;
        }
                    
        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinFromDateTime</Name>
				<Source><![CDATA[
    [SysObsolete("This method is no longer used", false)]
    private TransDateTime getMinFromDateTime(FINCreditLine _creditParmLine, TransDateTime _fromDateTime)
    {
        TransDateTime       fromDateTime;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
                            
        select minOf(PeriodStartDateTime) from journalizedInvoicePeriod
        where journalizedInvoicePeriod.PeriodEndDateTime >= _fromDateTime
        &&    journalizedInvoicePeriod.RefTableId == _creditParmLine.RefTableId
        &&    journalizedInvoicePeriod.RefRecId == _creditParmLine.RefRecId;

        if (DateTimeUtil::date(journalizedInvoicePeriod.PeriodStartDateTime) >= DateTimeUtil::date(_fromDateTime))
        {
            fromDateTime = max(journalizedInvoicePeriod.PeriodStartDateTime, _fromDateTime);
        }
        else
        {
            fromDateTime = _fromDateTime;
        }
                    
        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        FINCreditLine creditLine;

        boolean ret = super(_fieldIdToCheck);
    
        switch (_fieldIdToCheck)
        {
            case fieldNum(FINCreditLineDetails, CreditType) :
            case fieldNum(FINCreditLineDetails, DateRangeType) :
                if ((this.CreditType == FINCreditType::Amount || this.CreditType == FINCreditType::Insurance || this.CreditType == FINCreditType::RentalMode)
                &&  (this.DateRangeType == FINCreditDateRangeType::DateRange || this.DateRangeType == FINCreditDateRangeType::SingleDay))
                {
                    ret = checkFailed(strFmt("@DNR6960", this.CreditType, FINCreditDateRangeType::EntirePeriod));
                }

                creditLine = this.creditLine();

                if (creditLine.RefTableId == tableNum(CustInvoiceTrans) && creditLine.RefRecId)
                {
                    SalesLine           salesLine;
                    CustInvoiceTrans    custInvoiceTrans;

                    select firstonly RORInsuranceCalcBasis, RORInsuranceGrossAmount, RORInsuranceNetAmount,
                    RORDeliveryGrossAmount, RORReturnGrossAmount from salesLine
                        exists join custInvoiceTrans
                        where custInvoiceTrans.RecId == creditLine.RefRecId
                        &&    custInvoiceTrans.InventTransId == salesLine.InventTransId;

                    if ((   this.CreditType == FINCreditType::Insurance
                        &&  (   (salesLine.RORInsuranceCalcBasis ==  RORInsuranceCalcBasis::Gross  && !salesLine.RORInsuranceGrossAmount)
                            ||  (salesLine.RORInsuranceCalcBasis ==  RORInsuranceCalcBasis::Net    && !salesLine.RORInsuranceNetAmount)))
                    ||  (   this.CreditType == FINCreditType::Delivery
                        &&  (!salesLine.RORDeliveryGrossAmount || !FINOrderLineComponentInvoiceLog::isDeliveryReturnCharged(salesLine, FINOrderLineComponent::DeliveryTransport)))
                    ||  (   this.CreditType == FINCreditType::Return
                        &&  (!salesLine.RORReturnGrossAmount || !FINOrderLineComponentInvoiceLog::isDeliveryReturnCharged(salesLine, FINOrderLineComponent::ReturnTransport))))
                    {
                        ret = checkFailed(strFmt("@DNR:UnableToCreditUninvoiced", this.CreditType));
                    }
                }
                break;
    
            case fieldNum(FINCreditLineDetails, FromDateTime) :
                ret = this.validateFromToDateTime(true, DateTimeUtil::minValue());
                break;
    
            case fieldNum(FINCreditLineDetails, ToDateTime) :
                ret = this.validateFromToDateTime(false, DateTimeUtil::minValue());
                break;
    
            case fieldNum(FINCreditLineDetails, FromDate) :
                creditLine = this.creditLine();
                ret = this.validateFromToDateTime(true, DateTimeUtil::newDateTime(this.FromDate, 0, DateTimeUtil::getUserPreferredTimeZone()));
                if (ret)
                {
                    ret = this.validateFromToDateTime(false, DateTimeUtil::newDateTime(this.FromDate + 1, 0, DateTimeUtil::getUserPreferredTimeZone()));
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromToDateTime</Name>
				<Source><![CDATA[
    private boolean validateFromToDateTime(boolean _checkFromDate = true, TransDateTime _fromToDateTime = DateTimeUtil::minValue())
    {
        #DNRConstants
        boolean                 ret = true;
        FINCreditLineDetails    creditParmLineDetails;
        TransDateTime           fromToDateTime = _fromToDateTime ? _fromToDateTime : _checkFromDate ? this.FromDateTime : this.ToDateTime;
        boolean                 noToDate = DateTimeUtil::year(this.ToDateTime) < #DNRNullYear;
        Timezone                userPreferredTimeZone = DateTimeUtil::getUserPreferredTimeZone();

        if (fromToDateTime)
        {
            select firstOnly FromDateTime, ToDateTime, RecId from creditParmLineDetails
            where creditParmLineDetails.RecId != this.RecId
            &&    creditParmLineDetails.OrderId == this.OrderId
            &&    creditParmLineDetails.CreditLineRefRecId == this.CreditLineRefRecId
            && ((!noToDate && creditParmLineDetails.FromDateTime < this.ToDateTime && creditParmLineDetails.ToDateTime > fromToDateTime) ||
                ( noToDate && 
                   (    ( _checkFromDate && creditParmLineDetails.FromDateTime <= fromToDateTime && creditParmLineDetails.ToDateTime >  fromToDateTime)
                   ||   (!_checkFromDate && creditParmLineDetails.FromDateTime <  fromToDateTime && creditParmLineDetails.ToDateTime >= fromToDateTime))));
                    
            if (creditParmLineDetails)
            {
                ret = checkFailed(strFmt("@DNR6973",
                                         DateTimeUtil::applyTimeZoneOffset(fromToDateTime, userPreferredTimeZone),
                                         DateTimeUtil::applyTimeZoneOffset(creditParmLineDetails.FromDateTime, userPreferredTimeZone),
                                         DateTimeUtil::applyTimeZoneOffset(creditParmLineDetails.ToDateTime, userPreferredTimeZone)));
            }
        }
    
        if (ret && fromToDateTime)
        {
            FINJournalizedInvoicePeriod journalizedInvoicePeriod;
            FINCreditLine creditLine;
                            
            select firstOnly RecId from journalizedInvoicePeriod
            where journalizedInvoicePeriod.PeriodStartDateTime <= fromToDateTime
            &&    journalizedInvoicePeriod.PeriodEndDateTime >= fromToDateTime
                exists join creditLine
                where creditLine.RecId == this.CreditLineRefRecId
                &&    creditLine.RefTableId == journalizedInvoicePeriod.RefTableId
                &&    creditLine.RefRecId == journalizedInvoicePeriod.RefRecId;
                            
            if (!journalizedInvoicePeriod)
            {
                ret = checkFailed(strFmt("@DNR8211", DateTimeUtil::applyTimeZoneOffset(fromToDateTime, userPreferredTimeZone)));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static FINCreditLineDetails findRecId(RecId _recId, boolean _update = false)
    {
        FINCreditLineDetails creditParmLineDetails;
    
        if (_recId)
        {
            if (_update)
            {
                creditParmLineDetails.selectForUpdate(_update);
            }
    
            select firstOnly creditParmLineDetails
            where creditParmLineDetails.RecId == _recId;
        }
    
        return creditParmLineDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsForReInvoice</Name>
				<Source><![CDATA[
    [SysObsolete('Method was duplicating logic of code from a form', false)]
    public void enableFieldsForReInvoice(FormDataSource _formDataSource, boolean _reInvoice)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.creditLine();

        ret = ret && this.checkCreditTypeAmount();

        if (ret 
        &&  this.CreditType == FINCreditType::Days
        &&  (this.DateRangeType == FINCreditDateRangeType::EntirePeriod || this.DateRangeType == FINCreditDateRangeType::DateRange))
        {
            ret = this.validateFromToDateTime(true, this.FromDateTime);

            if (ret)
            {
                ret = this.validateFromToDateTime(false, this.ToDateTime);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditTypeAmount</Name>
				<Source><![CDATA[
    private boolean checkCreditTypeAmount()
    {
        boolean ret = true;

        if (!this.checkManualEngine())
        {
            ret = checkFailed(strFmt("@DNR:CreditAmountManualEngineCheck", this.CreditType, FINRentalAccountType::Manual));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkManualEngine</Name>
				<Source><![CDATA[
    private boolean checkManualEngine()
    {
        boolean ret = true;

        if (this.CreditType == FINCreditType::Amount)
        {
            FINCreditLine creditLine = this.creditLine();

            if ((creditLine.TradeType == RORTradeType::Rental ||
                 creditLine.TradeType == RORTradeType::SubRental)
            && (!FINInvoiceCalculatorEngineSetup::isEngineActive(FINRentalAccountType::Manual) ||
                !UnitOfMeasure::find(creditLine.PriceTimeUnit).FINInvoiceManualEngine))
            {
                ret = false;           
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR:FINCreditLineDetailsDevDoc</DeveloperDocumentation>
	<Label>@DNR:CreditLineDetails</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>CreditType</TitleField1>
	<TitleField2>OrderId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreditType</Name>
			<Label>@SYS23988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurCredit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalNotes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateRanges</Name>
			<Label>@SYS41297</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateRangeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRReasonCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditType</Name>
			<EnumType>FINCreditType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DateRangeType</Name>
			<EnumType>FINCreditDateRangeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DNRReasonCode</Name>
			<ExtendedDataType>DNRReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalNotes</Name>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<Label>@SYS30502</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonText</Name>
			<ExtendedDataType>RORAmendmentReasonText</ExtendedDataType>
			<Label>@SYS30501</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditLineRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalModeId</Name>
			<ExtendedDataType>INVRentalModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<ExtendedDataType>ToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>String255</ExtendedDataType>
			<Label>Credit description</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurCredit</Name>
			<ExtendedDataType>AmountCurCredit</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefTableIdRecIdDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditLineRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DNRReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DNRReasonTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>DNRReasonType::Credit</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DNRReasonCode</Name>
					<Field>DNRReasonCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FINCreditLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>FINCreditLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditLineRefRecId</Name>
					<Field>CreditLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>INVRentalMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>INVRentalMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RentalModeId</Name>
					<Field>RentalModeId</Field>
					<RelatedField>RentalModeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RentalModeIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>