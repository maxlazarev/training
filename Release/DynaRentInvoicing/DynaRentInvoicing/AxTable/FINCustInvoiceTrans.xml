<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINCustInvoiceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FINCustInvoiceTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPendingCreditSet</Name>
				<Source><![CDATA[
    public static Set getPendingCreditSet(RORRentalLine _rentalLine, INVCalculationDateTime _calculationDateTime, boolean _isCreditPreview)
    {
        Set pendingCreditSet = new Set(Types::Container);
        CustInvoiceTrans custInvoiceTrans;
        FINCustInvoiceTrans finCustInvoiceTrans;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod; 
        
        while select InvoiceCalcResultListPacked from finCustInvoiceTrans
        where finCustInvoiceTrans.PeriodStatus == FINInvoiceTransPeriodStatus::PendingCredit
            join RecId, TableId from custInvoiceTrans
            where custInvoiceTrans.RecId == finCustInvoiceTrans.CustInvoiceTransRecId
            &&    custInvoiceTrans.InventTransId == _rentalLine.InventTransId             
                exists join journalizedInvoicePeriod
                where journalizedInvoicePeriod.RefTableId == custInvoiceTrans.TableId
                &&    journalizedInvoicePeriod.RefRecId == custInvoiceTrans.RecId
                &&    journalizedInvoicePeriod.PeriodStartDateTime <= _calculationDateTime                    
        {
            if (_isCreditPreview || FINCreditLine::isCreditApproved(custInvoiceTrans.TableId, custInvoiceTrans.RecId))
            {
                pendingCreditSet.add([custInvoiceTrans.TableId, custInvoiceTrans.RecId, finCustInvoiceTrans.InvoiceCalcResultListPacked]);
            }
        }

        return pendingCreditSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPendingCreditSetForCredit</Name>
				<Source><![CDATA[
    public static Set getPendingCreditSetForCredit(RORRentalLine _rentalLine, INVCalculationDateTime _calculationDateTime, boolean _isCreditPreview, RecId _creditJourRefRecId)
    {
        Set pendingCreditSet = new Set(Types::Container);
        CustInvoiceTrans custInvoiceTrans;
        FINCustInvoiceTrans finCustInvoiceTrans;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
        CustInvoiceJour custInvoiceJour;

        while select InvoiceCalcResultListPacked from finCustInvoiceTrans
        where finCustInvoiceTrans.PeriodStatus == FINInvoiceTransPeriodStatus::PendingCredit
            join RecId, TableId from custInvoiceTrans
            where custInvoiceTrans.RecId == finCustInvoiceTrans.CustInvoiceTransRecId
            &&    custInvoiceTrans.InventTransId == _rentalLine.InventTransId
                exists join journalizedInvoicePeriod
                where journalizedInvoicePeriod.RefTableId == custInvoiceTrans.TableId
                &&    journalizedInvoicePeriod.RefRecId == custInvoiceTrans.RecId
                &&    journalizedInvoicePeriod.PeriodStartDateTime <= _calculationDateTime
                    join RecId from custInvoiceJour
                    where custInvoiceJour.RecId == _creditJourRefRecId
                    &&    custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                    &&    custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                    &&    custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.numberSequenceGroup
                    &&    custInvoiceJour.SalesId == custInvoiceTrans.SalesId
        {
            if (_isCreditPreview || FINCreditLine::isCreditApproved(custInvoiceTrans.TableId, custInvoiceTrans.RecId))
            {
                pendingCreditSet.add([custInvoiceTrans.TableId, custInvoiceTrans.RecId, finCustInvoiceTrans.InvoiceCalcResultListPacked]);
            }
        }

        return pendingCreditSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicePeriodQtyForCredit</Name>
				<Source><![CDATA[
    public static container getInvoicePeriodQtyForCredit(InventTransId _inventTransId, RecId _invPeriodQtyPhysicalRecId, TransDateTime _fromDateTime, TransDateTime _toDateTime, RecId _creditJourRefRecId)
    {
        FINInvoicePeriodQtyFinancial uninvoicedPeriodFinancial;
        FINInvoicePeriodQtyPhysical uninvoicedPeriodPhysical;
        CustInvoiceTrans custInvoiceTrans;
        FINCustInvoiceTrans finCustInvoiceTrans;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
        CustInvoiceJour custInvoiceJour;

        // Rental order not linked to a project
        select firstonly uninvoicedPeriodFinancial
        where uninvoicedPeriodFinancial.InvPeriodQtyPhysicalRecId == _invPeriodQtyPhysicalRecId
        &&    !uninvoicedPeriodFinancial.InvoiceId
        &&    uninvoicedPeriodFinancial.PeriodStartDateTime < _toDateTime
        &&    uninvoicedPeriodFinancial.PeriodEndDateTime > _fromDateTime
            join uninvoicedPeriodPhysical
            where uninvoicedPeriodPhysical.RecId == uninvoicedPeriodFinancial.InvPeriodQtyPhysicalRecId
                join finCustInvoiceTrans
                where finCustInvoiceTrans.PeriodStatus == FINInvoiceTransPeriodStatus::PendingCredit
                    join TableId from custInvoiceTrans
                    where custInvoiceTrans.RecId == finCustInvoiceTrans.CustInvoiceTransRecId
                    &&    custInvoiceTrans.InventTransId == _inventTransId
                        exists join journalizedInvoicePeriod
                        where journalizedInvoicePeriod.RefTableId == custInvoiceTrans.TableId
                        &&    journalizedInvoicePeriod.RefRecId == custInvoiceTrans.RecId
                        &&    journalizedInvoicePeriod.PeriodStartDateTime < uninvoicedPeriodFinancial.PeriodEndDateTime
                        &&    journalizedInvoicePeriod.PeriodEndDateTime > uninvoicedPeriodFinancial.PeriodStartDateTime
                            join TableId from custInvoiceJour
                            where custInvoiceJour.RecId == _creditJourRefRecId
                            &&    custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                            &&    custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                            &&    custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.numberSequenceGroup
                            &&    custInvoiceJour.SalesId == custInvoiceTrans.SalesId;
        
        return [uninvoicedPeriodFinancial, uninvoicedPeriodPhysical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>changePeriodStatus</Name>
				<Source><![CDATA[
    public static server void changePeriodStatus(FINInvoiceTransPeriodStatus _newPeriodStatus, RefRecId _refRecId)
    {
        FINCustInvoiceTrans finCustInvoiceTrans;

        update_recordset finCustInvoiceTrans
        setting PeriodStatus = _newPeriodStatus
        where finCustInvoiceTrans.CustInvoiceTransRecId == _refRecId;

        FINInvoicePeriodQtyFinancial::markUnMarkForCredit(_newPeriodStatus, tableNum(CustInvoiceTrans), _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changePeriodStatusWithoutSourceRecordUpdate</Name>
				<Source><![CDATA[
    public static server void changePeriodStatusWithoutSourceRecordUpdate(FINInvoiceTransPeriodStatus _newPeriodStatus, RefRecId _refRecId)
    {
        FINCustInvoiceTrans finCustInvoiceTrans;

        update_recordset finCustInvoiceTrans
        setting PeriodStatus = _newPeriodStatus
        where finCustInvoiceTrans.CustInvoiceTransRecId == _refRecId;

        FINInvoicePeriodQtyFinancial::markUnMarkForCreditWithoutSourceRecordUpdate(_newPeriodStatus, tableNum(CustInvoiceTrans), _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculatePeriodDate</Name>
				<Source><![CDATA[
    public static boolean mustCalculatePeriodDate(SalesLine _salesLine, TransDateTime _startDateTime, TransDateTime _endDateTime, RecId _invoicePeriodQtyRecId)
    {
        boolean ret;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
        CustInvoiceTrans custInvoiceTrans;
        FINCustInvoiceTrans finCustInvoiceTrans;
                        
        select firstonly RecId from finCustInvoiceTrans
        where finCustInvoiceTrans.PeriodStatus == FINInvoiceTransPeriodStatus::PendingCredit
            exists join custInvoiceTrans
            where custInvoiceTrans.RecId == finCustInvoiceTrans.CustInvoiceTransRecId
            &&    custInvoiceTrans.InventTransId == _salesLine.InventTransId
                join RecId from journalizedInvoicePeriod
                where journalizedInvoicePeriod.RefTableId == custInvoiceTrans.TableId
                &&    journalizedInvoicePeriod.RefRecId == custInvoiceTrans.RecId
                &&    journalizedInvoicePeriod.PeriodStartDateTime < _endDateTime
                &&    journalizedInvoicePeriod.PeriodEndDateTime > _startDateTime
                &&    journalizedInvoicePeriod.InvPeriodQtyPhysicalRecId == _invoicePeriodQtyRecId;

        if (!finCustInvoiceTrans)
        {
            ret = true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculatePeriodDateAllDeliveries</Name>
				<Source><![CDATA[
    public static boolean mustCalculatePeriodDateAllDeliveries(SalesLine _salesLine, TransDateTime _startDateTime, TransDateTime _endDateTime)
    {
        boolean ret;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
        CustInvoiceTrans custInvoiceTrans;
        FINCustInvoiceTrans finCustInvoiceTrans;
                        
        select firstonly RecId from finCustInvoiceTrans
        where finCustInvoiceTrans.PeriodStatus == FINInvoiceTransPeriodStatus::PendingCredit
            exists join custInvoiceTrans
            where custInvoiceTrans.RecId == finCustInvoiceTrans.CustInvoiceTransRecId
            &&    custInvoiceTrans.InventTransId == _salesLine.InventTransId
                join TableId from journalizedInvoicePeriod
                where journalizedInvoicePeriod.RefTableId == custInvoiceTrans.TableId
                &&    journalizedInvoicePeriod.RefRecId == custInvoiceTrans.RecId
                &&    journalizedInvoicePeriod.PeriodStartDateTime < _endDateTime
                &&    journalizedInvoicePeriod.PeriodEndDateTime > _startDateTime;

        if (!finCustInvoiceTrans)
        {
            ret = true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsCreditManualComponentPosted</Name>
				<Source><![CDATA[
    public static boolean checkIsCreditManualComponentPosted(SalesLine _salesLine, FINManualPriceComponent _manualPriceComponent)
    {
        boolean ret = false;

        if (_manualPriceComponent.IsCredit)
        {
            // unlike standard ax markup trans manual component has most of the time set flag Keep to Yes so user and system can see what was credited.
            // Because of that we need to validate if a specific manual component was already posted or not.
            FINCustInvoiceTrans finCustInvoiceTrans;
            FINCreditLine creditLine;
            FINCreditPendingChangesReference creditPendingChangesRef;
            TableId invoiceTransTableId = tableNum(CustInvoiceTrans);

            select firstonly RecId from finCustInvoiceTrans
            where finCustInvoiceTrans.PeriodStatus == FINInvoiceTransPeriodStatus::PendingCredit
                exists join creditLine
                where creditLine.RefTableId == invoiceTransTableId
                &&    creditLine.RefRecId == finCustInvoiceTrans.CustInvoiceTransRecId
                    join TableId from creditPendingChangesRef
                    where creditPendingChangesRef.CreditParmLineRecId == creditLine.RecId
                    &&    creditPendingChangesRef.RefTableId == _manualPriceComponent.TableId
                    &&    creditPendingChangesRef.RefRecId == _manualPriceComponent.RecId;
                        
            // If status is PendingCredit then you are allowed to invoice credit, 
            // otherwise check if invoice period has stamped InvoiceId (in case credit was posted but debit part not yet) 
            if (!finCustInvoiceTrans)
            {
                FINJournalizedInvoicePeriod journalizedInvoicePeriod;
                CustInvoiceTrans custInvoiceTrans;
                FINInvoicePeriodQtyFinancial invoicePeriodQtyFinancial;

                select firstonly InvoiceId from invoicePeriodQtyFinancial 
                    exists join journalizedInvoicePeriod
                    where journalizedInvoicePeriod.SourceRefRecId == invoicePeriodQtyFinancial.RecId
                    &&    journalizedInvoicePeriod.InvPeriodQtyPhysicalRecId == invoicePeriodQtyFinancial.InvPeriodQtyPhysicalRecId
                    &&    journalizedInvoicePeriod.PeriodStartDateTime < _manualPriceComponent.ToDateTime
                    &&    journalizedInvoicePeriod.PeriodEndDateTime > _manualPriceComponent.FromDateTime
                        join TableId from custInvoiceTrans
                        where custInvoiceTrans.TableId == journalizedInvoicePeriod.RefTableId
                        &&    custInvoiceTrans.RecId == journalizedInvoicePeriod.RefRecId
                        &&    custInvoiceTrans.InventTransId == _salesLine.InventTransId
                            join TableId from creditLine
                            where creditLine.RefTableId == custInvoiceTrans.TableId
                            &&    creditLine.RefRecId == custInvoiceTrans.RecId
                                join TableId from creditPendingChangesRef
                                where creditPendingChangesRef.CreditParmLineRecId == creditLine.RecId
                                &&    creditPendingChangesRef.RefTableId == _manualPriceComponent.TableId
                                &&    creditPendingChangesRef.RefRecId == _manualPriceComponent.RecId;

                if (invoicePeriodQtyFinancial.InvoiceId)
                {
                    ret = true;
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculatePeriodDateForCredit</Name>
				<Source><![CDATA[
    public static boolean mustCalculatePeriodDateForCredit(SalesLine _salesLine, TransDateTime _startDateTime, TransDateTime _endDateTime, RecId _invoicePeriodQtyRecId, RecId _creditJourRefRecId)
    {
        boolean ret;
        FINJournalizedInvoicePeriod journalizedInvoicePeriod;
        CustInvoiceTrans custInvoiceTrans;
        FINCustInvoiceTrans finCustInvoiceTrans;
        CustInvoiceJour custInvoiceJour;
          
        select firstonly RecId from finCustInvoiceTrans
        where finCustInvoiceTrans.PeriodStatus == FINInvoiceTransPeriodStatus::PendingCredit
            exists join custInvoiceTrans
            where custInvoiceTrans.RecId == finCustInvoiceTrans.CustInvoiceTransRecId
            &&    custInvoiceTrans.InventTransId == _salesLine.InventTransId
                join RecId from journalizedInvoicePeriod
                where journalizedInvoicePeriod.RefTableId == custInvoiceTrans.TableId
                &&    journalizedInvoicePeriod.RefRecId == custInvoiceTrans.RecId
                &&    journalizedInvoicePeriod.PeriodStartDateTime < _endDateTime
                &&    journalizedInvoicePeriod.PeriodEndDateTime > _startDateTime
                &&    journalizedInvoicePeriod.InvPeriodQtyPhysicalRecId == _invoicePeriodQtyRecId
                    join RecId from custInvoiceJour
                    where custInvoiceJour.RecId == _creditJourRefRecId
                    &&    custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                    &&    custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                    &&    custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.numberSequenceGroup
                    &&    custInvoiceJour.SalesId == custInvoiceTrans.SalesId;

        if (finCustInvoiceTrans)
        {
            ret = true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryReturnAmount</Name>
				<Source><![CDATA[
    public static container getDeliveryReturnAmount(RecId _refRecId)
    {
        FINCustInvoiceTrans finCustInvoiceTrans;

        select firstonly TransportCalcPacked from finCustInvoiceTrans
        where finCustInvoiceTrans.CustInvoiceTransRecId == _refRecId;
        
        AmountCur deliveryAmount, returnAmount;

        if (finCustInvoiceTrans.TransportCalcPacked)
        {
            FINTransportPriceJournalizer transportJournalizer = new FINTransportPriceJournalizer();
            transportJournalizer.unpack(finCustInvoiceTrans.TransportCalcPacked);
            
            deliveryAmount = transportJournalizer.getDeliveryAmount();
            returnAmount = transportJournalizer.getReturnAmount();
        }

        return [deliveryAmount, returnAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsuranceAmount</Name>
				<Source><![CDATA[
    public static AmountCur getInsuranceAmount(RecId _refRecId)
    {
        FINCustInvoiceTrans finCustInvoiceTrans;

        select firstonly RentalCalcPacked from finCustInvoiceTrans
        where finCustInvoiceTrans.CustInvoiceTransRecId == _refRecId;
        
        AmountCur insuranceAmount;

        if (finCustInvoiceTrans.RentalCalcPacked)
        {
            FINRentalJournalizer rentalJournalizer = new FINRentalJournalizer();
            rentalJournalizer.unpack(finCustInvoiceTrans.RentalCalcPacked);
            
            insuranceAmount = rentalJournalizer.getInsuranceAmount();
        }

        return insuranceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValuesPerMarkup</Name>
				<Source><![CDATA[
    public Map getChargedValuesPerMarkup(boolean _onlyCharged)
    {
        // { MarkupCode, Set : [ FINRentalAccountType, Amount, Description] }
        Map ret = new Map(Types::String, Types::Class);
        
        if (this.InvoiceCalcResultListPacked)
        {
            ret = FINInvoiceCalcResult::getChargedValuesPerMarkup(this.InvoiceCalcResultListPacked, _onlyCharged);            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargedValuesPerEngine</Name>
				<Source><![CDATA[
    public Set getChargedValuesPerEngine(boolean _useConsumptionCalc = true,
        boolean _useCostPriceCalc = true,
        boolean _useCreditCalc = true,
        boolean _useManualCalc = true,
        boolean _useProjHoursCalc = true,
        boolean _useRentalCalc = true,
        boolean _useTransportCalc = true)
    {
        Set ret = new Set(Types::Container);
        FINInvoiceCalculatorParm invoiceCalculatorParm;

        invoiceCalculatorParm.initFromFINCustInvoiceTrans(this);
        ret = invoiceCalculatorParm.getChargedValuesPerEngine(_useConsumptionCalc, _useCostPriceCalc, _useCreditCalc, _useManualCalc, _useProjHoursCalc, _useRentalCalc, _useTransportCalc);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static FINCustInvoiceTrans find(RefRecId _finCustInvoiceTransRecId, boolean _forUpdate = false)
    {
        FINCustInvoiceTrans finCustInvoiceTrans;

        if (!_finCustInvoiceTransRecId)
        {
            return finCustInvoiceTrans;
        }

        if (_forUpdate)
        {
            finCustInvoiceTrans.selectForUpdate(true);
        }

        select firstonly finCustInvoiceTrans
            where finCustInvoiceTrans.CustInvoiceTransRecId == _finCustInvoiceTransRecId;

        return finCustInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsurancePercentage</Name>
				<Source><![CDATA[
    public RORInsurancePercentage getInsurancePercentage()
    {
        return this.getInsurancePercentageFromAmount(this.InsuranceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsurancePercentageFromAmount</Name>
				<Source><![CDATA[
    public RORInsurancePercentage getInsurancePercentageFromAmount(AmountCur _newAmount)
    {
        FINCustInvoiceTransPeriod   custInvoiceTransPeriod;
        AmountCur                   baseAmount;

        while select sum(LineAmount), sum(DiscAmount), InsuranceCalcBasis from custInvoiceTransPeriod
        group by InsuranceCalcBasis
        where custInvoiceTransPeriod.CustInvoiceTransRecId == this.CustInvoiceTransRecId
        {
            baseAmount += custInvoiceTransPeriod.InsuranceCalcBasis == RORInsuranceCalcBasis::Gross ? custInvoiceTransPeriod.LineAmount - custInvoiceTransPeriod.DiscAmount : custInvoiceTransPeriod.LineAmount;
        }

        return baseAmount != 0 ? _newAmount/ baseAmount * 100 : 0; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsuranceCalcBasis</Name>
				<Source><![CDATA[
    public RORInsuranceCalcBasis getInsuranceCalcBasis()
    {
        FINCustInvoiceTransPeriod custInvoiceTransPeriod;

        select firstOnly InsuranceCalcBasis from custInvoiceTransPeriod
        order by PeriodStartDateTime desc
        where custInvoiceTransPeriod.CustInvoiceTransRecId == this.CustInvoiceTransRecId;

        return custInvoiceTransPeriod.InsuranceCalcBasis;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR:FINCustInvoiceTransDevDoc</DeveloperDocumentation>
	<Label>@SYS27200</Label>
	<TableGroup>Transaction</TableGroup>
	<CacheLookup>NotInTTS</CacheLookup>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RentalAmounts</Name>
			<Label>@DNR:RentalAmounts</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RentalAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChargedPeriods</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoicedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS80404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RAGContractLinePacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RAGContractTiersPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCalcResultListPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjHoursCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportCalcPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodSpecificationPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceComponentsAmendmentPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Timezone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoicedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChargedPeriods</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Insurance</Name>
			<Label>@DNR198</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTransRecId</Name>
			<ExtendedDataType>CustInvoiceTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RAGContractLinePacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RAGContractTiersPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>InvoiceCalcResultListPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RentalCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CostPriceCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ProjHoursCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ManualCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ConsumptionCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodStatus</Name>
			<EnumType>FINInvoiceTransPeriodStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CreditCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>TransportCalcPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PeriodSpecificationPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PriceComponentsAmendmentPacked</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Timezone</Name>
			<Label>@SYS102501</Label>
			<EnumType>Timezone</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoicedQty</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@DNR941</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RentalAmount</Name>
			<ExtendedDataType>LineAmount</ExtendedDataType>
			<Label>@DNR4663</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RentalDiscountAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS182433</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InsuranceAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@DNR3363</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ChargedPeriods</Name>
			<ExtendedDataType>INVChargedPeriods</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalChargedAmount</Name>
			<ExtendedDataType>FINTotalChargedAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalInternalAmount</Name>
			<ExtendedDataType>FINTotalInternalAmount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustInvoiceTransRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>FINRentalTransTotals</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ChargedPeriods</MapField>
					<MapFieldTo>ChargedPeriods</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InsuranceAmount</MapField>
					<MapFieldTo>InsuranceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoicedQty</MapField>
					<MapFieldTo>InvoicedQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentalAmount</MapField>
					<MapFieldTo>RentalAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentalDiscountAmount</MapField>
					<MapFieldTo>RentalDiscountAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>CustInvoiceTransRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TotalChargedAmount</MapField>
					<MapFieldTo>TotalChargedAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TotalInternalAmount</MapField>
					<MapFieldTo>TotalInternalAmount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FINRentalInvoiceLinePacked</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ConsumptionCalcPacked</MapField>
					<MapFieldTo>ConsumptionCalcPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPriceCalcPacked</MapField>
					<MapFieldTo>CostPriceCalcPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditCalcPacked</MapField>
					<MapFieldTo>CreditCalcPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceCalcResultListPacked</MapField>
					<MapFieldTo>InvoiceCalcResultListPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualCalcPacked</MapField>
					<MapFieldTo>ManualCalcPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PeriodSpecificationPacked</MapField>
					<MapFieldTo>PeriodSpecificationPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceComponentsAmendmentPacked</MapField>
					<MapFieldTo>PriceComponentsAmendmentPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjHoursCalcPacked</MapField>
					<MapFieldTo>ProjHoursCalcPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RAGContractLinePacked</MapField>
					<MapFieldTo>RAGContractLinePacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RAGContractTiersPacked</MapField>
					<MapFieldTo>RAGContractTiersPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentalCalcPacked</MapField>
					<MapFieldTo>RentalCalcPacked</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransportCalcPacked</MapField>
					<MapFieldTo>TransportCalcPacked</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceTransRecId</Name>
					<Field>CustInvoiceTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>