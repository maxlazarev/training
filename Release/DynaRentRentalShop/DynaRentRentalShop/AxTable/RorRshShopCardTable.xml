<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RorRshShopCardTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RorRshShopCardTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setShopCardId</Name>
				<Source><![CDATA[
    public void setShopCardId()
    {
        NumberSequenceReference numberSequenceReference = RORParameters::RshNumRefRentalShopCardId(); 
    
        if(numberSequenceReference)
        {
            NumberSeq num = NumberSeq::newGetNum(numberSequenceReference);

            this.ShopCardId = num.num();
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.setShopCardId();
        this.CurrencyCode = Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(RorRshShopCardId _cardId)
    {
        return _cardId && (select firstonly RecId from RorRshShopCardTable
            where RorRshShopCardTable.ShopCardId == _cardId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExternalCardIdDuplicate</Name>
				<Source><![CDATA[
    static boolean existExternalCardIdDuplicate(RorRshShopExternalCardId _externalCardId, RecId _recId)
    {
        return _externalCardId && (select firstonly RecId from RorRshShopCardTable
            where RorRshShopCardTable.ExternalCardId == _externalCardId
            &&    RorRshShopCardTable.RecId != _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProjIdAndWorker</Name>
				<Source><![CDATA[
    static boolean existProjIdAndWorker(ProjId  _projId, HcmWorkerRecId _worker)
    {
        return _projId && _worker && (select firstonly RecId from RorRshShopCardTable
            where RorRshShopCardTable.ProjId == _projId 
            &&    RorRshShopCardTable.Worker == _worker).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static RorRshShopCardTable find(RorRshShopCardId _cardId, boolean _forupdate = false)
    {
        RorRshShopCardTable rentalShopCardTable;
                
        if (_cardId)
        {
            rentalShopCardTable.selectForUpdate(_forupdate);

            select firstonly rentalShopCardTable
            where rentalShopCardTable.ShopCardId == _cardId;
        }

        return rentalShopCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustAccount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CustAccount displayCustAccount()
    {
        ProjTable projTable;

        select firstonly CustAccount from projTable 
        where projTable.ProjId == this.ProjId;

        return projTable.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (this.RentalShopType == DNRRSHRentalShopType::Project)
        {
            ret = ret && this.checkExternalCardId();
            ret = ret && this.checkTransExists();
            ret = ret && this.checkProjectAndWorker();
        }

        if (this.RentalShopType == DNRRSHRentalShopType::Customer && this.IsConfirmed)
        {
            ret = ret && this.isAllTransactionAssigned() && this.isAllTransactionsValid();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectAndWorker</Name>
				<Source><![CDATA[
    public boolean checkProjectAndWorker()
    {
        boolean ret = true;

        if (!this.ProjId || !this.Worker)
        {
            ret = checkFailed("@DNR:ProjWorkerValidation");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExternalCardId</Name>
				<Source><![CDATA[
    private boolean checkExternalCardId()
    {
        boolean ret = true;

        if (this.ExternalCardId && RorRshShopCardTable::existExternalCardIdDuplicate(this.ExternalCardId, this.RecId))
        {
            ret = checkFailed(strFmt("@DNR:RentalShopExternalCardExists", this.ExternalCardId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransExists</Name>
				<Source><![CDATA[
    private boolean checkTransExists()
    {
        boolean ret = true;
                      
        if ((this.ProjId != this.orig().ProjId || this.Worker != this.orig().Worker)
        &&  RorRshShopTrans::existShopCardId(this.ShopCardId))
        {
            ret = checkFailed(strFmt("@DNR:RentalShopCardTransExists" , this.ShopCardId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateToDateTime</Name>
				<Source><![CDATA[
    public DNRRSHToDateTime calculateToDateTime(NumberOfDays _days)
    {
        DNRCalendarDate calendarDate;
        NumberOfDays    dateCounter = 1;
        TimeZone        userPrefTimeZone = DateTimeUtil::getUserPreferredTimeZone();
        TransDateTime   userTransDateTime = DateTimeUtil::applyTimeZoneOffset(this.FromDateTime, userPrefTimeZone);
        RORRentalTime   timeDay = DateTimeUtil::time(userTransDateTime);
        RORCalendarId   calenderId = this.calenderId();

        if (_days)
        {
            while select TransDate from calendarDate
            order by TransDate
            where calendarDate.CalendarId == calenderId
            &&    calendarDate.TransDate > this.FromDate
            {
                if(dateCounter == _days)
                {
                    break;
                }

                if(DNRCalendarDate::isDateOpen(calenderId, calendarDate.TransDate))
                {
                    dateCounter += 1;
                }
            }
            return  DateTimeUtil::newDateTime(calendarDate.TransDate, timeDay, userPrefTimeZone);
        }
        else
        {
            error("@DNR:RentalDurationError");
            return utcDateTimeNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        Timezone timeZone;

        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(RorRshShopCardTable, FromDateTime):
                timeZone = DateTimeUtil::getOriginatingTimeZone(this.FromDateTime);
                this.FromDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.FromDateTime, timeZone));
                break;
            
            case fieldNum(RorRshShopCardTable, ToDateTime):
                timeZone = DateTimeUtil::getOriginatingTimeZone(this.ToDateTime);
                this.ToDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ToDateTime, timeZone));
                break;

            case fieldNum(RorRshShopCardTable, LocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                break;

            case fieldNum(RorRshShopCardTable, SiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRentalShopCard</Name>
				<Source><![CDATA[
    public boolean validateRentalShopCard()
    {
        boolean ret = true;

        if (this.RentalShopType == DNRRSHRentalShopType::Customer)
        {
            if (!this.CustAccount)
            {
                ret = ret && checkFailed("@DNR:RentalShopCustomerValidation");
            }

            if (!this.FromDate || !this.ToDate)
            {
                ret = ret && checkFailed("@DNR:RentalShopDateValidation");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllTransactionAssigned</Name>
				<Source><![CDATA[
    public boolean isAllTransactionAssigned()
    {
        boolean             ret = true;
        RorRshShopTrans     shopTrans;
        InventDim           inventDim;
        BOBRentalType       rentalType;

        select firstonly RecId, ItemId from shopTrans
            exists join rentalType
            where shopTrans.RentalTypeId == rentalType.RentalTypeId
            &&    shopTrans.ShopCardId   == this.ShopCardId
            &&    shopTrans.TradeType    == RORTradeType::Rental
            &&    rentalType.Classification == BOBRentalTypeClassification::Serialized
                exists join inventDim
                where inventDim.inventDimId == shopTrans.InventDimId
                &&    inventDim.inventSerialId == SysQueryRangeUtil::valueEmptyString();
            
        if (shopTrans.RecId)
        {
            ret = checkFailed(strFmt("@DNR:SerialNoValidation", shopTrans.ItemId));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllTransactionsValid</Name>
				<Source><![CDATA[
    public boolean isAllTransactionsValid()
    {
        boolean         ret = true;      
        RorRshShopTrans shopTrans;

        select firstonly RecId, ItemId from shopTrans
        where shopTrans.OnRentDateTime == utcDateTimeNull()
        &&    shopTrans.TradeType      != RORTradeType::SalesPurch
        &&    shopTrans.ShopCardId     == this.ShopCardId;

        ret = ret && shopTrans.RecId ? checkFailed(strFmt("@DNR:OnRentDateValidation", shopTrans.ItemId)) : true;

        select firstonly RecId, ItemId from shopTrans
        where shopTrans.OffRentDateTime == utcDateTimeNull()
        &&    shopTrans.ExpectedOffRentDateTime == utcDateTimeNull()
        &&    shopTrans.ShopCardId     == this.ShopCardId
        &&    shopTrans.TradeType      != RORTradeType::SalesPurch;

        ret = ret && shopTrans.RecId ? checkFailed(strFmt("@DNR:OffRentDateValidation", shopTrans.ItemId)) : true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
                                                                                        
        ret = super(_fieldIdToCheck);

        switch(_fieldIdToCheck)
        {
            case fieldNum(RorRshShopCardTable, FromDateTime):
                if (this.ToDateTime && this.ToDateTime < this.FromDateTime)
                {
                    ret = ret && checkFailed(strFmt("@DNR6356", extendedTypeId2pname(extendedTypeNum(FromDateTime)), extendedTypeId2pname(extendedTypeNum(ToDateTime))));
                }
                break;

            case fieldNum(RorRshShopCardTable, ToDateTime):
                if (this.FromDateTime && this.ToDateTime < this.FromDateTime)
                {
                    ret = ret && checkFailed(strFmt("@DNR6356", extendedTypeId2pname(extendedTypeNum(FromDateTime)), extendedTypeId2pname(extendedTypeNum(ToDateTime))));
                }
                break;

            case fieldNum(RorRshShopCardTable, SiteId):
                this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventSiteId));
                break;

            case fieldNum(RorRshShopCardTable, LocationId):
                this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpectedOffRentDateForRentalShopTrans</Name>
				<Source><![CDATA[
    public static void updateExpectedOffRentDateForRentalShopTrans(RorRshShopCardTable _shopCardTable, utcdatetime    _dateTime)
    {
        RorRshShopTrans     shopTrans;

        update_recordset shopTrans
        setting ExpectedOffRentDateTime = _dateTime
        where shopTrans.ShopCardId == _shopCardTable.ShopCardId;

        if (FormDataUtil::isFormDataSource(_shopCardTable))
        {
            FormDataUtil::getFormDataSource(_shopCardTable).research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalOrder</Name>
				<Source><![CDATA[
    public  SalesTable rentalOrder()
    {
        SalesTable      salesTable;

        if (this.SalesId)
        {
            salesTable = SalesTable::find(this.SalesId);
        }
        return  salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalCounterInventLocationId</Name>
				<Source><![CDATA[
    public static InventLocationId getRentalCounterInventLocationId()
    {
        InventLocationId inventLocationId;
        
        inventLocationId = DNRWorkerDefaults::findByUserId(curUserId()).InventLocationId;
        
        if (!inventLocationId)
        {
            inventLocationId = RORParameters::find().DNRRSHDefaultWarehouse;
        }

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupShopCardIdForReturn</Name>
				<Source><![CDATA[
    public static void lookupShopCardIdForReturn(FormControl _formControl, CustAccount _custAccount = SysQueryRangeUtil::valueEmptyString())
    {
        QueryBuildDataSource qbdsShopCardtable;
        QueryBuildDataSource qbdsShopCardTrans;
        Query                queryShopCardTable = new Query();
        SysTableLookup       sysTableLookUp = SysTableLookup::newParameters(tablenum(RorRshShopCardTable), _formControl);

        qbdsShopCardtable = queryShopCardTable.addDataSource(tableNum(RorRshShopCardTable));
        qbdsShopCardtable.addRange(fieldNum(RorRshShopCardTable, IsConfirmed)).value(queryValue(NoYes::Yes));
        qbdsShopCardtable.addRange(fieldNum(RorRshShopCardTable, RentalShopType)).value(queryValue(DNRRSHRentalShopType::Customer));
        qbdsShopCardtable.addOrderByField(fieldNum(RorRshShopCardTable, ToDateTime));

        if (_custAccount)
        {
            qbdsShopCardtable.addRange(fieldNum(RorRshShopCardTable, CustAccount)).value(_custAccount);
        }
        
        qbdsShopCardTrans = qbdsShopCardtable.addDataSource(tableNum(RorRshShopTrans));
        qbdsShopCardTrans.relations(true);
        qbdsShopCardTrans.joinMode(JoinMode::ExistsJoin);
        qbdsShopCardTrans.addRange(fieldNum(RorRshShopTrans, TransType)).value(queryValue(RorRshShopTransType::Delivery));

        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, ShopCardId));
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, CustAccount));
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, ToDateTime));
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, SalesId));

        sysTableLookUp.parmQuery(queryShopCardTable);
        sysTableLookUp.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupShopCardProject</Name>
				<Source><![CDATA[
    public static void lookupShopCardProject(FormControl _formControl)
    {
       
        SysTableLookup sysTableLookUp = SysTableLookup::newParameters(tablenum(RorRshShopCardTable), _formControl);
        
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, ShopCardId));
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, ExternalCardId));
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, ProjId));
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, FromDate));
        sysTableLookUp.addLookupfield(fieldNum(RorRshShopCardTable, ToDate));
        
        Query queryShopCardTable = new Query();
        QueryBuildDataSource qbdsShopCardtable = queryShopCardTable.addDataSource(tableNum(RorRshShopCardTable));
        qbdsShopCardtable.addRange(fieldNum(RorRshShopCardTable, RentalShopType)).value(queryValue(DNRRSHRentalShopType::Project));
        qbdsShopCardtable.addRange(fieldNum(RorRshShopCardTable, Active)).value(queryValue(NoYes::Yes));
        sysTableLookUp.parmQuery(queryShopCardTable);
        sysTableLookUp.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    public CustTable custTable()
    {
        return CustTable::find(this.CustAccount ? this.CustAccount : this.displayCustAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calenderId</Name>
				<Source><![CDATA[
    public DNRCalendarId calenderId()
    {
        CustTable custTable = this.custTable();
        return custTable.DNRRentalCalendarId ? custTable.DNRRentalCalendarId : RORParameters::find().DNRRSHDefaultRentalCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustomerName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CustName displayCustomerName()
    {
        return this.custTable().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustomerFirstName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display FirstName displayCustomerFirstName()
    {
        DNRRSHCustTableView     custTable;

        select firstonly FirstName from custTable
        where custTable.AccountNum == this.CustAccount;

        return custTable.FirstName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustomerLastName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display LastName  displayCustomerLastName()
    {
        DNRRSHCustTableView     custTable;

        select firstonly LastName from custTable
            where custTable.AccountNum == this.CustAccount;

        return custTable.LastName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRentalDuration</Name>
				<Source><![CDATA[
    public NumberOfDays calculateRentalDuration()
    {
        DNRCalendarDate calendarDate;
        NumberOfDays    duration;
        RORCalendarId   calenderId = this.calenderId();

        while select TransDate from calendarDate
        order by TransDate
        where calendarDate.CalendarId == calenderId
        &&    calendarDate.TransDate >= this.FromDate
        &&    calendarDate.TransDate <= this.ToDate
        {            
            if(DNRCalendarDate::isDateOpen(calenderId, calendarDate.TransDate))
            { 
                duration += 1;
            }
        }

        return duration;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RorRshRentalShop</ConfigurationKey>
	<DeveloperDocumentation>@DNR:ShopCardTableDevDocu</DeveloperDocumentation>
	<FormRef>DNRRSHRentalShopDetails</FormRef>
	<Label>@DNR:RentalShopCard</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ShopCardId</TitleField1>
	<TitleField2>ToDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ShopCardIdIdx</ClusteredIndex>
	<PrimaryIndex>ShopCardIdIdx</PrimaryIndex>
	<ReplacementKey>ShopCardIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShopCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsConfirmed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShopCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShopCardId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShopCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsConfirmed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalShopType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Create</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShopCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Confirmation</Name>
			<Label>@SYS59211</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsConfirmed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateAndTime</Name>
			<Label>@SYS112412</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RentalOrder</Name>
			<Label>@DNR10</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StorageDimension</Name>
			<Label>@SYS108783</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShopCardId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RorRshShopCardId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalCardId</Name>
			<ExtendedDataType>RorRshShopExternalCardId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RentalShopType</Name>
			<EnumType>DNRRSHRentalShopType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsConfirmed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DNRRSHIsConfirmed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<ExtendedDataType>DNRRSHFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<ExtendedDataType>DNRRSHToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@DNR6238</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SiteId</Name>
			<ExtendedDataType>InventInventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ShopCardIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ShopCardId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExternalCardIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalCardId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RentalShopCardTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RentalShopType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsConfirmed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RORRentalHeader</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CalendarId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeaderId</MapField>
					<MapFieldTo>ShopCardId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>INVInvoiceProfileId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceTimeUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VenueCode</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>LocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>SiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SiteId</Name>
					<Field>SiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocationID</Name>
					<Field>LocationID</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>