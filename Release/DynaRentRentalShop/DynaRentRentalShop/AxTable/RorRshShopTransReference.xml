<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RorRshShopTransReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RorRshShopTransReference extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RefTableId _refTableId, RefRecId _refRecId)
    {
        return (_refTableId && _refRecId &&
            (select firstonly RecId from RorRshShopTransReference
             where RorRshShopTransReference.RefTableId == _refTableId
             &&    RorRshShopTransReference.RefRecId == _refRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReference</Name>
				<Source><![CDATA[
    public static RorRshShopTransReference findReference(RefTableId _refTableId, RefRecId _refRecId, boolean _forUpdate = false)
    {
        RorRshShopTransReference rentalShopTransReference;
    
        if (_refTableId && _refRecId)
        {
            rentalShopTransReference.selectForUpdate(_forUpdate);
    
            select firstonly rentalShopTransReference
            where rentalShopTransReference.RefTableId == _refTableId
            &&    rentalShopTransReference.RefRecId == _refRecId;
        }
    
        return rentalShopTransReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDeliveryReference</Name>
				<Source><![CDATA[
    public static RorRshShopTransReference findOpenDeliveryReference(RefTableId _refTableId, RefRecId _refRecId, boolean _forUpdate = false)
    {
        RorRshShopTransReference rentalShopTransReference;
    
        if (_refTableId && _refRecId)
        {
            rentalShopTransReference.selectForUpdate(_forUpdate);
    
            select firstonly rentalShopTransReference
            where rentalShopTransReference.RefTableId == _refTableId
            &&    rentalShopTransReference.RefRecId == _refRecId
            &&    !rentalShopTransReference.ReturnTransId;
        }
    
        return rentalShopTransReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQualityInspection</Name>
				<Source><![CDATA[
    public static InventJournalTrans findQualityInspection(RorRshShopTransId _shopTransId, boolean _forUpdate = false)
    {
        RorRshShopTransReference rentalShopTransReference;
        InventJournalTrans inventJournalTrans;
        SalesLine salesLine;
        RTPInventJournalTransSalesLineReference journalTransSalesLineReference;

        if (_shopTransId)
        {
            inventJournalTrans.selectForUpdate(_forUpdate);
    
            select firstonly inventJournalTrans
                exists join journalTransSalesLineReference
                where journalTransSalesLineReference.InventJournalTransRecId == inventJournalTrans.RecId
                    join TableId from salesLine
                    where salesLine.Recid == journalTransSalesLineReference.SalesLineRecId
                        join TableId from rentalShopTransReference
                        where rentalShopTransReference.RefTableId == salesLine.TableId
                        &&    rentalShopTransReference.RefRecId == salesLine.RecId
                        &&    (rentalShopTransReference.DeliveryTransId == _shopTransId ||
                               rentalShopTransReference.ReturnTransId == _shopTransId);
        }
    
        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesLine</Name>
				<Source><![CDATA[
    public static SalesLine findSalesLine(RorRshShopTransId _shopTransId, boolean _forUpdate = false)
    {
        RorRshShopTransReference rentalShopTransReference;
        SalesLine salesLine;

        if (_shopTransId)
        {
            salesLine.selectForUpdate(_forUpdate);
    
            select firstonly salesLine
                exists join rentalShopTransReference
                where rentalShopTransReference.RefTableId == salesLine.TableId
                &&    rentalShopTransReference.RefRecId == salesLine.RecId
                &&    !rentalShopTransReference.ReturnRefRecId
                &&    (rentalShopTransReference.DeliveryTransId == _shopTransId ||
                       rentalShopTransReference.ReturnTransId == _shopTransId);

            if (!salesLine)
            {
                // For sales item return find separate line
                select firstonly salesLine
                    exists join rentalShopTransReference
                    where rentalShopTransReference.ReturnRefTableId == salesLine.TableId
                    &&    rentalShopTransReference.ReturnRefRecId == salesLine.RecId
                    &&    rentalShopTransReference.ReturnTransId == _shopTransId;
            }
        }
    
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventJournalTrans</Name>
				<Source><![CDATA[
    public static InventJournalTrans findInventJournalTrans(RorRshShopTransId _shopTransId, boolean _forUpdate = false)
    {
        RorRshShopTransReference rentalShopTransReference;
        InventJournalTrans inventJournalTrans;

        if (_shopTransId)
        {
            inventJournalTrans.selectForUpdate(_forUpdate);
    
            select firstonly inventJournalTrans
                exists join rentalShopTransReference
                where rentalShopTransReference.RefTableId == inventJournalTrans.TableId
                &&    rentalShopTransReference.RefRecId == inventJournalTrans.RecId
                &&    (rentalShopTransReference.DeliveryTransId == _shopTransId ||
                       rentalShopTransReference.ReturnTransId == _shopTransId);
        }
    
        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeliveryReference</Name>
				<Source><![CDATA[
    public static void createDeliveryReference(RefTableId _refTableId, RefRecId _refRecId, RorRshShopTrans _rentalShopTrans)
    {
        RorRshShopTransReference shopTransReference;

        if (RorRshShopTransReference::exist(_refTableId, _refRecId))
        {
            RorRshShopTransLog::createLog(_rentalShopTrans.TableId, _rentalShopTrans.RecId, RorRshShopLogType::MiscError, "@SYS19559");
        }
        else
        {
            shopTransReference.initValue();
            shopTransReference.RefTableId = _refTableId;
            shopTransReference.RefRecId = _refRecId;
            shopTransReference.Qty = _rentalShopTrans.Qty;
            shopTransReference.SalesUnit = _rentalShopTrans.SalesUnit;
            shopTransReference.DeliveryTransId = _rentalShopTrans.TransId;
            shopTransReference.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRefRecIdForReturn</Name>
				<Source><![CDATA[
    public static void updateRefRecIdForReturn(RefTableId _refTableId, RefRecId _refRecId, RorRshShopTrans _returnRentalShopTrans)
    {
        RorRshShopTransReference shopTransReference;

        update_recordset shopTransReference
        setting ReturnRefTableId = _refTableId,
                ReturnRefRecId = _refRecId
            where shopTransReference.ReturnTransId == _returnRentalShopTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceWithReturn</Name>
				<Source><![CDATA[
    public static Qty updateReferenceWithReturn(RefTableId _refTableId, RefRecId _refRecId, RorRshShopTrans _returnRentalShopTrans, Qty _returnQty)
    {
        RorRshShopTransReference shopTransReference = RorRshShopTransReference::findOpenDeliveryReference(_refTableId, _refRecId, true);
        Qty returnedQty;

        if (shopTransReference)
        {            
            if (_returnQty < shopTransReference.Qty)
            {
                RorRshShopTransReference shopTransReferenceSplit;

                shopTransReferenceSplit.initValue();
                shopTransReferenceSplit.data(shopTransReference.data());
                shopTransReferenceSplit.Qty -= _returnQty;
                
                shopTransReference.Qty = _returnQty;
                shopTransReference.ReturnTransId = _returnRentalShopTrans.TransId;
                shopTransReference.update(); 
                              
                // Insert after update to avoid unique index conflict.
                shopTransReferenceSplit.insert();
            }
            else
            {
                shopTransReference.ReturnTransId = _returnRentalShopTrans.TransId;
                shopTransReference.update();
            }

            returnedQty = shopTransReference.Qty;
        }
        else
        {
            RorRshShopTransLog::createLog(_returnRentalShopTrans.TableId, _returnRentalShopTrans.RecId, RorRshShopLogType::MiscError, "@SYS19559");
        } 
       
        return returnedQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RorRshRentalShop</ConfigurationKey>
	<Label>@SYS40441</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Reference</TableGroup>
	<TitleField1>DeliveryTransId</TitleField1>
	<TitleField2>ReturnTransId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<PrimaryIndex>ReferenceIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS40441</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Trans</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RorRshShopTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RorRshShopTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReturnRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReturnRefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReferenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeliveryTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReturnTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLineReturn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnRefTableId</Name>
					<Field>ReturnRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnRefRecId</Name>
					<Field>ReturnRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>