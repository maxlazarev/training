<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RorRshShopTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RorRshShopTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setTransId</Name>
				<Source><![CDATA[
    public void setTransId()
    {
        NumberSequenceReference numberSequenceReference = RORParameters::RshNumRefRentalShopTransId();
    
        if(numberSequenceReference)
        {
            NumberSeq num = NumberSeq::newGetNum(numberSequenceReference);

            this.TransID = num.num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.setTransId();
        this.Qty = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryReturnTransFromTmp</Name>
				<Source><![CDATA[
    private void initDeliveryReturnTransFromTmp(RorRshTmpShopTrans _tmpRentalShopTrans)
    {
        this.ShopCardId = _tmpRentalShopTrans.ShopCardId;        
        this.ItemId = _tmpRentalShopTrans.ItemId;
        this.InventDimId = _tmpRentalShopTrans.InventDimId;
        this.TransType = _tmpRentalShopTrans.TransType;
        this.TradeType = (_tmpRentalShopTrans.TradeType == RorRshShopTradeType::Rental ? RORTradeType::Rental : RORTradeType::SalesPurch);
        this.SalesUnit = _tmpRentalShopTrans.SalesUnit;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryTransFromTmp</Name>
				<Source><![CDATA[
    public void initDeliveryTransFromTmp(RorRshTmpShopTrans _tmpRentalShopTrans)
    {
        this.initDeliveryReturnTransFromTmp(_tmpRentalShopTrans);
        this.OnRentDateTime = _tmpRentalShopTrans.OnRentDateTime;
        // Add 1 day to make sure that rental line is visible in planboard graph
        this.ExpectedOffRentDateTime = DateTimeUtil::addDays(this.OnRentDateTime, 1);
        this.Qty = _tmpRentalShopTrans.QtyDelivery;
        this.SalesPrice = _tmpRentalShopTrans.SalesPrice;
        this.LinePercent = _tmpRentalShopTrans.LinePercentDel;
        this.LineAmount  = _tmpRentalShopTrans.LineAmountDel;
        this.RentalGrossAmount = _tmpRentalShopTrans.RentalGrossAmountDel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReturnTransFromTmp</Name>
				<Source><![CDATA[
    public void initReturnTransFromTmp(RorRshTmpShopTrans _tmpRentalShopTrans, RorRshReturnQuality _returnQuality)
    {
        this.initDeliveryReturnTransFromTmp(_tmpRentalShopTrans);
        this.OnRentDateTime = _tmpRentalShopTrans.OnRentDateTime;
        this.OffRentDateTime = _tmpRentalShopTrans.OffRentDateTime;
        this.ExpectedOffRentDateTime = this.OffRentDateTime;
        this.SalesPrice = _tmpRentalShopTrans.SalesPrice;
        this.LinePercent = _tmpRentalShopTrans.LinePercentDel;
        this.LineAmount  = _tmpRentalShopTrans.LineAmountDel;
        this.RentalGrossAmount = _tmpRentalShopTrans.RentalGrossAmountDel;

        FieldId qtyFieldId = RorRshTmpShopTrans::returnQuality2FieldId(_returnQuality);

        if (qtyFieldId)
        {
            this.ReturnQuality = _returnQuality;
            this.Qty = _tmpRentalShopTrans.(qtyFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRentedQtyForShopCard</Name>
				<Source><![CDATA[
    // Used to validate max allowed rental item qty defined for a shop card.
    public static Qty getTotalRentedQtyForShopCard(ItemId _itemId, RorRshShopCardId _shopCardId, UnitOfMeasureToRecId _uomToRecId)
    {
        Qty ret;
        RorRshShopTrans rentalShopTrans;
        RorRshShopTransReference shopTransReference;
        UnitOfMeasure toUnitOfMeasure = UnitOfMeasure::find(_uomToRecId);
        UnitOfMeasure fromUnitOfMeasure;

        // Check what was rented out in the default sales unit.
        select sum(Qty) from rentalShopTrans
        where rentalShopTrans.ShopCardId == _shopCardId
        &&    rentalShopTrans.ItemId == _itemId
        &&    rentalShopTrans.TransType == RorRshShopTransType::Delivery
        &&    rentalShopTrans.TradeType == RORTradeType::Rental
        &&    rentalShopTrans.SalesUnit == toUnitOfMeasure.Symbol
            notexists join shopTransReference
            where shopTransReference.DeliveryTransId == rentalShopTrans.TransId
            &&    shopTransReference.ReturnTransId;

        ret = rentalShopTrans.Qty;

        // Check what was rented out in different unit than the default sales unit.
        while select Qty from rentalShopTrans
        where rentalShopTrans.ShopCardId == _shopCardId
        &&    rentalShopTrans.ItemId == _itemId
        &&    rentalShopTrans.TransType == RorRshShopTransType::Delivery
        &&    rentalShopTrans.TradeType == RORTradeType::Rental
        &&    rentalShopTrans.SalesUnit != toUnitOfMeasure.Symbol
            join RecId from fromUnitOfMeasure
            where   fromUnitOfMeasure.Symbol == rentalShopTrans.SalesUnit
                notexists join shopTransReference
                where shopTransReference.DeliveryTransId == rentalShopTrans.TransId
                &&    shopTransReference.ReturnTransId
        {
            ret += UnitOfMeasureConverter::convert(rentalShopTrans.Qty, fromUnitOfMeasure.RecId, toUnitOfMeasure.RecId, NoYes::No);            
        }

        // Check what was returned in the default sales unit and not processed yet.
        select sum(Qty) from rentalShopTrans
        where rentalShopTrans.ShopCardId == _shopCardId
        &&    rentalShopTrans.ItemId == _itemId
        &&    rentalShopTrans.TransType == RorRshShopTransType::Return
        &&    rentalShopTrans.TradeType == RORTradeType::Rental
        &&    rentalShopTrans.SalesUnit == toUnitOfMeasure.Symbol
        &&    (rentalShopTrans.ReturnQuality == RorRshReturnQuality::Damaged ||
               rentalShopTrans.ReturnQuality == RorRshReturnQuality::Good ||
               rentalShopTrans.ReturnQuality == RorRshReturnQuality::Scrapped)
            notexists join shopTransReference
            where shopTransReference.ReturnTransId == rentalShopTrans.TransId;
           
        // Ignore surplus return.

        ret -= rentalShopTrans.Qty;

        // Check what was returned in different unit than the default sales unit and not processed yet.
        while select Qty from rentalShopTrans
        where rentalShopTrans.ShopCardId == _shopCardId
        &&    rentalShopTrans.ItemId == _itemId
        &&    rentalShopTrans.TransType == RorRshShopTransType::Return
        &&    rentalShopTrans.TradeType == RORTradeType::Rental
        &&    rentalShopTrans.SalesUnit != toUnitOfMeasure.Symbol
        &&    (rentalShopTrans.ReturnQuality == RorRshReturnQuality::Damaged ||
               rentalShopTrans.ReturnQuality == RorRshReturnQuality::Good ||
               rentalShopTrans.ReturnQuality == RorRshReturnQuality::Scrapped)
            join RecId from fromUnitOfMeasure
            where   fromUnitOfMeasure.Symbol == rentalShopTrans.SalesUnit
                notexists join shopTransReference
                where shopTransReference.ReturnTransId == rentalShopTrans.TransId
        {
            ret -= UnitOfMeasureConverter::convert(rentalShopTrans.Qty, fromUnitOfMeasure.RecId, toUnitOfMeasure.RecId, NoYes::No);
        }
        
        // If returned more than rented than just pass 0.
        ret = max(0, ret);


        // This methods returns qty of items deliver for the same rental shop sard as returned.
        // It is possible to return items that were delivered for different rental shop card. In such case a log will created.
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMatchingDeliveryForTmpReturn</Name>
				<Source><![CDATA[
    public static boolean existMatchingDeliveryForTmpReturn(RorRshTmpShopTrans _tmpRentalShopTrans, boolean _findExactMatch)
    {
        RorRshShopTrans dummyReturnTrans;
        boolean ret = false;
        Qty matchingDeliveryQty;

        dummyReturnTrans.initReturnTransFromTmp(_tmpRentalShopTrans, RorRshReturnQuality::Good);
        dummyReturnTrans.Qty = (_tmpRentalShopTrans.QtyReturnDamaged + _tmpRentalShopTrans.QtyReturnGood + _tmpRentalShopTrans.QtyReturnScrapped);

        Set salesLineSet = dummyReturnTrans.getMatchingDeliveryOrderLineForReturn(dummyReturnTrans.Qty, _findExactMatch);
        SetEnumerator enumerator = salesLineSet.getEnumerator();

        while (enumerator.moveNext())
        {
            SalesLine salesLine = enumerator.current();
                    
            matchingDeliveryQty += dummyReturnTrans.getDeliveryQtyForSalesLine(salesLine);
            
            if (matchingDeliveryQty >= dummyReturnTrans.Qty)
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingDeliveryOrderLineForReturn</Name>
				<Source><![CDATA[
    public Set getMatchingDeliveryOrderLineForReturn(Qty _returnQty, boolean _findExactMatch = false)
    {
        // Find matching delivery based on serialId or itemId. If delivery was for different project, shop card or warehouse then create a log.
        Set salesLineSet;
        InventTable inventTable = InventTable::find(this.ItemId);
        
        if (inventTable.BOBIsSerializedRentalItem())
        {
            salesLineSet = this.getMatchingDeliveryOrderLineForReturn_serialized(_findExactMatch);
        }
        else
        {
            salesLineSet = this.getMatchingDeliveryOrderLineForReturn_bulk(_returnQty, _findExactMatch);
        }

        return salesLineSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingDeliveryOrderLineForReturnSet</Name>
				<Source><![CDATA[
    private Set getMatchingDeliveryOrderLineForReturnSet(boolean _checkShopCardId, 
        boolean _checkInventLocationId,
        boolean _checkWMSLocationId,
        Qty     _returnQty, 
        Set     _salesLineSet, 
        Map     _returnQtyMap = new Map(Types::String, Types::Real))
    {
        Set salesLineSet = new Set(Types::Record);
        SalesLine salesLine;
        RorRshShopTrans deliveryTrans;
        RorRshShopTransReference shopTransReference;
        InventDim returnInventDim;
        InventDim deliveryInventDim;
        Qty remainingReturn = _returnQty;
        Qty foundDeliveryQty;

        if (_returnQtyMap.exists(this.TransId))
        {
            foundDeliveryQty = _returnQtyMap.lookup(this.TransId);
        }

        if (!_checkShopCardId && !_checkInventLocationId && !_checkWMSLocationId)
        {
            RorRshShopCardTable returnCard;
            RorRshShopCardTable deliveryCard;

            // If no other filters specified then just check if returning to the same project
            while select salesLine
                join Qty from shopTransReference
                where shopTransReference.RefTableId == salesLine.TableId
                &&    shopTransReference.RefRecId == salesLine.RecId
                &&    !shopTransReference.ReturnTransId
                    exists join deliveryTrans
                    where deliveryTrans.TransId == shopTransReference.DeliveryTransId
                    &&    deliveryTrans.ItemId == this.ItemId
                        join TableId from deliveryCard
                        where deliveryCard.ShopCardId == deliveryTrans.ShopCardId
                            join TableId from returnCard
                            where returnCard.ShopCardId == this.ShopCardId
                            &&    returnCard.ProjId == deliveryCard.ProjId
            {
                if (!_salesLineSet.in(salesLine))
                {
                    foundDeliveryQty += min(remainingReturn, shopTransReference.Qty);

                    salesLineSet.add(salesLine);

                    if (remainingReturn <= shopTransReference.Qty)
                    {
                        break;
                    }

                    remainingReturn -= shopTransReference.Qty;
                }
            }
        }
        else
        {
            while select salesLine
                join Qty from shopTransReference
                where shopTransReference.RefTableId == salesLine.TableId
                &&    shopTransReference.RefRecId == salesLine.RecId
                &&    !shopTransReference.ReturnTransId
                    exists join deliveryTrans
                    where deliveryTrans.TransId == shopTransReference.DeliveryTransId
                    &&    (!_checkShopCardId || deliveryTrans.ShopCardId == this.ShopCardId)
                    &&    deliveryTrans.ItemId == this.ItemId
                        join TableId from deliveryInventDim
                        where deliveryInventDim.inventDimId == deliveryTrans.InventDimId
                            join TableId from returnInventDim
                            where returnInventDim.InventDimId == this.InventDimId
                            &&    returnInventDim.InventSerialId == deliveryInventDim.InventSerialId
                            &&    (!_checkInventLocationId || returnInventDim.InventLocationId == deliveryInventDim.InventLocationId)
                            &&    (!_checkWMSLocationId || returnInventDim.wMSLocationId == deliveryInventDim.wMSLocationId)
            {
                if (!_salesLineSet.in(salesLine))
                {
                    foundDeliveryQty += min(remainingReturn, shopTransReference.Qty);

                    salesLineSet.add(salesLine);

                    if (remainingReturn <= shopTransReference.Qty)
                    {
                        break;
                    }

                    remainingReturn -= shopTransReference.Qty;
                }
            }
        }

        _returnQtyMap.insert(this.TransId, foundDeliveryQty);
                              
        return salesLineSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingDeliveryOrderLineForReturn_serialized</Name>
				<Source><![CDATA[
    private Set getMatchingDeliveryOrderLineForReturn_serialized(boolean _findExactMatch = false)
    {
        // Find matching delivery based on serialId or itemId. If delivery was for different project, shop card or warehouse then create a log.
        Set salesLineSet = new Set(Types::Record);
        
        salesLineSet = this.getMatchingDeliveryOrderLineForReturnSet(true, true, true, this.Qty, salesLineSet);

        if (!_findExactMatch)
        {
            if (salesLineSet.empty())
            {
                // Try to find delivery for different rental shop card but in the same warehouse and WMSLocation
                salesLineSet = this.getMatchingDeliveryOrderLineForReturnSet(false, true, true, this.Qty, salesLineSet);

                if (salesLineSet.empty() && this.wMSLocationId)
                {
                    // Try to find delivery for different rental shop card and WMSLocation but in the same warehouse
                    salesLineSet = this.getMatchingDeliveryOrderLineForReturnSet(false, true, false, this.Qty, salesLineSet);
                }
            }

            if (salesLineSet.empty())
            {
                // Try to find delivery for different rental shop card and different warehouse
                salesLineSet = this.getMatchingDeliveryOrderLineForReturnSet(false, false, false, this.Qty, salesLineSet);
            }            
        }
        
        return salesLineSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingDeliveryOrderLineForReturn_bulk</Name>
				<Source><![CDATA[
    private Set getMatchingDeliveryOrderLineForReturn_bulk(Qty _returnQty, boolean _findExactMatch = false)
    {
        // Find matching delivery based on serialId or itemId. If delivery was for different project, shop card or warehouse then create a log.
        Set salesLineSet = new Set(Types::Record);
        Qty remainingReturn = _returnQty;
        Map returnQtyMap = new Map(Types::String, Types::Real);
        boolean canFindExact = true;
        boolean canFindWarehouse = true;
        boolean canFindAny = true;

        while (remainingReturn)
        {
            if ((!canFindExact && _findExactMatch)
            ||  (!canFindExact && !canFindWarehouse && !canFindAny))
            {
                break;
            }

            Set salesLineSetLocal = new Set(Types::Record);        
            if (canFindExact)
            {
                salesLineSetLocal = this.getMatchingDeliveryOrderLineForReturnSet(true, true, true, remainingReturn, salesLineSet, returnQtyMap);
            }

            if (salesLineSetLocal.empty())
            {
                canFindExact = false;
            }

            if (!_findExactMatch)
            {
                if (canFindWarehouse && salesLineSetLocal.empty())
                {
                    // Try to find delivery for different rental shop card but in the same warehouse and WMSLocation
                    salesLineSetLocal = this.getMatchingDeliveryOrderLineForReturnSet(false, true, true, remainingReturn, salesLineSet, returnQtyMap);

                    if (salesLineSet.empty() && this.wMSLocationId)
                    {
                        // Try to find delivery for different rental shop card and WMSLocation but in the same warehouse
                        salesLineSetLocal = this.getMatchingDeliveryOrderLineForReturnSet(false, true, false, remainingReturn, salesLineSet, returnQtyMap);
                    }
                }

                if (salesLineSetLocal.empty())
                {
                    canFindWarehouse = false;
                }

                if (canFindAny && salesLineSetLocal.empty())
                {
                    // Try to find delivery for different rental shop card and different warehouse
                    salesLineSetLocal = this.getMatchingDeliveryOrderLineForReturnSet(false, false, false, remainingReturn, salesLineSet, returnQtyMap);
                }
                               
                if (salesLineSetLocal.empty())
                {
                    canFindAny = false;
                }
            }

            if (salesLineSetLocal.empty())
            {
                // Nothing found so quit the loop
                break;
            }

            Qty foundDeliveryQty;

            if (returnQtyMap.exists(this.TransId))
            {
                foundDeliveryQty = returnQtyMap.lookup(this.TransId);
            }

            remainingReturn = max(0, remainingReturn - foundDeliveryQty);

            salesLineSet = Set::union(salesLineSet, salesLineSetLocal);
        }
        
        return salesLineSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existShopCardId</Name>
				<Source><![CDATA[
    static boolean existShopCardId(RorRshShopCardId _cardId)
    {
        return _cardId && (select firstonly RecId from RorRshShopTrans
            where RorRshShopTrans.ShopCardId == _cardId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableForReturn</Name>
				<Source><![CDATA[
    public Qty getAvailableForReturn()
    {
        Qty ret;
        // Get only matching deliveries
        Set salesLineSet = this.getMatchingDeliveryOrderLineForReturn(realMax(), true);
        SetEnumerator enumerator = salesLineSet.getEnumerator();

        while (enumerator.moveNext())
        {
            SalesLine salesLine = enumerator.current();       
            
            ret += this.getDeliveryQtyForSalesLine(salesLine);                        
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryQtyForSalesLine</Name>
				<Source><![CDATA[
    private Qty getDeliveryQtyForSalesLine(SalesLine _salesLine)
    {
        Qty deliveryQty;
        RorRshShopTransReference rentalShopTransReference;
            
        select sum(Qty) from rentalShopTransReference
        where rentalShopTransReference.RefTableId == _salesLine.TableId
        &&    rentalShopTransReference.RefRecId == _salesLine.RecId
        &&    rentalShopTransReference.DeliveryTransId
        &&    rentalShopTransReference.SalesUnit == this.SalesUnit
        &&    !rentalShopTransReference.ReturnTransId;

        deliveryQty = rentalShopTransReference.Qty;

        while select Qty, SalesUnit from rentalShopTransReference
        where rentalShopTransReference.RefTableId == _salesLine.TableId
        &&    rentalShopTransReference.RefRecId == _salesLine.RecId
        &&    rentalShopTransReference.DeliveryTransId
        &&    rentalShopTransReference.SalesUnit != this.SalesUnit
        &&    !rentalShopTransReference.ReturnTransId
        {
            // Convert from unit of deliver to unit of return
            EcoResProductUnitConverter ecoResConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                    _salesLine.InventDimId,
                    rentalShopTransReference.SalesUnit,
                    this.SalesUnit,
                    NoYes::No);

            deliveryQty += ecoResConverter.convertValue(rentalShopTransReference.Qty);
        }

        return deliveryQty;                
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllAvailableForReturn</Name>
				<Source><![CDATA[
    public Qty getAllAvailableForReturn()
    {
        Qty ret;
        // Get all deliveries
        Set salesLineSet = this.getMatchingDeliveryOrderLineForReturn(this.Qty, false);
        SetEnumerator enumerator = salesLineSet.getEnumerator();

        while (enumerator.moveNext())
        {
            SalesLine salesLine = enumerator.current();
            
            // Convert from unit of sales line to unit of rental trans
            EcoResProductUnitConverter ecoResConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                salesLine.InventDimId,
                salesLine.SalesUnit,
                this.SalesUnit,
                NoYes::No);

            Qty salesQty = ecoResConverter.convertValue(salesLine.SalesQty);
            ret += salesQty;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLogImage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    display container displayLogImage()
    {
        RorRshShopTransLog errorLog;
        container ret = conNull();

        select firstonly RecId from errorLog
        where errorLog.RefTableId == this.TableId
        &&    errorLog.RefRecId == this.RecId
        &&   !errorLog.Deleted
        &&   (errorLog.LogType == RorRshShopLogType::PostingError ||
              errorLog.LogType == RorRshShopLogType::MiscError);
  
        if (errorLog)
        {
            ret = ImageReference::constructForSymbol(ImageReferenceSymbol::Error, "@SYS87925").pack();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    public boolean modifyInventDim(
        InventDim            _inventDim,
        FieldId              _dimFieldId,
        boolean              _resetPrice = true)
    {
        Set dimFieldIdSet = new Set(Types::Integer);
        dimFieldIdSet.add(_dimFieldId);

        return this.modifyInventDimSet(_inventDim, dimFieldIdSet, _resetPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    public boolean modifyInventDimSet(
        InventDim            _inventDim,
        Set                  _dimFieldIdSet,
        boolean              _resetPrice = true,
        boolean              _skipInventDimDefaulting = false)
    {
        if (!this.ItemId)
        {
            return false;
        }

        InventDim inventDimLocal = InventDim::findOrCreate(_inventDim);
        
        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDimLocal))
        {
            return false;
        }

        this.setInventDimId(inventDimLocal.InventDimId, inventDimLocal);                       

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = (this.InventDimId == _inventDimId ? _inventDim : this.inventDim());

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDim</Name>
				<Source><![CDATA[
    public boolean validateModifyInventDim(
        InventDim           _inventDim,
        FieldId             _dimFieldId)
    {
        Set dimFieldIdSet = new Set(Types::Integer);
        dimFieldIdSet.add(_dimFieldId);

        return this.validateModifyInventDimSet(_inventDim, dimFieldIdSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifyInventDimSet</Name>
				<Source><![CDATA[
    public boolean validateModifyInventDimSet(
        InventDim           _inventDim,
        Set                 _dimFieldIdSet)
    {
        boolean             ok = true;
        
        if (ok && (_dimFieldIdSet.in(fieldNum(InventDim, InventBatchId))))
        {
            ok = this.pmfValidateBatchId(_inventDim.InventBatchId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfValidateBatchId</Name>
				<Source><![CDATA[
    protected boolean pmfValidateBatchId(InventBatchId _inventBatchId)
    {
        boolean ret = true;

        // Only validate WHS enabled Items if batch is above location.
        if (!WHSInventEnabled::exist(this.ItemId)
            ||  WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(InventTable::find(this.ItemId)))
        {
            if (#PdsShelfEnabled)
            {
                CustAccount custAccount = this.shopCardTable().displayCustAccount();

                ret = ret
                && InventBatch::pdsCheckExpiryDate(
                    _inventBatchId,
                    this.ItemId,
                    DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.OnRentDateTime, DateTimeUtil::getUserPreferredTimeZone())),
                    true,
                    custAccount,
                    false,
                    this.inventDim());
            }
        }       

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shopCardTable</Name>
				<Source><![CDATA[
    public RorRshShopCardTable shopCardTable(boolean _forUpdate = false)
    {
        return RorRshShopCardTable::find(this.ShopCardId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public RorRshShopCardTable find(boolean _forUpdate = false)
    {
        RorRshShopCardTable shopCardTable;

        if (_forUpdate)
        {
            shopCardTable.selectForUpdate(true);
        }

        select firstonly shopCardTable
        where shopCardTable.ShopCardId == this.ShopCardId;

        return shopCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRentalShopCard</Name>
				<Source><![CDATA[
    public void initFromRentalShopCard(RorRshShopCardTable _shopCardTable)
    {
        InventDim inventDim;

        this.ShopCardId              = _shopCardTable.ShopCardId;
        this.OnRentDateTime          = _shopCardTable.FromDateTime;
        this.ExpectedOffRentDateTime = _shopCardTable.ToDateTime;
        this.CurrencyCode            = _shopCardTable.CurrencyCode;
        this.CustAccount             = _shopCardTable.CustAccount;

        inventDim.InventLocationId  = _shopCardTable.LocationId;
        inventDim.modifiedField(fieldNum(InventDim, InventLocationId));
        inventDim = InventDim::findDim(inventDim);
        this.InventDimId = inventDim.inventDimId;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdModified</Name>
				<Source><![CDATA[
    private void itemIdModified()
    {
        BOBRentalType     rentalType = BOBRentalType::findFromItemId(this.ItemId);
        InventTableModule inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales);

        this.SalesUnit = inventTableModule.UnitId;
        this.RentalTypeId = rentalType.RentalTypeId;
                      
        if (this.TransType == RorRshShopTransType::Delivery)
        {
            InventItemSalesSetup inventItemSalesSetup = InventItemSalesSetup::find(this.ItemId, this.InventDimId);

            if(rentalType.Classification == BOBRentalTypeClassification::Serialized)
            {
                this.Qty = 1;
            }
            if (inventItemSalesSetup.MultipleQty)
            {
                this.Qty = inventItemSalesSetup.MultipleQty;
            }
        }
        
        RORItemTradeType itemTradeType = DNRRSHRentalShopDataHelper::getItemTradeType(this.ItemId);
        this.TradeType = itemTradeType == RORItemTradeType::SalesPurch ? RORTradeType::SalesPurch : RORTradeType::Rental;

        if (this.TradeType != RORTradeType::SalesPurch)
        {
            this.RORRentalLine::RAGSetContractInfo(false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerialNum</Name>
				<Source><![CDATA[
    private void createSerialNum()
    {
        InventSerialId newSerialNum = this.inventDim().InventSerialId;

        if (newSerialNum
        && this.ItemId
        && !InventSerial::exist(newSerialNum, this.ItemId))
        {
            BOBObjectTable objectTable = BOBObjectTable::findInventSerialId(newSerialNum);
            InventTable inventTable = InventTable::find(this.ItemId);
            BOBRentalTypeId rentalTypeId = inventTable.BOBRentalType().RentalTypeId;

            // Allow using serial number of another item the same way as on rental order form but only if both items have the same rental type
            if (rentalTypeId
            && objectTable.RentalTypeId == rentalTypeId)
            {
                InventSerial::BOBFindOrCreateSerialNumber(rentalTypeId, newSerialNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(RorRshShopTrans, ItemId):
                this.itemIdModified();
                break;

            case fieldNum(RorRshShopTrans, InventDimId):
                this.createSerialNum();
                break;

            case fieldNum(RorRshShopTrans, Qty):
            case fieldNum(RorRshShopTrans, SalesPrice):
            case fieldNum(RorRshShopTrans, LineDisc):
            case fieldNum(RorRshShopTrans, LinePercent):
                this.calculatePrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetHeader</Name>
				<Source><![CDATA[
    public RORRentalHeader RORGetHeader(boolean _forUpdate = false)
    {
        return this.shopCardTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLineBuffer</Name>
				<Source><![CDATA[
    public RorRshShopTrans RORLineBuffer()
    {
        RorRshShopTrans shopTrans;
        return shopTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static RorRshShopTrans findRecId(RecId       _recId,
                                            boolean     _update = false)
    {
        RorRshShopTrans shopTrans;

        if (_recId)
        {
            if (_update)
            {
                shopTrans.selectForUpdate(_update);
            }

            select shopTrans
                where shopTrans.RecId == _recId;
        }

        return shopTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    public AmountCur calcLineAmount(Qty _qty = this.Qty)
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice</Name>
				<Source><![CDATA[
    public void calculatePrice()
    {
        RORRentalNetAmount      lineAmount = this.Qty * this.SalesPrice;
        RORRentalDiscPercent    discValue  = CurrencyExchangeHelper::amount(lineAmount * (this.LinePercent/100), this.CurrencyCode);
        this.LineAmount = lineAmount - discValue;
        this.RentalGrossAmount = lineAmount;

        if(!this.LineAmount)
        {
            this.RORRentalLine::RAGSetContractInfo(false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
         
        switch(_fieldIdToCheck)
        {
            case fieldNum(RorRshShopTrans, Qty):
                if (this.Qty <= 0)
                {
                    ret  = ret && checkFailed("@DNR:DNRInvalidDeliveryQty");
                }
                if(this.ItemId && this.TradeType == RORTradeType::Rental)
                {
                    BOBRentalType   rentalType = BOBRentalType::findFromItemId(this.ItemId);
                    
                    if(rentalType.Classification == BOBRentalTypeClassification::Serialized && this.Qty > 1)
                    {
                        ret = ret && checkFailed("@DNR:SerializeItemValidation");
                    }    
                }
                break;

            case fieldNum(RorRshShopTrans, OnRentDateTime):
                if (DateTimeUtil::date(this.OffRentDateTime) && this.OnRentDateTime >= this.OffRentDateTime)
                {
                    ret = ret && checkFailed(strFmt("@DNR6356", extendedTypeId2pname(extendedTypeNum(ROROnRentDateTime)), extendedTypeId2pname(extendedTypeNum(ROROffRentDateTime))));
                }
                else if (!DateTimeUtil::date(this.OffRentDateTime) && DateTimeUtil::date(this.ExpectedOffRentDateTime) && this.OnRentDateTime > this.ExpectedOffRentDateTime)
                {
                    ret = ret && checkFailed(strFmt("@DNR6356", extendedTypeId2pname(extendedTypeNum(ROROnRentDateTime)), extendedTypeId2pname(extendedTypeNum(RORExpectedOffRentDateTime))));
                }
                break;

            case fieldNum(RorRshShopTrans, OffRentDateTime):
                if (DateTimeUtil::date(this.OffRentDateTime) && this.OffRentDateTime <= this.OnRentDateTime)
                {
                    ret = ret && checkFailed(strFmt("@DNR6356", extendedTypeId2pname(extendedTypeNum(ROROnRentDateTime)), extendedTypeId2pname(extendedTypeNum(ROROffRentDateTime))));
                }
                else if (!DateTimeUtil::date(this.OffRentDateTime) && DateTimeUtil::date(this.ExpectedOffRentDateTime) && this.ExpectedOffRentDateTime < this.OnRentDateTime)
                {
                    ret = ret && checkFailed(strFmt("@DNR6356", extendedTypeId2pname(extendedTypeNum(ROROnRentDateTime)), extendedTypeId2pname(extendedTypeNum(RORExpectedOffRentDateTime))));
                }
                break;
            
            case fieldNum(RorRshShopTrans, ExpectedOffRentDateTime):
                if (!DateTimeUtil::date(this.OffRentDateTime) && DateTimeUtil::date(this.ExpectedOffRentDateTime) && this.ExpectedOffRentDateTime < this.OnRentDateTime)
                {
                    ret = ret && checkFailed(strFmt("@DNR6356", extendedTypeId2pname(extendedTypeNum(ROROnRentDateTime)), extendedTypeId2pname(extendedTypeNum(RORExpectedOffRentDateTime))));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRentalParameters</Name>
				<Source><![CDATA[
    public void setRentalParameters()
    {
        CustTable     custTable = CustTable::find(this.CustAccount);
        RORParameters parameters = RORParameters::find();

        this.InvoiceProfileId  = custTable.INVInvoiceProfileId ? custTable.INVInvoiceProfileId : parameters.DNRRSHDefaultInvoiceProfileId;
        this.CalendarId        = custTable.RORRentalCalendarId ? custTable.RORRentalCalendarId : parameters.DNRRSHDefaultRentalCalendar;
        this.PriceTimeUnit     = parameters.DNRRSHDefaultUnitForPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discType</Name>
				<Source><![CDATA[
    private LineMultiLn discType()
    {
        return SalesParameters::find().Disc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    public DiscAmount discAmount()
    {
        return PriceDisc::discAmount(this.discType(), this.LineDisc, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    public DiscPct discPercent()
    {
        return PriceDisc::discPercent(this.discType(), this.LinePercent, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    public void initFromPriceDisc(
        PriceDisc_Price             _priceDisc,
        PriceDiscPolicyCheckPolicy  _checkPolicy=null,
        boolean                     _initDateFields = true)
    {
        this.SalesPrice = _priceDisc.price()/this.Qty;
        
        if (this.TradeType == RORTradeType::SalesPurch)
        {
            this.RentalGrossAmount = _priceDisc.price();
        }
        this.PriceUnit          = _priceDisc.priceUnit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR:RentalShopTransDevDocu</DeveloperDocumentation>
	<FormRef>RorRshShopTrans</FormRef>
	<Label>@DNR:RentalShopTrans</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ShopCardId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ShopCardIdIdx</ClusteredIndex>
	<PrimaryIndex>TransIdIdx</PrimaryIndex>
	<ReplacementKey>TransIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShopCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalGrossAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShopCardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TradeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>wMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnRentDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedOffRentDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffRentDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnQuality</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProcessed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RORAllowQtyEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RORIsPriceNet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalGrossAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS104938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RLE</Name>
			<Label>@DNR7460</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KitComponentType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Rental</Name>
			<Label>@DNR975</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceTimeUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShopCardId</Name>
			<ExtendedDataType>RorRshShopCardId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSerialId</Name>
			<ConfigurationKey>DNRDeletedObjects01_2020</ConfigurationKey>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<ConfigurationKey>DNRDeletedObjects01_2020</ConfigurationKey>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<EnumType>RorRshShopTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TradeType</Name>
			<EnumType>RORTradeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnQuality</Name>
			<EnumType>RorRshReturnQuality</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProcessed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RorRshIsProcessed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpectedOffRentDateTime</Name>
			<ExtendedDataType>RORExpectedOffRentDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>OnRentDateTime</Name>
			<ExtendedDataType>ROROnRentDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>OffRentDateTime</Name>
			<ExtendedDataType>ROROffRentDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RorRshShopTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RorRshShopTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>wMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>DNRDeletedObjects01_2020</ConfigurationKey>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@DNR6202</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RentalGrossAmount</Name>
			<ExtendedDataType>RORRentalGrossAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalTypeId</Name>
			<ExtendedDataType>BOBRentalTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPriceFixed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORIsPriceFixed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KitComponentType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RORKitComponentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORCalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS302</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceProfileId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>INVInvoiceProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PriceTimeUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORPriceTimeUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RORIsPriceNet</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORIsPriceNet</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RORAllowQtyEdit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORAllowQtyEdit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
			<HelpText>@SYS3472</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Markup</Name>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
			<HelpText>@SYS16916</HelpText>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShopCardIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ShopCardId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsProcessed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShopCardItemSrIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShopCardId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSerialId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsProcessed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TradeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RORRentalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AllowQtyEdit</MapField>
					<MapFieldTo>RORAllowQtyEdit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmendmentExchangeType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOBRentalTypeId</MapField>
					<MapFieldTo>RentalTypeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalendarId</MapField>
					<MapFieldTo>CalendarId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeaderId</MapField>
					<MapFieldTo>ShopCardId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>INVInvoiceProfileId</MapField>
					<MapFieldTo>InvoiceProfileId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>INVRateMultiplierTier</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>INVRentalModeId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPriceFixed</MapField>
					<MapFieldTo>IsPriceFixed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPriceNet</MapField>
					<MapFieldTo>IsPriceFixed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>KitComponentType</MapField>
					<MapFieldTo>KitComponentType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentLineRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceTimeUnit</MapField>
					<MapFieldTo>PriceTimeUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecIdExchanged</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentalGrossAmount</MapField>
					<MapFieldTo>RentalGrossAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SuppItemTableRecid</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TradeType</MapField>
					<MapFieldTo>TradeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WPPWorkOrderTemplateId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>ShopCardId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ShopCard</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RorRshShopCardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShopCardId</Name>
					<Field>ShopCardId</Field>
					<RelatedField>ShopCardId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Price unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Line unit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceTimeUnit</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Rental rate code</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Time unit</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceTimeUnit</Name>
					<Field>PriceTimeUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>UnitOfMeasureClass</Name>
					<RelatedField>UnitOfMeasureClass</RelatedField>
					<ValueStr>UnitOfMeasureClass::Time</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>