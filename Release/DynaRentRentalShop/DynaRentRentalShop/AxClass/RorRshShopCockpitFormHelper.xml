<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RorRshShopCockpitFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RorRshShopCockpitFormHelper implements SysSaveable
{
    ProjId projId;
    FormRun formRun;
    FormDataSource rentalShopCardTableDS;
    FormDataSource rentalShopTransDS;
    boolean isCounterRentalActive = RORParameters::find().RshCounterRentalActive;
    
    #define.CurrentVersion(1)
    #localMacro.CurrentList
        projId
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RorRshShopCockpitFormHelper construct(FormRun _formRun)
    {
        RorRshShopCockpitFormHelper ret = new RorRshShopCockpitFormHelper();
        ret.initFormRun(_formRun);
        
        xSysLastValue::getLast(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalShopTransDSActive</Name>
				<Source><![CDATA[
    public void rentalShopTransDSActive()
    {
        if (rentalShopTransDS)
        {
            RorRshShopTrans rentalShopTrans = rentalShopTransDS.cursor();
            boolean canModifyTrans = !rentalShopTrans.IsProcessed;

            rentalShopTransDS.allowEdit(canModifyTrans);
            rentalShopTransDS.allowDelete(canModifyTrans);

            this.enableRelatedInformation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRelatedInformation</Name>
				<Source><![CDATA[
    private void enableRelatedInformation()
    {
        RorRshShopTrans rentalShopTrans = rentalShopTransDS.cursor();
        boolean showRentalOrderLine = rentalShopTrans.IsProcessed && (isCounterRentalActive || rentalShopTrans.TradeType == RORTradeType::Rental);
        boolean showQualityInspection = rentalShopTrans.IsProcessed && rentalShopTrans.ReturnQuality != RorRshReturnQuality::None && rentalShopTrans.TradeType == RORTradeType::Rental;
        boolean showDelivery = rentalShopTrans.IsProcessed && rentalShopTrans.TransType == RorRshShopTransType::Return;
        boolean showReturn = rentalShopTrans.IsProcessed && rentalShopTrans.TransType == RorRshShopTransType::Delivery;
        boolean showItemJournal = !isCounterRentalActive && rentalShopTrans.IsProcessed && rentalShopTrans.TradeType == RORTradeType::SalesPurch;

        formRun.control(formRun.controlId(formControlStr(RorRshShopCockpit, RORRentalOrderLineListPage))).enabled(showRentalOrderLine);
        if (isCounterRentalActive)
        {
            formRun.control(formRun.controlId(formControlStr(RorRshShopCockpit, RorRshShopProjItemMainTable))).visible(false);
        }
        else
        {
            formRun.control(formRun.controlId(formControlStr(RorRshShopCockpit, RorRshShopProjItemMainTable))).enabled(showItemJournal);
        }
        formRun.control(formRun.controlId(formControlStr(RorRshShopCockpit, RorRshShopTransDelivery))).enabled(showDelivery);
        formRun.control(formRun.controlId(formControlStr(RorRshShopCockpit, RorRshShopTransReturn))).enabled(showReturn);        
        formRun.control(formRun.controlId(formControlStr(RorRshShopCockpit, RorRshShopQualityInspectionMainTable))).enabled(showQualityInspection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormRun</Name>
				<Source><![CDATA[
    private void initFormRun(FormRun _formRun)
    {
        formRun = _formRun;                
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFilter</Name>
				<Source><![CDATA[
    public void saveFilter()
    {
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSources</Name>
				<Source><![CDATA[
    public void initDataSources()
    {
        rentalShopCardTableDS = formRun.dataSource(formDataSourceStr(RorRshShopCockpit, RentalShopCardTable));
        rentalShopTransDS = formRun.dataSource(formDataSourceStr(RorRshShopCockpit, RentalShopTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRentalTransQuery</Name>
				<Source><![CDATA[
    public void executeRentalTransQuery(ProjId _projId, RorRshShopCardId _shopCardId)
    {
        QueryBuildDataSource rentalShopCardTableQBDS = rentalShopTransDS.query().dataSourceTable(tableNum(RorRshShopCardTable));

        QueryBuildRange qbrProjId = SysQuery::findOrCreateRange(rentalShopCardTableQBDS, fieldNum(RorRshShopCardTable, ProjId));
        QueryBuildRange qbrShopCardId = SysQuery::findOrCreateRange(rentalShopCardTableQBDS, fieldNum(RorRshShopCardTable, ShopCardId));

        if (qbrProjId)
        {
            qbrProjId.value(_projId ? _projId : SysQuery::valueUnlimited());
        }

        if (qbrShopCardId)
        {
            qbrShopCardId.value(_shopCardId ? _shopCardId : SysQuery::valueUnlimited());
        }                
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        // empty values when no SysLastValue record can be found in xSysLastValue.GetLast()
        projId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
    
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifierName lastValueElementName()
    {
        return classId2Name(classIdGet(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Class;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>