<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRSHTmpRetailProductsToAddTbl_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(TmpRetailProductsToAdd))]
public final class DNRRSHTmpRetailProductsToAddTbl_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DNRRSHFindTmpContractLine</Name>
				<Source><![CDATA[
    // Extension method .. begin

    /// <summary>
    /// Finds default agreement line for rental type and company currency 
    /// </summary>
    /// <param name = "_rentalTypeId">Rental type</param>
    /// <returns></returns>
    private RAGTmpContractLine DNRRSHFindTmpContractLine(BOBRentalTypeId _rentalTypeId)
    {
        RAGContractDataParm parmData;
    
        parmData.BOBRentalTypeId = _rentalTypeId;
        parmData.CurrencyCode    = Ledger::accountingCurrency();
        parmData.TransDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        parmData.populate();

        RAGContractData contractData = new RAGContractData();

        contractData.parmDataParm(parmData);
        contractData.populateContractLines();

        RAGTmpContractLine  contractLine = contractData.getContractLineTmpRecord();
        return contractLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRRSHGetRentalPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds Rental amount from contract line
    /// </summary>
    /// <returns>Rental agreement gross amount</returns>
    private RAGGrossPrice DNRRSHGetRentalPrice()
    {
        BOBRentalTypeId rentalTypeId = this.DNRRSHRentalTypeId();
        TransDate       transDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
               
        if (RAGUtil::mustApplyRentalAgreements(rentalTypeId))
        {
            RAGTmpContractLine  contractLine = this.DNRRSHFindTmpContractLine(rentalTypeId);

            if(contractLine.GrossPrice_Price)
            {
                return UnitOfMeasureConverter::convert(contractLine.GrossPrice_Price, 
                                                       RORParameters::find().DNRRSHDefaultUnitForPrice, 
                                                       contractLine.GrossPrice_TimeUnit, 
                                                       NoYes::No);
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRRSHRentalTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds Rental type id
    /// </summary>
    /// <returns>Rental type id</returns>
    private BOBRentalTypeId DNRRSHRentalTypeId()
    {
        EcoResProduct product;

        select firstonly BOBRentalTypeId from product
        where product.RecId == this.EcoResProduct;

        return product.BOBRentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRRSHAvailablePhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to calculate available phisycal rental quantity
    /// </summary>
    /// <returns> Available physical rental quantity</returns>
    private BOBRentalQtyAvailPhysical DNRRSHAvailablePhysical()
    {
        BOBRentalInventOnHand  rentalOnHand = new BOBRentalInventOnHand();
        BOBRentalTypeId        rentalTypeId = this.DNRRSHRentalTypeId();
        InventLocationId       inventLocationId = RORParameters::find().DNRRSHDefaultWarehouse;
        TransDateTime          dateTime = DateTimeUtil::getSystemDateTime();
        
        return rentalOnHand.availPhysicalQty(rentalTypeId, inventLocationId, dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    // Coc wrapper ..
    public void insert()
    {
        DNRRSHRetailAddProductsDisposeContext disposalContext = DNRRSHRetailAddProductsDisposeContext::current();
        
        if (disposalContext && disposalContext.parmShowPriceAndAvailability())
        {
            InventDim        inventDim = this.inventDim();
            InventLocationId inventLocationId = disposalContext.parmInventLocationId();

            if (inventLocationId)
            {
                inventDim.InventLocationId = inventLocationId;
                inventDim.InventSiteId = InventLocation::find(inventLocationId).InventSiteId;
                inventDim = InventDim::findOrCreate(inventDim);

                this.InventDim              = inventDim.inventDimId;
                this.DNRRSHAvailPhysicalQty = this.DNRRSHAvailablePhysical();
                this.DNRRSHBasePrice        = this.DNRRSHGetRentalPrice();
            }
        }

        next insert();

        if (disposalContext)
        {
            disposalContext.dispose();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>