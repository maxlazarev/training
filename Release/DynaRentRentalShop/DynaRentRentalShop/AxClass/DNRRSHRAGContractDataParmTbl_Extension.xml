<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRSHRAGContractDataParmTbl_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Table extension for 'RAGContractDataParm'
/// </summary>
[ExtensionOf(tablestr(RAGContractDataParm))]
public final class DNRRSHRAGContractDataParmTbl_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromRentalShopTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initilize value from Rental shop trans
    /// </summary>
    /// <param name = "_rentalShopTrans">Rental shop trans buffer</param>
    public void initFromRentalShopTrans(RorRshShopTrans _rentalShopTrans)
    {
        RAGParameters       parameters = RAGParameters::find();
        RorRshShopCardTable shopCardTable = _rentalShopTrans.shopCardTable();
            
        if(parameters.RORLineDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        this.initFromRentalShopCard(shopCardTable);
        this.CurrencyCode        = _rentalShopTrans.CurrencyCode;
        this.BOBRentalTypeId     = _rentalShopTrans.RentalTypeId;
        this.INVInvoiceProfileId = _rentalShopTrans.InvoiceProfileId;
        
        Timezone timeZone;

        if (parameters.RORLineDateTimeType == RORRentalDateTimeType::OnRent)
        {
            timeZone = DateTimeUtil::getOriginatingTimeZone(_rentalShopTrans.OnRentDateTime);
            this.TransDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_rentalShopTrans.OnRentDateTime, timeZone));
        }
        else if (parameters.RORLineDateTimeType == RORRentalDateTimeType::OffRent)
        {
            timeZone = DateTimeUtil::getOriginatingTimeZone(_rentalShopTrans.OffRentDateTime);
            this.TransDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_rentalShopTrans.OffRentDateTime, timeZone));
        }
        else
        {
            throw error("@DNR:RentalShopOnOffRentDateLineError");
        }
        
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRentalShopCard</Name>
				<Source><![CDATA[
    public void initFromRentalShopCard(RorRshShopCardTable _rentalShopCard)
    {
        RAGParameters  parameters = RAGParameters::find();
        RORParameters  rorParameters = RORParameters::find();
        smmBusRelTable busRelTable = smmBusRelTable::findCust(_rentalShopCard.CustAccount);
        CustTable      custTable = CustTable::find(_rentalShopCard.CustAccount);
            
        if (parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
            
        this.ContractType      = RAGContractType::BusinessRelation;
        this.ContractRefModule = RAGContractRefModule::Sales;
        this.RentalSubRental   = RAGRentalSubRental::Rental;
        this.CurrencyCode      = busRelTable.Currency;
        this.BusRelAccount     = busRelTable.BusRelAccount;
        this.BusRelGroupId     = busRelTable.RAGBusRelGroupId;
        this.RentalHeaderId    = _rentalShopCard.ShopCardId;
        
        this.INVInvoiceProfileId = custTable.INVInvoiceProfileId ? custTable.INVInvoiceProfileId : rorParameters.DNRRSHDefaultInvoiceProfileId;

        if (parameters.RORLineDateTimeType == RORRentalDateTimeType::OnRent)
        {
            this.TransDate = DateTimeUtil::date(_rentalShopCard.FromDateTime);
        }
        else if (parameters.RORLineDateTimeType == RORRentalDateTimeType::OffRent)
        {
            this.TransDate = DateTimeUtil::date(_rentalShopCard.ToDateTime);
        }
        else
        {
            throw error("@DNR:RentalShopOnOffRentDateHeaderError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRRSHEvent_initFromCommon_Delegate_Handler</Name>
				<Source><![CDATA[
    /// <summary>                 
    /// delegate event for method to initilize agreement line
    /// </summary>
    /// <param name="_contractDataParm"></param>
    /// <param name="_caller"></param>
    /// <param name="_result"></param>
    [SubscribesTo(tableStr(RAGContractDataParm), staticDelegateStr(RAGContractDataParm, initFromCommon_Delegate))]
    public static void DNRRSHEvent_initFromCommon_Delegate_Handler(RAGContractDataParm _contractDataParm, Common _caller, EventHandlerResult _result)
    {
        if (_caller.TableId == tableNum(RorRshShopTrans))
        {
            RorRshShopTrans     rentalShopTrans = _caller;

            _contractDataParm.initFromRentalShopTrans(rentalShopTrans);
            _result.result(true);
        }
        else if (_caller.TableId == tableNum(RorRshShopCardTable))
        {
            RorRshShopCardTable     rentalShopTable = _caller;

            _contractDataParm.initFromRentalShopCard(rentalShopTable);
            _result.result(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>