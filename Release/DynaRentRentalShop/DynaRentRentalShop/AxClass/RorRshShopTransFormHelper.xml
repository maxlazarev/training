<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RorRshShopTransFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RorRshShopTransFormHelper
{
    FormRun formRun;
    FormDataSource rentalShopCardTableDS;
    FormDataSource rentalShopTransDS;
    RorRshShopTrans callerRentalShopTrans;
    boolean isCounterRentalActive = RORParameters::find().RshCounterRentalActive;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RorRshShopTransFormHelper construct(FormRun _formRun)
    {
        RorRshShopTransFormHelper ret = new RorRshShopTransFormHelper();
        ret.initFormRun(_formRun);
            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalShopTransDSActive</Name>
				<Source><![CDATA[
    public void rentalShopTransDSActive()
    {
        if (rentalShopTransDS)
        {
            RorRshShopTrans rentalShopTrans = rentalShopTransDS.cursor();
            boolean canModifyTrans = !rentalShopTrans.IsProcessed;

            rentalShopTransDS.allowEdit(canModifyTrans);
            rentalShopTransDS.allowDelete(canModifyTrans);

            this.enableRelatedInformation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRelatedInformation</Name>
				<Source><![CDATA[
    private void enableRelatedInformation()
    {
        RorRshShopTrans rentalShopTrans = rentalShopTransDS.cursor();
        boolean showRentalOrderLine = rentalShopTrans.IsProcessed && (isCounterRentalActive || rentalShopTrans.TradeType == RORTradeType::Rental);
        boolean showQualityInspection = rentalShopTrans.IsProcessed && rentalShopTrans.ReturnQuality != RorRshReturnQuality::None && rentalShopTrans.TradeType == RORTradeType::Rental;
        boolean showDelivery = rentalShopTrans.IsProcessed && rentalShopTrans.TransType == RorRshShopTransType::Return;
        boolean showReturn = rentalShopTrans.IsProcessed && rentalShopTrans.TransType == RorRshShopTransType::Delivery;
        boolean showItemJournal = !isCounterRentalActive && rentalShopTrans.IsProcessed && rentalShopTrans.TradeType == RORTradeType::SalesPurch;

        formRun.control(formRun.controlId(formControlStr(RorRshShopTrans, RORRentalOrderLineListPage))).enabled(showRentalOrderLine);
        if (isCounterRentalActive)
        {
            formRun.control(formRun.controlId(formControlStr(RorRshShopTrans, RorRshShopProjItemMainTable))).visible(false);
        }
        else
        {
            formRun.control(formRun.controlId(formControlStr(RorRshShopTrans, RorRshShopProjItemMainTable))).enabled(showItemJournal);
        }
        formRun.control(formRun.controlId(formControlStr(RorRshShopTrans, RorRshShopTransDelivery))).enabled(showDelivery);
        formRun.control(formRun.controlId(formControlStr(RorRshShopTrans, RorRshShopTransReturn))).enabled(showReturn);
        formRun.control(formRun.controlId(formControlStr(RorRshShopTrans, RorRshShopQualityInspectionMainTable))).enabled(showQualityInspection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormRun</Name>
				<Source><![CDATA[
    private void initFormRun(FormRun _formRun)
    {
        formRun = _formRun;  
             
        if (formRun.args() && formRun.args().dataset() == tableNum(RorRshShopTrans))
        {
            callerRentalShopTrans = formRun.args().record();
        }             
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSources</Name>
				<Source><![CDATA[
    public void initDataSources()
    {
        rentalShopCardTableDS = formRun.dataSource(formDataSourceStr(RorRshShopCockpit, RentalShopCardTable));
        rentalShopTransDS = formRun.dataSource(formDataSourceStr(RorRshShopCockpit, RentalShopTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRentalTransQuery</Name>
				<Source><![CDATA[
    public void executeRentalTransQuery(ProjId _projId, RorRshShopCardId _shopCardId)
    {
        QueryBuildDataSource rentalShopCardTableQBDS = rentalShopTransDS.query().dataSourceTable(tableNum(RorRshShopCardTable));

        QueryBuildRange qbrProjId = SysQuery::findOrCreateRange(rentalShopCardTableQBDS, fieldNum(RorRshShopCardTable, ProjId));
        QueryBuildRange qbrShopCardId = SysQuery::findOrCreateRange(rentalShopCardTableQBDS, fieldNum(RorRshShopCardTable, ShopCardId));

        if (qbrProjId)
        {
            qbrProjId.value(_projId ? _projId : SysQuery::valueUnlimited());
        }

        if (qbrShopCardId)
        {
            qbrShopCardId.value(_shopCardId ? _shopCardId : SysQuery::valueUnlimited());
        }

        if (callerRentalShopTrans)
        {
            QueryBuildDataSource rentalShopTransQBDS = rentalShopTransDS.query().dataSourceTable(tableNum(RorRshShopTrans));
            QueryBuildDataSource rentalShopTransReferenceQBDS = rentalShopTransDS.query().dataSourceTable(tableNum(RorRshShopTransReference));
            
            if (!rentalShopTransReferenceQBDS)
            {
                rentalShopTransReferenceQBDS = rentalShopTransQBDS.addDataSource(tableNum(RorRshShopTransReference));
            }

            if (callerRentalShopTrans.TransType == RorRshShopTransType::Return)
            {
                rentalShopTransReferenceQBDS.addLink(fieldNum(RorRshShopTrans, TransId), fieldNum(RorRshShopTransReference, DeliveryTransId));
                rentalShopTransReferenceQBDS.joinMode(JoinMode::InnerJoin);

                QueryBuildRange qbrTransId = SysQuery::findOrCreateRange(rentalShopTransReferenceQBDS, fieldNum(RorRshShopTransReference, ReturnTransId));
                qbrTransId.value(callerRentalShopTrans.TransId);
            }
            else if (callerRentalShopTrans.TransType == RorRshShopTransType::Delivery)
            {
                rentalShopTransReferenceQBDS.addLink(fieldNum(RorRshShopTrans, TransId), fieldNum(RorRshShopTransReference, ReturnTransId));
                rentalShopTransReferenceQBDS.joinMode(JoinMode::InnerJoin);

                QueryBuildRange qbrTransId = SysQuery::findOrCreateRange(rentalShopTransReferenceQBDS, fieldNum(RorRshShopTransReference, DeliveryTransId));
                qbrTransId.value(callerRentalShopTrans.TransId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>