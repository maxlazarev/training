<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RorRshShopTransInputController_Return</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RorRshShopTransInputController_Return extends RorRshShopTransInputController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRentalShopTrans</Name>
				<Source><![CDATA[
    protected void createRentalShopTrans(RorRshTmpShopTrans _tmpRentalShopTrans)
    {
        Set returnQtySet = new Set(Types::Enum);        
        
        if (_tmpRentalShopTrans.QtyReturnDamaged)
        {
            returnQtySet.add(RorRshReturnQuality::Damaged);
        }
        
        if (_tmpRentalShopTrans.QtyReturnGood)
        {
            returnQtySet.add(RorRshReturnQuality::Good);
        }

        if (_tmpRentalShopTrans.QtyReturnScrapped)
        {
            returnQtySet.add(RorRshReturnQuality::Scrapped);
        }

        if (_tmpRentalShopTrans.QtyReturnSurplus)
        {
            returnQtySet.add(RorRshReturnQuality::Surplus);
        }

        this.createRentalShopTransForSet(returnQtySet, _tmpRentalShopTrans);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRentalShopTransForSet</Name>
				<Source><![CDATA[
    private void createRentalShopTransForSet(Set _returnQtySet, RorRshTmpShopTrans _tmpRentalShopTrans)
    {
        if (_returnQtySet)
        {
            SetEnumerator setEnumerator = _returnQtySet.getEnumerator();
            RorRshShopTransId parentTransId;

            while (setEnumerator.moveNext())
            {
                RorRshReturnQuality returnQuality = setEnumerator.current();

                RorRshShopTrans rentalShopTrans;
                rentalShopTrans.initValue();

                if (!parentTransId)
                {
                    // For bulk return use transId of first transaction in a set as a parent gathering group of return transactions
                    // that should be linked to the same rental line and quality inspection journal, if possible.
                    parentTransId = rentalShopTrans.TransId;
                }
                rentalShopTrans.ParentTransId = parentTransId;
                rentalShopTrans.initReturnTransFromTmp(_tmpRentalShopTrans, returnQuality);

                rentalShopTrans.RecId = systemSequence.reserveValues(1, tableNum(RorRshShopTrans));
                // One return input can result in few reental shop transactions. We need to copy the same log to all of them.
                RorRshShopTransLog::copyRentalShopTransLog(_tmpRentalShopTrans.TableId, _tmpRentalShopTrans.RecId, rentalShopTrans.TableId, rentalShopTrans.RecId);

                rentalShopTransInsertList.add(rentalShopTrans);

                insertedRecordsCount++;
            }

            RorRshShopTransLog::deleteLog(_tmpRentalShopTrans.TableId, _tmpRentalShopTrans.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>