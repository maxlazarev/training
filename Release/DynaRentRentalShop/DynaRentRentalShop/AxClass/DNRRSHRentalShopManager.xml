<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRSHRentalShopManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Rental shop manager for 'Rental shop 2.0'
/// </summary>
class DNRRSHRentalShopManager
{
    TmpRetailProductsToAdd tmpInventTable;
    CustAccount            custAccount; 
    RorRshShopCardId       cardId;
    InventLocationId       inventLocationId;
    DNRRSHFromDateTime     fromDateTime;
    DNRRSHToDateTime       toDateTime;
    Args                   callerArgs;
    boolean                canCreateShopCard;
    boolean                canCreateShopCardTransaction;
    boolean                isAddProducts;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTmpInventTable</Name>
				<Source><![CDATA[
    public TmpRetailProductsToAdd parmTmpInventTable(TmpRetailProductsToAdd _tmpInventTable = tmpInventTable)
    {
        tmpInventTable = _tmpInventTable;
        return  tmpInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = callerArgs)
    {
        callerArgs  = _args;
        return callerArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount  parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;
        return  custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShopCardId</Name>
				<Source><![CDATA[
    public RorRshShopCardId  parmShopCardId(RorRshShopCardId _cardId = cardId)
    {
        cardId = _cardId;
        return  cardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateTime</Name>
				<Source><![CDATA[
    public DNRRSHFromDateTime parmFromDateTime(DNRRSHFromDateTime _fromDateTime = fromDateTime)
    {
        fromDateTime = _fromDateTime;
        return  fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRentalShopInventLocation</Name>
				<Source><![CDATA[
    private void setRentalShopInventLocation()
    {
        RorRshShopCardTable shopCardTable;

        select LocationId from shopCardTable
        where shopCardTable.ShopCardId == cardId;      
        
        inventLocationId = shopCardTable.LocationId ? shopCardTable.LocationId : RorRshShopCardTable::getRentalCounterInventLocationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalShopInventLocation</Name>
				<Source><![CDATA[
    public InventLocationId getRentalShopInventLocation()
    {
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanCreateShopCard</Name>
				<Source><![CDATA[
    public boolean parmCanCreateShopCard(boolean    _canCreateShopCard = canCreateShopCard)
    {
        canCreateShopCard = _canCreateShopCard;
        return canCreateShopCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAddProducts</Name>
				<Source><![CDATA[
    public boolean parmIsAddProducts(boolean    _isAddProducts = isAddProducts)
    {
        isAddProducts = _isAddProducts;
        return isAddProducts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateShopCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// If shop card can be created
    /// </summary>
    /// <returns>Value of <c>canCreateShopCard</c> variable</returns>
    public boolean canCreateShopCard()
    {
        return canCreateShopCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateShopCardTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// If shop card transaction can be created
    /// </summary>
    /// <returns>Value of <c>canCreateShopCardTransaction</c> variable</returns>
    public boolean canCreateShopCardTransactions()
    {
        return canCreateShopCardTransaction && tmpInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateShopCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or create rental shop card
    /// </summary>
    /// <returns>Rental shop card table's buffer</returns>
    public RorRshShopCardTable  findOrCreateShopCard()
    {
        RorRshShopCardTable     shopCardTable;

        if(this.canCreateShopCard())
        {
            if(cardId)
            {
                select firstonly shopCardTable
                where shopCardTable.ShopCardId == cardId;
            }

            if(!shopCardTable)
            {
                shopCardTable.clear();
                shopCardTable.initValue();
                cardId                      = shopCardTable.ShopCardId;
                shopCardTable.CustAccount   = custAccount;
                shopCardTable.FromDateTime  = fromDateTime;
                shopCardTable.LocationId    = inventLocationId;
                shopCardTable.SiteId        = InventLocation::find(inventLocationId).InventSiteId;
                shopCardTable.FromDate      = DateTimeUtil::date(shopCardTable.FromDateTime);
                shopCardTable.Active        = NoYes::Yes;
                shopCardTable.RentalShopType= DNRRSHRentalShopType::Customer;

                if(shopCardTable.validateWrite())
                {
                    shopCardTable.insert();
                }
                else
                {
                    throw Error ("@DNR:RentalShopCardValidationError");
                }
            }
        }
        return  shopCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShopCardTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates shop card transaction
    /// </summary>
    public  void createShopCardTransactions()
    {
        RorRshShopTrans         shopCardTrans;
        RecordInsertList        insertListTrans = new RecordInsertList(tableNum(RorRshShopTrans));

        if(this.canCreateShopCardTransactions())
        {
            while select tmpInventTable
                where tmpInventTable.Quantity > 0
            {
                BOBRentalType   rentalType = BOBRentalType::findFromItemId(tmpInventTable.ItemId);
                if(rentalType)
                {
                    if(rentalType.Classification == BOBRentalTypeClassification::Serialized)
                    {
                        for(Counter qtyCounter = 1; qtyCounter <= tmpInventTable.Quantity; qtyCounter++)
                        {
                            shopCardTrans.RentalTypeId = rentalType.RentalTypeId;
                            shopCardTrans = this.createTrans(tmpInventTable.ItemId, 1, true);
                            if(shopCardTrans.validateWrite())
                            {
                                insertListTrans.add(shopCardTrans);
                            }
                        }
                    }
                    else if(rentalType.Classification == BOBRentalTypeClassification::Bulk)
                    {
                        shopCardTrans = this.createTrans(tmpInventTable.ItemId, tmpInventTable.Quantity, true);
                        if(shopCardTrans.validateWrite())
                        {
                            insertListTrans.add(shopCardTrans);
                        }
                    }
                }
                else
                {
                    shopCardTrans = this.createTrans(tmpInventTable.ItemId, tmpInventTable.Quantity,  false);
                    if(shopCardTrans.validateWrite())
                    {
                        insertListTrans.add(shopCardTrans);
                    }
                }
            }
            insertListTrans.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    private RorRshShopTrans createTrans(ItemId  _itemId, Qty _qty, boolean _isRentalItem)
    {
        RorRshShopTrans     shopCardTrans;
        RorRshShopCardTable shopCardTable = RorRshShopCardTable::find(cardId); 

        shopCardTrans.initValue();
        shopCardTrans.initFromRentalShopCard(shopCardTable);
        shopCardTrans.ParentTransId = shopCardTrans.TransId;
        shopCardTrans.ItemId = _itemId;
        shopCardTrans.TradeType = _isRentalItem ? RORTradeType::Rental : RORTradeType::SalesPurch;
        shopCardTrans.TransType = RorRshShopTransType::Delivery;
        
        if(_isRentalItem)
        {
            shopCardTrans.modifiedField(fieldNum(RorRshShopTrans, ItemId));
        }

        shopCardTrans.Qty = _qty;
        shopCardTrans.setRentalParameters();

        return shopCardTrans;     
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and open rental shop details
    /// </summary>
    public void run()
    {
        try 
        {
            boolean isOpenRentalShopCartDetails;

            this.setRentalShopInventLocation();

            if (DNRIsUserInteractionSession() && isAddProducts)
            {
                this.addAndSearchProducts();
            }

            this.findOrCreateShopCard();
            this.createShopCardTransactions();  
            isOpenRentalShopCartDetails = DNRIsUserInteractionSession() && cardId && callerArgs.caller().name() != formStr(DNRRSHRentalShopDetails);
            
            if (isOpenRentalShopCartDetails)
            {
                this.openRentalShopDetails();
            }
            
            this.refreshCallerDateSource();
        }
        catch (Exception::Error)
        {
            throw error("@DNR:RentalShopCardError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerDateSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// refreshes caller datasource
    /// </summary>
    public void refreshCallerDateSource()
    {
        if (callerArgs.caller().name() == formStr(DNRRSHRentalShopDetails))
        {
            FormRun             formRun = callerArgs.caller();
            FormDataSource      formDS = formRun.dataSource();

            formDS.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAndSearchProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens 'Add products' form
    /// </summary>
    protected void addAndSearchProducts()
    {
        Args args = new Args();

        args.caller(callerArgs.caller());
        args.parmObject(this);
        args.name(formStr(RetailAddItems));
        args.menuItemName(menuItemActionStr(DNRRSHRentalShopManger_AddProducts));

        FormRun retailAddItems = classfactory.formRunClass(args);

        retailAddItems.init();
        retailAddItems.run();

        if (!retailAddItems.closed())
        {
            retailAddItems.wait();
        }

        if (retailAddItems.closedOk() && tmpInventTable)
        {
            canCreateShopCardTransaction = true;
            canCreateShopCard            = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRentalShopDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens 'Rental shop details' form
    /// </summary>
    public void openRentalShopDetails()
    {   
        FormRun rentalShopDetail;
        Args    args = new Args(this);

        args.formViewOption(FormViewOption::Details);
        args.name(formStr(DNRRSHRentalShopDetails));
        args.record(RorRshShopCardTable::find(cardId));
        rentalShopDetail = classFactory.formRunClass(args);
        rentalShopDetail.init();
        rentalShopDetail.run();

        if (!rentalShopDetail.closed())
        {
            rentalShopDetail.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args    _args)
    {
        DNRRSHRentalShopManager     rentalShopManager = new DNRRSHRentalShopManager();

        if(_args.parmEnumType() && _args.parmEnumType() == enumNum(DNRRSHRentalShopTaskType))
        {                                                                                    
            rentalShopManager.parmCanCreateShopCard(_args.parmEnum() == DNRRSHRentalShopTaskType::CreateRentalShop);
            rentalShopManager.parmIsAddProducts(_args.parmEnum() == DNRRSHRentalShopTaskType::AddProducts);
        }

        rentalShopManager.parmFromDateTime(DateTimeUtil::getSystemDateTime());

        if(_args.record())
        {
            Common              buffer = _args.record();
            CustAccount         custAcount;
            RorRshShopCardId    cardId;

            switch(buffer.Tableid)
            {
                case tableNum(DNRRSHCustTableView) :
                    DNRRSHCustTableView  customerView = buffer;
                    
                    custAcount = customerView.AccountNum;
                    break;
                
                case tableNum(CustTable) :
                    CustTable  customer = buffer;
                    
                    custAcount = customer.AccountNum;
                    break;
                    
                case tableNum(RorRshShopCardTable) :
                    RorRshShopCardTable  shopCardTable = _args.record();
                    
                    cardId = shopCardTable.ShopCardId;
                    break;

                default:
                    break;
            }

            rentalShopManager.parmShopCardId(cardId);
            rentalShopManager.parmCustAccount(custAcount);
        }

        rentalShopManager.parmArgs(_args);
        rentalShopManager.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>