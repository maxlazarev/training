<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RorRshShopTransInputController</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RorRshShopTransInputController
{
    RorRshTmpShopTrans tmpRentalShopTransOrig;
    RorRshTmpShopTrans tmpRentalShopTrans;
    RecordInsertList rentalShopTransInsertList;
    Counter insertedRecordsCount;
    FormRun callerFormRun;
    systemSequence systemSequence;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RorRshShopTransInputController construct(RorRshShopTransType _transType)
    {
        RorRshShopTransInputController ret;

        switch (_transType)
        {
            case RorRshShopTransType::Delivery :
                ret = new RorRshShopTransInputController_Delivery();
                break;

            case RorRshShopTransType::Return :
                ret = new RorRshShopTransInputController_Return();
                break;

            default :
                throw error(Error::missingParameter(null));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTrans</Name>
				<Source><![CDATA[
    public void setTmpTrans(RorRshTmpShopTrans _tmpRentalShopTrans)
    {
        tmpRentalShopTransOrig = _tmpRentalShopTrans;
        tmpRentalShopTrans.linkPhysicalTableInstance(_tmpRentalShopTrans);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>runConfirmationFromForm</Name>
				<Source><![CDATA[
    public void runConfirmationFromForm(FormRun _formRun, RorRshTmpShopTrans _tmpRentalShopTrans)
    {
        callerFormRun = _formRun;
        this.setTmpTrans(_tmpRentalShopTrans);
        this.runConfirmation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runConfirmation</Name>
				<Source><![CDATA[
    public void runConfirmation()
    {
        try 
        {
            insertedRecordsCount = 0;

            ttsbegin;
            rentalShopTransInsertList = new RecordInsertList(tableNum(RorRshShopTrans));
            
            systemSequence = new systemSequence();
            RorRshShopTransInputController::suspendRecIdAssignment();

            while select tmpRentalShopTrans
            {
                this.createRentalShopTrans(tmpRentalShopTrans);
            }                       

            rentalShopTransInsertList.insertDatabase();

            RorRshShopTransInputController::resumeRecIdAssignment();
            ttscommit;
            
            if (callerFormRun)
            {
                str formDSName = formDataSourceStr(RorRshShopDeliveryInput, tmpRentalShopTrans);
                delete_from tmpRentalShopTransOrig;
                callerFormRun.dataSource(formDSName).research();
            }
        }
        catch
        {
            RorRshShopTransInputController::abortRecIdLock();
            throw Error("@DNR:RentalShopTransNotCreated");
        }

        // In case everything went ok show info and clear a tmp table leaving a form open for next input.
        Info(strFmt("@DNR:RentalShopTransCreated", insertedRecordsCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRentalShopTrans</Name>
				<Source><![CDATA[
    abstract protected void createRentalShopTrans(RorRshTmpShopTrans _tmpRentalShopTrans) { }

]]></Source>
			</Method>
			<Method>
				<Name>suspendRecIdAssignment</Name>
				<Source><![CDATA[
    public static void suspendRecIdAssignment()
    {
        RorRshShopInputProcessContext context = RorRshShopInputProcessContext::instance();
        
        if (context.parmSuspendLevel() == 0)
        {
            appl.sysRecIdSequence().suspendRecIds(tableNum(RorRshShopTrans));
        }
        
        context.parmSuspendLevel(context.parmSuspendLevel() + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resumeRecIdAssignment</Name>
				<Source><![CDATA[
    public static void resumeRecIdAssignment()
    {
        RorRshShopInputProcessContext context = RorRshShopInputProcessContext::instance();
        
        if (context.parmSuspendLevel() == 1)
        {
            appl.sysRecIdSequence().removeRecIdSuspension(tableNum(RorRshShopTrans));
        }
        
        context.parmSuspendLevel(context.parmSuspendLevel() - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>abortRecIdLock</Name>
				<Source><![CDATA[
    public static void abortRecIdLock()
    {
        RorRshShopInputProcessContext context = RorRshShopInputProcessContext::instance();
        
        if (context.parmSuspendLevel() != 0)
        {
            RorRshShopInputProcessContext::instance().parmSuspendLevel(1);
            RorRshShopTransInputController::resumeRecIdAssignment();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>