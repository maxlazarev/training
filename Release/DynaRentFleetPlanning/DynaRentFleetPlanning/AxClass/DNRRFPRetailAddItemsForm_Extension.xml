<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRFPRetailAddItemsForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(RetailAddItems))]
final class DNRRFPRetailAddItemsForm_Extension
{
    public FormRun  callerFormRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        callerFormRun = this.args().caller();

        next init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.DNRRFPReturnRentalTypeId())
        {
            RORTradeType.selection(RORSalesRentalNone::Rental);
            RORTradeType.enabled(false);

            InventTable_ds.executeQuery();
            EcoResProduct_ds.executeQuery();
        }

        next run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        next closeOk();

        if (this.DNRRFPReturnRentalTypeId())
        {
            TmpRetailProductsToAdd          itemsSelected = this.TmpInventTable();
            EcoResProduct                   products;
            DNRRFPTmpRentalTypeAvailability tmpRentalTypes;
            BOBRentalType                   rentaltype;
            RecordInsertList                riListTmpRentalTypes = new RecordInsertList(tableNum(DNRRFPTmpRentalTypeAvailability), false, false, false, false, false, tmpRentalTypes);
            DNRRFPTmpRentalTypeAvailability tmpRentalTypesExisting = callerformRun.getRentalTypeRecords();
            Map                             rentaltypesExistingMap = new Map(Types::String, Types::Record);
            Set                             rentaltypesAddedSet = new Set(Types::String);

            //First load caller form's existing records into map
            while select tmpRentalTypesExisting
            {
                if (!rentaltypesExistingMap.exists(tmpRentalTypesExisting.RentalTypeId))
                {
                    rentaltypesExistingMap.insert(tmpRentalTypesExisting.RentalTypeId, tmpRentalTypesExisting);
                }
            }

            ttsbegin;

            //Delete all rental type records from caller form
            callerFormRun.clearExistingRentalTypeIdSelected();

            //Fill the ones selected on current form
            while select itemsSelected  //This is InMemory object so should not be joined with normal tables
            {
                select firstonly SearchName, BOBRentalTypeId from products
                where products.RecId           == itemsSelected.EcoResProduct
                &&    products.BOBRentalTypeId
                    join Description from rentaltype
                    where rentaltype.RentalTypeId == products.BOBRentalTypeId;
            
                if (products.BOBRentalTypeId && !rentaltypesExistingMap.exists(products.BOBRentalTypeId) && !rentaltypesAddedSet.in(products.BOBRentalTypeId))
                {
                    tmpRentalTypes.clear();
                    tmpRentalTypes.initValue();
                    tmpRentalTypes.RentalTypeId          = products.BOBRentalTypeId;
                    tmpRentalTypes.RentalTypeDescription = rentaltype.Description;
                    tmpRentalTypes.ProductId             = itemsSelected.EcoResProductName;
                    tmpRentalTypes.ItemId                = itemsSelected.ItemId;

                    riListTmpRentalTypes.add(tmpRentalTypes);

                    rentaltypesAddedSet.add(tmpRentalTypes.RentalTypeId);
                }
            }

            //Fill back the records from caller form
            if (rentaltypesExistingMap && !rentaltypesExistingMap.empty())
            {
                MapEnumerator rentaltypesExistingMapEnum = rentaltypesExistingMap.getEnumerator();

                while (rentaltypesExistingMapEnum.moveNext())
                {
                    DNRRFPTmpRentalTypeAvailability tmpRentalTypeAvailabilitySelect = rentaltypesExistingMapEnum.currentValue();

                    tmpRentalTypes.clear();
                    tmpRentalTypes.initValue();
                    tmpRentalTypes.RentalTypeId          = tmpRentalTypeAvailabilitySelect.RentalTypeId;
                    tmpRentalTypes.RentalTypeDescription = tmpRentalTypeAvailabilitySelect.RentalTypeDescription;
                    tmpRentalTypes.ProductId             = tmpRentalTypeAvailabilitySelect.ProductId;
                    tmpRentalTypes.ItemId                = tmpRentalTypeAvailabilitySelect.ItemId;

                    riListTmpRentalTypes.add(tmpRentalTypes);
                }
            }

            riListTmpRentalTypes.insertDatabase();

            ttscommit;

            callerFormRun.parmRentalTypeIdsSelected(tmpRentalTypes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRRFPReturnRentalTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checeks whether the caller is DNRRFPAssetAvailability form
    /// </summary>
    ///<returns>true if it is, otherwise false</returns>
    public boolean DNRRFPReturnRentalTypeId()
    {
        boolean ret;

        if (callerFormRun && callerFormRun.name() == formStr(DNRRFPAssetAvailability))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>