<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRFPAssetAvailabilityData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible to retrieve the business objects and the availability information for product availabilty
/// </summary>
class DNRRFPAssetAvailabilityData
{
    DNRRFPTmpBusinessObjects            tmpData;
    InventSiteId                        inventSiteId;
    InventLocationId                    inventLocationId;
    Set                                 inventLocationsSet, assetStatusWithoutBOSet, rentalTypeIdSet;
    Map                                 fieldIdLabelQtyMap, fieldIdLabelStrMap, rentalTypeAvailabilityMap, assetStatusRecordMap;
    TransDateTime                       calculationDateTime;
    DNRTmpIdValue                       tmpInventLocactionIds;
    LanguageId                          primaryLanguageId   = new xInfo().language();
    LanguageId                          secondaryLanguageId = CompanyInfo::languageId();
    DNRRFPTmpAssetAvailabilityTable     tmpAvailData;
    [SysObsolete("DNRDeletedObjects07_2021, this variable has been made obsolete. Use inventLocationIdSetStr instead.")]
    String255                           inventLocationIdsStr;
    DNRRFPWarehouseMemo                 inventLocationIdSetStr;
    DNRRFPTmpRentalTypeAvailability     tmpAssetAvailabilityTable, tmpAssetAvailabilityTableColorQty;
    DNRRFPTmpAssetExtraQty              tmpAssetExtraQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCalculationDateTime</Name>
				<Source><![CDATA[
    public TransDateTime parmCalculationDateTime(TransDateTime _calculationDateTime = calculationDateTime)
    {
        calculationDateTime = _calculationDateTime;
        return calculationDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method for
    /// </summary>
    /// <param name = "_inventLocationId"></param>
    /// <returns>Warehouse id</returns>
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryLanguageId</Name>
				<Source><![CDATA[
    public LanguageId parmPrimaryLanguageId(LanguageId _primaryLanguageId)
    {
        primaryLanguageId = _primaryLanguageId;
        return primaryLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSecondaryLanguageId</Name>
				<Source><![CDATA[
    public LanguageId parmSecondaryLanguageId(LanguageId _secondaryLanguageId)
    {
        secondaryLanguageId = _secondaryLanguageId;
        return secondaryLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLocationSet</Name>
				<Source><![CDATA[
    public Set getInventLocationSet()
    {
        return inventLocationsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIdsStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the invent locations.
    /// </summary>
    /// <param name = "_inventLocationsSet">Set</param>
    /// <returns>InventLocation Set</returns>
    /// 
    [SysObsolete("DNRDeletedObjects07_2021, this method has been made obsolete. Use parmInventLocationIdStr instead.")]
    public String255 parmInventLocationIdsStr(String255 _inventLocationIdsStr = inventLocationIdsStr)
    {
        inventLocationIdsStr = _inventLocationIdsStr;
        return inventLocationIdsStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIdSetStr</Name>
				<Source><![CDATA[
    public DNRRFPWarehouseMemo parmInventLocationIdSetStr(DNRRFPWarehouseMemo _inventLocationIdSetStr = inventLocationIdSetStr)
    {
        inventLocationIdSetStr = _inventLocationIdSetStr;
        return inventLocationIdSetStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRentalTypeIdata</Name>
				<Source><![CDATA[
    public void setRentalTypeIdata(DNRRFPTmpRentalTypeAvailability _tmpAssetAvailabilityTable)
    {
        tmpAssetAvailabilityTable = _tmpAssetAvailabilityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRentalTypeIdSet</Name>
				<Source><![CDATA[
    private void fillRentalTypeIdSet()
    {
        rentalTypeIdSet = new Set(Types::String);

        while select tmpAssetAvailabilityTable
        {
            if (!rentalTypeIdSet.in(tmpAssetAvailabilityTable.RentalTypeId))
            {
                rentalTypeIdSet.add(tmpAssetAvailabilityTable.RentalTypeId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdLabelStrMap</Name>
				<Source><![CDATA[
    public Map getFieldIdLabelStrMap()
    {
        if (!fieldIdLabelStrMap)
        {
            this.filldataFieldLabelQtyMap();
        }

        return fieldIdLabelStrMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tmpData buffer to the caller
    /// </summary>
    /// <returns>DNRRFPTmpBusinessObjects</returns>
    public DNRRFPTmpBusinessObjects getTmpData()
    {
        return tmpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAvailabilityData</Name>
				<Source><![CDATA[
    public DNRRFPTmpAssetAvailabilityTable getTmpAvailabilityData()
    {
        return tmpAvailData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAssetExtraQty</Name>
				<Source><![CDATA[
    public DNRRFPTmpAssetExtraQty getTmpAssetExtraQty()
    {
        return tmpAssetExtraQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRentalTypeAvailabilityColorQtyTable</Name>
				<Source><![CDATA[
    public DNRRFPTmpRentalTypeAvailability getTmpRentalTypeAvailabilityColorQtyTable()
    {
        return tmpAssetAvailabilityTableColorQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInventLocationsTable</Name>
				<Source><![CDATA[
    private void fillInventLocationsTable()
    {
        this.fillInventLocationsSet(inventLocationIdSetStr);

        delete_from tmpInventLocactionIds;

        RecordInsertList riListTmpInventLocations = new RecordInsertList(tableNum(DNRTmpIdValue), false, false, false, false, false, tmpInventLocactionIds);

        SetEnumerator inventLocSetEnum = inventLocationsSet.getEnumerator();

        while (inventLocSetEnum.moveNext())
        {
            tmpInventLocactionIds.clear();
            tmpInventLocactionIds.initValue();
            tmpInventLocactionIds.Num       = inventLocSetEnum.current();
            tmpInventLocactionIds.StrValue  = inventLocSetEnum.current();

            riListTmpInventLocations.add(tmpInventLocactionIds);
        }

        riListTmpInventLocations.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInventLocationsSet</Name>
				<Source><![CDATA[
    private void fillInventLocationsSet(DNRRFPWarehouseMemo _inventLocationIdSetStr)
    {
        inventLocationsSet = new Set(Types::String);

        if (_inventLocationIdSetStr)
        {
            container inventLocIdsCon = str2con(_inventLocationIdSetStr, ';');

            int counter = 1;
            int containerLen = conLen(inventLocIdsCon);

            while (counter <= containerLen)
            {
                InventLocationId inventLocIdCur = conPeek(inventLocIdsCon, counter);

                if (!inventLocationsSet.in(inventLocIdCur))
                {
                    inventLocationsSet.add(inventLocIdCur);
                }

                counter++;
            }
        }
        else
        {
            InventLocation inventLocation;

            while select InventLocationId from inventLocation
            {
                inventLocationsSet.add(inventLocation.InventLocationId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filldataFieldLabelQtyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the quantity and label maps
    /// </summary>
    /// <returns>Map object that contains field label and counter</returns>
    public Map filldataFieldLabelQtyMap()
    {
        DNRRFPAssetStatusAvailabilitySetup   assetStatusTable;
        DNRRFPAssetStatusLanguageTranslation assetLanguageTranslationPrimaryLanguage, assetLanguageTranslationSecondaryLanguage;
        int                                  counter = 1;

        fieldIdLabelQtyMap      = new Map(Types::String, Types::String);
        fieldIdLabelStrMap      = new Map(Types::String, Types::Container);
        assetStatusRecordMap    = new Map(Types::String, Types::Record);
        assetStatusWithoutBOSet = new Set(Types::String);

        while select assetStatusTable
        order by SequenceOnAvailForm, BusinessObjectAssigned
        where assetStatusTable.ShowOnAvailabilityForm
            outer join assetLanguageTranslationPrimaryLanguage                                              
            where assetLanguageTranslationPrimaryLanguage.AssetStatus == assetStatusTable.AssetStatus
            &&    assetLanguageTranslationPrimaryLanguage.LanguageId  == primaryLanguageId
            outer join assetLanguageTranslationSecondaryLanguage
            where assetLanguageTranslationSecondaryLanguage.AssetStatus == assetStatusTable.AssetStatus
            &&    assetLanguageTranslationSecondaryLanguage.LanguageId  == secondaryLanguageId
        {
            str fieldCounter = strFmt("Field%1", counter);

            if (!fieldIdLabelQtyMap.exists(assetStatusTable.AssetStatus))
            {
                fieldIdLabelQtyMap.insert(assetStatusTable.AssetStatus, fieldCounter);

                str labelStr = assetLanguageTranslationPrimaryLanguage.RecId ? assetLanguageTranslationPrimaryLanguage.LabelString : assetLanguageTranslationSecondaryLanguage.LabelString;
                str helpStr = assetLanguageTranslationPrimaryLanguage.RecId ? assetLanguageTranslationPrimaryLanguage.HelpTextString : assetLanguageTranslationSecondaryLanguage.HelpTextString;

                fieldIdLabelStrMap.insert(fieldCounter, [labelStr, helpStr]);
            }

            if (!assetStatusTable.BusinessObjectAssigned && !assetStatusWithoutBOSet.in(assetStatusTable.AssetStatus))
            {
                assetStatusWithoutBOSet.add(assetStatusTable.AssetStatus);
            }

            if (!assetStatusRecordMap.exists(assetStatusTable.AssetStatus))
            {
                assetStatusRecordMap.insert(assetStatusTable.AssetStatus, assetStatusTable);
            }

            counter++;
        }

        //Insert one extra record for Total field
        fieldIdLabelQtyMap.insert(literalStr(Total), literalStr(Total));   //Do not set labels here
        
        return fieldIdLabelQtyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the DNRRFPTmpBusinessObjects global buffer based on the supplied filters
    /// </summary>
    public void setTmpData()
    {
        //Fill rentalTypeIdSet object from the passed buffer
        this.fillRentalTypeIdSet();

        //Validate that the necessary info is provided
        if (!this.validateFilters())
        {
            throw Error("@DNR:MissingFilters"); //Filters are missing
        }

        //Fill inventLocaitonId tmp table
        this.fillInventLocationsTable();
                                                             
        //Fill fieldLabel map
        if (!fieldIdLabelQtyMap)
        {
            this.filldataFieldLabelQtyMap();
        }

        //Start filling the data
        //Delete all data from the tmpData
        delete_from tmpData;

        //Fill tmpData buffer
        this.fillTmpData();

        //Fill availability map
        this.fillAvailabilityMap();

        //Calculate availability
        this.calcAvailability();

        //Update color qty to rental type availability buffer
        this.fillRentalTypeQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate the filters
    /// </summary>
    /// <returns>true if validated, otherwise false</returns>
    public boolean validateFilters()
    {
        boolean ret = true;

        if (!rentalTypeIdSet || rentalTypeIdSet.empty())
        {
            ret = checkFailed("@DNR:MissingFilterRentalTypeIdList"); //Rental type id list is missing
        }

        if (!inventLocationIdSetStr)
        {
            ret = checkFailed("@DNR:MissingFilterWarehouseIdList"); //Warehouse id list is missing
        }

        if (calculationDateTime == DateTimeUtil::minValue())
        {
            ret = checkFailed("@DNR:MissingFilterCalculationDateTime"); //Calculation date/time is missing
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpData</Name>
				<Source><![CDATA[
    private void fillTmpData()
    {
        DNRRFPAssetStatusAvailabilitySetup  assetStatus;
        BOBObjectTable                      objectTableSelect;
        DNRRFPAssetAvailabilityTrans        availabilityTrans, availabilityTransFilter;
        DNRRFPAssetStatusAvailabilitySetup  assetStatusAvailabilitySetup, assetStatusAvailabilitySetupFilter;

        //Step #1- insert all BOs linked to the rental type to the temp table
        insert_recordset tmpData (ObjectId, Category, Name, RentalTypeId)
            select ObjectId, Category, Name from objectTableSelect
                join RentalTypeId from tmpAssetAvailabilityTable
                where objectTableSelect.RentalTypeId == tmpAssetAvailabilityTable.RentalTypeId;

        //Step #2- update tmpData records
        update_recordset tmpData
             setting  InventLocationId = availabilityTrans.InventLocationId,
                      AssetStatus      = availabilityTrans.AssetStatus,
                      Qty              = availabilityTrans.Qty 
            join AssetStatus, InventLocationId, Qty from availabilityTrans
            where  availabilityTrans.BusinessObjectId   == tmpData.ObjectId
                && availabilityTrans.RentalTypeId       == tmpData.RentalTypeId
                && availabilityTrans.ToDateTime         >= calculationDateTime
                && availabilityTrans.FromDateTime       <= calculationDateTime
                join assetStatusAvailabilitySetup
                where assetStatusAvailabilitySetup.AssetStatus == availabilityTrans.AssetStatus
                    exists join tmpInventLocactionIds
                    where tmpInventLocactionIds.StrValue == availabilityTrans.InventLocationId
                        notexists join availabilityTransFilter
                        where  availabilityTransFilter.BusinessObjectId   == tmpData.ObjectId
                            && availabilityTransFilter.RentalTypeId       == tmpData.RentalTypeId
                            && availabilityTransFilter.ToDateTime         >= calculationDateTime
                            && availabilityTransFilter.FromDateTime       <= calculationDateTime
                            && availabilityTransFilter.RecId              != availabilityTrans.RecId
                            notexists join  assetStatusAvailabilitySetupFilter
                            where  assetStatusAvailabilitySetupFilter.AssetStatus   == availabilityTransFilter.AssetStatus
                            &&  ((assetStatusAvailabilitySetupFilter.Priority    >  assetStatusAvailabilitySetup.Priority)
                            ||   (assetStatusAvailabilitySetupFilter.Priority     == assetStatusAvailabilitySetup.Priority
                            &&   availabilityTransFilter.FromDateTime            <= availabilityTrans.FromDateTime));

        //Insert transactions without assigned BO
        insert_recordset tmpData (RentalTypeId, AssetStatus, Qty, InventLocationId)
            select RentalTypeId from tmpAssetAvailabilityTable
            join AssetStatus, Qty, InventLocationId from availabilityTrans
            where  availabilityTrans.RentalTypeId       == tmpAssetAvailabilityTable.RentalTypeId
                && availabilityTrans.BusinessObjectId   == ''
                && availabilityTrans.ToDateTime         >= calculationDateTime
                && availabilityTrans.FromDateTime       <= calculationDateTime
                exists join tmpInventLocactionIds
                where tmpInventLocactionIds.StrValue == availabilityTrans.InventLocationId;

        //Step #3- update the asset status' availability color
        update_recordset tmpData
        setting AvailabilityColor = assetStatus.Color
        where tmpData.AssetStatus
            join Color from assetStatus
            where assetStatus.AssetStatus == tmpData.AssetStatus;

        //Step #4- update the AssetStatus to the BOs which were not covered in the step#2
        update_recordset tmpData
        setting AssetStatus = "@SYS21247"   //Unknown
        where !tmpData.AssetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRentalTypeQty</Name>
				<Source><![CDATA[
    private void fillRentalTypeQty()
    {
        update_recordset tmpAssetAvailabilityTable
        setting QtyGreen    = 0,
                QtyAmber    = 0,
                QtyRed      = 0,
                QtyTotal    = 0;

        //Using seperate update_recordset statements does not correctly count the quantities for temp tables that are linked to a form datasource
        while select forupdate tmpAssetAvailabilityTable
        {
            //Update qty fields on the rental type availability tmp table
            select sum(Qty) from tmpData
            where tmpData.RentalTypeId      == tmpAssetAvailabilityTable.RentalTypeId
            &&    tmpData.AvailabilityColor == DNRRFPAssetAvailabilityColor::Green;
            
            tmpAssetAvailabilityTable.QtyGreen = tmpData.Qty;

            select sum(Qty) from tmpData
            where tmpData.RentalTypeId      == tmpAssetAvailabilityTable.RentalTypeId
            &&    tmpData.AvailabilityColor == DNRRFPAssetAvailabilityColor::Amber;
            
            tmpAssetAvailabilityTable.QtyAmber = tmpData.Qty;
       
            select sum(Qty) from tmpData
            where tmpData.RentalTypeId      == tmpAssetAvailabilityTable.RentalTypeId
            &&    tmpData.AvailabilityColor == DNRRFPAssetAvailabilityColor::Red;
            tmpAssetAvailabilityTable.QtyRed    = tmpData.Qty;

            select sum(Qty) from tmpData
            where tmpData.RentalTypeId    == tmpAssetAvailabilityTable.RentalTypeId
            && (tmpData.AvailabilityColor == DNRRFPAssetAvailabilityColor::Green
            ||  tmpData.AvailabilityColor == DNRRFPAssetAvailabilityColor::Amber
            ||  tmpData.AvailabilityColor == DNRRFPAssetAvailabilityColor::Red);
            
            tmpAssetAvailabilityTable.QtyTotal  = tmpData.Qty;

            tmpAssetAvailabilityTable.update();
        }

        select firstonly tmpAssetAvailabilityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAvailabilityMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the map object holding availability information for each warehouse
    /// </summary>
    /// <returns>Map object with availability details</returns>
    private Map fillAvailabilityMap()
    {
        #define.Total("Total")
        Map           assetStatusQtymap;
        SetEnumerator rentalTypeIdSetEnum = rentalTypeIdSet.getEnumerator();
        int           qtyCountTotal;

        rentalTypeAvailabilityMap = new Map(Types::String, Types::Class);

        while (rentalTypeIdSetEnum.moveNext())
        {
            BOBRentalTypeId rentaltypeId     = rentalTypeIdSetEnum.current();
            SetEnumerator   inventLocSetEnum = inventLocationsSet.getEnumerator();

            Map inventLocAssetStatusQtyMap = new Map(Types::String, Types::Class);

            //Filling the availability container
            while(inventLocSetEnum.moveNext())
            {
                //Reset the map assetStatusQtymap which holds the total qty for each status
                assetStatusQtymap = new Map(Types::String, Types::Integer);

                InventLocationId                inventLocIdCur         = inventLocSetEnum.current();
                MapEnumerator                   fieldIdLabelQtyMapEnum = fieldIdLabelQtyMap.getEnumerator();
                DNRRFPAssetAvailabilityTrans    availabilityTrans;

                //Reset the total qty counter
                qtyCountTotal = 0;

                while (fieldIdLabelQtyMapEnum.moveNext())           //TODO try to rethink this logic to put lesser selections
                {
                    DNRRFPAssetStatus assetStatusCur = fieldIdLabelQtyMapEnum.currentKey();
                    int               qtyCount;

                    if (assetStatusWithoutBOSet.in(assetStatusCur))
                    {
                        select sum(Qty) from availabilityTrans
                        where !availabilityTrans.BusinessObjectId
                        &&    availabilityTrans.RentalTypeId     == rentalTypeId
                        &&    availabilityTrans.InventLocationId == inventLocIdCur
                        &&    availabilityTrans.AssetStatus      == assetStatusCur
                        &&    availabilityTrans.FromDateTime     <= calculationDateTime
                        &&    availabilityTrans.ToDateTime       >= calculationDateTime;

                        qtyCount = availabilityTrans.Qty;
                    }
                    else
                    {
                        select sum(Qty) from tmpData
                        where tmpData.RentalTypeId     == rentalTypeId
                        &&    tmpData.AssetStatus      == assetStatusCur
                        &&    tmpData.InventLocationId == inventLocIdCur;
                    
                        qtyCount = tmpData.Qty;
                    }

                    assetStatusQtymap.insert(assetStatusCur, qtyCount);

                    if (this.includeAssetStatusInTotal(assetStatusCur))
                    {
                        qtyCountTotal += qtyCount;
                    }

                    qtyCount = 0;
                }

                //At the end, insert a Total qty record to the assetStatusQtymap
                assetStatusQtymap.insert(#Total, qtyCountTotal);

                inventLocAssetStatusQtyMap.insert(inventLocIdCur, assetStatusQtymap);
            }

            rentalTypeAvailabilityMap.insert(rentaltypeId, inventLocAssetStatusQtyMap);
        }
       
        return rentalTypeAvailabilityMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the DNRRFPTmpAssetAvailabilityTable filled with object availability records for each warehouse
    /// </summary>
    /// <returns>Temporary table with availability records</returns>
    public DNRRFPTmpAssetAvailabilityTable calcAvailability()
    {
        RecordInsertList rsListTmpAvailData = new RecordInsertList(tableNum(DNRRFPTmpAssetAvailabilityTable), false, false, false, false, false, tmpAvailData);
        TableId          tmpAvailDataTableId = tableNum(DNRRFPTmpAssetAvailabilityTable);

        delete_from tmpAvailData;
        delete_from tmpAssetExtraQty;

        if (!rentalTypeAvailabilityMap.empty())
        {
            MapEnumerator   rentalTypeAvailabilityMapEnum = rentalTypeAvailabilityMap.getEnumerator();

            while (rentalTypeAvailabilityMapEnum.moveNext())
            {
                BOBRentalTypeId rentalTypeId               = rentalTypeAvailabilityMapEnum.currentKey();
                Map             inventLocAssetStatusQtyMap = rentalTypeAvailabilityMapEnum.currentValue();

                if (!inventLocAssetStatusQtyMap.empty())
                {
                    MapEnumerator   availMapEnum = inventLocAssetStatusQtyMap.getEnumerator();

                    while (availMapEnum.moveNext())  //Map defination is (InventLocationId, (AssetStatus, Qty))
                    {
                        String20      inventLocId           = availMapEnum.currentKey();
                        Map           assetStatusQtyMap     = availMapEnum.currentValue();
                        MapEnumerator assetStatusQtyMapEnum = assetStatusQtyMap.getEnumerator();

                        tmpAvailData.clear();
                        tmpAvailData.initValue();
                        tmpAvailData.RentalTypeId           = rentalTypeId;
                        tmpAvailData.InventLocationId       = inventLocId;

                        //Populate the tmpAvailData buffer fields
                        while (assetStatusQtyMapEnum.moveNext())
                        {
                            String20 fieldIdName = fieldIdLabelQtyMap.lookup(assetStatusQtyMapEnum.currentKey());
                            FieldId fieldNumTmpAvailData = fieldName2Id(tmpAvailDataTableId, fieldIdName);

                            if (fieldNumTmpAvailData)
                            {
                                tmpAvailData.(fieldNumTmpAvailData) = assetStatusQtyMapEnum.currentValue();
                            }
                        }

                        tmpAssetExtraQty.clear();
                        tmpAssetExtraQty.RentalTypeId           = rentalTypeId;
                        tmpAssetExtraQty.InventLocationId       = inventLocId;
                        tmpAssetExtraQty.calculateQuantities();
                        tmpAssetExtraQty.insert();

                        rsListTmpAvailData.add(tmpAvailData);
                    }

                    rsListTmpAvailData.insertDatabase();
                }
            }
        }

        return tmpAvailData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAssetStatusInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// determines whether to include assetStatus in total calculations
    /// </summary>
    /// <param name="_assetStatus">Asset status</param>
    /// <returns>true if status is set to be included in total calculations, otherwise false</returns>
    public boolean includeAssetStatusInTotal(DNRRFPAssetStatus _assetStatus)
    {
        boolean ret = true;
 
        
        if (assetStatusRecordMap && assetStatusRecordMap.exists(_assetStatus))
        {
            DNRRFPAssetStatusAvailabilitySetup assetStatusLoc = assetStatusRecordMap.lookup(_assetStatus);

            if (assetStatusLoc)
            {
                ret = assetStatusLoc.IncludeInTotal;
            }
        }

        return ret; 
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>