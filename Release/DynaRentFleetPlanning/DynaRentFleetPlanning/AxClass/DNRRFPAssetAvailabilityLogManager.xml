<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRFPAssetAvailabilityLogManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRRFPAssetAvailabilityLogManager extends RunBaseBatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DNRRFPAssetAvailabilityLogManager manager = new DNRRFPAssetAvailabilityLogManager();
        
        if(manager.prompt())
        {
            manager.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.updateAvailabilityLog();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAvailabilityLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes Dynarent availability log
    /// </summary>
    protected void updateAvailabilityLog()
    {
        BOBObjectTable                      objectTable;
        DNRRFPAssetAvailabilityTrans        availabilityTrans, availabilityTransFilter;
        BOBObjectAvailabilityLog            availabilityLog;
        DNRRFPAssetStatusAvailabilitySetup  assetStausSetup, assetStatusAvailabilitySetupFilter;
        utcdatetime                         dateTime = DateTimeUtil::getSystemDateTime();
        int                                 counter;

        while select ObjectId from objectTable
        join ReasonCode from availabilityTrans
        where  availabilityTrans.BusinessObjectId   == objectTable.ObjectId
            && availabilityTrans.ToDateTime         >= dateTime
            && availabilityTrans.FromDateTime       <= dateTime
            join BOAvailabilityChange from assetStausSetup
            where assetStausSetup.AssetStatus          == availabilityTrans.AssetStatus
            &&    assetStausSetup.BOAvailabilityChange == DNRRFPAssetAvailabilityChange::None
                notexists join availabilityTransFilter
                where  availabilityTransFilter.BusinessObjectId   == objectTable.ObjectId
                    && availabilityTransFilter.ToDateTime         >= dateTime
                    && availabilityTransFilter.FromDateTime       <= dateTime
                    && availabilityTransFilter.RecId              != availabilityTrans.RecId
                    notexists join  assetStatusAvailabilitySetupFilter
                        where  assetStatusAvailabilitySetupFilter.AssetStatus   == availabilityTransFilter.AssetStatus
                            && ((assetStatusAvailabilitySetupFilter.Priority    >  assetStausSetup.Priority)
                            || (assetStatusAvailabilitySetupFilter.Priority     == assetStausSetup.Priority
                            &&  availabilityTransFilter.FromDateTime            <= availabilityTrans.FromDateTime))
        {
            select firstonly availabilityLog
                order by CreatedDateTime desc
                where availabilityLog.ObjectId == objectTable.ObjectId;
            
            if  ((assetStausSetup.BOAvailabilityChange == DNRRFPAssetAvailabilityChange::Available   && availabilityLog.IsAvailable == NoYes::No)
              || (assetStausSetup.BOAvailabilityChange == DNRRFPAssetAvailabilityChange::Unavailable && availabilityLog.IsAvailable == NoYes::Yes)
              || (availabilityTrans.ReasonCode != availabilityLog.DNRReasonCode))
            {
                BOBObjectAvailabilityLog::changeAvailability(objectTable.ObjectId, assetStausSetup.BOAvailabilityChange == DNRRFPAssetAvailabilityChange::Available, availabilityTrans.ReasonCode);
                counter++;
            }
        }

        if (counter)
        {
            info(strFmt("@DNR:BOAvialabilityLogUpdate", counter)); //Updated availability log for %1 business object(s)
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInBatch</Name>
				<Source><![CDATA[
    protected boolean canRunInBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@DNR:UpdateBOAvailabilityLog"; //Update object availability log
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>