<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRFPAssetAvailabilityManualStatusChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRRFPAssetAvailabilityManualStatusChange
{
    DNRRFPAssetStatus   assetStatus;
    utcdatetime         fromDateTime, toDateTime;
    BOBObjectTable      objectTable;
    InventLocationId    inventLocationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRRFPAssetAvailabilityManualStatusChange construct()
    {
        return new DNRRFPAssetAvailabilityManualStatusChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmObjectTable</Name>
				<Source><![CDATA[
    public BOBObjectTable parmObjectTable(BOBObjectTable _objectTable = objectTable)
    {
        objectTable = _objectTable;
        return objectTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetStatus</Name>
				<Source><![CDATA[
    public DNRRFPAssetStatus parmAssetStatus(DNRRFPAssetStatus _assetStatus = assetStatus)
    {
        assetStatus = _assetStatus;
        return assetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateTime</Name>
				<Source><![CDATA[
    public TransDateTime parmFromDateTime(TransDateTime _fromDateTime = fromDateTime)
    {
        fromDateTime = _fromDateTime;
        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateTime</Name>
				<Source><![CDATA[
    public TransDateTime parmToDateTime(TransDateTime _toDateTime = toDateTime)
    {
        toDateTime = _toDateTime;
        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        DNRRFPAssetAvailabilityTrans    availabilityStatus;
        BOBObjectView                   objectView;

        availabilityStatus = DNRRFPAssetAvailabilityTrans::getBOAvailabilityTrans(objectTable.ObjectId, DateTimeUtil::getSystemDateTime());

        if (availabilityStatus)
        {
            inventLocationId = availabilityStatus.InventLocationId;
            assetStatus = availabilityStatus.AssetStatus;
        }
        else
        {
            select firstonly Depot from objectView
            where objectView.ObjectId == objectTable.ObjectId;

            inventLocationId = objectView.Depot;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatus</Name>
				<Source><![CDATA[
    public void changeStatus()
    {
        if (this.validate())
        {
            BOBRentalTrans               rentalTrans;
            DNRRFPAssetAvailabilityTrans availabilityTrans;

            rentalTrans.Active              = BOBRentalTransActive::Active;
            rentalTrans.AssetId             = objectTable.assetId();
            rentalTrans.CertaintyFrom       = BOBDateTimeCertainty::Fixed;
            rentalTrans.CertaintyTo         = BOBDateTimeCertainty::Fixed;
            rentalTrans.CompanyId           = curext();
            rentalTrans.FromDateTime        = toDateTime;
            rentalTrans.InventLocationId    = inventLocationId;
            rentalTrans.ObjectId            = objectTable.ObjectId;
            rentalTrans.Qty                 = 1;
            rentalTrans.RentalTypeId        = objectTable.RentalTypeId;
            rentalTrans.SubStatus           = BOBRentalSubStatus::None;
            rentalTrans.ToDateTime          = toDateTime;
            rentalTrans.TransType           = BOBRentalTransType::None;
            rentalTrans.insert();

            availabilityTrans.RentalTransRecId   = rentalTrans.RecId;
            availabilityTrans.BusinessObjectId   = rentalTrans.ObjectId;
            availabilityTrans.RentalTypeId       = rentalTrans.RentalTypeId;
            availabilityTrans.AssetStatus        = assetStatus;
            availabilityTrans.FromDateTime       = fromDateTime;
            availabilityTrans.ToDateTime         = toDateTime;
            availabilityTrans.InventSiteId       = InventLocation::find(inventLocationId).InventSiteId;
            availabilityTrans.InventLocationId   = inventLocationId;
            availabilityTrans.Qty                = rentalTrans.Qty;
            availabilityTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret = this.validateAssetStatus();

        ret = ret && this.validateFromToDates();

        ret = ret && this.validateInventLocationId();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetStatus</Name>
				<Source><![CDATA[
    public boolean validateAssetStatus()
    {
        DNRRFPAssetStatusAvailabilitySetup assetStatusAvailabilitySetup = DNRRFPAssetStatusAvailabilitySetup::find(assetStatus);

        if (!assetStatusAvailabilitySetup.RecId)
        {
            return checkFailed(strFmt("@DNR:StatusXDoesNotExist", assetStatus));
        }
        else if (assetStatusAvailabilitySetup.AllowManual == NoYes::No)
        {
            return checkFailed(strFmt("@DNR:StatusXIsNotValidForManualChange", assetStatus));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromToDates</Name>
				<Source><![CDATA[
    public boolean validateFromToDates()
    {
        if (fromDateTime > toDateTime)
        {
            return checkFailed(strFmt("@DNR:FromDateCannotBeLaterThanToDate"));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocationId</Name>
				<Source><![CDATA[
    public boolean validateInventLocationId()
    {
        return InventLocation::exist(inventLocationId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>