<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRFPAssetAvailabilityTransManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRRFPAssetAvailabilityTransManager
{
    Common                                      buffer;
    BOBRentalTrans                              rentalTrans;
    BOBRentalTransType                          rentalTransType;
    InventDim                                   inventDim;
    DNRRFPAssetStatus                           assetStatus;
    DNRRFPAssetAvailabilityDateTimesCalculator  dateTimesCalculator;
    boolean                                     updateWarehouse;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAvailabilityTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates availability transaction
    /// </summary>
    public void createAvailabilityTrans()
    {
        if (rentalTrans.TransType == BOBRentalTransType::None)
        {
            return;
        }

        DNRRFPAssetAvailabilityTrans  availabilityTrans;

        if (rentalTrans.Active != BOBRentalTransActive::Active)
        {
            delete_from availabilityTrans
            where availabilityTrans.RentalTransRecId == rentalTrans.RecId;

            return;
        }

        ttsbegin;

        if (this.allowCreateAvailibilityTrans() && this.checkTriggerSetup())
        {
            availabilityTrans = DNRRFPAssetAvailabilityTrans::find(rentalTrans.RecId, true);

            if (availabilityTrans)
            {              
                availabilityTrans.BusinessObjectId   = rentalTrans.ObjectId;
                availabilityTrans.RentalTypeId       = this.rentalTypeId();
                availabilityTrans.AssetStatus        = this.assetStatus();
                availabilityTrans.FromDateTime       = this.fromDateTime();
                availabilityTrans.ToDateTime         = this.toDateTime();
                availabilityTrans.InventSiteId       = this.inventSiteId();
                availabilityTrans.InventLocationId   = this.inventLocationId();
                availabilityTrans.Qty                = this.qty();
                availabilityTrans.update();
            }
            else
            {
                availabilityTrans.RentalTransRecId   = rentalTrans.RecId;
                availabilityTrans.BusinessObjectId   = rentalTrans.ObjectId;
                availabilityTrans.RentalTypeId       = this.rentalTypeId();
                availabilityTrans.AssetStatus        = this.assetStatus();
                availabilityTrans.FromDateTime       = this.fromDateTime();
                availabilityTrans.ToDateTime         = this.toDateTime();
                availabilityTrans.InventSiteId       = this.inventSiteId();
                availabilityTrans.InventLocationId   = this.inventLocationId();
                availabilityTrans.Qty                = this.qty();
                availabilityTrans.insert();
            }

            if (updateWarehouse)
            {
                this.updateWarehouse();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarehouse</Name>
				<Source><![CDATA[
    protected void updateWarehouse()
    {
        DNRRFPAssetAvailabilityTrans        availabilityTrans;
        DNRRFPAssetStatusAvailabilitySetup  assetStatusSetup;
        Priority                            currentPriority = DNRRFPAssetStatusAvailabilitySetup::find(assetStatus).Priority;
        utcdatetime                         systemDateTime = DateTimeUtil::getSystemDateTime();
        
        update_recordset availabilityTrans
        setting InventSiteId        = inventDim.InventSiteId,
                InventLocationId    = inventDim.InventLocationId
        where availabilityTrans.BusinessObjectId   == rentalTrans.ObjectId
        &&    availabilityTrans.FromDateTime       <  systemDateTime
        &&    availabilityTrans.ToDateTime         >  systemDateTime
            exists join assetStatusSetup
                where assetStatusSetup.AssetStatus   == availabilityTrans.AssetStatus
                    && assetStatusSetup.Priority     < currentPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRRFPAssetAvailabilityTransManager construct(BOBRentalTrans  _rentalTrans)
    {
        DNRRFPAssetAvailabilityTransManagerAttribute attribute       = new DNRRFPAssetAvailabilityTransManagerAttribute(_rentalTrans.TransType);
        SysExtensionGenericInstantiation             instantiation   = new SysExtensionGenericInstantiation(_rentalTrans);

        DNRRFPAssetAvailabilityTransManager assetAvailabilityTransManager = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(DNRRFPAssetAvailabilityTransManager), attribute, instantiation) as DNRRFPAssetAvailabilityTransManager;

        if (!assetAvailabilityTransManager)
        {
            assetAvailabilityTransManager = new DNRRFPAssetAvailabilityTransManager(_rentalTrans);
        }

        return assetAvailabilityTransManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BOBRentalTrans  _rentalTrans)
    {
        rentalTrans = _rentalTrans;

        this.initInventDim(_rentalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    protected void initInventDim(BOBRentalTrans _rentalTrans)
    {
        if (_rentalTrans.InventTransRecId)
        {
            InventTrans inventTransSelect;

            select firstonly inventDim
                exists join inventTransSelect
                where inventTransSelect.inventDimId == inventDim.inventDimId
                &&    inventTransSelect.RecId == _rentalTrans.InventTransRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRentalTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Rental transaction type
    /// </summary>
    /// <returns>BOBRentalTransType value</returns>
    protected BOBRentalTransType parmRentalTransType()
    {
        return rentalTrans.TransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves RentalTypeId
    /// </summary>
    /// <returns>RentalTypeId value</returns>
    protected BOBRentalTypeId rentalTypeId()
    {
        return rentalTrans.RentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves from date time value
    /// </summary>
    /// <returns>FromDateTime value</returns>
    protected FromDateTime fromDateTime()
    {
        return dateTimesCalculator.calculateFromDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves to date time value
    /// </summary>
    /// <returns>ToDateTime value</returns>
    protected ToDateTime toDateTime()
    {
        return dateTimesCalculator.calculateToDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves asset status
    /// </summary>
    /// <returns>DNRRFPAssetStatus value</returns>
    protected DNRRFPAssetStatus assetStatus()
    {
        return assetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///Retrieves Site Id
    /// </summary>
    /// <returns>InventSiteId value</returns>
    protected InventSiteId inventSiteId()
    {
        return inventDim.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///Retrieves Warehouse Id
    /// </summary>
    /// <returns>InventLocationId value</returns>
    protected  InventLocationId inventLocationId()
    {
        return inventDim.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves quantity
    /// </summary>
    /// <returns>Qty value</returns>
    protected Qty qty()
    {
        return abs(rentalTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTriggerSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is a trigger set up to record the transaction
    /// </summary>
    /// <returns>true if there is a trigger setup record, otherwise false</returns>
    protected boolean checkTriggerSetup()
    {
        boolean                                     ret;
        DNRRFPAssetAvailabilityTriggerSetupTable    availabilityTriggerSetupTable;
        DNRRFPAssetStatusAvailabilitySetup          availabilityStatus;

        if (rentalTrans.ObjectId)
        {
            select firstonly availabilityTriggerSetupTable
            where  availabilityTriggerSetupTable.RentalTransType == rentalTrans.TransType 
            &&     availabilityTriggerSetupTable.RentalSubStatus == rentalTrans.SubStatus
                join TableId from availabilityStatus
                where availabilityStatus.AssetStatus == availabilityTriggerSetupTable.AssetStatus
                &&    availabilityStatus.BusinessObjectAssigned;
        }
        else
        {
            select firstonly availabilityTriggerSetupTable
            where  availabilityTriggerSetupTable.RentalTransType == rentalTrans.TransType
            &&     availabilityTriggerSetupTable.RentalSubStatus == rentalTrans.SubStatus
                join TableId from availabilityStatus
                where  availabilityStatus.AssetStatus == availabilityTriggerSetupTable.AssetStatus
                &&    !availabilityStatus.BusinessObjectAssigned;
        }
             
        if(availabilityTriggerSetupTable.RecId)
        {
            this.initParameters(availabilityTriggerSetupTable, rentalTrans);

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters(DNRRFPAssetAvailabilityTriggerSetupTable _availabilityTriggerSetupTable, BOBRentalTrans _rentalTrans)
    {
        assetStatus         = _availabilityTriggerSetupTable.AssetStatus;
        dateTimesCalculator = DNRRFPAssetAvailabilityDateTimesCalculator::construct(_availabilityTriggerSetupTable.triggerDateTimes(), _rentalTrans);
        updateWarehouse     = _availabilityTriggerSetupTable.UpdateInventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreateAvailibilityTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the creation of availability transaction is allowed to be created
    /// </summary>
    /// <returns>true if allowed, otherwise false</returns>
    public boolean allowCreateAvailibilityTrans()
    {
        return (rentalTrans.CertaintyFrom != BOBDateTimeCertainty::Tentative && rentalTrans.Active == BOBRentalTransActive::Active);
                
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>