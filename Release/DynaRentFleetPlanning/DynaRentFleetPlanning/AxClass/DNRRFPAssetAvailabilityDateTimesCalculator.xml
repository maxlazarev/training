<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRFPAssetAvailabilityDateTimesCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRRFPAssetAvailabilityDateTimesCalculator
{
    DNRRFPAssetAvailabilityTrigerFromToDateTimes    triggerDateTimes;
    BOBRentalTrans                                  rentalTrans;
    RORRentalDateTimes                              rentalDateTimes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(DNRRFPAssetAvailabilityTrigerFromToDateTimes _triggerDateTimes, BOBRentalTrans _rentalTrans)
    {
        triggerDateTimes = _triggerDateTimes;
        rentalTrans = _rentalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRRFPAssetAvailabilityDateTimesCalculator construct(DNRRFPAssetAvailabilityTrigerFromToDateTimes _triggerDateTimes, BOBRentalTrans _rentalTrans)
    {
        return new DNRRFPAssetAvailabilityDateTimesCalculator(_triggerDateTimes, _rentalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFromDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates from date and time
    /// </summary>
    /// <returns>utcdatetime value</returns>
    public TransDateTime calculateFromDateTime()
    {
        if (triggerDateTimes.RecId == 0)
        {
            return rentalTrans.FromDateTime;
        }

        return DateTimeUtil::newDateTime(this.calculateFromDate(), this.calculateFromTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates from date
    /// </summary>
    /// <returns>date value</returns>
    protected TransDate calculateFromDate()
    {
        date calculatedDate;

        switch (triggerDateTimes.FromDateType)
        {
            case DNRRFPFromDateAvailabilityType::Default:
                calculatedDate = DateTimeUtil::date(rentalTrans.FromDateTime);
                break;
            case DNRRFPFromDateAvailabilityType::SystemDate:
                calculatedDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
                break;
            case DNRRFPFromDateAvailabilityType::RentalDate:
                calculatedDate = this.getRentalFromDate();
                break;
        }

        if (triggerDateTimes.FromDateType != DNRRFPFromDateAvailabilityType::Default)
        {
            calculatedDate = this.offSetDate(calculatedDate, triggerDateTimes.FromDateOffsetDuration, triggerDateTimes.FromDateOffsetUnit);
        }

        return calculatedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFromTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates from time
    /// </summary>
    /// <returns>timeOfDay value</returns>
    protected timeOfDay calculateFromTime()
    {
        timeOfDay calculatedTime;

        switch (triggerDateTimes.FromTimeType)
        {
            case DNRRFPTimeAvailabilityType::Default:
                calculatedTime = DateTimeUtil::time(rentalTrans.FromDateTime);
                break;
            case DNRRFPTimeAvailabilityType::SystemTime:
                calculatedTime = DateTimeUtil::time(DateTimeUtil::getSystemDateTime());
                break;
            case DNRRFPTimeAvailabilityType::RentalDate:
                calculatedTime = this.getRentalFromTime();
                break;
        }

        if (triggerDateTimes.FromTimeType != DNRRFPTimeAvailabilityType::Default)
        {
            calculatedTime = this.offsetTime(calculatedTime, triggerDateTimes.FromTimeOffsetDuration, triggerDateTimes.FromTimeOffsetUnit);
        }

        return calculatedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates to date and time
    /// </summary>
    /// <returns>utcdatetime value</returns>
    public TransDateTime calculateToDateTime()
    {
        if (triggerDateTimes.RecId == 0)
        {
            return rentalTrans.ToDateTime;
        }

        if (triggerDateTimes.ToDateType == DNRRFPToDateAvailabilityType::NoDateTime)
        {
            return DateTimeUtil::maxValue();
        }

        return DateTimeUtil::newDateTime(this.calculateToDate(), this.calculateToTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates to date
    /// </summary>
    /// <returns>date value</returns>
    protected TransDate calculateToDate()
    {
        date calculatedDate;
        
        switch (triggerDateTimes.ToDateType)
        {
            case DNRRFPToDateAvailabilityType::Default:
                calculatedDate = DateTimeUtil::date(rentalTrans.ToDateTime);
                break;
            case DNRRFPToDateAvailabilityType::SystemDate:
                calculatedDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
                break;
            case DNRRFPToDateAvailabilityType::RentalDate:
                calculatedDate = this.getRentalToDate();
                break;
        }

        if (triggerDateTimes.ToDateType != DNRRFPToDateAvailabilityType::Default)
        {
            calculatedDate = this.offSetDate(calculatedDate, triggerDateTimes.ToDateOffsetDuration, triggerDateTimes.ToDateOffsetUnit);
        }

        return calculatedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateToTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates to time
    /// </summary>
    /// <returns>timeOfDay value</returns>
    protected timeOfDay calculateToTime()
    {
        timeOfDay calculatedTime;

        switch (triggerDateTimes.ToTimeType)
        {
            case DNRRFPTimeAvailabilityType::Default:
                calculatedTime = DateTimeUtil::time(rentalTrans.ToDateTime);
                break;
            case DNRRFPTimeAvailabilityType::SystemTime:
                calculatedTime = DateTimeUtil::time(DateTimeUtil::getSystemDateTime());
                break;
            case DNRRFPTimeAvailabilityType::RentalDate:
                calculatedTime = this.getRentalToTime();
                break;
        }

        if (triggerDateTimes.ToTimeType != DNRRFPTimeAvailabilityType::Default)
        {
            calculatedTime = this.offsetTime(calculatedTime, triggerDateTimes.ToTimeOffsetDuration, triggerDateTimes.ToTimeOffsetUnit);
        }

        return calculatedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offSetDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// applies date offset
    /// </summary>
    /// <param name = "_date">base date</param>
    /// <param name = "_duration">offset duration</param>
    /// <param name = "_dateUnit">offset duration unit</param>
    /// <returns>date value with applied offset</returns>
    protected TransDate offSetDate(TransDate _date, WPPOffset _duration, RORDateUnit _dateUnit)
    {
        if (_duration == 0)
        {
            return _date;
        }

        utcdatetime adjustedDateTime = DateTimeUtil::newDateTime(_date, 0);

        switch (_dateUnit)
        {
            case  RORDateUnit::Day:
                adjustedDateTime = DateTimeUtil::addDays(adjustedDateTime, _duration);
                break;
            case RORDateUnit::Week:
                adjustedDateTime = DateTimeUtil::addDays(adjustedDateTime, _duration * 7);
                break;
            case RORDateUnit::Month:
                adjustedDateTime = DateTimeUtil::addMonths(adjustedDateTime, _duration);
                break;
            case RORDateUnit::Year:
                adjustedDateTime = DateTimeUtil::addYears(adjustedDateTime, _duration);
                break;
        }

        return DateTimeUtil::date(adjustedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offSetTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// applies time offset
    /// </summary>
    /// <param name = "_timeOfDay">base time</param>
    /// <param name = "_duration">offset time</param>
    /// <param name = "_timeUnit">offset time unit</param>
    /// <returns>timeOfDay value with applied offset</returns>
    protected timeOfDay offSetTime(timeOfDay _timeOfDay, WPPOffset _duration, RORTimeUnit _timeUnit)
    {
        if (_duration == 0)
        {
            return _timeOfDay;
        }

        utcdatetime adjustedDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::getSystemDateTime()), _timeOfDay);

        switch (_timeUnit)
        {
            case  RORTimeUnit::Second:
                adjustedDateTime = DateTimeUtil::addSeconds(adjustedDateTime, _duration);
                break;
            case RORTimeUnit::Minute:
                adjustedDateTime = DateTimeUtil::addMinutes(adjustedDateTime, _duration);
                break;
            case RORTimeUnit::Hour:
                adjustedDateTime = DateTimeUtil::addHours(adjustedDateTime, _duration);
                break;
        }

        return DateTimeUtil::time(adjustedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalDateTimes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves RORRentalDateTimes buffer linked to the rental transaction
    /// </summary>
    /// <returns>RORRentalDateTimes buffer</returns>
    protected RORRentalDateTimes rentalDateTimes()
    {
        if (rentalDateTimes.RecId)
        {
            return rentalDateTimes;
        }

        rentalDateTimes = this.getRentalDateTimesFromRentalTrans();

        return rentalDateTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalDateTimesFromRentalTrans</Name>
				<Source><![CDATA[
    protected RORRentalDateTimes getRentalDateTimesFromRentalTrans()
    {
        Common originator = InventTransOrigin::find(rentalTrans.InventTransOrigin).originator();
        RORRentalDateTimes rentalDateTimesLocal;

        if (originator.RecId)
        {
            select firstonly rentalDateTimesLocal
            where rentalDateTimesLocal.RefRecId     == originator.RecId
            &&    rentalDateTimesLocal.RefTableId   == originator.TableId;
        }

        return rentalDateTimesLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalFromDate</Name>
				<Source><![CDATA[
    protected TransDate getRentalFromDate()
    {
        if (this.rentalDateTimes().RecId)
        {
            return DateTimeUtil::date(this.rentalDateTimes().(RORRentalDateTimes::dateTimeType2FieldId(triggerDateTimes.FromDateRentalType)));
        }

        return DateTimeUtil::date(rentalTrans.FromDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalFromTime</Name>
				<Source><![CDATA[
    protected timeOfDay getRentalFromTime()
    {
        if (this.rentalDateTimes().RecId)
        {
            return DateTimeUtil::time(this.rentalDateTimes().(RORRentalDateTimes::dateTimeType2FieldId(triggerDateTimes.FromTimeRentalType)));
        }

        return DateTimeUtil::time(rentalTrans.FromDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalToDate</Name>
				<Source><![CDATA[
    protected TransDate getRentalToDate()
    {
        if (this.rentalDateTimes().RecId)
        {
            return DateTimeUtil::date(this.rentalDateTimes().(RORRentalDateTimes::dateTimeType2FieldId(triggerDateTimes.ToDateRentalType)));
        }

        return DateTimeUtil::date(rentalTrans.ToDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalToTime</Name>
				<Source><![CDATA[
    protected timeOfDay getRentalToTime()
    {
        if (this.rentalDateTimes().RecId)
        {
            return DateTimeUtil::time(this.rentalDateTimes().(RORRentalDateTimes::dateTimeType2FieldId(triggerDateTimes.ToTimeRentalType)));
        }

        return DateTimeUtil::time(rentalTrans.ToDateTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>