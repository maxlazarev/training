<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASRORPurchTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(RORPurchTable))]
public final class DNRASRORPurchTableForm_Extension
{
    // Event-handler methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DNRASEvent_DNRRORPurchTable_PurchLineDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(RORPurchTable, PurchLine), FormDataSourceEventType::Initialized)]
    public static void DNRASEvent_DNRRORPurchTable_PurchLineDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            Args args = _sender.formRun().args();

            if (args.caller() && args.callerName() == formStr(DNRASSalesPurchOrderSummaryOverview))
            {
                _sender.queryBuildDataSource().addRange(fieldNum(PurchLine, ItemId)).value(args.parm());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_DNRRORPurchTable_InventDimDS_inventSerialId_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(RORPurchTable, InventDim, inventSerialId), FormDataFieldEventType::Validated)]
    public static void DNRASEvent_DNRRORPurchTable_InventDimDS_inventSerialId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            boolean ret = true;
            PurchLine purchLine = _sender.datasource().formRun().dataSource(formDataSourceStr(RORPurchTable, PurchLine)).cursor();

            if (!RORRentalLine::DNRASValidateInventSerialIdUpdate(purchLine))
            {
                ret = checkFailed("@DNR:AssignSerialBlockManualAssignmentPurchase");
            }

            if (!ret)
            {
                FormDataFieldCancelEventArgs args = _eventArgs as FormDataFieldCancelEventArgs;
                args.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_DNRRORPurchTable_PurchLineDS_PurchQty_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(RORPurchTable, PurchLine, PurchQty), FormDataFieldEventType::Validated)]
    public static void DNRASEvent_DNRRORPurchTable_PurchLineDS_PurchQty_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            boolean ret = true;
            PurchLine purchLine = _sender.datasource().cursor();

            if (!RORRentalLine::DNRASValidateRentalQtyUpdate(purchLine))
            {
                ret = checkFailed("@DNR:AssignSerialBlockRentalQtyChange");
            }

            if (!ret)
            {
                FormDataFieldCancelEventArgs args = _eventArgs as FormDataFieldCancelEventArgs;
                args.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_RORPurchTable_DNRASSplitRentalLineButtonCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(RORPurchTable, DNRASSplitRentalLineButton), FormControlEventType::Clicked)]
    public static void DNRASEvent_RORPurchTable_DNRASSplitRentalLineButtonCTRL_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun();
        FormDataSource formDSPurchLine = formRun.dataSource(formDataSourceStr(RORPurchTable, PurchLine));
        PurchLine purchLine = formDSPurchLine.cursor();

        if (purchLine.RORTradeType != RORTradeType::SalesPurch)
        {
            ttsbegin;

            boolean reConfirm = DNRASSplitEngine_Purch::mustReconfirmSplitLines(purchLine);

            DNRASSplitEngine splitEngine = DNRASSplitEngine::construct(purchLine, purchLine.PurchQty - 1);
            splitEngine.run();
            
            if (reConfirm)
            {
                splitEngine.confirmSplitLines();
            }

            ttscommit;
        }

        formDSPurchLine.research(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>