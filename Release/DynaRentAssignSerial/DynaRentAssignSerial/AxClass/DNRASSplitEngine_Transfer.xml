<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASSplitEngine_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRASSplitEngine_Transfer extends DNRASSplitEngine
{
    InventTransferLine callerInventTransferLine;
    LineNumber lastLineNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSplitLineAsync</Name>
				<Source><![CDATA[
    private static container createSplitLineAsync(container _params, System.Threading.CancellationToken _cancellationToken)
    {
        InventTransferLine inventTransferLineLocal = con2Buf(conPeek(_params, 1));
        Qty qty = conPeek(_params, 2);
        LineNum lineNum = conpeek(_params, 3);

        ttsbegin;

        DNRASSplitEngine splitEngine = DNRASSplitEngine::construct(inventTransferLineLocal, qty);
        InventTransferLine newRentalLine = splitEngine.createSplitRentalLine(qty, lineNum);

        ttscommit;

        return [newRentalLine.InventTransId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSplitRentalLine</Name>
				<Source><![CDATA[
    public RORRentalLine createSplitRentalLine(Qty _splitQty, LineNumber _lineNum = 0, SalesLineCreationSequenceNumber _lineCreationSequenceNumber = 0, RORLineParent _parentLineRecId = 0)
    {
        ttsbegin;

        InventTransferLine splitRentalLine = this.initSplitRentalLine(_splitQty);
        splitRentalLine.LineNum = _lineNum ? _lineNum : InventTransferLine::lastLineNum(callerInventTransferLine.TransferId) + 1.0;

        if (splitRentalLine.validateWrite())
        {
            splitRentalLine.insert();
        }   

        ttscommit;
        
        return splitRentalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitRentalLine</Name>
				<Source><![CDATA[
    public RORRentalLine initSplitRentalLine(Qty _splitQty)
    {
        InventTransferLine splitTransferLine;

        splitTransferLine.data(callerInventTransferLine);
        
        splitTransferLine.RecId = 0;
        splitTransferLine.InventTransId = '';

        splitTransferLine.QtyTransfer = _splitQty;
        splitTransferLine.QtyRemainShip = _splitQty;
        splitTransferLine.QtyRemainReceive = _splitQty;
        splitTransferLine.modifiedField(fieldNum(InventTransferLine, QtyTransfer));

        return splitTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalLineOrig</Name>
				<Source><![CDATA[
    public void updateRentalLineOrig(Qty _splitQty)
    {
        ttsbegin;

        callerInventTransferLine.selectForUpdate(true);

        callerInventTransferLine.QtyTransfer = _splitQty;
        callerInventTransferLine.QtyRemainShip = _splitQty;
        callerInventTransferLine.QtyRemainReceive = _splitQty;
        callerInventTransferLine.modifiedField(fieldNum(InventTransferLine, QtyTransfer));

        callerInventTransferLine.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveRentalLine</Name>
				<Source><![CDATA[
    protected void setActiveRentalLine(RORRentalLine _rentalLine)
    {
        callerInventTransferLine = _rentalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        return callerInventTransferLine.DNRASMaySplitLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitEngineClassId</Name>
				<Source><![CDATA[
    protected ClassId getSplitEngineClassId()
    {
        return classNum(DNRASSplitEngine_Transfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitMethod</Name>
				<Source><![CDATA[
    protected MethodName getSplitMethod()
    {
        return staticMethodStr(DNRASSplitEngine_Transfer, createSplitLineAsync);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitParameters</Name>
				<Source><![CDATA[
    protected container getSplitParameters(RORRentalLine _rentalLine, Qty _splitQty, Counter _splitLineCounter)
    {
        LineNumber newLineNumber = lastLineNumber ?
                                   lastLineNumber + 1 :
                                   InventTransferLine::lastLineNum(callerInventTransferLine.TransferId) + _splitLineCounter;
        
        lastLineNumber = newLineNumber;

        return [buf2Con(callerInventTransferLine), _splitQty, newLineNumber];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>