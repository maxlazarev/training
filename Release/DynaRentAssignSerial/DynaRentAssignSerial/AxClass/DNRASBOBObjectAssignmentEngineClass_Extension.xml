<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASBOBObjectAssignmentEngineClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(BOBObjectAssignmentEngine))]
public final class DNRASBOBObjectAssignmentEngineClass_Extension
{
    private boolean isInitialObjectAssignment;
    private boolean allowMultiAssign;
    private DNRTmpIdValue tmpObjectAvailabilityNotExist;
    private BOBTmpObjectAvailability tmpObjectAssignmentData;
    private RORRentalLine rentalLineOrig;

    // Chain-of-Command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormDataSource formDataSource;

        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            if (_args.caller() && classIdGet(_args.caller()) == classNum(FormRun))
            {
                FormRun callerForm = _args.caller();

                switch (callerForm.name())
                {
                    case formStr(RORSalesTable):
                        formDataSource = callerForm.dataSource(formDataSourceStr(RORSalesTable, SalesLine));
                        break;

                    case formStr(DNRRORSalesTable):
                        formDataSource = callerForm.dataSource(formDataSourceStr(DNRRORSalesTable, SalesLine));
                        break;

                    case formStr(RORSalesQuotationTable):
                        formDataSource = callerForm.dataSource(formDataSourceStr(RORSalesQuotationTable, SalesQuotationLine));
                        break;

                    case formStr(RORSalesQuotationProjTable):
                        formDataSource = callerForm.dataSource(formDataSourceStr(RORSalesQuotationProjTable, SalesQuotationLine));
                        break;

                    case formStr(InventTransferOrders):
                        formDataSource = callerForm.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine));
                        break;

                    default:
                        break;
                }
            }
        }

        next main(_args);

        if (formDataSource)
        {
            formDataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean skipRunOperation;

        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            rentalLineOrig = rentalLine.orig();

            isInitialObjectAssignment = true;
            allowMultiAssign = rentalLineOrig.DNRASMaySplitLine();

            if (allowMultiAssign)
            {
                skipRunOperation = true;
            }
        }

        boolean ret = next prompt();

        if (skipRunOperation)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom)
    {
        boolean forceSkipValidationOrig;

        // If the 'validate()' method is being called for the first time (i.e., when the user clicks the 'Ok' button) and we allow the assignment of
        // multiple business objects, then we want the 'validate()' method to return 'false' without actually checking anything.
        if (allowMultiAssign && isInitialObjectAssignment)
        {
            forceSkipValidationOrig = this.parmForceSkipValidation();
            this.parmForceSkipValidation(true);
        }

        boolean ret = next validate(_calledFrom);

        if (allowMultiAssign && isInitialObjectAssignment)
        {
            this.parmForceSkipValidation(forceSkipValidationOrig);
            ret = false;
        }

        isInitialObjectAssignment = false;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASGetAllowMultiAssign</Name>
				<Source><![CDATA[
    // Extension methods

    public boolean DNRASGetAllowMultiAssign()
    {
        return allowMultiAssign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASSetTmpObjectAvailabilityNotExist</Name>
				<Source><![CDATA[
    public void DNRASSetTmpObjectAvailabilityNotExist(DNRTmpIdValue _tmpObjectAvailabilityNotExist)
    {
        tmpObjectAvailabilityNotExist = _tmpObjectAvailabilityNotExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASSetTmpObjectAssignmentData</Name>
				<Source><![CDATA[
    public void DNRASSetTmpObjectAssignmentData(BOBTmpObjectAvailability _tmpObjectAssignmentData)
    {
        tmpObjectAssignmentData = _tmpObjectAssignmentData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASDoMultiAssign</Name>
				<Source><![CDATA[
    public void DNRASDoMultiAssign(boolean _mustConfirm)
    {
        Counter numOfSplitRentalLines;
        SalesQty rentalQty = this.DNRASGetRentalQty();
        SalesQty remainingQty = this.DNRASGetRemainingQty();
 
        ttsbegin;
        
        rentalLineOrig.selectForUpdate(true);

        select count(RecId) from tmpObjectAvailabilityNotExist;

        DNRASSplitEngine splitEngine = DNRASSplitEngine::construct(rentalLineOrig, min(tmpObjectAvailabilityNotExist.RecId, (rentalLineOrig.RentQty - 1)));
        splitEngine.run();

        Map splitLinesMap = splitEngine.parmSplitLinesMap();
        MapEnumerator splitLinesMapEnumerator = splitLinesMap.getEnumerator();
        List splitLines;

        // Only interested in the 1st pair: rentalLineOrig -> [split lines]
        if (splitLinesMapEnumerator.moveNext())
        {
            splitLines = splitLinesMapEnumerator.currentValue();
        }

        ListEnumerator splitLinesEnumerator = splitLines.getEnumerator();

        while select tmpObjectAvailabilityNotExist
        {
            // Use the 'original' rental order line.
            if (!remainingQty && (rentalQty - numOfSplitRentalLines == 1))
            {
                this.DNRASAssignObjectToSplitRentalLine(tmpObjectAvailabilityNotExist, rentalLineOrig);
            }
            else
            {
                if (splitLinesEnumerator.moveNext())
                {
                    RORRentalLine splitRentalLine = this.DNRASGetRentalLine(splitLinesEnumerator.current());

                    this.DNRASAssignObjectToSplitRentalLine(tmpObjectAvailabilityNotExist, splitRentalLine);
                    numOfSplitRentalLines++;
                }
            }
        }

        if (_mustConfirm)
        {
            splitEngine.confirmSplitLines();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASGetRentalLine</Name>
				<Source><![CDATA[
    private RORRentalLine DNRASGetRentalLine(InventTransId _inventTransId)
    {
        RORRentalLine ret;

        switch (rentalLineOrig.TableId)
        {
            case tableNum(SalesLine):
                ret = SalesLine::findInventTransId(_inventTransId, true);
                break;

            case tableNum(InventTransferLine):
                InventTransferLine inventTransLine;

                select firstonly forupdate inventTransLine
                where inventTransLine.InventTransId == _inventTransId;

                ret = inventTransLine;
                break;

            case tableNum(SalesQuotationLine):
                ret = SalesQuotationLine::findInventTransId(_inventTransId, true);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASAssignObjectToSplitRentalLine</Name>
				<Source><![CDATA[
    private void DNRASAssignObjectToSplitRentalLine(DNRTmpIdValue _tmpObjectAvailabilityNotExist, RORRentalLine _splitRentalLine)
    {
        this.parmRentalLine(_splitRentalLine);
        this.setNewSerialNum(_tmpObjectAvailabilityNotExist.StrValue);

        this.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASGetRentalQty</Name>
				<Source><![CDATA[
    public SalesQty DNRASGetRentalQty()
    {
        return rentalLineOrig.RentQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASGetAssignedQty</Name>
				<Source><![CDATA[
    public SalesQty DNRASGetAssignedQty()
    {
        select count(RecId) from tmpObjectAssignmentData;
        return tmpObjectAssignmentData.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASGetRemainingQty</Name>
				<Source><![CDATA[
    public SalesQty DNRASGetRemainingQty()
    {
        return (this.DNRASGetRentalQty() - this.DNRASGetAssignedQty());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>