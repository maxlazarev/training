<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASSalesPurchOrderSummaryOverviewForm_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRASSalesPurchOrderSummaryOverviewForm_Purch extends DNRASSalesPurchOrderSummaryOverviewForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcItemQtyMap</Name>
				<Source><![CDATA[
    protected Map calcItemQtyMap()
    {
        PurchTable purchTable = callerRecord;
        Map itemQtyMap = new Map(Types::String, Types::Container);

        // These values are relevant for purchase order lines.
        PurchOrderedQty totalPurchQty;
        PurchQty invoicedInTotal, totalInvoiceRemainder, receivedInTotal, totalDeliverRemainder;
        UnpostedInvoicePurchQty totalInvoicePending;
        PurchQtyRegistered registeredInTotal;
        PurchQtyArrived arrivedInTotal;
        PurchQtyOrdered orderedInTotal;

        SalesQty deliveredInTotal;  // this value is only relevant for sales order lines; ignore!
        
        PurchLine purchLineLocal;

        while select purchLineLocal
        where purchLineLocal.PurchId == purchTable.PurchId
        {
            container quantities = (itemQtyMap.exists(purchLineLocal.ItemId) ?
                                    itemQtyMap.lookup(purchLineLocal.ItemId) :
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

            [totalPurchQty,
             invoicedInTotal,
             totalInvoiceRemainder,
             totalInvoicePending,
             receivedInTotal,
             deliveredInTotal,  // ignore!
             totalDeliverRemainder,
             registeredInTotal,
             arrivedInTotal,
             orderedInTotal] = quantities;

            totalPurchQty += purchLineLocal.PurchQty;
            invoicedInTotal += purchLineLocal.invoicedInTotal();
            totalInvoiceRemainder += purchLineLocal.RemainPurchFinancial;
            totalInvoicePending += purchLineLocal.calcPendingQtyPurchDisplay();
            receivedInTotal += purchLineLocal.receivedInTotal();
            totalDeliverRemainder += purchLineLocal.RemainPurchPhysical;
            registeredInTotal += purchLineLocal.registeredInPurchUnit();
            arrivedInTotal += purchLineLocal.arrivedInPurchUnit();
            orderedInTotal += purchLineLocal.orderedInPurchUnit();

            quantities = [totalPurchQty,
                          invoicedInTotal,
                          totalInvoiceRemainder,
                          totalInvoicePending,
                          receivedInTotal,
                          deliveredInTotal,  // ignore!
                          totalDeliverRemainder,
                          registeredInTotal,
                          arrivedInTotal,
                          orderedInTotal];
            
            itemQtyMap.insert(purchLineLocal.ItemId, quantities);
        }

        return itemQtyMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>