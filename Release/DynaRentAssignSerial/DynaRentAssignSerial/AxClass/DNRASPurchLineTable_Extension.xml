<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASPurchLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(PurchLine))]
public final class DNRASPurchLineTable_Extension
{
    // Extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DNRASMaySplitLine</Name>
				<Source><![CDATA[
    public boolean DNRASMaySplitLine()
    {
        return (this.PurchQty > 1 && this.DNRASIsSerializedRental());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASIsSerializedRental</Name>
				<Source><![CDATA[
    public boolean DNRASIsSerializedRental()
    {
        return this.inventTable().BOBIsSerializedRentalItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASSalesQtyModified</Name>
				<Source><![CDATA[
    public void DNRASSalesQtyModified()
    {
        PurchLine purchLineOrig = this.orig();
        PurchQty purchQtyBeforeUpdate = purchLineOrig.PurchQty;

        // This functionality is only supported until (and including) the 'confirmed' status, so we are only concerned with the below quantities.
        this.QtyOrdered = this.calcQtyOrdered();
        this.RemainPurchPhysical = this.PurchQty;
        this.RemainInventPhysical = this.QtyOrdered;

        this.RORRentalGrossAmount = this.PurchPrice * this.PurchQty;
        this.LineAmount = this.calcLineAmountForced();
        this.RORDeliveryGrossAmount = (this.RORDeliveryGrossAmount / purchQtyBeforeUpdate) * this.PurchQty;
        this.RORDeliveryNetAmount = this.RORDeliveryGrossAmount - ((this.RORDeliveryGrossAmount / 100) * this.RORDeliveryPercentage);
        this.RORReturnGrossAmount = (this.RORReturnGrossAmount / purchQtyBeforeUpdate) * this.PurchQty;
        this.RORReturnNetAmount = this.RORReturnGrossAmount - ((this.RORReturnGrossAmount / 100) * this.RORReturnPercentage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_PurchLine_OnUpdating</Name>
				<Source><![CDATA[
    // Event-handler methods

    [SuppressBPWarningAttribute("BPParameterNotUsed", "The parameter '_eventArgs' is mandatory for event-handlers."),
     DataEventHandler(tableStr(PurchLine), DataEventType::Updating)]
    public static void DNRASEvent_PurchLine_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            PurchLine purchLine = _sender as PurchLine;
            PurchLine purchLineOrig = purchLine.orig();

            if (purchLine.PurchQty != purchLineOrig.PurchQty)
            {
                DNASRentalLineQtyManager qtyManager = DNASRentalLineQtyManager::construct(purchLine);
                qtyManager.run();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>