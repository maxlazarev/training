<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASSalesPurchOrderSummaryOverviewForm_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRASSalesPurchOrderSummaryOverviewForm_Sales extends DNRASSalesPurchOrderSummaryOverviewForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcItemQtyMap</Name>
				<Source><![CDATA[
    protected Map calcItemQtyMap()
    {
        SalesTable salesTable = callerRecord;

        SalesLine salesLineLocal;
        Map itemQtyMap = new Map(Types::String, Types::Container);

        // These values are relevant for sales order lines.
        SalesOrderedQty totalSalesQty;
        SalesQty invoicedInTotal, totalInvoiceRemainder, deliveredInTotal, totalDeliverRemainder, registeredInTotal;
        InventQty orderedInTotal;

        // These values are only relevant for purchase order lines; ignore!
        UnpostedInvoicePurchQty totalInvoicePending;
        PurchQty receivedInTotal;
        PurchQtyArrived arrivedInTotal;

        while select salesLineLocal
        where salesLineLocal.SalesId == salesTable.SalesId
        {
            container quantities = (itemQtyMap.exists(salesLineLocal.ItemId) ?
                                    itemQtyMap.lookup(salesLineLocal.ItemId) :
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

            [totalSalesQty,
             invoicedInTotal,
             totalInvoiceRemainder,
             totalInvoicePending,  // ignore!
             receivedInTotal,  // ignore!
             deliveredInTotal,
             totalDeliverRemainder,
             registeredInTotal,
             arrivedInTotal,  // ignore!
             orderedInTotal] = quantities;

            totalSalesQty += salesLineLocal.SalesQty;
            invoicedInTotal += salesLineLocal.invoicedInTotal();
            totalInvoiceRemainder += salesLineLocal.RemainSalesFinancial;
            deliveredInTotal += salesLineLocal.deliveredInTotal();
            totalDeliverRemainder += salesLineLocal.RemainSalesPhysical;
            registeredInTotal += salesLineLocal.registeredInSalesUnit();
            orderedInTotal += salesLineLocal.calcQtyOrdered();

            quantities = [totalSalesQty,
                          invoicedInTotal,
                          totalInvoiceRemainder,
                          totalInvoicePending,  // ignore!
                          receivedInTotal,  // ignore!
                          deliveredInTotal,
                          totalDeliverRemainder,
                          registeredInTotal,
                          arrivedInTotal,  // ignore!
                          orderedInTotal];
            
            itemQtyMap.insert(salesLineLocal.ItemId, quantities);
        }

        return itemQtyMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>