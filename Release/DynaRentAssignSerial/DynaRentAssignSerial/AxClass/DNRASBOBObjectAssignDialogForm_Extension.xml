<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASBOBObjectAssignDialogForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(BOBObjectAssignDialog))]
public final class DNRASBOBObjectAssignDialogForm_Extension
{
    private boolean allowMultiAssign;
    private BOBTmpObjectAvailability tmpObjectAssignmentData;
    private DNRTmpIdValue tmpObjectAvailabilityNotExist;

    // Chain-of-Command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            allowMultiAssign = engine.DNRASGetAllowMultiAssign();

            if (allowMultiAssign)
            {
                this.DNRASUpdateDesign();

                engine.DNRASSetTmpObjectAssignmentData(tmpObjectAssignmentData);
                engine.DNRASSetTmpObjectAvailabilityNotExist(tmpObjectAvailabilityNotExist);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAssignObject</Name>
				<Source><![CDATA[
    public void doAssignObject(InventSerialId _assignedSerialNumber)
    {
        next doAssignObject(_assignedSerialNumber);

        if (allowMultiAssign && this.DNRASDialogValidateSelection())
        {
            engine.DNRASDoMultiAssign(false);
            this.closeOk();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkPhysicalTableInstance</Name>
				<Source><![CDATA[
    public void linkPhysicalTableInstance()
    {
        next linkPhysicalTableInstance();

        if (allowMultiAssign)
        {
            tmpObjectAssignmentData.linkPhysicalTableInstance(DNRASTmpObjectAssignment_ds.cursor());
            tmpObjectAvailabilityNotExist.linkPhysicalTableInstance(DNRASTmpIdValue_ds.cursor());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASUpdateDesign</Name>
				<Source><![CDATA[
    // Extension methods

    private void DNRASUpdateDesign()
    {
        FormDesign formDesign = this.design();

        formDesign.controlName(formControlStr(BOBObjectAssignDialog, TabPageGrid)).visible(false);
        formDesign.controlName(formControlStr(BOBObjectAssignDialog, RORCreateSubRentalOrder)).enabled(false);

        DNRASTabPageGrid.visible(true);
        DNRASTabPageTmpAssignGrid.visible(true);
        DNRASOkConfirmButton.visible(callerRentalLine.TableId == tableNum(SalesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASValidateAddSelection</Name>
				<Source><![CDATA[
    private boolean DNRASValidateAddSelection()
    {
        boolean ret = true;
        SalesQty nRecordsMarked = tmpObjectAvailability_ds.recordsMarked().lastIndex();
        SalesQty remainingQty = engine.DNRASGetRemainingQty();

        if (nRecordsMarked > remainingQty)
        {
            ret = checkFailed(strFmt("@DNR:AssignSerialBusinessObjectsSelection", nRecordsMarked, remainingQty));
        }
        else if (!remainingQty)
        {
            ret = checkFailed("@DNR:AssignSerialCannotSelectBusinessObjects");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASAddSelection</Name>
				<Source><![CDATA[
    public void DNRASAddSelection()
    {
        if (this.DNRASValidateAddSelection())
        {
            RecordInsertList tmpObjectAssignmentInsertList = new RecordInsertList(tableNum(BOBTmpObjectAvailability), false, false, false, false, false, tmpObjectAssignmentData);
            RecordInsertList tmpObjectAvaiabilityNotExistInsertList = new RecordInsertList(tableNum(DNRTmpIdValue), false, false, false, false, false, tmpObjectAvailabilityNotExist);

            ttsbegin;

            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(tmpObjectAvailability_ds);
            BOBTmpObjectAvailability tmpObjectAvailabilityData = helper.getFirst();
   
            while (tmpObjectAvailabilityData.RecId)
            {
                buf2Buf(tmpObjectAvailabilityData, tmpObjectAssignmentData);
                tmpObjectAssignmentInsertList.add(tmpObjectAssignmentData);

                tmpObjectAvailabilityNotExist.StrValue = tmpObjectAvailabilityData.InventSerialId;
                tmpObjectAvaiabilityNotExistInsertList.add(tmpObjectAvailabilityNotExist);

                tmpObjectAvailabilityData = helper.getNext();
            }

            tmpObjectAssignmentInsertList.insertDatabase();
            tmpObjectAvaiabilityNotExistInsertList.insertDatabase();

            ttscommit;

            tmpObjectAvailability_ds.research();
            DNRASTmpObjectAssignment_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASRemoveSelection</Name>
				<Source><![CDATA[
    public void DNRASRemoveSelection(boolean _removeAll = false)
    {
        BOBTmpObjectAvailability tmpObjectAvailabilityData;

        ttsbegin;

        if (!_removeAll)
        {
            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(DNRASTmpObjectAssignment_ds);
            tmpObjectAvailabilityData = helper.getFirst();
   
            while (tmpObjectAvailabilityData.RecId)
            {
                this.DNRASDialogRemove(tmpObjectAvailabilityData);
                tmpObjectAvailabilityData = helper.getNext();
            }

        }
        else
        {
            tmpObjectAvailabilityData = DNRASTmpObjectAssignment_ds.getFirst();

            while (tmpObjectAvailabilityData.RecId)
            {
                this.DNRASDialogRemove(tmpObjectAvailabilityData);
                tmpObjectAvailabilityData = DNRASTmpObjectAssignment_ds.getNext();
            }
        }

        ttscommit;

        tmpObjectAvailability_ds.research();
        DNRASTmpObjectAssignment_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASDialogRemove</Name>
				<Source><![CDATA[
    private void DNRASDialogRemove(BOBTmpObjectAvailability _recordToDelete)
    {
        ttsbegin;

        select firstonly forupdate tmpObjectAvailabilityNotExist
        where tmpObjectAvailabilityNotExist.StrValue == _recordToDelete.InventSerialId;

        tmpObjectAvailabilityNotExist.delete();
        _recordToDelete.delete();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASDoMultiAssignAndConfirm</Name>
				<Source><![CDATA[
    public void DNRASDoMultiAssignAndConfirm()
    {
        if (this.DNRASDialogValidateSelection())
        {
            engine.DNRASDoMultiAssign(true);
            this.closeOk();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASDisplayRentalQty</Name>
				<Source><![CDATA[
    display SalesQty DNRASDisplayRentalQty()
    {
        return engine.DNRASGetRentalQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASGetTmpObjectAssignmentData</Name>
				<Source><![CDATA[
    public BOBTmpObjectAvailability DNRASGetTmpObjectAssignmentData()
    {
        return tmpObjectAssignmentData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASDialogValidateSelection</Name>
				<Source><![CDATA[
    private boolean DNRASDialogValidateSelection()
    {
        boolean ret = true;

        while select StrValue from tmpObjectAvailabilityNotExist
        {
            engine.setNewSerialNum(tmpObjectAvailabilityNotExist.StrValue);
            ret = ret && engine.validate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_BOBObjectAssignDialog_DNRASTmpIdValueDS_OnInitialized</Name>
				<Source><![CDATA[
    // Event-handler methods

    [FormDataSourceEventHandler(formDataSourceStr(BOBObjectAssignDialog, DNRASTmpIdValue), FormDataSourceEventType::Initialized)]
    public static void DNRASEvent_BOBObjectAssignDialog_DNRASTmpIdValueDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            _sender.queryBuildDataSource().addLink(fieldNum(BOBTmpObjectAvailability, InventSerialId), fieldNum(DNRTmpIdValue, StrValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_BOBObjectAssignDialog_DNRASOkConfirmButtonCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BOBObjectAssignDialog, DNRASOkConfirmButton), FormControlEventType::Clicked)]
    public static void DNRASEvent_BOBObjectAssignDialog_DNRASOkConfirmButtonCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.DNRASDoMultiAssignAndConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_BOBObjectAssignDialog_DNRASButtonRemoveCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BOBObjectAssignDialog, DNRASButtonRemove), FormControlEventType::Clicked)]
    public static void DNRASEvent_BOBObjectAssignDialog_DNRASButtonRemoveCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.DNRASRemoveSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_BOBObjectAssignDialog_DNRASButtonRemoveAllCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BOBObjectAssignDialog, DNRASButtonRemoveAll), FormControlEventType::Clicked)]
    public static void DNRASEvent_BOBObjectAssignDialog_DNRASButtonRemoveAllCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.DNRASRemoveSelection(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_BOBObjectAssignDialog_DNRASButtonAddCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BOBObjectAssignDialog, DNRASButtonAdd), FormControlEventType::Clicked)]
    public static void DNRASEvent_BOBObjectAssignDialog_DNRASButtonAddCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.DNRASAddSelection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>