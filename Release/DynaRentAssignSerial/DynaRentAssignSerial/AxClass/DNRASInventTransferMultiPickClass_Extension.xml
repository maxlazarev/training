<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASInventTransferMultiPickClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventTransferMultiPick))]
public final class DNRASInventTransferMultiPickClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    // Chain-of-Command wrapper methods

    // The lines on the relevant transfer order must be split before the 'InventTransferParmTable' record is inserted, because
    // 'InventTransferParmLine' records that are created upon the creation of/upon updating the 'InventTransferParmTable' record must use the split
    // transfer order lines as basis (otherwise errors will occur while creating the picking list). The only downside of this is that if the user
    // decides to cancel the creation of the picking list, the lines on the relevant transfer order will remain split (this will not be reverted).
    // TODO: This must be revised when reviewing the 'Assign Serial' functionality as a whole.
    void insert (Common _common, ParmBuffer _inventTransferParmTable)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial))
        &&  _common.TableId == tableNum(InventTransferTable))
        {
            InventTransferTable inventTransferTableLocal = _common;

            if (inventTransferTableLocal.RecId && inventTransferTableLocal.RTPIsRental)
            {
                InventTransferLine inventTransferLine;
                InventTable inventTable;
                EcoResProduct ecoResProduct;
                BOBRentalType rentalType;

                ttsbegin;

                while select inventTransferLine
                where inventTransferLine.TransferId == inventTransferTableLocal.TransferId
                &&    inventTransferLine.QtyTransfer > 1
                    exists join inventTable
                    where inventTable.ItemId == inventTransferLine.ItemId
                        join TableId from ecoResProduct
                        where ecoResProduct.RecId == inventTable.Product
                            join TableId from rentalType
                            where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                            &&    rentalType.Classification == BOBRentalTypeClassification::Serialized
                {
                    DNRASSplitEngine splitEngine = DNRASSplitEngine::construct(inventTransferLine, inventTransferLine.QtyTransfer - 1);
                    splitEngine.run();
                }

                ttscommit;
            }
        }

        next insert(_common, _inventTransferParmTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>