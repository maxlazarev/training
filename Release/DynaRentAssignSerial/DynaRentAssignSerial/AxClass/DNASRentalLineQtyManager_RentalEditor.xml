<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNASRentalLineQtyManager_RentalEditor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNASRentalLineQtyManager_RentalEditor extends DNASRentalLineQtyManager
{
    RORRentalEditorLine rentalEditorLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setActiveRentalLine</Name>
				<Source><![CDATA[
    protected void setActiveRentalLine(RORRentalLine _rentalLine)
    {
        rentalEditorLine = _rentalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParentLineQty</Name>
				<Source><![CDATA[
    protected void validateParentLineQty()
    {
        if (rentalEditorLine.ParentLineRecId)
        {
            RORRentalEditorLine parentLine;
           
            select firstonly ItemId, RentalQty from parentLine
            where parentLine.HeaderId == rentalEditorLine.HeaderId
            &&    parentLine.RecId == rentalEditorLine.ParentLineRecId;

            if (parentLine && (real2int(rentalEditorLine.RentalQty) mod real2int(parentLine.RentalQty) != 0))
            {
                throw error(strFmt("@DNR:AssignSerialChildLineQtyUpdateInvalid", rentalEditorLine.ItemId, parentLine.ItemId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChildLinesQty</Name>
				<Source><![CDATA[
    protected void updateChildLinesQty()
    {
        Qty parentRentalQty = rentalEditorLine.RentalQty;
        RORRentalEditorLine  parentRentalLineOrig = rentalEditorLine.orig();
        Qty parentRentalQtyBeforeUpdate = parentRentalLineOrig.RentalQty;

        ttsbegin;

        RAGParameters ragParameters = RAGParameters::find();
        RORRentalEditorLine childLine;

        while select forupdate childLine
        where childLine.HeaderId == rentalEditorLine.HeaderId
        &&    childLine.ParentLineRecId == rentalEditorLine.RecId
            notexists join ragParameters
            where ragParameters.ItemIdInsurance == rentalEditorLine.ItemId
            ||    ragParameters.ItemIdTransport == rentalEditorLine.ItemId
            ||    ragParameters.ItemIdReturnTransport == rentalEditorLine.ItemId
        {
            if (real2int(childLine.RentalQty) mod real2int(parentRentalQtyBeforeUpdate) != 0)
            {
                rentalEditorLine.RentalQty = parentRentalQtyBeforeUpdate;
                throw error(strFmt("@DNR:AssignSerialParentLineQtyUpdateInvalid", rentalEditorLine.ItemId, childLine.ItemId, parentRentalQtyBeforeUpdate));
            }

            if (parentRentalQty > parentRentalQtyBeforeUpdate)
            {
                childLine.RentalQty = childLine.RentalQty + ((childLine.RentalQty / parentRentalQtyBeforeUpdate) * (parentRentalQty - parentRentalQtyBeforeUpdate));
            }
            else
            {
                childLine.RentalQty = childLine.RentalQty - ((childLine.RentalQty / parentRentalQtyBeforeUpdate) * (parentRentalQtyBeforeUpdate - parentRentalQty));
            }

            using(DNRASUpdateRelatedLinesOnQtyChangeDisposableContext context =
                  DNRASUpdateRelatedLinesOnQtyChangeDisposableContext::current() ?
                  DNRASUpdateRelatedLinesOnQtyChangeDisposableContext::current() :
                  new DNRASUpdateRelatedLinesOnQtyChangeDisposableContext())
            {
                context.parmMustValidateParentLineQty(false);
                childLine.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>