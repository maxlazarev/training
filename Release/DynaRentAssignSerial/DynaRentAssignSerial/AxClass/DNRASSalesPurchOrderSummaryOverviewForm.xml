<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASSalesPurchOrderSummaryOverviewForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class DNRASSalesPurchOrderSummaryOverviewForm
{
    Common callerRecord;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRASSalesPurchOrderSummaryOverviewForm construct(Common _callerRecord)
    {
        DNRASSalesPurchOrderSummaryOverviewForm ret = DNRASSalesPurchOrderSummaryOverviewForm::constructNoThrow(_callerRecord);

        if (!ret)
        {
            throw error(strFmt("@SYS31187", tableId2name(_callerRecord.TableId)));
        }

        ret.setCallerRecord(_callerRecord);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerRecord</Name>
				<Source><![CDATA[
    private void setCallerRecord(Common _callerRecord)
    {
        callerRecord = _callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    public static DNRASSalesPurchOrderSummaryOverviewForm constructNoThrow(Common _callerRecord)
    {
        DNRASSalesPurchOrderSummaryOverviewForm ret;

        switch (_callerRecord.TableId)
        {
            case tableNum(SalesTable):
                ret = new DNRASSalesPurchOrderSummaryOverviewForm_Sales();
                break;

            case tableNum(SalesQuotationTable):
                ret = new DNRASSalesPurchOrderSummaryOverviewForm_Quotation();
                break;

            case tableNum(PurchTable):
                ret = new DNRASSalesPurchOrderSummaryOverviewForm_Purch();
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    public Common populateTmpData()
    {
        ttsbegin;

        DNRASTmpSalesPurchOrderSummaryOverview tmpData;

        Map itemQtyMap = this.calcItemQtyMap();
        MapEnumerator enumerator = itemQtyMap.getEnumerator();
        RecordInsertList insertList = new RecordInsertList(tableNum(DNRASTmpSalesPurchOrderSummaryOverview), false, false, false, false, false, tmpData);

        while(enumerator.moveNext())
        {
            ItemId itemId = enumerator.currentKey();
            container quantities = enumerator.currentValue();

            tmpData.clear();
            tmpData.SalesPurchItemId = itemId;
            
            [tmpData.SalesPurchQty,
             tmpData.SalesPurchInvoicedInTotal,
             tmpData.SalesPurchInvoiceRemainder,
             tmpData.PurchPendingInvoice,
             tmpData.PurchReceivedInTotal,
             tmpData.SalesDeliveredInTotal,
             tmpData.SalesPurchDeliverRemainder,
             tmpData.SalesPurchRegisteredInTotal,
             tmpData.PurchArrivedInTotal,
             tmpData.SalesPurchOrderedInTotal] = quantities;

            insertList.add(tmpData);
        }

        insertList.insertDatabase();

        ttscommit;

        return tmpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItemQtyMap</Name>
				<Source><![CDATA[
    abstract protected Map calcItemQtyMap()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>