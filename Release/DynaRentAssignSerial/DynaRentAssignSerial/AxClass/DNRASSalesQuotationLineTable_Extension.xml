<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRASSalesQuotationLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesQuotationLine))]
public final class DNRASSalesQuotationLineTable_Extension
{
    // Extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DNRASNextLineCreationSequence</Name>
				<Source><![CDATA[
    public SalesQuoteLineCreationSequenceNumber DNRASNextLineCreationSequence()
    {
        SalesQuoteLineCreationSequenceNumber currentLineCreationSequenceNumber = 0;
        SalesQuotationLine salesQuotationLine;

        select maxof(LineCreationSequenceNumber)
        from salesQuotationLine
        where salesQuotationLine.QuotationId == this.QuotationId;
            
        if (salesQuotationLine)
        {
            currentLineCreationSequenceNumber = salesQuotationLine.LineCreationSequenceNumber;
        }

        return (currentLineCreationSequenceNumber + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASMaySplitLine</Name>
				<Source><![CDATA[
    public boolean DNRASMaySplitLine()
    {
        return (this.SalesQty > 1 && this.inventTable().BOBIsSerializedRentalItem());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASSalesQtyModified</Name>
				<Source><![CDATA[
    public void DNRASSalesQtyModified()
    {
        SalesQuotationLine salesQuotationLineOrig = this.orig();

        SalesQty salesQtyBeforeUpdate = salesQuotationLineOrig.SalesQty;

        // This functionality is only supported until (and including) the 'confirmed' status, so we are only concerned with the below quantities.
        this.QtyOrdered = this.calcQtyOrdered();
        this.RemainSalesPhysical = this.SalesQty;
        this.RemainInventPhysical = this.QtyOrdered;

        this.RORRentalGrossAmount = this.SalesPrice * this.SalesQty;
        this.LineAmount = this.calcLineAmountForced();
        this.RORDeliveryGrossAmount = (this.RORDeliveryGrossAmount / salesQtyBeforeUpdate) * this.SalesQty;
        this.RORDeliveryNetAmount = this.RORDeliveryGrossAmount - ((this.RORDeliveryGrossAmount / 100) * this.RORDeliveryPercentage);
        this.RORReturnGrossAmount = (this.RORReturnGrossAmount / salesQtyBeforeUpdate) * this.SalesQty;
        this.RORReturnNetAmount = this.RORReturnGrossAmount - ((this.RORReturnGrossAmount / 100) * this.RORReturnPercentage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRASEvent_SalesQuotationLine_OnUpdating</Name>
				<Source><![CDATA[
    // Event-handler methods

    [SuppressBPWarningAttribute("BPParameterNotUsed", "The parameter '_eventArgs' is mandatory for event-handlers."),
     DataEventHandler(tableStr(SalesQuotationLine), DataEventType::Updating)]
    public static void DNRASEvent_SalesQuotationLine_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(DNRASAssignSerial)))
        {
            SalesQuotationLine salesQuotationLine = _sender as SalesQuotationLine;
            SalesQuotationLine salesQuotationLineOrig = salesQuotationLine.orig();

            if (salesQuotationLine.SalesQty != salesQuotationLineOrig.SalesQty)
            {
                DNASRentalLineQtyManager qtyManager = DNASRentalLineQtyManager::construct(salesQuotationLine);
                qtyManager.run();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>