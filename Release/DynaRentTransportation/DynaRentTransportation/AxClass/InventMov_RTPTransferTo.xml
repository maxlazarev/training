<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_RTPTransferTo</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(InventTransferLine),InventMovSubType::BOBCompensatingTransTo)]
class InventMov_RTPTransferTo extends InventMov_TransferTo
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRemainFinancialUnit</Name>
				<Source><![CDATA[
    public void addRemainFinancialUnit(UnitQty _qtyUnit, InventQty _qty)
    {
        // do nothing - only when posting issue (i.e. "standard" InventTrans) should this be updated
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void addRemainPhysical(InventQty _inventQty)
    {
        // do nothing - only when posting issue (i.e. "standard" InventTrans) should this be updated
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysicalUnit</Name>
				<Source><![CDATA[
    public void addRemainPhysicalUnit(UnitQty _qtyUnit)
    {
        // do nothing - only when posting issue (i.e. "standard" InventTrans) should this be updated
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransPosting</Name>
				<Source><![CDATA[
    public boolean createInventTransPosting()
    {
        return (this.transQty() < 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPTransTime</Name>
				<Source><![CDATA[
    public TimeOfDay RTPTransTime()
    {
        return inventTransferLine.RTPReceiveTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        if (! inventDim.InventDimId)
        {
            inventDim = inventTransferLine.inventDimReceive(inventTransferTable);
        }
    
        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    public NoYes isTransfer()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventTransferLine.RecId)
        {
            return null;
        }
    
        return InventMov_RTPTransferTo::newFromInventTransferLine(inventTransferLine.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainFinancialUnit</Name>
				<Source><![CDATA[
    public UnitQty remainFinancialUnit()
    {
        return inventTransferLine.QtyRemainShip * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty remainPhysical()
    {
        return inventTransferLine.QtyRemainShip * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysicalUnit</Name>
				<Source><![CDATA[
    public UnitQty remainPhysicalUnit()
    {
        return inventTransferLine.QtyRemainShip * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventTransferLine.InventTransIdReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty transQty()
    {
        return inventTransferLine.QtyTransfer * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    public InventQty transQtyUnit()
    {
        return inventTransferLine.QtyTransfer * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimaryMovement</Name>
				<Source><![CDATA[
    public boolean isPrimaryMovement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransferLine</Name>
				<Source><![CDATA[
    public static InventMov_RTPTransferTo newFromInventTransferLine(InventTransferLine      _inventTransferLine,
                                                                    InventType              _inventType         = new InventType(_inventTransferLine))
    {
        InventMov_RTPTransferTo movement = new InventMov_RTPTransferTo(_inventTransferLine, _inventType);
        movement.inventMovSubType(InventMovSubType::BOBCompensatingTransTo);
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    public boolean mustBeAutoReserved()
    {
        // We dont want to autoReserve the compensating transaction else there is a warning during BO assignment
         return false; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    public boolean mustBePicked()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>