<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPInventUpd_FinancialClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpd_Financial))]
public final class RTPInventUpd_FinancialClass_Extension
{
    private InventTransferParmLine  inventTransferParmLine;
    private InventQty               updateQty;
    private PdsCWInventQty          cwQty;
    private CostAmount              costAmountSecCur_RU;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newInventTransferLineShip</Name>
				<Source><![CDATA[
    //****************************** COC Wrappers *************************** 
    public static InventUpd_Financial newInventTransferLineShip(InventMovement          _movement,
                                                                LedgerVoucher           _ledgerVoucher,
                                                                InventTransferParmLine  _inventTransferParmLine,
                                                                CostAmount              _costAmount,
                                                                InventQty               _updateQty,
                                                                InventDim               _inventDim,
                                                                InventDimParm           _inventDimParm,
                                                                PdsCWInventQty          _cwQty,
                                                                CostAmount              _costAmountSecCur_RU)
        
    {
        InventUpd_Financial ret = next newInventTransferLineShip(_movement, _ledgerVoucher, _inventTransferParmLine, _costAmount, _updateQty, _inventDim, _inventDimParm, _cwQty, _costAmountSecCur_RU);
        ret.RTPInitConstructorParameters(_inventTransferParmLine, _updateQty, _cwQty, _costAmountSecCur_RU);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTransferLineReceive</Name>
				<Source><![CDATA[
    public static InventUpd_Financial newInventTransferLineReceive(InventMovement       _movement,
                                                                   LedgerVoucher           _ledgerVoucher,
                                                                   CostAmount              _costAmount,
                                                                   InventQty               _updateQty,
                                                                   InventDim               _inventDim,
                                                                   InventDimParm           _inventDimParm,
                                                                   PdsCWInventQty          _cwQty,
                                                                   CostAmount              _costAmountSecCur_RU)
    {
        InventUpd_Financial ret = next newInventTransferLineReceive(_movement, _ledgerVoucher, _costAmount, _updateQty, _inventDim, _inventDimParm, _cwQty, _costAmountSecCur_RU);
        ret.RTPInitConstructorParameters(null, _updateQty, _cwQty, _costAmountSecCur_RU);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public CostAmountSecCur_RU updateNow()
    {
        CostAmountSecCur_RU ret = next updateNow();
        
        if (financial)
        {
            if (!this.BOBParmIsCompensatingTrans()
            &&  !this.BOBParmBlockUpdateCompensatingTrans())
            {
                this.RTPCheckUpdateCompensatingTrans();
            }
        }
        
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventUpd_Physical</Name>
				<Source><![CDATA[
    protected void initializeInventUpd_Physical(InventUpd_Physical _inventUpd_Physical)
    {
        next initializeInventUpd_Physical(_inventUpd_Physical);
        
        if(!this.BOBParmIsCompensatingTrans())
        {
            // This will finally be stamped on inventTrans field BOBPckSlpUpdDateTime and finally be used for Rental Transaction Start date/time
            _inventUpd_Physical.BOBParmFormLetterUpdDateTime(movement.BOBParmTransDate(), movement.BOBParmTransTime());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitConstructorParameters</Name>
				<Source><![CDATA[
    //*************************** Extension Methods ************************************

    private void RTPInitConstructorParameters(InventTransferParmLine  _inventTransferParmLine,
                                              InventQty               _updateQty,
                                              PdsCWInventQty          _cwQty,
                                              CostAmount              _costAmountSecCur_RU)
    {
        inventTransferParmLine  = _inventTransferParmLine;
        updateQty               = _updateQty;
        cwQty                   = _cwQty;
        costAmountSecCur_RU     = _costAmountSecCur_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPCheckUpdateCompensatingTrans</Name>
				<Source><![CDATA[
    // Creates Compensating transactions for Rental Transfer Orders when Shipped or Recieved
    private void RTPCheckUpdateCompensatingTrans()
    {
        InventUpd_Financial     inventUpd_Financial;
        InventMovement          inventMovement;
        InventTransferLine      inventTransferLine;
        
        if(movement.buffer().TableId == tableNum(InventTransferLine))
        {
            inventTransferLine = movement.buffer() as InventTransferLine;

            if (inventTransferLine.RORTradeType == RORTradeType::Rental || inventTransferLine.RORTradeType == RORTradeType::SubRental)
            {
                switch(movement.inventMovSubType())
                {
                    case InventMovSubType::TransferOrderTransitFrom:
                        inventMovement = InventMov_RTPTransferTransitFrom::newFromInventTransferLine(inventTransferLine);
                        break;

                    case InventMovSubType::TransferOrderTransitTo:
                        inventMovement = InventMov_RTPTransferTransitTo::newFromInventTransferLine(inventTransferLine);
                        break;

                    case InventMovSubType::None :
                        inventMovement = InventMov_RTPTransferFrom::newFromInventTransferLine(inventTransferLine);
                        break;
                
                    case InventMovSubType::TransferOrderTo:
                        inventMovement = InventMov_RTPTransferTo::newFromInventTransferLine(inventTransferLine);
                        break;
                }

            }
        }

        if (inventMovement)
        {
            inventMovement.inventTransOriginId(movement.inventTransOriginId());


            if (movement is InventMov_TransferFrom)
            {
                inventUpd_Financial = InventUpd_Financial::newInventTransferLineShip(inventMovement,
                                                                                    this.parmLedgerVoucher(),
                                                                                    inventTransferParmLine,
                                                                                    -this.updCostAmountInvent(),
                                                                                    updateQty,
                                                                                    this.parmInventDim(),
                                                                                    this.parmInventDimParm(),
                                                                                    cwQty,
                                                                                    costAmountSecCur_RU);
            }
            else
            {
                inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(inventMovement,
                                                                                        this.parmLedgerVoucher(),
                                                                                       -this.updCostAmountInvent(),
                                                                                        updateQty,
                                                                                        this.parmInventDim(),
                                                                                        this.parmInventDimParm(),
                                                                                        cwQty,
                                                                                        costAmountSecCur_RU);
            }

            inventUpd_Financial.BOBParmIsCompensatingTrans(true);
            inventUpd_Financial.parmAllowNegativePhysical(true);
            inventUpd_Financial.updateNow();
            
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>