<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPWPPTransportPlanboardData_PlannedClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(WPPTransportPlanboardData_Planned))]
public final class RTPWPPTransportPlanboardData_PlannedClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isPlanned</Name>
				<Source><![CDATA[
    protected boolean isPlanned(WPPTmpTransportPlanboardData _tmpData)
    {
        boolean ret = next isPlanned(_tmpData);
        
        if (_tmpData.WorkOrderLineStatus == WPPWorkOrderLineStatus::Planned
        && (!_tmpData.ObjectTableRecId || _tmpData.RTPHasShipment())
        && (!_tmpData.RTPHasShipment() || _tmpData.RTPMissingObjectOnShipment() || _tmpData.RTPBulkNotPicked())
        &&  !_tmpData.RTPHasReturnJournal()
        && (_tmpData.TaskType == WPPTaskType::Delivery
            || _tmpData.TaskId == parameters.InternalLoadTaskId
            || _tmpData.TaskType == WPPTaskType::Load
            || _tmpData.TaskId == parameters.InternalDeliveryTaskId))        
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReturnJournalData</Name>
				<Source><![CDATA[
    protected void populateReturnJournalData(WPPTmpTransportPlanboardData _tmpData)
    {
        next populateReturnJournalData(_tmpData);

        InventJournalTable inventJournalTable;
        WPPWorkOrderTable workOrderTable;
        DirPartyTable dirPartyTable;
        CustTable custTable;

        // populate return warehouse instead of warehouse city
        update_recordSet _tmpData
        setting City = inventJournalTable.RTPReturnInventLocationId
        where _tmpData.TaskType == WPPTaskType::InternalDelivery
            join inventJournalTable
                exists join workOrderTable
                where workOrderTable.OrderTableId   == inventJournalTable.TableId
                &&    workOrderTable.OrderRecId     == inventJournalTable.RecId
                &&    workOrderTable.RecId          == _tmpData.WorkOrderTableRecId;

        // set customer from return journal
        update_recordSet _tmpData
        setting CustName = dirPartyTable.Name,
                CustAccount = custTable.AccountNum
            join Name from dirPartyTable
                join AccountNum from custTable
                where custTable.Party == dirPartyTable.RecId
                    join inventJournalTable
                    where inventJournalTable.JournalType == InventJournalType::RTPReturn
                    &&    inventJournalTable.RTPCustAccount == custTable.AccountNum
                        exists join workOrderTable
                        where workOrderTable.OrderTableId   == inventJournalTable.TableId
                        &&    workOrderTable.OrderRecId     == inventJournalTable.RecId
                        &&    workOrderTable.RecId          == _tmpData.WorkOrderTableRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>