<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalFormTable_RTPReturn</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalFormTable_RTPReturn extends InventJournalFormTable
{
    private WPPWorkOrderTable           workOrderTable;
    private QueryBuildRange             qbrJournalRecId;
    private FormButtonControl           ctrlRTPConfirmReturn;
    private FormFunctionButtonControl   ctrlRTPShowWorkOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTableMap _journalTable)
    {
        super(_journalTable);

        journalTable_ds.object(fieldNum(InventJournalTable, RTPCustAccount)).mandatory(true);
        journalTable_ds.object(fieldNum(InventJournalTable, RTPReturnDateTime)).mandatory(true);
        journalTable_ds.object(fieldNum(InventJournalTable, RTPReturnInventLocationId)).mandatory(true);
        journalTable_ds.object(fieldNum(InventJournalTable, RTPVenueCode)).mandatory(RORParameters::find().isWorkLocationMandatory);
        journalTable_ds.object(fieldNum(InventJournalTable, RTPLogisticsPostalAddress)).registerOverrideMethod(methodStr(FormDataObject, lookupReference),
                                                                                                               methodStr(InventJournalFormTable_RTPReturn, LogisticsPostalAddress_OnLookupReference), formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnLookupReference</Name>
				<Source><![CDATA[
    public Common LogisticsPostalAddress_OnLookupReference(FormReferenceControl _formReferenceControl)
    {
        Common ret;
        InventJournalTable inventJournalTable = this.journalTableData().journalTable();
        CustTable custTable = CustTable::find(inventJournalTable.RTPCustAccount);
            
        ret = LogisticsLocationSelectionLookup::lookupAddressForm(_formReferenceControl, custTable, [LogisticsLocationRoleType::Delivery], false);
            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePre</Name>
				<Source><![CDATA[
    public void datasourceActivePre()
    {
        
        boolean             isPosted = journalTable.Posted;
        InventJournalTable  inventJournalTable = this.journalTableData().journalTable();

        super();

        journalTable_ds.object(fieldNum(InventJournalTable, RTPCustAccount)).allowEdit(!isPosted && !inventJournalTable.RTPWorkOrderId && !inventJournalTable.NumOfLines);
        journalTable_ds.object(fieldNum(InventJournalTable, RTPLoadMeter)).allowEdit(!isPosted);
        journalTable_ds.object(fieldNum(InventJournalTable, RTPReturnDateTime)).allowEdit(!isPosted && !inventJournalTable.NumOfLines);
        journalTable_ds.object(fieldNum(InventJournalTable, RTPIsReturnedAtWarehouse)).allowEdit(!isPosted 
                                                                                            &&  (!WPPParameters::find().RTPWorkOrderTemplateIdReturn
                                                                                            ||  (inventJournalTable.RTPWorkOrderId && inventJournalTable.RTPDisplayWorkOrderLineStatus() >= WPPWorkOrderLineStatus::Completed)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    public void datasourceLinkActivePre()
    {
        if (formRun && formRun.args().dataset() && formRun.args().dataset() == tableNum(WPPWorkOrderTable))
        {
            this.RTPParmWorkOrderTable(formRun.args().Record());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPre</Name>
				<Source><![CDATA[
    public void datasourceExecuteQueryPre()
    {
        super();
    
        if (workOrderTable && workOrderTable.OrderTableId == tableNum(InventJournalTable))
        {
            qbrJournalRecId.value(SysQuery::value(workOrderTable.orderRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    public void datasourceInitValuePre()
    {
        InventJournalTable  inventJournalTable = this.journalTableData().journalTable();
        
        super();
        
        inventJournalTable.JournalType = InventJournalType::RTPReturn;
        inventJournalTable.initFromInventJournalName(InventJournalName::find(WPPParameters::find().RTPInventJournalId_Return));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    public void enableButtonsActive(boolean _enableInfolog = false)
    {
        super (_enableInfolog);

        InventJournalTable  inventJournalTable = this.journalTableData().journalTable();
        boolean             allowPost;
    
        allowPost =  inventJournalTable.RTPIsReturnedAtWarehouse 
                 && (!inventJournalTable.RTPWorkOrderId || WPPWorkOrderLine::getLowestStatus(inventJournalTable.RTPWorkOrderId) >= WPPWorkOrderLineStatus::Completed);

        if (ctrlCheckJournal && ctrlCheckJournal.enabled())
        {
            ctrlCheckJournal.enabled(allowPost);
        }
    
        FormButtonControl           ctrlConfirmReturn = this.RTPParmCtrlConfirmReturn();
        FormFunctionButtonControl   ctrlShowWorkOrder = this.RTPParmCtrlShowWorkOrder();

        if (ctrlConfirmReturn)
        {
            ctrlConfirmReturn.enabled(!inventJournalTable.RTPWorkOrderId);
        }

        if (ctrlShowWorkOrder)
        {
            ctrlShowWorkOrder.enabled(inventJournalTable.RTPWorkOrderId != '');
        }

        if (ctrlPostJournal && ctrlPostJournal.enabled())
        {
            ctrlPostJournal.enabled(allowPost);
        }

        FormFunctionButtonControl   viewSalesLine   = formRun.design().controlName(formControlStr(InventJournalMovement, RTPSalesLine)) as FormFunctionButtonControl;
        
        if(viewSalesLine)
        {
            viewSalesLine.enabled(inventJournalTable.NumOfLines);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRange</Name>
				<Source><![CDATA[
    public void queryAddRange()
    {
        super();
        
        QueryBuildRange qbrJournalType = journalTable_ds.query().dataSourceTable(tableNum(InventJournalTable)).addRange(fieldNum(InventJournalTable, JournalType));
        qbrJournalType.value(queryValue(InventJournalType::RTPReturn));
        qbrJournalType.status(RangeStatus::Hidden);
        qbrJournalRecId = journalTable_ds.query().dataSourceTable(tableNum(InventJournalTable)).addRange(fieldNum(InventJournalTable, RecId));
        qbrJournalRecId.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPParmWorkOrderTable</Name>
				<Source><![CDATA[
    private WPPWorkOrderTable RTPParmWorkOrderTable(WPPWorkOrderTable _workOrderTable = workOrderTable)
    {
        if (!prmisDefault(_workOrderTable))
        {
            workOrderTable = _workOrderTable;
        }
    
        return _workOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPParmCtrlConfirmReturn</Name>
				<Source><![CDATA[
    public FormButtonControl RTPParmCtrlConfirmReturn(FormButtonControl _ctrlRTPConfirmReturn = ctrlRTPConfirmReturn)
    {
        ctrlRTPConfirmReturn = _ctrlRTPConfirmReturn;
        return ctrlRTPConfirmReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPParmCtrlShowWorkOrder</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl RTPParmCtrlShowWorkOrder(FormFunctionButtonControl _ctrlRTPShowWorkOrder = ctrlRTPShowWorkOrder)
    {
        ctrlRTPShowWorkOrder = _ctrlRTPShowWorkOrder;
        return ctrlRTPShowWorkOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>