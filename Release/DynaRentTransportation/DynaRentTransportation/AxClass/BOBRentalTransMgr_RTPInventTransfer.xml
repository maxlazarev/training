<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransMgr_RTPInventTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransMgr_RTPInventTransfer extends BOBRentalTransManager
{
    InventTransferLine  inventTransferLine;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    protected BOBRentalTransActive active()
    {
        return BOBRentalTransActive::Active;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyFrom</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyFrom()
    {
        switch(subStatus)
        {
            case BOBRentalSubStatus::Ordered, BOBRentalSubStatus::Picked:
                return BOBDateTimeCertainty::Firm;
    
            case BOBRentalSubStatus::Delivered, BOBRentalSubStatus::Invoiced:
                return BOBDateTimeCertainty::Fixed;
    
            default:
                throw error("@DNR6063");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyTo</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyTo(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return BOBDateTimeCertainty::Fixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        if(inventTrans.BOBPckSlpUpdDateTime)
        {
            return inventTrans.BOBPckSlpUpdDateTime;
        }
        else
        {
            if(inventMovement is InventMov_TransferTo)
            {
                return DateTimeUtil::newDateTime(inventTransferLine.ReceiveDate, inventTransferLine.RTPReceiveTime, DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                return DateTimeUtil::newDateTime(inventTransferLine.ShipDate, inventTransferLine.RTPShipTime, DateTimeUtil::getUserPreferredTimeZone());
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer()
    {
        inventTransferLine = buffer as InventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId inventLocationId()
    {
        return inventTrans.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    protected InventQty qty()
    {
        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId rentalTypeId()
    {
        return BOBRentalType::findFromItemId(inventTransferLine.ItemId).RentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    protected BOBRentalTransType transType()
    {
        return BOBRentalTransType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    protected void updateBuffer(boolean _doUpdateBuffer)
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructRTPInventTransfer</Name>
				<Source><![CDATA[
    public static BOBRentalTransManager constructRTPInventTransfer(Common _buffer,InventMovement  _movement,InventTrans     _inventTrans)
    {
        BOBRentalTransManager ret = new BOBRentalTransMgr_RTPInventTransfer(_buffer, _movement, _inventTrans);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>