<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderSynchronizer_RTPReturn</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPWorkOrderSynchronizer_RTPReturn extends WPPWorkOrderSynchronizer
{
    InventJournalTable  inventJournalTable;
    boolean             workOrderCreated;
    Map                 orderLineReplacementMap;
    InventJournalTrans  inventJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newRTPReturn</Name>
				<Source><![CDATA[
    public static WPPWorkOrderSynchronizer_RTPReturn newRTPReturn(InventJournalTable _inventJournalTable)
    {
        return new WPPWorkOrderSynchronizer_RTPReturn(_inventJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkObjectSubGroup</Name>
				<Source><![CDATA[
    protected boolean checkObjectSubGroup(SalesPurchLine _salesPurchLine, WPPWorkOrderTemplateLine _workOrderTemplateLine)
    {
        return (!_workOrderTemplateLine.BOBObjectGroupId && !_workOrderTemplateLine.BOBObjectSubGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPCreateWorkOrder</Name>
				<Source><![CDATA[
    protected WPPWorkOrderTable RTPCreateWorkOrder(
        InventJournalTable          _inventJournalTable,
        Common                      _headerTable,
        ProjTable                   _projTable,
        ProjGroup                   _projGroup,
        WPPWorkOrderTemplateTable   _workOrderTemplateTable)
    {
        WPPWorkOrderTable   workOrderTable;
    
        workOrderTable.initValue();
        workOrderTable.initFromCustTable(CustTable::find(_inventJournalTable.RTPCustAccount), true);
        workOrderTable.RTPinitFromInventJournalTable(_inventJournalTable);
        workOrderTable.initFromWorkOrderTemplateTable(_workOrderTemplateTable);
        workOrderTable.initFromProjGroup(ProjGroup::find(_workOrderTemplateTable.ProjGroupId));
        if (_projTable)
        {
            workOrderTable.initFromProjTable(_projTable);
        }
        workOrderTable.initFromParameters(WPPParameters::find(), true);

        BOBObjectTable objectTable = inventJournalTrans ? inventJournalTrans.RORGetObjectTable() : BOBObjectTable::findRecId(_inventJournalTable.RTPBOBObjectTableRecId);
        if (objectTable)
        {
            workOrderTable.initFromBOBObjectTable(objectTable);
        }
    
        workOrderTable.insert();

        this.copyAdditionalNoteFromInventJournalTable(workOrderTable.TableId, workOrderTable.RecId, _inventJournalTable);
            
    
        workOrderIdSet.add(workOrderTable.WorkOrderId);
    
        if (inventJournalTrans)
        {
            info(strFmt("@DNR10050", inventJournalTrans.RORDamagedQty, workOrderTable.WorkOrderId));
        }
    
        return workOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAdditionalNoteFromInventJournalTable</Name>
				<Source><![CDATA[
    private void copyAdditionalNoteFromInventJournalTable(RefTableId _tableIdTo, RefRecId _recIdTo, InventJournalTable _inventJournalTable)
    {
        if (_inventJournalTable && _tableIdTo && _recIdTo)
        {
            DNRAdditionalNoteTable additionalNoteTable;
            DNRAdditionalNoteTable additionalNoteTableFrom;
        
            insert_recordset additionalNoteTable(InternalNote,InvoiceNote,LocationNote,ObjectNote,OrderNote,RouteNote,TerminationNote, RefTableId, RefRecId)
            select InternalNote,InvoiceNote,LocationNote,ObjectNote,OrderNote,RouteNote,TerminationNote, _tableIdTo, _recIdTo from additionalNoteTableFrom
            where additionalNoteTableFrom.RefTableId == _inventJournalTable.TableId
                && additionalNoteTableFrom.RefRecId == _inventJournalTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderNotLinked_Line</Name>
				<Source><![CDATA[
    private void generateWorkOrder_OrderNotLinked_Line()
    {
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        WPPWorkOrderLine            workOrderLine;
        boolean                     createInvoiceProject;
        ProjInvoiceProjId           projInvoiceProjId;
        boolean                     canCreateInvoiceProject;
        RTPWorkOrderTemplateId      templateId;
            
        createInvoiceProject = true;
        templateId           = inventJournalTrans ? WPPParameters::find().RORDamagedWorkOrderTemplateId : parameters.RTPWorkOrderTemplateIdReturn;
        projInvoiceProjId    = NumberSeq::newGetNum(ProjParameters::numRefProjInvoiceProjId()).num();
    
        this.initMaps();
    
        // for returning damaged items always create a ned work order
        if (!inventJournalTrans)
        {
            workOrderTable = WPPWorkOrderTable::findFromOrder(inventJournalTable.TableId, inventJournalTable.RecId, true);
        }
    
        if (workOrderTable)
        {
            workOrderCreated = false;
        }
    
        // Need to select the whole workOrderTemplateLine, otherwise the update of ParentLineRecId
        // on the work order line will fail
        while select workOrderTemplateTable
        order by workOrderTemplateLine.LineNumber
        where workOrderTemplateTable.TemplateId == templateId
            join workOrderTemplateLine
            where workOrderTemplateLine.TemplateId == workOrderTemplateTable.TemplateId
                join WorkOrderStatusGroupId from workOrderTaskTable
                where workOrderTaskTable.TaskId == workOrderTemplateLine.TaskId
        {
            lineNumber++;
            // Check whether a work order already exists, then don't create another one
            projGroup      = workOrderTemplateTable.projGroup();
    
            if (workOrderTable
            &&  !workOrderCreated)
            {
                // called when tasks need only be synchronized
                this.findWorkOrderLine(workOrderTemplateLine, inventJournalTable.TableId, inventJournalTable.RecId, null);
            }
            else
            {
                projTable = null;
    
                // if registrations are allowed then create a new ax project
                if (WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId))
                {
                    projGroup = workOrderTemplateTable.projGroup();
                    // Check whether an invoice project must be created
                    canCreateInvoiceProject = this.checkFillProjectContract(projGroup.projType);
    
                    // Create one invoice project for all projects
                    // Create new projects (one per task)
                    projTable = this.createProject(projGroup.projType,
                        projGroup.ProjGroupId,
                        '',
                        createInvoiceProject && canCreateInvoiceProject,
                        canCreateInvoiceProject ? projInvoiceProjId : '',
                        '',
                        custTable.AccountNum,
                        '',
                        '',
                        true,
                        custTable.TaxGroup);
    
                    // When an invoice project has been created then a new invoice project must not be created.
                    // Once the variable createInvoiceProject is set to false it will not be set to true anymore
                    if (canCreateInvoiceProject)
                    {
                        createInvoiceProject = false;
                    }
                }
    
                if (projTable &&  this.checkCreateActivity())
                {
                    // Create activities
                    this.createActivity(projTable, workOrderTemplateLine.TaskId);
                }
    
                // Create one work order per shipment
                if (!workOrderCreated)
                {
                    // Create a new work order header
                    workOrderTable = this.RTPCreateWorkOrder(inventJournalTable,
                        null,
                        projTable,
                        projGroup,
                        workOrderTemplateTable);
                }
    
                // Create new work order lines
                workOrderLine = this.createWorkOrderLine(projTable,
                                                         workOrderTable,
                                                         workOrderTemplateLine,
                                                         this.checkObjectSubGroup(null, workOrderTemplateLine));
    
                this.copyTaskRequirements(workOrderLine, workOrderTable);
    
                workOrderCreated = true;
            }
        }
    
        this.updateWorkOrderLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(inventJournalTable _inventJournalTable)
    {
        super();
    
        inventJournalTable = _inventJournalTable;
        custTable          = CustTable::find(inventJournalTable.RTPCustAccount);
    
        orderLineReplacementMap = new Map(Types::Int64, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _inventJournalTable = inventJournalTable)
    {
        inventJournalTable = _inventJournalTable as InventJournalTable;
    
        return inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInventJournalTrans</Name>
				<Source><![CDATA[
    public InventJournalTrans RORInventJournalTrans(InventJournalTrans _inventJournalTrans = inventJournalTrans)
    {
        inventJournalTrans = _inventJournalTrans;
    
        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsBegin;
        if (isConfigurationkeyEnabled(configurationKeyNum(RTPTransportModule))
        &&  parameters.RTPWorkOrderTemplateIdReturn)
        {
            this.generateWorkOrder_OrderNotLinked_Line();
        }
    
        super();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkOrderLine</Name>
				<Source><![CDATA[
    protected void updateWorkOrderLine()
    {
        MapEnumerator       workOrderLineMapEnumerator;
        WPPWorkOrderLine    workOrderLine;
        boolean             updateWorkOrderLine;
    
        workOrderLineMapEnumerator = workOrderLineMap.getEnumerator();
    
        while (workOrderLineMapEnumerator.moveNext())
        {
            workOrderLine = WPPWorkOrderLine::findRecId(workOrderLineMapEnumerator.currentKey(), true);
    
            if (workOrderLine.Status < WPPWorkOrderLineStatus::Completed)
            {
                workOrderLine.RequestedStartDateTime = inventJournalTable.RTPReturnDateTime;
                workOrderLine.RequestedEndDateTime = DateTimeUtil::addHours(workOrderLine.RequestedStartDateTime, 1);
    
                updateWorkOrderLine = true;
            }
    
            if (inventJournalTrans)
            {
                workOrderLine.ObjectQty = inventJournalTrans.RORDamagedQty;
            }
    
            this.checkUpdateWorkOrderLine(workOrderLine, updateWorkOrderLine);
        }
    
        // At the very end, because, for example, in the previous loop
        // line 5 can be updated before 3, then the root is not set correctly
        this.updateRootLineRecId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>