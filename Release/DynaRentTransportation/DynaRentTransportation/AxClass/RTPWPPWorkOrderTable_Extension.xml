<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPWPPWorkOrderTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(WPPWorkOrderTable))]
public final class RTPWPPWorkOrderTable_Extension
{
    // chain-of-command methods

    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    public Common salesPurchLine(boolean _forUpdate)
    {
        Common ret = next salesPurchLine(_forUpdate);

        if (this.OrderTableId == tableNum(WHSShipmentTable))
        {
            WHSShipmentTable shipment;

            select firstonly shipment
            where shipment.RecId == this.OrderRecId;

            if (_forUpdate)
            {
                shipment.selectForUpdate(true);
            }
            ret = shipment;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWorkOrderId</Name>
				<Source><![CDATA[
    protected void clearWorkOrderId()
    {
        next clearWorkOrderId();

        InventJournalTable inventJournalTable;
    
        update_recordSet inventJournalTable
        setting RTPWorkOrderId = '', RTPIsJournalConfirmed = NoYes::No
        where inventJournalTable.RTPWorkOrderId == this.WorkOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    public TransDate deliveryDate()
    {
        TransDate           transDate;
        SalesLine           salesLine;
        PurchLine           purchLine;
        InventTransferLine  inventTransferLine;
        WHSShipmentTable    shipment;
        Common              common;
        
        transDate = next deliveryDate();
    
        switch (this.OrderTableId)
        {
            case tableNum(SalesLine) :
                salesLine = salesLine::findRecId(this.OrderRecId);
                transDate = salesLine.ShippingDateConfirmed ? salesLine.ShippingDateConfirmed : salesLine.ShippingDateRequested;
                break;
    
            case tableNum(PurchLine) :
                purchLine = PurchLine::findRecId(this.OrderRecId);
                transDate = purchLine.ConfirmedDlv ? purchLine.ConfirmedDlv : purchLine.DeliveryDate;
                break;
    
            case tableNum(InventTransferLine) :
                inventTransferLine = InventTransferLine::findRecId(this.OrderRecId);
                transDate = inventTransferLine.ShipDate;
                break;
    
            case tableNum(WHSShipmentTable) :
                shipment = WHSShipmentTable::RTPfindRecId(this.OrderRecId);
                common = shipment.RTPGetSourceBuffer();
    
                if (common.TableId == tableNum(salesLine))
                {
                    salesLine = common;
                    transDate = salesLine.ShippingDateConfirmed ? salesLine.ShippingDateConfirmed : salesLine.ShippingDateRequested;
                }
                else if (common.TableId == tableNum(inventTransferLine))
                {
                    inventTransferLine = common;
                    transDate = inventTransferLine.ShipDate;
                }
                break;
        }
    
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedReturnExist</Name>
				<Source><![CDATA[
    protected boolean postedReturnExist()
    {
        InventJournalTable  inventJournalTable;
        boolean             ret = next postedReturnExist();
    
        select firstOnly RecId from inventJournalTable
        where inventJournalTable.RTPWorkOrderId == this.WorkOrderId
        &&    inventJournalTable.Posted;
    
        if (inventJournalTable)
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWHSShipmentTable</Name>
				<Source><![CDATA[
    public WHSShipmentTable getWHSShipmentTable()
    {
        WHSShipmentTable ret = next getWHSShipmentTable();

        ret = WHSShipmentTable::RTPGetShipmentForRecId(this.OrderRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPDisplayLoadMeter</Name>
				<Source><![CDATA[
    // extension methods

    

    [SysClientCacheDataMethodAttribute(true)]
    public display RTPLoadMeter RTPDisplayLoadMeter()
    {
        WHSShipmentTable    shipment;
        InventJournalTable  inventJournalTable;
        RTPLoadMeter        loadMeter;
        ;
        
        switch (this.OrderTableId)
        {
            case tableNum(WHSShipmentTable):
                shipment = WHSShipmentTable::RTPfindRecId(this.OrderRecId);
                loadMeter = shipment.RTPLoadMeter;
                break;
    
            case tableNum(InventJournalTable):
                inventJournalTable = InventJournalTable::RTPfindRecId(this.OrderRecId);
                loadMeter = inventJournalTable.RTPLoadMeter;
                break;
        }
    
        return loadMeter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPinitFromInventJournalTable</Name>
				<Source><![CDATA[
    public void RTPinitFromInventJournalTable(InventJournalTable _inventJournalTable)
    {
        this.OrderTableId               = _inventJournalTable.TableId;
        this.OrderRecId                 = _inventJournalTable.RecId;
        this.StartDate                  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_inventJournalTable.RTPReturnDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        this.EndDate                    = this.StartDate;
        this.RORReturnInventLocationId  = _inventJournalTable.RTPReturnInventLocationId;
        this.OrganizationParty          = CustTable::find(_inventJournalTable.RTPCustAccount).Party;

        if (_inventJournalTable.RTPLogisticsPostalAddress)
        {
            this.LogisticsLocationRecId     = _inventJournalTable.RTPLogisticsPostalAddress;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPinitFromInventTransferLine</Name>
				<Source><![CDATA[
    public void RTPinitFromInventTransferLine(InventTransferLine _inventTransferLine)
    {
        this.OrderTableId       = _inventTransferLine.TableId;
        this.OrderRecId         = _inventTransferLine.RecId;
        this.InventLocationId   = _inventTransferLine.inventDim().InventLocationId;
        this.determineActualPostingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitFromWHSShipment</Name>
				<Source><![CDATA[
    public void RTPInitFromWHSShipment(WHSShipmentTable _shipment)
    {
        SalesTable  orderTable;
        CustTable   custTable;
    
        this.OrderTableId           = _shipment.TableId;
        this.OrderRecId             = _shipment.RecId;
                        
        select firstOnly DeliveryPostalAddress, DeliveryDate from orderTable
        where orderTable.SalesId == _shipment.OrderNum
            join Party from custTable
            where custTable.AccountNum == orderTable.CustAccount;
    
        this.OrganizationParty      = custTable.Party;
        this.CustVendAccountType    = CustVendACType::Cust;
        this.LogisticsLocationRecId = orderTable.DeliveryPostalAddress;
        this.StartDate              = orderTable.DeliveryDate;
        this.EndDate                = orderTable.DeliveryDate;
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>