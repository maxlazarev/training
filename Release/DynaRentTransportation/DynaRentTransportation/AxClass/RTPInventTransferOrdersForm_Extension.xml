<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPInventTransferOrdersForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventTransferOrders))]
public final class RTPInventTransferOrdersForm_Extension
{
    private boolean isRTPTransferOrder;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RTPIsRentalTransferOrder</Name>
				<Source><![CDATA[
    //****************************** From methods ***************************
    public boolean RTPIsRentalTransferOrder()
    {
        return isRTPTransferOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPItemId_onLookup</Name>
				<Source><![CDATA[
    public void RTPItemId_onLookup(FormStringControl _formControl)
    {
        Args args = new Args(formStr(RORRentalInventItemIdLookup));
        args.caller(this);
        args.record(InventTransferLine);
        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        _formControl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    //********************* COC Wrappers ************************
    public void init()
    {
        if(this.args().menuItemName() == menuItemDisplayStr(RTPInventTransferOrder))
        {
            isRTPTransferOrder = true;
        }

        next init();

        if(isRTPTransferOrder)
        {
            RTPButtonGroup.visible(true);
            RTPLineTypeImage.visible(true);
            ReleaseToWarehouse.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventTransferTableDS_OnInitValue</Name>
				<Source><![CDATA[
    // event handler methods

    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferTable), FormDataSourceEventType::InitValue)]
    public static void DNREvent_InventTransferTableDS_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        InventTransferTable hostRecord = _sender.cursor();
        FormRun formRun = _sender.formRun() as FormRun;
        
        if(formRun.RTPIsRentalTransferOrder())
        {
            hostRecord.RTPIsRental = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventTransferTableDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferTable), FormDataSourceEventType::Initialized)]
    public static void DNREvent_InventTransferTableDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        QueryBuildRange qbr = _sender.queryBuildDataSource().addRange(fieldNum(InventTransferTable, RTPIsRental));

        if(formRun.RTPIsRentalTransferOrder())
        {
            _sender.object(fieldNum(InventTransferTable, RTPLoadMeter )).visible(true);
            // Only show Rental Transfer Orders when opened from Rental Transfer Order form
            qbr.value(SysQuery::value(NoYes::Yes));
        }
        else
        {
            _sender.object(fieldNum(InventTransferTable, RTPLoadMeter )).visible(true);
            qbr.value(SysQuery::value(NoYes::No));
        }
        
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventTransferLineDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferLine), FormDataSourceEventType::Initialized)]
    public static void DNREvent_InventTransferLineDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;

        if(formRun.RTPIsRentalTransferOrder())
        {
            _sender.object(fieldNum(InventTransferLine, RORTradeType)).visible(true);
            _sender.object(fieldNum(InventTransferLine, RTPReceiveTime)).visible(true);
            _sender.object(fieldNum(InventTransferLine, RTPShipTime)).visible(true);
            _sender.object(fieldNum(InventTransferLine, ItemId)).registerOverrideMethod(methodStr(FormDataObject, lookup), methodStr(RTPInventTransferOrdersForm_Extension, RTPItemId_onLookup), formRun);
        }
        else
        {
            _sender.object(fieldNum(InventTransferLine, RORTradeType)).visible(false);
            _sender.object(fieldNum(InventTransferLine, RTPReceiveTime)).visible(false);
            _sender.object(fieldNum(InventTransferLine, RTPShipTime)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferLine_OnInitValue</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferLine), FormDataSourceEventType::InitValue)]
    public static void InventTransferLine_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;

        if(formRun.RTPIsRentalTransferOrder())
        {
            InventTransferLine inventTransferLine = _sender.cursor();
            inventTransferLine.RORTradeType = RORTradeType::Rental;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferLine_OnActivated</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferLine), FormDataSourceEventType::Activated)]
    public static void InventTransferLine_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        InventTransferLine hostRecord = _sender.cursor();
        FormRun formRun = _sender.formRun() as FormRun;
        
        if(formRun.RTPIsRentalTransferOrder())
        {
            FormFunctionButtonControl   objectAssignmentEngineCtrl = formRun.design().controlName(formControlStr(InventTransferOrders, BOBObjectAssignmentEngine));
            BOBObjectAssignmentEngine::construct(hostRecord).setMenuItemLabel(objectAssignmentEngineCtrl);
            objectAssignmentEngineCtrl.enabled(hostRecord.RORTradeType != RORTradeType::SalesPurch 
                                            && BOBRentalType::find(hostRecord.BOBRentalTypeId).Classification == BOBRentalTypeClassification::Serialized);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventDimDS_inventSerialId_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, inventSerialId), FormDataFieldEventType::Validated)]
    public static void DNREvent_InventDimDS_inventSerialId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;
    
        if (formRun.RTPIsRentalTransferOrder())
        {
            InventDim inventDim = _sender.datasource().cursor() as InventDim;
            InventTransferLine inventTransferLine = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine)).cursor() as InventTransferLine;
            FormDataFieldCancelEventArgs    args     = _eventArgs as FormDataFieldCancelEventArgs;
            boolean                         ret;

            // This handler is not executed if 'super()' returns false.
            // We therefore do not have to check the return value before executing our custom code.
            ret = InventTransferLine::RTPValidateModifySerialNum(inventTransferLine, inventDim);

            if(!ret)
            {
                args.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventDimDS_inventSerialId_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, inventSerialId), FormDataFieldEventType::Modified)]
    public static void DNREvent_InventDimDS_inventSerialId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;
    
        if (formRun.RTPIsRentalTransferOrder())
        {
            InventDim inventDim = _sender.datasource().cursor() as InventDim;

            if (inventDim.inventSerialId && BOBObjectTable::findInventSerialId(inventDim.inventSerialId).RecId)
            {
                InventTransferLine inventTransferLine = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine)).cursor() as InventTransferLine;

                InventSerial::BOBFindOrCreateSerialNumber(inventTransferLine.BOBRentalTypeId, inventDim.inventSerialId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>