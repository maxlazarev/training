<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPSalesConfirmJournalPostClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesConfirmJournalPost))]
public final class RTPSalesConfirmJournalPostClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postJournalPost</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    public void postJournalPost()
    {
        WPPWorkOrderSynchronizer    workOrderSynchronizer;
        WPPParameters               wppParameters = WPPParameters::find();
        SalesLine                   salesLineLocal;
        WHSLoadLine                 loadLine;
        SalesTableInteractionHelper salesTableInteractionHelper;
        InventDim                   inventDim;
        InventMovement              inventMovement;
        WHSLoadTable                loadTable;
        RTPInventLocation           rtpInventLocation;
    
        next postJournalPost();

        /*
        // This part is not needed for the current release
        workOrderSynchronizer = WPPWorkOrderSynchronizer::newSalesTable(salesTable);
        workOrderSynchronizer.run();
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RTPTransportModule))
        //&& wppParameters.RTPAutoCreateOutputOrder
        && !salesTable.RTPCustomerPickup)
        {
            ttsbegin;
            using (RTPAutomaticActionDisposableContext context = new RTPAutomaticActionDisposableContext())
            {
                // during re-confirming create a new output order for remaining qty
                while select salesLineLocal
                where salesLineLocal.SalesId == salesTable.SalesId
                join InventSiteId, InventLocationId, InventDimId from inventDim
                    where inventDim.inventDimId == salesLineLocal.InventDimId
                        join loadLine
                        where loadLine.inventTransType  == inventTransType::Sales
                        &&    loadLine.inventTransId    == salesLineLocal.InventTransId
                        &&    loadLine.qty < salesLineLocal.SalesQty
                            exists join rtpInventLocation
                            where rtpInventLocation.InventLocationId == inventDim.InventLocationId
                {
                    WHSLoadLine newLoadLine;

                    select firstonly forupdate newLoadLine
                    where newLoadLine.LoadId        == loadLine.LoadId
                    &&    newLoadLine.InventTransId == salesLineLocal.InventTransId
                    &&    newLoadLine.inventDimId   == inventDim.inventDimId;

                    if (newLoadLine.RecId)
                    {
                        Qty addedQty = salesLineLocal.SalesQty - loadLine.qty;

                        newLoadLine.InventQty          += addedQty;
                        newLoadLine.Qty                += addedQty;
                        newLoadLine.QtyLeftToStructure += addedQty;
                        newLoadLine.doUpdate();
                    }
                    
                }
    
                while select salesLineLocal
                where salesLineLocal.SalesId == salesTable.SalesId
                join InventSiteId, InventLocationId from inventDim
                    where inventDim.inventDimId == salesLineLocal.InventDimId
                        notExists join loadLine
                        where loadLine.inventTransType  == inventTransType::Sales
                        &&    loadLine.inventTransId    == salesLineLocal.InventTransId
                            exists join rtpInventLocation
                            where rtpInventLocation.InventLocationId == inventDim.InventLocationId
                {

                    if (!loadTable)
                    {
                        loadTable.setLoadId();
                        //loadTable.initFromLoadTemplateId(_loadTemplateId);
                        loadTable.LoadDirection     = WHSLoadDirection::Outbound;
                        //loadTable.LoadPaysFreight   = _loadPaysFrieght;
                        loadTable.InventLocationId  = inventDim.InventLocationId;
                        loadTable.InventSiteId      = inventDim.InventSiteId;
                        loadTable.insert();
                    }

                    loadLine.clear();
                    loadLine.initFromSalesLine(salesLine);
                    loadLine.LoadId = loadTable.LoadId;
                    loadLine.insert();
                }
            }
            ttscommit;
             
            WHSLoadId loadId;
            WHSShipmentTable shipmentTable;
            Set processedLine = new Set(Types::Int64);

            ttsbegin;
            while select forupdate loadLine
                join salesLineLocal
                where salesLineLocal.SalesId == salesTable.SalesId
                    join InventSiteId, InventLocationId from inventDim
                    where inventDim.inventDimId == salesLineLocal.InventDimId
            {
                if (processedLine.in(loadLine.RecId))
                {
                    continue;
                }

                if (!loadId || loadId != loadLine.LoadId)
                {
                    shipmentTable.clear();
                    shipmentTable.ShipmentId            = shipmentTable.getShipmentId();
                    shipmentTable.LoadId                = loadLine.LoadId;
                    shipmentTable.WorkTransType         = WHSWorkTransType::Sales;
                    shipmentTable.OrderNum              = salesLineLocal.SalesId;
                    shipmentTable.AccountNum            = salesLineLocal.CustAccount;
                    shipmentTable.DeliveryName          = salesLineLocal.DeliveryName;
                    shipmentTable.DeliveryPostalAddress = salesLineLocal.DeliveryPostalAddress;
                    shipmentTable.modifiedField(fieldNum(WHSShipmentTable, DeliveryPostalAddress));
                    //shipmentTable.CountryRegionISOCode  = LogisticsAddressCountryRegion::find(tmpAddress.CountryRegionId).isOcode;
                    //shipmentTable.Address               = tmpAddress.Address;
                    shipmentTable.DlvTermId             = salesTable.DlvTerm;
                    shipmentTable.InventSiteId          = inventDim.InventSiteId;
                    shipmentTable.InventLocationId      = inventDim.InventLocationId;
                    shipmentTable.LoadDirection         = WHSLoadDirection::Outbound;
                    shipmentTable.CustomerRef           = salesTable.CustomerRef;
                    shipmentTable.CustomerReq           = salesTable.PurchOrderFormNum;
                    shipmentTable.insert();
                    shipmentTable.createShipmentNotes(salesTable);
                }
                loadId = loadLine.LoadId;
                loadLine.ShipmentId = shipmentTable.ShipmentId;
                loadLine.update();
                processedLine.add(loadLine.RecId);
            }

            if (shipmentTable)
            {
                shipmentTable.RTPCreateWPPWorkOrder();
            }
            ttscommit;
        }
        */
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>