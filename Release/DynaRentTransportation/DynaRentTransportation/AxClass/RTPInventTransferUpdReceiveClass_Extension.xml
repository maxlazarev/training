<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPInventTransferUpdReceiveClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventTransferUpdReceive))]
public final class RTPInventTransferUpdReceiveClass_Extension
{
    
    private InventTransferLine inventTransferLineLoc;
    private boolean isRental;
    // chain-of-command wrapper methods

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateInventTransferLine</Name>
				<Source><![CDATA[
    protected void updateInventTransferLine(InventTransferParmLine _inventTransferParmLine)
    {
        inventTransferLineLoc = InventTransferLine::findTransIdReceive(_inventTransferParmLine.InventTransId, true);
        isRental = (inventTransferLineLoc.RORTradeType == RORTradeType::Rental || inventTransferLineLoc.RORTradeType == RORTradeType::SubRental);
        
        next updateInventTransferLine(_inventTransferParmLine);

        this.BOBUpdateObjects2(_inventTransferParmLine, inventTransferLineLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransitFromIdentifiedTransactions</Name>
				<Source><![CDATA[
    protected InventUpd_Financial updateTransitFromIdentifiedTransactions(InventMovement            _movementTransitFrom,
                                                                          InventTransferParmLine    _inventTransferParmLine,
                                                                          InventTransferLine        _inventTransferLine,
                                                                          InventDim                 _inventDimTransitIssue)   
    {
        if(isRental)
        {
            _movementTransitFrom.BOBParmTransDate(inventTransferParmTable.TransDate);
            _movementTransitFrom.BOBParmTransTime(inventTransferParmTable.RTPTransTime);
        }

        return next updateTransitFromIdentifiedTransactions(_movementTransitFrom, _inventTransferParmLine, _inventTransferLine, _inventDimTransitIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransitFromUnIdentifiedTransactions</Name>
				<Source><![CDATA[
    protected InventUpd_Financial updateTransitFromUnIdentifiedTransactions(InventMovement          _movementTo,
                                                                            InventTransferParmLine  _inventTransferParmLine,
                                                                            InventTransferLine      _inventTransferLine)
    {
        if(isRental)
        {
            _movementTo.BOBParmTransDate(inventTransferParmTable.TransDate);
            _movementTo.BOBParmTransTime(inventTransferParmTable.RTPTransTime);
        }
        return next updateTransitFromUnIdentifiedTransactions(_movementTo, _inventTransferParmLine, _inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryTax</Name>
				<Source><![CDATA[
    protected void updateInventoryTax(InventMovement _inventMovement, InventTransferParmLine _inventTransferParmLine)
    {
        
        if(isRental)
        {
            _inventMovement.BOBParmTransDate(inventTransferParmTable.TransDate);
            _inventMovement.BOBParmTransTime(inventTransferParmTable.RTPTransTime);
        }
        next updateInventoryTax(_inventMovement, _inventTransferParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBUpdateObjects2</Name>
				<Source><![CDATA[
    // extension methods

    public void BOBUpdateObjects2(InventTransferParmLine _inventTransferParmLine, InventTransferLine _inventTransferLine)
    {
        InventTransferTable                 inventTransferTable;
        InventDim                           inventDim;
        BOBObjectTable                      objectTable;
        TransDateTime                       postingDateTime;
        LogisticsPostalAddressRecId         postalAddress;
        boolean                             updateLocationLog = true;

        inventTransferTable = _inventTransferLine.inventTransferTable();

        if(inventTransferTable.RTPIsRental && _inventTransferLine.BOBRentalTypeId)
        {
    
            select firstOnly InventLocationId, RecId from inventDim
            where inventDim.inventDimId == _inventTransferLine.InventDimId
            &&    inventDim.inventSerialId // serialized items only
                join  objectTable
                where objectTable.InventSerialId == inventDim.inventSerialId;
                
            if (!inventDim)
            {
                select firstOnly InventLocationId, RecId from inventDim
                where inventDim.inventDimId == _inventTransferParmLine.InventDimId
                &&    inventDim.inventSerialId // serialized items only
                    join  objectTable
                    where objectTable.InventSerialId == inventDim.inventSerialId;
            }
    
            if (objectTable)
            {
                postalAddress = inventTransferTable.ToPostalAddress;
    
                InventTransferParmTable inventTransferParmTable = _inventTransferParmLine.inventTransferParmTable();
                postingDateTime = DateTimeUtil::newDateTime(inventTransferParmTable.TransDate,
                                                            inventTransferParmTable.RTPTransTime,
                                                            DateTimeUtil::getUserPreferredTimeZone());
            
                BOBObjectLocationLog::changeLocation(objectTable.ObjectId, postalAddress, postingDateTime, inventTransferTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>