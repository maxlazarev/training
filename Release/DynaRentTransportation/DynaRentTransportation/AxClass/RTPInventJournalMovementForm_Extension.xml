<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPInventJournalMovementForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventJournalMovement))]
public final class RTPInventJournalMovementForm_Extension
{
    private boolean             isReturn;
    private boolean             isRentalTransportationChecked;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        if (this.RTPIsRentalTransportation())
        {
            isReturn = true;
        }

        next init();
        this.RTPOnInitialized();

    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventJournalMovementController</Name>
				<Source><![CDATA[
    protected InventJournalFormTrans_Movement constructInventJournalMovementController()
    {
        InventJournalFormTrans_Movement ret = next constructInventJournalMovementController();
        
        if(isReturn)
        {
            ret = new InventJournalFormTrans_Mov_RTPReturn(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPIsRentalTransportation</Name>
				<Source><![CDATA[
    // extension methods

    public boolean RTPIsRentalTransportation()
    {
        boolean isRentalTransportation;

        if (!isRentalTransportationChecked)
        {
            InventJournalTable  inventJournalTableCaller;

            if (this.args().dataset() == tableNum(InventJournalTable))
            {
                inventJournalTableCaller = this.args().record();
            }

            // for calls from TPB
            if (inventJournalTableCaller.JournalType == InventJournalType::RTPReturn)
            {
                isRentalTransportation = true;
            }
            else if(this.args().parmEnumType() == enumNum(InventJournalType)
            &&      this.args().parmEnum() == InventJournalType::RTPReturn)
            {
                isRentalTransportation = true;
            }
            
            isRentalTransportationChecked = true;
        }

        return isRentalTransportation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPOnInitialized</Name>
				<Source><![CDATA[
    private void RTPOnInitialized()
    {
        
        if (isReturn)
        {
            InventJournalFormTable_RTPReturn journalFormTable = journalFormController.parmInventJournalFormTable();
            journalFormTable.RTPParmCtrlConfirmReturn(RTPConfirmButton);
            journalFormTable.RTPParmCtrlShowWorkOrder(RTPWorkOrderTable);

            
            //Menu Buttons 
            RTPButtonGroup.visible(true);
            RTPConfirmButton.visible(true);
            RTPWorkOrderTable.visible(true);
            RTPGenerateLines.visible(true);
            DNRAdditionalNotes.visible(true);
            RTPSalesLine.visible(true);
            LogisticsPostalAddressNew.visible(true);
            LogisticsLocationSelect.visible(true);
            printMenu.visible(false);
            RTPPrint.visible(true);

            RTPRentalTransportation.visible(true);
            RTPRental.visible(true);
            RTPReturnQuantities.visible(true);
            RTPGroup.visible(true);
            RTPReturnQuantitiesGroupGrid.visible(true);

            this.design().controlName(formControlStr(InventJournalMovement, InventJournalTrans_PdsCWUnitId)).visible(false);
            this.design().controlName(formControlStr(InventJournalMovement, JournalLine_M_pdsCWUnitId)).visible(false);
            PdsDispositionStatus.visible(false);
            PdsDispositionCode.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPParmIsReturn</Name>
				<Source><![CDATA[
    public boolean RTPParmIsReturn(boolean _isReturn = isReturn)
    {
        isReturn = _isReturn;
        return isReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RTPPrintCTRL_OnClicked</Name>
				<Source><![CDATA[
    // event handler methods

    [FormControlEventHandler(formControlStr(InventJournalMovement, RTPPrint), FormControlEventType::Clicked)]
    public static void DNREvent_RTPPrintCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun             formRun             = _sender.formRun();
        InventJournalTable  inventJournalTable  = formRun.dataSource(formDataSourceStr(InventJournalMovement, InventJournalTable)).cursor() as InventJournalTable;
        MenuFunction        menuFunction        = new MenuFunction(menuitemOutputStr(inventJournalTrans), MenuItemType::Output);
        Args                args                = new Args();
        
        args.caller(formRun);
        args.record(inventJournalTable);
        args.menuItemName(menuFunction.name());
        args.menuItemType(menuFunction.type());
        
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RTPConfirmButtonCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(InventJournalMovement, RTPConfirmButton), FormControlEventType::Clicked)]
    public static void DNREvent_RTPConfirmButtonCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun             formRun             = _sender.formRun() as FormRun;
        InventJournalTable  inventJournalTable  = formRun.dataSource(formDataSourceStr(InventJournalMovement, InventJournalTable)).cursor() as InventJournalTable;
        
        RTPInventJournalTableHelper::confirmJournal(inventJournalTable);
        _sender.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RTPGenerateLinesCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(InventJournalMovement, RTPGenerateLines), FormControlEventType::Clicked)]
    public static void DNREvent_RTPGenerateLinesCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun             formRun             = _sender.formRun() as FormRun;
        InventJournalTable  inventJournalTable  = formRun.dataSource(formDataSourceStr(InventJournalMovement, InventJournalTable)).cursor() as InventJournalTable;
        MenuFunction        menuFunction        = new MenuFunction(menuItemActionStr(RTPTmpReturnNoteTableNew), MenuItemType::Action);
        Args                args                = new Args();

        // if called from line level header might be not current
        inventJournalTable = InventJournalTable::find(inventJournalTable.JournalId);

        args.caller(formRun);
        args.record(inventJournalTable);

        menuFunction.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>