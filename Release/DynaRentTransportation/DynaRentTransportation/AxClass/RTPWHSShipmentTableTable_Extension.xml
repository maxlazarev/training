<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPWHSShipmentTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(WHSShipmentTable))]
public final class RTPWHSShipmentTableTable_Extension
{
    // Extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RTPGetSalesLineForShipment</Name>
				<Source><![CDATA[
    public static SalesLine RTPGetSalesLineForShipment(WHSShipmentTable _shipment)
    {        
        SalesLine salesLine;

        salesLine = _shipment.RTPGetSourceBuffer() as SalesLine;
        
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPGetSourceBufferForShipmentRecId</Name>
				<Source><![CDATA[
    public static Common RTPGetSourceBufferForShipmentRecId(RecId _recId)
    {
        Common common;

        WHSShipmentTable shipment = WHSShipmentTable::RTPfindRecId(_recId);
        common = shipment.RTPGetSourceBuffer();

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPGetShipmentForRecId</Name>
				<Source><![CDATA[
    public static WHSShipmentTable RTPGetShipmentForRecId(RecId _recId)
    {
        WHSShipmentTable shipment = WHSShipmentTable::RTPfindRecId(_recId);
        
        return shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPCreateWPPWorkOrder</Name>
				<Source><![CDATA[
    public void RTPCreateWPPWorkOrder()
    {
        WPPParameters               parameters = WPPParameters::find();
        WPPWorkOrderSynchronizer    workOrderSynchronizer;
        WPPWorkOrderTemplateId      templateId;
        ;
    
        switch (this.RTPDisplaySourceOrderType())
        {
            case enum2str(InventTransType::TransferOrderShip):
                templateId = parameters.RTPWorkOrderTemplateIdTransfer;
                break;
    
            case enum2str(SalesType::RORRental):
                templateId = parameters.RTPWorkOrderTemplateIdRental;
                break;
    
            case enum2str(SalesType::Sales):
                templateId = parameters.RTPWorkOrderTemplateIdSales;
                break;
        }
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RTPTransportModule))
        && templateId)
        {
            // create work order
            workOrderSynchronizer = new WPPWorkOrderSynchronizer_RTPTransport(this);
            workOrderSynchronizer.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPDisplayWorkOrderId</Name>
				<Source><![CDATA[
    display WPPWorkOrderId RTPDisplayWorkOrderId()
    {
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderId      workOrderId;
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RTPTransportModule))
        && hasFieldAccess(tableNum(WPPWorkOrderTable), fieldNum(WPPWorkOrderTable, WorkOrderId)))
        {
            select firstOnly workOrderId from workOrderTable
            where workOrderTable.OrderTableId   == this.TableId
            &&    workOrderTable.OrderRecId     == this.RecId;
    
            workOrderId = workOrderTable.WorkOrderId;
        }
    
        return workOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPCanPhysicalUpdSalesOrder</Name>
				<Source><![CDATA[
    public boolean RTPCanPhysicalUpdSalesOrder()
    {
        WHSLoadLine     loadLine;
        SalesLine       salesLine;
        SalesTable      salesTable;
        RecId           salesTableRecId;
        // if there is at least 1 line to post then will return true
        boolean         ret;
    
        if (this.ShipmentStatus != WHSShipmentStatus::Shipped)
        {
            return false;
        }
    
        while select RecId from loadLine
        where loadLine.ShipmentId              == this.ShipmentId
        &&    loadLine.InventTransType         == InventTransType::Sales
            join salesLine
            where salesLine.InventTransId   == loadLine.InventTransId
                join salesTable
                where salesTable.SalesId == salesLine.SalesId
        {
            if (salesTableRecId != salesTable.RecId)
            {
                salesTableRecId = salesTable.RecId;
                ret = salesTable.type().canPackingslipBeUpdated();
    
                if (!ret)
                {
                    break;
                }
            }
    
            ret = salesLine.type().canPackingslipBeUpdated();
    
            if (!ret)
            {
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPDisplaySourceOrderId</Name>
				<Source><![CDATA[
    display RTPSourceOrderId RTPDisplaySourceOrderId()
    {
        WHSLoadLine   loadLine;
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RTPTransportModule)))
        {
            select firstOnly OrderNum from loadLine
            where loadLine.shipmentId         == this.shipmentId
            &&    loadLine.OrderNum
            &&    (loadLine.inventTransType   == InventTransType::Sales ||
                   loadLine.inventTransType   == InventTransType::TransferOrderShip);
    
        }
    
        return loadLine.OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPDisplaySourceOrderType</Name>
				<Source><![CDATA[
    display RTPOrderTypeStr RTPDisplaySourceOrderType()
    {
        WHSLoadLine     loadLine;
        SalesTable      salesTable;
        RTPOrderTypeStr orderTypeStr;
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RTPTransportModule)))
        {
            select firstOnly inventTransType from loadLine
            where loadLine.shipmentId         == this.shipmentId
            &&    loadLine.OrderNum
            &&    (loadLine.inventTransType   == InventTransType::Sales ||
                   loadLine.inventTransType   == InventTransType::TransferOrderShip)
                   outer join SalesType, RecId from salesTable
                   where loadLine.inventTransType == InventTransType::Sales
                   && salesTable.SalesId == loadLine.OrderNum;
    
        }
    
        if (salesTable)
        {
            orderTypeStr = enum2str(salesTable.SalesType);
        }
        else if (loadLine && loadLine.inventTransType   == InventTransType::TransferOrderShip)
        {
            orderTypeStr = enum2str(InventTransType::TransferOrderShip);
        }
    
        return orderTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPGetSourceBuffer</Name>
				<Source><![CDATA[
    public Common RTPGetSourceBuffer()
    {
        Common              sourceBuffer;
        WHSLoadLine         loadLine;
        SalesLine           salesLine;
        InventTransferLine  inventTransferLine;
    
        select firstOnly salesLine
            exists join loadLine
            where loadLine.inventTransId   == salesLine.InventTransId
            &&    loadLine.OrderNum== salesLine.SalesId
            &&    loadLine.shipmentId      == this.shipmentId
            &&    loadLine.inventTransType == InventTransType::Sales;
    
        if (salesLine)
        {
            sourceBuffer = salesLine;
        }
        else
        {
            select firstOnly inventTransferLine
                exists join loadLine
                where loadLine.inventTransId   == inventTransferLine.InventTransId
                &&    loadLine.OrderNum == inventTransferLine.TransferId
                &&    loadLine.shipmentId      == this.shipmentId
                &&    loadLine.inventTransType == InventTransType::TransferOrderShip;
    
            sourceBuffer = inventTransferLine;
        }
    
        return sourceBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPGetSourceCustAccount</Name>
				<Source><![CDATA[
    public CustAccount RTPGetSourceCustAccount()
    {
        CustAccount         custAccount;
        WHSLoadLine         loadLine;
        SalesTable          salesTable;
        SalesLine           salesLine;
        InventTransferTable inventTransferTable;
        InventTransferLine  inventTransferLine;
    
        select firstOnly salesTable
            exists join salesLine
            where salesLine.SalesId == salesTable.SalesId
                join loadLine
                where loadLine.inventTransId   == salesLine.InventTransId
                &&    loadLine.OrderNum == salesLine.SalesId
                &&    loadLine.shipmentId      == this.shipmentId
                &&    loadLine.inventTransType == InventTransType::Sales;
    
        if (salesTable)
        {
            custAccount = salesTable.CustAccount;
        }
    
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitFromInventTransferTable</Name>
				<Source><![CDATA[
    public void RTPInitFromInventTransferTable(InventTransferTable _inventTransferTable)
    {
        this.RTPLoadMeter   = _inventTransferTable.RTPLoadMeter;

        InventLocation inventLocationFrom = InventLocation::find(_inventTransferTable.InventLocationIdFrom);
        this.DeliveryName           = inventLocationFrom.Name;
        this.InventSiteId           = inventLocationFrom.InventSiteId;
        this.InventLocationId       = inventLocationFrom.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitFromSalesTable</Name>
				<Source><![CDATA[
    public void RTPInitFromSalesTable(SalesTable _salesTable)
    {
        this.RTPLoadMeter   = _salesTable.RTPLoadMeter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitFromSalesLine</Name>
				<Source><![CDATA[
    public void RTPInitFromSalesLine(SalesLine _salesLine)
    {
        InventLocation inventLocationFrom = InventLocation::find(_salesLine.inventDim().InventLocationId);
        this.DeliveryName           = inventLocationFrom.Name;
        this.InventSiteId           = inventLocationFrom.InventSiteId;
        this.InventLocationId       = inventLocationFrom.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPNumOfLines</Name>
				<Source><![CDATA[
    public JournalNumOfLines RTPNumOfLines()
    {
        //Journal lines will never exceed max int
        return int642int((select count(RecId) from WHSLoadLine where WHSLoadLine.shipmentId == this.shipmentId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPFindRecId</Name>
				<Source><![CDATA[
    public static WHSShipmentTable RTPFindRecId(RecId _recId, boolean _update = false)
    {
        WHSShipmentTable shipment;
    
        if (_recId)
        {
            if (_update)
            {
                shipment.selectForUpdate(_update);
            }
    
            select shipment
                where shipment.RecId == _recId;
        }
    
        return shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPIsBulkRentalShipment</Name>
				<Source><![CDATA[
    public boolean RTPIsBulkRentalShipment()
    {
        boolean         ret;
        BOBRentalType   rentalType;
        WHSLoadLine     loadLine;
        InventTable     inventTable;
        EcoResProduct   ecoResProduct;
    
        select firstonly RecId from loadLine
        where loadLine.shipmentId == this.shipmentId
            exists join inventTable
            where inventTable.ItemId == loadLine.itemId
                join TableId from ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
                    join RecId from rentalType
                    where rentalType.RentalTypeId   == ecoResProduct.BOBRentalTypeId
                    &&    rentalType.Classification == BOBRentalTypeClassification::Bulk;
    
        if (loadLine)
        {
            select firstonly RecId from loadLine
            where loadLine.shipmentId == this.shipmentId
                exists join inventTable
                    where inventTable.ItemId == loadLine.itemId
                    join TableId from ecoResProduct
                    where ecoResProduct.RecId == inventTable.Product
                        join RecId from rentalType
                        where rentalType.RentalTypeId   == ecoResProduct.BOBRentalTypeId
                        &&    rentalType.Classification != BOBRentalTypeClassification::Bulk;
    
            if (!loadLine)
            {
                // has only bulk items
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>