<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPInventJournalMovement_InventJournalTransDS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formDataSourceStr(InventJournalMovement, InventJournalTrans))]
public final class RTPInventJournalMovement_InventJournalTransDS_Extension
{
    private Set refSalesLineRecIdSet ;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    void write()

    {
        this.RTPInitReference();
        next write();
        this.RTPProcessReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitReference</Name>
				<Source><![CDATA[
    private void RTPInitReference()
    {
        Object  formRunObject = this.formRun() as Object;
        InventJournalTrans inventJournalTransLocal = this.cursor();

        if (formRunObject.RTPParmIsReturn() && inventJournalTransLocal.ItemId)
        {
            boolean isInitial = (!inventJournalTransLocal.RORDisplayTotalReturnQty());

            if (isInitial)
            {
                inventJournalTransLocal.Qty = 0;
                RTPReturnNoteLinesGenerate returnNoteLinesGenerate = RTPReturnNoteLinesGenerate::construct();
                returnNoteLinesGenerate.parmInventJournalTable(inventJournalTransLocal.inventJournalTable());
                returnNoteLinesGenerate.parmItemId(inventJournalTransLocal.ItemId);
                returnNoteLinesGenerate.parmCallerInventJournalTrans(inventJournalTransLocal);
                returnNoteLinesGenerate.parmMustUpdateCallerInventTrans(true);
                
                if(inventJournalTransLocal.inventTable().BOBIsSerializedRentalItem())
                {
                    returnNoteLinesGenerate.parmInventSerialId(inventJournalTransLocal.inventDim().inventSerialId);
                }

                returnNoteLinesGenerate.run();
                refSalesLineRecIdSet  = returnNoteLinesGenerate.getSalesLineRecIdSet();
            }
            else
            {
                inventJournalTransLocal.Qty = inventJournalTransLocal.RORDisplayTotalReturnQty() - inventJournalTransLocal.RORSurplusQty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPProcessReference</Name>
				<Source><![CDATA[
    private void RTPProcessReference()
    {
        if (refSalesLineRecIdSet)
        {
            SetEnumerator setEnumerator = refSalesLineRecIdSet.getEnumerator();
            RecordInsertList recordInsertList = new RecordInsertList(tableNum(RTPInventJournalTransSalesLineReference));
            RTPInventJournalTransSalesLineReference journalTransSalesLineReference;
            RefRecId journalTransRecId = this.cursor().RecId;
            
            while (setEnumerator.moveNext())
            {
                RefRecId salesLineRecId = setEnumerator.current();
                
                if (salesLineRecId && journalTransRecId)
                {
                    journalTransSalesLineReference.clear();
                    journalTransSalesLineReference.initValue();
                    journalTransSalesLineReference.InventJournalTransRecId = journalTransRecId;
                    journalTransSalesLineReference.SalesLineRecId = salesLineRecId;
                    journalTransSalesLineReference.RemainSalesReturn = SalesLine::findRecId(salesLineRecId).RORRemainSalesReturn;
                    recordInsertList.add(journalTransSalesLineReference);
                }
            }

            int numberOfRec = recordInsertList.insertDatabase();
            if(!numberOfRec)
            {
                warning("@DNR:NoRefWithRentalLineReturnQty");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>