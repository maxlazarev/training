<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPInventTransferLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventTransferLine))]
public final class RTPInventTransferLineTable_Extension
{
    // chain-of-command wrapper methods
       
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = next validateWrite();
        
        if (ret)
        {
            if (this.RORTradeType == RORTradeType::Rental || this.RORTradeType == RORTradeType::SubRental)
            {
                if (!this.BOBRentalTypeId)
                {
                    ret = checkFailed(strFmt("@DNR6337", RORTradeType::SalesPurch));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = next validateField(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldnum(InventTransferLine, InventDimId)) :
                ret = InventTransferLine::RTPValidateModifySerialNum(this, this.InventDim());
                break;
    
            case fieldNum(InventTransferLine, ShipDate):
                if (this.QtyShipped)
                {
                    ret = checkFailed(strFmt("@DNR8539", "@SYS78234", fieldPname(InventTransferLine, ShipDate)));
                    this.ShipDate = this.orig().ShipDate;
                }
                break;

            case fieldNum(InventTransferLine, RTPShipTime):
                if (this.QtyShipped)
                {
                    ret = checkFailed(strFmt("@DNR8539", "@SYS78234", fieldPname(InventTransferLine, RTPShipTime)));
                    this.RTPShipTime = this.orig().RTPShipTime;
                }
                break;

            case fieldNum(InventTransferLine, ReceiveDate):
                if(this.QtyReceived)
                {
                    ret = checkFailed(strFmt("@DNR8539", "@SYS78234", fieldPName(InventTransferLine, ReceiveDate)));
                    this.ReceiveDate = this.orig().ReceiveDate;
                }
                break;

            case fieldNum(InventTransferLine, RTPReceiveTime):
                if(this.QtyReceived)
                {
                    ret = checkFailed(strFmt("@DNR8539", "@SYS78234", fieldPName(InventTransferLine, RTPReceiveTime)));
                    this.RTPReceiveTime = this.orig().RTPReceiveTime;
                }
                break;

            case fieldNum(InventTransferLine, QtyTransfer):
                ret = this.RTPValidateTransferQty();
                break;

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(InventTransferLine, InventDimId):
                if (this.BOBRentalTypeId)
                {
                    InventDim inventDim = this.inventDim();
                
                    if (inventDim.inventSerialId && BOBObjectTable::findInventSerialId(inventDim.inventSerialId).Category == BOBObjectCategory::SubRental)
                    {
                        this.RORTradeType = RORTradeType::SubRental;
                    }
                }
                break;

            case fieldNum(InventTransferLine, RORTradeType):
                this.setDeliveryDateControlType();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable, InventDimId _inventDimId)
    {
        
        next initFromInventTable(_inventTable, _inventDimId);

        InventTransferTable inventTransferTable = this.inventTransferTable();

        this.RORRentalLine::initFromInventTable(_inventTable, inventTransferTable.RTPIsRental, inventTransferTable.RTPIsRental);
        
        this.BOBRentalTypeId = _inventTable.BOBRentalType().RentalTypeId;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDateControlType</Name>
				<Source><![CDATA[
    public void setDeliveryDateControlType(InventDimId _inventDimId)
    {
        next setDeliveryDateControlType(_inventDimId);

        if (this.RORTradeType != RORTradeType::SalesPurch)
        {
            this.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPValidateTransferQty</Name>
				<Source><![CDATA[
    // extension methods
        
    private boolean RTPValidateTransferQty()
    {
        boolean ret = true;
        
        if(this.RORTradeType == RORTradeType::Rental || this.RORTradeType == RORTradeType::SubRental)
        {
            if (BOBRentalType::findFromItemId(this.ItemId).Classification == BOBRentalTypeClassification::Serialized && this.QtyTransfer > 1)
            {
                ret = checkFailed("@DNR:QtyMayNotBeGreaterThanOne");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPValidateModifySerialNum</Name>
				<Source><![CDATA[
    public static boolean RTPValidateModifySerialNum(InventTransferLine _inventTransferLine, InventDim _inventDim)
    {
        boolean             ret = true;
        InventTransferLine  inventTransferLineOrig = _inventTransferLine.orig();
        InventDim           inventDimOrig = inventTransferLineOrig.orig().inventDim();
        ;
    
        if (_inventDim.inventSerialId
        &&  _inventDim.inventSerialId != inventDimOrig.inventSerialId)
        {
            ret = ret && _inventTransferLine.RTPCheckDuplicateSerialNum(_inventDim.inventSerialId);
            ret = ret && BOBObjectAssignmentEngine::construct(_inventTransferLine, _inventDim.InventSerialId).validate();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPCheckDuplicateSerialNum</Name>
				<Source><![CDATA[
    public boolean RTPCheckDuplicateSerialNum(InventSerialId _inventSerialId)
    {
        boolean ret = true;
        
        if(_inventSerialId)
        {
            InventTransferLine  inventTransferLine;
            InventDim           inventDim;

            select firstonly LineNum from inventTransferLine
            where inventTransferLine.TransferId == this.TransferId
            &&    inventTransferLine.RecId != this.RecId
                join TableId from inventDim
                where inventDim.InventDimId == inventTransferLine.InventDimId
                &&    inventDim.InventSerialId == _inventSerialId;

            if(inventTransferLine)
            {
                ret = checkFailed(strFmt("@DNR8561", inventDim.inventSerialId, inventTransferLine.LineNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPLineTypeImage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display container RTPLineTypeImage()
    {
        ImageReference  imageReference;
        container       imageContainer;

        switch(this.RORTradeType)
        {
            case RORTradeType::Rental: 
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Products, "@DNR34");
                break;

            case RORTradeType::SubRental:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Quantity, "@DNR641");
                break;

            case RORTradeType::SalesPurch:
                if(this.BOBRentalTypeId)
                {
                    imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::OrderLineMultipleDeliveries, "@SYS37101");
                }
                else
                {
                    imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::DeliveryLine, "@DNR5656");
                }
                break;
        }

        if (imageReference)
        {
            imageContainer = imageReference.pack();
        }
        
        return imageContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>