<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTPInventJournalTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventJournalTable))]
public final class RTPInventJournalTableTable_Extension
{
    // chain-of-command wrapper methods
           
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTotal</Name>
				<Source><![CDATA[
    public static void initTotal(InventJournalTable _inventJournalTable)
    {
        next initTotal(_inventJournalTable);

        if (_inventJournalTable.JournalType == InventJournalType::RTPReturn)
        {
            InventJournalTrans inventJournalTrans;

            select count(RecId) from inventJournalTrans
            where inventJournalTrans.JournalId == _inventJournalTable.JournalId;

            _inventJournalTable.NumOfLines = any2int(inventJournalTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = next validateDelete();

        if (ret)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(RTPTransportModule)))
            {
                ret = this.RTPValidateDelete();
            }
    
            if (ret)
            {
                ret = BOBConversionJournalEngine::validateDeleteJournal(this);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventJournalTable, RTPReturnInventLocationId) :
                if (this.RTPReturnInventLocationId != this.orig().RTPReturnInventLocationId)
                {
                    this.RTPReturnInventLocationIdModified();
                }
                break;

            case fieldNum(InventJournalTable, RTPVenueCode) :
                if (this.RTPVenueCode != this.orig().RTPVenueCode)
                {
                    this.RTPInitFromVenueTable(RORVenueTable::find(this.RTPVenueCode));
                }
                break;

            case fieldNum(InventJournalTable, RTPCustAccount) :
                if (this.RTPCustAccount != this.orig().RTPCustAccount && !this.RTPVenueCode)
                {
                    this.RTPInitFromCustTable(CustTable::find(this.RTPCustAccount));
                }
                break;

            case fieldNum(InventJournalTable, RTPLogisticsPostalAddress) :
                this.RTPLogisticsPostalAddressModified();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPGetCustTable</Name>
				<Source><![CDATA[
    // extension methods

    public CustTable RTPGetCustTable()
    {
        CustTable custTable = CustTable::find(this.RTPCustAccount);

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPGetReturnInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId RTPGetReturnInventLocationId()
    {
        InventLocationId inventLocationId = this.RTPReturnInventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPIsReturnJournal</Name>
				<Source><![CDATA[
    public boolean RTPIsReturnJournal()
    {
        boolean ret = (this.JournalType == InventJournalType::RTPReturn);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPDeliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId RTPDeliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.RTPLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPDisplayWorkOrderLineStatus</Name>
				<Source><![CDATA[
    display WPPWorkOrderLineStatus RTPDisplayWorkOrderLineStatus()
    {
        WPPWorkOrderLineStatus  workOrderLineStatus;
    
        if (hasFieldAccess(tableNum(WPPWorkOrderLine), fieldNum(WPPWorkOrderLine, Status)))
        {
            workOrderLineStatus = WPPWorkOrderLine::getLowestStatus(this.RTPWorkOrderId);
        }
    
        return workOrderLineStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPDisplayWorkOrderLineStatusText</Name>
				<Source><![CDATA[
    display str 10 RTPDisplayWorkOrderLineStatusText()
    {
        str 10 ret;
    
        if (hasFieldAccess(tableNum(WPPWorkOrderLine), fieldNum(WPPWorkOrderLine, Status)))
        {
            if (this.RTPWorkOrderId)                
            {
                WPPWorkOrderLineStatus workOrderLineStatus = WPPWorkOrderLine::getLowestStatus(this.RTPWorkOrderId);
                ret = strFmt("%1", workOrderLineStatus);
            }            
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPFindRecId</Name>
				<Source><![CDATA[
    public static InventJournalTable RTPFindRecId(RecId _recId, boolean _update = false)
    {
        InventJournalTable inventJournalTable;
    
        if (_recId)
        {
            if (_update)
            {
                inventJournalTable.selectForUpdate(_update);
            }
    
            select inventJournalTable
            where inventJournalTable.RecId == _recId;
        }
    
        return inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitFromVenueTable</Name>
				<Source><![CDATA[
    public void RTPInitFromVenueTable(RORVenueTable _venueTable)
    {
        LogisticsEntityPostalAddressView    addressView;

        select firstonly PostalAddress from addressView
        where addressView.IsPrimary == NoYes::Yes
        &&    addressView.EntityType == LogisticsLocationEntityType::RORVenue
        &&    addressView.Entity     == _venueTable.RecId;

        this.RTPLogisticsPostalAddress = addressView.PostalAddress;
        this.RTPLogisticsPostalAddressModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPInitFromCustTable</Name>
				<Source><![CDATA[
    public void RTPInitFromCustTable(CustTable _custTable)
    {
        LogisticsEntityPostalAddressView    addressView;

        select firstonly PostalAddress from addressView
        where addressView.IsPrimary == NoYes::Yes
        &&    addressView.EntityType == LogisticsLocationEntityType::Party
        &&    addressView.Entity     == _custTable.Party;

        this.RTPLogisticsPostalAddress = addressView.PostalAddress;
        this.RTPLogisticsPostalAddressModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPLogisticsPostalAddressModified</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public void RTPLogisticsPostalAddressModified()
    {
        WPPWorkOrderTable   workOrderTable;
       
        ttsBegin;
        update_recordSet workOrderTable
        setting LogisticsLocationRecId = this.RTPLogisticsPostalAddress
        where workOrderTable.WorkOrderId == this.RTPWorkOrderId;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPNumOfLines</Name>
				<Source><![CDATA[
    public JournalNumOfLines RTPNumOfLines()
    {
        InventJournalTrans      inventJournalTrans;
        JournalNumOfLines       numOfLines;
    
        switch(this.JournalType)
        {
            case InventJournalType::RTPReturn:
                select count(RecId) from inventJournalTrans
                where inventJournalTrans.JournalId == this.JournalId;
    
                numOfLines = any2int(inventJournalTrans.RecId);
                break;
        }
    
        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPReturnInventLocationIdModified</Name>
				<Source><![CDATA[
    public void RTPReturnInventLocationIdModified()
    {
        InventJournalTrans  inventJournalTrans;
        InventDim           inventDim;
        InventDim           inventDimNew;
        InventLocationId    inventLocationIdPrevious = this.orig().RTPReturnInventLocationId;
        ;

        ttsBegin;

        while select forUpdate inventJournalTrans
        where inventJournalTrans.JournalId == this.JournalId
            join inventDim
            where inventDim.inventDimId == inventJournalTrans.InventDimId
            &&    inventDim.InventLocationId == inventLocationIdPrevious
        {
            buf2Buf(inventDim, inventDimNew);
            inventDimNew.inventLocationId = this.RTPReturnInventLocationId;
            inventDimNew.initFromInventLocation(inventDimNew.inventLocation());
            inventDimNew = InventDim::findOrCreate(inventDimNew);

            inventJournalTrans.InventDimId = inventDimNew.inventDimId;
            inventJournalTrans.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPSynchronizeWorkOrder</Name>
				<Source><![CDATA[
    public void RTPSynchronizeWorkOrder()
    {
        if (this.JournalId && this.JournalType == InventJournalType::RTPReturn && this.RTPWorkOrderId)
        {
            WPPWorkOrderSynchronizer workOrderSynchroniser = new WPPWorkOrderSynchronizer_RTPReturn(this);
    
            if (workOrderSynchroniser)
            {
                workOrderSynchroniser.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RTPValidateDelete</Name>
				<Source><![CDATA[
    private boolean RTPValidateDelete()
    {
        boolean ret = true;
    
        if (this.JournalId && this.JournalType == InventJournalType::RTPReturn && this.RTPWorkOrderId)
        {
            if (WPPWorkOrderLine::getHighestStatus(this.RTPWorkOrderId) > WPPWorkOrderLineStatus::Created)
            {
                ret = checkFailed(strFmt("@DNR8533", this.JournalId, this.RTPWorkOrderId, enum2str(WPPWorkOrderLineStatus::Created)));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdated</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(InventJournalTable), DataEventType::Updated)]
    public static void DNREvent_OnUpdated(Common _sender, DataEventArgs _eventArgs)
    {
        InventJournalTable hostObject = _sender as InventJournalTable;
        hostObject.RTPSynchronizeWorkOrder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>