<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBIoTProcessMeterReadings</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBIoTProcessMeterReadings
{
    BOBIoTDeviceTable deviceTable;
    BOBIoTDeviceTrans deviceTrans;
    BOBIoTParameters iotParameters = BOBIoTParameters::find();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOBIoTProcessMeterReadings construct(BOBIoTDeviceTable _deviceTable, BOBIoTDeviceTrans _deviceTrans)
    {
        BOBIoTProcessMeterReadings meterReadingsProcessor = new BOBIoTProcessMeterReadings();
        meterReadingsProcessor.parmDeviceTable(_deviceTable);
        meterReadingsProcessor.parmDeviceTrans(_deviceTrans);

        return meterReadingsProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.dataset() != tableNum(BOBIoTDeviceTrans))
        {
            throw error(Error::missingRecord(tableId2pname(tableNum(BOBIoTDeviceTrans))));
        }

        BOBIoTDeviceTrans deviceTrans = _args.record();
        BOBIoTDeviceTable deviceTable = BOBIoTDeviceTable::findRecId(deviceTrans.DeviceTableRecId);

        BOBIoTProcessMeterReadings meterReadingsProcessor = BOBIoTProcessMeterReadings::construct(deviceTable, deviceTrans);
        meterReadingsProcessor.processMeterReading();
        meterReadingsProcessor.researchCallerDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMeterReading</Name>
				<Source><![CDATA[
    public void processMeterReading()
    {
        if (this.validate())
        {
            ttsbegin;

            BOBCreateMeterTrans createTrans = BOBCreateMeterTrans::construct();
            createTrans.parmMeterId(deviceTable.MeterId);
            createTrans.parmTransDateTime(deviceTrans.MessageDateTime);
            createTrans.parmNewMeterValue(deviceTrans.MeterValue);
            createTrans.parmTransType(BOBMeterTransType::Reading);
            createTrans.run();

            this.updateProcessingStatusWithinInterval(deviceTrans);

            info(strFmt("@DNR:UpdatedMeterReadingOfMeterX", deviceTable.MeterId));

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        boolean ret = true;

        if (!deviceTable)
        {
            ret = checkFailed(Error::missingRecord(tableId2pname(tableNum(BOBIoTDeviceTable))));
        }
        else if (!deviceTable.MeterId)
        {
            ret = checkFailed(strFmt("@DNR:DeviceXNotLinkedToMeter", deviceTable.DeviceId));
        }

        if (!deviceTrans)
        {
            ret = checkFailed(Error::missingRecord(tableId2pname(tableNum(BOBIoTDeviceTrans))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessingStatusWithinInterval</Name>
				<Source><![CDATA[
    // Skip any messages generated within the time interval specified in the IoT parameters
    private void updateProcessingStatusWithinInterval(BOBIoTDeviceTrans _deviceTrans)
    {
        ttsbegin;

        _deviceTrans.selectForUpdate(true);
        _deviceTrans.IsMeterValueProcessed = NoYes::Yes;
        _deviceTrans.update();

        BOBIoTDeviceTrans transWithinInterval;

        select firstonly forupdate transWithinInterval
        order by MessageDateTime desc
        where transWithinInterval.DeviceTableRecId == _deviceTrans.DeviceTableRecId
        &&    transWithinInterval.RecId != _deviceTrans.RecId
        &&    transWithinInterval.MeterValue > 0
        &&    transWithinInterval.MessageDateTime <= _deviceTrans.MessageDateTime
        &&    transWithinInterval.MessageDateTime >= DateTimeUtil::addHours(_deviceTrans.MessageDateTime, -iotParameters.UsageInterval);

        if (transWithinInterval)
        {
            transWithinInterval.IsMeterValueProcessed = NoYes::Yes;
            transWithinInterval.update();

            this.updateProcessingStatusWithinInterval(transWithinInterval);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchCallerDatasource</Name>
				<Source><![CDATA[
    private void researchCallerDatasource()
    {
        FormDataSource deviceTrans_ds = FormDataUtil::getFormDataSource(deviceTrans);

        if (deviceTrans_ds)
        {
            deviceTrans_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceTable</Name>
				<Source><![CDATA[
    public BOBIoTDeviceTable parmDeviceTable(BOBIoTDeviceTable _deviceTable = deviceTable)
    {
        deviceTable = _deviceTable;
        return deviceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceTrans</Name>
				<Source><![CDATA[
    public BOBIoTDeviceTrans parmDeviceTrans(BOBIoTDeviceTrans _deviceTrans = deviceTrans)
    {
        deviceTrans = _deviceTrans;
        return deviceTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>