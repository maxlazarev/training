<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBIoTProcessObjectLocationChanged</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBIoTProcessObjectLocationChanged
{
    BOBIoTDeviceTrans deviceTrans;
    BOBIoTParameters iotParameters = BOBIoTParameters::find();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOBIoTProcessObjectLocationChanged construct(BOBIoTDeviceTrans _deviceTrans)
    {
        BOBIoTProcessObjectLocationChanged objectLocationChangeProcessor = new BOBIoTProcessObjectLocationChanged();
        objectLocationChangeProcessor.parmDeviceTrans(_deviceTrans);

        return objectLocationChangeProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.dataset() != tableNum(BOBIoTDeviceTrans))
        {
            throw error(Error::missingRecord(tableId2pname(tableNum(BOBIoTDeviceTrans))));
        }

        BOBIoTDeviceTrans deviceTrans = _args.record();

        BOBIoTProcessObjectLocationChanged objectLocationChangeProcessor = BOBIoTProcessObjectLocationChanged::construct(deviceTrans);
        objectLocationChangeProcessor.processObjectLocationChange();
        objectLocationChangeProcessor.researchCallerDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processObjectLocationChange</Name>
				<Source><![CDATA[
    public void processObjectLocationChange()
    {
        LogisticsPostalAddress address;
        BOBObjectLocationLog locationLog;
        BOBIoTDeviceTable deviceTable;
        BOBObjectTable objectTable;

        select firstonly TableId from locationLog order by FromDateTime desc
        where locationLog.FromDateTime <= deviceTrans.MessageDateTime
            join forupdate address
            where locationLog.PostalAddress == address.RecId
                join ObjectId from deviceTable
                where deviceTable.ObjectId == locationLog.ObjectId
                &&    deviceTable.RecId == deviceTrans.DeviceTableRecId
                    join forupdate objectTable
                    where objectTable.ObjectId == deviceTable.ObjectId;

        if (address)
        {
            ttsbegin;

            address.ValidTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            address.Address = '';
            address.City = '';
            address.CountryRegionId = '';
            address.Street = '';
            address.ZipCode = '';
            address.StreetNumber = '';
            address.County = '';
            address.State = '';
            address.Longitude = deviceTrans.Longitude;
            address.Latitude = deviceTrans.Latitude;
            address.update();
            
            this.updateProcessingStatusWithinInterval(deviceTrans);

            objectTable.MustUpdateObjectLocation = NoYes::Yes;
            objectTable.update();

            ttscommit;

            info(strFmt("@DNR:UpdatedLocationOfObject1", deviceTable.ObjectId));
        }
        else
        {
            throw error(strFmt("@DNR:MissingCurrentLocationObjectX", deviceTable.ObjectId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessingStatusWithinInterval</Name>
				<Source><![CDATA[
    // Skip any messages generated within the time interval specified in the IoT parameters
    private void updateProcessingStatusWithinInterval(BOBIoTDeviceTrans _deviceTrans)
    {
        ttsbegin;

        _deviceTrans.selectForUpdate(true);
        _deviceTrans.IsObjectLocationChangedProcessed = NoYes::Yes;
        _deviceTrans.update();

        BOBIoTDeviceTrans transWithinInterval;
        

        select firstonly forupdate transWithinInterval
        order by MessageDateTime desc
        where transWithinInterval.DeviceTableRecId == _deviceTrans.DeviceTableRecId
        &&    transWithinInterval.RecId != _deviceTrans.RecId
        &&    !transWithinInterval.IsObjectLocationChangedProcessed
        &&    transWithinInterval.MessageDateTime <= _deviceTrans.MessageDateTime 
        &&    transWithinInterval.MessageDateTime >= DateTimeUtil::addHours(_deviceTrans.MessageDateTime, -iotParameters.LocationChangeInterval);

        if (transWithinInterval)
        {
            transWithinInterval.IsObjectLocationChangedProcessed = NoYes::Yes;
            transWithinInterval.update();

            this.updateProcessingStatusWithinInterval(transWithinInterval);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchCallerDatasource</Name>
				<Source><![CDATA[
    private void researchCallerDatasource()
    {
        FormDataSource deviceTrans_ds = FormDataUtil::getFormDataSource(deviceTrans);

        if (deviceTrans_ds)
        {
            deviceTrans_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceTrans</Name>
				<Source><![CDATA[
    public BOBIoTDeviceTrans parmDeviceTrans(BOBIoTDeviceTrans _deviceTrans = deviceTrans)
    {
        deviceTrans = _deviceTrans;
        return deviceTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>