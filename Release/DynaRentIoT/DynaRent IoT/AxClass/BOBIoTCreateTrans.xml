<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBIoTCreateTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBIoTCreateTrans extends RunBase
{
    Dialog dialog;
    DialogField dfDeviceRecId,
                dfTransDateTime,
                dfLongitute,
                dfLatitude,
                dfMeterValue;

    BOBIoTDeviceTrans callerDeviceTrans;
    BOBIoTDeviceTable callerDeviceTable;

    BOBTransDateTime transDateTime;
    AddressLongitude longitude;
    AddressLatitude latitude;
    BOBMeterValue meterValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOBIoTDeviceTrans callerDeviceTrans;
        BOBIoTDeviceTable callerDeviceTable;
        BOBIoTCreateTrans createTrans = new BOBIoTCreateTrans();

        if (_args)
        {
            if (_args.dataset() == tableNum(BOBIoTDeviceTrans))
            {
                callerDeviceTrans = _args.record();
                callerDeviceTable = BOBIoTDeviceTable::findRecId(callerDeviceTrans.DeviceTableRecId);
                createTrans.parmDeviceTrans(callerDeviceTrans);
                createTrans.parmDeviceTable(callerDeviceTable);
            }
            else if (_args.dataset() == tableNum(BOBIoTDeviceTable))
            {
                callerDeviceTable = _args.record();
                createTrans.parmDeviceTable(callerDeviceTable);
            }
        }

        if (createTrans.prompt())
        {
            createTrans.runOperation();
    
            if (callerDeviceTable && FormDataUtil::isFormDataSource(callerDeviceTable))
            {
                FormDataUtil::getFormDataSource(callerDeviceTable).research(true);
            }
            else if (callerDeviceTrans && FormDataUtil::isFormDataSource(callerDeviceTrans))
            {
                FormDataUtil::getFormDataSource(callerDeviceTrans).research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();
        dialog.caption("@DNR:RegisterIoTDeviceTrans");
        dialog.allowUpdateOnSelectCtrl(true);
    
        dfDeviceRecId = new DialogField(dialog, extendedTypeStr(BOBIoTDeviceTableRecId));
        dialog.addCtrlDialogField("@SYS90307");
        dfDeviceRecId.init(dialog);
        dfDeviceRecId.value(callerDeviceTable.RecId);
        dfDeviceRecId.allowEdit(callerDeviceTable.RecId == 0);
        FormBuildInt64Control refCtrl = dfDeviceRecId.control();
        refCtrl.mandatory(true);
    
        dfTransDateTime = dialog.addFieldValue(extendedTypeStr(BOBTransDateTime), DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone()));
        FormBuildDateTimeControl dtCtrl = dfTransDateTime.control();
        dtCtrl.mandatory(true);
    
        dfLongitute = dialog.addField(extendedTypeStr(AddressLongitude), "@SYS108830");
        dfLatitude = dialog.addField(extendedTypeStr(AddressLatitude), "@SYS108812");
        dfMeterValue = dialog.addField(extendedTypeStr(BOBMeterValue), "@DNR6964");
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        callerDeviceTable = BOBIoTDeviceTable::findRecId(dfDeviceRecId.value());
        transDateTime = DateTimeUtil::removeTimeZoneOffset(dfTransDateTime.value(), DateTimeUtil::getUserPreferredTimeZone());
        longitude = dfLongitute.value();
        latitude = dfLatitude.value();
        meterValue = dfMeterValue.value();
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewTrans</Name>
				<Source><![CDATA[
    private void createNewTrans()
    {
        ttsBegin;

        BOBIoTDeviceTrans deviceTransNew;
        deviceTransNew.DeviceTableRecId = callerDeviceTable.RecId;
        deviceTransNew.MessageDateTime = transDateTime;
        deviceTransNew.Longitude = longitude;
        deviceTransNew.Latitude = latitude;
        deviceTransNew.MeterValue = meterValue;
        deviceTransNew.TransStatus = BOBIoTDeviceTransStatus::NotProcessed;

        deviceTransNew.insert();
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ;
    
        if (this.validate())
        {
            try
            {
                this.createNewTrans();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
        else
        {
            throw error("@SYS93289");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceTrans</Name>
				<Source><![CDATA[
    private BOBIoTDeviceTrans parmDeviceTrans(BOBIoTDeviceTrans _callerDeviceTrans = callerDeviceTrans)
    {
        callerDeviceTrans = _callerDeviceTrans;
        return callerDeviceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceTable</Name>
				<Source><![CDATA[
    private BOBIoTDeviceTable parmDeviceTable(BOBIoTDeviceTable _callerDeviceTable = callerDeviceTable)
    {
        callerDeviceTable = _callerDeviceTable;
        return callerDeviceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (latitude > 90)
        {
            ret = checkFailed(strFmt("@SYS344287", "@SYS108812", 90));
        }

        if (longitude > 180)
        {
            ret = checkFailed(strFmt("@SYS344287", "@SYS108812", 180));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>