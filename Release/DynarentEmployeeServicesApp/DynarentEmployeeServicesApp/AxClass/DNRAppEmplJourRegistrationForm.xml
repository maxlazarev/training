<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAppEmplJourRegistrationForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRAppEmplJourRegistrationForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRAppEmplJourRegistrationForm construct()
    {
        return new DNRAppEmplJourRegistrationForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectedRecordsStatuses</Name>
				<Source><![CDATA[
    public static void updateSelectedRecordsStatuses(FormDataSource _formDataSource, DNRAppEmplJourTransactionProcessingStatus _newStatus)
    {
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(_formDataSource);
        DNRAppEmplJourTrans appWorkOrderJournalTrans = helper.getFirst();
        Counter updatedRecords;

        while (appWorkOrderJournalTrans.RecId != 0)
        {
            if (appWorkOrderJournalTrans.TransactionProcessingStatus != _newStatus)
            {
                appWorkOrderJournalTrans.TransactionProcessingStatus = _newStatus;
                appWorkOrderJournalTrans.update();

                updatedRecords++;
            }

            appWorkOrderJournalTrans = helper.getNext();
        }

        if (updatedRecords)
        {
            info(strFmt("@DNR:UpdatedXRecordsToStatusY", updatedRecords, _newStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSelectedRecords</Name>
				<Source><![CDATA[
    public void processSelectedRecords(FormDataSource _formDataSource)
    {
        Map processingRecIdsSetPerCompany = this.initProcessingRecIdsSetPerCompany(_formDataSource);

        DNRAppEmplJourTransPost workOrderLineEmplAppTransPost = DNRAppEmplJourTransPost::construct(processingRecIdsSetPerCompany);
        workOrderLineEmplAppTransPost.run();

        _formDataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessingRecIdsSetPerCompany</Name>
				<Source><![CDATA[
    private Map initProcessingRecIdsSetPerCompany(FormDataSource _callerDatasource)
    {
        // Company -> {RecIds to process}
        Map processingRecIdsSetPerCompany = new Map(Types::String, Types::Class);

        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(_callerDatasource);
        DNRAppEmplJourTrans appWorkOrderJournalTrans = helper.getFirst();

        while (appWorkOrderJournalTrans.RecId != 0)
        {
            if (this.mustAddJournalTrans(appWorkOrderJournalTrans))
            {
                Set processingRecIdsSet = processingRecIdsSetPerCompany.exists(appWorkOrderJournalTrans.ProcessingCompany) ?
                                          processingRecIdsSetPerCompany.lookup(appWorkOrderJournalTrans.ProcessingCompany) :
                                          new Set(Types::Int64);

                processingRecIdsSet.add(appWorkOrderJournalTrans.RecId);
                processingRecIdsSetPerCompany.insert(appWorkOrderJournalTrans.ProcessingCompany, processingRecIdsSet);
            }

            appWorkOrderJournalTrans = helper.getNext();
        }

        return processingRecIdsSetPerCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddJournalTrans</Name>
				<Source><![CDATA[
    protected boolean mustAddJournalTrans(DNRAppEmplJourTrans _appWorkOrderJournalTrans)
    {
        return (_appWorkOrderJournalTrans.TransactionProcessingStatus == DNRAppEmplJourTransactionProcessingStatus::New);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>