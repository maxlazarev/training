<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAppEmplClearLogTablesService_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class contatining extensions for <c>DNRClearLogTablesContract</c> interface.
/// </summary>
[ExtensionOf(classStr(DNRClearLogTablesService))]
final class DNRAppEmplClearLogTablesService_Extension
{
    public WPPParameters parameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearLogTables</Name>
				<Source><![CDATA[
        public void clearLogTables()
    {
        next clearLogTables();

        if (contract.parmClearDNRAppEmplJourTrans())
        {
            ttsbegin;

            parameters = WPPParameters::find();
            DNRAppEmplJourTransArchive appEmplJourTransArchive;

            Query query = this.createQueryStatus(tableNum(DNRAppEmplJourTrans));
            Map targetToSourceMapping = this.createMapping(tableNum(DNRAppEmplJourTrans), tableNum(DNRAppEmplJourTransArchive), query);
            Query::insert_recordset(appEmplJourTransArchive, targetToSourceMapping, query);
            Query::delete_from(query);

            query = this.createQueryCompletedTransactions(tableNum(DNRAppEmplJourTrans));
            targetToSourceMapping = this.createMapping(tableNum(DNRAppEmplJourTrans), tableNum(DNRAppEmplJourTransArchive), query);
            Query::insert_recordset(appEmplJourTransArchive, targetToSourceMapping, query);
            Query::delete_from(query);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemovableStatuses</Name>
				<Source><![CDATA[
    protected container getRemovableStatuses()
    {
        container ret;

        if (parameters.DNRAppEmplJourCleanupStatusNew)
        {
            ret += DNRAppEmplJourTransactionProcessingStatus::New;
        }
 
        if (parameters.DNRAppEmplJourCleanupStatusError)
        {
            ret += DNRAppEmplJourTransactionProcessingStatus::Error;
        }

        if (parameters.DNRAppEmplJourCleanupStatusOnHold)
        {
            ret += DNRAppEmplJourTransactionProcessingStatus::OnHold;
        }

        if (parameters.DNRAppEmplJourCleanupStatusPosted)
        {
            ret += DNRAppEmplJourTransactionProcessingStatus::Posted;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// copy content from one table to another table
    /// </summary>
    public Query createQueryStatus(tableId _tableSource)
    {
        container removableStatuses = this.getRemovableStatuses();
            
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(_tableSource);

        if (conLen(removableStatuses) > 0)
        {
            qbds.addRange(fieldNum(DNRAppEmplJourTrans, TransactionProcessingStatus)).value(con2Str(removableStatuses));
        }

        query.clearAllFields();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryCompletedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// copy content from one table to another table
    /// </summary>
    public Query createQueryCompletedTransactions(tableId _tableSource)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(_tableSource); 
        TransDate cleanupTillDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - parameters.DNRAppEmplRetentionDaysJourTrans;
        qbds.addRange(fieldNum(DNRAppEmplJourTrans, Transdate)).value(strFmt("<= %1", cleanupTillDate));

        qbds = qbds.addDataSource(tableNum(WPPWorkOrderLine));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(WPPWorkOrderLine, WorkOrderId), fieldNum(DNRAppEmplJourTrans, WorkOrderId));
        qbds.addLink(fieldNum(WPPWorkOrderLine, TaskId),      fieldNum(DNRAppEmplJourTrans, WorkOrderLineTaskId));
        qbds.addLink(fieldNum(WPPWorkOrderLine, LineNumber),  fieldNum(DNRAppEmplJourTrans, WorkOrderLineNumber));

        qbds.addRange(fieldNum(WPPWorkOrderLine, Status)).value(queryValue(WPPWorkOrderLineStatus::Completed));

        query.clearAllFields();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearArchiveTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// deletes data from archive tables
    /// </summary>
    public void clearArchiveTables()
    {
        next clearArchiveTables();

        if (contract.parmClearDNRAppEmplJourTransArchive())
        {
            this.deleteArchiveContent(tableNum(DNRAppEmplJourTransArchive), fieldNum(DNRAppEmplJourTransArchive, DateTimeField));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>