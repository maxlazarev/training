<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAppEmplWPPWorkOrderLineResourceTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(WPPWorkOrderLineResource))]
public final class DNRAppEmplWPPWorkOrderLineResourceTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WPPWorkOrderLineResource workOrderLineResourceOrig = this.orig();
    
        next update();

        if (isConfigurationkeyEnabled(configurationKeyNum(DNRAppEmpl))
        && (this.PlannedFromDateTime != workOrderLineResourceOrig.PlannedFromDateTime 
            ||  this.PlannedToDateTime != workOrderLineResourceOrig.PlannedToDateTime 
            ||  this.PlannedDate != workOrderLineResourceOrig.PlannedDate))
        {
            WPPParameters parameters = WPPParameters::find();
            WPPWorkOrderLine workOrderLine = this.workOrderLine();

            if ((parameters.DNRAppEmplWorkOrderLineTriggerStatus == DNRAppEmplWorkOrderLineTriggerStatus::Planned && workOrderLine.Status >= WPPWorkOrderLineStatus::Planned)
             || (parameters.DNRAppEmplWorkOrderLineTriggerStatus == DNRAppEmplWorkOrderLineTriggerStatus::Released && workOrderLine.Status >= WPPWorkOrderLineStatus::Released))
            {
                DNRAppEmplNotificationTable notification;
                notification.initValue();
                notification.initFromWorkOrderLine(workOrderLine);
                notification.initFromWorkOrderLineResource(this);
                notification.setMessage(strFmt("@DNR:PlannedTimesWorkOrderXTaskYChanged", workOrderLine.WorkOrderId, workOrderLine.TaskId));
                notification.insert();
            }
        }       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>