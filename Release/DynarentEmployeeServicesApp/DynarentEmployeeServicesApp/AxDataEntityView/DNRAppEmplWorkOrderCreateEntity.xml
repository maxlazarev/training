<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAppEmplWorkOrderCreateEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRAppEmplWorkOrderCreateEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        changecompany(this.CompanyId)
        {
            BOBObjectTable objectTable = BOBObjectTable::findInventSerialId(this.ObjectSerialNumber);
        
            if (!objectTable)
            {
                throw error(strFmt("@DNR:DNRAWMNoBusinessObjectFoundBySerialNumber", this.ObjectSerialNumber));
            }

            WPPParameters parameters = WPPParameters::find();

            if (!parameters.DNRAppEmplDefaultWorkOrderTemplateId)
            {
                throw error("@DNR:DefaultWorkOrderTemplateNotFilledIn");
            }

            if (!parameters.DNRAppEmplObjAvailChangeReasonCode)
            {
                throw error("@DNR:DefaultReasonCodeNotFilledIn");
            }

            ttsbegin;

            WPPWorkOrderTable workOrderTableToInsert;
            workOrderTableToInsert.initValue();
            workOrderTableToInsert.initFromBOBObjectTable(objectTable);
            workOrderTableToInsert.DNRAppEmplIsCreatedFromApp = NoYes::Yes;


            WPPWorkOrderTemplateTable workOrderTemplateTable = WPPWorkOrderTemplateTable::find(parameters.DNRAppEmplDefaultWorkOrderTemplateId);
            workOrderTableToInsert.initFromWorkOrderTemplateTable(workOrderTemplateTable);
            workOrderTableToInsert.ProjGroupId = workOrderTemplateTable.ProjGroupId;
            workOrderTableToInsert.modifiedField(fieldNum(WPPWorkOrderTable, ProjGroupId));

            workOrderTableToInsert.Name = this.WorkOrderName ? this.WorkOrderName : workOrderTableToInsert.Name;
            workOrderTableToInsert.StartDate = this.StartDate;
            workOrderTableToInsert.EndDate = this.EndDate;

            if (this.LogisticsLocationRecIdStr)
            {
                workOrderTableToInsert.LogisticsLocationRecId = str2Int64(this.LogisticsLocationRecIdStr);
            }

            workOrderTableToInsert.insert();
            this.RecId = workOrderTableToInsert.RecId;

            WPPWorkOrderSynchronizer workOrderSynchronizer;
            Set workOrderTemplateTableSet = new Set(Types::String);
            workOrderTemplateTableSet.add(parameters.DNRAppEmplDefaultWorkOrderTemplateId);
    
            workOrderSynchronizer = WPPWorkOrderSynchronizer::newWorkOrderTable(workOrderTableToInsert, workOrderTemplateTableSet);
            workOrderSynchronizer.run();

            if (this.UpdateTechnicalAvailability)
            {
                BOBObjectManager::changeObjectAvailability(objectTable.ObjectId, NoYes::No, parameters.DNRAppEmplObjAvailChangeReasonCode, workOrderTableToInsert.WorkOrderId);
            }

            DNRAdditionalNoteTable noteTable;
    
            noteTable.initFromCommon(workOrderTableToInsert);
            noteTable.InternalNote = this.InternalNote;
            noteTable.insert();

            if (this.AssignImmediately)
            {
                appl.globalCache().remove("DualWriteBlockedSessions", sessionId());

                WPPWorkOrderLine workOrderLine;

                while select forupdate workOrderLine
                where workOrderLine.WorkOrderId == workOrderTableToInsert.WorkOrderId
                {
                    // Only schedule tasks for which the dates have been automatically filled in by the setup
                    if (workOrderLine.RequestedStartDateTime
                    &&  workOrderLine.RequestedEndDateTime)
                    {
                        WPPWorkOrderLineResource::createFromWorkOrderLine(workOrderLine, null, this.ResourceId, WrkCtrGroupWrkCtr::WrkCtr);
                        WPPWorkOrderStatusUpdate statusUpdate = WPPWorkOrderStatusUpdate::construct(workOrderLine, WPPWorkOrderLineStatus::Released);
                        statusUpdate.init(false);
                        statusUpdate.run();
                    }
                    else
                    {
                        throw error(strFmt("@DNR:PlanningDatesNotFilledIn", workOrderLine.WorkOrderId, workOrderLine.LineNumber, workOrderLine.TaskId));
                    }
                }
            }
        
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@DNR:DNRAppEmplWorkOrderCreateEntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DNRAppEmplWorkOrderCreateStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DNRAppEmplWorkOrderCreates</PublicCollectionName>
	<PublicEntityName>DNRAppEmplWorkOrderCreate</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>WorkOrderName</Name>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>WPPWorkOrderName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ObjectSerialNumber</Name>
			<Mandatory>Yes</Mandatory>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>UpdateTechnicalAvailability</Name>
			<Label>@DNR5780</Label>
			<Mandatory>Yes</Mandatory>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>StartDate</Name>
			<Mandatory>Yes</Mandatory>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>EndDate</Name>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>EndDate</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>AssignImmediately</Name>
			<Label>@DNR:AssignToSelf</Label>
			<Mandatory>Yes</Mandatory>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>InternalNote</Name>
			<Mandatory>Yes</Mandatory>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ResourceId</Name>
			<Mandatory>Yes</Mandatory>
			<ExtendedDataType>WPPResourceId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt64">
			<Name>LogisticsLocationRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>LogisticsLocationRecIdStr</Name>
			<ExtendedDataType>String20</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>dataareaid</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ObjectSerialNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>StartDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>EndDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ResourceId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WPPWorkOrderTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WPPWorkOrderTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>