<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRBusinessObjectV3Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRBusinessObjectV3Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        //return DNRBusinessObjectV3EntityHelper::importBusObj(this).RecId;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        BOBObjectTable objectTable;
        objectTable = DNRBusinessObjectV3EntityHelper::importBusObj(this);

        if (objectTable)
        {
            this.ObjectId       = objectTable.ObjectId;
            this.InventSerialId = objectTable.InventSerialId;
            this.RecId          = objectTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
        BOBObjectTable  objectTable;
    
        ret = super(_entityCtx, _dataSourceCtx);

        if(this.FleetNumber)
        {
            objectTable = BOBObjectTable::findObjectId(this.ObjectId, true);
            objectTable.FleetNumber = this.FleetNumber;
            objectTable.update();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DMFStagingValidationLog log;
        log.skipDataMethods(true);

        delete_from log
        where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
        &&    log.ExecutionId         == _dmfDefinitionGroupExecution.ExecutionId;

        ttsbegin;

        BOBObjectTable             objectTable;
        InventSerial               inventSerial;
        BOBObjectAvailabilityLog   availablityLog;
        BOBObjectLocationLog       locationLog;
        BOBObjectOwnershipLog      ownershipLog;
        BOBObjectAssetLog          assetLog;
        DNrBusinessObjectV3Staging staging;
        DIRPARTYENTITY             partyEntity;
        EcoResProduct              product;
        InventTable                inventTable;
        LogisticsLocation          logisticsLocation;
        LogisticsPostalAddress     postalAddress;
        NoYes                      skipObjectCreationWithSrNo = NoYes::Yes;
        BOBObjectDetailsLog        objectDetailsLog;
        WPPResourceTable           resourceGroup;
        BOBRentalTrans             stockRentalTrans;
        TransDateTime              minDateTimeValue = DateTimeUtil::minValue();

        //Step#1. Skip records where the business object already exists
        update_recordset staging
        setting IsObjectCreated =  NoYes::No,
                TransferStatus  =  DMFTransferStatus::Error
        where staging.DefinitionGroup  == _dmfDefinitionGroupExecution.DefinitionGroup
        &&    staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
        &&    staging.TransferStatus   == DMFTransferStatus::NotStarted
            exists join objectTable
            where objectTable.ObjectId == staging.ObjectId;

        //Step#2. Insert serial numbers
        inventSerial.skipDataMethods(true);
        inventSerial.skipEvents(true);
        insert_recordset inventSerial (InventSerialId, ProdDate, ItemId, BOBSkipObjectCreation)
            select InventSerialId, ProductionDate from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.InventSerialId
                join product
                where product.BOBRentalTypeId == staging.RentalTypeId
                    join ItemId, skipObjectCreationWithSrNo from inventTable
                    where inventTable.Product == product.RecId;

        //-----------------------------------------
        //Step#3. Insert BOBObjectTable records
        objectTable.skipDataMethods(true);
        objectTable.skipEvents(true);
        insert_recordset objectTable (ObjectId, RentalTypeId, Category, InventSerialId, Name, ExternalObjectId, AcqProductNumber, FleetNumber, WarrantyToDate)
            select ObjectId, RentalTypeId, Category, InventSerialId, Name, ExternalObjectId, AcqProductNumber, FleetNumber, WarrantyToDate  from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted;

        // Get the number of records inserted.
        int64 newRecords = objectTable.RowCount();

        //Update the IsObjectCreated column on the staging to mark how many records inserted successfully
        update_recordset staging
        setting IsObjectCreated = NoYes::Yes
        where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
        &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
        &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            exists join objectTable
            where objectTable.ObjectId == staging.ObjectId;

        //update the organization id
        update_recordset objectTable
        setting OrganizationParty = partyEntity.RecId
            join OrganizationNumber from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.ObjectId        == objectTable.ObjectId
            &&    staging.IsObjectCreated
            &&    staging.OrganizationNumber
                join RecId from partyEntity
                where partyEntity.OrganizationNumber == staging.OrganizationNumber;

        //update the resource group id
        update_recordset objectTable
        setting WPPResourceGroupRecId = resourceGroup.RecId
            join ResourceGroupId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.ObjectId        == objectTable.ObjectId
            &&    staging.IsObjectCreated
            &&    staging.ResourceGroupId
                join RecId from resourceGroup
                where resourceGroup.ResourceId == staging.ResourceGroupId
                &&    !resourceGroup.IsIndividualResource;
        
        //-----------------------------------------
        //Step#4. Insert object availablity log records
        availablityLog.skipDataMethods(true);
        availablityLog.skipEvents(true);
        insert_recordset availablityLog (ObjectId, IsAvailable, DNRReasonCode)
            select ObjectId, IsAvailable, ReasonCode from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated
            &&    staging.ReasonCode;

        //-----------------------------------------
        //Step#5. Insert object location log records
        logisticsLocation.skipDataMethods(true);
        logisticsLocation.skipEvents(true);
        insert_recordset logisticsLocation (LocationId)
            select ObjectId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.ObjectId
            &&    staging.ZipCode
            &&    staging.Street
            &&    staging.City
            &&    staging.isObjectCreated;

        postalAddress.skipDataMethods(true);
        postalAddress.skipEvents(true);
        insert_recordset postalAddress (Address, Street, StreetNumber, City, CountryRegionId, ZipCode, Location)
            select Address, Street, StreetNumber, City, CountryRegionId, ZipCode from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.ObjectId
            &&    staging.ZipCode
            &&    staging.Street
            &&    staging.City
            &&    staging.isObjectCreated
                join RecId from logisticsLocation
                where logisticsLocation.LocationId == staging.ObjectId;

        locationLog.skipDataMethods(true);
        locationLog.skipEvents(true);
        insert_recordset locationLog (ObjectId, FromDateTime, PostalAddress)
            select ObjectId, LocationFromDateTime from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.ZipCode
            &&    staging.Street
            &&    staging.City
            &&    staging.isObjectCreated
                join RecId from postalAddress
                where postalAddress.Street  == staging.Street
                &&    postalAddress.City    == staging.City
                &&    postalAddress.ZipCode == staging.ZipCode
                    join logisticsLocation
                    where logisticsLocation.LocationId == staging.ObjectId
                    &&    logisticsLocation.RecId      == postalAddress.Location;

        //-----------------------------------------
        //Step#6. Insert ownership log records
        ownershipLog.skipDataMethods(true);
        ownershipLog.skipEvents(true);
        insert_recordset ownershipLog (ObjectId, Depot, DepotStartDate, FinancialOwner, PhysicalOwner, FirstOnRentDate)
            select ObjectId, Depot, DepotStartDate, FinancialOwner, PhysicalOwner, FirstOnRentDate from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated;

        //-----------------------------------------
        //Step#7. Insert asset log (BO-FA link) records
        assetLog.skipDataMethods(true);
        assetLog.skipEvents(true);
        insert_recordset assetLog (ObjectId, AssetId, AssetCompanyId, ValidFrom, ValidTo)
            select ObjectId, AssetId, AssetCompanyId, AssetValidFrom, AssetValidTo from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.AssetId
            &&    staging.AssetCompanyId
            &&    staging.isObjectCreated;

        //Step#8. Insert object log records
        objectDetailsLog.skipDataMethods(true);
        objectDetailsLog.skipEvents(true);
        insert_recordset objectDetailsLog (ObjectId, AssetId, Category, RentalTypeId, FleetNumber)
            select ObjectId, AssetId, Category, RentalTypeId, FleetNumber from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated;

        objectDetailsLog.skipDataMethods(true);
        objectDetailsLog.skipEvents(true);
        update_recordset objectDetailsLog
        setting OrganizationParty = partyEntity.RecId
            join TableId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.OrganizationNumber
            &&    staging.isObjectCreated
                join RecId from partyEntity
                where partyEntity.OrganizationNumber == staging.OrganizationNumber;

        //Step#9. Generate rental transactions for rental stock calculation
        //Create rental transactions
        stockRentalTrans.skipDataMethods(true);
        stockRentalTrans.skipEvents(true);
        insert_recordset stockRentalTrans (AssetId, ObjectId, RentalTypeId, CompanyId, FromDateTime, ToDateTime, InventLocationId, Qty)
            select AssetId, ObjectId, RentalTypeId, PhysicalOwner, StockAvailabilityStartDateTime, StockAvailabilityEndDateTime, Depot, StockQty from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated
            &&    staging.GenerateRentalStockTransaction;

        //Update rental transactions with fixed values
        stockRentalTrans.skipDataMethods(true);
        stockRentalTrans.skipEvents(true);
        update_recordset stockRentalTrans
        setting Active        = BOBRentalTransActive::Active,
                TransType     = BOBRentalTransType::Asset,
                SubStatus     = BOBRentalSubStatus::Invoiced,
                CertaintyFrom = BOBDateTimeCertainty::Fixed,
                CertaintyTo   = BOBDateTimeCertainty::Fixed
            join TableId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated
            &&    staging.GenerateRentalStockTransaction
            &&    staging.ObjectId        == stockRentalTrans.ObjectId;

        //Update rental transactions' stock start date/time value which is left blank
        stockRentalTrans.skipDataMethods(true);
        stockRentalTrans.skipEvents(true);
        update_recordset stockRentalTrans
        setting ToDateTime = DateTimeUtil::getSystemDateTime()
            join TableId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated
            &&    staging.GenerateRentalStockTransaction
            &&    staging.ObjectId        == stockRentalTrans.ObjectId
            &&    staging.StockAvailabilityStartDateTime == minDateTimeValue;

        //Update rental transactions' stock end date/time value which is left blank
        stockRentalTrans.skipDataMethods(true);
        stockRentalTrans.skipEvents(true);
        update_recordset stockRentalTrans
        setting ToDateTime = DateTimeUtil::maxValue()
            join TableId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated
            &&    staging.GenerateRentalStockTransaction
            &&    staging.ObjectId        == stockRentalTrans.ObjectId
            &&    staging.StockAvailabilityEndDateTime == minDateTimeValue;

        //Update rental transactions' CompanyId field, which might be left blank if PhysicalOwner value is not provided
        stockRentalTrans.skipDataMethods(true);
        stockRentalTrans.skipEvents(true);
        update_recordset stockRentalTrans
        setting CompanyId = curExt()
            join TableId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated
            &&    staging.GenerateRentalStockTransaction
            &&    staging.ObjectId        == stockRentalTrans.ObjectId
            &&    !staging.PhysicalOwner;

        // Get the number of records updated.
        int64 updatedRecords = 0;

        //-----------------------------------------
        //Step#9. Update transferred records to success status.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Completed
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    staging.isObjectCreated;

        //-----------------------------------------
        //Step#10. Update transferred records to error status.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
            &&    staging.TransferStatus  == DMFTransferStatus::NotStarted
            &&    !staging.isObjectCreated;

        //-----------------------------------------
        //Step#11. Creating error message log record
        str errorMsg                 = "@DNR:DataMgmtBOCreationError";
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        str tableName                = tableStr(DNrBusinessObjectV3Staging);
        str fieldName                = fieldStr(DNrBusinessObjectV3Staging, ObjectId);
        str entityName               = "@DNR:DataMgmtBOV3Entity";

        insert_recordset log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, errorMsg from staging
            where staging.TransferStatus  == DMFTransferStatus::Error
            &&    staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            &&    staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId;

        ttscommit;

        return [newRecords, updatedRecords];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR:DataEntityBOImportV2HelpTxt</DeveloperDocumentation>
	<Label>@DNR:DataMgmtBOV3Entity</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DNRBusinessObjectV3Staging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DNRBusinessObjectsV3</PublicCollectionName>
	<PublicEntityName>DNRBusinessObjectV3</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Category</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>Category</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalObjectId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ExternalObjectId</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventSerialId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>InventSerialId</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ObjectId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ObjectId</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RentalTypeId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>RentalTypeId</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FleetNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>FleetNumber</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarrantyToDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>WarrantyToDate</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AcqProductNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>AcqProductNumber</DataField>
			<DataSource>BOBObjectTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>AcquistionDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS67433</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>AssetCompanyId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:DataMgmtAssetLeaseCompany</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>TransactionDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS67</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Depot</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR4173</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ReasonCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@RET1386</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Street</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS23438</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>StreetNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS190388</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>4</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>City</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS181124</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>State</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS21924</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>County</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS58609</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CountryRegionId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DMF841</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ZipCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<HelpText>@SYS121851</HelpText>
			<Label>@SYS121851</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>PhysicalOwner</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<HelpText>@DNR5886</HelpText>
			<Label>@DNR5886</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>FirstOnRentDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<HelpText>First on rent date</HelpText>
			<Label>@DNR3769</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>AssetId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>AssetId</Label>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OrganizationNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>DirOrganizationNumber</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<ExtendedDataType>EcoResProductDisplayProductNumber</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsAvailable</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS30545</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldUtcDateTime">
			<Name>LocationFromDateTime</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:DataMgmtLocationFromDT</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Address</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>LogisticsAddressing</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>FinancialOwner</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR5884</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>DepotStartDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>BOBDepotStartDate</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>AssetValidFrom</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:DataMgmtAssetValidFromDate</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>AssetValidTo</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:DataMgmtAssetValidToDate</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsObjectCreated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>ProductionDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>InventSerialProdDate</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ResourceGroupId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS323037</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>WPPResourceId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>GenerateRentalStockTransaction</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:GenerateRentalStockTrans</Label>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldUtcDateTime">
			<Name>StockAvailabilityStartDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:RentalStockStartDateTime</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldUtcDateTime">
			<Name>StockAvailabilityEndDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:RentalStockEndDateTime</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>StockQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@DNR:RentalStockQty</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>Qty</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ObjectId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BOBObjectTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BOBObjectTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>