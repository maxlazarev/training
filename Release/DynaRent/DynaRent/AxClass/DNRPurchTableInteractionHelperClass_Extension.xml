<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchTableInteractionHelperClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchTableInteractionHelper))]
public final class DNRPurchTableInteractionHelperClass_Extension
{
    private UnknownNoYes            buttonJournalPreparationEnabled;
    private UnknownNoYes            buttonJournalOutboundEnabled;
    private UnknownNoYes            buttonJournalBuildEnabled;
    private UnknownNoYes            buttonJournalEventStartEnabled;
    private UnknownNoYes            buttonJournalEventEndEnabled;
    private UnknownNoYes            buttonJournalStrikeEnabled;
    private UnknownNoYes            buttonJournalInboundEnabled;
    private UnknownNoYes            buttonJournalReturnNoteEnabled;
    private UnknownNoYes            buttonJournalReturnInspectionEnabled;

    private UnknownNoYes             enablePreparationButton;
    private UnknownNoYes             enableOutboundButton;
    private UnknownNoYes             enableBuildButton;
    private UnknownNoYes             enableEventStartButton;
    private UnknownNoYes             enableEventEndButton;
    private UnknownNoYes             enableStrikeButton;
    private UnknownNoYes             enableInboundButton;
    private UnknownNoYes             enableReturnNoteButton;
    private UnknownNoYes             enableInspectionButton;
    
    private UnknownNoYes            enableRentalMenuButton;
    private UnknownNoYes            enableAmendmentLostOrder;
    private UnknownNoYes            enableAmendmentDateChangeLine;
    private UnknownNoYes            enableAmendmentDateChangeHeader;
    private UnknownNoYes            enableRentalLineEditorForm;
    private UnknownNoYes            enableAmendmentRentalStopLine;
    private UnknownNoYes            enableAmendmentCreditLine;
    private UnknownNoYes            enableAmendmentResetValueLine;
    private UnknownNoYes            enableAmendmentBlockPeriodLine;
    private UnknownNoYes            enableCreateInventSerial;
    private UnknownNoYes            enableShowBusinessObject;
    
    private UnknownNoYes            existsWorkOrderHeader; 
    private UnknownNoYes            existsWorkOrderLine;

    private PurchTableCanBeUpdatedContract  purchTableCanBeUpdatedContract;

    // *** Repeated code
    #localmacro.GetCached
        if (%1 == UnknownNoYes::Unknown)
        {
            %1 = (
                %2
                ) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }
        return %1 == UnknownNoYes::Yes;
    #endmacro

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchTableInteractionHelper construct(
        PurchTableFormId        _purchTableFormId,
        PurchTable              _purchTable,
        container               _packedPurchTableForm)
    {
        PurchTableInteractionHelper ret = next construct(_purchTableFormId, _purchTable, _packedPurchTableForm);

        ret.RORinitCanBeUpdated();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonOnHandEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonOnHandEnabled()
    {
        boolean mustApplyCondition = (buttonOnHandEnabled == UnknownNoYes::Unknown);
        boolean ret = next parmbuttonOnHandEnabled();

        if(ret && mustApplyCondition)
        {
            ret = ret && purchLine.ReturnStatus != ReturnStatusLine::Canceled;
            buttonOnHandEnabled = ret ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonLotEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonLotEnabled()
    {
        boolean mustApplyCondition = (buttonLotEnabled == UnknownNoYes::Unknown);
        boolean ret = next parmbuttonLotEnabled();

        if(ret && mustApplyCondition)
        {
            ret = ret && purchLine.ReturnStatus != ReturnStatusLine::Canceled;
            buttonLotEnabled = ret ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonTransactionsEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonTransactionsEnabled()
    {
        boolean mustApplyCondition = (buttonTransactionsEnabled == UnknownNoYes::Unknown);
        boolean ret = next parmbuttonTransactionsEnabled();

        if(ret && mustApplyCondition)
        {
            ret = ret && purchLine.ReturnStatus != ReturnStatusLine::Canceled;
            buttonTransactionsEnabled = ret ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBGetCreateInventSerialEnabled</Name>
				<Source><![CDATA[
    // extension methods

    private boolean BOBGetCreateInventSerialEnabled()
    {
        boolean isRentalDirectDelivery;
    
        if (purchTable.InterCompanyDirectDelivery
        && purchTable.PurchaseType == PurchaseType::RORSubRental
        && purchTable.InterCompanyOrder)
        {
            isRentalDirectDelivery = true;
        }
    
        return (!isRentalDirectDelivery && purchLine.RecId && purchLine.ItemId && BOBCreateInventSerialFromPurchLine::validatePurchLine(purchLine, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBParmButtonLineCreateSerialNumEnabled</Name>
				<Source><![CDATA[
    public boolean BOBParmButtonLineCreateSerialNumEnabled()
    {
        #GetCached(enableCreateInventSerial, this.BOBGetCreateInventSerialEnabled() && !this.getEnabledHeaderChangeRequestButtons())
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBparmButtonLineBusinessObjectEnabled</Name>
				<Source><![CDATA[
    public boolean BOBparmButtonLineBusinessObjectEnabled()
    {
        #GetCached(enableShowBusinessObject, this.BOBgetBusinessObjectEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBgetBusinessObjectEnabled</Name>
				<Source><![CDATA[
    private boolean BOBgetBusinessObjectEnabled()
    {
        boolean isSubRental = (purchLine.RORTradeType == RORTradeType::SubRental);
        boolean canShowObject = isSubRental;

        if (!isSubRental)
        {
            // For purchase order line show Business Object button only if a serial number is assigned.
            canShowObject = (purchLine.inventDim().inventSerialId != '');
        }

        return canShowObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetEnableChangeDateHeader</Name>
				<Source><![CDATA[
    private boolean RORGetEnableChangeDateHeader()
    {
        PurchLine purchLineCheck;

        select firstonly RecId from purchLineCheck
        where purchLineCheck.PurchId == purchTable.PurchId
        &&    (purchLineCheck.PurchStatus == PurchStatus::None
            || purchLineCheck.PurchStatus == PurchStatus::Backorder
            || purchLineCheck.PurchStatus == PurchStatus::Received);
    
        return purchLineCheck.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetEnableLostOrder</Name>
				<Source><![CDATA[
    private boolean RORGetEnableLostOrder()
    {
        PurchLine   purchLineCheck;
        InventDim   inventDim;
    
        select firstonly RecId from purchLineCheck
        where purchLineCheck.PurchId     == purchTable.PurchId
        &&    purchLineCheck.PurchStatus == PurchStatus::Received
        &&    purchLineCheck.PurchStatus == PurchStatus::Invoiced
        &&    purchLineCheck.PurchStatus == PurchStatus::Canceled;
    
        if (!purchLineCheck.RecId)
        {
            purchLineCheck.clear();
    
            // No serial number can be assigned to any line of the current order
            select firstOnly RecId from purchLineCheck
            where purchLineCheck.PurchId     == purchTable.PurchId
                join RecId from inventDim
                where inventDim.inventDimId == purchLineCheck.InventDimId
                &&    inventDim.inventSerialId;
        }
    
        return !purchLineCheck.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitCanBeUpdated</Name>
				<Source><![CDATA[
    private void RORinitCanBeUpdated()
    {
        PurchTableCheckIfUpdateContract checkIfContract = PurchTableCheckIfUpdateContract::construct();
        container                       canBeUpdated;
    
        checkIfContract.RORparmCheckPreparation(true);
        checkIfContract.RORparmCheckOutbound(true);
        checkIfContract.RORparmCheckBuild(true);
        checkIfContract.RORparmCheckEventStart(true);
        checkIfContract.RORparmCheckEventEnd(true);
        checkIfContract.RORparmCheckStrike(true);
        checkIfContract.RORparmCheckInbound(true);
        checkIfContract.RORparmCheckReturnNote(true);
        checkIfContract.RORparmCheckInspection(true);
    
        canBeUpdated = purchTable.checkIfUpdate(checkIfContract.pack());
        purchTableCanBeUpdatedContract = PurchTableCanBeUpdatedContract::create(canBeUpdated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalBuildEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalBuildEnabled()
    {
        #GetCached(buttonJournalBuildEnabled, purchTable.RORLastBuild() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalEventEndEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalEventEndEnabled()
    {
        #GetCached(buttonJournalEventEndEnabled, purchTable.RORLastEventEnd() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalEventStartEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalEventStartEnabled()
    {
        #GetCached(buttonJournalEventStartEnabled, purchTable.RORLastEventStart() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalInboundEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalInboundEnabled()
    {
        #GetCached(buttonJournalInboundEnabled, purchTable.RORLastInbound() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalInspectionEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalInspectionEnabled()
    {
        #GetCached(buttonJournalReturnInspectionEnabled, purchTable.RORLastReturnInspection() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalOutboundEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalOutboundEnabled()
    {
        #GetCached(buttonJournalOutboundEnabled, purchTable.RORLastOutbound() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalPreparationEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalPreparationEnabled()
    {
        #GetCached(buttonJournalPreparationEnabled, purchTable.RORLastPreparation() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalReturnNoteEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalReturnNoteEnabled()
    {
        #GetCached(buttonJournalReturnNoteEnabled, purchTable.RORLastReturned() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmbuttonJournalStrikeEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmbuttonJournalStrikeEnabled()
    {
        #GetCached(buttonJournalStrikeEnabled, purchTable.RORLastStrike() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentBlockPeriodLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentBlockPeriodLine()
    {
        #GetCached(enableAmendmentBlockPeriodLine, purchLine.RORTradeType != RORTradeType::SalesPurch && (purchLine.PurchStatus != PurchStatus::Invoiced && purchLine.PurchStatus != PurchStatus::Canceled))
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentCreditLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentCreditLine()
    {
        #GetCached(enableAmendmentCreditLine, purchLine.RORTradeType != RORTradeType::SalesPurch)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentDateChangeHeader</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentDateChangeHeader()
    {
        #GetCached(enableAmendmentDateChangeHeader, this.RORGetEnableChangeDateHeader())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentDateChangeLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentDateChangeLine()
    {
        #GetCached(enableAmendmentDateChangeLine, purchLine.RORTradeType == RORTradeType::SubRental && (purchLine.PurchStatus != PurchStatus::Invoiced && purchLine.PurchStatus != PurchStatus::Canceled))
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentLostOrder</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentLostOrder()
    {
        #GetCached(enableAmendmentLostOrder, this.RORGetEnableLostOrder())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentRentalStopLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentRentalStopLine()
    {
        #GetCached(enableAmendmentRentalStopLine, purchLine.RORTradeType != RORTradeType::SalesPurch)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentResetValueLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentResetValueLine()
    {
        #GetCached(enableAmendmentResetValueLine, purchLine.RORTradeType != RORTradeType::SalesPurch)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableBuildButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableBuildButton()
    {
        #GetCached(enableBuildButton, purchTableCanBeUpdatedContract.RORparmCanBuildBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableEventEndButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableEventEndButton()
    {
        #GetCached(enableEventEndButton, purchTableCanBeUpdatedContract.RORparmCanEventEndBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableEventStartButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableEventStartButton()
    {
        #GetCached(enableEventStartButton, purchTableCanBeUpdatedContract.RORparmCanEventStartBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableInboundButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableInboundButton()
    {
        #GetCached(enableInboundButton, purchTableCanBeUpdatedContract.RORparmCanInboundBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableInspectionButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableInspectionButton()
    {
        #GetCached(enableInspectionButton, purchTableCanBeUpdatedContract.RORparmCanInspectionBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableOutboundButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableOutboundButton()
    {
        #GetCached(enableOutboundButton, purchTableCanBeUpdatedContract.RORparmCanOutboundBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnablePreparationButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnablePreparationButton()
    {
        #GetCached(enablePreparationButton, purchTableCanBeUpdatedContract.RORparmCanPreparationBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableRentalLineEditorForm</Name>
				<Source><![CDATA[
    public boolean RORparmEnableRentalLineEditorForm()
    {
        // Workaround for the "Common Language Runtime detected an invalid program.", resulting from the update to 10.0.13 PEAP
        PurchLine purchLineLoc = purchLine;
        #GetCached(enableRentalLineEditorForm, purchLineLoc.RORRentalLine::canOpenRentalEditorForm())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableRentalMenuButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableRentalMenuButton()
    {
        #GetCached(enableRentalMenuButton, purchTable.PurchStatus != PurchStatus::Canceled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableReturnNoteButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableReturnNoteButton()
    {
        #GetCached(enableReturnNoteButton, purchTableCanBeUpdatedContract.RORparmCanReturnNoteBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableStrikeButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableStrikeButton()
    {
        #GetCached(enableStrikeButton, purchTableCanBeUpdatedContract.RORparmCanStrikeBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmButtonLineWorkOrderTableEnabled</Name>
				<Source><![CDATA[
    [SysObsolete('This method is no longer used. Please use WPPParmWorkOrderLineExistsLine() instead.', false)]
    public boolean WPPParmButtonLineWorkOrderTableEnabled()
    {
        return (this.WPPParmWorkOrderLineExistsLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmWorkOrderLineExistsLine</Name>
				<Source><![CDATA[
    public boolean WPPParmWorkOrderLineExistsLine()
    {
        #GetCached(existsWorkOrderLine, WPPWorkOrderTable::existFromOrder(purchLine.TableId, purchLine.RecId))
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmWorkOrderLineExistsHeader</Name>
				<Source><![CDATA[
    public boolean WPPParmWorkOrderLineExistsHeader()
    {
        WPPWorkOrderTable workOrderTable;
        PurchLine purchLineLocal;
    
        select firstOnly RecId from workOrderTable
        exists join purchLineLocal
        where purchLineLocal.TableId == workOrderTable.OrderTableId
        &&    purchLineLocal.RecId   == workOrderTable.OrderRecId
        &&    purchLineLocal.PurchId == purchTable.PurchId;
    
        if (!workOrderTable.RecId)
        {
            select firstOnly RecId from workOrderTable
            where workOrderTable.OrderTableId == purchTable.TableId
            &&    workOrderTable.OrderRecId   == purchTable.RecId;
        }
    
        #GetCached(existsWorkOrderHeader, workOrderTable.RecId)
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>