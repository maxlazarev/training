<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPServicePlanboardData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class WPPServicePlanboardData
{
    #HiGHPlanBoard

    Map                         layoutManagerCache;
    TransDateTime               dateTimeNull;
    WPPParameters               parameters;
    WPPTmpServicePlanboardData  tmpData;
    Timezone                    userPrefTimeZone;
    WPPWorkOrderLineRecId       callerWorkOrderLineRecId;
    FromDateTime                callerFromDateTime;
    ToDateTime                  callerToDateTime;
    HiGHPlanBoard               planBoard;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    protected abstract anytype getCacheKey(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTmpTable</Name>
				<Source><![CDATA[
    public WPPTmpServicePlanboardData getEmptyTmpTable()
    {
        tmpData.insert(); // insert blank record
        return tmpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    public WPPTmpServicePlanboardData getTmpData()
    {
        return tmpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>layoutManagerCode</Name>
				<Source><![CDATA[
    protected abstract WPPLayoutManagerCode layoutManagerCode(WPPTmpServicePlanboardData _tmpData, WPPServicePlanboardSettings _settings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(HiGHPlanBoard _planBoard = null)
    {
        #DNRConstants
        parameters          = WPPParameters::find();
        planBoard           = _planBoard;
        dateTimeNull        = #DNRNullDateTime;
        userPrefTimeZone    = DateTimeUtil::getUserPreferredTimeZone();
        layoutManagerCache  = new Map(Types::String, Types::Container); // { layoutManagerCode, [ dataElementMap, iconMap, backgroundColorMap ] }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFromDateTime</Name>
				<Source><![CDATA[
    public FromDateTime parmCallerFromDateTime(FromDateTime _callerFromDateTime = callerFromDateTime)
    {
        callerFromDateTime = _callerFromDateTime;

        return callerFromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerToDateTime</Name>
				<Source><![CDATA[
    public ToDateTime parmCallerToDateTime(ToDateTime _callerToDateTime = callerToDateTime)
    {
        callerToDateTime = _callerToDateTime;

        return callerToDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerWorkOrderLineRecId</Name>
				<Source><![CDATA[
    public WPPWorkOrderLineRecId parmCallerWorkOrderLineRecId(WPPWorkOrderLineRecId _callerWorkOrderLineRecId = callerWorkOrderLineRecId)
    {
        callerWorkOrderLineRecId = _callerWorkOrderLineRecId;

        return callerWorkOrderLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLayoutMgrCache</Name>
				<Source><![CDATA[
    protected void populateLayoutMgrCache(WPPServicePlanboardSettings _settings)
    {
        WPPLayoutManagerCode    layoutMgrCode;
        WPPCellDataElement      cellDataElement;
        WPPCellIcon             cellIcon;
        ListEnumerator          listEnumerator = _settings.layoutManagerList().getEnumerator();

        while(listEnumerator.moveNext())
        {
            layoutMgrCode = listEnumerator.current();

            if (!layoutManagerCache.exists(layoutMgrCode))
            {
                // build data element map
                Map dataElementMap = new Map(Types::Real, Types::Record); // [ LineNum, WPPCellDataElement ]

                while select cellDataElement
                order by LineNum
                where cellDataElement.LayoutManagerCode == layoutMgrCode
                {
                    dataElementMap.insert(cellDataElement.LineNum, cellDataElement);
                }

                // build icon map
                Map iconMap = new Map(Types::Enum, Types::String); // [ WPPWorkOrderLineCriterion, String ]

                while select Criterion, ResourceId from cellIcon
                where cellIcon.LayoutManagerCode == layoutMgrCode
                {
                    iconMap.insert(cellIcon.Criterion, cellIcon.ResourceId);
                }
                
                // build background color map -- use a method that return the fieldNum of the backgroundColorMap key field (TaskId or LineStatus)
                Map backgroundColorMap = new Map(Types::AnyType, Types::Integer); // [ WPPWorkOrderLineStatus or WPPWorkOrderTaskId, int Color ]

                backgroundColorMap = this.setBackgroundColorMap(backgroundColorMap, layoutMgrCode);

                layoutManagerCache.insert(layoutMgrCode, [ dataElementMap.pack(), iconMap.pack(), backgroundColorMap.pack() ]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBackgroundColorMap</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected Map setBackgroundColorMap(Map _backgroundColorMap, WPPLayoutManagerCode _layoutMgrCode)
    {
        WPPCellBackgroundColor cellBackgroundColor;
        
        while select cellBackgroundColor
        where cellBackgroundColor.LayoutManagerCode == _layoutMgrCode
        {
            _backgroundColorMap.insert(this.getCacheKey(cellBackgroundColor), cellBackgroundColor.Color);
        }

        return _backgroundColorMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBackGroundColor</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected int getBackGroundColor(Map _backgroundColorMap, WPPTmpServicePlanboardData _tmpData)
    {
        int backgroundColor = (_backgroundColorMap.exists(this.getCacheKey(_tmpData)) ?
                               _backgroundColorMap.lookup(this.getCacheKey(_tmpData)) :
                               #ColorGreenYellow);

        return backgroundColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePlanboard</Name>
				<Source><![CDATA[
    public abstract void populatePlanboard(WPPServicePlanboardSettings _settings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    public void populateTmpData(WPPServicePlanboardSettings _settings)
    {
        WPPWorkOrderTable           workOrderTable;
        WPPWorkOrderDetailsView     workOrderDetailsView;
        ProjInvoiceTable            projInvoiceTable;
        RORVenueTable               venueTable;
        SalesLine                   salesLine;
        PurchLine                   purchLine;
        InventDim                   inventDim;
        InventTable                 inventTable;
        CustTable                   custTable;
        VendTable                   vendTable;
        DirPartyTable               partyTable;

        // record insertion is performed in subclasses

        // populate work order invoice status
        update_recordSet tmpData
        setting WPPInvoiceStatus = projInvoiceTable.WPPInvoiceStatus
        where tmpData.WPPWorkOrderId
            join WPPInvoiceStatus from projInvoiceTable
                exists join workOrderTable
                where workOrderTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId
                &&    workOrderTable.WorkOrderId == tmpData.WPPWorkOrderId;

        // populate venue information
        update_recordset tmpData
        setting WPPVenueGroupId = venueTable.VenueGroupId,
                WPPVenueName = venueTable.Name
        where tmpData.WPPVenueCode
            join VenueGroupId, Name from venueTable
            where venueTable.VenueCode == tmpData.WPPVenueCode;

        // populate sales/purchase information
        update_recordset tmpData
        setting SalesPurchId = salesLine.SalesId,
                SalesPurchItemId = salesLine.ItemId,
                SalesPurchQty = salesLine.SalesQty,
                SalesPurchUnit = salesLine.SalesUnit,
                SalesPurchSite = inventDim.InventSiteId,
                SalesPurchWarehouse = inventDim.InventLocationId,
                SalesPurchItemName = inventTable.NameAlias,
                SalesPurchRentalTypeId = salesLine.BOBRentalTypeIdRequested
        where tmpData.WPPOrderTableId == tableNum(SalesLine)
        &&    tmpData.WPPOrderRecId
            join SalesId, ItemId, SalesQty, SalesUnit, BOBRentalTypeIdRequested from salesLine
            where salesLine.RecId == tmpData.WPPOrderRecId
                join InventSiteId, InventLocationId from inventDim
                where inventDim.InventDimId == salesLine.InventDimId
                    join NameAlias from inventTable
                    where inventTable.ItemId == salesLine.ItemId;

        update_recordset tmpData
        setting SalesPurchId = workOrderDetailsView.SalesLineSalesId
        where tmpData.WPPOrderTableId == tableNum(SalesLine)
        &&    tmpData.WPPOrderRecId
        &&   !tmpData.SalesPurchId
            join SalesLineSalesId from workOrderDetailsView
            where workOrderDetailsView.WorkOrderId == tmpData.WPPWorkOrderId;

        update_recordset tmpData
        setting SalesPurchId = workOrderDetailsView.SalesTableSalesId
        where tmpData.WPPOrderTableId == tableNum(SalesTable)
        &&    tmpData.WPPOrderRecId
            join SalesTableSalesId from workOrderDetailsView
            where workOrderDetailsView.WorkOrderId == tmpData.WPPWorkOrderId;

        update_recordset tmpData
        setting SalesPurchId = purchLine.PurchId,
                SalesPurchItemId = purchLine.ItemId,
                SalesPurchQty = purchLine.PurchQty,
                SalesPurchUnit = purchLine.PurchUnit,
                SalesPurchSite = inventDim.InventSiteId,
                SalesPurchWarehouse = inventDim.InventLocationId,
                SalesPurchItemName = inventTable.NameAlias,
                SalesPurchRentalTypeId = purchLine.BOBRentalTypeId
        where tmpData.WPPOrderTableId == tableNum(PurchLine)
        &&    tmpData.WPPOrderRecId
            join PurchId, ItemId, PurchQty, PurchUnit, BOBRentalTypeId from purchLine
            where purchLine.RecId == tmpData.WPPOrderRecId
                join InventSiteId, InventLocationId from inventDim
                where inventDim.InventDimId == purchLine.InventDimId
                    join NameAlias from inventTable
                    where inventTable.ItemId == purchLine.ItemId;

        update_recordset tmpData
        setting SalesPurchId = workOrderDetailsView.PurchLinePurchId
        where tmpData.WPPOrderTableId == tableNum(PurchLine)
        &&    tmpData.WPPOrderRecId
        &&   !tmpData.SalesPurchId
            join PurchLinePurchId from workOrderDetailsView
            where workOrderDetailsView.WorkOrderId == tmpData.WPPWorkOrderId;

        update_recordset tmpData
        setting SalesPurchId = workOrderDetailsView.PurchTablePurchId
        where tmpData.WPPOrderTableId == tableNum(PurchTable)
        &&    tmpData.WPPOrderRecId
            join PurchTablePurchId from workOrderDetailsView
            where workOrderDetailsView.WorkOrderId == tmpData.WPPWorkOrderId;

        // populate customer/vendor/business relation information
        update_recordSet tmpData
        setting CustVendSearchName = partyTable.NameAlias
        where tmpData.CustVendAccount
        &&    tmpData.CustVendAccountType == CustVendACType::Cust
            join NameAlias from partyTable
                exists join custTable
                where custTable.Party == partyTable.RecId
                &&    custTable.AccountNum == tmpData.CustVendAccount;

        update_recordSet tmpData
        setting CustVendSearchName = partyTable.NameAlias
        where tmpData.CustVendAccount
        &&    tmpData.CustVendAccountType == CustVendACType::Vend
            join NameAlias from partyTable
                exists join vendTable
                where vendTable.Party == partyTable.RecId
                &&    vendTable.AccountNum == tmpData.CustVendAccount;

        update_recordSet tmpData
        setting BOBOrganizationName = partyTable.Name
            join Name from partyTable
            where partyTable.RecId == tmpData.BOBOrganizationParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemContent</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected void setItemContent(HiGHPlanBoardPlannedEvent     _plannedEvent,
                                  WPPTmpServicePlanboardData    _tmpData,
                                  WPPWorkOrderLine              _workOrderLine,
                                  WPPServicePlanboardSettings   _settings)
    {
        #define.LineBreak('<br>')
        #define.Separator('  ')

        WPPCellDataElement      dataElement;
        CLRObject               itemImages;
        int                     backgroundColor;
        str                     planningItemText;
        str                     planningItemIcons;
        TransDateTime           transDateTime;
        Map                     dataElementMap, iconMap, backgroundColorMap;
        container               dataElementCon, iconCon, backgroundColorCon;
        WPPLayoutManagerCode    layoutMgrCode = this.layoutManagerCode(_tmpData, _settings);
        MapEnumerator           enumerator;        

        if (layoutMgrCode)
        {
            if (layoutManagerCache.exists(layoutMgrCode))
            {
                [ dataElementCon, iconCon, backgroundColorCon ] = layoutManagerCache.lookup(layoutMgrCode);
                dataElementMap = Map::create(dataElementCon);
                iconMap = Map::create(iconCon);
                backgroundColorMap = Map::create(backgroundColorCon);

                // set background color
                backgroundColor = this.getBackGroundColor(backgroundColorMap, _tmpData);

                _plannedEvent.parmEventColor(backgroundColor);

                // set cell content
                enumerator = dataElementMap.getEnumerator();

                while(enumerator.moveNext())
                {
                    dataElement = enumerator.currentValue();

                    str htmlData;

                    if (dataElement.RefFieldId == fieldNum(WPPTmpServicePlanboardData, WPPReqStartDateTime)
                    ||  dataElement.RefFieldId == fieldNum(WPPTmpServicePlanboardData, WPPReqEndDateTime))
                    {
                        transDateTime = _tmpData.(dataElement.RefFieldId);
                        htmlData = strFmt('%1', DateTimeUtil::applyTimeZoneOffset(transDateTime, userPrefTimeZone));
                    }
                    else
                    {
                        htmlData = strFmt('%1', _tmpData.(dataElement.RefFieldId));
                    }

                    planningItemText = (planningItemText ? planningItemText + #Separator + htmlData : htmlData);
                    planningItemText = (dataElement.AddNewLine ? planningItemText + #LineBreak : planningItemText);
                }

                // set icons (unless it's a reservation task)
                if (_tmpData.WPPTaskId != parameters.ReservationTaskId && !iconMap.empty())
                {
                    enumerator = iconMap.getEnumerator();
                    
                    while(enumerator.moveNext())
                    {
                        if (_workOrderLine.meetsCriterion(enumerator.currentKey()))
                        {     
                            SysElementName  resName = enumerator.currentValue();
                            ResourceNode    resNode = new resourceNode(resName);
                            Filename        filename = resNode.filename();
                            planningItemIcons = planningItemIcons + strFmt(@'<img src="resources/Images/%1" />', fileName);
                        }
                    }
                }

                _plannedEvent.parmCellContent(planningItemText + planningItemIcons);
            }
            else
            {
                // this should never happen
                throw error("This should never happen"); // TODO
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>