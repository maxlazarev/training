<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORPopulateRentalLineParent</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORPopulateRentalLineParent
{
    private Common headerSource;
    private Common headerTarget;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _headerSource, Common _headerTarget)
    {
        headerSource = _headerSource;
        headerTarget = _headerTarget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if(headerSource is SalesQuotationTable)
        {
            SalesQuotationTable salesQuotationTableSource = headerSource as SalesQuotationTable;

            if(salesQuotationTableSource.QuotationType == QuotationType::RORRental || salesQuotationTableSource.QuotationType == QuotationType::RORProjRental)
            {
                switch(headerTarget.TableId)
                {
                    case tableNum(SalesTable):
                        this.transformQuotationIntoOrder();
                        break;

                    case tableNum(CustQuotationJour):
                        this.postQuotation();
                        break;

                    case tableNum(CustQuotationConfirmJour):
                        this.postQuotationConfirmation();
                        break;
                }
            }
        }
        else if(headerSource is SalesTable)
        {
            SalesTable salesTableSource = headerSource as SalesTable;

            if(salesTableSource.SalesType == SalesType::RORRental)
            {
                switch(headerTarget.TableId)
                {
                    case tableNum(CustConfirmJour):
                        this.postRentalOrderConfirmation();

                    case tableNum(WMSPickingRoute):
                        this.postRentalOrderPickingList();
                        break;

                    case tableNum(CustPackingSlipJour):
                        this.postRentalOrderPackingSlip();
                        break;

                    case tableNum(CustRORSubStatusJour):
                        this.postRentalOrderSubStatus();
                        break;

                    case tableNum(CustRORReturnNoteJour):
                        this.postRentalOrderReturnNote();
                        break;

                    case tableNum(CustInvoiceJour):
                        this.postRentalOrderInvoice();
                        break;
                }
            }
        }
        else if(headerSource is PurchTable)
        {
            PurchTable purchTableSource = headerSource as PurchTable;

            if(purchTableSource.purchaseType != PurchaseType::RORSubRental)
            {
                switch(headerTarget.TableId)
                {
                    case tableNum(VendPurchOrderJour):
                        this.postSubRentalOrderConfirmation();
                        break;

                    case tableNum(VendReceiptsListJour):
                        this.postSubRentalOrderReceiptsList();
                        break;

                    case tableNum(VendPackingSlipJour):
                        this.postSubRentalOrderPackingSlip();
                        break;

                    case tableNum(VendRORSubStatusJour):
                        this.postSubRentalOrderSubStatus();
                        break;

                    case tableNum(VendRORReturnNoteJour):
                        this.postSubRentalOrderReturnNote();
                        break;

                    case tableNum(VendInvoiceJour):
                        this.postSubRentalOrderInvoice();
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformQuotationIntoOrder</Name>
				<Source><![CDATA[
    private void transformQuotationIntoOrder()
    {
        SalesQuotationTable salesQuotationTableSource = headerSource as SalesQuotationTable;
        SalesTable          salesTableTarget = headerTarget as SalesTable;

        SalesQuotationLine  salesQuotationLineSource, salesQuotationLineParent;
        SalesLine           salesLineTarget, salesLineParent;

        salesLineTarget.skipDataMethods(true);
        salesLineTarget.skipEvents(true);

        update_recordset salesLineTarget
        setting RORParentLineRecId = salesLineParent.RecId
        where salesLineTarget.SalesId == salesTableTarget.SalesId
            join TableId from salesQuotationLineSource
            where salesQuotationLineSource.QuotationId == salesQuotationTableSource.QuotationId
            &&    salesQuotationLineSource.InventTransId == salesLineTarget.RORInventTransIdSource
            &&    salesQuotationLineSource.RORParentLineRecId != 0
                join TableId from salesQuotationLineParent
                where salesQuotationLineParent.QuotationId == salesQuotationLineSource.QuotationId
                &&    salesQuotationLineParent.RecId == salesQuotationLineSource.RORParentLineRecId
                    join RecId from salesLineParent
                    where salesLineParent.SalesId == salesLineTarget.SalesId
                    &&    salesLineParent.RORInventTransIdSource == salesQuotationLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postQuotation</Name>
				<Source><![CDATA[
    private void postQuotation()
    {
        SalesQuotationTable salesQuotationTableSource = headerSource as SalesQuotationTable;
        CustQuotationJour   custQuotationJourTarget = headerTarget as CustQuotationJour;

        SalesQuotationLine  salesQuotationLineSource, salesQuotationLineParent;
        CustQuotationTrans  custQuotationTransTarget, custQuotationTransParent;

        custQuotationTransTarget.skipDataMethods(true);

        update_recordSet custQuotationTransTarget
        setting RORParentLineRecId = custQuotationTransParent.RecId
        where custQuotationTransTarget.SalesId == custQuotationJourTarget.SalesId
        &&    custQuotationTransTarget.QuotationId == custQuotationJourTarget.QuotationId
        &&    custQuotationTransTarget.QuotationDate == custQuotationJourTarget.QuotationDate
            join TableId from salesQuotationLineSource
            where salesQuotationLineSource.QuotationId == salesQuotationTableSource.QuotationId
            &&    salesQuotationLineSource.InventTransId ==  custQuotationTransTarget.InventTransId
            &&    salesQuotationLineSource.RORParentLineRecId != 0
            join TableId from salesQuotationLineParent
                where salesQuotationLineParent.QuotationId == salesQuotationLineSource.QuotationId
                &&    salesQuotationLineParent.RecId == salesQuotationLineSource.RORParentLineRecId
                    join RecId from custQuotationTransParent
                    where custQuotationTransParent.SalesId == custQuotationTransTarget.SalesId
                    &&    custQuotationTransParent.QuotationId == custQuotationTransTarget.QuotationId
                    &&    custQuotationTransParent.QuotationDate == custQuotationTransTarget.QuotationDate
                    &&    custQuotationTransParent.InventTransId == salesQuotationLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postQuotationConfirmation</Name>
				<Source><![CDATA[
    private void postQuotationConfirmation()
    {
        SalesQuotationTable         salesQuotationTableSource       = headerSource as SalesQuotationTable;
        CustQuotationConfirmJour    custQuotationConfirmJourTarget  = headerTarget as CustQuotationConfirmJour;

        SalesQuotationLine          salesQuotationLineSource, salesQuotationLineParent;
        CustQuotationConfirmTrans   custQuotationConfirmTransTarget, custQuotationConfirmTransParent;

        custQuotationConfirmTransTarget.skipDataMethods(true);

        update_recordSet custQuotationConfirmTransTarget
        setting RORParentLineRecId = custQuotationConfirmTransParent.RecId
        where custQuotationConfirmTransTarget.QuotationDate == custQuotationConfirmJourTarget.QuotationDate
        &&    custQuotationConfirmTransTarget.QuotationConfirmId == custQuotationConfirmJourTarget.QuotationConfirmId
        &&    custQuotationConfirmTransTarget.SalesId == custQuotationConfirmJourTarget.SalesId
            join TableId from salesQuotationLineSource
            where salesQuotationLineSource.QuotationId == salesQuotationTableSource.QuotationId
            &&    salesQuotationLineSource.InventTransId == custQuotationConfirmTransTarget.InventTransId
            &&    salesQuotationLineSource.RORParentLineRecId != 0
            join TableId from salesQuotationLineParent
            where salesQuotationLineParent.QuotationId == salesQuotationLineSource.QuotationId
            &&    salesQuotationLineParent.RecId == salesQuotationLineSource.RORParentLineRecId
                join RecId from custQuotationConfirmTransParent
                where custQuotationConfirmTransParent.QuotationDate == custQuotationConfirmTransTarget.QuotationDate
                &&    custQuotationConfirmTransParent.QuotationConfirmId == custQuotationConfirmTransTarget.QuotationConfirmId
                &&    custQuotationConfirmTransParent.SalesId == custQuotationConfirmTransTarget.SalesId
                &&    custQuotationConfirmTransParent.InventTransId == salesQuotationLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRentalOrderConfirmation</Name>
				<Source><![CDATA[
    private void postRentalOrderConfirmation()
    {
        SalesTable          salesTableSource = headerSource as SalesTable;
        CustConfirmJour     custConfirmJourTarget = headerTarget as CustConfirmJour;

        SalesLine           salesLineSource, salesLineParent;
        CustConfirmTrans    custConfirmTransTarget, custConfirmTransParent;
        
        custConfirmTransTarget.skipDataMethods(true);

        update_recordSet custConfirmTransTarget
        setting RORParentLineRecId = custConfirmTransParent.RecId
        where custConfirmTransTarget.SalesId == custConfirmJourTarget.SalesId
        &&    custConfirmTransTarget.ConfirmId == custConfirmJourTarget.ConfirmId
        &&    custConfirmTransTarget.ConfirmDate == custConfirmJourTarget.ConfirmDate
            join TableId from salesLineSource
            where salesLineSource.SalesId == salesTableSource.SalesId
            &&    salesLineSource.InventTransId == custConfirmTransTarget.InventTransId
            &&    salesLineSource.RORParentLineRecId != 0
                join TableId from salesLineParent
                where salesLineParent.SalesId == salesLineSource.SalesId
                &&    salesLineParent.RecId == salesLineSource.RORParentLineRecId
                    join RecId from custConfirmTransParent
                    where custConfirmTransParent.SalesId == custConfirmTransTarget.SalesId
                    &&    custConfirmTransParent.ConfirmId == custConfirmTransTarget.ConfirmId
                    &&    custConfirmTransParent.ConfirmDate == custConfirmTransTarget.ConfirmDate
                    &&    custConfirmTransParent.InventTransId == salesLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRentalOrderPickingList</Name>
				<Source><![CDATA[
    private void postRentalOrderPickingList()
    {
        SalesTable      salesTableSource = headerSource as SalesTable;
        WMSPickingRoute wmsPickingRouteTarget = headerTarget as WMSPickingRoute;

        SalesLine       salesLineSource, salesLineParent;
        WMSOrderTrans   wmsOrderTransTarget, wmsOrderTransParent;

        wmsOrderTransTarget.skipDataMethods(true);

        update_recordset wmsOrderTransTarget
        setting RORParentLineRecId = wmsOrderTransParent.RecId
        where wmsOrderTransTarget.routeId == wmsPickingRouteTarget.pickingRouteID
            join TableId from salesLineSource
            where salesLineSource.SalesId == wmsPickingRouteTarget.transRefId
            &&    wmsPickingRouteTarget.transType == InventTransType::Sales
            &&    salesLineSource.InventTransId == wmsOrderTransTarget.InventTransId
            &&    salesLineSource.RORParentLineRecId != 0
                join TableId from salesLineParent
                where salesLineParent.SalesId == salesLineSource.SalesId
                &&    salesLineParent.RecId == salesLineSource.RORParentLineRecId
                    join RecId from wmsOrderTransParent
                    where wmsOrderTransParent.routeId == wmsOrderTransTarget.routeId
                    &&    wmsOrderTransParent.InventTransId == salesLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRentalOrderPackingSlip</Name>
				<Source><![CDATA[
    private void postRentalOrderPackingSlip()
    {
        SalesTable              salesTableSource = headerSource as SalesTable;
        CustPackingSlipJour     custPackingSlipJourTarget = headerTarget as CustPackingSlipJour;

        SalesLine               salesLineSource, salesLineParent;
        CustPackingSlipTrans    custPackingSlipTransTarget, custPackingSlipTransParent;

        custPackingSlipTransTarget.skipDataMethods(true);

        update_recordset custPackingSlipTransTarget
        setting RORParentLineRecId = custPackingSlipTransParent.RecId
        where custPackingSlipTransTarget.SalesId == custPackingSlipJourTarget.SalesId
        &&    custPackingSlipTransTarget.PackingSlipId == custPackingSlipJourTarget.PackingSlipId
        &&    custPackingSlipTransTarget.DeliveryDate == custPackingSlipJourTarget.DeliveryDate
            join TableId from salesLineSource
            where salesLineSource.SalesId == custPackingSlipJourTarget.SalesId
            &&    salesLineSource.InventTransId == custPackingSlipTransTarget.InventTransId
            &&    salesLineSource.RORParentLineRecId != 0
                join TableId from salesLineParent
                where salesLineParent.SalesId == salesLineSource.SalesId
                &&    salesLineParent.RecId == salesLineSource.RORParentLineRecId
                    join RecId from custPackingSlipTransParent
                    where custPackingSlipTransParent.SalesId == custPackingSlipTransTarget.SalesId
                    &&    custPackingSlipTransParent.PackingSlipId == custPackingSlipTransTarget.PackingSlipId
                    &&    custPackingSlipTransParent.DeliveryDate == custPackingSlipTransTarget.DeliveryDate
                    &&    custPackingSlipTransParent.InventTransId == salesLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRentalOrderSubStatus</Name>
				<Source><![CDATA[
    private void postRentalOrderSubStatus()
    {
        SalesTable              salesTableSource = headerSource as SalesTable;
        CustRORSubStatusJour    custRORSubStatusJourTarget = headerTarget as CustRORSubStatusJour;

        SalesLine               salesLineSource, salesLineParent;
        CustRORSubStatusTrans   custRORSubStatusTransTarget, custRORSubStatusTransParent;

        custRORSubStatusTransTarget.skipDataMethods(true);

        update_recordset custRORSubStatusTransTarget
        setting ParentLineRecId = custRORSubStatusTransParent.RecId
        where custRORSubStatusTransTarget.SalesId == custRORSubStatusJourTarget.SalesId
        &&    custRORSubStatusTransTarget.SubStatusId == custRORSubStatusJourTarget.SubStatusId
        &&    custRORSubStatusTransTarget.Date == custRORSubStatusJourTarget.Date
            join TableId from salesLineSource
            where salesLineSource.SalesId == custRORSubStatusJourTarget.SalesId
            &&    salesLineSource.InventTransId == custRORSubStatusTransTarget.InventTransId
            &&    salesLineSource.RORParentLineRecId != 0
                join TableId from salesLineParent
                where salesLineParent.SalesId == salesLineSource.SalesId
                &&    salesLineParent.RecId == salesLineSource.RORParentLineRecId
                    join RecId from custRORSubStatusTransParent
                    where custRORSubStatusTransParent.SalesId == custRORSubStatusTransTarget.SalesId
                    &&    custRORSubStatusTransParent.SubStatusId == custRORSubStatusTransTarget.SubStatusId
                    &&    custRORSubStatusTransParent.Date == custRORSubStatusTransTarget.Date
                    &&    custRORSubStatusTransParent.InventTransId == salesLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRentalOrderReturnNote</Name>
				<Source><![CDATA[
    private void postRentalOrderReturnNote()
    {
        SalesTable              salesTableSource = headerSource as SalesTable;
        CustRORReturnNoteJour   custRORReturnNoteJourTarget = headerTarget as CustRORReturnNoteJour;

        SalesLine               salesLineSource, salesLineParent;
        CustRORReturnNoteTrans  custRORReturnNoteTransTarget, custRORReturnNoteTransParent;

        custRORReturnNoteTransTarget.skipDataMethods(true);

        update_recordset custRORReturnNoteTransTarget
        setting ParentLineRecId = custRORReturnNoteTransParent.RecId
        where custRORReturnNoteTransTarget.SalesId == custRORReturnNoteJourTarget.SalesId
        &&    custRORReturnNoteTransTarget.ReturnNoteId == custRORReturnNoteJourTarget.ReturnNoteId
        &&    custRORReturnNoteTransTarget.DeliveryDate == custRORReturnNoteJourTarget.DeliveryDate
            join TableId from salesLineSource
            where salesLineSource.SalesId == custRORReturnNoteJourTarget.SalesId
            &&    salesLineSource.InventTransId == custRORReturnNoteTransTarget.InventTransId
            &&    salesLineSource.RORParentLineRecId != 0
                join TableId from salesLineParent
                where salesLineParent.SalesId == salesLineSource.SalesId
                &&    salesLineParent.RecId == salesLineSource.RORParentLineRecId
                    join RecId from custRORReturnNoteTransParent
                    where custRORReturnNoteTransParent.SalesId == custRORReturnNoteTransTarget.SalesId
                    &&    custRORReturnNoteTransParent.ReturnNoteId == custRORReturnNoteTransTarget.ReturnNoteId
                    &&    custRORReturnNoteTransParent.DeliveryDate == custRORReturnNoteTransTarget.DeliveryDate
                    &&    custRORReturnNoteTransParent.InventTransId == salesLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRentalOrderInvoice</Name>
				<Source><![CDATA[
    private void postRentalOrderInvoice()
    {
        SalesTable          salesTableSource = headerSource as SalesTable;
        CustInvoiceJour     custInvoiceJourTarget   = headerTarget as CustInvoiceJour;

        SalesLine           salesLineSource, salesLineParent;
        CustInvoiceTrans    custInvoiceTransTarget, custInvoiceTransParent;

        custInvoiceTransTarget.skipDataMethods(true);

        update_recordset custInvoiceTransTarget
        setting RORParentLineRecId = custInvoiceTransParent.RecId
        where custInvoiceTransTarget.SalesId == custInvoiceJourTarget.SalesId
        &&    custInvoiceTransTarget.InvoiceId == custInvoiceJourTarget.InvoiceId
        &&    custInvoiceTransTarget.InvoiceDate == custInvoiceJourTarget.InvoiceDate
        &&    custInvoiceTransTarget.numberSequenceGroup == custInvoiceJourTarget.numberSequenceGroup
            join TableId from salesLineSource
            where salesLineSource.SalesId == custInvoiceJourTarget.SalesId
            &&    salesLineSource.InventTransId == custInvoiceTransTarget.InventTransId
            &&    salesLineSource.RORParentLineRecId != 0
                join TableId from salesLineParent
                where salesLineParent.SalesId == salesLineSource.SalesId
                &&    salesLineParent.RecId == salesLineSource.RORParentLineRecId
                    join RecId from custInvoiceTransParent
                    where custInvoiceTransParent.SalesId == custInvoiceTransTarget.SalesId
                    &&    custInvoiceTransParent.InvoiceId == custInvoiceTransTarget.InvoiceId
                    &&    custInvoiceTransParent.InvoiceDate == custInvoiceTransTarget.InvoiceDate
                    &&    custInvoiceTransParent.numberSequenceGroup == custInvoiceTransTarget.numberSequenceGroup
                    &&    custInvoiceTransParent.InventTransId == salesLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubRentalOrderConfirmation</Name>
				<Source><![CDATA[
    private void postSubRentalOrderConfirmation()
    {
        // RLAM - We intentionally did not implement this method because:
        // Once a subrental order is created, the system creates an entry in the purchline table
        // Each time the order changes, an entry in the purchlineshistory is created
        // This latter entry, however, only contains the changed lines of the order
        // It then becomes too hard (and illogical) to still maintain the kit structure
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubRentalOrderReceiptsList</Name>
				<Source><![CDATA[
    private void postSubRentalOrderReceiptsList()
    {
        PurchTable              purchTableSource            = headerSource as PurchTable;
        VendReceiptsListJour    vendReceiptsListJourTarget  = headerTarget as VendReceiptsListJour;

        PurchLine               purchLineSource,                purchLineParent;
        VendReceiptsListTrans   vendReceiptsListTransTarget,    vendReceiptsListTransParent;

        vendReceiptsListTransTarget.skipDataMethods(true);

        update_recordset vendReceiptsListTransTarget
        setting RORParentLineRecId = vendReceiptsListTransParent.RecId
        where vendReceiptsListTransTarget.PurchId == vendReceiptsListJourTarget.PurchId
        &&    vendReceiptsListTransTarget.ReceiptsListId == vendReceiptsListJourTarget.ReceiptsListId
        &&    vendReceiptsListTransTarget.ReceiptsListDate == vendReceiptsListJourTarget.ReceiptsListDate
            join TableId from purchLineSource
            where purchLineSource.PurchId == vendReceiptsListJourTarget.PurchId
            &&    purchLineSource.InventTransId == vendReceiptsListTransTarget.InventTransId
            &&    purchLineSource.RORParentLineRecId != 0
                join TableId from purchLineParent
                where purchLineParent.PurchId == purchLineSource.PurchId
                &&    purchLineParent.RecId == purchLineSource.RORParentLineRecId
                    Join RecId from vendReceiptsListTransParent
                    where vendReceiptsListTransParent.PurchId == vendReceiptsListTransTarget.PurchId
                    &&    vendReceiptsListTransParent.ReceiptsListId == vendReceiptsListTransTarget.ReceiptsListId
                    &&    vendReceiptsListTransParent.ReceiptsListDate == vendReceiptsListTransTarget.ReceiptsListDate
                    &&    vendReceiptsListTransParent.InventTransId == purchLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubRentalOrderPackingSlip</Name>
				<Source><![CDATA[
    private void postSubRentalOrderPackingSlip()
    {
        PurchTable              purchTableSource            = headerSource as PurchTable;
        VendPackingSlipJour     vendPackingSlipJourTarget   = headerTarget as VendPackingSlipJour;

        PurchLine               purchLineSource,                purchLineParent;
        VendPackingSlipTrans    vendPackingSlipTransTarget,     vendPackingSlipTransParent;

        vendPackingSlipTransTarget.skipDataMethods(true);

        update_recordset vendPackingSlipTransTarget
        setting RORParentLineRecId = vendPackingSlipTransParent.RecId
        where vendPackingSlipTransTarget.VendPackingSlipJour == vendPackingSlipJourTarget.RecId
            join TableId from purchLineSource
            where purchLineSource.PurchId == vendPackingSlipJourTarget.PurchId
            &&    purchLineSource.InventTransId == vendPackingSlipTransTarget.InventTransId
            &&    purchLineSource.RORParentLineRecId != 0
                join TableId from purchLineParent
                where purchLineParent.PurchId == purchLineSource.PurchId
                &&    purchLineParent.RecId == purchLineSource.RORParentLineRecId
                    Join RecId from vendPackingSlipTransParent
                    where vendPackingSlipTransParent.VendPackingSlipJour == vendPackingSlipTransTarget.VendPackingSlipJour
                    &&    vendPackingSlipTransParent.InventTransId == purchLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubRentalOrderSubStatus</Name>
				<Source><![CDATA[
    private void postSubRentalOrderSubStatus()
    {
        PurchTable              purchTableSource            = headerSource as PurchTable;
        VendRORSubStatusJour    vendRORSubStatusJourTarget  = headerTarget as VendRORSubStatusJour;

        PurchLine               purchLineSource,                purchLineParent;
        VendRORSubStatusTrans   vendRORSubStatusTransTarget,    vendRORSubStatusTransParent;

        vendRORSubStatusTransTarget.skipDataMethods(true);

        update_recordset vendRORSubStatusTransTarget
        setting ParentLineRecId = vendRORSubStatusTransParent.RecId
        where vendRORSubStatusTransTarget.PurchId == vendRORSubStatusJourTarget.PurchId
        &&    vendRORSubStatusTransTarget.SubStatusId == vendRORSubStatusJourTarget.SubStatusId
        &&    vendRORSubStatusTransTarget.Date == vendRORSubStatusJourTarget.Date
            join TableId from purchLineSource
            where purchLineSource.PurchId == vendRORSubStatusJourTarget.PurchId
            &&    purchLineSource.InventTransId == vendRORSubStatusTransTarget.InventTransId
            &&    purchLineSource.RORParentLineRecId != 0
                join TableId from purchLineParent
                where purchLineParent.PurchId == purchLineSource.PurchId
                &&    purchLineParent.RecId == purchLineSource.RORParentLineRecId
                    Join RecId from vendRORSubStatusTransParent
                    where vendRORSubStatusTransParent.PurchId == vendRORSubStatusTransTarget.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubRentalOrderReturnNote</Name>
				<Source><![CDATA[
    private void postSubRentalOrderReturnNote()
    {
        PurchTable              purchTableSource            = headerSource as PurchTable;
        VendRORReturnNoteJour   vendRORReturnNoteJourTarget = headerTarget as VendRORReturnNoteJour;

        PurchLine               purchLineSource,                purchLineParent;
        VendRORReturnNoteTrans  vendRORReturnNoteTransTarget,   vendRORReturnNoteTransParent;

        vendRORReturnNoteTransTarget.skipDataMethods(true);

        update_recordset vendRORReturnNoteTransTarget
        setting ParentLineRecId = vendRORReturnNoteTransParent.RecId
        where vendRORReturnNoteTransTarget.VendReturnNote == vendRORReturnNoteJourTarget.RecId
            join TableId from purchLineSource
            where purchLineSource.PurchId == vendRORReturnNoteJourTarget.PurchId
            &&    purchLineSource.InventTransId == vendRORReturnNoteTransTarget.InventTransId
            &&    purchLineSource.RORParentLineRecId != 0
                join TableId from purchLineParent
                where purchLineParent.PurchId == purchLineSource.PurchId
                &&    purchLineParent.RecId == purchLineSource.RORParentLineRecId
                    Join RecId from vendRORReturnNoteTransParent
                    where vendRORReturnNoteTransParent.VendReturnNote == vendRORReturnNoteTransTarget.VendReturnNote
                    &&    vendRORReturnNoteTransParent.InventTransId == purchLineParent.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubRentalOrderInvoice</Name>
				<Source><![CDATA[
    private void postSubRentalOrderInvoice()
    {
        PurchTable          purchTableSource        = headerSource as PurchTable;
        VendInvoiceJour     vendInvoiceJourTarget   = headerTarget as VendInvoiceJour;

        PurchLine           purchLineSource,            purchLineParent;
        VendInvoiceTrans    vendInvoiceTransTarget,     vendInvoiceTransParent;

        vendInvoiceTransTarget.skipDataMethods(true);

        update_recordset vendInvoiceTransTarget
        setting RORParentLineRecId = vendInvoiceTransParent.RecId
        where vendInvoiceTransTarget.PurchId == vendInvoiceJourTarget.PurchId
        &&    vendInvoiceTransTarget.InvoiceId == vendInvoiceJourTarget.InvoiceId
        &&    vendInvoiceTransTarget.InvoiceDate == vendInvoiceJourTarget.InvoiceDate
        &&    vendInvoiceTransTarget.numberSequenceGroup == vendInvoiceJourTarget.numberSequenceGroup
        &&    vendInvoiceTransTarget.InternalInvoiceId == vendInvoiceJourTarget.InternalInvoiceId
            join TableId from purchLineSource
            where purchLineSource.PurchId == vendInvoiceJourTarget.PurchId
            &&    purchLineSource.InventTransId == vendInvoiceTransTarget.InventTransId
            &&    purchLineSource.RORParentLineRecId != 0
                join TableId from purchLineParent
                where purchLineParent.PurchId == purchLineSource.PurchId
                &&    purchLineParent.RecId == purchLineSource.RORParentLineRecId
                    Join RecId from vendInvoiceTransParent
                    where vendInvoiceTransParent.PurchId == vendInvoiceTransTarget.PurchId
                    &&    vendInvoiceJourTarget.InvoiceId == vendInvoiceTransTarget.InvoiceId
                    &&    vendInvoiceJourTarget.InvoiceDate == vendInvoiceTransTarget.InvoiceDate
                    &&    vendInvoiceJourTarget.numberSequenceGroup == vendInvoiceTransTarget.numberSequenceGroup
                    &&    vendInvoiceJourTarget.InternalInvoiceId == vendInvoiceTransTarget.InternalInvoiceId
                    &&    vendInvoiceTransParent.InventTransId == purchLineParent.InventTransId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>