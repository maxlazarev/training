<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ROROrderAmendmentDialogType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class ROROrderAmendmentDialogType extends RunBase
{
    Common                          common;
    RORTmpOrderAmendmentDialogTable tmpOrderAmendmentDialogTable;
    RORRentalDateTimes              rentalDateTimes;
    ROROrderAmendmentLog            orderAmendmentLog;
    LanguageId                      languageId;
    RORExpectedOffRentDateTime      expectedOffRentDateTime;

    boolean                         rentalStopOneDayActive;
    boolean                         confirmOrder;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canObjectAvailabilityBeUpdated</Name>
				<Source><![CDATA[
    public boolean canObjectAvailabilityBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmOrder</Name>
				<Source><![CDATA[
    protected void confirmOrder()
    {
        MenuFunction    mf;
        Args            args;
        PurchLine       purchLine;
        SalesLine       salesLine;
    
        args = new Args();
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
                mf = new MenuFunction(menuitemActionStr(PurchFormLetter_RORPurchaseOrder), MenuItemType::Action);
                args.record(purchLine.purchTable());
                break;
    
            case tableNum(PurchTable):
                mf = new MenuFunction(menuitemActionStr(PurchFormLetter_RORPurchaseOrder), MenuItemType::Action);
                args.record(common);
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                mf = new MenuFunction(menuitemActionStr(SalesFormLetter_Confirmation), MenuItemType::Action);
                args.record(salesLine.salesTable());
                break;
    
            case tableNum(SalesTable):
                mf = new MenuFunction(menuitemActionStr(SalesFormLetter_Confirmation), MenuItemType::Action);
                args.record(common);
                break;
    
            default:
                break;
        }
    
        mf.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;
    
        dialog = Dialog::newFormnameRunbase(formStr(ROROrderAmendmentDialog), this);
        dialog = this.dialogInternal(dialog);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirPartyRecId</Name>
				<Source><![CDATA[
    public DirPartyRecId findDirPartyRecId()
    {
        DirPartyRecId party;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                PurchLine purchLine = common as PurchLine;
                party = purchLine.purchTable().party();
                break;
    
            case tableNum(PurchTable):
                PurchTable purchTable = common as PurchTable;
                party = purchTable.party();
                break;
    
            case tableNum(SalesLine):
                SalesLine salesLine = common as SalesLine;
                party = salesLine.salesTable().partyTable_CustAccount().RecId;
                break;
    
            case tableNum(SalesTable):
                SalesTable salesTable = common as SalesTable;
                party = salesTable.partyTable_CustAccount().RecId;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRentalDateTimes</Name>
				<Source><![CDATA[
    public RORRentalDateTimes findRentalDateTimes()
    {
        return common.RORRentalDateTimesHost::rentalDateTimes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonTxt</Name>
				<Source><![CDATA[
    public RORAmendmentReasonText getReasonTxt()
    {
        return tmpOrderAmendmentDialogTable.ReasonText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPurchId</Name>
				<Source><![CDATA[
    protected Num getSalesPurchId()
    {
        PurchLine       purchLine;
        PurchTable      purchTable;
        SalesLine       salesLine;
        SalesTable      salesTable;
        Num             salesPurchId;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
                salesPurchId = purchLine.PurchId;
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
                salesPurchId = purchTable.PurchId;
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                salesPurchId = salesLine.SalesId;
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
                salesPurchId = salesTable.SalesId;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return salesPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskType</Name>
				<Source><![CDATA[
    public WPPTaskType getTaskType()
    {
        WPPWorkOrderTable       workOrderTable;
        WPPWorkOrderLine        workOrderLine;
        WPPWorkOrderTaskTable   workOrderTaskTable;
    
        select firstOnly TaskType from workOrderTaskTable
        order by taskType desc
        where workOrderTaskTable.TaskType == WPPTaskType::Load
        ||    workOrderTaskTable.TaskType == WPPTaskType::Delivery
            exists join workOrderLine
            where workOrderLine.TaskId == workOrderTaskTable.TaskId
            &&    workOrderLine.Status  > WPPWorkOrderLineStatus::Created
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                &&    workOrderTable.OrderTableId == common.TableId
                &&    workOrderTable.OrderRecId   == common.RecId;
    
        return workOrderTaskTable.TaskType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationContainer</Name>
				<Source><![CDATA[
    public container getValidationContainer()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText</Name>
				<Source><![CDATA[
    abstract public InfologText getWarningText()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    public void initValues()
    {
        languageId = CompanyInfo::languageId();//RORParameters::find().AmendmentLogLanguageId;;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _common = common)
    {
        common = _common;
    
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmOrder</Name>
				<Source><![CDATA[
    public boolean parmConfirmOrder(boolean _confirmOrder = confirmOrder)
    {
        confirmOrder = _confirmOrder;
    
        return confirmOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRentalDateTimes</Name>
				<Source><![CDATA[
    public RORRentalDateTimes parmRentalDateTimes(RORRentalDateTimes _rentalDateTimes = rentalDateTimes)
    {
        rentalDateTimes.data(_rentalDateTimes);
    
        return rentalDateTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRentalStopOneDayActive</Name>
				<Source><![CDATA[
    public boolean parmRentalStopOneDayActive(boolean _rentalStopOneDayActive = rentalStopOneDayActive)
    {
        rentalStopOneDayActive = _rentalStopOneDayActive;
    
        return rentalStopOneDayActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpOrderAmendmentDialogTable</Name>
				<Source><![CDATA[
    public RORTmpOrderAmendmentDialogTable parmTmpOrderAmendmentDialogTable(RORTmpOrderAmendmentDialogTable _tmpOrderAmendmentDialogTable = tmpOrderAmendmentDialogTable)
    {
        tmpOrderAmendmentDialogTable.data(_tmpOrderAmendmentDialogTable);
    
        return tmpOrderAmendmentDialogTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonType</Name>
				<Source><![CDATA[
    abstract public DNRReasonType reasonType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsBegin;
        orderAmendmentLog.initValue();
        orderAmendmentLog.DNRReasonType = this.reasonType();
        orderAmendmentLog.initFromTmpOrderAmendmentDialogTable(tmpOrderAmendmentDialogTable);
    
        switch (common.TableId)
        {
            case tableNum(PurchLine),
                 tableNum(SalesLine):
                orderAmendmentLog.initFromSalesPurchLine(common);
                this.updateSourceLine(common);
                break;
    
            case tableNum(PurchTable),
                 tableNum(SalesTable):
                orderAmendmentLog.initFromSalesPurchTable(common);
                this.updateSourceTable();
                break;
    
            default:
                break;
        }
    
        orderAmendmentLog.setLogTextGenerated(tmpOrderAmendmentDialogTable, this.reasonType());
        if (this.reasonType() == DNRReasonType::ExchangeItem)
        {
            orderAmendmentLog.ExpectedOffRentDateTime = expectedOffRentDateTime;
        }
        orderAmendmentLog.insert();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfoMessage</Name>
				<Source><![CDATA[
    public void showInfoMessage()
    {
        PurchLine   purchLine;
        PurchTable  purchTable;
        ;
    
        if ((common.TableId == tableNum(PurchLine) || common.TableId == tableNum(PurchTable)) && PurchParameters::find().ChangeRequestEnabled)
        {
            if (common.TableId == tableNum(PurchLine))
            {
                purchLine = common;
                purchTable = purchLine.purchTable();
            }
            else
            {
                purchTable = common;
            }
    
            if (purchTable.DocumentState != VersioningDocumentState::Draft)
            {
                throw error("@DNR8491");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    protected void updateSourceLine(Common _sourceLine)
    {
        switch (_sourceLine.TableId)
        {
            case tableNum(PurchLine):
                PurchLine purchLine     = PurchLine::findRecId(_sourceLine.RecId, true);
                purchLine.RORIsModified = NoYes::Yes;

                purchLine.update();

                break;
    
            case tableNum(SalesLine):
                SalesLine salesLine     = SalesLine::findRecId(_sourceLine.RecId, true);
                salesLine.RORIsModified = NoYes::Yes;

                salesLine.update();

                break;
    
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    protected void updateSourceTable()
    {
        PurchTable   purchTable;
        SalesTable   salesTable;
    
        switch (common.TableId)
        {
            case tableNum(PurchTable):
                purchTable = PurchTable::findRecId(common.RecId, true);
                purchTable.RORIsModified = NoYes::Yes;
                purchTable.update();
                break;
    
            case tableNum(SalesTable):
                salesTable = SalesTable::findRecId(common.RecId, true);
                salesTable.RORIsModified = NoYes::Yes;
                salesTable.update();
                break;
    
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPSynchronizeWorkOrder</Name>
				<Source><![CDATA[
    protected void WPPSynchronizeWorkOrder()
    {
        WPPWorkOrderSynchronizer workOrderSynchronizer;
        PurchTable  purchTable;
        SalesTable  salesTable;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                PurchLine purchLine = common as PurchLine;
                purchTable = purchLine.purchTable();
                // Create the Work order synchronizer instance only when the PO is confirmed atleast once.
                if (purchTable.lastPurchaseOrder())
                {
                    workOrderSynchronizer = WPPWorkOrderSynchronizer::newPurchTable(purchLine.purchTable());
                }
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
                if (purchTable.lastPurchaseOrder())
                {
                    workOrderSynchronizer = WPPWorkOrderSynchronizer::newPurchTable(common);
                }
                break;
    
            case tableNum(SalesLine):
                SalesLine salesLine = common as SalesLine;
                salesTable = salesLine.salesTable();
                // Create the Work order synchronizer instance only when the SO is confirmed atleast once.
                if (salesTable.lastConfirm())
                {
                    workOrderSynchronizer = WPPWorkOrderSynchronizer::newSalesTable(salesLine.salesTable());
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
                if (salesTable.lastConfirm())
                {
                    workOrderSynchronizer = WPPWorkOrderSynchronizer::newSalesTable(common);
                }
                break;
    
            default:
                break;
        }
    
        if(workOrderSynchronizer)
        {
            // Sales(Rental) line can have work orders linked to a line directly or via WMSShipment. Both kind of work orders need to be synchronized.
            workOrderSynchronizer.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ROROrderAmendmentDialogType construct(Args _args)
    {
        ROROrderAmendmentDialogType orderAmendmentDialogType;
    
        switch (_args.parmEnum())
        {
            case DNRReasonType::LostOrder:
                orderAmendmentDialogType = new ROROrderAmendmentDialogType_LostOrder();
                break;
    
            case DNRReasonType::DateChange:
                orderAmendmentDialogType =  (_args.record().TableId == tableNum(SalesQuotationLine) || _args.record().TableId == tableNum(SalesQuotationTable)) ?
                    new ROROrderAmendmentDialogType_ChangeDate_Quotation() :
                    new ROROrderAmendmentDialogType_ChangeDate();

                break;
    
            case DNRReasonType::ExchangeItem:
                orderAmendmentDialogType = new ROROrderAmendmentDialogType_Exchange();
                break;
    
            case DNRReasonType::RentalStop:
                orderAmendmentDialogType = new ROROrderAmendmentDialogType_RentalStop();
                break;               
    
            case DNRReasonType::ResetValue:
                orderAmendmentDialogType = new ROROrderAmendmentDialogType_ResetValue();
                break;
    
            case DNRReasonType::BlockedPeriod:
                orderAmendmentDialogType = new ROROrderAmendmentDialogType_BlockPeriod();
                break;
    
            case DNRReasonType::OnOffDateChange:
                orderAmendmentDialogType = new ROROrderAmendmentDialogType_ChangeOnOff();
                break;
    
            default:
                throw error(Error::missingParameter(null));
        }
    
        return orderAmendmentDialogType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static client void main(Args _args)
    {
        ROROrderAmendmentDialogType orderAmendmentDialogType;
        common                      common;
        FormDataSource              formDataSource;
    
        if (_args.parmEnumType() != enumNum(DNRReasonType))
        {
            throw error(Error::missingParameter(null));
        }
    
        common = _args.record();
    
        orderAmendmentDialogType = ROROrderAmendmentDialogType::construct(_args);
        orderAmendmentDialogType.parmCommon(common);
    
        if (orderAmendmentDialogType.reasonType() == DNRReasonType::LostOrder
        ||  orderAmendmentDialogType.reasonType() == DNRReasonType::DateChange
        ||  orderAmendmentDialogType.reasonType() == DNRReasonType::RentalStop
        ||  orderAmendmentDialogType.reasonType() == DNRReasonType::Credit
        ||  orderAmendmentDialogType.reasonType() == DNRReasonType::ResetValue
        ||  orderAmendmentDialogType.reasonType() == DNRReasonType::BlockedPeriod)
        {
            orderAmendmentDialogType.showInfoMessage();
        }
    
        if (orderAmendmentDialogType.prompt()
        && orderAmendmentDialogType.additionalUserInteraction() !=  DialogButton::Cancel)
        {
            orderAmendmentDialogType.runOperation();
    
            if (FormDataUtil::getFormDataSource(common))
            {
                formDataSource = FormDataUtil::getFormDataSource(common);
                RecId recId = common.RecId;
                // When using formDataSource.research(true); the grid was not refreshed correctly
                formDataSource.research();
                formDataSource.refresh();
                formDataSource.positionToRecordByValue(fieldNum(SalesLine, RecId), int642Str(recId));
                formDataSource.rereadJoinHierarchy();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalUserInteraction</Name>
				<Source><![CDATA[
    protected DialogButton additionalUserInteraction()
    {
        return DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFinancialChanges</Name>
				<Source><![CDATA[
    public static void runFinancialChanges(INVInvoicePeriodHost _invoicePeriodHost, Map _changesMap)
    {
        // actuall code is called from event in Dynarent model
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>