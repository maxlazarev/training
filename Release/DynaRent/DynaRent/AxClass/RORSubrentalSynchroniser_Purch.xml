<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSubrentalSynchroniser_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORSubrentalSynchroniser_Purch extends RORSubrentalSynchroniser
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRentalHeader2SynchronizeDates</Name>
				<Source><![CDATA[
    void addRentalHeader2SynchronizeDates(RORRentalDateTimes    _origRentalDateTimes,
                                          RORRentalDateTimes    _rentalDateTimes,
                                          boolean               _onRentChanged,
                                          boolean               _offRentChanged,
                                          boolean               _expOffRentChange)
    {
        RORSubrentalReference   subrentalReference;
        RORRentalDateTimes      rentalDateTimes;
        RORRentalLine           rentalLine;
        Common                  common;
        RORRentalHeader         rentalHeader2Synchronize;
    
        void addRentalHeader(RORRentalDateTimeType _rentalDateTimeType)
        {
            if (_origRentalDateTimes.RefTableId == tableNum(PurchLine))
            {
                common = _origRentalDateTimes.getHostBuffer();
                rentalLine = common;
                subrentalReference = RORSubrentalReference::findSales(rentalLine.InventTransId, _origRentalDateTimes, _rentalDateTimeType);
            }
    
            if (subrentalReference)
            {
                salesLine = SalesLine::findInventTransId(subrentalReference.SalesInventTransId);
                rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();
    
                // onRent or offRent date/time must match to trigger synchronization between rental and subrental.
                if (rentalDateTimes)
                {
                    if (this.datesTimesMatch(_origRentalDateTimes, rentalDateTimes, _rentalDateTimeType))
                    {
                        rentalHeader2Synchronize = salesLine.salesTable();
                    }
    
                    if (rentalHeader2Synchronize)
                    {
                        this.addOrders2open(rentalHeader2Synchronize);
                    }
                }
            }
        }
        ;
    
        // there is relation 1:N between subrental and rental so maybe 2 rental lines need to be synchronised.
        if (_onRentChanged)
        {
            addRentalHeader(RORParameters::dateTimeTypeInvoicingStart());
        }
    
        if (_offRentChanged)
        {
            addRentalHeader(RORParameters::dateTimeTypeInvoicingEnd());
        }
    
        if (_expOffRentChange)
        {
            addRentalHeader(RORParameters::dateTimeTypeInvoicingExpectedEnd());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizationMsg</Name>
				<Source><![CDATA[
    protected str synchronizationMsg()
    {
        str msg;
    
        msg = strFmt("@DNR2693", "@DNR1715", "@DNR10");
    
        return msg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSubrentalReferenceEnd</Name>
				<Source><![CDATA[
    protected container hasSubrentalReferenceEnd(InventTransId _lineId, INVPeriodEndDateTime _periodEndDateTime)
    {
        boolean hasReference;
        boolean isOnlyInfo;
        // Can be implemented in different model.
        return [hasReference, isOnlyInfo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifySubrentalEnd</Name>
				<Source><![CDATA[
    boolean validateModifySubrentalEnd(InventTransId _lineId, INVPeriodEndDateTime _periodEndDateTime)
    {
        boolean ret = true;
        boolean hasReference;
        boolean isOnlyInfo;
    
        [hasReference, isOnlyInfo] = this.hasSubrentalReferenceEnd(_lineId, _periodEndDateTime);

        if (hasReference && !isOnlyInfo)
        {            
            ret = checkFailed("@DNR451");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSubrentalReferenceStart</Name>
				<Source><![CDATA[
    protected container hasSubrentalReferenceStart(InventTransId _lineId, INVPeriodStartDateTime _periodStartDateTime)
    {
        boolean hasReference;
        boolean isOnlyInfo;
        // Can be implemented in different model.
        return [hasReference, isOnlyInfo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifySubrentalStart</Name>
				<Source><![CDATA[
    boolean validateModifySubrentalStart(InventTransId _lineId, INVPeriodStartDateTime _periodStartDateTime)
    {
        boolean ret = true;
        boolean hasReference;
        boolean isOnlyInfo;
    
        [hasReference, isOnlyInfo] = this.hasSubrentalReferenceStart(_lineId, _periodStartDateTime);

        if (hasReference && !isOnlyInfo)
        {
            ret = checkFailed("@DNR440");
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>