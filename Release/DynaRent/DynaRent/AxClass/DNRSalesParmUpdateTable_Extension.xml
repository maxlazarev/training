<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesParmUpdateTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesParmUpdate))]
public final class DNRSalesParmUpdateTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSysLastValue</Name>
				<Source><![CDATA[
    void initFromSysLastValue(SalesParmUpdate _salesParmUpdate)
    {
        next initFromSysLastValue(_salesParmUpdate);

        this.INVIncludeCredits              = _salesParmUpdate.INVIncludeCredits;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        SalesParmTable salesParmTable;
        
        next modifiedField(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(SalesParmUpdate, INVCalculationDateTime) :
                //this.INVRateMultiplierDateTime = this.INVCalculationDateTime;
                break;
    
            case fieldNum(SalesParmUpdate, INVTransDate) :
                ttsBegin;
                while select forupdate salesParmTable
                where salesParmTable.ParmId == this.ParmId
                {
                    salesParmTable.Transdate =  this.INVTransdate;
                    salesParmTable.modifiedField(fieldNum(SalesParmTable, TransDate));
                    salesParmTable.update();
                }
                ttsCommit;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVmayFuelLineBeInvoiced</Name>
				<Source><![CDATA[
    // extension methods

    public boolean INVmayFuelLineBeInvoiced(SalesLine _salesLine = null, SalesFormletterParmDataInvoice _salesFormletterParmDataInvoice = null)
    {
        SalesLine           machineSalesLine;
        SalesLine           fuelSalesLine;
        //SalesParmLine       machineSalesParmLine;
        SalesParmLine       fuelSalesParmLine;
        RORRentalDateTimes  rentalDates;
        FieldId             invoicingEndDateFieldId = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd());
        boolean             ret = true;
        boolean             hasParmLine;
        RORParameters       parameters = RORParameters::find();

        void checkFuel(boolean _showError)
        {
            machineSalesLine     = SalesLine::findRecId(fuelSalesLine.RORParentLineRecId);
            hasParmLine = (SalesParmLine::RORParentParmLine(this.ParmId, machineSalesLine).RecId);
    
            if (!hasParmLine && _salesFormletterParmDataInvoice)
            {
                hasParmLine = _salesFormletterParmDataInvoice.INVHasParmLine(machineSalesLine);
            }
            
            if (!hasParmLine
            && machineSalesLine.RORRentalLine::FINExistUninvoicedCreditedForLine()
            && machineSalesLine.discPercent() < 100)
            {
                ret = _showError ? checkFailed("@DNR8199") : false;
            }
            
            if (ret && hasParmLine)
            {
                select firstOnly RecId from rentalDates
                where rentalDates.RefTableId == machineSalesLine.TableId
                &&    rentalDates.RefRecId == machineSalesLine.RecId
                &&  (!rentalDates.(invoicingEndDateFieldId) || (rentalDates.(invoicingEndDateFieldId) > this.INVCalculationDateTime));
    
                if (rentalDates)
                {
                    ret = _showError ? checkFailed("@DNR8199") : false;
                }
            }
        }
        ;
    
        if (parameters.NotInvoiceFuelBeforeFinalInvoice)
        {
            if (_salesLine)
            {
                select firstOnly SalesId, InventTransId, RORParentLineRecId from fuelSalesLine
                where fuelSalesLine.ItemId == parameters.ItemIdFuel
                &&    fuelSalesLine.RecId == _salesLine.RecId
                &&    fuelSalesLine.RORParentLineRecId;
    
                if (fuelSalesLine.InventTransId)
                {
                    checkFuel(false);
                }
            }
            else
            {
                while select SalesId, InventTransId, RORParentLineRecId from fuelSalesLine
                where fuelSalesLine.ItemId == parameters.ItemIdFuel
                &&    fuelSalesLine.RORParentLineRecId
                &&    fuelSalesLine.RemainSalesFinancial
                    exists join fuelSalesParmLine
                    where fuelSalesParmLine.InventTransId == fuelSalesLine.InventTransId
                    &&    fuelSalesParmLine.ParmId        == this.ParmId
                {
                    checkFuel(true);
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVParmUpdateModified</Name>
				<Source><![CDATA[
    public boolean INVParmUpdateModified()
    {
        SalesParmUpdate orig = this.orig();
        ;
    
        return (this.INVCalculationDateTime         != orig.INVCalculationDateTime
             || this.INVIncludeCredits              != orig.INVIncludeCredits
             || this.INVIncludeUninvoiced           != orig.INVIncludeUninvoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetParmUpdateForExtendedCredit</Name>
				<Source><![CDATA[
    public void INVSetParmUpdateForExtendedCredit()
    {
        this.INVIncludeCredits              = NoYes::Yes;
        this.INVIncludeUninvoiced           = NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>