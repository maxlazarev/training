<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPProjJournalTransCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPProjJournalTransCheck extends RunBase
{
    FormDataSource                  formDataSource;

    ProjJournalTrans                callerProjJournalTrans;

    // Variables
    WPPPersonnelNumberId            worker;
    HcmWorkerRecId                  workerRecId;
    ResourceRecId                   resourceRecId;
    FromDate                        fromDate;
    ToDate                          toDate;

    // Dialog
    DialogField                     dlfWorker,
                                    dlfFromDate,
                                    dlfToDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
    
        dialog.caption("@DNR3683");
        dlfWorker   = dialog.addFieldValue(extendedTypeStr(WPPPersonnelNumberId), ResourceFacade::getPersonnelId(callerProjJournalTrans.Resource));
        dlfFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        dlfToDate   = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
    
        worker   = dlfWorker.value();
        fromDate = dlfFromDate.value();
        toDate   = dlfToDate.value();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceRecId</Name>
				<Source><![CDATA[
    protected void getResourceRecId()
    {
        workerRecId = (select firstonly RecId from HcmWorker
                       where HcmWorker.PersonnelNumber == worker).RecId;
        if (workerRecId)
        {
            resourceRecId = ResourceFacade::findByWorker(workerRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerProjJournalTrans</Name>
				<Source><![CDATA[
    public ProjJournalTrans parmCallerProjJournalTrans(ProjJournalTrans _callerProjJournalTrans = callerProjJournalTrans)
    {
        callerProjJournalTrans = _callerProjJournalTrans;
    
        return callerProjJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmFormDataSource(FormDataSource _formDataSource = formDataSource)
    {
        formDataSource = _formDataSource;
    
        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
    
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
    
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorker</Name>
				<Source><![CDATA[
    public WPPPersonnelNumberId parmWorker(WPPPersonnelNumberId _worker = worker)
    {
        worker = _worker;
    
        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckedProjJournalTrans</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    protected void setCheckedProjJournalTrans(WPPCheckedBy  _checkedBy = '',
                                              WPPCheckDate  _checkedOn = dateNull())
    {
        ProjJournalTrans    projJournalTrans;
        ProjJournalTable    projJournalTable;
    
        update_recordset projJournalTrans
        setting WPPCheckedBy = _checkedBy,
                WPPCheckDate = _checkedOn
        where projJournalTrans.ProjTransDate >= fromDate
        &&    projJournalTrans.ProjTransDate <= toDate
        &&    projJournalTrans.Resource == resourceRecId
            exists join projJournalTable
            where projJournalTable.JournalId == projJournalTrans.JournalId
            &&   !projJournalTable.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);
    
        if (!worker)
        {
            ret = checkFailed("@DNR3658");
        }
    
        if (!fromDate)
        {
            ret = checkFailed("@SYS91557");
        }
    
        if (!toDate)
        {
            ret = checkFailed("@SYS90868");
        }
    
        if (fromDate && toDate && toDate < fromDate)
        {
            ret = checkFailed("@SYS91020");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static server WPPProjJournalTransCheck construct(Args _args)
    {
        WPPProjJournalTransCheck    projJournalTransCheck;
    
        switch (_args.parmEnum())
        {
            case WPPValidationMode::Validate:
                projJournalTransCheck = new WPPProjJournalTransCheck_Validate();
                break;
    
            case WPPValidationMode::UndoValidation:
                projJournalTransCheck = new WPPProjJournalTransCheck_UndoValidate();
                break;
        }
    
        return projJournalTransCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WPPProjJournalTransCheck    projJournalTransCheck;
        ProjJournalTrans            projJournalTrans;
        FormDataSource              formDataSource;
    
        if (_args.dataset()       != tableNum(ProjJournalTrans)
        ||  _args.caller().name() != formStr(WPPProjJournalTransEmpl))
        {
            throw error(Error::missingParameter(null));
        }
    
        projJournalTransCheck = WPPProjJournalTransCheck::construct(_args);
    
        formDataSource   = FormDataUtil::getFormDataSource(_args.record());
        projJournalTrans = _args.record();
        projJournalTransCheck.parmFromDate(_args.caller().fromDate());
        projJournalTransCheck.parmToDate(_args.caller().toDate());
        projJournalTransCheck.parmFormDataSource(formDataSource);
        projJournalTransCheck.parmCallerProjJournalTrans(_args.record());
    
        if (projJournalTransCheck.prompt())
        {
            if (formDataSource)
            {
                projJournalTransCheck.runOperation();
            }
    
            if (formDataSource)
            {
                formDataSource.research(true);
                formDataSource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>