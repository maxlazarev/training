<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_RORSubStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesCalcTax_RORSubStatus
extends     SalesCalcTax
{
    CustRORSubStatusJour    subStatusJour;
    CustRORSubStatusTrans   subStatusTrans;
    SalesTable              salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return subStatusJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return subStatusJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return subStatusJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method")]
    void  initCursor()
    {
        select nofetch forupdate subStatusTrans
        where subStatusTrans.SalesId     == subStatusJour.SalesId
        &&    subStatusTrans.SubStatusId == subStatusJour.SubStatusId
        &&    subStatusTrans.Date        == subStatusJour.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount  markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (salesLine)
        {
            return salesLine.DefaultDimension;
        }
    
        return subStatusJour.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(CustRORSubStatusJour  _subStatusJour)
    {;
        super(_subStatusJour);
    
        subStatusJour = _subStatusJour;
        salesTable    = subStatusJour.salesTable();
        update        = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next subStatusTrans;
    
        this.getSalesLine();
        this.initCursorMarkup(subStatusTrans.TableId, subStatusTrans.RecId);
    
        return subStatusTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupRecId</Name>
				<Source><![CDATA[
    recId  salesMarkupRecId()
    {
        return markupTrans.OrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupTableId</Name>
				<Source><![CDATA[
    tableId  salesMarkupTableId()
    {
        return markupTrans.OrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    recId  salesTableRecID()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableTableID</Name>
				<Source><![CDATA[
    tableId  salesTableTableID()
    {
        return salesTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void  setTax(TaxWriteCode      taxWriteCode,
                 AmountCur         amountCur)
    {;
        subStatusTrans.TaxWriteCode    = taxWriteCode;
        subStatusTrans.TaxAmount       = amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return subStatusTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transLineAmountInclTax()
    {
        return subStatusTrans.lineAmountInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty    transQty()
    {
        return subStatusTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    TradeInventTransId transTransId()
    {
        return subStatusTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return subStatusJour.Triangulation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>