<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanboardContextMenuBuilder_SPBPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HiGHPlanboardContextMenuBuilder_SPBPeriod extends HiGHPlanboardContextMenuBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    // main extension point for customizing the contents of the context menu.
    public void populate()
    {
        WPPServicePlanboardSettings settings = callerFormRun.getSettings();
        WPPResourceTable resourceTable;

        if(sender.parmRowItemRefTableId() == tableNum(WPPResourceTable))
        {
            resourceTable = WPPResourceTable::findByRecId(sender.parmRowItemRefRecId());
        }

        BOBObjectId objectId = this.getObjectId(resourceTable);

        if(objectId)
        {
            FromDateTime selectionFromDateTime = sender.parmStartDateTime();
            ToDateTime selectionToDateTime = sender.parmEndDateTime();

            if(selectionFromDateTime > selectionToDateTime) // swap dates
            {
                TransDateTime placeholder = selectionFromDateTime;
                selectionFromDateTime = selectionToDateTime;
                selectionToDateTime = placeholder;
            }

            if(this.isSelectionOK(selectionFromDateTime, selectionToDateTime, resourceTable))
            {
                BOBObjectView objectView;

                select firstOnly Category, FirstOnRentDate, LastOnRentDate, PhysicalOwner, DepotStartDate, DepotEndDate from objectView
                where objectView.ObjectId == objectId;

                #DNRConstants

                if(objectView.Category == BOBObjectCategory::External)
                {
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR6701", true, #CreateWorkOrder));
                }
                else if(objectView.PhysicalOwner
                    &&  objectView.FirstOnRentDate
                    &&  selectionFromDateTime >= DateTimeUtil::newDateTime(objectView.FirstOnRentDate, 0)
                    &&  (!objectView.LastOnRentDate || selectionToDateTime <= DateTimeUtil::newDateTime(objectView.LastOnRentDate, #INVTimeMax))
                    &&  objectView.DepotStartDate <= DateTimeUtil::date(selectionFromDateTime)
                    &&  (!objectView.DepotEndDate || objectView.DepotEndDate >= DateTimeUtil::date(selectionToDateTime)))
                {
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR10144", true, #QuickCreateRentalQuotation));
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR10145", true, #QuickCreateRentalOrder));
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR5971", true, #CreateRentalQuotation));
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR916", true, #CreateRentalOrder));
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR6701", true, #CreateWorkOrder));
                }
            }
            else
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField(strFmt("@DNR8502", resourceTable.Name), false));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getObjectId</Name>
				<Source><![CDATA[
    private BOBObjectId getObjectId(WPPResourceTable _resourceTable)
    {
        WPPServicePlanboardSettings settings = callerFormRun.getSettings();
        BOBObjectId objectId;

        if(settings.PlanBy == WrkCtrGroupWrkCtr::WrkCtrGroup)
        {
            BOBObjectTable objectTable;

            select firstOnly ObjectId from objectTable
            where objectTable.WPPResourceGroupRecId == _resourceTable.RecId;

            objectId = objectTable.ObjectId;
        }
        else
        {
            if(_resourceTable.ResourceCategory == WPPResourceCategory::BusinessObject && _resourceTable.RelationAccount)
            {
                objectId = _resourceTable.RelationAccount;
            }
        }

        return objectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelectionOk</Name>
				<Source><![CDATA[
    private boolean isSelectionOk(FromDateTime _selectionFromDateTime, ToDateTime _selectionToDateTime, WPPResourceTable _resourceTable)
    {
        boolean isSelectionOK = true;

        if(WPPParameters::find().SPBAvailabilityMode == WPPResourceAvailabilityMode::RetrieveAndEnforce)
        {
            WPPServicePlanboardSettings settings = callerFormRun.getSettings();
            WPPGetResourceAvailability getResourceAvailability = WPPGetResourceAvailability::construct(settings.PlanBy, _selectionFromDateTime, _selectionToDateTime, settings.RegionCalendarId);
            getResourceAvailability.run(_resourceTable.ResourceId);

            isSelectionOK = getResourceAvailability.getIsAvailable();
        }

        return isSelectionOK;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>