<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORTogglePriceType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RORTogglePriceType
{
    RORRentalLine   rentalLine;
    RORRentalLine   topOfTree;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRecalculatePrices</Name>
				<Source><![CDATA[
    protected boolean canRecalculatePrices(RORRentalLine _rentalLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParent</Name>
				<Source><![CDATA[
    protected RORRentalLine findParent(RORRentalLine _rentalLine)
    {
        RORRentalLine rentalLineLocal = _rentalLine;
    
        while (rentalLineLocal.ParentLineRecId)
        {
            rentalLineLocal = rentalLineLocal.RORGetParentLine(true);
        }
    
        return rentalLineLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(RORRentalLine _rentalLine)
    {
        rentalLine = _rentalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        topOfTree = this.findParent(rentalLine);
    
        this.updateOneRecord(rentalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceType</Name>
				<Source><![CDATA[
    abstract protected void setPriceType(RORRentalLine _rentalLine)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOneRecord</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method")]
    protected void updateOneRecord(RORRentalLine _rentalLine)
    {
        RORRentalLine   rentalLineUpdate = _rentalLine;
        RORRentalLine   rentalLineChild = _rentalLine.RORLineBuffer();
        ;
    
        if (rentalLineUpdate.RecId)
        {
            ttsBegin;
    
            while select forUpdate rentalLineChild
            where rentalLineChild.HeaderId          == rentalLineUpdate.HeaderId
            &&    rentalLineChild.ParentLineRecId   == rentalLineUpdate.RecId
            &&   (rentalLineChild.KitComponentType  == RORKitComponentType::KitComponent ||
                  rentalLineChild.KitComponentType  == RORKitComponentType::Component)
            {
                this.updateOneRecord(rentalLineChild);
            }
    
            this.setPriceType(rentalLineUpdate);
    
            if (rentalLineUpdate.RecId == rentalLine.RecId
            && this.canRecalculatePrices(rentalLineUpdate))
            {
                rentalLineUpdate.update();
                topOfTree.RORRentalLine::updateKitComponentPricing(RORKitPricingActionType::ModifyLine);
            }
            else
            {
                rentalLineUpdate.update();
            }
    
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static server RORTogglePriceType construct(RORRentalPriceType _priceType, Common _common)
    {
        RORTogglePriceType    togglePriceType;
        ;
    
        switch (_priceType)
        {
            case RORRentalPriceType::Net :
                togglePriceType = RORTogglePriceType_Net::construct(_common);
                break;
            default:
                togglePriceType = RORTogglePriceType_Fixed::construct(_common);
        }
    
        return togglePriceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RORTogglePriceType  togglePriceType;
        FormDataSource      fds;
        ;
    
        if (!_args.record())
        {
            throw error (strFmt("@SYS29104", classStr(RORTogglePriceType)));
        }
    
        if (_args.parmEnumType() == enumNum(RORRentalPriceType))
        {
            togglePriceType = RORTogglePriceType::construct(_args.parmEnum(), _args.record());
            togglePriceType.run();
    
            if (FormDataUtil::getFormDataSource(_args.record()))
            {
                fds = FormDataUtil::getFormDataSource(_args.record());
                fds.research(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>