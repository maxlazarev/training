<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimValueController_PurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimValueController_PurchTable extends FINDimValueController
{
    PurchTable callerPurchTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceptCascadedUpdate</Name>
				<Source><![CDATA[
    protected boolean acceptCascadedUpdate()
    {
        return (callerPurchTable.PurchStatus != PurchStatus::Invoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendAccount</Name>
				<Source><![CDATA[
    protected FINDimValueResult findVendAccount()
    {
        return FINDimValueResult::constructValue(callerPurchTable.InvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVenue</Name>
				<Source><![CDATA[
    protected FINDimValueResult findVenue()
    {
        return FINDimValueResult::constructValue(callerPurchTable.RORVenueCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    protected Description getDescription()
    {
        return callerPurchTable.PurchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimensionFieldId()
    {
        return fieldNum(PurchTable, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PurchTable _purchTable)
    {
        super(_purchTable);
        callerPurchTable = _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refDepartmentId</Name>
				<Source><![CDATA[
    protected FINDimValueResult refDepartmentId()
    {
        InterCompanyPurchSalesReference reference;
        SalesTable                      salesTable;
    
        select firstOnly TableId from reference
        where reference.PurchId == callerPurchTable.PurchId
            join TableId from salesTable
            where salesTable.SalesId == reference.SalesId;
    
        if (salesTable)
        {
            return FINDimValueResult::constructReference(InventLocation::find(salesTable.InventLocationId));
        }
        else
        {
            return FINDimValueResult::constructReference(InventLocation::find(callerPurchTable.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCleanupQuery</Name>
				<Source><![CDATA[
    public SysDaQueryObject getCleanupQuery()
    {
        SysDaQueryObject cleanupQuery = new SysDaQueryObject(callerPurchTable);

        cleanupQuery.WhereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(callerPurchTable, fieldStr(PurchTable, PurchStatus)),
            new SysDaValueExpression(PurchStatus::Invoiced))
        .or(new SysDaEqualsExpression(
            new SysDaFieldExpression(callerPurchTable, fieldStr(PurchTable, PurchStatus)),
            new SysDaValueExpression(PurchStatus::Canceled))));

        return cleanupQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>