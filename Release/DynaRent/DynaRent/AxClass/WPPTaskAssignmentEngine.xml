<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPTaskAssignmentEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WPPTaskAssignmentEngine
{
    WPPParameters           parameters;
    boolean                 refreshPlanBoardLoad;
    boolean                 showMessage;
    boolean                 calledFromRentalDateChange;
    boolean                 addRelatedLinesToPlanningSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createHourJournal</Name>
				<Source><![CDATA[
    protected void createHourJournal(WPPWorkOrderLineResource _workOrderLineResource)
    {
        Args                    args;
        WPPManageHourJournal    manageHourJournal;
    
        if (this.mustCreateHourJournal(_workOrderLineResource))
        {
            args = new Args();
            args.record(_workOrderLineResource);
            args.parmEnumType(enumNum(WPPIncludeJournalLines));
            args.parmEnum(WPPIncludeJournalLines::Yes);
    
            manageHourJournal = WPPManageHourJournal::construct(args);
            manageHourJournal.init(true);
            manageHourJournal.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResourcePlanningExternal</Name>
				<Source><![CDATA[
    public WPPWorkOrderLineResource createResourcePlanningExternal(WPPResourceId        _resourceId,
                                                                   WrkCtrGroupWrkCtr    _resourceType,
                                                                   TransDateTime        _plannedFromDateTime,
                                                                   TransDateTime        _plannedToDateTime,
                                                                   RefRecId             _workOrderLineRecId,
                                                                   LineNum              _lineNumLast,
                                                                   TransTxt             _internalNote)
    {
        WPPWorkOrderLineResource workOrderLineResource;

        workOrderLineResource.ResourceId            = _resourceId;
        workOrderLineResource.ResourceType          = _resourceType;
        workOrderLineResource.PlannedFromDateTime   = _plannedFromDateTime;
        workOrderLineResource.PlannedToDateTime     = _plannedToDateTime;
        workOrderLineResource.WorkOrderLineRecId    = _workOrderLineRecId;
        workOrderLineResource.LineNum               = _lineNumLast;
        workOrderLineResource.InternalNote          = _internalNote;

        return this.insertResourcePlanning(workOrderLineResource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertResourcePlanning</Name>
				<Source><![CDATA[
    // This method serves as an extension point, as there are no other extension points when the resource planning is inserted.
    protected WPPWorkOrderLineResource insertResourcePlanning(WPPWorkOrderLineResource _workOrderLineResource)
    {
        _workOrderLineResource.insert(showMessage, calledFromRentalDateChange, addRelatedLinesToPlanningSet, true); 

        return _workOrderLineResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateHourJournal</Name>
				<Source><![CDATA[
    private boolean mustCreateHourJournal(WPPWorkOrderLineResource _workOrderLineResource)
    {
        boolean             ret;
        WPPWorkOrderLine    workOrderLine;
        WPPWorkOrderTable   workOrderTable;
        SalesLine           salesLine;
        InventDim           inventDim;
        BOBObjectTable      objectTable;
        WPPResourceTable    resourceTable;
    
        if (parameters.AutoGenerateJourTrans)
        {
            workOrderLine = _workOrderLineResource.workOrderLine();
    
            if (workOrderLine.ProjId)
            {
                resourceTable = WPPResourceTable::find(_workOrderLineResource.ResourceId);
    
                if (!_workOrderLineResource.ResourceId || resourceTable.AutoGenerateJourTrans)
                {
                    ret = true;
                    workOrderTable = workOrderLine.workOrderTable();
    
                    if (workOrderTable.OrderTableId == tableNum(SalesLine))
                    {
                        salesLine = SalesLine::findRecId(workOrderTable.OrderRecId);
                        inventDim = salesLine.inventDim();
    
                        if (inventDim.inventSerialId)
                        {
                            objectTable = BOBObjectTable::findInventSerialId(inventDim.inventSerialId);
    
                            if (objectTable.ObjectId)
                            {
                                ret = (objectTable.ObjectId == resourceTable.RelationAccount && resourceTable.ResourceCategory == WPPResourceCategory::BusinessObject);
                            }
                        }
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        parameters = WPPParameters::find();
        showMessage = true;
        addRelatedLinesToPlanningSet = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddRelatedLinesToPlanningSet</Name>
				<Source><![CDATA[
    public boolean parmAddRelatedLinesToPlanningSet(boolean _addRelatedLinesToPlanningSet = addRelatedLinesToPlanningSet)
    {
        addRelatedLinesToPlanningSet = _addRelatedLinesToPlanningSet;
    
        return addRelatedLinesToPlanningSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromRentalDateChange</Name>
				<Source><![CDATA[
    public boolean parmCalledFromRentalDateChange(boolean _calledFromRentalDateChange = calledFromRentalDateChange)
    {
        calledFromRentalDateChange = _calledFromRentalDateChange;
    
        return calledFromRentalDateChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefreshPlanBoardLoad</Name>
				<Source><![CDATA[
    public boolean parmRefreshPlanBoardLoad(boolean _refreshPlanBoardLoad = refreshPlanBoardLoad)
    {
        refreshPlanBoardLoad = _refreshPlanBoardLoad;
    
        return refreshPlanBoardLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMessage</Name>
				<Source><![CDATA[
    public boolean parmShowMessage(boolean _showMessage = showMessage)
    {
        showMessage = _showMessage;
    
        return showMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unassign</Name>
				<Source><![CDATA[
    public abstract void unassign(WPPWorkOrderLineResource _plannedTask, Common _planBoardSettings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate(WPPWorkOrderLine _workOrderLine, WPPResourceId _planToId, WrkCtrGroupWrkCtr _planToType, boolean _validateDate = true)
    {
        boolean                     ret;
        WPPTaskRequirements         taskRequirements;
        WPPCapability               capability;
        WPPResourceCapability       resourceCapability;
        WPPResourceGroupResource    resourceGroupResource;
        Set                         capabilitySet;
        SetEnumerator               capabilitySetEnumerator;
        str                         tmpStr;
    
        ret = true;
        capabilitySet = new Set(Types::String);
    
        if ((parameters.CapabilityValidation != WPPCapabilityValidation::None && showMessage)
        ||   parameters.CapabilityValidation == WPPCapabilityValidation::Error)
        {
            if (_planToType == WrkCtrGroupWrkCtr::WrkCtr)
            {
                while select taskRequirements
                where taskRequirements.RefTableId == _workOrderLine.TableId
                &&    taskRequirements.RefRecId   == _workOrderLine.RecId
                        notExists join resourceCapability
                        where resourceCapability.CapabilityId == taskRequirements.CapabilityId
                        &&    resourceCapability.ResourceId   == _planToId
                {
                    capabilitySet.add(taskRequirements.CapabilityId);
                }
            }
            else
            {
                // Check the requirements per individual resource
                while select taskRequirements
                where taskRequirements.RefTableId == _workOrderLine.TableId
                &&    taskRequirements.RefRecId   == _workOrderLine.RecId
                    join TableId from resourceGroupResource
                    where resourceGroupResource.ResourceGroup == _planToId
                        notExists join resourceCapability
                        where resourceCapability.CapabilityId == taskRequirements.CapabilityId
                        &&    resourceCapability.ResourceId == resourceGroupResource.ResourceId
                {
                    capabilitySet.add(taskRequirements.CapabilityId);
                }
            }
        }
    
        if (!capabilitySet.empty())
        {
            switch (parameters.CapabilityValidation)
            {
                case WPPCapabilityValidation::Question:
                    ret = Box::yesNo("@DNR8238", DialogButton::Yes) == DialogButton::Yes;
                    break;
    
                case WPPCapabilityValidation::Warning:
                    capabilitySetEnumerator = capabilitySet.getEnumerator();
    
                    while (capabilitySetEnumerator.moveNext())
                    {
                        tmpStr += capabilitySetEnumerator.current() + '\n';
                    }
    
                    warning(strFmt("@DNR8239" + '\n' + '%1' , tmpStr));
                    break;
    
                case WPPCapabilityValidation::Error:
                    capabilitySetEnumerator = capabilitySet.getEnumerator();
    
                    while (capabilitySetEnumerator.moveNext())
                    {
                        error(strFmt("@DNR8240", _workOrderLine.TaskId, _planToId, capabilitySetEnumerator.current()));
                        ret = false;
                    }
                    break;
    
                default:
                    // Do nothing
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>