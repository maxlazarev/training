<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjInvoiceProposalCreateLinesParamsClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjInvoiceProposalCreateLinesParams))]
public final class DNRProjInvoiceProposalCreateLinesParamsClass_Extension
{
    private INVCalculationDateTime          calculationDateTime;
    private INVIncludeUninvoiced            includeUninvoiced;
    private INVIncludeCredits               includeCredits;
    private BSAInvoiceGroupId               invoiceGroupId;
    private WPPWorkOrderId                  workOrderId;
    
    #define.CurrentVersion(4)
    #localmacro.CurrentListCS
        calculationDateTime,
        includeUninvoiced,
        includeCredits,
        invoiceGroupId,
        workOrderId        
    #ENDMACRO

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId)
    {
        ProjId  ret                 = next parmProjId(_projId);
        str     emptyStrQueryValue  = SysQuery::value('');

        if (ret && strScan(ret, emptyStrQueryValue, 1, strLen(ret)))
        {
            ret = strRem(ret, emptyStrQueryValue);
            this.parmProjId(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUnpack</Name>
				<Source><![CDATA[
    // extension methods

    private boolean DNRUnpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        switch(version)
        {
            case #CurrentVersion:
                [version, #CurrentListCS] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPack</Name>
				<Source><![CDATA[
    private container DNRPack()
    {
        return [#CurrentVersion, #CurrentListCS];
    }

]]></Source>
			</Method>
			<Method>
				<Name>BSAparmInvoiceGroupId</Name>
				<Source><![CDATA[
    public BSAInvoiceGroupId BSAparmInvoiceGroupId(BSAInvoiceGroupId _invoiceGroupId = invoiceGroupId)
    {
        invoiceGroupId = _invoiceGroupId;
        return invoiceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BSAparmWorkOrderId</Name>
				<Source><![CDATA[
    public WPPWorkOrderId BSAparmWorkOrderId(WPPWorkOrderId _workOrderId = workOrderId)
    {
        workOrderId = _workOrderId;
        return workOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVparmCalculationDateTime</Name>
				<Source><![CDATA[
    public INVCalculationDateTime INVparmCalculationDateTime(INVCalculationDateTime _calculationDateTime = calculationDateTime)
    {
        calculationDateTime = _calculationDateTime;
    
        return calculationDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVparmIncludeCredits</Name>
				<Source><![CDATA[
    public boolean INVparmIncludeCredits(boolean _includeCredits = includeCredits)
    {
        includeCredits = _includeCredits;
    
        return includeCredits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVparmIncludeUninvoiced</Name>
				<Source><![CDATA[
    public boolean INVparmIncludeUninvoiced(boolean _includeUninvoiced = includeUninvoiced)
    {
        includeUninvoiced = _includeUninvoiced;
    
        return includeUninvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(classStr(ProjInvoiceProposalCreateLinesParams), methodStr(ProjInvoiceProposalCreateLinesParams, pack))]
    public static void pack_post(XppPrePostArgs _eventArgs)
    {
        ProjInvoiceProposalCreateLinesParams hostObj = _eventArgs.getThis() as ProjInvoiceProposalCreateLinesParams;
        SysPackExtensions::pack(_eventArgs, classStr(DNRProjInvoiceProposalCreateLinesParamsClass_Extension), hostObj.DNRPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProjInvoiceProposalCreateLinesParams), methodStr(ProjInvoiceProposalCreateLinesParams, unpack))]
    public static void unpack_post(XppPrePostArgs _eventArgs)
    {
        ProjInvoiceProposalCreateLinesParams hostObj = _eventArgs.getThis() as ProjInvoiceProposalCreateLinesParams;
        
        container myState = SysPackExtensions::unpack(_eventArgs, classStr(DNRProjInvoiceProposalCreateLinesParamsClass_Extension));

        //Also unpack the extension
        if (!hostObj.DNRUnpack(myState))
        {
            _eventArgs.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>