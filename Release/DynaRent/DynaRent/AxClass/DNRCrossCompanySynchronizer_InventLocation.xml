<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCrossCompanySynchronizer_InventLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRCrossCompanySynchronizer_InventLocation extends DNRCrossCompanySynchronizer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldIds2Identify</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Identify()
    {
        Set fieldIdsSet = new Set(Types::Integer);
        
        fieldIdsSet.add(fieldNum(InventLocation, InventLocationId));

        return fieldIdsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIds2Sync</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Sync()
    {
        Set fieldIdsSet = new Set(Types::Integer);

        //Standard Fields
        //Any changes here shall also be reflected in Class DNROMNewLegalEntityViewModelClass_Extension
        fieldIdsSet.add(fieldNum(InventLocation, WarehouseAutoReleaseReservation));
        fieldIdsSet.add(fieldNum(InventLocation, WMSRackNameActive));
        fieldIdsSet.add(fieldNum(InventLocation, WMSRackFormat));
        fieldIdsSet.add(fieldNum(InventLocation, WMSPositionNameActive));
        fieldIdsSet.add(fieldNum(InventLocation, WMSPositionFormat));
        fieldIdsSet.add(fieldNum(InventLocation, WMSLevelFormat));
        fieldIdsSet.add(fieldNum(InventLocation, WMSLevelNameActive));
        fieldIdsSet.add(fieldNum(InventLocation, WMSAisleNameActive));
        fieldIdsSet.add(fieldNum(InventLocation, WHSRawMaterialPolicy));
        fieldIdsSet.add(fieldNum(InventLocation, WHSEnabled));
        fieldIdsSet.add(fieldNum(InventLocation, UniqueCheckDigits));
        fieldIdsSet.add(fieldNum(InventLocation, RetailWeightEx1));
        fieldIdsSet.add(fieldNum(InventLocation, RetailInventNegPhysical));
        fieldIdsSet.add(fieldNum(InventLocation, RetailInventNegFinancial));
        fieldIdsSet.add(fieldNum(InventLocation, ReserveAtLoadPost));
        fieldIdsSet.add(fieldNum(InventLocation, ReqRefill));
        fieldIdsSet.add(fieldNum(InventLocation, RemoveInventBlockingOnStatusChange));
        fieldIdsSet.add(fieldNum(InventLocation, ProdReserveOnlyWhse));
        fieldIdsSet.add(fieldNum(InventLocation, PrintBOLBeforeShipConfirm));
        fieldIdsSet.add(fieldNum(InventLocation, NumberSequenceGroup_RU));
        fieldIdsSet.add(fieldNum(InventLocation, Name));
        fieldIdsSet.add(fieldNum(InventLocation, Manual));
        fieldIdsSet.add(fieldNum(InventLocation, InventSiteId));
        fieldIdsSet.add(fieldNum(InventLocation, InventProfileType_RU));
        fieldIdsSet.add(fieldNum(InventLocation, InventLocationType));
        fieldIdsSet.add(fieldNum(InventLocation, InventLocationLevel));
        fieldIdsSet.add(fieldNum(InventLocation, InventLocationId));
        fieldIdsSet.add(fieldNum(InventLocation, InventCountingGroup_BR));
        fieldIdsSet.add(fieldNum(InventLocation, FSHStore));
        fieldIdsSet.add(fieldNum(InventLocation, DecrementLoadLine));
        fieldIdsSet.add(fieldNum(InventLocation, CycleCountAllowPalletMove));
        fieldIdsSet.add(fieldNum(InventLocation, ConsolidateShipAtRTW));
        fieldIdsSet.add(fieldNum(InventLocation, BranchNumber));
        fieldIdsSet.add(fieldNum(InventLocation, AllowMarkingReservationRemoval));
        fieldIdsSet.add(fieldNum(InventLocation, AllowLaborStandards));
        fieldIdsSet.add(fieldNum(InventLocation, ActivityType_RU));
        fieldIdsSet.add(fieldNum(InventLocation, InventLocationIdReqMain));
        
        //Extensions Fields
        fieldIdsSet.add(fieldNum(InventLocation, RORNumberSequenceGroup));
        fieldIdsSet.add(fieldNum(InventLocation, FINDefaultDimension));
        fieldIdsSet.add(fieldNum(InventLocation, RORVATNum));
        fieldIdsSet.add(fieldNum(InventLocation, DNRSourceEntity));

        return fieldIdsSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>