<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLedgerJournalTransUpdateLedgerClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerJournalTransUpdateLedger))]
public final class DNRLedgerJournalTransUpdateLedgerClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow(LedgerVoucher _ledgerVoucher, LedgerPostingType _posting, LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans _originalLedgerJournalTrans,
                   boolean _interCompany, boolean _reversalsMayExist, boolean _isDueToDueFromAccount)
    {
        using(DNRLedgerPostingControllerAddTransDisposableContext context = new DNRLedgerPostingControllerAddTransDisposableContext())
        {   
            if (!accrual)
            {
                LedgerAccount sumAccount;

                if (TaxParameters::canApplyCashDiscOnInvoice_ES())
                {
                    sumAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.vendSummaryLedgerDimension(_ledgerJournalTrans));
                }

                if(!_ledgerJournalTrans.LedgerDimension
                || LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_ledgerJournalTrans.LedgerDimension) != sumAccount
                || !TaxParameters::canApplyCashDiscOnInvoice_ES())
                {
                    context.DNRParmLedgerJournalTrans(_ledgerJournalTrans);
                }
            }
            next updateNow(_ledgerVoucher, _posting, _ledgerJournalTrans, _originalLedgerJournalTrans, _interCompany, _reversalsMayExist, _isDueToDueFromAccount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>