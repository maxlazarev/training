<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesLineSalesPurchLineClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesLineSalesPurchLine))]
public final class DNRSalesLineSalesPurchLineClass_Extension
{
    private PriceDiscPriceAgreementParameters parameters;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustSetPriceDisc</Name>
				<Source><![CDATA[
    protected boolean mustSetPriceDisc(InventDim _inventDim, boolean _initDateFields, PriceDiscPriceAgreementParameters _parameters)
    {
        parameters = _parameters; // we also need access to these parameters in the Chain of Command wrapper for the method 'updateLineAmountAfterSettingPriceDisc()'

        next mustSetPriceDisc(_inventDim, _initDateFields, _parameters); // we don't want/need to catch the return value

        // Fetch prices from contract only during creation, or when some crucial fields like CustAccount changes
        // (but in that case the code will be triggered from a different place)
        if (this.parmSalesLine().RORTradeType != RORTradeType::SalesPurch && (!this.parmSalesLine().RecId || _parameters.DNRparmForceRentalAgreement())
        && !InventTable::find(this.parmSalesLine().ItemId).RORBasePriceOnDistance)
        {
            if (RAGUtil::mustApplyRentalAgreements(this.parmSalesLine().BOBRentalTypeIdRequested))
            {
                this.parmSalesLine().RORRentalLine::RAGSetContractInfo();
            }
            else if (this.parmSalesLine().RORLineType == RORLineType::Insurance)
            {
                this.parmSalesLine().RORRentalLine::RAGSetContractInfoFromParent();
            }

            return false;
        }

        if ((this.parmSalesLine().returnItem() && !this.parmSalesLine().InventTransIdReturn && !this.parmSalesLine().CreditNoteInternalRef_PL)
        || (!this.parmSalesLine().returnItem() && !this.parmSalesLine().CreditNoteInternalRef_PL && this.parmSalesLine().RORTradeType == RORTradeType::SalesPurch))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAmountAfterSettingPriceDisc</Name>
				<Source><![CDATA[
    protected void updateLineAmountAfterSettingPriceDisc(PriceDiscPolicyCheckPolicy _checkPolicy)
    {
        LineAmount  lineAmountLocal         = this.parmSalesLine().LineAmount;
        boolean     fetchPricesFromContract = (this.parmSalesLine().RORTradeType != RORTradeType::SalesPurch 
                                              && (!this.parmSalesLine().RecId || parameters.DNRparmForceRentalAgreement()) 
                                              && !InventTable::find(this.parmSalesLine().ItemId).RORBasePriceOnDistance);

        if (!fetchPricesFromContract && !this.parmSalesLine().returnItem() && !this.parmSalesLine().CreditNoteInternalRef_PL && this.parmSalesLine().RORTradeType == RORTradeType::SalesPurch)
        {
            this.parmSalesLine().RORRentalGrossAmount = (this.parmSalesLine().SalesPrice * this.parmSalesLine().SalesQty);
        }

        next updateLineAmountAfterSettingPriceDisc(_checkPolicy);

        this.parmSalesLine().LineAmount = lineAmountLocal; // reset the field 'LineAmount' and initialize it based on our criteria

        if (!fetchPricesFromContract && this.parmSalesLine().returnItem())
        {
            this.parmSalesLine().LineAmount = this.parmSalesLine().returnLineAmount();
        }
        else if (!fetchPricesFromContract && !this.parmSalesLine().returnItem())
        {
            this.assignLineAmount(this.calcLineAmountForced(this.parmQty(), _checkPolicy)); // this is what the call to 'super()' does
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>