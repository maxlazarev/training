<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWorkCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DNRWorkCalendar</c> class is used to search through DynaRent calendars.
/// </summary>
public class DNRWorkCalendar
{
    DNRCalendarId       calendar;
    TransDate           transDate;
    DNRCalendarDate     workCalendarDate;
    str                 errorText;
    Set                 checkSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowWorkTimeEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the calendar date can be edited.
    /// </summary>
    /// <returns>
    /// true if the calendar date can be edited; otherwise, false.
    /// </returns>
    public boolean allowWorkTimeEdit()
    {
        if (this.isValid()                                      &&
            workCalendarDate.CalendarId        == calendar      &&
            workCalendarDate.WorkTimeControl   != WorkTimeControl::Closed)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>definedCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the calendar date.
    /// </summary>
    /// <returns>
    /// The ID of the calendar date.
    /// </returns>
    public DNRCalendarId definedCalendar()
    {
        return workCalendarDate.CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets an error text.
    /// </summary>
    /// <param name="_errorText">
    /// The error text to set; optional.
    /// </param>
    /// <returns>
    /// An error text.
    /// </returns>
    public str errorText(str _errorText = errorText)
    {
        errorText = _errorText;
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the work calendar is valid.
    /// </summary>
    /// <returns>
    /// true if the work calendar is valid; otherwise, false.
    /// </returns>
    public boolean isValid()
    {
        return errorText ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.')]
    void new(DNRCalendarId _calendar, TransDate _transDate)
    {
        calendar    = _calendar;
        transDate   = _transDate;
        checkSet    = new Set(typeName2Type(extendedtypestr(RecId)));

        this.setWorkCalendarDate(calendar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkCalendarDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the calendar for the transaction date.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar.
    /// </param>
    /// <remarks>
    /// An error text is set when no calendar entry is found on the transaction date.
    /// </remarks>
    protected void setWorkCalendarDate(DNRCalendarId _calendar)
    {
        DNRCalendarTable workCalendarTable;

        workCalendarDate    = DNRCalendarDate::find(_calendar, transDate);

        if(!workCalendarDate)
        {
            this.errorText(strfmt("@SYS25636",_calendar, date2StrUsr(transDate, DateFlags::FormatAll)));
        }
        else
        {
            if (workCalendarDate.WorkTimeControl == WorkTimeControl::UseBasic)
            {
                workCalendarTable   = DNRCalendarTable::find(_calendar);

                if (! workCalendarTable)
                {
                    this.errorText(strfmt("@SYS12540",_calendar));
                }
                else
                {
                    if (checkSet.in(workCalendarTable.RecId))
                    {
                        this.errorText(strfmt("@SYS25637",_calendar));
                    }
                    else
                    {
                        checkSet.add(workCalendarTable.RecId);
                        this.setWorkCalendarDate(workCalendarTable.BasicCalendarId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTimeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the time control setting for the calendar date.
    /// </summary>
    /// <returns>
    /// The time control setting for the calendar date.
    /// </returns>
    public WorkTimeControl workTimeControl()
    {
        return workCalendarDate.WorkTimeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRWorkCalendar construct(DNRCalendarId  _calendar, TransDate   _transDate)
    {
        return new DNRWorkCalendar(_calendar, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base calendar ID for a specific date.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar for which to search.
    /// </param>
    /// <param name="_transDate">
    /// The search date.
    /// </param>
    /// <param name="_throwIfError">
    /// A Boolean value that indicates whether to throw an error when no calendar entry can be found;
    /// optional.
    /// </param>
    /// <returns>
    /// The base calendar ID for a specific date.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// No calendar entry was found on the date.
    /// </exception>
    public static DNRCalendarId defined(DNRCalendarId  _calendar, TransDate _transDate, boolean _throwIfError = true)
    {
        DNRWorkCalendar workCalendar = new DNRWorkCalendar(_calendar, _transDate);

        if (!workCalendar.isValid())
        {
            if (_throwIfError)
            {
                throw error(workCalendar.errorText(),
                            '',
                            DNRWorkCalendar::infoActionWorkCalendarTable(_calendar));
            }
            else
            {
                return '';
            }
        }

        return workCalendar.definedCalendar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endWorkTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the end time of the last <c>WorkCalendarDateLine</c> record for a given date.
    /// </summary>
    /// <param name="_calendarId">
    ///    The calendar to use.
    /// </param>
    /// <param name="_transDate">
    ///    The date to find the latest end time for.
    /// </param>
    /// <returns>
    ///    The end time if a <c>WorkCalendarDateLine</c> record is found and the calendar is open; otherwise,
    ///    zero.
    /// </returns>
    public static timeOfDay endWorkTime(DNRCalendarId _calendarId, SchedDate _transDate)
    {
        DNRCalendarDateLine    workCalendarDateLine;

        #define.maxLoops(365)

        if (_calendarId 
        &&  DNRCalendarTable::exist(_calendarId) 
        &&  DNRCalendarDate::isDateOpen(_calendarId,_transDate))
        {
            select maxof(ToTime) from workCalendarDateLine
            where workCalendarDateLine.CalendarId       == DNRWorkCalendar::defined(_calendarId, _transDate)   
            &&    workCalendarDateLine.TransDate        == _transDate;
        }

        return workCalendarDateLine.ToTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateBackward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous calendar date.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDate">
    /// The date from which to start the search.
    /// </param>
    /// <param name="_fromTime">
    /// The time from which to start the search.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A Boolean value that indicates that only the open calendar dates will be included in the search.
    /// </param>
    /// <returns>
    /// The previous calendar date.
    /// </returns>
    public static TransDate findOpenDateBackward(DNRCalendarId     _calendarId,
                                                 SchedDate         _fromDate,
                                                 SchedTime         _fromTime,
                                                 boolean           _checkIfDateIsOpen = false)
    {
        DNRCalendarDateLine    workCalendarDateLine;
        TransDate              transDate = _fromDate;

        #define.maxLoops(365)

        if(_calendarId && DNRCalendarTable::exist(_calendarId))
        {
            while(_fromDate - transDate < #maxLoops)
            {
                if(_checkIfDateIsOpen == false)
                {
                    while select CalendarId, TransDate, FromTime
                    from workCalendarDateLine
                    order by FromTime desc
                    where workCalendarDateLine.CalendarId       == DNRWorkCalendar::defined(_calendarId, transDate)
                    &&    workCalendarDateLine.TransDate        == transDate
                    {
                        if(_fromTime > workCalendarDateLine.FromTime || transDate < _fromDate)
                        {
                            return transDate;
                        }
                    }
                }
                else
                {
                    if(DNRCalendarDate::isDateOpen(_calendarId, transDate))
                    {
                        while select CalendarId, TransDate, FromTime
                        from workCalendarDateLine
                        order by FromTime desc
                        where workCalendarDateLine.CalendarId       == DNRWorkCalendar::defined(_calendarId, transDate)
                        &&    workCalendarDateLine.TransDate        == transDate
                        {
                            if(_fromTime > workCalendarDateLine.FromTime || transDate < _fromDate)
                            {
                                return transDate;
                            }
                        }
                    }
                }

                transDate--;
            }
        }

        return _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next calendar date.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDate">
    /// The date from which to start the search.
    /// </param>
    /// <param name="_fromTime">
    /// The time from which to start the search.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A Boolean value that indicates that only the open calendar dates will be included in the search.
    /// </param>
    /// <returns>
    /// The next calendar date.
    /// </returns>
    public static TransDate findOpenDateForward(DNRCalendarId   _calendarId,
                                                SchedDate       _fromDate,
                                                SchedTime       _fromTime,
                                                boolean         _checkIfDateIsOpen = false)     
    {
        DNRCalendarDateLine    workCalendarDateLine;
        TransDate              transDate = _fromDate;

        #define.maxLoops(365)

        if(_calendarId && DNRCalendarTable::exist(_calendarId))
        {
            while(transDate - _fromDate < #maxLoops)
            {
                if(!_checkIfDateIsOpen || DNRCalendarDate::isDateOpen(_calendarId, transDate))
                {
                    select firstonly CalendarId
                    from workCalendarDateLine
                    where workCalendarDateLine.CalendarId == DNRWorkCalendar::defined(_calendarId, transDate)
                    &&    workCalendarDateLine.TransDate == transDate
                    &&   (workCalendarDateLine.ToTime  > _fromTime || transDate > _fromDate);

                    if (workCalendarDateLine)
                    {
                        return transDate;
                    }
                }

                transDate++;
            }
        }

        return _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextOpenDate</Name>
				<Source><![CDATA[
    public static TransDate findNextOpenDate(DNRCalendarId   _calendarId,
                                             SchedDate       _fromDate,
                                             boolean         _searchBackward = false,
                                             int             _daysOffset = 0)
    {
        DNRCalendarDateLine    workCalendarDateLine;
        TransDate              transDate = _fromDate;

        #define.maxLoops(365)

        if(_calendarId && DNRCalendarTable::exist(_calendarId))
        {
            int daysLeftToSkip = _daysOffset;

            while((!_searchBackward && transDate - _fromDate < #maxLoops) || (_searchBackward && _fromDate - transDate < #maxLoops))
            {
                if(DNRCalendarDate::isDateOpen(_calendarId, transDate))
                {
                    if (daysLeftToSkip == 0)
                    {
                        return transDate;
                    }

                    daysLeftToSkip--;
                }

                transDate += _searchBackward ? -1 : 1;
            }
        }
        else
        {
            transDate += _searchBackward ? -_daysOffset : _daysOffset;
        }

        return _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateTimeBackward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UTC date and time of the previous calendar entry.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDateTime">
    /// The UTC date and time to search from.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A Boolean value that indicates whether only the open dates should be included in the search;
    /// optional.
    /// </param>
    /// <returns>
    /// The UTC date and time of the previous calendar entry.
    /// </returns>
    static utcdatetime findOpenDateTimeBackward(DNRCalendarId  _calendarId, utcdatetime _fromDateTime, boolean  _checkIfDateIsOpen = false)
    {
        DNRCalendarDateLine    workCalendarDateLine;

        date                    fromDate  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        timeOfDay               fromTime  = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        date                    transDate = fromDate;

        #define.maxLoops(365)

        if(_calendarId)
        {
            if(((select RecId from   workCalendarDateLine
                               where workCalendarDateLine.CalendarId    == DNRWorkCalendar::defined(_calendarId, transDate)
                                  && workCalendarDateLine.TransDate     == fromDate
                                  && workCalendarDateLine.FromTime      <= fromTime
                                  && workCalendarDateLine.ToTime        >= fromTime).RecId != 0)
               && ( (!_checkIfDateIsOpen) || (DNRCalendarDate::isDateOpen(_calendarId, transDate)) ))
            {
                return _fromDateTime;
            }

            if(_calendarId && DNRCalendarTable::exist(_calendarId))
            {
                while(fromDate - transDate < #maxLoops)
                {
                    if((!_checkIfDateIsOpen) || (DNRCalendarDate::isDateOpen(_calendarId, transDate)))
                    {
                        while select   workCalendarDateLine
                        order by FromTime desc
                        where    workCalendarDateLine.CalendarId       == DNRWorkCalendar::defined(_calendarId, transDate)
                        &&       workCalendarDateLine.TransDate        == transDate

                        {
                            if((transDate != fromDate) || (fromTime > workCalendarDateLine.ToTime))
                            {
                                return DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(transDate,
                                                                          workCalendarDateLine.ToTime),
                                                                          DateTimeUtil::getCompanyTimeZone());
                            }
                        }
                    }
                    transDate--;
                }
            }
        }

        return _fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateTimeForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UTC date and time of the next calendar entry.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDateTime">
    /// The UTC date and time from which to search.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A <c>Boolean</c> value that indicates whether only the open dates should be included in the search;
    /// optional.
    /// </param>
    /// <returns>
    /// The UTC date and time of the next calendar entry.
    /// </returns>
    static utcdatetime findOpenDateTimeForward(DNRCalendarId  _calendarId, utcdatetime _fromDateTime, boolean   _checkIfDateIsOpen = false)
    {
        DNRCalendarDateLine    workCalendarDateLine;

        date                    fromDate  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        timeOfDay               fromTime  = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        date                    transDate = fromDate;

        #define.maxLoops(365)

        if(_calendarId)
        {
            if (((select RecId from  workCalendarDateLine
                               where workCalendarDateLine.CalendarId    == DNRWorkCalendar::defined(_calendarId, transDate)
                                  && workCalendarDateLine.TransDate     == fromDate
                                  && workCalendarDateLine.FromTime      <= fromTime
                                  && workCalendarDateLine.ToTime        >= fromTime).RecId != 0)
               && ( (!_checkIfDateIsOpen) || (DNRCalendarDate::isDateOpen(_calendarId,transDate)) ))
            {
                return _fromDateTime;
            }

            if(_calendarId && DNRCalendarTable::exist(_calendarId))
            {
                while(transDate - fromDate < #maxLoops)
                {
                    if((!_checkIfDateIsOpen) || (DNRCalendarDate::isDateOpen(_calendarId,transDate)))
                    {
                        while select workCalendarDateLine
                        order by FromTime
                        where   workCalendarDateLine.CalendarId       == DNRWorkCalendar::defined(_calendarId, transDate)
                        &&      workCalendarDateLine.TransDate        == transDate

                        {
                            if((transDate != fromDate) || (fromTime < workCalendarDateLine.FromTime))
                            {
                                return DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(transDate, 
                                                                                                    workCalendarDateLine.FromTime),  
                                                                                                    DateTimeUtil::getCompanyTimeZone());
                            }
                        }
                    }
                    transDate++;
                }
            }
        }

        return _fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoActionWorkCalendarTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an action for the Infolog that will open the <c>WorkCalendarTable</c> form for a specific
    /// calendar.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_workCalendarTable">
    /// The <c>WorkCalendarTable</c> record for the calendar ID; optional.
    /// </param>
    /// <returns>
    /// An action for the Infolog.
    /// </returns>
    static SysInfoAction_Formrun infoActionWorkCalendarTable(DNRCalendarId         _calendarId,
                                                             DNRCalendarTable      _workCalendarTable = null) // set this parameter for better performance
    {
        SysInfoAction_Formrun   infoActionWorkCalendarTable;

        //Only create the SysInfoAction_Formrun if we have a client available
        if(xGlobal::hasClient())
        {
            infoActionWorkCalendarTable = SysInfoAction_Formrun::newFormnameControlname(formstr(DNRCalendarTable), identifierstr(DNRCalendarId));
            
            if(!_workCalendarTable)
            {
                _workCalendarTable = DNRCalendarTable::find(_calendarId);
            }

            infoActionWorkCalendarTable.parmCallerBuffer(_workCalendarTable);
        }

        return infoActionWorkCalendarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startWorkTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the start time of the earliest <c>DNRCalendarDateLine</c> record for a given date.
    /// </summary>
    /// <param name="_calendarId">
    ///    The calendar to use.
    /// </param>
    /// <param name="_transDate">
    ///    The date to find the earliest start time for.
    /// </param>
    /// <returns>
    ///    The start time if a <c>DNRCalendarDateLine</c> record is found and the calendar is open;
    ///    otherwise, zero.
    /// </returns>
    public static timeOfDay startWorkTime(DNRCalendarId  _calendarId, SchedDate   _transDate)
    {
        DNRCalendarDateLine    workCalendarDateLine;

        #define.maxLoops(365)

        if (_calendarId &&
            DNRCalendarTable::exist(_calendarId) &&
            DNRCalendarDate::isDateOpen(_calendarId, _transDate))
        {
            select minof(FromTime) from workCalendarDateLine
            where workCalendarDateLine.CalendarId       == DNRWorkCalendar::defined(_calendarId, _transDate)   
            &&    workCalendarDateLine.TransDate        == _transDate;
        }

        return workCalendarDateLine.FromTime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>