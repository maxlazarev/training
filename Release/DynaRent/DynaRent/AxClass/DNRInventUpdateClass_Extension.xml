<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventUpdateClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpdate))]
public final class DNRInventUpdateClass_Extension
{
    private DNRInventUpdateStrategy strategy;

    private boolean         isCompensatingTrans;
    private boolean         doUpdateSubStatus;
    private TransDateTime   formLetterUpdateDateTime;
    private boolean         blockUpdateCompensatingTrans;
    private boolean         isPurchaseArrival;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>persistInventTrans</Name>
				<Source><![CDATA[
    protected void persistInventTrans(InventTrans _inventTrans)
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            BOBRentalTransSyncEvent rentalTransSyncEvent;

            if (_inventTrans.RecId)
            {
                rentalTransSyncEvent = BOBRentalTransSyncEvent::OnUpdated;
            }
            else
            {
                rentalTransSyncEvent = BOBRentalTransSyncEvent::OnInserted;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), rentalTransSyncEvent));

            next persistInventTrans(_inventTrans);

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing...
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimReserveChange</Name>
				<Source><![CDATA[
    protected container updateDimReserveChange(
        InventDim           _toInventDim,
        InventDim           _fromInventDim,
        InventQty           _qtyReserv,
        boolean             _reserveAsPhysical,
        InventTransOriginId _markingRefInventTransOrigin,
        PdsCWInventQty      _cwQty)
    {
        InventQty qtyReservLocal = _qtyReserv;

        // RLAM - We have added an additional OR-clause to the first if-statement of the method.
        // The if succeeds when _qtyReserv <= 0 (among others).
        // We therefore call next with a negative value for _qtyReserv if our condition holds.
        if (this.BOBParmIsCompensatingTrans())
        {
            qtyReservLocal = -1;
        }

        container ret = next updateDimReserveChange(_toInventDim, _fromInventDim, qtyReservLocal, _reserveAsPhysical, _markingRefInventTransOrigin, _cwQty);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimTransferIssueReceipt</Name>
				<Source><![CDATA[
    protected InventQty updateDimTransferIssueReceipt(
        InventMovement      _movementTransfer,
        InventDim           _toInventDim,
        InventDim           _fromInventDim,
        InventQty           _qtyReserv,
        boolean             _reserveAsPhysical,
        PdsCWInventQty      _cwQty)
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean     contextCreatedHere = false;
        InventQty   ret;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));
   
            ret = next updateDimTransferIssueReceipt(_movementTransfer, _toInventDim, _fromInventDim, _qtyReserv, _reserveAsPhysical, _cwQty);

            context.processInventTransRecIds(funcName(), _movementTransfer);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransIssue</Name>
				<Source><![CDATA[
    protected container updateInventTransIssue(InventTrans      _inventTransIssue, 
                                               InventDim        _inventDim, 
                                               InventDim        _inventDimFrom, 
                                               InventQty        _qtyReserv, 
                                               PdsCWInventQty   _cwQty)
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean     contextCreatedHere = false;
        container   ret;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated, _inventTransIssue.RecId));
   
            ret = next updateInventTransIssue(_inventTransIssue, _inventDim, _inventDimFrom, _qtyReserv, _cwQty);

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDimIssue</Name>
				<Source><![CDATA[
    public container updateTransDimIssue(
        InventTrans     _inventTrans,
        InventDim       _fromInventDim,
        InventDim       _toInventDim,
        InventQty       _changeQty,
        boolean         _forceUpdate,
        PdsCWInventQty  _cwQty,
        boolean         _switchDimReservation)
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean     contextCreatedHere = false;
        container   ret;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated, _inventTrans.RecId));
   
            ret = next updateTransDimIssue(_inventTrans, _fromInventDim, _toInventDim, _changeQty, _forceUpdate, _cwQty, _switchDimReservation);

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInventTrans</Name>
				<Source><![CDATA[
    public void writeInventTrans(InventTrans _inventTrans, InventTrans _inventTrans_orig, boolean _physicalUpdate)
    {
        if (_inventTrans.Qty > 0 && _physicalUpdate)
        {
            // Used in /Classes/DNRInventMovementClass_Extension/Methods/BOBUpdateSerialNumber.
            movement.DNRparmAllowInventTransUpdate(this.parmInventUpdateStrategy().BOBAllowInventTransUpdate());
        }

        next writeInventTrans(_inventTrans, _inventTrans_orig, _physicalUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInventTransAutoDim</Name>
				<Source><![CDATA[
    protected void writeInventTransAutoDim(InventTrans _inventTrans, InventTrans _inventTrans_Orig, boolean _physicalUpdate)
    {
        if (this is InventUpd_Estimated && this.BOBParmIsCompensatingTrans())
        {
            _inventTrans.BOBIsCompensatingTrans = NoYes::Yes;
        }

        next writeInventTransAutoDim(_inventTrans, _inventTrans_Orig, _physicalUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBParmBlockUpdateCompensatingTrans</Name>
				<Source><![CDATA[
    public boolean BOBParmBlockUpdateCompensatingTrans(boolean _blockUpdateCompensatingTrans = blockUpdateCompensatingTrans)
    {
        blockUpdateCompensatingTrans = _blockUpdateCompensatingTrans;
        return blockUpdateCompensatingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBParmFormLetterUpdDateTime</Name>
				<Source><![CDATA[
    public TransDateTime BOBParmFormLetterUpdDateTime(TransDate _transDate = dateNull(), BOBTransTime _transTime = 0)
    {
        if (_transDate)
        {
            formLetterUpdateDateTime = DateTimeUtil::newDateTime(_transDate, _transTime, DateTimeUtil::getUserPreferredTimeZone());
        }
    
        return formLetterUpdateDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBParmIsCompensatingTrans</Name>
				<Source><![CDATA[
    public boolean BOBParmIsCompensatingTrans(boolean _isCompensation = isCompensatingTrans)
    {
        isCompensatingTrans = _isCompensation;
        return isCompensatingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUpdateStrategy</Name>
				<Source><![CDATA[
    private DNRInventUpdateStrategy parmInventUpdateStrategy()
    {
        if (!strategy)
        {
            strategy = DNRInventUpdateStrategy::construct(this);
        }

        return strategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>