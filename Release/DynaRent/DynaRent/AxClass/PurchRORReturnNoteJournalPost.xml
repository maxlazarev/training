<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRORReturnNoteJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRORReturnNoteJournalPost
extends FormletterJournalPost
{
    VendRORReturnNoteJour   returnNoteJour;
    VendRORReturnNoteTrans  returnNoteTrans;
    PurchLine               purchLine;
    PurchTable              purchTable;
    PurchParmLine           purchParmLine;
    PurchParmTable          purchParmTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _journalline)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        VendRORReturnNoteTrans  localReturnNoteTrans = _journalline as VendRORReturnNoteTrans;
        InventQty               qtyRemain                 = localReturnNoteTrans.InventQty;
    
        if (purchLine.isStocked())
        {
            while select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId       == localReturnNoteTrans.InventTransId
            && inventTransOrigin.ReferenceCategory   == InventTransType::Purch
                join StatusReceipt, InventDimId, sum(Qty) from inventTrans
                group by StatusReceipt, InventDimId
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                &&    inventTrans.PackingSlipId     == localReturnNoteTrans.ReturnNoteId
                &&    inventTrans.DatePhysical      == localReturnNoteTrans.ReturnDate
            {
                if (qtyRemain)
                {
                    qtyRemain = this.createInventReportDimHistory(localReturnNoteTrans.InventTransId,
                                                                  inventTrans.InventDimId,
                                                                  localReturnNoteTrans.ReturnNoteId,
                                                                  inventTrans.Qty, qtyRemain);
                }
                else
                    break;
            }
        }
        else
        {
            this.createInventReportDimHistory(localReturnNoteTrans.InventTransId,
                                              localReturnNoteTrans.InventDimId,
                                              localReturnNoteTrans.ReturnNoteId,
                                              localReturnNoteTrans.Qty,
                                              localReturnNoteTrans.Qty );
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReturnBeforePosting</Name>
				<Source><![CDATA[
    private void checkReturnBeforePosting()
    {
        if (purchParmLine.RemainBefore != purchLine.RORRemainPurchReturn)
        {
            throw error("@SYS23025");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSourceLine</Name>
				<Source><![CDATA[
    protected void checkSourceLine()
    {
        super();
    
        this.checkReturnBeforePosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLines</Name>
				<Source><![CDATA[
    protected void endLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    protected void endPostLine()
    {
        PurchLine           purchLineFind;
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderLine    workOrderLine;
        WPPParameters       parameters;
    
        select firstOnly RecId from purchLineFind
        where purchLineFind.PurchId == purchParmTable.PurchId
            exists join workOrderTable
                where workOrderTable.OrderTableId == purchLineFind.TableId
                &&    workOrderTable.OrderRecId   == purchLineFind.RecId
                    join TableId from workOrderLine
                    where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                        join TableId from parameters
                        where parameters.InternalDeliveryTaskId == workOrderLine.TaskId;
    
        if (!workOrderTable.RecId)
        {
            BOBObjectManager::returnPurchLine(purchParmLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return returnNoteJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
    
        purchTable = PurchTable::find(returnNoteJour.PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        super();
    
        purchLine = returnNoteTrans.purchLine(true);
    
        this.initRelatedParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedParmLine</Name>
				<Source><![CDATA[
    protected void initRelatedParmLine()
    {
        select purchParmLine
        where purchParmLine.ParmId                 == returnNoteJour.ParmId
        &&    purchParmLine.TableRefId             == purchParmTable.TableRefId
        &&    purchParmLine.PurchaseLineLineNumber == purchLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReportDimHistoryLogType</Name>
				<Source><![CDATA[
    protected InventReportDimHistoryLogType inventReportDimHistoryLogType()
    {
        return InventReportDimHistoryLogType::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = returnNoteTrans)
    {
        returnNoteTrans = _journalLine as VendRORReturnNoteTrans;
        return returnNoteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected tableId journalLineTableId()
    {
        return tableNum(VendRORReturnNoteTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = returnNoteJour)
    {
        returnNoteJour = _journalTable as VendRORReturnNoteJour;
        return returnNoteJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;
        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    protected void postInventory()
    {
        InventMovement inventMovement = InventMovement::construct(purchLine);
    
        InventUpd_RORReturnNote inventUpdate = InventUpd_RORReturnNote::construct(inventMovement, purchParmLine, BOBRentalSubStatus::Returned, -inventMovement.transSign());
        inventUpdate.BOBParmFormLetterUpdDateTime(purchParmTable.TransDate, purchParmTable.BOBTransTime);
        inventUpdate.updateNow(ledgerVoucher);
    
        inventMovement = InventMovement::construct(purchLine, InventMovSubType::BOBCompensatingTrans);
    
        inventUpdate = InventUpd_RORReturnNote::construct(inventMovement, purchParmLine, BOBRentalSubStatus::Returned, -inventMovement.transSign());
        inventUpdate.BOBParmIsCompensatingTrans(true);
        inventUpdate.updateNow(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormletterJournalTrans</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method")]
    protected void selectFormletterJournalTrans()
    {
        select forupdate formletterJournalTrans
        where formletterJournalTrans.JournalId           == formletterJournal.JournalId
        &&    formletterJournalTrans.InternalJournalId   == formletterJournal.InternalJournalId
        &&    formletterJournalTrans.OrderId             == formletterJournal.OrderId
        &&    formletterJournalTrans.TransDate           == formletterJournal.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    protected Common sourceLine()
    {
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt  transactionLogTxt()
    {
        return "@DNR6220";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType transactionLogType()
    {
        return TransactionLogType::RORRentalReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return returnNoteJour.ReturnDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    protected void updateJournalLine()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalDates</Name>
				<Source><![CDATA[
    private void updateRentalDates(PurchLine _purchLine)
    {
        if(FINRentalInvoiceProfile::find(_purchLine.INVInvoiceProfileId).InvoiceStartEndBasis == INVInvoiceStartEndBasis::DeliveryReturn
        && !_purchLine.RORRemainPurchReturn && !_purchLine.RemainPurchPhysical)
        {
            RORRentalDateTimes rentalDateTimes = _purchLine.RORRentalDateTimes(true);
    
            if(rentalDateTimes)
            {
                FieldId fieldId = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd());
    
                if(DateTimeUtil::date(rentalDateTimes.(fieldId)) <= dateNull())
                {
                    using (DNRPrimitiveDisposableContext context = new DNRPrimitiveDisposableContext())
                    {
                        context.DNRparmBoolean(true);

                        rentalDateTimes.(fieldId) = DateTimeUtil::newDateTime(purchParmTable.TransDate, purchParmTable.BOBTransTime, DateTimeUtil::getUserPreferredTimeZone());
                        rentalDateTimes.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected void updateSourceLine()
    {
        // Remove to qty awaiting return and add to returned
        purchLine.RORRemainInventReturn -= purchParmLine.ReceiveNow;
        purchLine.RORRemainPurchReturn  -= purchParmLine.InventNow;
        purchLine.RORPurchReturned      += purchParmLine.ReceiveNow;
        purchLine.RORInventReturned     += purchParmLine.InventNow;
    
        InventMovement inventMovement = InventMovement::construct(purchLine);
    
        PurchLineType purchLineType = PurchLineType::construct(purchLine);
        purchLineType.updatePurchLine(inventMovement.transIdSum());
        purchLine.doUpdate();

        purchTable = purchLine.purchTable(true);
        purchTable.updateBackStatus();
    
        this.updateRentalDates(purchLine);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPMustDuplicateTask</Name>
				<Source><![CDATA[
    public void WPPMustDuplicateTask()
    {
        if (!this.WPPParmMustDuplicateWorkOrderLine()
        &&   purchParmTable.WPPDuplTaskOnPartialFormLetterPosting
        &&   chainFormletterContract.WPPParmMustDuplicateTask())
        {
            this.WPPParmMustDuplicateWorkOrderLine(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRORReturnNoteJournalPost construct()
    {
        return new PurchRORReturnNoteJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmLine</Name>
				<Source><![CDATA[
    public PurchParmLine purchParmLine()
    {
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    public PurchLine purchLine()
    {
        return purchLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>