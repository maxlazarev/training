<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNREventInventProductSiteSpecificOrderSettingsEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNREventInventProductSiteSpecificOrderSettingsEntity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(InventProductSiteSpecificOrderSettingsEntity), tableMethodStr(InventProductSiteSpecificOrderSettingsEntity, mapEntityToDataSource))]
    public static void mapEntityToDataSource_pre(XppPrePostArgs _eventArgs)
    {
        InventProductSiteSpecificOrderSettingsEntity    hostObject          = _eventArgs.getThis() as InventProductSiteSpecificOrderSettingsEntity;
        DataEntityDataSourceRuntimeContext              parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;
        const int siteSequenceNumber = 10;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORSubRentalDefaultInventDim):
                parmDataSourceCtx.setBuffer(DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORSubRentalInventSiteId));
                break;

            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORRentalDefaultInventDim):
                parmDataSourceCtx.setBuffer(DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORRentalInventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(InventProductSiteSpecificOrderSettingsEntity), tableMethodStr(InventProductSiteSpecificOrderSettingsEntity, mapEntityToDataSource))]
    public static void mapEntityToDataSource_post(XppPrePostArgs _eventArgs)
    {
        InventProductSiteSpecificOrderSettingsEntity    hostObject          = _eventArgs.getThis() as InventProductSiteSpecificOrderSettingsEntity;
        DataEntityRuntimeContext                        parmEntityCtx       = _eventArgs.getArg('_entityCtx') as DataEntityRuntimeContext;
        DataEntityDataSourceRuntimeContext              parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;
        const int siteSequenceNumber = 10;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORSubRentalDefaultInventDim):
                parmDataSourceCtx.setBuffer(DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORSubRentalInventSiteId));
                break;

            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORRentalDefaultInventDim):
                parmDataSourceCtx.setBuffer(DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORRentalInventSiteId));
                break;

            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORInventItemSubRentalSetup):
                RORInventItemSubRentalSetup inventItemSubRentalSetup = parmDataSourceCtx.getBuffer();
                if(parmEntityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || parmEntityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    inventItemSubRentalSetup.ItemId      = hostObject.ItemNumber;
                    inventItemSubRentalSetup.InventDimId = DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORRentalInventSiteId).InventDimId;
                    inventItemSubRentalSetup.Sequence = siteSequenceNumber;
                }
                break;

            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORInventItemRentalSetup):
                RORInventItemRentalSetup inventItemRentalSetup = parmDataSourceCtx.getBuffer();
                if(parmEntityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || parmEntityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    inventItemRentalSetup.ItemId      = hostObject.ItemNumber;
                    inventItemRentalSetup.InventDimId = DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORRentalInventSiteId).InventDimId;
                    inventItemRentalSetup.Sequence = siteSequenceNumber;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(InventProductSiteSpecificOrderSettingsEntity), tableMethodStr(InventProductSiteSpecificOrderSettingsEntity, insertEntityDataSource))]
    public static void insertEntityDataSource_pre(XppPrePostArgs _eventArgs)
    {
        InventProductSiteSpecificOrderSettingsEntity    hostObject          = _eventArgs.getThis() as InventProductSiteSpecificOrderSettingsEntity;
        DataEntityDataSourceRuntimeContext              parmDataSourceCtx   = _eventArgs.getArg('_dataSourceCtx') as DataEntityDataSourceRuntimeContext;

        switch(parmDataSourceCtx.name())
        {
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORInventItemSubRentalSetup):
                RORInventItemSubRentalSetup subRentalSetup = parmDataSourceCtx.getBuffer();
                subRentalSetup.ItemId = hostObject.ItemNumber;

                if (hostObject.RORSubRentalInventSiteId)
                {
                    InventDim inventDimSubRental;
                    inventDimSubRental.clear();
                    inventDimSubRental.InventSiteId = hostObject.RORSubRentalInventSiteId;
                    subRentalSetup.InventDimId = InventDim::findOrCreate(inventDimSubRental).inventDimId;
                }
                else
                {
                    subRentalSetup.InventDimId = InventDim::findOrCreateBlank().inventDimId;
                }

                subRentalSetup.Sequence = 10;
                parmDataSourceCtx.setBuffer(subRentalSetup);
                break;

            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORInventItemRentalSetup):
                RORInventItemRentalSetup rentalSetup = parmDataSourceCtx.getBuffer();
                rentalSetup.ItemId = hostObject.ItemNumber;

                if (hostObject.RORRentalInventSiteId)
                {
                    InventDim inventDimRental;
                    inventDimRental.clear();
                    inventDimRental.InventSiteId = hostObject.RORRentalInventSiteId;
                    rentalSetup.InventDimId = InventDim::findOrCreate(inventDimRental).inventDimId;
                }
                else
                {
                    rentalSetup.InventDimId = InventDim::findOrCreateBlank().inventDimId;
                }

                rentalSetup.Sequence = 10;
                parmDataSourceCtx.setBuffer(rentalSetup);
                break;

            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORSubRentalDefaultInventDim):
                parmDataSourceCtx.setBuffer(DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORRentalInventSiteId));
                break;

            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, RORRentalDefaultInventDim):
                parmDataSourceCtx.setBuffer(DNREventInventProductSiteSpecificOrderSettingsEntity::getOrCreateSiteDim(hostObject.RORRentalInventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateSiteDim</Name>
				<Source><![CDATA[
    public static InventDim getOrCreateSiteDim(InventSiteId _inventSiteId)
    {
        InventDim inventDim;
        inventDim.InventSiteId = _inventSiteId;
        inventDim = InventDim::findOrCreate(inventDim);

        //FieldState is set to 'Set' to avoid the framework in thinking that the mandatory field site is not set by the user.
        inventDim.fieldState(fieldNum(InventDim, InventSiteId), FieldState::Set);
        return inventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>