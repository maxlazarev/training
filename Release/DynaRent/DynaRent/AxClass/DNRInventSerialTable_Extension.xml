<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventSerialTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventSerial))]
public final class DNRInventSerialTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BOBFindByInventSerialId</Name>
				<Source><![CDATA[
    public static InventSerial BOBFindByInventSerialId(InventSerialId _inventSerialId, boolean _forUpdate = false)
    {
        InventSerial    inventSerial;
        EcoResProduct   ecoResProduct;
        InventTable     inventTable;
        ;
    
        if(_inventSerialId)
        {
            if(_forUpdate)
            {
                inventSerial.selectForUpdate(true);
            }
    
            // find the InventSerial related to a rental item
            // as the same SerialId could be assigned to a non rental item
            select firstonly inventSerial
            where inventSerial.InventSerialId == _inventSerialId
                join TableId from inventTable
                where inventTable.ItemId == inventSerial.ItemId
                join TableId from ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
                &&    ecoResProduct.BOBRentalTypeId;
        }
    
        return inventSerial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBlookupInventSerialId</Name>
				<Source><![CDATA[
    public static void BOBlookupInventSerialId(FormStringControl _ctrl)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        SysTableLookup          sysTableLookup;
    
        query = new Query();
        qbds = query.addDataSource(tableNum(InventSerial));
    
        sysTableLookup = SysTableLookup::newParameters(tableNum(InventSerial), _ctrl);
        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(InventSerial, InventSerialId));
        sysTableLookup.addLookupfield(fieldNum(InventSerial, ProdDate));
    
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBFindOrCreateSerialNumber</Name>
				<Source><![CDATA[
    public static InventSerial BOBFindOrCreateSerialNumber(BOBRentalTypeId _rentalType, InventSerialId _serialId, boolean _forUpdate = false)
    {
        InventSerial inventSerial;

        inventSerial.selectForUpdate(_forUpdate);

        if (_rentalType && _serialId)
        {
            InventTable inventTable = InventTable::BOBFindFromRentalType(_rentalType);
            
            if (inventTable.ItemId)
            {
                // Find the InventSerial Record related to the Primary Product of the Rental Type
                inventSerial = InventSerial::find(_serialId, inventTable.ItemId);
                   
                if (!inventSerial)
                {
                    // If the Serial Number does not exist in the current company , create one now
                    inventSerial.ItemId                 = inventTable.ItemId;
                    inventSerial.InventSerialId         = _serialId;
                    inventSerial.BOBSkipObjectCreation  = (BOBObjectTable::findInventSerialId(_serialId).RecId != 0);

                    if (inventSerial.validateWrite())
                    {
                        inventSerial.insert();
                    }
                    // Throw a stopping error, if validation fails
                    else
                    {
                        throw error("@DNR10167");
                    }
                }
            }
            else
            {
                throw error(strFmt("@DNR10168", _rentalType));
            }
        }

        return inventSerial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnDeleting</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(InventSerial), DataEventType::Deleting)]
    public static void DNREvent_OnDeleting(Common _sender, DataEventArgs _eventArgs)
    {
        BOBObjectTable  objectTable;
        InventSerial    hostObject = _sender as InventSerial;
    
        // This is where we begin our tts block. The 'ttscommit' statement is in the 'onDeleted' event handler.
        // We want our code, including the call to 'super', to be in one tts block.
        ttsbegin;
    
        //This is a validation to ensure data integrity, which is why we have it in delete(), not only validateDelete()
        select firstOnly objectTable
        where objectTable.InventSerialId == hostObject.InventSerialId;
    
        if (objectTable)
        {
            if (BOBObjectManager::validateDelete(objectTable, true))
            {
                BOBObjectManager::delete(objectTable);
            }
            else
            {
                throw error("@DNR8638");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSerial), DataEventType::Deleted)]
    public static void DNREvent_OnDeleted(Common _sender, DataEventArgs _eventArgs)
    {
        // This is where we end our tts block. The 'ttsbegin' statement is in the 'onDeleting' event handler.
        // We want our code, including the call to 'super', to be in one tts block.
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSerial), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        InventSerial hostObject = _sender as InventSerial;
        
        BOBInventSerialValidator    inventSerialValidator = BOBInventSerialValidator::construct(hostObject);
        
        if(!inventSerialValidator.validate())
        {
            throw error("@DNR10170");
        }
        
        // This is where we begin our tts block. The 'ttscommit' statement is in the 'onInserted' event handler.
        // We want our code, including the call to 'super', to be in one tts block.
        ttsbegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSerial), DataEventType::Inserted)]
    public static void DNREvent_OnInserted(Common _sender, DataEventArgs _eventArgs)
    {
        InventSerial hostObject = _sender as InventSerial;
        
        // FINDimValueController is going to reread the buffer, thereby resetting 
        // the BOBSkipObjectCreation field. So we want to read it out before that
        boolean mustSkipObjectCreation = hostObject.BOBSkipObjectCreation; 

        FINDimValueController::eventInsert(hostObject);
    
        if(!mustSkipObjectCreation)
        {
            BOBRentalType rentalType = BOBRentalType::findFromItemId(hostObject.ItemId);

            if(rentalType && rentalType.Classification == BOBRentalTypeClassification::Serialized)
            {
                BOBObjectManager::newPendingObject(hostObject.InventSerialId, hostObject.ItemId, '');
            }
        }

        // This is where we end our tts block. The 'ttsbegin' statement is in the 'onInserting' event handler.
        // We want our code, including the call to 'super', to be in one tts block.
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_onValidatedWrite</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSerial), DataEventType::ValidatedWrite)]
    public static void DNREvent_onValidatedWrite(Common _sender, DataEventArgs _eventArgs)
    {
        InventSerial                hostObject = _sender as InventSerial;
        ValidateEventArgs           eventArgs = _eventArgs as ValidateEventArgs;
        BOBInventSerialValidator    inventSerialValidator = BOBInventSerialValidator::construct(hostObject);

        if(!inventSerialValidator.validate())
        {
            eventArgs.parmValidateResult(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>