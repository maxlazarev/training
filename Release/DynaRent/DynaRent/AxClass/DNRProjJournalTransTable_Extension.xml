<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjJournalTransTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProjJournalTrans))]
public final class DNRProjJournalTransTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        next initValue();
        this.DNRSetWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAdjustment</Name>
				<Source><![CDATA[
    public void initFromAdjustment(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate)
    {
        next initFromAdjustment(_tmpProjAdjustmentCreate);

        this.FromTime       = _tmpProjAdjustmentCreate.WPPFromTime;
        this.ToTime         = _tmpProjAdjustmentCreate.WPPToTime;
        this.WPPBreakQty    = _tmpProjAdjustmentCreate.WPPBreakQty;
        this.WPPResourceId  = _tmpProjAdjustmentCreate.WPPResourceId;

        if (_tmpProjAdjustmentCreate.WPPTmpJournalType == ProjJournalType::Hour)
        {
            if(_tmpProjAdjustmentCreate.WPPTmpResourceId)
            {
                this.WPPResourceId = _tmpProjAdjustmentCreate.WPPResourceId ? _tmpProjAdjustmentCreate.WPPResourceId : _tmpProjAdjustmentCreate.WPPTmpResourceId;
            }
    
            if (_tmpProjAdjustmentCreate.WPPTmpKeepAdjHourJournal)
            {
                this.WPPCheckedBy = curUserId();
                this.WPPCheckDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjJournalTrans</Name>
				<Source><![CDATA[
    public void initFromProjJournalTrans(ProjJournalTrans _projJournalTrans)
    {
        ProjJournalId   tmpJournalId    = this.JournalId;
        LineNum         tmpLineNum      = this.LineNum;
        Voucher         tmpVoucher      = this.Voucher;

        next initFromProjJournalTrans(_projJournalTrans);

        if (!this.RORCopyAll)
        {
            this.JournalId  = tmpJournalId;
            this.LineNum    = tmpLineNum;
            this.Voucher    = tmpVoucher;
            this.TransId    = '';
        }

        this.RORCopyAll = NoYes::Yes;

        this.FINInitFromProjJournalTrans(_projJournalTrans);
        this.INVInitFromProjJournalTrans(_projJournalTrans);
        this.RORInitFromProjJournalTrans(_projJournalTrans);
        this.WPPInitFromProjJournalTrans(_projJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjJournalTrans, ProjId):
                this.WPPCheckDate = dateNull();
                this.WPPCheckedBy = '';
                break;
    
            case fieldNum(ProjJournalTrans, TransDate):
                this.WPPCheckDate = dateNull();
                this.WPPCheckedBy = '';
                break;
    
            case fieldNum(ProjJournalTrans, Resource):
                this.WPPCheckDate = dateNull();
                this.WPPCheckedBy = '';
                break;
    
            case fieldNum(ProjJournalTrans, CategoryId):
                this.WPPCheckDate = dateNull();
                this.WPPCheckedBy = '';
                break;
    
            case fieldNum(ProjJournalTrans, FromTime):
                this.WPPCheckDate = dateNull();
                this.WPPCheckedBy = '';
                this.setHourCostPrice();
                this.setHourSalesPrice();
                break;
    
            case fieldNum(ProjJournalTrans, ToTime):
                this.WPPCheckDate = dateNull();
                this.WPPCheckedBy = '';
                this.setHourCostPrice();
                this.setHourSalesPrice();
                break;
    
            case fieldNum(ProjJournalTrans, WPPBreakQty):
                this.WPPCheckDate = dateNull();
                this.WPPCheckedBy = '';
                this.setHourCostPrice();
                this.setHourSalesPrice();
                break;

            case fieldNum(ProjJournalTrans, RORBothRentalSubRental):
                this.INVRefTableId = (this.RORBothRentalSubRental == RORBothRentalSubRental::SubRental ? tableNum(PurchLine) : tableNum(SalesLine));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory()
    {
        ProjJournalTable    projJournalTable = ProjJournalTable::find(this.JournalId);
        
        if (projJournalTable && projJournalTable.JournalType == ProjJournalType::Hour && this.Resource)
        {
            // Copy to line only resource that is active worker
            ResourceView    resourceView;
            HCMEmployment   emplyment;
            TransDateTime   validationFromTo = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 0, DateTimeUtil::getUserPreferredTimeZone());
            
            select firstonly RecId from resourceView
                where resourceView.RecId == this.Resource
                &&    resourceView.Type == WrkCtrType::Personnel
                    exists join emplyment
                        where emplyment.Worker == resourceView.Worker
                        &&    emplyment.ValidFrom <= validationFromTo
                        &&    emplyment.ValidTo >= validationFromTo;

            if (!resourceView)
            {
                this.Resource = this.orig().Resource;
            }
        }

        next setResourceCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourCostPrice</Name>
				<Source><![CDATA[
    public void setHourCostPrice()
    {
        next setHourCostPrice();

        if (this.ProjId
        &&  this.WPPLinkToTransactionLines())
        {
            this.CostPrice = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourPrices</Name>
				<Source><![CDATA[
    public boolean setHourPrices()
    {
        ProjCostPriceCost   tmpCostPrice    = this.CostPrice;
        ProjSalesPriceCost  tmpSalesPrice   = this.SalesPrice;

        boolean ret = next setHourPrices();

        if (this.WPPSkipPriceUpdate)
        {
            this.CostPrice  = tmpCostPrice;
            this.SalesPrice = tmpSalesPrice;

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHourSalesPrice</Name>
				<Source><![CDATA[
    public boolean setHourSalesPrice()
    {
        ProjSalesPriceCost localSalesPrice = this.SalesPrice;

        next setHourSalesPrice();

        boolean priceFound = false;

        this.SalesPrice = localSalesPrice;

        priceFound = this.WPPCalculateSalesPrice();
    
        if (!priceFound)
        {
            [this.SalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                                                                                                        this.ProjId,
                                                                                                        this.Resource,
                                                                                                        this.CategoryId,
                                                                                                        this.LinePropertyId,
                                                                                                        this.CostPrice,
                                                                                                        this.CurrencyId,
                                                                                                        this.ProjTransDate,
                                                                                                        this.ProjPriceGroupID,
                                                                                                        '',
                                                                                                        '',
                                                                                                        this.ResourceCategory));
        }

        return (priceFound || this.RORCalculateSalesPrice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyFromToTime</Name>
				<Source><![CDATA[
    public void setQtyFromToTime()
    {
        #TimeConstants

        next setQtyFromToTime();

        FromTime    fromTime    = this.FromTime;
        ToTime      toTime      = this.ToTime;
        WPPBreakQty breakQty    = this.WPPBreakQty;

        this.Qty = ((toTime - fromTime) / #SecondsPerHour) - breakQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayFleetNumber</Name>
				<Source><![CDATA[
    // extension methods

    [SysClientCacheDataMethodAttribute(true)]
    display BOBFleetNumber BOBDisplayFleetNumber()
    {
        BOBObjectTable      objectTable;
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderLine    workOrderLine;
    
        select firstOnly FleetNumber from objectTable
            exists join workOrderTable
            where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                join TableId from workOrderLine
                where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                &&    workOrderLine.ProjId      == this.ProjId;
    
        return objectTable.FleetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromProjJournalTrans</Name>
				<Source><![CDATA[
    private void FINInitFromProjJournalTrans(ProjJournalTrans _projJournalTransOrig)
    {
        this.FINIgnoreTaxMatrix = _projJournalTransOrig.FINIgnoreTaxMatrix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSetTaxGroup</Name>
				<Source><![CDATA[
    public void FINSetTaxGroup()
    {
        if (!this.FINIgnoreTaxMatrix
        &&  TaxParameters::find().FINCheckTaxMatrix != FINCheckTaxMatrix::Disabled)
        {
            this.TaxGroupId = FINTaxMatrix::findTaxGroup(this, this.TaxGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVInitFromProjJournalTrans</Name>
				<Source><![CDATA[
    private void INVInitFromProjJournalTrans(ProjJournalTrans _projJournalTransOrig)
    {
        this.INVRefTableId = _projJournalTransOrig.INVRefTableId;
        this.INVRefRecId   = _projJournalTransOrig.INVRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCalculateSalesPrice</Name>
				<Source><![CDATA[
    public boolean RORCalculateSalesPrice()
    {
        SalesLine               salesLine;
        RAGTmpContractLine      tmpContractLine;
        WPPWorkType             workType;
        RAGContractDataParm contractDataParm;
        RAGContractData contractData;
           
        workType = ProjCategory::find(this.CategoryId).WPPWorkType;
    
        if (this.ProjId)
        {
            if (this.INVRefTableId == tableNum(SalesLine) && this.INVRefRecId)
            {
                salesLine = SalesLine::findRecId(this.INVRefRecId);
            }
    
            if (salesLine)
            {
                this.CurrencyId         = salesLine.CurrencyCode;
                this.LinePropertyId     = salesLine.ProjLinePropertyId;
                this.TaxGroupId         = salesLine.TaxGroup;
                this.TaxItemGroupId     = salesLine.TaxItemGroup;
            }

            if (salesLine && workType)
            {
                if (workType == WPPWorkType::Hoisting)
                {
                    this.SalesPrice             = salesLine.RORRentalLine::editNetAmount(false, 0);
                    this.RORLinePercent         = salesLine.LinePercent;
                    this.RORIsPriceNet          = salesLine.RORIsPriceNet;
                    this.RORRentalGrossAmount   = salesLine.RORRentalGrossAmount;
                }
                else
                {
                    
                    switch (workType)
                    {
                        case WPPWorkType::Transport:
                            this.SalesPrice = tmpContractLine.Transport_UseRentalTypePrice? salesLine.RORRentalLine::editNetAmount(false, 0) : tmpContractLine.Transport_Price;
                            break;
                        case WPPWorkType::ReturnTransport:
                            this.SalesPrice = tmpContractLine.ReturnTransport_UseRentalTypePrice? salesLine.RORRentalLine::editNetAmount(false, 0) : tmpContractLine.ReturnTransport_Price;
                            break;
                        case WPPWorkType::Rigging:
                            this.SalesPrice = tmpContractLine.Rigging_UseRentalTypePrice ? salesLine.RORRentalLine::editNetAmount(false, 0) : tmpContractLine.Rigging_Price;
                            break;
                    }
                }
            }
            // if no workType then use std ax sales price
            else
            {
                salesLine = null;
            }
        }
    
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromProjJournalTrans</Name>
				<Source><![CDATA[
    private void RORInitFromProjJournalTrans(ProjJournalTrans _projJournalTransOrig)
    {
        this.RORBothRentalSubRental = _projJournalTransOrig.RORBothRentalSubRental;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPInitFromProjJournalTrans</Name>
				<Source><![CDATA[
    private void WPPInitFromProjJournalTrans(ProjJournalTrans _projJournalTransOrig)
    {
        this.WPPBreakQty    = _projJournalTransOrig.WPPBreakQty;
        this.WPPInvoiceId   = _projJournalTransOrig.WPPInvoiceId;
        this.WPPResourceId  = _projJournalTransOrig.WPPResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCalculateSalesPrice</Name>
				<Source><![CDATA[
    public boolean WPPCalculateSalesPrice()
    {
        SalesLine               salesLine;
        RAGTmpContractLine      tmpContractLine;
        WPPWorkType             workType;
        RAGContractDataParm contractDataParm;
        RAGContractData contractData;
           
        workType = ProjCategory::find(this.CategoryId).WPPWorkType;
    
        // if no workType then use std ax sales price
        if (workType && this.ProjId)
        {
            if (this.INVRefTableId == tableNum(SalesLine) && this.INVRefRecId)
            {
                salesLine = SalesLine::findRecId(this.INVRefRecId);
            }
    
            if (salesLine)
            {
                if (workType == WPPWorkType::Hoisting)
                {
                    this.CurrencyId             = salesLine.CurrencyCode;
                    this.SalesPrice             = salesLine.RORRentalLine::editNetAmount(false, 0);
                    this.LinePropertyId         = salesLine.ProjLinePropertyId;
                    this.TaxGroupId             = salesLine.TaxGroup;
                    this.TaxItemGroupId         = salesLine.TaxItemGroup;
                }
                else //probably not needed anymore due to use additional lines connected to salesline!!!!
                {
                    //tmpContractLine = RAGTmpContractLine::getFromRentalLine(salesLine);
                    contractDataParm.initFromRentalLine(salesLine);
                    contractData = new RAGContractData();
                    contractData.parmDataParm(contractDataParm);
                    contractData.populateData();
                    tmpContractLine.linkPhysicalTableInstance(contractData.getContractLineTmpTable());

                    switch (workType)
                    {
                        case WPPWorkType::Transport:
                            this.SalesPrice = tmpContractLine.Transport_UseRentalTypePrice? salesLine.RORRentalLine::editNetAmount(false, 0) : tmpContractLine.Transport_Price;
                            break;
                        case WPPWorkType::ReturnTransport:
                            this.SalesPrice = tmpContractLine.ReturnTransport_UseRentalTypePrice? salesLine.RORRentalLine::editNetAmount(false, 0) : tmpContractLine.ReturnTransport_Price;
                            break;
                        case WPPWorkType::Rigging:
                            this.SalesPrice = tmpContractLine.Rigging_UseRentalTypePrice ? salesLine.RORRentalLine::editNetAmount(false, 0) : tmpContractLine.Rigging_Price;
                            break;
                    }
                }
            }
        }
    
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCalcTotalHours</Name>
				<Source><![CDATA[
    public static server Qty WPPCalcTotalHours(ProjWorkerRecId  _worker,
                                               FromDate         _fromDate,
                                               ToDate           _toDate)
    {
        ProjJournalTrans    projJournalTrans;
    
        select sum(Qty), sum(WPPBreakQty) from projJournalTrans
        where (!_worker || projJournalTrans.Worker == _worker)
        &&    projJournalTrans.ProjTransDate >= _fromDate
        &&    projJournalTrans.ProjTransDate <= _toDate;
    
        return projJournalTrans.Qty - projJournalTrans.WPPBreakQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCalcTotalWorkingHours</Name>
				<Source><![CDATA[
    public static server Qty WPPCalcTotalWorkingHours(ProjWorkerRecId   _worker,
                                                      FromDate          _fromDate,
                                                      ToDate            _toDate)
    {
        ProjJournalTrans    projJournalTrans;
        ProjCategory        projCategory;
    
        select sum(Qty) from projJournalTrans
        where (!_worker || projJournalTrans.Worker == _worker)
        &&    projJournalTrans.ProjTransDate      >= _fromDate
        &&    projJournalTrans.ProjTransDate      <= _toDate
            exists join projCategory
            where projCategory.CategoryId == projJournalTrans.CategoryId
            &&    projCategory.WPPIsWorkingHour;
    
        return projJournalTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCreateWorkOrderLineHourTrans</Name>
				<Source><![CDATA[
    public void WPPCreateWorkOrderLineHourTrans(WPPWorkOrderLineRecId _workOrderLineRecId = 0)
    {
        WPPWorkOrderLineHourTransLink workOrderLineHourTransLinkOrig, workOrderLineHourTransLinkNew;
    
        if (!WPPWorkOrderLineHourTransLink::existReference(this.TableId, this.RecId))
        {
            workOrderLineHourTransLinkNew.initFromProjJournalTrans(this);
    
            if (_workOrderLineRecId)
            {
                workOrderLineHourTransLinkNew.WorkOrderLineRecId = _workOrderLineRecId;
            }
            else
            {
                // Select the original link record
                workOrderLineHourTransLinkOrig = WPPWorkOrderLineHourTransLink::findOriginalTransLinkFromJournalTrans(this.JournalId, this.RecId);
    
                // If an original exists then create a new one for the new line
                if (workOrderLineHourTransLinkOrig)
                {
                    workOrderLineHourTransLinkNew.WorkOrderLineRecId = workOrderLineHourTransLinkOrig.WorkOrderLineRecId;
                }
            }
    
            workOrderLineHourTransLinkNew.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPDefaultProjCategory</Name>
				<Source><![CDATA[
    public ProjCategoryId WPPDefaultProjCategory(WPPWorkOrderTaskId     _taskId,
                                                 WPPWorkOrderLineRecId  _workOrderLineRecId)
    {
        SalesLine                   salesLine;
        ProjCategoryId              projCategoryId;
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
    
        if (this.ProjId && _taskId)
        {
            salesLine = salesLine::WPPSalesLineFromWorkOrderLine(_workOrderLineRecId);
    
            if (salesLine && salesLine.WPPWorkOrderTemplateId)
            {
                select firstOnly ProjCategoryIdDefault from workOrderTemplateLine
                where workOrderTemplateLine.TemplateId == salesLine.WPPWorkOrderTemplateId
                &&    workOrderTemplateLine.TaskId == _taskId;
    
                projCategoryId = workOrderTemplateLine.ProjCategoryIdDefault;
            }
        }
    
        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPDisplayAssetId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display AssetId WPPDisplayAssetId()
    {
        BOBObjectTable      objectTable;
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderLine    workOrderLine;
    
        select firstOnly objectTable
            exists join workOrderTable
            where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                join TableId from workOrderLine
                where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                &&    workOrderLine.ProjId      == this.ProjId;
    
        return objectTable.assetId(this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPGetCostPriceFromItem</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2022. Method WPPGetCostPriceFromItem has been deprecated")]
    public CostPrice WPPGetCostPriceFromItem(ItemId _itemId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPLinkToTransactionLines</Name>
				<Source><![CDATA[
    public boolean WPPLinkToTransactionLines()
    {
        return WPPWorkOrderLineHourTransLink::existReference(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPSalesLineFromJournalTrans</Name>
				<Source><![CDATA[
    public SalesLine WPPSalesLineFromJournalTrans()
    {
        SalesLine                       salesLine;
        WPPWorkOrderTable               workOrderTable;
        WPPWorkOrderLine                workOrderLine;
        WPPWorkOrderLineHourTransLink   workOrderLineHourTransLink;
    
        if (this.RecId)
        {
            select firstOnly salesLine
                exists join workOrderTable
                where workOrderTable.OrderTableId == salesLine.TableId
                &&    workOrderTable.OrderRecId == salesLine.RecId
                    join RecId from workOrderLine
                    where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                        join TableId from workOrderLineHourTransLink
                        where workOrderLineHourTransLink.WorkOrderLineRecId == workOrderLine.RecId
                        &&    workOrderLineHourTransLink.RefTableId == this.TableId
                        &&    workOrderLineHourTransLink.RefRecId   == this.RecId;
        }
    
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPDisplayWorkOrderId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display WPPWorkOrderId WPPDisplayWorkOrderId()
    {
        return WPPWorkOrderLine::findProjId(this.ProjId).WorkOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPDisplayWorkOrderTaskId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display WPPWorkOrderTaskId WPPDisplayWorkOrderTaskId()
    {
        return WPPWorkOrderLine::findProjId(this.ProjId).TaskId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORClearRefTableId</Name>
				<Source><![CDATA[
    private void RORClearRefTableId()
    {
        if (this.INVRefTableId && !this.INVRefRecId)
        {
            this.INVRefTableId = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRSetWorker</Name>
				<Source><![CDATA[
    public void DNRSetWorker()
    {
        HcmWorkerRecId defaultWorkerRecId = WPPParameters::find().DefaultHourJourWorker;
        
        if(defaultWorkerRecId)
        {
            ResourceView resourceView;
            select firstonly RecId from resourceView where resourceView.Worker == defaultWorkerRecId;

            this.Resource = resourceView.RecId;

            WPPResourceTable resourceTable = WPPResourceTable::find(this.WPPResourceId);
            HcmWorker worker = HcmWorker::findByPersonnelNumber(resourceTable.RelationAccount);

            if(worker)
            {
                select firstonly RecId from resourceView
                where resourceView.Worker == worker.RecId
                &&    resourceView.ResourceCompanyId == curExt();

                if(resourceView)
                {
                    this.Resource = resourceView.RecId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(ProjJournalTrans), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        ProjJournalTrans hostRecord = _sender as ProjJournalTrans;
        
        hostRecord.FINSetTaxGroup();
        hostRecord.RORClearRefTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdating</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjJournalTrans), DataEventType::Updating)]
    public static void DNREvent_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        ProjJournalTrans hostRecord = _sender as ProjJournalTrans;
        
        hostRecord.FINSetTaxGroup();
        hostRecord.RORClearRefTableId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>