<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPostPurch_RORReturnNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::RORReturnNote)]
class InterCompanyPostPurch_RORReturnNote extends InterCompanyPostPurch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
    void formLetterUpdate()
    {
        PurchFormLetter_RORReturnNote   purchFormLetter_RORReturnNote = this.toFormLetter() as PurchFormLetter_RORReturnNote;
        SalesFormLetter_RORReturnNote   salesFormLetter_RORReturnNote = this.fromFormLetter() as SalesFormLetter_RORReturnNote;
        VendRORReturnNoteJour           vendReturnNoteJour;
        CustRORReturnNoteJour           custReturnNoteJour;
    
    
        if (salesFormLetter_RORReturnNote.isVersioningCorrectionOrCancel())
        {
            custReturnNoteJour = this.fromFormLetter().parmCallerTable() as CustRORReturnNoteJour;
    
            select crossCompany vendReturnNoteJour
            where vendReturnNoteJour.ReturnNoteId          == custReturnNoteJour.ReturnNoteId
            &&    vendReturnNoteJour.ReturnDate            == custReturnNoteJour.DeliveryDate;
    
            purchFormLetter_RORReturnNote.parmCallerTable(vendReturnNoteJour);
            purchFormLetter_RORReturnNote.parmAccountingDate(salesFormLetter_RORReturnNote.parmAccountingDate());
            purchFormLetter_RORReturnNote.parmVersionDateTime(salesFormLetter_RORReturnNote.parmVersionDateTime());
        }
    
        formletterPrintout = purchTable.interCompanyEndpointActionPolicy().PrintPurchPackingslip;
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromParmId</Name>
				<Source><![CDATA[
    public ParmId fromParmId()
    {
        CustRORReturnNoteJour returnNoteJour;
    
        if (this.fromFormLetter().isVersioningCorrectionOrCancel())
        {
            returnNoteJour = this.fromFormLetter().parmCallerTable();
            returnNoteJour.reread();
    
            return returnNoteJour.ParmId;
        }
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocationForPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the allocation of miscellaneous charges on an intercompany sub rental order.
    /// </summary>
    /// <param name="_purchTable">
    ///    The sub rental order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the return note that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the return note that triggers the allocation.
    /// </param>
    protected void interCompanyMarkupAllocationForPO(PurchTable _purchTable, Num _docNum, TransDate _transDate)
    {
        InterCompanyPostPurch_RORReturnNote::interCompanyMarkupAllocation(_purchTable, _docNum, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssue</Name>
				<Source><![CDATA[
    protected StatusIssue statusIssue()
    {
        return StatusIssue::Deducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusReceipt</Name>
				<Source><![CDATA[
    protected StatusReceipt statusReceipt()
    {
        return StatusReceipt::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the allocation of miscellaneous charges on an intercompany sub rental order.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the return note that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the return note that triggers the allocation.
    /// </param>
    public static void interCompanyMarkupAllocation(PurchTable _purchTable, Num _docNum, TransDate _transDate)
    {
        MarkupAllocation                    markupAllocation;
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy = _purchTable.interCompanyEndpointActionPolicy();
    
        markupAllocation = MarkupAllocation::newMarkupAllocation(_purchTable);
        markupAllocation.parmAllocateAfter(interCompanyEndpointActionPolicy.MarkupAllocateAfter);
        markupAllocation.parmAllocateInventoried(interCompanyEndpointActionPolicy.MarkupInventoriedOnly);
        markupAllocation.parmInterCompanyCompanyId(_purchTable.InterCompanyCompanyId);
        markupAllocation.parmInterCompanyDirectDelivery(_purchTable.InterCompanyDirectDelivery);
        markupAllocation.parmSkipWarning(true);
        markupAllocation.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>