<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchFormletterParmDataPackingSlipClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchFormletterParmDataPackingSlip))]
public final class DNRPurchFormletterParmDataPackingSlipClass_Extension
{
    private Set parmLineSet = new Set(Types::Int64);

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>interCompanyParmLineQty</Name>
				<Source><![CDATA[
    public Qty interCompanyParmLineQty(Common _common, boolean _isInventQty)
    {
        next interCompanyParmLineQty(_common, _isInventQty);

        PurchLine               purchLineLocal = _common;
        CustPackingSlipTrans    custPackingSlipTrans;
        CustPackingSlipJour     custPackingSlipJour;
        Qty                     inventQty;
        UnitOfMeasureRecId      toUnitOfMeasureRecId;
        UnitOfMeasureRecId      fromUnitOfMeasureRecId;
        InventTransId           interCompanyInventTransId = purchLineLocal.InterCompanyInventTransId;
        ItemId itemIdWarranty = RAGParameters::find().ItemIdWarranty;

        if (!purchLineLocal.InterCompanyInventTransId
        && purchLineLocal.RORTradeType != RORTradeType::SalesPurch
        && purchLineLocal.itemId != itemIdWarranty)
        {
            interCompanyInventTransId = RORSubrentalReference::findSales(purchLineLocal.InventTransId, purchLineLocal.RORRentalDateTimes(), RORParameters::dateTimeTypeInvoicingStart()).SalesInventTransId;
        }
    
        if (interCompanyCompanyId)
        {
            if (_isInventQty)
            {
                toUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(purchLineLocal.inventTable().inventUnitId());
            }

            changecompany(interCompanyCompanyId)
            {
                select forceplaceholders InventQty, Qty, ItemId from custPackingSlipTrans
                where custPackingSlipTrans.InventTransId == interCompanyInventTransId
                exists join custPackingSlipJour
                       where custPackingSlipJour.PackingSlipId == custPackingSlipTrans.PackingSlipId
                       &&    custPackingSlipJour.DeliveryDate  == custPackingSlipTrans.DeliveryDate
                       &&    custPackingSlipJour.SalesId       == custPackingSlipTrans.SalesId
                       &&    custPackingSlipJour.ParmId        == interCompanyParmId
                       &&    custPackingSlipJour.PackingSlipId == number;

                inventQty = custPackingSlipTrans.InventQty;

                if (_isInventQty)
                {
                    fromUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(custPackingSlipTrans.inventTable().inventUnitId());
                    if (fromUnitOfMeasureRecId != toUnitOfMeasureRecId)
                    {
                        inventQty = UnitOfMeasureConverter::convert(
                            inventQty,
                            fromUnitOfMeasureRecId,
                            toUnitOfMeasureRecId,
                            NoYes::Yes,
                            InventTable::itemProduct(custPackingSlipTrans.ItemId));
                    }
                }
            }

            // Supplementary items have no link between each other in rental intercompany process
            if (!inventQty && !purchLineLocal.InterCompanyInventTransId && purchLineLocal.ItemId == itemIdWarranty)
            {
                inventQty = purchLineLocal.RemainPurchPhysical;
    
                if (_isInventQty)
                {
                    fromUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(purchLineLocal.inventTable().inventUnitId());
                    if (fromUnitOfMeasureRecId != toUnitOfMeasureRecId)
                    {
                        inventQty = UnitOfMeasureConverter::convert(
                            inventQty,
                            fromUnitOfMeasureRecId,
                            toUnitOfMeasureRecId,
                            NoYes::Yes,
                            InventTable::itemProduct(purchLineLocal.ItemId));
                    }
                }
                // force to return calculated qty
                _isInventQty = true;
            }
        }
        else
        {
            select forceplaceholders InventQty, Qty from custPackingSlipTrans
            where custPackingSlipTrans.InventTransId == interCompanyInventTransId
            exists join custPackingSlipJour
                   where custPackingSlipJour.PackingSlipId == custPackingSlipTrans.PackingSlipId
                   &&    custPackingSlipJour.DeliveryDate  == custPackingSlipTrans.DeliveryDate
                   &&    custPackingSlipJour.SalesId       == custPackingSlipTrans.SalesId
                   &&    custPackingSlipJour.ParmId        == interCompanyParmId
                   &&    custPackingSlipJour.PackingSlipId == number;

            inventQty = custPackingSlipTrans.InventQty;
    
            // Supplementary items have no link between each other in rental intercompany process
            // but the parent must be delivered
            if (!inventQty && !purchLineLocal.InterCompanyInventTransId && purchLineLocal.ItemId == itemIdWarranty
            && (!purchLineLocal.RORParentLineRecId ||  parmLineSet.in(purchLineLocal.RORParentLineRecId)))
            {
                inventQty = purchLineLocal.RemainPurchPhysical;
    
                if (_isInventQty)
                {
                    fromUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(purchLineLocal.inventTable().inventUnitId());
                    if (fromUnitOfMeasureRecId != toUnitOfMeasureRecId)
                    {
                        inventQty = UnitOfMeasureConverter::convert(
                            inventQty,
                            fromUnitOfMeasureRecId,
                            toUnitOfMeasureRecId,
                            NoYes::Yes,
                            InventTable::itemProduct(purchLineLocal.ItemId));
                    }
                }
                // force to return calculated qty
                _isInventQty = true;
            }
        }

        return _isInventQty ? inventQty : custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common         _purchLine,
                                     TradeLineRefId _tableRef,
                                     boolean        _callFromCreateParmLineAndSubLines)
    {
        boolean ret = next createParmLine(_purchLine, _tableRef, _callFromCreateParmLineAndSubLines);

        if (ret)
        {
            parmLineSet.add(_purchLine.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>