<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjAdjustmentUpdate_PostClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjAdjustmentUpdate_Post))]
public final class DNRProjAdjustmentUpdate_PostClass_Extension
{
    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>INVUpdateInvoicePeriods</Name>
				<Source><![CDATA[
    public static void INVUpdateInvoicePeriods(XppPrePostArgs _eventArgs)
    {
        /*
        ProjParameters          parameters;
        TmpProjAdjustmentCreate tmpProjAdjustmentCreate;
        ProjEmplTrans           projEmplTransOrig;
        INVInvoicePeriod        invoicePeriod;
        SalesLine               salesLine;
        TransDateTime           fromDateTime, toDateTime;
    
        parameters = ProjParameters::find();
    
        if (parameters.AlwaysRegulationTrans)
        {
            tmpProjAdjustmentCreate = _eventArgs.getArg('_tmpProjAdjustmentCreate');
            projEmplTransOrig       = ProjEmplTrans::find(tmpProjAdjustmentCreate.TransID);
            salesLine               = salesLine::WPPSalesLineFromJournalTrans(projEmplTransOrig.TableId, projEmplTransOrig.RecId);
    
            if (salesLine
            &&  BOBRentalType::find(salesLine.BOBRentalTypeId()).InvoiceProjectHours
            &&  ProjCategory::find(projEmplTransOrig.CategoryId).WPPWorkType)
            {
                fromDateTime = DateTimeUtil::newDateTime(projEmplTransOrig.TransDate, projEmplTransOrig.FromTime, DateTimeUtil::getUserPreferredTimeZone());
                toDateTime = DateTimeUtil::newDateTime(projEmplTransOrig.TransDate, projEmplTransOrig.ToTime, DateTimeUtil::getUserPreferredTimeZone());
    
                update_recordSet invoicePeriod
                setting PeriodStatus = INVPeriodStatus::PriceAdjustment
                where invoicePeriod.RefTableId         == salesLine.TableId
                &&    invoicePeriod.RefRecId           == salesLine.RecId
                &&    invoicePeriod.PeriodStatus       == INVPeriodStatus::FullyInvoiced
                &&    invoicePeriod.PeriodEndDateTime  >  fromDateTime
                &&    invoicePeriod.PeriodStartDateTime < toDateTime;
    
    
                /*if (projEmplTransOrig.WPPInvoiceId)
                {
                    update_recordSet invoicePeriod
                    setting PeriodStatus = INVPeriodStatus::PriceAdjustment
                    where invoicePeriod.InvoiceId == projEmplTransOrig.WPPInvoiceId;
                }*/
            }
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_update_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(classStr(ProjAdjustmentUpdate_Post), methodStr(ProjAdjustmentUpdate_Post, update))]
    public static void DNREvent_update_post(XppPrePostArgs _eventArgs)
    {
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreate = _eventArgs.getArg('_tmpProjAdjustmentCreate');

        if (_tmpProjAdjustmentCreate.AdjustmentType == ProjAdjustmentType::Hour)
        {
            ProjAdjustmentUpdate_Post::INVUpdateInvoicePeriods(_eventArgs);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>