<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationEditLinesForm_Sales_SendClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationEditLinesForm_Sales_Send))]
public final class DNRSalesQuotationEditLinesForm_Sales_SendClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>queryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    QueryRun  queryBuildSalesQuotationTable()
    {
        QueryRun ret = next queryBuildSalesQuotationTable();

        Query query = ret.query();

        QueryBuildDataSource salesQuotationTabledataSource = query.dataSourceTable(tableNum(SalesQuotationTable));
        QueryBuildRange queryBuildRangeType = salesQuotationTabledataSource.findRange(fieldNum(SalesQuotationTable, QuotationType));

        if (callerRecordsPackedMap == conNull())
        {
            queryBuildRangeType.value(SysQuery::value(this.RORQuotationType()));
        }
        else
        {
            if (!skipQueryStatusFilter)
            {
                queryBuildRangeType.value(SysQuery::value(this.RORQuotationType()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    protected void writeJournalLine()
    {
        next writeJournalLine();

        this.BOBUpdateRentalSubStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    boolean updateNow()
    {
        boolean ret = next updateNow();

        SalesQuotationTable salesQuotationTable = this.salesQuotationTable();
        CustQuotationJour   custQuotationJour   = this.journal();

        new RORPopulateRentalLineParent(salesQuotationTable, custQuotationJour).run();
        new RORRentalDateTimesJournalizer(salesQuotationTable, custQuotationJour).run();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBUpdateRentalSubStatus</Name>
				<Source><![CDATA[
    // extension methods

    private void BOBUpdateRentalSubStatus()
    {

        SalesQuotationLine                  salesQuotationLine;
        InventTrans                         inventTrans;
        InventTransOriginSalesQuotationLine originSalesQuotationLine;
    
        while select inventTrans
            join TableId from originSalesQuotationLine
            where originSalesQuotationLine.SalesQuotationLineDataAreaId == custQuotationTrans.dataAreaId
            &&    originSalesQuotationLine.SalesQuotationLineInventTransId == custQuotationTrans.InventTransId
            &&    originSalesQuotationLine.InventTransOrigin == inventTrans.InventTransOrigin
                join salesQuotationLine
                where salesQuotationLine.InventTransId == originSalesQuotationLine.SalesQuotationLineInventTransId
        {
            InventMovement inventMovement = InventMovement::construct(salesQuotationLine);
            BOBRentalTransManager transManager = BOBRentalTransManager::newInventMovement(inventMovement,
                                                                    inventTrans,
                                                                    BOBRentalSubStatus::QuotationSent);
            transManager.updateSubStatus(inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>