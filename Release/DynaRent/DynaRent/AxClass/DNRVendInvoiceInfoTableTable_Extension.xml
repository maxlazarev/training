<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRVendInvoiceInfoTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(VendInvoiceInfoTable))]
public final class DNRVendInvoiceInfoTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    public void initFromPurchTable(PurchTable _purchTable)
    {
        next initFromPurchTable(_purchTable);
        this.INVPurchaseType = _purchTable.PurchaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromActiveHeader</Name>
				<Source><![CDATA[
    public void initFromActiveHeader(VendInvoiceInfoTable _activeTable)
    {
        if (_activeTable.PurchId)
        {
            this.INVPurchaseType = PurchTable::find(_activeTable.PurchId).PurchaseType;
        }
    
        if (this.INVPurchaseType == PurchaseType::RORSubRental && !this.INVParmId)
        {
            this.INVParmId = _activeTable.ParmId;
        }

        next initFromActiveHeader(_activeTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);
        
        if(_fieldId == fieldNum(VendInvoiceInfoTable, TransDate))
        {
            if(!this.RecId || !this.orig().TransDate)
            {
                this.DocumentDate = this.TransDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromHeader</Name>
				<Source><![CDATA[
    public void copyFromHeader(VendInvoiceInfoTable _header)
    {
        this.BOBTransTime       = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        this.INVPurchaseType    = _header.INVPurchaseType;
        this.INVNotesLine       = _header.INVNotesLine;

        next copyFromHeader(_header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPurchId</Name>
				<Source><![CDATA[
    public client void lookupPurchId(Object _ctrl)
    {
        DNRVendInvoiceInfoTableDisposableContext context = DNRVendInvoiceInfoTableDisposableContext::current();

        if (context && context.DNRparmPurchFormLetter())
        {
            if (context.DNRparmPurchFormLetter().RORIsRentalPosting())
            {
                this.INVPurchaseType = PurchaseType::RORSubRental;
            }
        }

        next lookupPurchId(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchDocumentState</Name>
				<Source><![CDATA[
    // extension methods

    [SysClientCacheDataMethodAttribute(true)]
    public display VersioningDocumentState displayPurchDocumentState()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VersioningDocumentState documentState;
        PurchTable              purchTable;
    
        select firstOnly DocumentState from purchTable
        order by purchStatus asc
            exists join vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == this.ParmId &&
                  vendInvoiceInfoSubTable.TableRefId == this.TableRefId &&
                  vendInvoiceInfoSubTable.OrigPurchId != '' &&
                  vendInvoiceInfoSubTable.OrigPurchId == purchTable.PurchId;
    
        if (purchTable)
        {
            documentState = purchTable.DocumentState;
        }
        else if (this.PurchId)
        {
            documentState = PurchTable::find(this.PurchId).DocumentState;
        }
    
        return documentState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchDocumentStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display DocumentStatus displayPurchDocumentStatus()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        DocumentStatus          documentStatus;
        PurchTable              purchTable;
    
        select firstOnly DocumentStatus from purchTable
        order by purchStatus asc
            exists join vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == this.ParmId &&
                  vendInvoiceInfoSubTable.TableRefId == this.TableRefId &&
                  vendInvoiceInfoSubTable.OrigPurchId != '' &&
                  vendInvoiceInfoSubTable.OrigPurchId == purchTable.PurchId;
    
        if (purchTable)
        {
            documentStatus = purchTable.DocumentStatus;
        }
        else if (this.PurchId)
        {
            documentStatus = PurchTable::find(this.PurchId).DocumentStatus;
        }
    
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PurchStatus displayPurchStatus()
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        PurchStatus             purchStatus;
        PurchTable              purchTable;
    
        select firstOnly purchStatus from purchTable
        order by purchStatus asc
            exists join vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == this.ParmId &&
                  vendInvoiceInfoSubTable.TableRefId == this.TableRefId &&
                  vendInvoiceInfoSubTable.OrigPurchId != '' &&
                  vendInvoiceInfoSubTable.OrigPurchId == purchTable.PurchId;
    
        if (purchTable)
        {
            purchStatus = purchTable.PurchStatus;
        }
        else if (this.PurchId)
        {
            purchStatus = PurchTable::find(this.PurchId).PurchStatus;
        }
    
        return purchStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckIfHasAdditionalNoteIcon</Name>
				<Source><![CDATA[
    public display ImageRes RORCheckIfHasAdditionalNoteIcon()
    {
        #resAppl
    
        if (this.INVNotesLine)
        {
            return #ImageInfo;
        }
        else
        {
            return #ImageBlank2;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayWorkflowStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORWorkFlowStatusStr RORDisplayWorkflowStatus()
    {
        RORWorkFlowStatusStr            ret;
        WorkflowWorkItemStatus          workflowWorkItemStatus;
        WorkflowTrackingStatusTable     workflowTrackingStatusTable;
    
        select firstOnly RecId, TrackingStatus from workflowTrackingStatusTable
        order by CreatedDateTime desc
        where workflowTrackingStatusTable.ContextTableId == this.TableId
        &&    workflowTrackingStatusTable.ContextRecId == this.RecId
        &&    workflowTrackingStatusTable.ContextCompanyId == this.dataAreaId;
    
        if (workflowTrackingStatusTable)
        {
            ret = enum2str(workflowTrackingStatusTable.TrackingStatus);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCanDeleteParmUpdate</Name>
				<Source><![CDATA[
    public static boolean INVCanDeleteParmUpdate(PurchParmUpdate _purchParmUpdate)
    {
        VendInvoiceInfoTable    localVendInvoiceInfoTable;
        boolean                 ret = true;
    
        // User is posting
        if (!_purchParmUpdate.Proforma )
        {
            select firstonly RecId from localVendInvoiceInfoTable
            where (localVendInvoiceInfoTable.ParmId == _purchParmUpdate.ParmId || localVendInvoiceInfoTable.INVParmId == _purchParmUpdate.ParmId)
            &&    localVendInvoiceInfoTable.INVPurchaseType == PurchaseType::RORSubRental;
    
            if (localVendInvoiceInfoTable)
            {
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORHasIncompleteWorkflowStatus</Name>
				<Source><![CDATA[
    public boolean RORHasIncompleteWorkflowStatus()
    {
        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        select firstOnly RecId, TrackingStatus from workflowTrackingStatusTable
            order by CreatedDateTime desc
            where workflowTrackingStatusTable.ContextTableId == this.TableId
            &&    workflowTrackingStatusTable.ContextRecId == this.RecId
            &&    workflowTrackingStatusTable.ContextCompanyId == this.dataAreaId;

        if(!workflowTrackingStatusTable)
        {
            VendInvoiceInfoTable vendInvoiceInfoTableLocal;

            select firstOnly RecId, TableId, DataAreaId from vendInvoiceInfoTableLocal
                where vendInvoiceInfoTableLocal.PoolRecId == this.PoolRecId
                && vendInvoiceInfoTableLocal.Num == this.Num
                && vendInvoiceInfoTableLocal.dataAreaId == this.dataAreaId
                && vendInvoiceInfoTableLocal.RecId != this.RecId;

            if (vendInvoiceInfoTableLocal)
            {
                select firstOnly RecId, TrackingStatus from workflowTrackingStatusTable
                    order by CreatedDateTime desc
                    where workflowTrackingStatusTable.ContextTableId == vendInvoiceInfoTableLocal.TableId
                    &&    workflowTrackingStatusTable.ContextRecId == vendInvoiceInfoTableLocal.RecId
                    &&    workflowTrackingStatusTable.ContextCompanyId == vendInvoiceInfoTableLocal.dataAreaId;
            }
        }
        
        boolean ret;

        if(workflowTrackingStatusTable && workflowTrackingStatusTable.TrackingStatus < WorkflowTrackingStatus::Completed)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>