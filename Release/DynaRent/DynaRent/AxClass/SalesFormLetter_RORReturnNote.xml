<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_RORReturnNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::RORReturnNote)]
[SysOperationJournaledParametersAttribute(true)]
class SalesFormLetter_RORReturnNote
extends SalesFormLetter
{
    //CustRORReturnNoteJour   returnNoteJour;
    boolean                 resetProforma;
    boolean                 proforma;

    #define.CurrentVersion(1)
    #LOCALMACRO.ParmList
        resetProforma
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return SalesFormLetter_RORReturnNote::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    public void  chooseLines(boolean _append = false, boolean _directDeliveryUpdate = false)
    {
        if (resetProforma)
        {
            this.proforma(proforma);
        }
        super(_append, _directDeliveryUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes printer settings with default values for sales order posting.
    /// </summary>
    public void initPrinterSettingsFormletter()
    {
        SRSPrintDestinationSettings printSettings;
    
        super();
    
        printSettings = new SRSPrintDestinationSettings(this.printerSettingsFormletter(PrintSetupOriginalCopy::Original));
        printSettings.parmPrintToArchive(false);
        this.updatePrinterSettingsFormLetter(printSettings.pack(), PrintSetupOriginalCopy::Original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(
        identifierName _className = classStr(FormletterService),
        identifierName _methodName= methodStr(FormletterService, postSalesOrderRORReturnNote),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {;
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #ParmList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        if (prmisDefault(_showDialog) && this.parmVersioningUpdateType() == VersioningUpdateType::Cancel)
        {
            return false;
        }
    
        return super(_showDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for sales order packing slip.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer   version = conPeek(_packedClass,1);
        container packedBase;
    
        switch (version)
        {
            case #CurrentVersion :
                [version, #ParmList, packedBase] = _packedClass;
                return super(packedBase);
    
            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether it is all right to continue.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    /// true if it is all right to continue; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The validate method is used for validating if it is all right to close the sales posting form when
    /// you post sales orders.
    /// </remarks>
    boolean validate(Object _calledFrom = null)
    {
        boolean ret;
    
        ret = super(_calledFrom);
    
        if (ret)
        {
            ret = this.validateBankLC();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the letter of credit required information is attached with the packing slip.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    private boolean validateBankLC()
    {
        boolean ret = true;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        if (BankLCExportFeatureChecker::checkBankLCExportEnabled()
            && !this.proforma())
        {
            ret = BankLCExportType::validateDocuments(salesParmUpdate.ParmId, salesParmUpdate.DocumentStatus);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@DNR6276";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRORReturnNote</Name>
				<Source><![CDATA[
    static public SalesFormLetter_RORReturnNote newRORReturnNote(
        identifierName _className  = classstr(FormletterService),
        identifierName _methodName = methodstr(FormletterService, postSalesOrderRORReturnNote),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        SalesFormLetter_RORReturnNote formLetter = new SalesFormLetter_RORReturnNote (_className, _methodName, _executionMode);
        formLetter.init();
        return formLetter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>