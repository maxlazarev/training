<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataRORReturnNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::RORReturnNote)]
class PurchFormletterParmDataRORReturnNote
extends PurchFormletterParmData
{
    boolean setProforma;
    boolean proformaIsSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order posting parameter table.
    /// </summary>
    /// <returns>
    /// The inserted record.
    /// </returns>
    protected Common createParmUpdate()
    {
        PurchParmUpdate parmUpdate;
    
        parmUpdate = super();
        if (proformaIsSet)
        {
            parmUpdate.Proforma = setProforma;
        }
    
        return parmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyParmLineQty</Name>
				<Source><![CDATA[
    public Qty interCompanyParmLineQty(Common _common, boolean _isInventQty = false)
    {
        PurchLine               purchLineLocal = _common;
        CustRORReturnNoteTrans  returnNoteTrans;
        CustRORReturnNoteJour   returnNoteJour;
        Qty                     inventQty;
        UnitOfMeasureRecId      toUnitOfMeasureRecId;
        UnitOfMeasureRecId      fromUnitOfMeasureRecId;
        InventTransId           interCompanyInventTransId = purchLineLocal.InterCompanyInventTransId;
        ItemId itemIdWarranty = RAGParameters::find().ItemIdWarranty;
    
        if (!purchLineLocal.InterCompanyInventTransId
        && purchLineLocal.RORTradeType != RORTradeType::SalesPurch
        && purchLineLocal.ItemId != itemIdWarranty)
        {
            interCompanyInventTransId = RORSubrentalReference::findSales(purchLineLocal.InventTransId, purchLineLocal.RORRentalDateTimes(), RORParameters::dateTimeTypeInvoicingStart()).SalesInventTransId;
        }
    
        if (interCompanyCompanyId)
        {
            if (_isInventQty)
            {
                toUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(purchLineLocal.inventTable().inventUnitId());
            }
    
            changeCompany (interCompanyCompanyId)
            {
                select forcePlaceholders InventQty, Qty, ItemId from returnNoteTrans
                where returnNoteTrans.InventTransId == interCompanyInventTransId
                    exists join returnNoteJour
                    where returnNoteJour.ReturnNoteId == returnNoteTrans.ReturnNoteId
                    &&    returnNoteJour.DeliveryDate == returnNoteTrans.DeliveryDate
                    &&    returnNoteJour.SalesId      == returnNoteTrans.SalesId
                    &&    returnNoteJour.ParmId       == interCompanyParmId
                    &&    returnNoteJour.ReturnNoteId == number;
    
                inventQty = returnNoteTrans.InventQty;
    
                if (_isInventQty)
                {
                    fromUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(returnNoteTrans.RORRentalLine::inventTable().inventUnitId());
                    if (fromUnitOfMeasureRecId != toUnitOfMeasureRecId)
                    {
                        inventQty = UnitOfMeasureConverter::convert(
                            inventQty,
                            fromUnitOfMeasureRecId,
                            toUnitOfMeasureRecId,
                            NoYes::Yes,
                            InventTable::itemProduct(returnNoteTrans.ItemId));
                    }
                }
            }
    
            // Supplementary items have no link between each other in rental intercompany process
            if (!inventQty && !purchLineLocal.InterCompanyInventTransId && purchLineLocal.ItemId == itemIdWarranty)
            {
                inventQty = purchLineLocal.RemainPurchPhysical;
    
                if (_isInventQty)
                {
                    fromUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(purchLineLocal.inventTable().inventUnitId());
                    if (fromUnitOfMeasureRecId != toUnitOfMeasureRecId)
                    {
                        inventQty = UnitOfMeasureConverter::convert(
                            inventQty,
                            fromUnitOfMeasureRecId,
                            toUnitOfMeasureRecId,
                            NoYes::Yes,
                            InventTable::itemProduct(purchLineLocal.ItemId));
                    }
                }
                // force to return calculated qty
                _isInventQty = true;
            }
        }
        else
        {
            select forceplaceholders InventQty, Qty from returnNoteTrans
            where returnNoteTrans.InventTransId == interCompanyInventTransId
                exists join returnNoteJour
                where returnNoteJour.ReturnNoteId == returnNoteTrans.ReturnNoteId
                &&    returnNoteJour.DeliveryDate == returnNoteTrans.DeliveryDate
                &&    returnNoteJour.SalesId      == returnNoteTrans.SalesId
                &&    returnNoteJour.ParmId       == interCompanyParmId
                &&    returnNoteJour.ReturnNoteId == number;
    
            inventQty = returnNoteTrans.InventQty;
    
            // Supplementary items have no link between each other in rental intercompany process
            if (!inventQty && !purchLineLocal.InterCompanyInventTransId && purchLineLocal.ItemId == itemIdWarranty)
            {
                inventQty = _isInventQty ? purchLineLocal.RORRemainInventReturn : purchLineLocal.RORRemainPurchReturn;
    
                if (_isInventQty)
                {
                    fromUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(purchLineLocal.inventTable().inventUnitId());
                    if (fromUnitOfMeasureRecId != toUnitOfMeasureRecId)
                    {
                        inventQty = UnitOfMeasureConverter::convert(
                            inventQty,
                            fromUnitOfMeasureRecId,
                            toUnitOfMeasureRecId,
                            NoYes::Yes,
                            InventTable::itemProduct(purchLineLocal.ItemId));
                    }
                }
                // force to return calculated qty
                _isInventQty = true;
            }
        }
    
        return _isInventQty ? inventQty : returnNoteTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common  _purchTable)
    {
        PurchTable  purchTableLocal;
    
        purchTableLocal = PurchTable::findRecId(_purchTable.RecId);
    
        return true;//purchTableLocal.type().RORmayReturnNoteBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    public boolean mayJournalTransBePosted(Common _purchLine)
    {
        PurchLine   purchLine = _purchLine as PurchLine;
    
        boolean ok = super(_purchLine);
    
        return ok && purchLine.type().RORmayReturnNoteBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        return DocumentStatus::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static server PurchFormletterParmDataRORReturnNote construct()
    {
        return new PurchFormletterParmDataRORReturnNote();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>