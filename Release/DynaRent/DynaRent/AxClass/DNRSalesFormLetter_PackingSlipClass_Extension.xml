<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesFormLetter_PackingSlipClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormLetter_PackingSlip))]
public final class DNRSalesFormLetter_PackingSlipClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initBasedOnMenuItem</Name>
				<Source><![CDATA[
    public void initBasedOnMenuItem(MenuItemNameAction _callerMenuItem)
    {
        next initBasedOnMenuItem(_callerMenuItem);

        if (_callerMenuItem == menuitemActionStr(SalesFormLetter_PackingSlipCancel))
        {
            //this.RORParmPostFuelLine(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderConnectedToWorkOrder</Name>
				<Source><![CDATA[
    private boolean orderConnectedToWorkOrder()
    {
        SalesParmLine           salesParmLine;
        SalesLine               salesLine;
        WPPWorkOrderTable       workOrderTable;
        WPPWorkOrderLine        workOrderLine;
        WPPWorkOrderTaskTable   workOrderTaskTable;
        SalesParmTable          salesParmTable = this.RORParmSalesParmTable();
    
        select firstOnly RecId from salesParmLine
        where salesParmLine.ParmId == salesParmTable.ParmId
        &&    salesParmLine.TableRefId == salesParmTable.TableRefId
            exists join salesLine
            where salesLine.RecId == salesParmLine.SalesLineRecId
                join TableId from workOrderTable
                where workOrderTable.OrderTableId == salesLine.TableId
                &&    workOrderTable.OrderRecId   == salesLine.RecId
                    join TableId from workOrderLine
                    where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                    &&    workOrderLine.Status       < WPPWorkOrderLineStatus::Completed
                        join TableId from workOrderTaskTable
                        where workOrderTaskTable.TaskId   == workOrderLine.TaskId
                        &&    workOrderTaskTable.TaskType == WPPTaskType::Delivery;
    
        return salesParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom)
    {
        boolean ret = next validate(_calledFrom);

        if (ret
        &&  !this.proforma()
        ///&&  !this.WPPparmWorkOrderId()
        &&  this.orderConnectedToWorkOrder())
        {
            ret = checkFailed("@DNR8575");
        }

        // Validate event was never called, so the code was never called and therefore it is disabled.
        // Can be turned on when needed
        //while select salesParmLine
        //where salesParmLine.ParmId == this.salesParmUpdate().ParmId
        //{
        //    ret = (salesParmLine.BOBValidatePartialDelivery() && ret);
        //}

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmForceReturnTransport</Name>
				<Source><![CDATA[
    public boolean RORParmForceReturnTransport(boolean _force = false) //= contract.RORParmForceReturnTransport())
    {
        return false;//contract.RORParmForceReturnTransport(_force);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>