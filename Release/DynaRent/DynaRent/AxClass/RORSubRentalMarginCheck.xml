<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSubRentalMarginCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORSubRentalMarginCheck
{
    SalesPurchTable callerSalesPurchTable;
    SalesPurchTableInterface salesPurchTableInterface;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesPurchTable _salesPurchTable)
    {
        callerSalesPurchTable = _salesPurchTable;
        salesPurchTableInterface = callerSalesPurchTable.salesPurchTableInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        switch(callerSalesPurchTable.TableId)
        {
            case tableNum(SalesTable):
                this.checkSalesTable();
                break;

            case tableNum(PurchTable):
                this.checkPurchTable();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesTable</Name>
				<Source><![CDATA[
    private void checkSalesTable()
    {
        SalesLine                   salesLine;
        InventDim                   inventDim;
        PurchLine                   purchLine;
        RORSubRentalReference       reference;
        Percent                     currentMarginPct, minMarginPct = RAGParameters::find().RORSubRentalMinimumMargin;
        boolean                     hasReferences = false;
        ;

        while select ItemId, LineNum, RORRentalGrossAmount from salesLine
        where salesLine.SalesId == salesPurchTableInterface.parmOrderId()
            join InventLocationId from inventDim
            where inventDim.InventDimId == salesLine.InventDimId
                join TableId from reference
                where reference.SalesInventTransId == salesLine.InventTransId
                    join RORRentalGrossAmount from purchLine
                    where purchLine.InventTransId == reference.PurchInventTransId
        {
            hasReferences = true;
            currentMarginPct = (salesLine.RORRentalGrossAmount ? (salesLine.RORRentalGrossAmount - purchLine.RORRentalGrossAmount) / salesLine.RORRentalGrossAmount * 100 : 0);

            if(currentMarginPct > minMarginPct)
            {
                info(strFmt("@DNR10121", salesLine.ItemId, salesLine.LineNum, inventDim.InventLocationId, currentMarginPct, RORSubRentalMarginStatus::Positive));
            }
            else if(currentMarginPct < 0)
            {
                error(strFmt("@DNR10121", salesLine.ItemId, salesLine.LineNum, inventDim.InventLocationId, currentMarginPct, RORSubRentalMarginStatus::Negative));
            }
            else
            {
                warning(strFmt("@DNR10121", salesLine.ItemId, salesLine.LineNum, inventDim.InventLocationId, currentMarginPct, RORSubRentalMarginStatus::Neutral));
            }
        }

        if(!hasReferences)
        {
            info(strFmt("@DNR10120", salesPurchTableInterface.parmOrderId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchTable</Name>
				<Source><![CDATA[
    private void checkPurchTable()
    {
        SalesLine                   salesLine;
        InventDim                   inventDim;
        PurchLine                   purchLine;
        RORSubRentalReference       reference;
        Percent                     currentMarginPct, minMarginPct = RAGParameters::find().RORSubRentalMinimumMargin;
        boolean                     hasReferences = false;
        ;

        while select ItemId, LineNumber, RORRentalGrossAmount from purchLine
        where purchLine.PurchId == salesPurchTableInterface.parmOrderId()
            join InventLocationId from inventDim
            where inventDim.inventDimId == purchLine.InventDimId
                join TableId from reference
                where reference.PurchInventTransId == purchLine.InventTransId
                    join RORRentalGrossAmount from salesLine
                    where salesLine.InventTransId == reference.SalesInventTransId
        {
            hasReferences = true;
            currentMarginPct = (salesLine.RORRentalGrossAmount ? (salesLine.RORRentalGrossAmount - purchLine.RORRentalGrossAmount) / salesLine.RORRentalGrossAmount * 100 : 0);
            
            if(currentMarginPct > minMarginPct)
            {
                info(strFmt("@DNR10121", purchLine.ItemId, purchLine.LineNumber, inventDim.InventLocationId, currentMarginPct, RORSubRentalMarginStatus::Positive));
            }
            else if(currentMarginPct < 0)
            {
                error(strFmt("@DNR10121", purchLine.ItemId, purchLine.LineNumber, inventDim.InventLocationId, currentMarginPct, RORSubRentalMarginStatus::Negative));
            }
            else
            {
                warning(strFmt("@DNR10121", purchLine.ItemId, purchLine.LineNumber, inventDim.InventLocationId, currentMarginPct, RORSubRentalMarginStatus::Neutral));
            }
        }

        if(!hasReferences)
        {
            info(strFmt("@DNR10125", salesPurchTableInterface.parmOrderId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if(_args.dataset() == tableNum(SalesTable) || _args.dataset() == tableNum(PurchTable))
        {
            new RORSubRentalMarginCheck(_args.record()).run();
        }
        else
        {
            throw error(strFmt("@DNR10124", classStr(RORSubRentalMarginCheck), tableStr(SalesTable), tableStr(PurchTable)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>