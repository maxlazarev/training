<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSmmOpportunityStatusUpdateClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SmmOpportunityStatusUpdate))]
public final class DNRSmmOpportunityStatusUpdateClass_Extension
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpTable</Name>
				<Source><![CDATA[
        void createTmpTable()
    {
        if (oppStatus != smmOpportunityStatus::Postponed)
        {
            container conQuoteType = SalesQuotationTableType::setAllowedTypes();

            if (conQuoteType != conNull())
            {
                TmpSalesQuotationMassUpdate tmpSalesQuotationMassUpdateLocal = tmpSalesQuotationMassUpdate;
                SalesQuotationTable salesQuotationTableLocal = salesQuotationTable;
                tmpSalesQuotationMassUpdateLocal.skipDataMethods(true);

                if (conFind(conQuoteType, QuotationType::RORRental))
                {
                    insert_recordset tmpSalesQuotationMassUpdateLocal (OpportunityId, QuotationId, StatusFrom, QuotationType)
                    select OpportunityId, QuotationId, QuotationStatus, QuotationType 
                    from salesQuotationTableLocal
                    where salesQuotationTableLocal.OpportunityId == smmOpportunityTable.OpportunityId &&
                          (salesQuotationTableLocal.QuotationStatus == SalesQuotationStatus::Created ||
                          salesQuotationTableLocal.QuotationStatus == SalesQuotationStatus::Sent) &&
                          !salesQuotationTableLocal.TemplateGroupId &&
                          !salesQuotationTableLocal.TemplateName &&
                          salesQuotationTableLocal.QuotationType == QuotationType::RORRental;
                }
            }
        }

        next createTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateSalesQuotationEditLinesForm</Name>
				<Source><![CDATA[
    protected SalesQuotationEditLinesForm instantiateSalesQuotationEditLinesForm()
    {
        const str Sales         = 'Sales';
        const str Project       = 'Project';
        const str Rental        = 'Rental';
        const str RentalProject = 'Rental project';

        SalesQuotationEditLinesForm ret = next instantiateSalesQuotationEditLinesForm();

        switch (salesQuotationTable.QuotationType)
        {
            case QuotationType::Project:
                ret = SalesQuotationEditLinesForm::construct(DocumentStatus::Confirmation, Project);
                break;
    
            case QuotationType::Sales:
                ret = SalesQuotationEditLinesForm::construct(DocumentStatus::Confirmation, Sales);
                break;
    
            case QuotationType::RORProjRental:
                ret = SalesQuotationEditLinesForm::construct(DocumentStatus::Confirmation, RentalProject);
                break;
    
            case QuotationType::RORRental:
                ret = SalesQuotationEditLinesForm::construct(DocumentStatus::Confirmation, Rental);
                break;

            default:
                ret = null;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCancelled</Name>
				<Source><![CDATA[
    public boolean canBeCancelled(SalesQuotationTable _salesQuotationTable)
    {
        boolean ok = next canBeCancelled(_salesQuotationTable);

        switch (_salesQuotationTable.QuotationType)
        {
            case QuotationType::RORProjRental:
                if (_salesQuotationTable.canQuotationBeCanceled())
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created or sent before it can be cancelled.
                    ok = checkFailed("@SYS105493");
                }
                break;

            case QuotationType::RORRental:
                if (_salesQuotationTable.canQuotationBeCanceled())
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created,sent pr revised before it can be cancelled.
                    ok = checkFailed("@SYS4010145");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeLost</Name>
				<Source><![CDATA[
    public boolean canBeLost(SalesQuotationTable _salesQuotationTable)
    {
        boolean ok=next canBeLost(_salesQuotationTable);

        switch (_salesQuotationTable.QuotationType)
        {
            case QuotationType::RORProjRental :
                if (_salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent    ||
                    _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created)
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created or sent before it can be lost.
                    ok = checkFailed("@SYS105496");
                }
                break;

            case QuotationType::RORRental :
                if (_salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent    ||
                    _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised ||
                    _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created)
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created, sent, revised before it can be lost.
                    ok = checkFailed("@SYS4010146");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuotes</Name>
				<Source><![CDATA[
    void processQuotes(SalesQuotationStatus _salesQuotationStatus)
    {
        next processQuotes(_salesQuotationStatus);

        // Repeated internal method from std. code
        void processQuotesPerType(QuotationType _quotationType)
        {
            SalesQuotationUpdate    salesQuotationUpdate;
            TmpSalesQuotationMassUpdate tmpSalesQuotationMassUpdateLocal = tmpSalesQuotationMassUpdate;
            
            select firstonly tmpSalesQuotationMassUpdateLocal
            where tmpSalesQuotationMassUpdateLocal.OpportunityId == smmOpportunityTable.OpportunityId &&
                  tmpSalesQuotationMassUpdateLocal.StatusTo == enum2int(_salesQuotationStatus) &&
                  tmpSalesQuotationMassUpdateLocal.QuotationType == _quotationType;

            if (tmpSalesQuotationMassUpdateLocal)
            {
                salesQuotationUpdate = SalesQuotationUpdate::constructFromOpportunity(tmpSalesQuotationMassUpdateLocal, _salesQuotationStatus);
                salesQuotationUpdate.parmReasonId(reasonId);
                salesQuotationUpdate.runOperation();
            }
        }

        processQuotesPerType(QuotationType::RORRental);
        processQuotesPerType(QuotationType::RORProjRental);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>