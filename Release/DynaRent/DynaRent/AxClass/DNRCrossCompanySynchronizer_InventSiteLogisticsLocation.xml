<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCrossCompanySynchronizer_InventSiteLogisticsLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRCrossCompanySynchronizer_InventSiteLogisticsLocation extends DNRCrossCompanySynchronizer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldIds2Identify</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Identify()
    {
        Set fieldIdsSet = new Set(Types::Integer);
        
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, Site));
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, Location));

        return fieldIdsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIds2Sync</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Sync()
    {
        Set fieldIdsSet = new Set(Types::Integer);

        //Standard Fields
        //Any changes here shall also be reflected it Class DNROMNewLegalEntityViewModelClass_Extension
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, AttentionToAddressLine));
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, IsDefault));
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, IsPostalAddress));
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, IsPrimary));
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, IsPrivate));
        fieldIdsSet.add(fieldNum(InventSiteLogisticsLocation, Location));

        return fieldIdsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventInserted</Name>
				<Source><![CDATA[
    protected void eventInserted()
    {
        DataAreaId                   dataAreaId;
        InventSiteId                 origSiteId;
        InventSiteLogisticsLocation  newRecord;
        InventSiteLogisticsLocation  logisticsLocation = callerRecord;;
        SetEnumerator                enumerator = dataAreaIds2Sync.getEnumerator();
        
        changecompany(transDataAreaId)
        {
            InventSite  inventSite;
            
            select inventSite
            where inventSite.RecId == logisticsLocation.Site;

            origSiteId = inventSite.SiteId;
        }
        
        while(enumerator.moveNext())
        {
            dataAreaId = enumerator.current();
            changecompany(dataAreaId)
            {
                newRecord.clear();
                newRecord.Site = InventSite::find(origSiteid).RecId;
                this.copyData(newRecord);
                
                if(newRecord.Site && this.validateWrite(newRecord))
                {
                    newRecord.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>