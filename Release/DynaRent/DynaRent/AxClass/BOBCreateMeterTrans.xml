<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBCreateMeterTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBCreateMeterTrans extends RunBase
{
    DialogRunbase       dialog;
    DialogField         dfMeterRecId,
                        dfTransDateTime,
                        dfTransType,
                        dfTransTxt,
                        dfWorkOrderId,
                        dfNewValue,
                        dfWorkOrderLineNum,
                        dfNotes;

    BOBMeterTable       meterTable;
    BOBMeterTrans       meterTrans;
    BOBTransDateTime    transDateTime;
    BOBMeterTransType   transType;
    TransTxt            transTxt;
    WPPWorkOrderId      workOrderId, workOrderIdDelete;
    BOBMeterValue       newValue, prevValue;
    BOBMeterTrans       meterTransNew;
    Line                workOrderLineNum;

    #define.dfWorkOrderIdFieldNum(999)
    #define.dfMeterRecIdFieldNum(998)
    #define.dfWorkOrderLineNumFieldNum(997)
    #define.dfTransactionType(996)
    #define.dfDeleteWorkOrder(995)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerMeterTrans</Name>
				<Source><![CDATA[
    public static void registerMeterTrans(Num               _meterId,
                                          TransDateTime     _transDateTime,
                                          BOBMeterTransType _transType,
                                          TransTxt          _transTxt,
                                          WPPWorkOrderId    _workOrderId,
                                          Line              _workOrderLineNum,
                                          BOBMeterValue     _newValue)
    {
        BOBCreateMeterTrans createTrans = BOBCreateMeterTrans::construct();
        createTrans.parmMeterId(_meterId);
        createTrans.parmTransDateTime(_transDateTime);
        createTrans.parmTransType(_transType);
        createTrans.parmTransTxt(_transTxt);
        createTrans.parmWorkOrderId(_workOrderId);
        createTrans.parmWorkOrderLineNum(_workOrderLineNum);
        createTrans.parmNewMeterValue(_newValue);

        createTrans.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransType</Name>
				<Source><![CDATA[
    public BOBMeterTransType parmTransType(BOBMeterTransType _transType = transType)
    {
        transType = _transType;
        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMeterId</Name>
				<Source><![CDATA[
    public Num parmMeterId(Num _meterId = meterTable.MeterId)
    {
        if(!prmisDefault(_meterId) && _meterId)
        {
            select firstOnly meterTable
            where meterTable.MeterId == _meterId;
        }

        return meterTable.MeterId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewMeterValue</Name>
				<Source><![CDATA[
    public BOBMeterValue parmNewMeterValue(BOBMeterValue _newValue = newValue)
    {
        newValue = _newValue;
        return newValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDateTime</Name>
				<Source><![CDATA[
    public BOBTransDateTime parmTransDateTime(BOBTransDateTime _transDateTime = transDateTime)
    {
        transDateTime = _transDateTime;
        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMeterTransType</Name>
				<Source><![CDATA[
    public BOBMeterTransType parmMeterTransType(BOBMeterTransType _transType = transType)
    {
        transType = _transType;
        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransTxt</Name>
				<Source><![CDATA[
    public TransTxt parmTransTxt(TransTxt _transTxt = transTxt)
    {
        transTxt = _transTxt;
        return transTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMeterValue</Name>
				<Source><![CDATA[
    public BOBMeterValue parmMeterValue(BOBMeterValue _newValue = newValue)
    {
        newValue = _newValue;
        return newValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevValue</Name>
				<Source><![CDATA[
    public BOBMeterValue parmPrevValue(BOBMeterValue _prevValue = prevValue)
    {
        prevValue = _prevValue;
        return prevValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderLineNum</Name>
				<Source><![CDATA[
    public Line parmWorkOrderLineNum(Line _workOrderLineNum = workOrderLineNum)
    {
        workOrderLineNum = _workOrderLineNum;
        return workOrderLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewTrans</Name>
				<Source><![CDATA[
    protected void initNewTrans()
    {
        meterTransNew.MeterTableRecId        = meterTable.RecId;
        meterTransNew.TransDateTime          = transDateTime;
        meterTransNew.TransType              = transType;
        meterTransNew.TransTxt               = transTxt;
        meterTransNew.WPPWorkOrderId         = workOrderId;
        meterTransNew.WPPWorkOrderLineNumber = workOrderLineNum;
        meterTransNew.MeterValue             = newValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMeterTable</Name>
				<Source><![CDATA[
    protected void updateMeterTable()
    {
        switch (transType)
        {
            case BOBMeterTransType::Reading,
                BOBMeterTransType::Replace:
                meterTable.Total += (meterTransNew.MeterValue - prevValue);
                break;
    
            case BOBMeterTransType::Correction:
                meterTable.Total -= (prevValue - meterTransNew.MeterValue);
                break;
    
            default:
                break;
        }
    
        meterTable.selectForUpdate(true);
        meterTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewTrans</Name>
				<Source><![CDATA[
    private void createNewTrans()
    {
        this.initNewTrans();
        meterTransNew.insert();

        this.updateMeterTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorkOrderTable</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    private void deleteWorkOrderTable()
    {
        WPPWorkOrderTable   workOrderTableDelete;
    
        if (workOrderIdDelete)
        {
            delete_from workOrderTableDelete
            where workOrderTableDelete.WorkOrderId == workOrderIdDelete;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormBuildInt64Control       refCtrl;
        FormBuildDateTimeControl    dtCtrl;

        dialog = super();
        dialog.caption("@DNR6994");
        dialog.allowUpdateOnSelectCtrl(true);

        dfMeterRecId = new DialogField(dialog, extendedTypeStr(BOBMeterTableRecId), #dfMeterRecIdFieldNum);
        dfMeterRecId.init(dialog);
        dfMeterRecId.value(meterTable.RecId);
        dfMeterRecId.allowEdit(meterTable.RecId == 0);
        refCtrl = dfMeterRecId.control();
        refCtrl.mandatory(true);

        dfTransDateTime = dialog.addFieldValue(extendedTypeStr(BOBTransDateTime), DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
        dtCtrl = dfTransDateTime.control();
        dtCtrl.mandatory(true);

        dfTransType = new DialogField(dialog, enumStr(BOBMeterTransType), #dfTransactionType);
        dialog.addCtrlDialogField(dfTransType.name());
        dfTransType.init(dialog);

        dfTransTxt = dialog.addField(extendedTypeStr(TransTxt), "@SYS179379");

        dfWorkOrderId = new DialogField(dialog, extendedTypeStr(WPPWorkOrderId), #dfWorkOrderIdFieldNum);
        dialog.addCtrlDialogField(dfWorkOrderId.name());
        dfWorkOrderId.init(dialog);
        dfWorkOrderId.value(workOrderId);

        dfWorkOrderLineNum = new DialogField(dialog, extendedTypeStr(Line), #dfWorkOrderLineNumFieldNum);
        dialog.addCtrlDialogField(dfWorkOrderLineNum.name());
        dfWorkOrderLineNum.init(dialog);
        dfWorkOrderLineNum.value(workOrderLineNum);
        dfWorkOrderLineNum.lookupButton(FormLookupButton::Always);
        dfWorkOrderLineNum.allowEdit(false);

        dfNotes = dialog.addField(extendedTypeStr(Notes), "@SYS6998");
        dfNotes.allowEdit(false);

        dfNewValue = dialog.addField(extendedTypeStr(BOBMeterValue), "@SYS68002");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
    
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    public void dialogSelectCtrl()
    {
        WPPWorkOrderTable   workOrderTable;
        BOBMaintenanceLog   maintenanceLog;
    
        super();
    
        workOrderIdDelete = '';
    
        switch (dfTransType.value())
        {
            case BOBMeterTransType::Reset:
                dfNewValue.value(0);
                dfNewValue.allowEdit(false);
                dfNotes.value("@DNR:BOBMeterResetWarningText");
                dfWorkOrderId.allowEdit(true);
                dfWorkOrderLineNum.allowEdit(true);
                break;
    
            case BOBMeterTransType::Correction:
                dfNotes.value("@DNR:BOBMeterCorrectionWarningText");
                dfWorkOrderLineNum.value(0);
                dfWorkOrderId.allowEdit(false);
                dfWorkOrderLineNum.allowEdit(false);
    
                if (meterTrans)
                {
                    select firstOnly WorkOrderId from workOrderTable
                    order by maintenanceLog.createdDateTime desc
                        join TableId from maintenanceLog
                        where maintenanceLog.WPPWorkOrderId  == workOrderTable.WorkOrderId
                        &&    maintenanceLog.ObjectId        == meterTable.ObjectId
                        &&    maintenanceLog.MeterTableRecId == meterTable.RecId
                        &&    maintenanceLog.MeterValue      == meterTrans.MeterValue
                        &&   !maintenanceLog.CompletedBy;
    
                    if (workOrderTable)
                    {
                        // Work orders may only be deleted when the status is Created
                        // as programmed in validateDelete on the WPPWorkOrderTable table
                        if (WPPWorkOrderLine::getHighestStatus(workOrderTable.WorkOrderId) == WPPWorkOrderLineStatus::Created)
                        {
                            dfNotes.value("@DNR7596");
    
                            workOrderIdDelete = workOrderTable.WorkOrderId;
                        }
                        else
                        {
                            dfNotes.value("@DNR7585");
                        }
                    }
                }
                break;
    
            default:
                dfNewValue.allowEdit(true);
                dfNotes.value('');
                dfWorkOrderId.allowEdit(true);
                dfWorkOrderLineNum.allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld996_1_validate</Name>
				<Source><![CDATA[
    protected boolean fld996_1_validate()
    {
        boolean             ret;
        BOBMeterTransType   meterTransType;
        BOBMeterTrans       meterTransFind;
    
        ret            = true;
        meterTransType = dfTransType.value();
    
        if (meterTransType == BOBMeterTransType::Correction)
        {
            select firstOnly RecId from meterTransFind
            order by TransDateTime desc
            where meterTransFind.MeterTableRecId == meterTable.RecId;
    
            if (meterTransFind.RecId != meterTrans.RecId)
            {
                ret = checkFailed("@DNR7587");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld997_1_lookup</Name>
				<Source><![CDATA[
    private void fld997_1_lookup()
    {
        Object                  callerCtrl;
        SysTableLookup          lookup;
        Query                   query;
        QueryBuildDataSource    qbdsWorkOrderLine;
        DictFieldGroup          fieldGroup;
        Counter                 cnt;
        WPPWorkOrderId          selectedWorkOrderId;
    
        selectedWorkOrderId = dfWorkOrderId.value();
    
        if (selectedWorkOrderId)
        {
            callerCtrl = dialog.formRun().controlCallingMethod();
            fieldGroup = new DictFieldGroup(tableNum(WPPWorkOrderLine), 'AutoLookup');
    
            query = new Query();
            qbdsWorkOrderLine = query.addDataSource(tableNum(WPPWorkOrderLine));
            qbdsWorkOrderLine.addRange(fieldNum(WPPWorkOrderLine, WorkOrderId)).value(selectedWorkOrderId);
    
            lookup = SysTableLookup::newParameters(tableNum(WPPWorkOrderLine), callerCtrl);
    
            for (cnt = 1; cnt <= fieldGroup.numberOfFields(); cnt ++)
            {
                lookup.addLookupfield(fieldGroup.field(cnt), fieldGroup.field(cnt) == fieldNum(WPPWorkOrderLine, LineNumber));
                qbdsWorkOrderLine.addSelectionField(fieldGroup.field(cnt));
            }
    
            lookup.parmQuery(query);
            lookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld997_1_validate</Name>
				<Source><![CDATA[
    private boolean fld997_1_validate()
    {
        boolean         ret                      = true;
        WPPWorkOrderId  selectedWorkOrderId      = dfWorkOrderId.value();
        Line            selectedWorkOrderLineNum = dfWorkOrderLineNum.value();
    
        if (selectedWorkOrderLineNum)
        {
            if (!WPPWorkOrderLine::exist(selectedWorkOrderId, selectedWorkOrderLineNum))
            {
                ret = checkFailed(strFmt("@DNR2944", selectedWorkOrderLineNum, fieldId2pname(tableNum(WPPWorkOrderLine), fieldNum(WPPWorkOrderLine, LineNumber)), tableId2pname(tableNum(WPPWorkOrderLine))));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld998_1_lookup</Name>
				<Source><![CDATA[
    private void fld998_1_lookup()
    {
        Args args = new Args();
        args.caller(this);
        args.name(formStr(BOBMeterLookup));
    
        FormRun formRun = ClassFactory::formRunClassOnClient(args);
    
        FormReferenceGroupControl callerCtrl = dialog.formRun().controlCallingMethod();
        callerCtrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld999_1_lookup</Name>
				<Source><![CDATA[
    private void fld999_1_lookup()
    {
        BOBMeterTableRecId  meterTableRecId = dfMeterRecId.value();
        Counter             cnt;
    
        if(meterTableRecId)
        {
            Object callerCtrl = dialog.formRun().controlCallingMethod();
            DictFieldGroup fieldGroup = new DictFieldGroup(tableNum(WPPWorkOrderTable), 'AutoLookup');
    
            Query query = new Query();
            QueryBuildDataSource qbdsWorkOrderTable = query.addDataSource(tableNum(WPPWorkOrderTable));
    
            QueryBuildDataSource qbdsObjectTable = qbdsWorkOrderTable.addDataSource(tableNum(BOBObjectTable));
            qbdsObjectTable.relations(true);
            qbdsObjectTable.joinMode(JoinMode::ExistsJoin);
    
            QueryBuildDataSource qbdsMeterTable = qbdsObjectTable.addDataSource(tableNum(BOBMeterTable));
            qbdsMeterTable.relations(true);
            qbdsMeterTable.joinMode(JoinMode::ExistsJoin);
            qbdsMeterTable.addRange(fieldNum(BOBMeterTable, RecId)).value(int642str(meterTableRecId));
               
            SysTableLookup lookup = SysTableLookup::newParameters(tableNum(WPPWorkOrderTable), callerCtrl);
    
            for(cnt = 1; cnt <= fieldGroup.numberOfFields(); cnt ++)
            {
                lookup.addLookupfield(fieldGroup.field(cnt), fieldGroup.field(cnt) == fieldNum(WPPWorkOrderTable, WorkOrderId));
                qbdsWorkOrderTable.addSelectionField(fieldGroup.field(cnt));
            }
    
            lookup.parmQuery(query);
            lookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld999_1_modified</Name>
				<Source><![CDATA[
    private boolean fld999_1_modified()
    {
        FormStringControl   control = dialog.formRun().controlCallingMethod();
        boolean             isFieldModified = control.modified();
    
        if (isFieldModified)
        {
            dfWorkOrderLineNum.allowEdit(control.valueStr() != '');
        }
    
        return isFieldModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        meterTable       = BOBMeterTable::findByRecId(dfMeterRecId.value());
        transDateTime    = DateTimeUtil::removeTimeZoneOffset(dfTransDateTime.value(), DateTimeUtil::getUserPreferredTimeZone());
        transType        = dfTransType.value();
        transTxt         = dfTransTxt.value();
        workOrderId      = dfWorkOrderId.value();
        newValue         = dfNewValue.value();
        prevValue        = (select firstonly MeterValue from BOBMeterTrans
                            order by TransDateTime desc
                            where BOBMeterTrans.MeterTableRecId == meterTable.RecId).MeterValue;
        workOrderLineNum = dfWorkOrderLineNum.value();
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMeterTable</Name>
				<Source><![CDATA[
    public BOBMeterTable parmMeterTable(BOBMeterTable _meterTable = meterTable)
    {
        meterTable = _meterTable;
        return meterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMeterTrans</Name>
				<Source><![CDATA[
    public BOBMeterTrans parmMeterTrans(BOBMeterTrans _meterTrans = meterTrans)
    {
        meterTrans = _meterTrans;
        return meterTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderId</Name>
				<Source><![CDATA[
    public void parmWorkOrderId(WPPWorkOrderId _workOrderId)
    {
        workOrderId = _workOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
    
        if(this.validate())
        {
            try
            {
                ttsBegin;
    
                this.deleteWorkOrderTable();
                this.createNewTrans();
                BOBMaintenanceManager::runFromCommon(meterTransNew);
    
                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
        else
        {
            throw error("@SYS93289");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean         ret = true;
        BOBMeterTrans   meterTransLocal;
    
        select firstOnly MeterValue, TransType, TransDateTime, RecId from meterTransLocal
        order by TransDateTime desc
        where meterTransLocal.MeterTableRecId == meterTable.RecId;
    
        if(!meterTable.RecId)
        {
            ret = checkFailed(strFmt("@DNR6995", "@DNR6993"));
        }
        if(!meterTable.ObjectId)
        {
            ret = checkFailed(strFmt("@DNR7076"));
        }
    
        if (transDateTime < meterTransLocal.TransDateTime)
        {
            ret = checkFailed("@DNR8205");
        }
    
        if(newValue < 0)
        {
            ret = checkFailed(strFmt("@SYS69681", "@SYS68002"));
        }
        else
        {
            if (meterTransLocal.RecId
            &&  transType == BOBMeterTransType::Reading
            &&  newValue < meterTransLocal.MeterValue)
            {
                ret = checkFailed(strFmt("@DNR7079", meterTransLocal.MeterValue));
            }
        }
    
        if(transType == BOBMeterTransType::Reading && newValue < prevValue)
        {
            ret = checkFailed(strFmt("@DNR6996", prevValue, BOBMeterTransType::Replace, BOBMeterTransType::Reset));
        }
    
        if (workOrderId && !workOrderLineNum)
        {
            ret = checkFailed(strFmt("@DNR8467",
                fieldId2pname(tableNum(BOBMeterTrans), fieldNum(BOBMeterTrans, WPPWorkOrderLineNumber)),
                fieldId2pname(tableNum(BOBMeterTrans), fieldNum(BOBMeterTrans, WPPWorkOrderId))));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOBCreateMeterTrans construct()
    {
        return new BOBCreateMeterTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args _args)
    {
        if (_args && (_args.dataset() == tableNum(BOBMeterTrans) || (_args.dataset() == tableNum(BOBMeterTable))))
        {
            if (_args.dataset() == tableNum(BOBMeterTrans))
            {
                BOBMeterTrans callerMeterTrans = _args.record();
                BOBMeterTable callerMeterTable = BOBMeterTable::findByRecId(callerMeterTrans.MeterTableRecId);

                this.parmMeterTrans(callerMeterTrans);
                this.parmMeterTable(callerMeterTable);
            }
            else if (_args.dataset() == tableNum(BOBMeterTable))
            {
                BOBMeterTable callerMeterTable = _args.record();
                this.parmMeterTable(callerMeterTable);
            }

            if (_args.caller() && _args.caller().name() == formStr(BOBMeterTable))
            {
                Args argsCaller = _args.caller().args();
    
                if (argsCaller && argsCaller.dataset() == tableNum(WPPWorkOrderTable))
                {
                    // this class was called from the BOBMeterTable form
                    // which in turn was called from a work order,
                    // so we need to prefill that work order's ID in the dialog
                    WPPWorkOrderTable workOrderTable = argsCaller.record();
                    this.parmWorkOrderId(workOrderTable.WorkOrderId);
                }
                else if (argsCaller && argsCaller.dataset() == tableNum(WPPWorkOrderView))
                {
                    // this class was called from the BOBMeterTable form
                    // which in turn was called from the work order list page,
                    // so we need to prefill that work order's ID in the dialog
                    WPPWorkOrderView workOrderView = argsCaller.record();
                    this.parmWorkOrderId(workOrderView.WorkOrderId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOBCreateMeterTrans createTrans = BOBCreateMeterTrans::construct();
        createTrans.initFromArgs(_args);
    
        if (createTrans.prompt())
        {
            createTrans.runOperation();
    
            BOBMeterTable callerMeterTable = createTrans.parmMeterTable();
            BOBMeterTrans callerMeterTrans = createTrans.parmMeterTrans();

            if (callerMeterTable && FormDataUtil::isFormDataSource(callerMeterTable))
            {
                FormDataUtil::getFormDataSource(callerMeterTable).research(true);
            }
            else if (callerMeterTrans && FormDataUtil::isFormDataSource(callerMeterTrans))
            {
                FormDataUtil::getFormDataSource(callerMeterTrans).research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>