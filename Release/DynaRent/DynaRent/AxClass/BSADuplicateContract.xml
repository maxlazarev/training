<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BSADuplicateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BSADuplicateContract extends RunBase
{
    // dialog
    DialogField             dfSMAAgreementGroupId;
    DialogField             dfCurrencyCode;
    DialogField             dfDescription;
    DialogField             dfFromDate;
    DialogField             dfToDate;
    DialogField             dfBusRelRelation;
    DialogField             dfBusRelType;
    DialogField             dfContractIdOrig;
    DialogField             dfContractOrigToDate;
    DialogField             dfStatus;
    Map                     accountRelationMap;

    // contract to be duplicated
    BSAContractTable        contractTableOrig;
    ToDate                  contractOrigToDate;

    // new contract properties
    BSAContractId           contractIdNew;
    Description             descriptionNew;
    TableGroupAll           busRelTypeNew;
    BSABusRelRelation       busRelRelationNew;
    CurrencyCode            currencyCodeNew;
    FromDate                fromDateNew;
    ToDate                  toDateNew;
    BSAContractStatus       statusNew;
    SMAAgreementGroupId     agreementGroupId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateContractOrig</Name>
				<Source><![CDATA[
    private void checkUpdateContractOrig()
    {
        BSAContractTable contractTable;
    
        if (contractOrigToDate)
        {
            update_recordset contractTable
            setting ToDate = contractOrigToDate
            where contractTable.ContractId == contractTableOrig.ContractId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContract</Name>
				<Source><![CDATA[
    private void createContract()
    {
        BSAContractTable newContractTable;
        ;
    
        contractIdNew = BSAContractTable::getNewContractId();
    
        newContractTable.ContractId         = contractIdNew;
        newContractTable.Description        = descriptionNew;
        newContractTable.SMAAgreementGroupId= agreementGroupId;
        newContractTable.BusRelType         = busRelTypeNew;
        newContractTable.BusRelRelation     = busRelRelationNew;
        newContractTable.FromDate           = fromDateNew;
        newContractTable.ToDate             = toDateNew;
        newContractTable.CurrencyCode       = currencyCodeNew;
        newContractTable.Status             = statusNew;
    
        if (!newContractTable.validateWrite())
        {
            throw error("@SYS18447");
        }
    
        newContractTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    private void createLines()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;
        DialogGroup     dgContractOrig;
        DialogGroup     dgContractCopy;
    
        DialogField     dialogField;
        TableGroupAll   busRelType;
        DictEnum        dictEnum;
        int             i;
    
        accountRelationMap = new Map(Types::Enum, Types::Class);
        dictEnum = new DictEnum(enumNum(TableGroupAll));
        dialog = super();
        dialog.allowUpdateOnSelectCtrl(true);
        dialog.caption("@DNR8418");
    
        dgContractOrig          = dialog.addGroup("@DNR8419");
        dfContractIdOrig        = dialog.addFieldValue(extendedTypeStr(BSAContractId), contractTableOrig.ContractId);
        dfContractOrigToDate    = dialog.addField(extendedTypeStr(ToDate), "@DNR8420");
    
        dgContractCopy          = dialog.addGroup("@DNR8421");
        dfDescription           = dialog.addField(extendedTypeStr(Description));
        dfSMAAgreementGroupId   = dialog.addFieldValue(extendedTypeStr(SMAAgreementGroupId), contractTableOrig.SMAAgreementGroupId);
        dfBusRelType            = dialog.addFieldValue(enumStr(TableGroupAll), contractTableOrig.BusRelType);
    
        for (i = 0; i < dictEnum.values(); i++)
        {
            busRelType          = dictEnum.index2Value(i);
            dialogField         = dialog.addField(BSADuplicateContract::contractType2TypeName(busRelType), "@SYS265");
            dialogField.displayLength(20);
            dialogField.visible(contractTableOrig.BusRelType == busRelType);
            accountRelationMap.insert(busRelType, dialogField);
        }
    
        dfCurrencyCode          = dialog.addFieldValue(extendedTypeStr(CurrencyCode), contractTableOrig.CurrencyCode);
        dfFromDate              = dialog.addFieldValue(extendedTypeStr(FromDate), contractTableOrig.ToDate + 1);
        dfToDate                = dialog.addField(extendedTypeStr(ToDate));
        dfToDate.fieldControl().mandatory(true);
        dfStatus                = dialog.addField(enumStr(RAGContractStatus));
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    public void dialogSelectCtrl()
    {
        MapEnumerator   enumerator;
        DialogField     accountRelationField;
        RAGContractType contractType;
        ;
    
        super();
    
        enumerator = accountRelationMap.getEnumerator();
    
        while (enumerator.moveNext())
        {
            contractType = enumerator.currentKey();
            accountRelationField = enumerator.currentValue();
            accountRelationField.visible(dfBusRelType.value() == contractType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        BSAContractTable    contractTableLocal;
        MapEnumerator       enumerator;
        DialogField         accountRelationField;
        RAGContractType     contractType;
        ;
    
        enumerator = accountRelationMap.getEnumerator();
    
        while (enumerator.moveNext())
        {
            contractType = enumerator.currentKey();
            accountRelationField = enumerator.currentValue();
    
            if (dfBusRelType.value() == contractType)
            {
                busRelRelationNew = accountRelationField.value();
            }
        }
    
        currencyCodeNew     = dfCurrencyCode.value();
        descriptionNew      = dfDescription.value();
        agreementGroupId    = dfSMAAgreementGroupId.value();
        fromDateNew         = dfFromDate.value();
        toDateNew           = dfToDate.value();
        busRelTypeNew       = dfBusRelType.value();
        contractOrigToDate  = dfContractOrigToDate.value();
        statusNew           = dfStatus.value();
    
        contractTableLocal = BSAContractTable::find(dfContractIdOrig.value());
        this.setContractTableOrig(contractTableLocal);
    
    
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewContractId</Name>
				<Source><![CDATA[
    public RAGContractId getNewContractId()
    {
        return contractIdNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.validate())
        {
            ttsbegin;
    
            this.createContract();
            this.createLines();
            this.checkUpdateContractOrig();
    
            ttscommit;
        }
        else
        {
            throw error(strFmt("@DNR8422", contractTableOrig.ContractId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusRelation</Name>
				<Source><![CDATA[
    public void setBusRelation(BSABusRelRelation _busRelRelation)
    {
        busRelRelationNew = _busRelRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusRelType</Name>
				<Source><![CDATA[
    public void setBusRelType(TableGroupAll _busRelType)
    {
        BusRelTypeNew = _busRelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractTableOrig</Name>
				<Source><![CDATA[
    public void setContractTableOrig(BSAContractTable _contractTableOrig)
    {
        contractTableOrig = _contractTableOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    public void setCurrencyCode(CurrencyCode _currencyCode)
    {
        currencyCodeNew = _currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDescription</Name>
				<Source><![CDATA[
    public void setDescription(Description _description)
    {
        descriptionNew = _description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDate</Name>
				<Source><![CDATA[
    public void setFromDate(FromDate _fromDate)
    {
        fromDateNew = _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    public void setStatus(BSAContractStatus _status)
    {
        statusNew = _status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    public void setToDate(ToDate _toDate)
    {
        toDateNew = _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;
        ;
    
        if (!currencyCodeNew)
        {
            ret = checkFailed(strFmt("@SYS50104", "@SYS7572"));
        }
    
        if (!contractTableOrig)
        {
            ret = checkFailed(strFmt("@DNR6622", dfContractIdOrig.value()));
        }
        else
        {
            if (contractOrigToDate && contractOrigToDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = checkFailed("@DNR6623");
            }
    
            if (contractOrigToDate && contractOrigToDate < contractTableOrig.FromDate)
            {
                ret = checkFailed("@DNR6624");
            }
        }
    
        if (toDateNew && toDateNew < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            ret = checkFailed("@DNR8640");
        }
    
        if (fromDateNew && toDateNew && fromDateNew > toDateNew)
        {
            ret = checkFailed("@SYS16982");
        }
    
        if(ret)
        {
            switch(busRelTypeNew)
            {
                case TableGroupAll::All:
                    //Nothing to check
                    break;
    
                case TableGroupAll::GroupId:
                    if(!RAGBusRelContractGroup::exist(busRelRelationNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", busRelRelationNew, "@SYS265", "@SYS80068"));
                    }
                    break;
    
                case TableGroupAll::Table:
                    if(!SMMBusRelTable::exist(busRelRelationNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", busRelRelationNew, "@SYS265", "@DNR6014"));
                    }
                    break;
    
                default:
                    // no additional check
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BSADuplicateContract construct()
    {
        return new BSADuplicateContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExactDuplicate</Name>
				<Source><![CDATA[
    public static BSADuplicateContract constructExactDuplicate(BSAContractTable _contractTable)
    {
        BSADuplicateContract duplicator = new BSADuplicateContract();
    
        duplicator.setContractTableOrig (_contractTable);
        duplicator.setDescription       (_contractTable.Description);
        duplicator.setBusRelType        (_contractTable.BusRelType);
        duplicator.setBusRelation       (_contractTable.BusRelRelation);
        duplicator.setCurrencyCode      (_contractTable.CurrencyCode);
        duplicator.setFromDate          (_contractTable.FromDate);
        duplicator.setToDate            (_contractTable.ToDate);
        duplicator.setStatus            (BSAContractStatus::Created);
    
        return duplicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractType2TypeName</Name>
				<Source><![CDATA[
    private static ExtendedDataTypeName contractType2TypeName(TableGroupAll _type)
    {
        ExtendedDataTypeName ret;
    
        switch (_type)
        {
            case TableGroupAll::All:
                ret = extendedTypeStr(Num);
                break;
    
            case TableGroupAll::GroupId:
                ret = extendedTypeStr(RAGBusRelGroupId);
                break;
    
            case TableGroupAll::Table:
                ret = extendedTypeStr(smmBusRelAccount);
                break;
    
            default:
                // no lookups for default, rental order, and rental order line
                ret = extendedTypeStr(Num);
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@DNR268";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        BSAContractView         contractView;
        BSAContractTable        callerContractTable;
        BSADuplicateContract    duplicator;
        FormDataSource          formDataSource;
        Args                    newArgs;
        ;
    
        duplicator = BSADuplicateContract::construct();
    
        if (_args)
        {
            if (_args.dataset() == tableNum(BSAContractTable))
            {
                callerContractTable = _args.record();
            }
            else if (_args.dataset() == tableNum(BSAContractView))
            {
                contractView = _args.record();
                callerContractTable = BSAContractTable::find(contractView.ContractId);
            }
        }
    
        duplicator.setContractTableOrig(callerContractTable);
    
        if (duplicator.prompt())
        {
            duplicator.runOperation();
    
            if (_args && _args.record() && FormDataUtil::isFormDataSource(_args.record()))
            {
                formDataSource = FormDataUtil::getFormDataSource(_args.record());
                formDataSource.research(true);
                formDataSource.refresh();
            }
            else
            {
                newArgs = new Args();
                newArgs.lookupField(fieldNum(BSAContractTable, ContractId));
                newArgs.lookupValue(duplicator.getNewContractId());
                new MenuFunction(menuitemDisplayStr(BSAContractTable), MenuItemType::Display).run(newArgs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>