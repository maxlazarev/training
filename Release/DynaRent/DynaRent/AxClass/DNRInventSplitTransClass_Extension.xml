<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventSplitTransClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventSplitTrans))]
public final class DNRInventSplitTransClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    InventTrans update(InventTrans _splitTrans, InventQty _splitQty, PdsCWInventQty _cwQty)
    {
        BOBInventSplitReason    splitReason;
        BOBRentalSubStatus      subStatusTo;

        // *** Repeated code
        if(! this.check(_splitTrans,_splitQty, _cwQty))
        {
            throw error("@SYS18447");
        }

        DNRInventTransUpdateSplitDisposableContext context = DNRInventTransUpdateSplitDisposableContext::current();
        
        if (context)
        {
            splitReason = context.getSplitReason();
            subStatusTo = context.getSubStatusTo();
        }
        
        BOBRentalTransManager rentalTransManager;
        
        if (splitReason != BOBInventSplitReason::Unknown)
        {
            InventTrans     origTrans       = _splitTrans.data();
            InventMovement  inventMovement  = InventMovement::construct(origTrans);

            rentalTransManager = (subStatusTo == BOBRentalSubStatus::None ?
                                  BOBRentalTransManager::newInventMovement(inventMovement, origTrans) :
                                  BOBRentalTransManager::newInventMovement(inventMovement, origTrans, subStatusTo));
        }

        InventTrans ret = next update(_splitTrans, _splitQty, _cwQty);
        
        // split attached rental transactions if necessary
        if (rentalTransManager)
        {
            rentalTransManager.splitInventTrans(_splitTrans.RecId, _splitQty, splitReason);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>