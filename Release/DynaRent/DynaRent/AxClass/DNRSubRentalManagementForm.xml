<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSubRentalManagementForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRSubRentalManagementForm
{
    DNRSubRentalManagementFormFilters   filters;
    QueryBuildDataSource                qbdsInventDim, qbdsPurchLine, qbdsObjectTable, qbdsRentalDateTimes;
    boolean                             filtersProvided;
    Query                               query;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRSubRentalManagementForm construct()
    {
        return new DNRSubRentalManagementForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilters</Name>
				<Source><![CDATA[
    public void setFilters(DNRSubRentalManagementFormFilters _subRentalManagementFormFilters)
    {
        filters = _subRentalManagementFormFilters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        query = new Query(queryStr(DNRSubRentalOrderLineQuery));

        filtersProvided = false;

        qbdsPurchLine       = query.dataSourceTable(tableNum(PurchLine));
        qbdsInventDim       = query.dataSourceTable(tableNum(InventDim));
        qbdsObjectTable     = query.dataSourceTable(tableNum(BOBObjectTable));
        qbdsRentalDateTimes = query.dataSourceTable(tableNum(RORRentalDateTimes));

        qbdsObjectTable.addRange(fieldNum(BOBObjectTable, InventSerialId)).value(SysQuery::valueNot(''));

        this.applyWarehouseFilter();
        this.applyRentalTypeFilter();
        this.applyInventSerialFilter();
        this.applySubStatusFilter();
        this.applyRentalDateTimeFilters();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRentalDateTimeFilters</Name>
				<Source><![CDATA[
    protected void applyRentalDateTimeFilters()
    {
        if (filters.parmOnRentStartDateTime() || filters.parmOnRentEndDateTime())
        {
            filtersProvided = true;

            QueryBuildRange queryDateTimeRange = SysQuery::findOrCreateRange(qbdsRentalDateTimes, fieldNum(RORRentalDateTimes, OnRentDateTime));
            TransDateTime queryStartDateTime = filters.parmOnRentStartDateTime() ? DateTimeUtil::removeTimeZoneOffset(filters.parmOnRentStartDateTime(), DateTimeUtil::getUserPreferredTimeZone()) : DateTimeUtil::minValue();
            TransDateTime queryEndDateTime = filters.parmOnRentEndDateTime() ? DateTimeUtil::removeTimeZoneOffset(filters.parmOnRentEndDateTime(), DateTimeUtil::getUserPreferredTimeZone()) : DateTimeUtil::maxValue();

            queryDateTimeRange.value(SysQuery::range(queryStartDateTime, queryEndDateTime));
        }
        else
        {
            qbdsRentalDateTimes.clearRange(fieldNum(RORRentalDateTimes, OnRentDateTime));
        }

        if (filters.parmExpectedOffRentStartDateTime() || filters.parmExpectedOffRentEndDateTime())
        {
            filtersProvided = true;

            QueryBuildRange queryDateTimeRange = SysQuery::findOrCreateRange(qbdsRentalDateTimes, fieldNum(RORRentalDateTimes, ExpectedOffRentDateTime));
            TransDateTime queryStartDateTime = filters.parmExpectedOffRentStartDateTime() ? DateTimeUtil::removeTimeZoneOffset(filters.parmExpectedOffRentStartDateTime(), DateTimeUtil::getUserPreferredTimeZone()) : DateTimeUtil::minValue();
            TransDateTime queryEndDateTime = filters.parmExpectedOffRentEndDateTime() ? DateTimeUtil::removeTimeZoneOffset(filters.parmExpectedOffRentEndDateTime(), DateTimeUtil::getUserPreferredTimeZone()) : DateTimeUtil::maxValue();

            queryDateTimeRange.value(SysQuery::range(queryStartDateTime, queryEndDateTime));
        }
        else
        {
            qbdsRentalDateTimes.clearRange(fieldNum(RORRentalDateTimes, ExpectedOffRentDateTime));
        }

        if (filters.parmOffRentStartDateTime() || filters.parmOffRentEndDateTime())
        {
            filtersProvided = true;

            QueryBuildRange queryDateTimeRange = SysQuery::findOrCreateRange(qbdsRentalDateTimes, fieldNum(RORRentalDateTimes, OffRentDateTime));
            TransDateTime queryStartDateTime = filters.parmOffRentStartDateTime() ? DateTimeUtil::removeTimeZoneOffset(filters.parmOffRentStartDateTime(), DateTimeUtil::getUserPreferredTimeZone()) : DateTimeUtil::minValue();
            TransDateTime queryEndDateTime = filters.parmOffRentEndDateTime() ? DateTimeUtil::removeTimeZoneOffset(filters.parmOffRentEndDateTime(), DateTimeUtil::getUserPreferredTimeZone()) : DateTimeUtil::maxValue();

            queryDateTimeRange.value(SysQuery::range(queryStartDateTime, queryEndDateTime));
        }
        else
        {
            qbdsRentalDateTimes.clearRange(fieldNum(RORRentalDateTimes, OffRentDateTime));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyWarehouseFilter</Name>
				<Source><![CDATA[
    protected void applyWarehouseFilter()
    {
        if (filters.parmWarehouseIds())
        {
            filtersProvided = true;

            SetEnumerator inventLocSetEnum = this.getFilterValueSet(filters.parmWarehouseIds()).getEnumerator();

            while (inventLocSetEnum.moveNext())
            {
                qbdsInventDim.addRange(fieldNum(InventDim, InventLocationId)).value(SysQuery::value(inventLocSetEnum.current()));
            }
        }
        else
        {
            qbdsInventDim.clearRange(fieldNum(InventDim, InventLocationId));
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterValueSet</Name>
				<Source><![CDATA[
    private Set getFilterValueSet(str _filterValuesStr)
    {
        Set filterValuesSet = new Set(Types::String);

        if (_filterValuesStr)
        {
            container valuesCon = str2con(_filterValuesStr, ';');

            int counter = 1;
            int containerLen = conLen(valuesCon);

            while (counter <= containerLen)
            {
                Str valueCur = conPeek(valuesCon, counter);

                if (!filterValuesSet.in(valueCur))
                {
                    filterValuesSet.add(valueCur);
                }

                counter++;
            }
        }

        return filterValuesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRentalTypeFilter</Name>
				<Source><![CDATA[
    protected void applyRentalTypeFilter()
    {
        if (filters.parmRentalTypes())
        {
            filtersProvided = true;

            SetEnumerator rentalTypeSetEnum = this.getFilterValueSet(filters.parmRentalTypes()).getEnumerator();

            while (rentalTypeSetEnum.moveNext())
            {
                qbdsPurchLine.addRange(fieldNum(PurchLine, BOBRentalTypeId)).value(SysQuery::value(rentalTypeSetEnum.current()));
            }
        }
        else
        {
            qbdsPurchLine.clearRange(fieldNum(PurchLine, BOBRentalTypeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInventSerialFilter</Name>
				<Source><![CDATA[
    protected void applyInventSerialFilter()
    {
        if (filters.parmInventSerialIds())
        {
            filtersProvided = true;

            SetEnumerator inventSerialSetEnum = this.getFilterValueSet(filters.parmInventSerialIds()).getEnumerator();

            while (inventSerialSetEnum.moveNext())
            {
                qbdsInventDim.addRange(fieldNum(InventDim, InventSerialId)).value(SysQuery::value(inventSerialSetEnum.current()));
            }
        }
        else
        {
            qbdsInventDim.clearRange(fieldNum(InventDim, InventSerialId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySubStatusFilter</Name>
				<Source><![CDATA[
    protected void applySubStatusFilter()
    {
        container subStatusesCon = str2con(filters.parmSubStatuses(), ';');
        
        int containerLen = conLen(subStatusesCon);

        if (containerLen > 0)
        {
            SysDictEnum dictEnum = new SysDictEnum(enumNum(BOBRentalSubStatus));
            QueryBuildRange queryFilterRange = SysQuery::findOrCreateRange(qbdsPurchLine, fieldNum(PurchLine, BOBRentalSubStatus));
            str strValue = '((';

            int counter = 1;
            while (counter <= containerLen)
            {
                str subStatus = conPeek(subStatusesCon, counter);

                if (subStatus == "")
                {
                    qbdsPurchLine.clearRange(fieldNum(PurchLine, BOBRentalSubStatus));
                    return;
                }
                else
                {

                    strValue += strFmt('%1 == %2', fieldStr(PurchLine, BOBRentalSubStatus), queryValue(dictEnum.symbol2Value(subStatus)));

                    if (counter != containerLen)
                    {
                        strValue += ') || (';
                    }
                }

                counter++;
            }

            strValue += '))';

            queryFilterRange.value(strValue);
        }
        else
        {
            qbdsPurchLine.clearRange(fieldNum(PurchLine, BOBRentalSubStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSubRentalOrderLines</Name>
				<Source><![CDATA[
    public boolean populateSubRentalOrderLines(DNRTmpSubRentalLine _tmpSubRentalLine)
    {
        QueryRun queryRun = new QueryRun(this.buildQuery());

        delete_from _tmpSubRentalLine;

        if (!filtersProvided)
        {
            warning("@DNR:AtLeastOneFilterMustBeProvided");

            return false;
        }

        RecordInsertList tmpSubRentalLineInsertList = new RecordInsertList(tableNum(DNRTmpSubRentalLine), false, false, false, false, false, _tmpSubRentalLine);

        while (queryRun.next())
        {
            PurchLine           purchLine = queryRun.get(tableNum(PurchLine));
            InventDim           inventDim = queryRun.get(tableNum(InventDim));
            RORRentalDateTimes  rentalDateTimes = queryRun.get(tableNum(RORRentalDateTimes));
            BOBObjectTable      objectTable = queryRun.get(tableNum(BOBObjectTable));

            _tmpSubRentalLine.clear();
            _tmpSubRentalLine.initValue();

            _tmpSubRentalLine.RentalTypeId = purchLine.BOBRentalTypeId;
            _tmpSubRentalLine.ObjectId = objectTable.ObjectId;
            _tmpSubRentalLine.OrderAccount = purchLine.orderAccount();
            _tmpSubRentalLine.PurchId = purchLine.PurchId;
            _tmpSubRentalLine.LineNumber = purchLine.LineNumber;
            _tmpSubRentalLine.RentalSubStatus = purchLine.BOBRentalSubStatus;
            _tmpSubRentalLine.Back2Back = purchLine.DNRBack2Back;
            _tmpSubRentalLine.InventTransId = purchLine.InventTransId;
            _tmpSubRentalLine.DeliveryPostalAddress = purchLine.deliveryAddress().Address;
            _tmpSubRentalLine.InventSerialId = inventDim.inventSerialId;
            _tmpSubRentalLine.OnRentDateTime = rentalDateTimes.OnRentDateTime;
            _tmpSubRentalLine.ExpectedOffRentDateTime = rentalDateTimes.ExpectedOffRentDateTime;
            _tmpSubRentalLine.OffRentDateTime = rentalDateTimes.OffRentDateTime;

            tmpSubRentalLineInsertList.add(_tmpSubRentalLine);
        }

        tmpSubRentalLineInsertList.insertDatabase();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRentalOrderLines</Name>
				<Source><![CDATA[
    public void populateRentalOrderLines(DNRTmpRentalLine _tmpRentalLine, DNRTmpSubRentalLine _tmpSubRentalLine)
    {
        SalesLine salesLine;
        RORRentalDateTimes rentalDateTimes;
        BOBObjectTable  objectTable;
        InventDim inventDim;

        delete_from _tmpRentalLine;

        RecordInsertList tmpRentalLineInsertList = new RecordInsertList(tableNum(DNRTmpRentalLine), false, false, false, false, false, _tmpRentalLine);

        if (_tmpSubRentalLine.RecId && _tmpSubRentalLine.InventSerialId)
        {
            while select salesLine
            join inventDim
            where salesLine.InventDimId == inventDim.InventDimId
            && inventDim.inventSerialId == _tmpSubRentalLine.InventSerialId
                join rentalDateTimes
                where rentalDateTimes.RefRecId == salesLine.RecId
                && rentalDateTimes.RefTableId == salesLine.TableId
            {
                _tmpRentalLine.clear();
                _tmpRentalLine.initValue();

                _tmpRentalLine.SalesId = salesLine.SalesId;
                _tmpRentalLine.LineNum = salesLine.LineNum;
                _tmpRentalLine.RentalSubStatus = salesLine.BOBRentalSubStatus;
                _tmpRentalLine.OnRentDateTime = rentalDateTimes.OnRentDateTime;
                _tmpRentalLine.OffRentDateTime = rentalDateTimes.OffRentDateTime;
                _tmpRentalLine.ExpectedOffRentDateTime = rentalDateTimes.ExpectedOffRentDateTime;

                tmpRentalLineInsertList.add(_tmpRentalLine);
            }

            tmpRentalLineInsertList.insertDatabase();
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>