<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjAdjustmentUpdateClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjAdjustmentUpdate))]
public final class DNRProjAdjustmentUpdateClass_Extension
{
    private ProjParameters parameters = ProjParameters::find();
    private List invoiceIdList = new List(Types::String);

    // chain-of-command wrapper methods

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustDeleteJournal</Name>
				<Source><![CDATA[
    protected boolean mustDeleteJournal()
    {
        boolean ret = next mustDeleteJournal();
        return ret && journalTable.JournalType != ProjJournalType::Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeleteJournalTransaction</Name>
				<Source><![CDATA[
    protected boolean mustDeleteJournalTransaction()
    {
        next mustDeleteJournalTransaction();
        return journalTable.JournalType != ProjJournalType::Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjAdjustmentCreateDiffererenceFromExistingProjAdjustment</Name>
				<Source><![CDATA[
    protected boolean checkProjAdjustmentCreateDiffererenceFromExistingProjAdjustment(TmpProjAdjustmentCreate _tmpProjAdjustmentCreateLocal)
    {
        boolean ret = next checkProjAdjustmentCreateDiffererenceFromExistingProjAdjustment(_tmpProjAdjustmentCreateLocal);

        return (ret || tmpProjAdjustment.WPPResourceId != _tmpProjAdjustmentCreateLocal.WPPResourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    void createJournal(ProjAdjustmentType _adjustmentType)
    {
        next createJournal(_adjustmentType);

        if (journalTable && journalTable.JournalType == ProjJournalType::Hour)
        {
            journalTable.Posted = NoYes::Yes;
            journalTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransInsert</Name>
				<Source><![CDATA[
    public void journalTransInsert(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate)
    {
        next journalTransInsert(_tmpProjAdjustmentCreate);

        if (journalTable.JournalType == ProjJournalType::Hour)
        {
            ProjJournalTrans journalTransOrig;

            select firstOnly RecId, TableId from journalTransOrig
            where journalTransOrig.TransId == _tmpProjAdjustmentCreate.TransID;
    
            if (journalTransOrig)
            {
                WPPWorkOrderLineHourTransLink workOrderLineHourTransLink = WPPWorkOrderLineHourTransLink::findReference(journalTransOrig.TableId, journalTransOrig.RecId);
                journalTrans.WPPCreateWorkOrderLineHourTrans(workOrderLineHourTransLink.WorkOrderLineRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transEmplNew</Name>
				<Source><![CDATA[
    void transEmplNew(TmpProjAdjustmentCreate  _tmpProjAdjustmentCreate)
    {
        ProjEmplTrans projEmplTransOrig = ProjEmplTrans::find(_tmpProjAdjustmentCreate.TransID);
        if(projEmplTransOrig)
        {
            _tmpProjAdjustmentCreate.WPPTmpResourceId = projEmplTransOrig.WPPResourceId;
        }

        lineNum++;
        this.journalTransInsert(_tmpProjAdjustmentCreate);

        next transEmplNew(_tmpProjAdjustmentCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmParameters</Name>
				<Source><![CDATA[
    // extension methods

    public ProjParameters WPPParmParameters(ProjParameters _parameters = parameters)
    {
        parameters = _parameters;
        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmInvoiceIdList</Name>
				<Source><![CDATA[
    public List WPPparmInvoiceIdList(List _invoiceIdList = invoiceIdList)
    {
        invoiceIdList = _invoiceIdList;
        return invoiceIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPupdateInvoiceStatus</Name>
				<Source><![CDATA[
    public void WPPupdateInvoiceStatus(List _invoiceIdList)
    {
        WPPInvoiceStatusUpdate invoiceStatusUpdate;
    
        invoiceStatusUpdate = WPPInvoiceStatusUpdate::construct(WPPInvoiceStatusUpdateTrigger::Adjustment);
        invoiceStatusUpdate.parmReferenceList(_invoiceIdList);
        invoiceStatusUpdate.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>