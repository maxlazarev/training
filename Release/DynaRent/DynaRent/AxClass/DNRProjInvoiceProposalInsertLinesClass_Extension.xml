<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjInvoiceProposalInsertLinesClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjInvoiceProposalInsertLines))]
public final class DNRProjInvoiceProposalInsertLinesClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createProjProposalJourCreateParameters</Name>
				<Source><![CDATA[
    protected ProjProposalJourCreateParameters createProjProposalJourCreateParameters(
        ProjTable                 _projTable,
        ProjInvoiceType           _projInvoiceType,
        CurrencyCode              _currencyId,
        ProjFundingSourceRefId    _projFundingSourceRefId,
        InvoiceDate               _invoiceDate,
        InterCompanyPosted        _interCompanyPosted,
        PSAInvoiceMethod          _psaInvoiceMethod,
        PlTaxPeriodPaymentCode    _taxPeriodPaymentCode,
        DimensionDefault          _defaultDimension,
        ExchRate                  _exchRate)
    {
        ProjProposalJourCreateParameters ret = next createProjProposalJourCreateParameters(
            _projTable,
            _projInvoiceType,
            _currencyId,
            _projFundingSourceRefId,
            _invoiceDate,
            _interCompanyPosted,
            _psaInvoiceMethod,
            _taxPeriodPaymentCode,
            _defaultDimension,
            _exchRate);
        
        ProjInvoiceProposalCreateLinesParams proposalCreateLinesParams = projInvoiceProposalCreateLines.parmProposalCreateLinesParams();

        ret.INVParmCalculationDateTime(proposalCreateLinesParams.INVparmCalculationDateTime()); // extension class
        ret.INVParmIncludeCredits(proposalCreateLinesParams.INVparmIncludeCredits()); // extension class
        ret.INVParmIncludeUninvoiced(proposalCreateLinesParams.INVparmIncludeUninvoiced()); // extension class

        ret.DNRParmProposalCreateLinesParams(projInvoiceProposalCreateLines.parmProposalCreateLinesParams());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoice</Name>
				<Source><![CDATA[
    protected void updateInvoice()
    {
        // When doProposal is executed then we know if new line(s) OnAccount need to be created.
        // Create reversal onAccount trans if in LineProperty of transaction/rentalLine option RORToBeReversed is checked.
        this.INVCreateReversalOnAccTrans(true);

        next updateInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVparmProjInvoiceTable</Name>
				<Source><![CDATA[
    // extension methods

    public ProjInvoiceTable INVparmProjInvoiceTable()
    {
        return projProposalJour.projInvoiceTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVparmProjProposalJour</Name>
				<Source><![CDATA[
    public ProjProposalJour INVparmProjProposalJour()
    {
        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSkipReversallOnAccount4NoAmount</Name>
				<Source><![CDATA[
    public boolean INVSkipReversallOnAccount4NoAmount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCreateReversalOnAccTrans</Name>
				<Source><![CDATA[
    private void INVCreateReversalOnAccTrans(boolean _createProposal = false)
    {
        ttsbegin;
    
        INVFixedPriceInvoicing fixedPriceInvoicing = INVFixedPriceInvoicing::newProposalInsertLines(this);
    
        fixedPriceInvoicing.initMaps();
    
        fixedPriceInvoicing.INVFillInMap();
    
        MapEnumerator mapEnumerator = fixedPriceInvoicing.getOpositeAmountsMap().getEnumerator();
    
        while (mapEnumerator.moveNext())
        {
            TaxGroup taxGroupId;
            TaxItemGroup taxItemGroupId;
            int controlTableNum;
            DimensionDefault defaultDimension;
            [taxGroupId, taxItemGroupId, controlTableNum, defaultDimension] = mapEnumerator.currentKey();

            MarkupAmount markupAmount;
            ProjProposalId proposalId;
            RecId fundingSource;
            [markupAmount, proposalId, fundingSource] = mapEnumerator.currentValue();
    
            if (markupAmount == 0 && this.INVSkipReversallOnAccount4NoAmount())
            {
                continue;
            }
            
            ProjOnAccTransSale projOnAccTransSaleLocal;
            switch (controlTableNum)
            {
                //I use in key tablenum(ProjOnAccTrans) to distinguish itemTransaction related to RentalOrder and InventoryJournal.
                case tableNum(ProjOnAccTrans) :
                projOnAccTransSaleLocal = fixedPriceInvoicing.INVCreateOnAccountFromRentalLines(markupAmount,
                                                           taxGroupId,
                                                           taxItemGroupId,
                                                           proposalId,
                                                           fundingSource);
                    break;
    
                case tableNum(ProjEmplTrans) :
                projOnAccTransSaleLocal = fixedPriceInvoicing.INVCreateOnAccountFromEmplTrans(markupAmount,
                                                         taxGroupId,
                                                         taxItemGroupId,
                                                         proposalId,
                                                         fundingSource,
                                                         defaultDimension);
                    break;
    
                case tableNum(ProjCostTrans) :
                projOnAccTransSaleLocal = fixedPriceInvoicing.INVCreateOnAccountFromCostTrans(markupAmount,
                                                         taxGroupId,
                                                         taxItemGroupId,
                                                         proposalId,
                                                         fundingSource);
                    break;
    
                case tableNum(ProjItemTrans) :
                projOnAccTransSaleLocal = fixedPriceInvoicing.INVCreateOnAccountFromItemTrans(markupAmount,
                                                         taxGroupId,
                                                         taxItemGroupId,
                                                         proposalId,
                                                         fundingSource);
                    break;
    
                case tableNum(ProjRevenueTrans) :
                projOnAccTransSaleLocal = fixedPriceInvoicing.INVCreateOnAccountFromRevenueTrans(markupAmount,
                                                            taxGroupId,
                                                            taxItemGroupId,
                                                            proposalId,
                                                            fundingSource);
                    break;
            }
    
            if (_createProposal)
            {
                this.doOnAccount(ProjProposalJour::find(proposalId).ProjInvoiceProjId, projOnAccTransSaleLocal.RecId);
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>