<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBObjectTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete("DNRDeletedObjects01_2020, Form BOBObjectTableListPage has been made obsolete. Use BOBObjectTable instead.", false)]
public class BOBObjectTableListPageInteraction extends ListPageInteraction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>includeInOnHandOverview</Name>
				<Source><![CDATA[
    private boolean includeInOnHandOverview(BOBObjectTable   _objectTable)
    {
        BOBPostingPolicy    postingPolicy;
        BOBRentalType       rentalType;
    
        select firstonly RecId from postingPolicy
        where postingPolicy.IncludeInAvailabilityOverview
            exists join rentalType
            where rentalType.PostingPolicyRecId == postingPolicy.RecId
            &&    rentalType.RentalTypeId       == _objectTable.RentalTypeId;
    
        return postingPolicy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2020, Form BOBObjectTableListPage has been made obsolete. Use BOBObjectTable instead.", false)]
    public void initialized()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2020, Form BOBObjectTableListPage has been made obsolete. Use BOBObjectTable instead.", false)]
    public void initializeQuery(Query _query)
    {
        ListPageArgs args = this.listPage().listPageArgs();
    
        if (args)
        {
            QueryBuildRange qbrCategory = _query.dataSourceTable(tableNum(BOBObjectTable)).addRange(fieldNum(BOBObjectTable, Category));

            switch(args.menuItemName())
            {
                case menuitemDisplayStr(BOBObjectTableListPageRental):
                    qbrCategory.value(SysQuery::value(BOBObjectCategory::Rental));
                    break;
    
                case menuitemDisplayStr(BOBObjectTableListPageExternal):
                    qbrCategory.value(SysQuery::value(BOBObjectCategory::External));
                    break;
    
                case menuitemDisplayStr(BOBObjectTableListPageBulk):
                    QueryBuildDataSource qbdsRentalType = _query.dataSourceTable(tableNum(BOBObjectTable)).addDataSource(tableNum(BOBRentalType));
                    qbdsRentalType.addLink(fieldNum(BOBObjectTable, RentalTypeId), fieldNum(BOBRentalType, RentalTypeId));
                    qbdsRentalType.joinMode(JoinMode::ExistsJoin);
                    qbdsRentalType.addRange(fieldNum(BOBRentalType, Classification)).value(SysQuery::value(BOBRentalTypeClassification::Bulk));
                    break;
            }
        }
    
        super(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2020, Form BOBObjectTableListPage has been made obsolete. Use BOBObjectTable instead.", false)]
    public void selectionChanged()
    {
        ListPage         listPage;
        BOBObjectTable   objectTable;
        BOBObjectView    objectView;
        BOBRentalType    rentalType;
        BOBPostingPolicy postingPolicy;
        boolean          isInternalOrExternal;
        boolean          isExternalOrSubRental;
        boolean          enableChangeOwner;
        boolean          enableChangeDepot;
        boolean          onRentDatesOK;
        boolean          isSerialized;
        boolean          isPendingOrRentalOrInternal;
        boolean          isBulk;
        ;
    
        listPage      = this.listPage();
        objectTable   = listPage.activeRecord(queryDataSourceStr(BOBObjectTableListPageQuery, ObjectTable));

        if (objectTable)
        {
            select firstonly FirstOnRentDate, LastOnRentDate, PhysicalOwner, Depot, DepotEndDate from objectView
            where objectView.ObjectId == objectTable.ObjectId
                join Classification from rentalType
                where rentalType.RentalTypeId == objectTable.RentalTypeId
                    outer join IncludeInAvailabilityOverview from postingPolicy
                    where postingPolicy.RecId == rentalType.PostingPolicyRecId;
        }

        isBulk                      = (rentalType.Classification == BOBRentalTypeClassification::Bulk);
        isExternalOrSubRental       = (objectTable.Category == BOBObjectCategory::External || objectTable.Category == BOBObjectCategory::SubRental);
        isInternalOrExternal        = (objectView.Category == BOBObjectCategory::Internal || objectView.Category == BOBObjectCategory::External);
        onRentDatesOK               = ((objectView.FirstOnRentDate &&  objectView.LastOnRentDate) || (!objectView.FirstOnRentDate && !objectView.LastOnRentDate));
        isSerialized                = (rentalType.Classification == BOBRentalTypeClassification::Serialized);
        isPendingOrRentalOrInternal = ((objectView.Category == BOBObjectCategory::Pending || objectView.Category == BOBObjectCategory::Internal || objectView.Category == BOBObjectCategory::Rental));

        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeLocationButton), !isBulk);
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeOwnerButton), ((!objectView.Depot || objectView.DepotEndDate) && onRentDatesOK && !isBulk));
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeAvailabilityButton), !isBulk);
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeDatesButton), (!isInternalOrExternal && !isBulk));
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeRentalTypeButton), !isBulk);
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeDepotButton), (!isInternalOrExternal && objectView.PhysicalOwner && objectView.FirstOnRentDate && !isBulk));
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeOrganizationPartyButton), (isExternalOrSubRental && !isBulk));
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, BOBRentalInventOnHand), postingPolicy.IncludeInAvailabilityOverview);
        listPage.actionPaneControlEnabled(formControlStr(BOBObjectTableListPage, ChangeFleetNum), (isPendingOrRentalOrInternal && isSerialized));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>