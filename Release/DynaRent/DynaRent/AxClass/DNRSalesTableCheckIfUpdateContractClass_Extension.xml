<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesTableCheckIfUpdateContractClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesTableCheckIfUpdateContract))]
public final class DNRSalesTableCheckIfUpdateContractClass_Extension
{
    private boolean checkPreparation;
    private boolean checkOutbound;
    private boolean checkBuild;
    private boolean checkEventStart;
    private boolean checkEventEnd;
    private boolean checkStrike;
    private boolean checkInbound;
    private boolean checkReturnNote;
    private boolean checkInspection;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        checkPreparation,
        checkOutbound,
        checkBuild,
        checkEventStart,
        checkEventEnd,
        checkStrike,
        checkInbound,
        checkReturnNote,
        checkInspection
    #endmacro

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newCheckAll</Name>
				<Source><![CDATA[
    public static SalesTableCheckIfUpdateContract newCheckAll()
    {
        SalesTableCheckIfUpdateContract salesTableCheckIfUpdateContract = next newCheckAll();

        salesTableCheckIfUpdateContract.RORparmCheckPreparation(true);
        salesTableCheckIfUpdateContract.RORparmCheckOutbound(true);
        salesTableCheckIfUpdateContract.RORparmCheckBuild(true);
        salesTableCheckIfUpdateContract.RORparmCheckEventStart(true);
        salesTableCheckIfUpdateContract.RORparmCheckEventEnd(true);
        salesTableCheckIfUpdateContract.RORparmCheckStrike(true);
        salesTableCheckIfUpdateContract.RORparmCheckInbound(true);
        salesTableCheckIfUpdateContract.RORparmCheckReturnNote(true);
        salesTableCheckIfUpdateContract.RORparmCheckInspection(true);

        return salesTableCheckIfUpdateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPack</Name>
				<Source><![CDATA[
    // extension methods

    private container DNRPack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUnpack</Name>
				<Source><![CDATA[
    private boolean DNRUnpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch(version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckBuild</Name>
				<Source><![CDATA[
    public boolean RORparmCheckBuild(boolean _checkBuild = checkBuild)
    {
        checkBuild = _checkBuild;
        return checkBuild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckEventEnd</Name>
				<Source><![CDATA[
    public boolean RORparmCheckEventEnd(boolean _checkEventEnd = checkEventEnd)
    {
        checkEventEnd = _checkEventEnd;
        return checkEventEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckEventStart</Name>
				<Source><![CDATA[
    public boolean RORparmCheckEventStart(boolean _checkEventStart = checkEventStart)
    {
        checkEventStart = _checkEventStart;
        return checkEventStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckInbound</Name>
				<Source><![CDATA[
    public boolean RORparmCheckInbound(boolean _checkInbound = checkInbound)
    {
        checkInbound = _checkInbound;
        return checkInbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckInspection</Name>
				<Source><![CDATA[
    public boolean RORparmCheckInspection(boolean _checkInspection = checkInspection)
    {
        checkInspection = _checkInspection;
        return checkInspection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckOutbound</Name>
				<Source><![CDATA[
    public boolean RORparmCheckOutbound(boolean _checkOutbound = checkOutbound)
    {
        checkOutbound = _checkOutbound;
        return checkOutbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckPreparation</Name>
				<Source><![CDATA[
    public boolean RORparmCheckPreparation(boolean _checkPreparation = checkPreparation)
    {
        checkPreparation = _checkPreparation;
        return checkPreparation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckReturnNote</Name>
				<Source><![CDATA[
    public boolean RORparmCheckReturnNote(boolean _checkReturnNote = checkReturnNote)
    {
        checkReturnNote = _checkReturnNote;
        return checkReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCheckStrike</Name>
				<Source><![CDATA[
    public boolean RORparmCheckStrike(boolean _checkStrike = checkStrike)
    {
        checkStrike = _checkStrike;
        return checkStrike;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_pack_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(classStr(SalesTableCheckIfUpdateContract), methodStr(SalesTableCheckIfUpdateContract, pack))]
    public static void DNREvent_pack_post(XppPrePostArgs _args)
    {
        SalesTableCheckIfUpdateContract hostObject = _args.getThis() as SalesTableCheckIfUpdateContract;
        SysPackExtensions::pack(_args, classStr(DNRSalesTableCheckIfUpdateContractClass_Extension), hostObject.DNRPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_unpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(SalesTableCheckIfUpdateContract), methodStr(SalesTableCheckIfUpdateContract, unpack))]
    public static void DNREvent_unpack_post(XppPrePostArgs _args)
    {
        SalesTableCheckIfUpdateContract hostObject  = _args.getThis() as SalesTableCheckIfUpdateContract;
        container                       DNRState    = SysPackExtensions::unpack(_args, classStr(DNRSalesTableCheckIfUpdateContractClass_Extension));

        if (!hostObject.DNRUnpack(DNRState))
        {
            _args.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>