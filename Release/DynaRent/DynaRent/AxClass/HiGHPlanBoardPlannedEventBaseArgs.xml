<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanBoardPlannedEventBaseArgs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to marshall data between the server side HiGHPlanBoard control and the browser.
/// </summary>
[DataContractAttribute]
class HiGHPlanBoardPlannedEventBaseArgs extends FormDataContract
{
    //Member variables
    str         id                  = '';   //PlannedEventId
    str         rowItemId           = '';   //Id per row in chart
    str         eventId             = '';   //Unique label designating an event to be planned
    utcdatetime startDateTime;              //Actual start date time
    utcdatetime endDateTime;                //Actual end date time
    int         eventColor          = 0;    //Event color
    str         cellContent         = '';   //HTML rich cell content
    str         icons               = '';   //Icons to be added (TODO: This will become a List of HiGHPLanBoardImages WPLO)
    boolean     allowResize         = true;
    boolean     allowDrag           = true;
    int         lineNum             = 0;
    RefTableId  refTableId          = 0;
    RefRecId    refRecId            = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('PlanningId')]
    public str parmId(str _id = id)
    {
        if (!prmIsDefault(_id))
        {
            id = _id;
        }
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RowItemId')]
    public str parmRowItemId(str _rowItemId = rowItemId)
    {
        if (!prmIsDefault(_rowItemId))
        {
            rowItemId = _rowItemId;
        }
        return rowItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EventId')]
    public str parmEventId(str _eventId = eventId)
    {
        if (!prmIsDefault(_eventId))
        {
            eventId = _eventId;
        }
        return eventId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    [DataMemberAttribute('StartDateTime')]
    public utcdatetime parmStartDateTime(utcdatetime _startDateTime = startDateTime)
    {
        if (!prmIsDefault(_startDateTime))
        {
            startDateTime = _startDateTime;
        }
        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDateTime</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EndDateTime')]
    public utcdatetime parmEndDateTime(utcdatetime _endDateTime = endDateTime)
    {
        if (!prmIsDefault(_endDateTime))
        {
            endDateTime = _endDateTime;
        }
        return endDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventColor</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EventColor')]
    public int parmEventColor(int _eventColor = eventColor)
    {
        if (!prmIsDefault(_eventColor))
        {
            eventColor = _eventColor;
        }
        return eventColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCellContent</Name>
				<Source><![CDATA[
    [DataMemberAttribute('CellContent')]
    public str parmCellContent(str _cellContent = cellContent)
    {
        if (!prmIsDefault(_cellContent))
        {
            cellContent = _cellContent;
        }
        return cellContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIcons</Name>
				<Source><![CDATA[
    [DataMemberAttribute('Icons')]
    public str parmIcons(str _icons = icons)
    {
        if (!prmIsDefault(_icons))
        {
            icons = _icons;
        }
        return icons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowResize</Name>
				<Source><![CDATA[
    [DataMemberAttribute('AllowResize')]
    public boolean parmAllowResize(boolean _allowResize = allowResize)
    {
        if (!prmIsDefault(_allowResize))
        {
            allowResize = _allowResize;
        }
        return allowResize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowDrag</Name>
				<Source><![CDATA[
    [DataMemberAttribute('AllowDrag')]
    public boolean parmAllowDrag(boolean _allowDrag = allowDrag)
    {
        if (!prmIsDefault(_allowDrag))
        {
            allowDrag = _allowDrag;
        }
        return allowDrag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    [DataMemberAttribute('LineNum')]
    public int parmLineNum(int _lineNum = lineNum)
    {
        if (!prmIsDefault(_lineNum))
        {
            lineNum = _lineNum;
        }
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RefTableId')]
    public int parmRefTableId(int _refTableId = refTableId)
    {
        if (!prmIsDefault(_refTableId))
        {
            refTableId = _refTableId;
        }
        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RefRecId')]
    public int64 parmRefRecId(int64 _refRecId = refRecId)
    {
        if (!prmIsDefault(_refRecId))
        {
            refRecId = _refRecId;
        }
        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new object, and fills it with the specified parameters
    /// </summary>
    /// <returns>The created HiGHPlanBoardPlannedEvent object</returns>
    public static HiGHPlanBoardPlannedEventBaseArgs newParameters(str _id, str _rowItemId, str _eventId, utcdatetime _startDateTime, utcdatetime _endDateTime, RefTableId _refTableId = 0, RefRecId _refRecId = 0, int _eventColor = 0, str _cellContent = '', str _icons = '', boolean _allowResize = true, boolean _allowDrag = true)
    {
        HiGHPlanBoardPlannedEventBaseArgs plannedEvent = new HiGHPlanBoardPlannedEventBaseArgs();
        plannedEvent.parmId(_id);
        plannedEvent.parmRowItemId(_rowItemId);
        plannedEvent.parmEventId(_eventId);
        plannedEvent.parmStartDateTime(_startDateTime);
        plannedEvent.parmEndDateTime(_endDateTime);
        plannedEvent.parmEventColor(_eventColor);
        plannedEvent.parmCellContent(_cellContent);
        plannedEvent.parmIcons(_icons);
        plannedEvent.parmAllowResize(_allowResize);
        plannedEvent.parmAllowDrag(_allowDrag);
        plannedEvent.parmRefTableId(_refTableId);
        plannedEvent.parmRefRecId(_refRecId);

        return plannedEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParametersFromPlannedEventObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new object, and fills it with the specified parameters
    /// </summary>
    /// <returns>The created HiGHPlanBoardPlannedEvent object</returns>
    public static HiGHPlanBoardPlannedEventBaseArgs newParametersFromPlannedEventObject(HiGHPlanBoardPlannedEvent _plannedEvent)
    {
        HiGHPlanBoardPlannedEventBaseArgs plannedEvent = new HiGHPlanBoardPlannedEventBaseArgs();
        plannedEvent.parmId(_plannedEvent.parmId());
        plannedEvent.parmRowItemId(_plannedEvent.parmRowItemId());
        plannedEvent.parmEventId(_plannedEvent.parmEventId());
        plannedEvent.parmStartDateTime(_plannedEvent.parmStartDateTime());
        plannedEvent.parmEndDateTime(_plannedEvent.parmEndDateTime());
        plannedEvent.parmEventColor(_plannedEvent.parmEventColor());
        plannedEvent.parmCellContent(_plannedEvent.parmCellContent());
        plannedEvent.parmIcons(_plannedEvent.parmIcons());
        plannedEvent.parmAllowResize(_plannedEvent.parmAllowResize());
        plannedEvent.parmAllowDrag(_plannedEvent.parmAllowDrag());
        plannedEvent.parmRefTableId(_plannedEvent.parmRefTableId());
        plannedEvent.parmRefRecId(_plannedEvent.parmRefRecId());

        return plannedEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>