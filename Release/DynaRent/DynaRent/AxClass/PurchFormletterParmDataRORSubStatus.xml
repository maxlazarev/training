<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataRORSubStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::RORSubStatus)]
class PurchFormletterParmDataRORSubStatus extends PurchFormletterParmData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common         _purchLineOrig,
                                     TradeLineRefId _tableRefId)
    {
        PurchLine       purchLineOrig = _purchLineOrig as PurchLine;
        VendDocumentLineMap   parmLine;
        PurchParmLine   localPurchParmLine;
        boolean         lineCreated = false;
        container       quantities = versioningStrategy.getLineQuantities(_purchLineOrig);
        PurchQty        purchQty = conPeek(quantities, #posNewQty);
        InventQty       inventQty = conPeek(quantities, #posNewInventQty);
        InventDimId     inventDimId;
        boolean         closed;
    
        versioningStrategy.initSourceLine(_purchLineOrig);
    
        if (_purchLineOrig.RecId
        &&  this.RORcheckCreateParmLine(_purchLineOrig))
        {
            localPurchParmLine.clear();
    
            if (this.parmInterCompanyParmId()
            && !this.parmInterCompanyParmSelectFromJournal())
            {
                parmLine = this.interCompanyParmLine(purchLineOrig);
                if (!interCompanyCompanyId)
                {
                    inventDimId = parmLine.InventDimId;
                }
                closed = parmLine.Closed;
                purchQty = this.interCompanyParmLineQty(_purchLineOrig);
                inventQty = this.interCompanyParmLineQty(_purchLineOrig, true);
            }
    
            [localPurchParmLine.ReceiveNow, localPurchParmLine.RemainBefore      , localPurchParmLine.RemainAfter]        = this.qtyPurch  (purchLineOrig, purchQty);
            [localPurchParmLine.InventNow , localPurchParmLine.RemainBeforeInvent, localPurchParmLine.RemainAfterInvent]  = this.qtyInvent (purchLineOrig, inventQty);
    
            if (closed)
            {
                localPurchParmLine.Closed = parmLine.Closed;
                localPurchParmLine.RemainAfter = 0;
                localPurchParmLine.setRemainAfterInvent();
            }
    
            if (versioningStrategy.shouldCreateParmLine(localPurchParmLine))
            {
                localPurchParmLine.ParmId     = this.parmId();
                localPurchParmLine.initFromPurchLine(purchLineOrig);
                localPurchParmLine.setLineAmount(localPurchParmLine.ReceiveNow, purchLineOrig);
                localPurchParmLine.TableRefId = _tableRefId;
                localPurchParmLine.PreviousReceiveNow = conPeek(quantities, #posPreviousQty);
                localPurchParmLine.PreviousInventNow = conPeek(quantities, #posPreviousInventQty);
    
                if (inventDimId)
                {
                    localPurchParmLine.InventDimId = inventDimId;
                }
    
                this.INVSetInvoiceDateTime(localPurchParmLine, purchLineOrig);
    
                this.insertParmLine(localPurchParmLine);
                lineCreated = true;
    
                this.allowCreateParmTable(true);
    
                #if.never //#Speedtest
                if (speedExecute_Purch)
                {
                    speedExecute_Purch.timing(SpeedPurchTiming::ParmLineInsert, strfmt(purchParmLine.parmId, purchParmLine.itemId));
                }
                #endif
            }
        }
    
        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSpecQty</Name>
				<Source><![CDATA[
    protected PurchUpdate defaultSpecQty()
    {
        return PurchUpdate::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common  _purchTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalTransBePosted(Common _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        return DocumentStatus::RORSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORcheckCreateParmLine</Name>
				<Source><![CDATA[
    protected boolean RORcheckCreateParmLine(PurchLine  _purchLine)
    {
        return (_purchLine.BOBRentalTypeId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitForRental</Name>
				<Source><![CDATA[
    protected void RORInitForRental(PurchLine _purchLine)
    {
        //this.INVParmFormLetterContract().INVSetPurchQuantity(purchQuantity, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static server PurchFormletterParmDataRORSubStatus construct()
    {
        return new PurchFormletterParmDataRORSubStatus();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>