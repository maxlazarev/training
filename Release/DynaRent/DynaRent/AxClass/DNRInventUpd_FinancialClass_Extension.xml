<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventUpd_FinancialClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpd_Financial))]
public final class DNRInventUpd_FinancialClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructAndInitializeInventoryUpdateForSalesInvoice</Name>
				<Source><![CDATA[
    protected static InventUpd_Financial constructAndInitializeInventoryUpdateForSalesInvoice(
        InventMovement         _inventMovement,
        LedgerVoucher          _ledgerVoucher,
        InvoiceId              _invoiceNum,
        SalesParmLine          _salesOrderParmLine,
        SalesParmSubLine       _salesParmSubLine,
        InventPhysicalReduction _physicalReduction,
        InventDim              _inventDimCriteria_RU ,
        InventDimParm          _inventDimParm_RU)
    {
        InventUpd_Financial ret = next constructAndInitializeInventoryUpdateForSalesInvoice(_inventMovement,
                                                                                            _ledgerVoucher,
                                                                                            _invoiceNum,
                                                                                            _salesOrderParmLine,
                                                                                            _salesParmSubLine,
                                                                                            _physicalReduction,
                                                                                            _inventDimCriteria_RU,
                                                                                            _inventDimParm_RU);
        int transSign = -_inventMovement.transSign();

        ret.parmFinancial(-_salesOrderParmLine.InventNow * transSign);
        ret.parmRemainPhysical(-_salesOrderParmLine.RemainAfterInvent * transSign);
        ret.parmFinancialUnit(-_salesOrderParmLine.DeliverNow * transSign);
        ret.parmRemainPhysicalUnit(-_salesOrderParmLine.RemainAfter * transSign);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventUpd_Physical</Name>
				<Source><![CDATA[
    protected void initializeInventUpd_Physical(InventUpd_Physical _inventUpd_Physical)
    {
        // pass this instance's isCompensatingTrans flag on to the physical instance
        _inventUpd_Physical.BOBParmIsCompensatingTrans(this.BOBParmIsCompensatingTrans());

        next initializeInventUpd_Physical(_inventUpd_Physical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdate</Name>
				<Source><![CDATA[
    protected void initUpdate()
    {
        next initUpdate();

        if (financial > 0)
        {
            physical = max(financial - movement.BOBReceived(), 0);
        }
        else if (financial < 0)
        {
            physical = min(financial - movement.BOBDeducted(), 0);
        }

        if (!movement.mustBeUnitControlled())
        {
            physicalUnit = physical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialIssue</Name>
				<Source><![CDATA[
    protected CostAmountSecCur_RU updateFinancialIssue(CostAmount _costAmountMST, CostAmountSecCur_RU _costAmountSecCur)
    {
        BOBRentalTransSyncDisposableContext rentalTransSyncContext = BOBRentalTransSyncDisposableContext::current();
        boolean             contextCreatedHere = false;
        CostAmountSecCur_RU ret;

        try
        {
            if (!rentalTransSyncContext)
            {
                rentalTransSyncContext  = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere      = true;
            }

            rentalTransSyncContext.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            using(DNRInventTransUpdateSplitDisposableContext inventTransUpdateSplitContext =
                  new DNRInventTransUpdateSplitDisposableContext(BOBInventSplitReason::ProgressStatus, BOBRentalSubStatus::Invoiced))
            {
                ret = next updateFinancialIssue(_costAmountMST, _costAmountSecCur);
            }

            rentalTransSyncContext.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                rentalTransSyncContext.dispose();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialReceipt</Name>
				<Source><![CDATA[
    protected CostAmountSecCur_RU updateFinancialReceipt(CostAmount _costAmountMST, CostAmountSecCur_RU _costAmountSecCur)
    {
        BOBRentalTransSyncDisposableContext rentalTransSyncContext = BOBRentalTransSyncDisposableContext::current();
        boolean             contextCreatedHere = false;
        CostAmountSecCur_RU ret;

        try
        {
            if (!rentalTransSyncContext)
            {
                rentalTransSyncContext  = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere      = true;
            }

            rentalTransSyncContext.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            using(DNRInventTransUpdateSplitDisposableContext inventTransUpdateSplitContext =
                  new DNRInventTransUpdateSplitDisposableContext(BOBInventSplitReason::ProgressStatus, BOBRentalSubStatus::Invoiced))
            {
                ret = next updateFinancialReceipt(_costAmountMST, _costAmountSecCur);
            }

            rentalTransSyncContext.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                rentalTransSyncContext.dispose();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>