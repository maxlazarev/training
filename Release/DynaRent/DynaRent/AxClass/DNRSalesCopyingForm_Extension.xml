<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesCopyingForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(SalesCopying))]
public final class DNRSalesCopyingForm_Extension
{
    private QueryBuildRange rangeRORTradeType;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void  init()
    {
        next init();

        CustInvoiceTrans_DNREditReasonCode.visible(salesPurchCopy == SalesPurchCopy::CreditNoteLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNReditCreditReasonCode</Name>
				<Source><![CDATA[
    // extension methods

    public DNRReasonCode DNReditCreditReasonCode(
        boolean             _set,
        Common              _line,
        Num                 _id,
        LineNum             _lineNum,
        TransDate           _transDate,
        DNRReasonCode       _creditReasonCodeId,
        Qty                 _qty,
        FormDataSource      _lineDataSource,
        PdsCWInventQty      _pdsCWQty = 0)
    {
        Object          lineDataSource = _lineDataSource;
        DNRReasonCode   creditReasonCodeId;

        this.findTmpFrmVirtual(tmpFrmVirtualLines, _line.TableId, _line.RecId);
    
        if (tmpFrmVirtualLines)
        {
            creditReasonCodeId = tmpFrmVirtualLines.RORCreditReasonCodeId;
        }
    
        if (_set)
        {
            if (!tmpFrmVirtualLines)
            {
                lineDataSource.copy(true, _line, true);
            }
    
            creditReasonCodeId = _creditReasonCodeId;
    
            // Set the field 'RORCreditReasonCodeId' before the method 'writeTmpFrmVirtual' is called.
            tmpFrmVirtualLines.RORCreditReasonCodeId = creditReasonCodeId;

            this.writeTmpFrmVirtual(tmpFrmVirtualLines,
                                       _line.TableId,
                                       _line.RecId,
                                       _id,
                                       _lineNum,
                                       _transDate,
                                       _qty,
                                       _pdsCWQty);
        }
    
        return creditReasonCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetIsCountryRegion_EU</Name>
				<Source><![CDATA[
    public boolean DNRGetIsCountryRegion_EU()
    {
        return countryRegion_EU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetIsCountryRegion_RU</Name>
				<Source><![CDATA[
    public boolean DNRGetIsCountryRegion_RU()
    {
        return countryRegion_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmCallerSalesTable</Name>
				<Source><![CDATA[
    public SalesTable DNRparmCallerSalesTable(SalesTable _callerSalesTable = callerSalesTable)
    {
        callerSalesTable = _callerSalesTable;
        return callerSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmRangeRORTradeType</Name>
				<Source><![CDATA[
    public QueryBuildRange DNRparmRangeRORTradeType(QueryBuildRange _rangeRORTradeType = rangeRORTradeType)
    {
        rangeRORTradeType = _rangeRORTradeType;
        return rangeRORTradeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmSalesPurchCopy</Name>
				<Source><![CDATA[
    public SalesPurchCopy DNRparmSalesPurchCopy(SalesPurchCopy _salesPurchCopy = salesPurchCopy)
    {
        salesPurchCopy = _salesPurchCopy;
        return salesPurchCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesTableDS_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods

    [FormDataSourceEventHandler(formDataSourceStr(SalesCopying, SalesTable), FormDataSourceEventType::Initialized)]
    public static void DNREvent_SalesTableDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        Object          hostObj             = _sender.formRun() as Object;
        SalesTable      callerSalesTable    = hostObj.DNRparmCallerSalesTable();
        
        if (callerSalesTable && callerSalesTable.SalesType == SalesType::RORRental)
        {
            _sender.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesType)).value(SysQuery::value(SalesType::RORRental));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_CustInvoiceTransDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(SalesCopying, CustInvoiceTrans), FormDataSourceEventType::Initialized)]
    public static void DNREvent_CustInvoiceTransDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        Object                  hostObj             = _sender.formRun() as Object;
        QueryBuildRange         rangeRORTradeType   = hostObj.DNRparmRangeRORTradeType();
        QueryBuildDataSource    qbdCustInvoiceTrans = _sender.query().dataSourceTable(tableNum(CustInvoiceTrans));
        
        if (!qbdCustInvoiceTrans.findRange(fieldNum(CustInvoiceTrans, RORTradeType)))
        {
            rangeRORTradeType = qbdCustInvoiceTrans.addRange(fieldNum(CustInvoiceTrans, RORTradeType));
        }
        
        rangeRORTradeType.value(enum2Value(RORTradeType::SalesPurch));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNREditReasonCodeCTRL_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(SalesCopying, CustInvoiceTrans_DNREditReasonCode), FormControlEventType::Lookup)]
    public static void DNREvent_DNREditReasonCodeCTRL_OnLookup(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormControlCancelableSuperEventArgs     args                                = _eventArgs as FormControlCancelableSuperEventArgs;
        FormStringControl                       custInvoiceTrans_DNREditReasonCode  = _sender as FormStringControl;

        DNRReasonTable::lookupType(custInvoiceTrans_DNREditReasonCode, DNRReasonType::Credit);

        // Cancel the call to 'super()' to prevent the error 'More than one form was opened at once for the lookup control'
        // from being thrown.
        args.CancelSuperCall();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>