<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderOverviewTotalsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportParameterAttribute(classstr(WPPWorkOrderReportsContract))
]
public class WPPWorkOrderOverviewTotalsDP extends SRSReportDataProviderBase
{
    WPPWorkOrderTable               workOrderTable;
    WPPWorkOrderOverviewTotalsTmp   workOrderTotalsTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkOrderExpenseTotals</Name>
				<Source><![CDATA[
    private void getWorkOrderExpenseTotals()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource qbds;
    
        LedgerJournalTrans_Project  journalTrans;
        ProjLineProperty            lineProperty;
        ProjCostTransSale           costTransSale;
    
        boolean                     addJournalTransSalesPrice;
    
        query = new query(queryStr(WPPWorkOrderOverviewExpenses));
        qbds = query.dataSourceTable(tableNum(WPPWorkOrderLine));
        qbds.addDynalink(fieldNum(WPPWorkOrderLine, WorkOrderId), workOrderTable, fieldNum(WPPWorkOrderTable, WorkOrderId));
        qbds.addRange(fieldNum(WPPWorkOrderLine, ProjId)).value(SysQuery::valueNotEmptyString());
    
        queryRun = new QueryRun(query);
    
        workOrderTotalsTmp.WorkOrderId  = workOrderTable.WorkOrderId;
        workOrderTotalsTmp.Group        = enum2int(WPPWorkOrderOverviewGroup::Expenses);
        workORderTotalsTmp.GroupName    = enum2str(WPPWorkOrderOverviewGroup::Expenses);
        workOrderTotalsTmp.Qty          = 0;
        workOrderTotalsTmp.CostAmount   = 0;
        workOrderTotalsTmp.Invoiced     = 0;
        workOrderTotalsTmp.ToBeInvoiced = 0;
        workOrderTotalsTmp.Balance      = 0;
    
        while (queryRun.next())
        {
            addJournalTransSalesPrice = true;
    
            journalTrans = queryRun.get(tableNum(LedgerJournalTrans_Project));
            lineProperty = queryRun.get(tableNum(ProjLineProperty));
    
            workOrderTotalsTmp.Qty          += journalTrans.Qty;
            workOrderTotalsTmp.CostAmount   += journalTrans.CostPrice * journalTrans.Qty;
    
            if (lineProperty.ToBeInvoiced)
            {
                while select LineAmount, TransStatus from costTransSale
                where costTransSale.TransId == journalTrans.TransId
                {
                    switch (costTransSale.TransStatus)
                    {
                        case ProjTransStatus::Invoiced:
                            workOrderTotalsTmp.Invoiced += costTransSale.LineAmount; //Fall through
    
                        default:
                            workOrderTotalsTmp.ToBeInvoiced += costTransSale.LineAmount;
                    }
    
                    addJournalTransSalesPrice = false;
                }
    
                if (addJournalTransSalesPrice)
                {
                    workOrderTotalsTmp.ToBeInvoiced += journalTrans.SalesPrice * journalTrans.Qty;
                }
            }
        }
    
        workOrderTotalsTmp.Balance = workOrderTotalsTmp.ToBeInvoiced - workOrderTotalsTmp.CostAmount;
        workOrderTotalsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderFeeTotals</Name>
				<Source><![CDATA[
    private void getWorkOrderFeeTotals()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource qbds;
    
        ProjJournalTrans        journalTrans;
        ProjLineProperty        lineProperty;
        ProjRevenueTransSale    revenueTransSale;
    
        boolean                 addJournalTransSalesPrice;
    
        query = new query(queryStr(WPPWorkOrderOverviewFees));
        qbds = query.dataSourceTable(tableNum(WPPWorkOrderLine));
        qbds.addDynalink(fieldNum(WPPWorkOrderLine, WorkOrderId), workOrderTable, fieldNum(WPPWorkOrderTable, WorkOrderId));
        qbds.addRange(fieldNum(WPPWorkOrderLine, ProjId)).value(SysQuery::valueNotEmptyString());
    
        queryRun = new QueryRun(query);
    
        workOrderTotalsTmp.WorkOrderId  = workOrderTable.WorkOrderId;
        workOrderTotalsTmp.Group        = enum2int(WPPWorkOrderOverviewGroup::Fees);
        workORderTotalsTmp.GroupName    = enum2str(WPPWorkOrderOverviewGroup::Fees);
        workOrderTotalsTmp.Qty          = 0;
        workOrderTotalsTmp.CostAmount   = 0;
        workOrderTotalsTmp.Invoiced     = 0;
        workOrderTotalsTmp.ToBeInvoiced = 0;
        workOrderTotalsTmp.Balance      = 0;
    
        while (queryRun.next())
        {
            addJournalTransSalesPrice = true;
    
            journalTrans = queryRun.get(tableNum(ProjJournalTrans));
            lineProperty = queryRun.get(tableNum(ProjLineProperty));
    
            workOrderTotalsTmp.Qty          += journalTrans.Qty;
            workOrderTotalsTmp.CostAmount   += journalTrans.CostPrice * journalTrans.Qty;
    
            if (lineProperty.ToBeInvoiced)
            {
                while select LineAmount, TransStatus from revenueTransSale
                where revenueTransSale.TransId == journalTrans.TransId
                {
                    switch (revenueTransSale.TransStatus)
                    {
                        case ProjTransStatus::Invoiced:
                            workOrderTotalsTmp.Invoiced += revenueTransSale.LineAmount;  //Fall through
    
                        default:
                            workOrderTotalsTmp.ToBeInvoiced += revenueTransSale.LineAmount;
                    }
    
                    addJournalTransSalesPrice = false;
                }
    
                if (addJournalTransSalesPrice)
                {
                    workOrderTotalsTmp.ToBeInvoiced += journalTrans.SalesPrice * journalTrans.Qty;
                }
            }
        }
    
        workOrderTotalsTmp.Balance = workOrderTotalsTmp.ToBeInvoiced - workOrderTotalsTmp.CostAmount;
        workOrderTotalsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderHourTotals</Name>
				<Source><![CDATA[
    private void getWorkOrderHourTotals()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource qbds;
    
        ProjJournalTrans    journalTrans;
        ProjLineProperty    lineProperty;
        ProjEmplTransSale   emplTransSale;
    
        boolean             addJournalTransSalesPrice;
    
        query = new query(queryStr(WPPWorkOrderOverviewHours));
        qbds = query.dataSourceTable(tableNum(WPPWorkOrderLine));
        qbds.addDynalink(fieldNum(WPPWorkOrderLine, WorkOrderId), workOrderTable, fieldNum(WPPWorkOrderTable, WorkOrderId));
        qbds.addRange(fieldNum(WPPWorkOrderLine, ProjId)).value(SysQuery::valueNotEmptyString());
    
        queryRun = new QueryRun(query);
    
        workOrderTotalsTmp.WorkOrderId  = workOrderTable.WorkOrderId;
        workOrderTotalsTmp.Group        = enum2int(WPPWorkOrderOverviewGroup::Hours);
        workORderTotalsTmp.GroupName    = enum2str(WPPWorkOrderOverviewGroup::Hours);
        workOrderTotalsTmp.Qty          = 0;
        workOrderTotalsTmp.CostAmount   = 0;
        workOrderTotalsTmp.Invoiced     = 0;
        workOrderTotalsTmp.ToBeInvoiced = 0;
        workOrderTotalsTmp.Balance      = 0;
    
        while (queryRun.next())
        {
            addJournalTransSalesPrice = true;
    
            journalTrans = queryRun.get(tableNum(ProjJournalTrans));
            lineProperty = queryRun.get(tableNum(ProjLineProperty));
    
            workOrderTotalsTmp.Qty          += journalTrans.Qty;
            workOrderTotalsTmp.TotalQty      = workOrderTotalsTmp.Qty; // Only show the total qty of the hours
            workOrderTotalsTmp.CostAmount   += journalTrans.CostPrice * journalTrans.Qty;
    
            if (lineProperty.ToBeInvoiced)
            {
                while select LineAmount, TransStatus from emplTransSale
                where emplTransSale.TransId == journalTrans.TransId
                {
                    switch (emplTransSale.TransStatus)
                    {
                        case ProjTransStatus::Invoiced:
                            workOrderTotalsTmp.Invoiced += emplTransSale.LineAmount; //Fall through
    
                        default:
                            workOrderTotalsTmp.ToBeInvoiced += emplTransSale.LineAmount;
                    }
    
                    addJournalTransSalesPrice = false;
                }
    
                if (addJournalTransSalesPrice)
                {
                    workOrderTotalsTmp.ToBeInvoiced += journalTrans.SalesPrice * journalTrans.Qty;
                }
            }
        }
    
        workOrderTotalsTmp.Balance = workOrderTotalsTmp.ToBeInvoiced - workOrderTotalsTmp.CostAmount;
        workOrderTotalsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderItemRequirementsTotals</Name>
				<Source><![CDATA[
    private void getWorkOrderItemRequirementsTotals()
    {
        ProjItemTransSale               itemTransSale;
        SalesLine                       salesLine;
        WPPWorkOrderLine                workOrderLine;
    
        boolean                 addJournalTransSalesPrice;
        workOrderTotalsTmp.WorkOrderId  = workOrderTable.WorkOrderId;
        workOrderTotalsTmp.Group        = enum2int(WPPWorkOrderOverviewGroup::ItemRequirements);
        workORderTotalsTmp.GroupName    = enum2str(WPPWorkOrderOverviewGroup::ItemRequirements);
        workOrderTotalsTmp.Qty          = 0;
        workOrderTotalsTmp.CostAmount   = 0;
        workOrderTotalsTmp.Invoiced     = 0;
        workOrderTotalsTmp.ToBeInvoiced = 0;
        workOrderTotalsTmp.Balance      = 0;
    
        while select salesLine
        where salesLine.SalesType == SalesType::ItemReq
        &&   !salesLine.InventRefId
            join WorkOrderId, LineNumber, TaskId from workOrderLine
            where workOrderLine.ProjId      == salesLine.ProjId
            &&    workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
        {
            addJournalTransSalesPrice = true;
            if (!salesLine.InventRefId)
            {
                workOrderTotalsTmp.Qty = salesLine.SalesQty;
                workOrderTotalsTmp.CostAmount = salesLine.inventTable().costPcsPrice(salesLine.InventDimId, salesLine.inventDim()) * salesLine.SalesQty;
    
                switch (itemTransSale.TransStatus)
                {
                    case ProjTransStatus::Invoiced:
                        workOrderTotalsTmp.Invoiced += salesLine.LineAmount; //Fall through
    
                    default:
                        workOrderTotalsTmp.ToBeInvoiced += salesLine.LineAmount;
                }
            }
        }
    
        workOrderTotalsTmp.Balance = workOrderTotalsTmp.ToBeInvoiced - workOrderTotalsTmp.CostAmount;
        workOrderTotalsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderItemTotals</Name>
				<Source><![CDATA[
    private void getWorkOrderItemTotals()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource qbds;
    
        InventJournalTrans  journalTrans;
        ProjLineProperty    lineProperty;
        ProjItemTransSale   itemTransSale;
    
        boolean             addJournalTransSalesPrice;
    
        query = new query(queryStr(WPPWorkOrderOverviewItems));
        qbds = query.dataSourceTable(tableNum(WPPWorkOrderLine));
        qbds.addDynalink(fieldNum(WPPWorkOrderLine, WorkOrderId), workOrderTable, fieldNum(WPPWorkOrderTable, WorkOrderId));
        qbds.addRange(fieldNum(WPPWorkOrderLine, ProjId)).value(SysQuery::valueNotEmptyString());
    
        queryRun = new QueryRun(query);
    
        workOrderTotalsTmp.WorkOrderId  = workOrderTable.WorkOrderId;
        workOrderTotalsTmp.Group        = enum2int(WPPWorkOrderOverviewGroup::Material);
        workORderTotalsTmp.GroupName    = enum2str(WPPWorkOrderOverviewGroup::Material);
        workOrderTotalsTmp.Qty          = 0;
        workOrderTotalsTmp.CostAmount   = 0;
        workOrderTotalsTmp.Invoiced     = 0;
        workOrderTotalsTmp.ToBeInvoiced = 0;
        workOrderTotalsTmp.Balance      = 0;
    
        while (queryRun.next())
        {
            addJournalTransSalesPrice = true;
    
            journalTrans = queryRun.get(tableNum(InventJournalTrans));
            lineProperty = queryRun.get(tableNum(ProjLineProperty));
    
            workOrderTotalsTmp.Qty          += journalTrans.Qty;
            workOrderTotalsTmp.CostAmount   += journalTrans.CostPrice * journalTrans.Qty;
    
            if (lineProperty.ToBeInvoiced)
            {
                while select LineAmount, TransStatus from itemTransSale
                where itemTransSale.ProjTransId == journalTrans.ProjTransId
                {
                    switch (itemTransSale.TransStatus)
                    {
                        case ProjTransStatus::Invoiced:
                            workOrderTotalsTmp.Invoiced += itemTransSale.LineAmount;  //Fall through
    
                        default:
                            workOrderTotalsTmp.ToBeInvoiced += itemTransSale.LineAmount;
                    }
    
                    addJournalTransSalesPrice = false;
                }
    
                if (addJournalTransSalesPrice)
                {
                    workOrderTotalsTmp.ToBeInvoiced += journalTrans.ProjSalesPrice * journalTrans.Qty;
                }
            }
        }
    
        workOrderTotalsTmp.Balance = workOrderTotalsTmp.ToBeInvoiced - workOrderTotalsTmp.CostAmount;
        workOrderTotalsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderPurchaseOrderTotals</Name>
				<Source><![CDATA[
    private void getWorkOrderPurchaseOrderTotals()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
    
        WPPWorkOrderLine        workOrderLine;
        PurchLine               purchLine;
        ProjLineProperty        projLineProperty;
        ProjInvoiceItem         projInvoiceItem;
        ProjItemTransCost       projItemTransCost;
        SalesLine               salesLine;
    
        query = new query(queryStr(WPPWorkOrderOverviewPurchaseOrders));
        qbds = query.dataSourceTable(tableNum(WPPWorkOrderLine));
        qbds.addDynalink(fieldNum(WPPWorkOrderLine, WorkOrderId), workOrderTable, fieldNum(WPPWorkOrderTable, WorkOrderId));
        qbds.addRange(fieldNum(WPPWorkOrderLine, ProjId)).value(SysQuery::valueNotEmptyString());
    
        queryRun = new QueryRun(query);
    
        workOrderTotalsTmp.WorkOrderId  = workOrderTable.WorkOrderId;
        workOrderTotalsTmp.Group        = enum2int(WPPWorkOrderOverviewGroup::PurchaseOrders);
        workOrderTotalsTmp.GroupName    = enum2str(WPPWorkOrderOverviewGroup::PurchaseOrders);
        workOrderTotalsTmp.Qty          = 0;
        workOrderTotalsTmp.CostAmount   = 0;
        workOrderTotalsTmp.Invoiced     = 0;
        workOrderTotalsTmp.ToBeInvoiced = 0;
        workOrderTotalsTmp.Balance      = 0;
    
        while (queryRun.next())
        {
            workOrderLine    = queryRun.get(tableNum(WPPWorkOrderLine));
            purchLine        = queryRun.get(tableNum(PurchLine));
            projLineProperty = queryRun.get(tableNum(ProjLineProperty));
    
            workOrderTotalsTmp.Qty        += purchLine.PurchQty;
            workOrderTotalsTmp.CostAmount += purchLine.LineAmount;
    
            workOrderTotalsTmp.Invoiced += purchLine.invoicedInTotal();
            salesLine = SalesLine::findInventTransId(purchLine.InventRefTransId);
            workOrderTotalsTmp.ToBeInvoiced += salesLine.LineAmount - purchLine.invoicedInTotal();
        }
    
        workOrderTotalsTmp.Balance = workOrderTotalsTmp.ToBeInvoiced + workOrderTotalsTmp.Invoiced - workOrderTotalsTmp.CostAmount;
        workOrderTotalsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderTotalsTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute(tablestr(WPPWorkOrderOverviewTotalsTmp))
    ]
    public WPPWorkOrderOverviewTotalsTmp getWorkOrderTotalsTmp()
    {
        select workOrderTotalsTmp;
        return workOrderTotalsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        WPPWorkOrderReportsContract contract;
    
        contract = this.parmDataContract() as WPPWorkOrderReportsContract;
        workOrderTable = WPPWorkOrderTable::find(contract.parmWorkOrderId());
    
        this.getWorkOrderExpenseTotals();
        this.getWorkOrderFeeTotals();
        this.getWorkOrderHourTotals();
        this.getWorkOrderItemTotals();
        this.getWorkOrderPurchaseOrderTotals();
        this.getWorkOrderItemRequirementsTotals();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>