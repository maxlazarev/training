<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPInvoiceStatusUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WPPInvoiceStatusUpdate
{
    ProjInvoiceProjId   projInvoiceProjId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist_ExpenseTransaction</Name>
				<Source><![CDATA[
    protected boolean exist_ExpenseTransaction()
    {
        ProjCostTrans       projCostTrans;
        ProjTable           projTable;
    
        select firstonly RecId from projCostTrans
            exists join projTable
            where projTable.ProjId            == projCostTrans.ProjId
            &&    projTable.ProjInvoiceProjId == projInvoiceProjId;
    
        return projCostTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist_FeeTransaction</Name>
				<Source><![CDATA[
    protected boolean exist_FeeTransaction()
    {
        ProjRevenueTrans    projRevenueTrans;
        ProjTable           projTable;
    
        select firstonly RecId from projRevenueTrans
            exists join projTable
            where projTable.ProjId            == projRevenueTrans.ProjId
            &&    projTable.ProjInvoiceProjId == projInvoiceProjId;
    
        return projRevenueTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist_HourTransaction</Name>
				<Source><![CDATA[
    protected boolean exist_HourTransaction()
    {
        ProjEmplTrans       projEmplTrans;
        ProjTable           projTable;
    
        select firstonly RecId from projEmplTrans
            exists join projTable
            where projTable.ProjId            == projEmplTrans.ProjId
            &&    projTable.ProjInvoiceProjId == projInvoiceProjId;
    
        return projEmplTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist_ItemTransaction</Name>
				<Source><![CDATA[
    protected boolean exist_ItemTransaction()
    {
        ProjItemTrans       projItemTrans;
        ProjTable           projTable;
    
        select firstonly RecId from projItemTrans
            exists join projTable
            where projTable.ProjId            == projItemTrans.ProjId
            &&    projTable.ProjInvoiceProjId == projInvoiceProjId;
    
        return projItemTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist_OnAccountTransaction</Name>
				<Source><![CDATA[
    protected boolean exist_OnAccountTransaction()
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjOnAccTrans      projOnAccTrans;
        ProjTable           projTable;
    
        select firstonly RecId from projOnAccTransSale
        where projOnAccTransSale.TransStatus == ProjTransStatus::Registered
        ||    projOnAccTransSale.TransStatus == ProjTransStatus::InvoiceProposal
            exists join projOnAccTrans
            where projOnAccTrans.TransId == projOnAccTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projOnAccTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId;
    
        return projOnAccTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existChargeable_Expense</Name>
				<Source><![CDATA[
    protected boolean existChargeable_Expense()
    {
        ProjCostTransSale   projCostTransSale;
        ProjCostTrans       projCostTrans;
        ProjTable           projTable;
        ProjLineProperty    projLineProperty;
    
        select firstonly RecId from projCostTransSale
        where projCostTransSale.TransStatus != ProjTransStatus::Adjusted
            join TableId from projCostTrans
            where projCostTrans.TransId == projCostTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projCostTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    notexists join projLineProperty
                    where projLineProperty.LinePropertyId == projCostTrans.LinePropertyId
                    &&   !projLineProperty.ToBeInvoiced;
    
        return projCostTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existChargeable_Fee</Name>
				<Source><![CDATA[
    protected boolean existChargeable_Fee()
    {
        ProjRevenueTransSale    projRevenueTransSale;
        ProjRevenueTrans        projRevenueTrans;
        ProjTable               projTable;
        ProjLineProperty        projLineProperty;
    
        select firstonly RecId from projRevenueTransSale
        where projRevenueTransSale.TransStatus != ProjTransStatus::Adjusted
            join TableId from projRevenueTrans
            where projRevenueTrans.TransId == projRevenueTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projRevenueTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    notexists join projLineProperty
                    where projLineProperty.LinePropertyId == projRevenueTrans.LinePropertyId
                    &&   !projLineProperty.ToBeInvoiced;
    
        return projRevenueTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existChargeable_Hour</Name>
				<Source><![CDATA[
    protected boolean existChargeable_Hour()
    {
        ProjEmplTransSale   projEmplTransSale;
        ProjEmplTrans       projEmplTrans;
        ProjTable           projTable;
        ProjLineProperty    projLineProperty;
    
        select firstonly RecId from projEmplTransSale
        where projEmplTransSale.TransStatus != ProjTransStatus::Adjusted
            join TableId from projEmplTrans
            where projEmplTrans.TransId == projEmplTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projEmplTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    notexists join projLineProperty
                    where projLineProperty.LinePropertyId == projEmplTrans.LinePropertyId
                    &&   !projLineProperty.ToBeInvoiced;
    
        return projEmplTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existChargeable_Item</Name>
				<Source><![CDATA[
    protected boolean existChargeable_Item()
    {
        ProjItemTransSale   projItemTransSale;
        ProjItemTrans       projItemTrans;
        ProjTable           projTable;
        ProjLineProperty    projLineProperty;
    
        select firstonly RecId from projItemTransSale
        where projItemTransSale.TransStatus != ProjTransStatus::Adjusted
            join TableId from projItemTrans
            where projItemTrans.ProjTransId == projItemTransSale.ProjTransId
                join TableId from projTable
                where projTable.ProjId            == projItemTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    notexists join projLineProperty
                    where projLineProperty.LinePropertyId == projItemTrans.LinePropertyId
                    &&   !projLineProperty.ToBeInvoiced;
    
        return projItemTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existChargeable_OnAccount</Name>
				<Source><![CDATA[
    protected boolean existChargeable_OnAccount()
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjOnAccTrans      projOnAccTrans;
        ProjTable           projTable;
    
        select firstonly RecId from projOnAccTransSale
        where projOnAccTransSale.TransStatus == ProjTransStatus::Registered
        ||    projOnAccTransSale.TransStatus == ProjTransStatus::InvoiceProposal
            exists join projOnAccTrans
            where projOnAccTrans.TransId == projOnAccTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projOnAccTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId;
    
        return projOnAccTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenChargeable_Expense</Name>
				<Source><![CDATA[
    protected boolean existOpenChargeable_Expense()
    {
        ProjCostTransSale   projCostTransSale;
        ProjCostTrans       projCostTrans;
        ProjTable           projTable;
        ProjInvoiceCost     projInvoiceCost;
        ProjLineProperty    projLineProperty;
    
        select firstonly RecId from projCostTransSale
        where projCostTransSale.TransStatus != ProjTransStatus::Adjusted
            join TableId from projCostTrans
            where projCostTrans.TransId == projCostTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projCostTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    join TableId from projLineProperty
                    where projLineProperty.LinePropertyId == projCostTrans.LinePropertyId
                    &&    projLineProperty.ToBeInvoiced
                        notexists join projInvoiceCost
                        where projInvoiceCost.TransId == projCostTrans.TransId;
    
        return projCostTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenChargeable_Fee</Name>
				<Source><![CDATA[
    protected boolean existOpenChargeable_Fee()
    {
        ProjRevenueTransSale    projRevenueTransSale;
        ProjRevenueTrans        projRevenueTrans;
        ProjTable               projTable;
        ProjInvoiceRevenue      projInvoiceRevenue;
        ProjLineProperty        projLineProperty;
    
        select firstonly RecId from projRevenueTransSale
        where projRevenueTransSale.TransStatus != ProjTransStatus::Adjusted
            join RecId from projRevenueTrans
            where projRevenueTrans.TransId == projRevenueTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projRevenueTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    join TableId from projLineProperty
                    where projLineProperty.LinePropertyId == projRevenueTrans.LinePropertyId
                    &&    projLineProperty.ToBeInvoiced
                        notexists join projInvoiceRevenue
                        where projInvoiceRevenue.TransId == projRevenueTrans.TransId;
    
        return projRevenueTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenChargeable_Hour</Name>
				<Source><![CDATA[
    protected boolean existOpenChargeable_Hour()
    {
        ProjEmplTransSale   projEmplTransSale;
        ProjEmplTrans       projEmplTrans;
        ProjTable           projTable;
        ProjInvoiceEmpl     projInvoiceEmpl;
        ProjLineProperty    projLineProperty;
    
        select firstonly RecId from projEmplTransSale
        where projEmplTransSale.TransStatus != ProjTransStatus::Adjusted
            join RecId from projEmplTrans
            where projEmplTrans.TransId == projEmplTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projEmplTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    join TableId from projLineProperty
                    where projLineProperty.LinePropertyId == projEmplTrans.LinePropertyId
                    &&    projLineProperty.ToBeInvoiced
                        notexists join projInvoiceEmpl
                        where projInvoiceEmpl.TransId == projEmplTrans.TransId;
    
        return projEmplTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenChargeable_Item</Name>
				<Source><![CDATA[
    protected boolean existOpenChargeable_Item()
    {
        ProjItemTransSale   projItemTransSale;
        ProjItemTrans       projItemTrans;
        ProjTable           projTable;
        ProjInvoiceItem     projInvoiceItem;
        ProjLineProperty    projLineProperty;
    
        select firstonly RecId from projItemTransSale
        where projItemTransSale.TransStatus != ProjTransStatus::Adjusted
            join TableId from projItemTrans
            where projItemTrans.ProjTransId == projItemTransSale.ProjTransId
                join TableId from projTable
                where projTable.ProjId            == projItemTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    join TableId from projLineProperty
                    where projLineProperty.LinePropertyId == projItemTrans.LinePropertyId
                    &&    projLineProperty.ToBeInvoiced
                        notexists join projInvoiceItem
                        where projInvoiceItem.ProjTransId == projItemTrans.ProjTransId;
    
        return projItemTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenChargeable_OnAccount</Name>
				<Source><![CDATA[
    protected boolean existOpenChargeable_OnAccount()
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjOnAccTrans      projOnAccTrans;
        ProjTable           projTable;
        ProjInvoiceOnAcc    projInvoiceOnAcc;
    
        select firstonly RecId from projOnAccTransSale
        where projOnAccTransSale.TransStatus == ProjTransStatus::Registered
        ||    projOnAccTransSale.TransStatus == ProjTransStatus::InvoiceProposal
            join TableId from projOnAccTrans
            where projOnAccTrans.TransId == projOnAccTransSale.TransId
                join TableId from projTable
                where projTable.ProjId            == projOnAccTrans.ProjId
                &&    projTable.ProjInvoiceProjId == projInvoiceProjId
                    notexists join projInvoiceOnAcc
                    where projInvoiceOnAcc.TransId == projOnAccTrans.TransId;
    
        return projOnAccTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTransList</Name>
				<Source><![CDATA[
    public JournalTransList parmJournalTransList(JournalTransList _journalTransList = null)
    {
        return _journalTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjItemTransMap</Name>
				<Source><![CDATA[
    public Map parmProjItemTransMap(Map _projItemTransMap = new Map(Types::String, Types::Record))
    {
        return _projItemTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceList</Name>
				<Source><![CDATA[
    public List parmReferenceList(List _referenceList = new List(Types::String))
    {
        return _referenceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceStatus</Name>
				<Source><![CDATA[
    protected void setInvoiceStatus(WPPInvoiceStatus    _invoiceStatus,
                                    ProjInvoiceProjId   _projInvoiceProjId)
    {
        ProjInvoiceTable    projInvoiceTable;
    
        update_recordSet projInvoiceTable
        setting WPPInvoiceStatus = _invoiceStatus
        where projInvoiceTable.ProjInvoiceProjId == _projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static server WPPInvoiceStatusUpdate construct(WPPInvoiceStatusUpdateTrigger _invoiceStatusUpdateTrigger)
    {
        WPPInvoiceStatusUpdate  invoiceStatusUpdate;
    
        switch (_invoiceStatusUpdateTrigger)
        {
            case WPPInvoiceStatusUpdateTrigger::Adjustment:
                invoiceStatusUpdate = new WPPInvoiceStatusUpdate_Adjustment();
                break;
    
            case WPPInvoiceStatusUpdateTrigger::Invoice:
                invoiceStatusUpdate = new WPPInvoiceStatusUpdate_Invoice();
                break;
    
            case WPPInvoiceStatusUpdateTrigger::Journal:
                invoiceStatusUpdate = new WPPInvoiceStatusUpdate_JournalLine();
                break;
    
            case WPPInvoiceStatusUpdateTrigger::PurchOrder:
                invoiceStatusUpdate = new WPPInvoiceStatusUpdate_PurchaseOrder();
                break;
    
            case WPPInvoiceStatusUpdateTrigger::Credit:
                invoiceStatusUpdate = new WPPInvoiceStatusUpdate_Credit();
                break;
    
            default:
                throw error(Error::missingParameter(null));
        }
    
        return invoiceStatusUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>