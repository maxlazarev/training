<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IRMCustTableVendTableNew</Name>
	<SourceCode>
		<Declaration><![CDATA[
class IRMCustTableVendTableNew
{
    // Tables
    CustTable       newCustTable;
    VendTable       newVendTable;
    Common          callerCommon;

    // Variables
    NoYes           convertToCust;
    NoYes           convertToVend;

    // Dialog
    DialogField     dialogCust;
    DialogField     dialogVend;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _common = callerCommon)
    {
        callerCommon = _common;
    
        return callerCommon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConvertToCust</Name>
				<Source><![CDATA[
    public NoYes parmConvertToCust(NoYes _convertToCust = convertToCust)
    {
        convertToCust = _convertToCust;
    
        return convertToCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConvertToVend</Name>
				<Source><![CDATA[
    public NoYes parmConvertToVend(NoYes _convertToVend = convertToVend)
    {
        convertToVend = _convertToVend;
    
        return convertToVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CustTable       custTable;
        VendTable       vendTable;
        smmBusRelTable  smmBusRelTable;
        DirPartyTable   dirPartyTable;
        CustAccount     manualCustAccount;
        VendAccount     manualVendAccount;
        boolean         continueConvert;
    
        continueConvert = true;
    
        // Possibility to fill in the Cust/Vend Account
        // when the numbersequence is manual
        if (this.parmConvertToCust() && this.parmConvertToVend()
        &&  smmParameters::isNumberSequenceManual(extendedTypeNum(CustAccount))
        &&  smmParameters::isNumberSequenceManual(extendedTypeNum(VendAccount)))
        {
            [manualCustAccount,
             manualVendAccount] = str2con(smmUtility::openAccountNumDialog(smmAccountNumToCreate::IRMCustVendAccount), ',');
    
            continueConvert = manualCustAccount != '' && manualVendAccount != '';
        }
        else
        if (this.parmConvertToCust()
        &&  smmParameters::isNumberSequenceManual(extendedTypeNum(CustAccount)))
        {
            manualCustAccount = smmUtility::openAccountNumDialog(smmAccountNumToCreate::CustAccount);
            continueConvert = manualCustAccount != '';
        }
        else
        if (this.parmConvertToVend()
        &&  smmParameters::isNumberSequenceManual(extendedTypeNum(VendAccount)))
        {
            manualVendAccount = smmUtility::openAccountNumDialog(smmAccountNumToCreate::VendAccount);
            continueConvert = manualVendAccount != '';
        }
    
        // Only continue when the number sequence is not manual
        // or when the Cust/Vend account is filled in
        if (continueConvert)
        {
            ttsBegin;
            if (this.parmConvertToCust())
            {
                if (callerCommon.TableId == tableNum(smmBusRelTable))
                {
                    smmBusRelTable = smmBusRelTable::findRec(callerCommon.RecId, true);

                    if (smmBusRelTable.canConvertToCustomer())
                    {
                        smmBusRelTable::convert2Customer(smmBusRelTable, manualCustAccount, false);
                    }
                }
                else
                {
                    dirPartyTable = callerCommon;
    
                    custTable.initValue();
                    custTable.AccountNum = manualCustAccount ? manualCustAccount : NumberSeq::newGetNum(CustParameters::numRefCustAccount()).num();
                    custTable.Party = dirPartyTable.RecId;
                    custTable.CustGroup = smmParametersTable::find().CustGroup;
                    custTable.insert();
                }
            }
    
            if (this.parmConvertToVend())
            {
                if (callerCommon.TableId == tableNum(smmBusRelTable))
                {
                    smmBusRelTable = smmBusRelTable::findRec(callerCommon.RecId, true);
                    if (smmBusRelTable.canConvertToVendor())
                    {
                        this.convertSmmBusRelTable2Vendor(smmBusRelTable, manualVendAccount);
                    }
                }
                else
                {
                    dirPartyTable = callerCommon;
    
                    vendTable.initValue();
                    vendTable.AccountNum = manualVendAccount ? manualVendAccount : NumberSeq::newGetNum(VendParameters::numRefVendAccount()).num();
                    vendTable.Party = dirPartyTable.RecId;
                    vendTable.VendGroup = smmParametersTable::find().VendGroupId;
                    vendTable.insert();
                }
            }
            ttsCommit;
        }
        // This only occurs when the number sequence is setup as manual
        else
        {
            if (!manualCustAccount && this.parmConvertToCust())
            {
                // Conversion to customer could not be completed
                error("@SYS81993");
            }
    
            if (!manualVendAccount && this.parmConvertToVend())
            {
                // Conversion to vendor could not be completed
                error("@SYS81995");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static client IRMCustTableVendTableNew construct()
    {
        return new IRMCustTableVendTableNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSmmBusRelTable2Vendor</Name>
				<Source><![CDATA[
    private void convertSmmBusRelTable2Vendor(smmBusRelTable _smmBusRelTable, VendAccount _manualVendAccount)
    {
        #OCCRetryCount
        #define.blank('')

        if(!_smmBusRelTable)
        {
            return;
        }
        
        try
        {
            VendAccount vendAccount = (smmParameters::isNumberSequenceManual(extendedTypeNum(VendAccount)) ?
                                       _manualVendAccount :
                                       #blank);

            // Convert the business relation to a vendor
            vendAccount = this.relation2Vendor(_smmBusRelTable, vendAccount);

            if(vendAccount)
            {
                smmBusRelTable smmBusRelTableLocal = smmBusRelTable::find(_smmBusRelTable.BusRelAccount,true);

                if(smmBusRelTableLocal)
                {
                    // Delete the search text as we don't use full text search for vendors
                    MCRFullTextSearch::delete(smmBusRelTableLocal);

                    // Find the vendor
                    VendTable vendTable = VendTable::find(vendAccount);

                    this.convert2CustOrVend(vendTable, smmBusRelTableLocal);
                    smmBusRelTableLocal.update(false);
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch(Exception::UpdateConflict)
        {
            if(appl.ttsLevel() == 0)
            {
                if(xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relation2Vendor</Name>
				<Source><![CDATA[
    private VendAccount relation2Vendor(smmBusRelTable _smmBusRelTable, VendAccount _vendAccount = '')
    {
        if (!_smmBusRelTable.RecId)
        {
            return '';
        }

        // Check that vend group is filled out on the business relation
        if (!_smmBusRelTable.VendGroup)
        {
            // Cannot convert to vendor because no vendor group is selected. Please select a vendor group in the General tab
            checkFailed("@SYS80328");

            return '';
        }

        ttsbegin;

        VendTable vendTable = null;
        vendTable.clear();
        vendTable.initValue();

        if (!_vendAccount)
        {
            vendTable.AccountNum        = smmParameters::getNumber(smmNumbSeqUsed::Vendor);
        }
        else
        {
            vendTable.AccountNum        = _vendAccount;
        }

        if (vendTable.AccountNum)
        {
            vendTable.initFromSmmBusRelTable(_smmBusRelTable);

            vendTable.Party             = _smmBusRelTable.Party;
            vendTable.initFromVendGroup(VendGroup::find(_smmBusRelTable.VendGroup));
            vendTable.InclTax           = _smmBusRelTable.InclTax;
            if (_smmBusRelTable.TaxGroup)
            {
                vendTable.TaxGroup = _smmBusRelTable.TaxGroup;
            }

            vendTable.insert();

            ttscommit;
        }
        else
        {
            ttsabort;
        }

        return vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert2CustOrVend</Name>
				<Source><![CDATA[
    protected void convert2CustOrVend(CustVendTable _custVendTable, smmBusRelTable _smmBusRelTable)
    {
        // Update references to new customer or vendor
        _smmBusRelTable.updateReferences(_custVendTable.TableId, _custVendTable.RecId, _custVendTable.DataAreaId, _custVendTable.AccountNum);
             
        // Store information for converted business relations
        this.createConvertedBusRel(_custVendTable.TableId, _custVendTable.AccountNum, _smmBusRelTable);
             
        switch(_custVendTable.TableId)
        {
            case tableNum(CustTable):
                smmBusRelTypeSourceTable smmBusRelTypeSourceTableCustTable = smmBusRelTypeGroup::find(_smmBusRelTable.BusRelTypeId).TableType;
                switch (smmBusRelTypeSourceTableCustTable)
                {
                    case smmBusRelTypeSourceTable::Vendor, smmBusRelTypeSourceTable::IRMCustVend:
                        _smmBusRelTable.BusRelTypeId = smmBusRelTypeGroup::IRMGetCustVendType(true);
                        break;
    
                    default:
                        _smmBusRelTable.BusRelTypeId = smmBusRelTypeGroup::getCustomerType();
                        break;
                }
                _smmBusRelTable.VendGroup = '';
                break;
             
            case tableNum(VendTable):
                smmBusRelTypeSourceTable smmBusRelTypeSourceTableVendTable = smmBusRelTypeGroup::find(_smmBusRelTable.BusRelTypeId).TableType;
                switch (smmBusRelTypeSourceTableVendTable)
                {
                    case smmBusRelTypeSourceTable::Customer, smmBusRelTypeSourceTable::IRMCustVend:
                        _smmBusRelTable.BusRelTypeId = smmBusRelTypeGroup::IRMGetCustVendType(true);
                        break;
    
                    default:
                        _smmBusRelTable.BusRelTypeId = smmBusRelTypeGroup::getVendorType();
                        break;
                }
                _smmBusRelTable.CustGroup = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConvertedBusRel</Name>
				<Source><![CDATA[
    void createConvertedBusRel(TableId _tableId,CustVendAC _account, smmBusRelTable _smmBusRelTable)
    {
        smmConvertedBusRel convertedBusRel = this.initializeConvertedBusRel(_tableId, _account, _smmBusRelTable);
        convertedBusRel.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeConvertedBusRel</Name>
				<Source><![CDATA[
    protected smmConvertedBusRel initializeConvertedBusRel(TableId _tableId, CustVendAC _account,  smmBusRelTable _smmBusRelTable)
    {
        smmConvertedBusRel convertedBusRel = smmConvertedBusRel::IRMFind(_smmBusRelTable.BusRelAccount, _smmBusRelTable.Party, true);

        convertedBusRel.initFromBusRelTable(_smmBusRelTable);

        switch (_tableId)
        {
            case tableNum(CustTable) :
                convertedBusRel.CustAccount = _account;
                break;

            case tableNum(VendTable) :
                convertedBusRel.VendAccount = _account;
                break;
        }

        return convertedBusRel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>