<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRMarkupAutoTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(MarkupAutoTable))]
public final class DNRMarkupAutoTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean  exist(MarkupModuleCategory  moduleCategory,
                          MarkupModule          module,
                          TableGroupAll         accountCode,
                          CustVendRel           accountRelation,
                          TableGroupAll         itemCode,
                          ItemRelation          itemRelation)
    {
        boolean ret = next exist(moduleCategory, module, accountCode, accountRelation, itemCode, itemRelation);

        // *** Repeated code
        if (Markup::validateRelation(accountCode, accountRelation)  &&  Markup::validateRelation(itemCode, itemRelation))
        {
            DNRMarkupAutoTableDisposableContext context = DNRMarkupAutoTableDisposableContext::current();

            ret = (select firstonly RecId from markupAutoTable
                   index hint MarkupIdx
                   where markupAutoTable.ModuleCategory    == moduleCategory   &&
                         markupAutoTable.ModuleType        == module           &&
                         markupAutoTable.AccountCode       == accountCode      &&
                         markupAutoTable.AccountRelation   == accountRelation  &&
                         markupAutoTable.ItemCode          == itemCode         &&
                         markupAutoTable.ItemRelation      == itemRelation     &&
                         markupAutoTable.RORSalesRentalBoth    == context.DNRparmSalesRentalBoth()     &&
                         markupAutoTable.RORPurchSubRentalBoth == context.DNRparmPurchSubRentalBoth()
                ).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static MarkupAutoTable  find(MarkupModuleCategory   moduleCategory,
                                 MarkupModule           module,
                                 TableGroupAll          accountCode,
                                 CustVendRel            accountRelation,
                                 TableGroupAll          itemCode,
                                 ItemRelation           itemRelation,
                                 MarkupReturnType       markupReturn,
                                 ReturnCode             returnRelation,
                                 boolean               _forUpdate,
                                 TableGroupAll          dlvModeCode,
                                 DlvModeRelation        dlvModeRelation)
    {
        MarkupAutoTable ret = next find(moduleCategory, module, accountCode, accountRelation, itemCode, itemRelation, markupReturn, returnRelation, _forUpdate, dlvModeCode, dlvModeRelation);

        if(module == MarkupModuleType::Cust || module == MarkupModuleType::Vend)
        {
            DNRMarkupAutoTableDisposableContext context = DNRMarkupAutoTableDisposableContext::current();
            if(context)
            {
                select firstonly ret
                where ret.ModuleCategory        == moduleCategory
                &&    ret.ModuleType            == module
                &&    ret.AccountCode           == accountCode
                &&    ret.AccountRelation       == accountRelation
                &&    ret.ItemCode              == itemCode
                &&    ret.ItemRelation          == itemRelation
                &&    ret.MarkupReturn          == markupReturn
                &&    ret.ReturnRelation        == returnRelation
                &&    ret.DlvModeCode           == dlvModeCode
                &&    ret.DlvModeRelation       == dlvModeRelation
                &&  ((ret.RORSalesRentalBoth    == context.DNRparmSalesRentalBoth()    && module == MarkupModuleType::Cust)
                ||   (ret.RORPurchSubRentalBoth == context.DNRparmPurchSubRentalBoth() && module == MarkupModuleType::Vend));
            }
                 
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>