<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventJournalAssetForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventJournalAsset))]
public final class DNRInventJournalAssetForm_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        InventJournalTable inventJournalTableLoc;
        if (this.args().dataset() == tableNum(InventJournalTable))
        {
            inventJournalTableLoc = this.args().record();
        }

        next init();

        if (inventJournalTableLoc)
        {
            this.design().caption(enum2Str(inventJournalTableLoc.BOBInventJournalType));
        }

        FINDimValueController::setEditableDimensionSet(tableNum(InventJournalTrans), this.design().controlName(formControlStr(InventJournalAsset, DimensionEntryControl)));

        FormStringControl fscInventJournalTrans_AssetId = this.design().controlName(formControlStr(InventJournalAsset, InventJournalTrans_AssetId));
        fscInventJournalTrans_AssetId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DNRInventJournalAssetForm_Extension, InventJournalTrans_AssetIdCTRL_onLookup), this);

        FormStringControl fscAssetId = this.design().controlName(formControlStr(InventJournalAsset, AssetId));
        fscAssetId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DNRInventJournalAssetForm_Extension, AssetIdCTRL_onLookup), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventJournalMovementController</Name>
				<Source><![CDATA[
    protected InventJournalFormTrans_Movement constructInventJournalMovementController()
    {
        InventJournalFormTrans_Movement ret = next constructInventJournalMovementController();

        if(this.args().dataset() == tableNum(InventJournalTable))
        {
            InventJournalTable inventJournalTableLoc = this.args().record();

            if(inventJournalTableLoc
            && (inventJournalTableLoc.BOBInventJournalType == BOBInventJournalType::AssetToInvent
                || inventJournalTableLoc.BOBInventJournalType == BOBInventJournalType::InventToAsset
                || inventJournalTableLoc.BOBInventJournalType == BOBInventJournalType::AssetToScrap))
            {
                ret = InventJournalFormTrans_BOBConversion::construct(this, inventJournalTableLoc.BOBInventJournalType);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventJournalTrans_AssetIdCTRL_onLookup</Name>
				<Source><![CDATA[
    // extension methods

    public void InventJournalTrans_AssetIdCTRL_onLookup(FormStringControl _callingControl)
    {
        _callingControl.lookup(); // simulate super call
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetIdCTRL_onLookup</Name>
				<Source><![CDATA[
    public void AssetIdCTRL_onLookup(FormStringControl _callingControl)
    {
        _callingControl.lookup(); // simulate super call
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventJournalTransDS_AssetId_onLookup</Name>
				<Source><![CDATA[
    public void InventJournalTransDS_AssetId_onLookup(FormStringControl _callingControl)
    {
        InventJournalFormTrans_BOBInventToAsset formClass = journalFormController.parmJournalFormTrans() as InventJournalFormTrans_BOBInventToAsset;
            
        if (formClass)
        {
            formClass.lookupAssetId(_callingControl);
        }
        else
        {
            AssetTable::lookupAccountNum(_callingControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventJournalTransDS_ItemId_onLookup</Name>
				<Source><![CDATA[
    public void InventJournalTransDS_ItemId_onLookup(FormStringControl _callingControl)
    {
        InventJournalFormTrans_BOBConversion formClass = journalFormController.parmJournalFormTrans() as InventJournalFormTrans_BOBConversion;
            
        if (formClass)
        {
            formClass.lookupItemId(_callingControl);
        }
        else
        {
            FormDataObject targetField = inventJournalTrans_ds.object(fieldNum(InventJournalTrans, ItemId));
            targetField.lookup(_callingControl, _callingControl.valueStr()); // simulate super call
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimDS_inventSerialId_onLookup</Name>
				<Source><![CDATA[
    public void InventDimDS_inventSerialId_onLookup(FormStringControl _callingControl)
    {
        InventJournalFormTrans_BOBConversion formClass = journalFormController.parmJournalFormTrans() as InventJournalFormTrans_BOBConversion;
                
        if (formClass)
        {
            formClass.lookupInventSerialId(_callingControl);
        }
        else
        {
            FormDataObject targetField = inventDim_ds.object(fieldNum(InventDim, inventSerialId));
            targetField.lookup(_callingControl, _callingControl.valueStr()); // simulate super call
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBGetFormClass</Name>
				<Source><![CDATA[
    public InventJournalFormTrans_Movement BOBGetFormClass()
    {
        return journalFormController.parmJournalFormTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmJournalFormController</Name>
				<Source><![CDATA[
    public InventJournalFormController_Movement DNRparmJournalFormController(InventJournalFormController_Movement _journalFormController = journalFormController)
    {
        journalFormController = _journalFormController;
        return journalFormController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_element_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods

    [FormEventHandler(formStr(InventJournalAsset), FormEventType::Initialized)]
    public static void DNREvent_element_OnInitialized(xFormRun _sender, FormEventArgs _eventArgs)
    {
        FormRun                                 formRun                 = _sender as FormRun;
        Object                                  formRunObject           = formRun as Object;
        InventJournalFormController_Movement    journalFormController   = formRunObject.DNRparmJournalFormController();

        FormDropDialogButtonControl BOBBulkAssetProposalDialog          = _sender.design().controlName(formControlStr(InventJournalAsset, BOBBulkAssetProposalDialog)) as FormDropDialogButtonControl;
        FormDropDialogButtonControl BOBCreateAssetTable                 = _sender.design().controlName(formControlStr(InventJournalAsset, BOBCreateAssetTable)) as FormDropDialogButtonControl;
        FormFunctionButtonControl   BOBObjectTable                      = _sender.design().controlName(formControlStr(InventJournalAsset, BOBObjectTable)) as FormFunctionButtonControl;
        FormComboBoxControl         InventJournalTrans_AssetTransType   = _sender.design().controlName(formControlStr(InventJournalAsset, InventJournalTrans_AssetTransType)) as FormComboBoxControl;
        FormComboBoxControl         InventTransactionType               = _sender.design().controlName(formControlStr(InventJournalAsset, InventTransactionType)) as FormComboBoxControl;
        FormComboBoxControl         AssetTransType                      = _sender.design().controlName(formControlStr(InventJournalAsset, AssetTransType)) as FormComboBoxControl;
        FormComboBoxControl         InventAssetTransType                = _sender.design().controlName(formControlStr(InventJournalAsset, InventAssetTransType)) as FormComboBoxControl;

        if (journalFormController)
        {
            journalFormController.BOBParmCtrlBulkProposalButton(BOBBulkAssetProposalDialog);
            journalFormController.BOBParmCtrlCreateAssetButton(BOBCreateAssetTable);
            journalFormController.BOBParmCtrlBusinessObjectButton(BOBObjectTable);
            journalFormController.BOBParmCtrlAssetTransType(InventJournalTrans_AssetTransType, InventTransactionType, AssetTransType, InventAssetTransType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventJournalAsset, InventJournalTrans), FormDataSourceEventType::Initialized)]
    public static void DNREvent_InventJournalTransDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        var overrides = _sender.formRun() as FormRun;
        
        _sender.object(fieldNum(InventJournalTrans, AssetId)).registerOverrideMethod(methodStr(FormDataObject, lookup), methodStr(DNRInventJournalAssetForm_Extension, InventJournalTransDS_AssetId_onLookup), overrides);
        _sender.object(fieldNum(InventJournalTrans, ItemId)).registerOverrideMethod(methodStr(FormDataObject, lookup), methodStr(DNRInventJournalAssetForm_Extension, InventJournalTransDS_ItemId_onLookup), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventDimDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventJournalAsset, InventDim), FormDataSourceEventType::Initialized)]
    public static void DNREvent_InventDimDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        var overrides = _sender.formRun() as FormRun;
        
        _sender.object(fieldNum(InventDim, inventSerialId)).registerOverrideMethod(methodStr(FormDataObject, lookup), methodStr(DNRInventJournalAssetForm_Extension, InventDimDS_inventSerialId_onLookup), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_AssetId_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalAsset, InventJournalTrans, AssetId), FormDataFieldEventType::Validated)]
    public static void DNREvent_InventJournalTransDS_AssetId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun                         formRun         = _sender.datasource().formRun() as FormRun;
        Object                          formRunObject   = formRun as Object;
        FormDataFieldCancelEventArgs    args            = _eventArgs as FormDataFieldCancelEventArgs;
        boolean                         ret;

        // This handler is not executed if 'super()' returns false.
        // We therefore do not have to check the return value before executing our custom code.
        var formClass = formRunObject.DNRparmJournalFormController().parmJournalFormTrans() as InventJournalFormTrans_BOBConversion;
            
        if (formClass)
        {
            ret = formClass.fieldValidateAssetId();
        }

        if (!ret)
        {
            args.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_Qty_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalAsset, InventJournalTrans, Qty), FormDataFieldEventType::Validated)]
    public static void DNREvent_InventJournalTransDS_Qty_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun                         formRun         = _sender.datasource().formRun() as FormRun;
        Object                          formRunObject   = formRun as Object;
        FormDataFieldCancelEventArgs    args            = _eventArgs as FormDataFieldCancelEventArgs;
        boolean                         ret;

        // This handler is not executed if 'super()' returns false.
        // We therefore do not have to check the return value before executing our custom code.
        InventJournalFormTrans_BOBInventToAsset formClass = formRunObject.DNRparmJournalFormController().parmJournalFormTrans() as InventJournalFormTrans_BOBInventToAsset;

        if (formClass)
        {
            ret = formClass.fieldValidateQty();

            if (!ret)
            {
                args.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventDimDS_inventSerialId_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalAsset, InventDim, inventSerialId), FormDataFieldEventType::Modified)]
    public static void DNREvent_InventDimDS_inventSerialId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun     formRun         = _sender.datasource().formRun() as FormRun;
        Object      formRunObject   = formRun as Object;
        InventDim   inventDim       = _sender.datasource().cursor() as InventDim;

        var formClass = formRunObject.DNRparmJournalFormController().parmJournalFormTrans() as InventJournalFormTrans_BOBConversion;
                
        if (formClass)
        {
            formClass.fieldModifiedInventDimFieldsPost(inventDim, fieldNum(InventDim, InventSerialId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventDimDS_inventSerialId_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalAsset, InventDim, inventSerialId), FormDataFieldEventType::Validated)]
    public static void DNREvent_InventDimDS_inventSerialId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun                         formRun         = _sender.dataSource().formRun() as FormRun;
        Object                          formRunObject   = formRun as Object;
        FormDataFieldCancelEventArgs    args            = _eventArgs as FormDataFieldCancelEventArgs;
        boolean                         ret;

        // This handler is not executed if 'super()' returns false.
        // We therefore do not have to check the return value before executing our custom code.
        var formClass = formRunObject.DNRparmJournalFormController().parmJournalFormTrans() as InventJournalFormTrans_BOBConversion;

        if (formClass)
        {
            ret = formClass.fieldValidateInventSerialId();
        }

        if (!ret)
        {
            args.cancel(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>