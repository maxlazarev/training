<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanBoardPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to marshall data between the server side HiGHPlanBoard control and the browser
/// </summary>
[DataContractAttribute]
class HiGHPlanBoardPeriod extends FormDataContract
{
    //Member variables
    private int         id = 0;
    private str         label = '';
    private boolean     isOpen = false; 
    private utcdatetime startDateTime = utcDateTimeNull();
    private utcdatetime endDateTime = utcDateTimeNull();
    private str         rowItemId;
    private boolean     isSecondaryPeriodStart;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Id of the period
    /// </summary>
    /// <param name = "_id">Id of the period</param>
    /// <returns>Id of the period</returns>
    [DataMemberAttribute('PeriodId')] 
    public int parmId(int _id = id)
    {
        if (!prmIsDefault(_id)) 
        {
            id = _id;
        }
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Text label of the period (Used for period column heading)
    /// </summary>
    /// <param name = "_id">String label of the period</param>
    /// <returns>String label of the period</returns>
    [DataMemberAttribute('Label')]
    public str parmLabel(str _label = label)
    {
        if (!prmIsDefault(_label))
        {
            label = _label;
        }
        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the period is available for planning
    /// </summary>
    /// <param name = "_isOpen">Boolean indiciating if period is open for planning</param>
    /// <returns>Boolean indiciating if period is open for planning</returns>
    [DataMemberAttribute('Open')]
    public boolean parmIsOpen(boolean _isOpen = isOpen)
    {
        if (!prmIsDefault(_isOpen))
        {
            isOpen = _isOpen;
        }
        return isOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start DateTime of period
    /// </summary>
    /// <param name = "_startDateTime">Start DateTime of period</param>
    /// <returns>Start DateTime of period</returns>
    [DataMemberAttribute('StartDateTime')]
    public utcdatetime parmStartDateTime(utcdatetime _startDateTime = startDateTime)
    {
        if (!prmIsDefault(_startDateTime))
        {
            startDateTime = _startDateTime;
        }
        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// End DateTime of period
    /// </summary>
    /// <param name = "_endDateTime">End DateTime of period</param>
    /// <returns>End DateTime of period</returns>
    [DataMemberAttribute('EndDateTime')]
    public utcdatetime parmEndDateTime(utcdatetime _endDateTime = endDateTime)
    {
        if (!prmIsDefault(_endDateTime))
        {
            endDateTime = _endDateTime;
        }
        return endDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// RowItemId of this period belongs to
    /// Used only for marshalling. It only gets populated when the child period gets returned without its ancestor. This
    /// is technically not required, but saves us from having to iterate the lists just to find the parent, so it is added purely for
    /// performance benifits
    /// </summary>
    /// <param name = "_rowItemId">RowItemId of this period belongs to</param>
    /// <returns>RowItemId of this period belongs to/returns>
    [DataMemberAttribute('RowItemId')]
    public str parmRowItemId(str _rowItemId = rowItemId)
    {
        if (!prmIsDefault(_rowItemId))
        {
            rowItemId = _rowItemId;
        }
        return rowItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSecondaryPeriodStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if start of period coincides with secondary period border
    /// </summary>
    /// <returns>Boolean indicating if start of period coincides with secondary period border</returns>
    [DataMemberAttribute('IsSecondaryPeriodStart')]
    public boolean parmIsSecondaryPeriodStart(boolean _isSecondaryPeriodStart = isSecondaryPeriodStart)
    {
        if (!prmIsDefault(_isSecondaryPeriodStart))
        {
            isSecondaryPeriodStart = _isSecondaryPeriodStart;
        }

        return isSecondaryPeriodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// ReadOnly flag indicating if the current system date time falls within this period
    /// </summary>
    /// <returns>Boolean indicating if the current system date time falls within this period</returns>
    [DataMemberAttribute('IsCurrent')]
    public boolean parmIsCurrent(boolean _isCurrent = false)
    {
        TransDateTime now = DateTimeUtil::getSystemDateTime();
        return (this.parmStartDateTime() <= now && now <= this.parmEndDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new object, and fills it with the specified parameters
    /// </summary>
    /// <returns>The created HiGHPlanBoardPeriod object</returns>
    public static HiGHPlanBoardPeriod newParameters(int _id, str _label, boolean _isOpen, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        HiGHPlanBoardPeriod period = new HiGHPlanBoardPeriod();
        period.parmId(_id);
        period.parmLabel(_label);
        period.parmIsOpen(_isOpen);
        period.parmStartDateTime(_startDateTime);
        period.parmEndDateTime(_endDateTime);

        return period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static method that would find the period given a period id
    /// </summary>
    /// <param name = "_id">Id of the period</param>
    /// <param name = "_periods">List of periods</param>
    /// <returns>HiGHPlanBoardPeriod object</returns>
    public static HiGHPlanBoardPeriod find(int _periodId, List _periods)
    {
        ListEnumerator lePeriods = _periods.getEnumerator();
        HiGHPlanBoardPeriod result;

        while (lePeriods.moveNext())
        {
            result = lePeriods.current();

            if (result.parmId() == _periodId)
            {
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRowItemPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static method that would find the period given a period id
    /// </summary>
    /// <param name = "_id">Id of the period</param>
    /// <param name = "_periods">List of rowItems</param>
    /// <returns>HiGHPlanBoardPeriod object</returns>
    public static HiGHPlanBoardPeriod findRowItemPeriod(int _periodId, List _rowItems)
    {
        ListEnumerator      leRowItems = _rowItems.getEnumerator();
        HiGHPlanBoardPeriod result;

        while (leRowItems.moveNext())
        {
            HiGHPlanBoardRowItem rowItem = leRowItems.current();
            ListEnumerator lePeriods = rowItem.parmRowPeriods().getEnumerator();

            while (lePeriods.moveNext())
            {
                result = lePeriods.current();

                if (result.parmId() == _periodId)
                {
                    //Set the parent id when the child will be returned with no ancestry
                    result.parmRowItemId(rowItem.parmId());
                    return result;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a list of periods to be rendered on the control
    /// </summary>
    /// <param name = "_startDate">Start date that will be used to generate time columns (Periods).</param>
    /// <param name = "_endDate">End date that will be used to generate time columns (Periods).</param>
    /// <param name = "_timeScale">Time scale that will be used to generate time columns (Periods).</param>
    /// <returns>List of generated HiGHPlaBoardPeriod objects</returns>
    public static List createPeriods(utcdatetime _startDate, utcdatetime _endDate, int _timeScale, int _width, boolean _enforceAvailability)
    {
        utcdatetime currentStartDateTime = _startDate;
        utcdatetime currentEndDateTime = DateTimeUtil::addMinutes(currentStartDateTime, _timeScale);
        int         periodId    = 0;
        List        result      = new List(Types::Class);

        while (currentEndDateTime <= _endDate)
        {
            //Create current period
            result.addEnd(HiGHPlanBoardPeriod::newParameters(
                periodId, 
                HiGHPlanBoardPeriod::getLabelFromTimeScale(currentStartDateTime, _timeScale, _width),
                _enforceAvailability,
                currentStartDateTime,
                currentEndDateTime));

            //Prepare for next period
            currentStartDateTime    = DateTimeUtil::addMinutes(currentStartDateTime, _timeScale);
            currentEndDateTime      = DateTimeUtil::addMinutes(currentEndDateTime, _timeScale);

            periodId++;
        }

        //Create last period
        result.addEnd(HiGHPlanBoardPeriod::newParameters(
                periodId,
                HiGHPlanBoardPeriod::getLabelFromTimeScale(currentStartDateTime, _timeScale, _width),
                false,
                currentStartDateTime,
                currentEndDateTime));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelFromTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a human readable label represending the datetime value passed
    /// </summary>
    /// <param name = "_datetime">Date time to convert.</param>
    /// <param name = "_timeScale">Time scale (in minutes) to use for formatting.</param>
    /// <returns>UtcDateTime of the start date</returns>
    private static str getLabelFromTimeScale(utcdatetime _datetime, int _timeScale, int _width)
    {
        //Return time label if timeScale is smaller than one day, else, use a date label
        if (_timeScale < 60)
            return _width < 30 ? strFmt("%1", DateTimeUtil::minute(_datetime)) : strFmt("%1", time2StrHMLeadingZero(DateTimeUtil::time(_datetime)));
        
        if (_timeScale < 1440)
            return _width < 30 ? strFmt("%1", DateTimeUtil::hour(_datetime)) : strFmt("%1", time2StrHMLeadingZero(DateTimeUtil::time(_datetime)));
        
        return _width < 60 ? date2Str(DateTimeUtil::date(_datetime), 123, DateDay::Digits1or2, DateSeparator::Hyphen, DateMonth::Digits1or2, DateSeparator::None, DateYear::None) : strFmt("%1", DateTimeUtil::date(_datetime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePeriodFromDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static method that would find the period id a specific date time falls in
    /// </summary>
    /// <param name = "_datetime">Date time that would be used to check for period.</param>
    /// <param name = "_periods">List of all periods rendered for the control.</param>
    /// <param name = "_isStart">If the dateTime value is the start of a period</param>
    /// <returns>Container with [Integer value representing the period id, boolean specifying if the period exists in the supplied _periods list]</returns>
    public static container calculatePeriodFromDateTime(utcdatetime _datetime, List _periods, boolean _isStart = false)
    {
        ListEnumerator lePeriods = _periods.getEnumerator();
        HiGHPlanBoardPeriod period;

        while (lePeriods.moveNext())
        {
            period = lePeriods.current();

            //If period is exactly the same, return it
            if (period.parmStartDateTime() == _datetime)
            {
                return [period.parmId() - 1, false];
            }

            //If period is exactly as same as the end of current period then return it
            if (period.parmEndDateTime() == _datetime)
            {
                return [period.parmId(), false];
            }

            //If date time falls before the start of the first period, return the first period. We do not have to check if this is the first period, 
            //since the function would return the period (for all other periods other than the first) before this check succeeds
            if (period.parmStartDateTime() > _datetime)
            {
                return [period.parmId() - 1, true];
            }
            
            //Check if _datetime falls within current period, if so, return it
            if ((period.parmStartDateTime() <= _datetime) && (period.parmEndDateTime() >= _dateTime))
            {
                return _isStart ? [period.parmId() - 1, false] : [period.parmId(), false];
            }
        }

        //If not found, return last period, as that is what should be used for rendering
        return [period.parmId(), true];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDateTimesFromPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static method that would find the period id a specific date time falls in
    /// </summary>
    /// <param name = "_startPeriod">Date time that would be used to check for start period.</param>
    /// <param name = "_endPeriod">Date time that would be used to check for end period.</param>
    /// <param name = "_periods">List of all periods rendered for the control.</param>
    /// <returns>Container with [Integer value representing the period id, boolean specifying if the period exists in the supplied _periods list]</returns>
    public static container calculateDateTimesFromPeriods(int _startPeriod, int _endPeriod, utcdatetime _periodsStartDate, int _timeScale)
    {
        utcdatetime         startDateTime;
        utcdatetime         endDateTime;

        startDateTime = DateTimeUtil::addMinutes(_periodsStartDate, (_startPeriod + 1) * _timeScale);
        endDateTime = DateTimeUtil::addMinutes(_periodsStartDate, (_endPeriod + 1) * _timeScale);

        return [startDateTime, endDateTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>openPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static method that would open a period for a specified row item id, and return the resultant period list
    /// </summary>
    /// <param name = "_rowItemId">RowItemId context</param>
    /// <param name = "_startDateTime">Start of open period</param>
    /// <param name = "_endDateTime">end of open period</param>
    /// <returns>Period list with updated open period</returns>
    public static List openPeriod(utcdatetime _startDateTime, utcdatetime _endDateTime, List _periods)
    {
        ListEnumerator lePeriods = _periods.getEnumerator();
        HiGHPlanBoardPeriod period;

        while (lePeriods.moveNext())
        {
            period = lePeriods.current();

            //Since the periods are stored sequentially in the list, once we have passed the last, we can return from the function
            if (_endDateTime < period.parmStartDateTime())
            {
                return _periods;
            }

            if ((period.parmStartDateTime() < _endDateTime) && (period.parmEndDateTime() > _startDateTime))
            {
                period.parmIsOpen(true);
            }
        }

        return _periods;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a deep copy of this
    /// </summary>
    /// <returns>Returns a deep copy of this</returns>
    private HiGHPlanBoardPeriod clone()
    {
        HiGHPlanBoardPeriod period = new HiGHPlanBoardPeriod();
        period.parmId(id);
        period.parmLabel(label);
        period.parmIsOpen(isOpen);
        period.parmStartDateTime(startDateTime);
        period.parmEndDateTime(endDateTime);
        period.parmRowItemId(rowItemId);

        return period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a deep copy of the passed List. Used for makiing copies for different HiGHPlanBoardRowItems, therefore the last element is ommited
    /// </summary>
    /// <param name = "_periods">List of HiGHPlanBoardPeriod objects</param>
    /// <returns>Returns a deep copy of the complete List</returns>
    public static List cloneList(List _periods)
    {
        ListEnumerator  lePeriods   = _periods.getEnumerator();
        List            result      = new List(Types::Class);
        Counter         counter     = 0;
        
        for (int x = 1; x < _periods.elements(); x++)
        {
            lePeriods.moveNext();

            HiGHPlanBoardPeriod period = lePeriods.current();
            result.addEnd(period.clone());
        }        

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>