<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSalesCreateOrderFromCustomer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORSalesCreateOrderFromCustomer
{
    SalesTable              salesTable;
    SalesAgreementHeader    salesAgreementHeader;
    boolean                 agreementFormClosedOK;
    boolean                 initFromCustTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public SalesTable create(CustTable _custTable)
    {
        CustTable custTable = _custTable;

        //Verify customer has not been merged.
        if (_custTable.MCRMergedParent)
        {
            custTable = CustTable::find(_custTable.MCRMergedParent);
        }
        
        SalesTableForm salesTableForm = SalesTableForm::construct(SalesTableFormId::RORRentalOrder, custTable);
        salesTableForm.invoiceAccount(custTable.InvoiceAccount ? custTable.InvoiceAccount : custTable.AccountNum);

        salesTableForm.custAccount(custTable.AccountNum);
        salesTableForm.initValues();
        
        if(salesTableForm.create())
        {
            salesTable = salesTableForm.salesTable();
        }

        if (this.mustSkipSalesOrderCreation(custTable))
        {
            // Create with agreement form was closed
            return null;
        }

        salesTable.FINCreditCheckStatus = custTable.FINCreditCheckStatus;
        salesTable.initValue(SalesType::RORRental);
        salesTable.transferCustAccount_Server(this.parmInitFromCustTable());

        if (salesAgreementHeader)
        {
            salesTable.initFromSalesAgreementHeader(salesAgreementHeader);
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipSalesOrderCreation</Name>
				<Source><![CDATA[
    protected boolean mustSkipSalesOrderCreation(CustTable _custTable)
    {
        return SalesAgreementHeader::existForCustomer(_custTable.AccountNum)
            && !this.openCreateWithAgreementForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openCreateWithAgreementForm</Name>
				<Source><![CDATA[
    protected boolean openCreateWithAgreementForm()
    {
        Args        args = new Args();

        args.name(formStr(SalesCreateOrderFromCustomerWthAgreement));
        args.caller(this);
        FormRun salesCreateOrder = classfactory.formRunClass(args);
        salesCreateOrder.init();
        salesCreateOrder.run();
        if (!salesCreateOrder.closed())
        {
            salesCreateOrder.wait();
            agreementFormClosedOK = salesCreateOrder.closedOk();
        }

        return agreementFormClosedOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitFromCustTable</Name>
				<Source><![CDATA[
    public boolean parmInitFromCustTable(boolean _initFromCustTable = initFromCustTable)
    {
        initFromCustTable = _initFromCustTable;
        return initFromCustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAgreementHeader</Name>
				<Source><![CDATA[
    public SalesAgreementHeader parmSalesAgreementHeader(SalesAgreementHeader _salesAgreementHeader = salesAgreementHeader)
    {
        salesAgreementHeader = _salesAgreementHeader;
        return salesAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RORSalesCreateOrderFromCustomer construct()
    {
        return new RORSalesCreateOrderFromCustomer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewOrder</Name>
				<Source><![CDATA[
    public static SalesTable createNewOrder(CustTable _custTable, boolean _initFromCustTable = true)
    {
        RORSalesCreateOrderFromCustomer salesCreateOrder = RORSalesCreateOrderFromCustomer::construct();
        salesCreateOrder.parmInitFromCustTable(_initFromCustTable);

        return salesCreateOrder.create(_custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesTable salesTable;

        if (!_args || !_args.record())
        {
            throw error(strfmt("@SYS29104", classstr(RORSalesCreateOrderFromCustomer)));
        }

        if (SalesParameters::find().PromptTransfer &&
            Box::yesNo("@SYS418", DialogButton::Yes) != DialogButton::Yes)
        {
            salesTable = RORSalesCreateOrderFromCustomer::createNewOrder(_args.record(), false);
        }
        else
        {
            CustTable custTable;
            switch (_args.dataset())
            {
                case tableNum(CustTable):
                    custTable = _args.record();
                    break;
    
                case tableNum(smmBusRelTable):
                    smmBusRelTable smmBusRelTable = _args.record();
                    custTable = CustTable::findByPartyRecId(smmBusRelTable.Party);
                    break;
    
                default:
                    throw error(strfmt("@SYS29104", classstr(RORSalesCreateOrderFromCustomer)));
            }
            
            salesTable = RORSalesCreateOrderFromCustomer::createNewOrder(custTable, true);
        }

        if (!salesTable)
        {
            return; // Customer creation was canceled
        }

        Args createdSalesOrderArgs = RORSalesCreateOrderFromCustomer::newCreatedSalesOrderArgs(_args, salesTable);
        new MenuFunction(menuitemdisplaystr(RORSalesTableForEdit), MenuItemType::Display).run(createdSalesOrderArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCreatedSalesOrderArgs</Name>
				<Source><![CDATA[
    protected static Args newCreatedSalesOrderArgs(Args _args, SalesTable _salesTable)
    {
        Args createdSalesOrderArgs = new Args();

        createdSalesOrderArgs.record(_args.record());
        createdSalesOrderArgs.caller(_args.caller());
        createdSalesOrderArgs.parmObject(_args.caller());
        createdSalesOrderArgs.openMode(OpenMode::Edit);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // pass along button parameters to sales table form
            if (_args.parm() == 'create') //this means this class was called from Forms\MCRCustomerService.MenuItemButton:CreateOrder button.  See value on parameters property.
            {
                MCRSalesTableConfigure salesTableConfigure = new MCRSalesTableConfigure();
                salesTableConfigure.parmCustomerServiceParam(MCRCustomerServiceParam::Create);
                createdSalesOrderArgs.parmObject(salesTableConfigure);
            }
        }

        return createdSalesOrderArgs;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>