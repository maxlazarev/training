<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LBAImportTerms</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LBAImportTerms extends RunBaseBatch
{
    LBAContractTable    contractTable;
    boolean             updateFlag;
    
    [SysObsolete("Variable dlgFileName is no longer used", false)]
    DialogField         dlgFileName;
    [SysObsolete("Variable fileName is no longer used", false),
     SuppressBPWarning("BPDeprecatedEdtFileIO", "The variable is no longer used but we cannot remove it because that would introduce a breaking change")]
    FilenameSave        fileName;

    private Object dialog;
    private const str FileUploadControlLabel = "@GLS221360";
    private FileUploadBuild dialogLBAImport;

    private Filename uploadFileName;
    private str uploadFileURL;
    private SharedServiceUnitFileID uploadFileID;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return(updateFlag ? "@DNR5717" : "@DNR5696");
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    [SysObsolete("Method checkCloseDialog is no longer used", false)]
    public boolean checkCloseDialog(Object _calledFrom = null)
    {    
        return super(_calledFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDownpayment</Name>
				<Source><![CDATA[
    private void createDownpayment()
    {
        LBAContractTerm contractTerm;
    
        if (contractTable.DownPaymentAmountMST != 0.0 || decRound(contractTable.DownPaymentPercent * contractTable.ContractAmountMST, 0) != 0.0)
        {
            select firstonly contractTerm
            where contractTerm.ContractNumInt == contractTable.ContractNumInt
            &&    contractTerm.TermType       == LBATermType::Downpayment;
    
            if (!contractTerm)
            {
                contractTerm.ContractNumInt    = contractTable.ContractNumInt;
                contractTerm.TermType          = LBATermType::Downpayment;
    
                contractTerm.initValue();
    
                contractTerm.TransDate         = (select minOf(transDate) from LBAContractTerm
                                                   where LBAContractTerm.ContractNumInt == contractTable.ContractNumInt).transDate;
    
                if (contractTable.DownPaymentAmountMST != 0.0)
                {
                    contractTerm.TermAmountMST = contractTable.DownPaymentAmountMST;
                }
                else
                {
                    contractTerm.TermAmountMST = decRound(contractTable.ContractAmountMST * contractTable.DownPaymentPercent, 0) / 100;
                }
    
                contractTerm.RedemptionAmountMST = contractTerm.TermAmountMST;
    
                contractTerm.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEndTerm</Name>
				<Source><![CDATA[
    private void createEndTerm()
    {
        LBAContractTerm contractTerm;
    
        if (contractTable.EndTermAmountMST != 0.0 || decRound(contractTable.EndTermPercent * contractTable.ContractAmountMST, 0) != 0.0)
        {
            select firstonly contractTerm
            where contractTerm.ContractNumInt == contractTable.ContractNumInt
            &&    contractTerm.TermType       == LBATermType::EndTerm;
    
            if (!contractTerm)
            {
                contractTerm.ContractNumInt    = contractTable.ContractNumInt;
                contractTerm.TermType          = LBATermType::EndTerm;
    
                contractTerm.initValue();
    
                contractTerm.TransDate         = nextMth((select maxOf(TransDate) from LBAContractTerm
                                                           where LBAContractTerm.ContractNumInt == contractTable.ContractNumInt).transDate);
    
                if (contractTable.EndTermAmountMST != 0.0)
                {
                    contractTerm.TermAmountMST = contractTable.EndTermAmountMST;
                }
                else
                {
                    contractTerm.TermAmountMST = decRound(contractTable.ContractAmountMST * contractTable.EndTermPercent, 0) / 100;
                }
    
                contractTerm.RedemptionAmountMST = contractTerm.TermAmountMST;
    
                contractTerm.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTerm</Name>
				<Source><![CDATA[
    public void createTerm(container _term)
    {
        LBAContractTerm contractTerm;
        TransDate transDate;
    
        if (conLen(_term) >= 4)
        {
            transDate = str2date(conPeek(_term, 1), 123);
    
            if (updateFlag)
            {
                select firstonly forupdate contractTerm
                where contractTerm.ContractNumInt == contractTable.ContractNumInt
                &&    contractTerm.TransDate      == transDate
                &&    contractTerm.TermType       == LBATermType::Standard;
    
                if (contractTerm)
                {
                    contractTerm.TermAmountMST       = str2num(conPeek(_term, 2));
                    contractTerm.RedemptionAmountMST = str2num(conPeek(_term, 3));
                    contractTerm.InterestAmountMST   = str2num(conPeek(_term, 4));
    
                    contractTerm.update();
                }
                else
                {
                    throw error(strfmt("@DNR3062", transDate));
                }
    
            }
            else
            {
                contractTerm.ContractNumInt = contractTable.ContractNumInt;
    
                contractTerm.initValue();
    
                contractTerm.TransDate           = transDate;
                contractTerm.TermAmountMST       = str2num(conPeek(_term, 2));
                contractTerm.RedemptionAmountMST = str2num(conPeek(_term, 3));
                contractTerm.InterestAmountMST   = str2num(conPeek(_term, 4));
    
                contractTerm.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        dialog = super();
        DialogGroup dialogGroup = dialog.addGroup("@SYS54759");
        FormBuildControl formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());

        dialogLBAImport = formBuildControl.addControlEx(classstr(FileUpload), FileUploadControlLabel);
        dialogLBAImport.fileNameLabel("@DNR5697");
        dialogLBAImport.baseFileUploadStrategyClassName(classStr(BankStatementFileTemporaryStorageStrategy));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean ok = super();

        FileUpload fileUploadControl = this.getFormControl(dialog, FileUploadControlLabel);
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();

        if(fileUploadResult && fileUploadResult.getUploadStatus())
        {
            uploadFileURL = fileUploadResult.getDownloadUrl();
            uploadFileName = fileUploadResult.getFileName();
            uploadFileID = fileUploadResult.getFileId();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    private FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [SysObsolete("Method pack is no longer used.", false)]
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractTable</Name>
				<Source><![CDATA[
    public LBAContractTable parmContractTable(LBAContractTable _contractTable = contractTable)
    {
        if (!prmisDefault(_contractTable))
        {
            contractTable = _contractTable;
        }
    
        return contractTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateFlag</Name>
				<Source><![CDATA[
    public boolean parmUpdateFlag(boolean _updateFlag = updateFlag)
    {
        if (!prmisDefault(_updateFlag))
        {
            updateFlag = _updateFlag;
        }
    
        return updateFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNoTTSTryBlock", "Cannot be refactored without altering functionality of method")]
    public void run()
    {
        #file
        #define.fieldDelimiter(';')
    
        if (((contractTable.ContractStatus == LBAContractStatus::Created) && !updateFlag)
        ||  ((contractTable.ContractStatus == LBAContractStatus::TermsImported || contractTable.ContractStatus == LBAContractStatus::Running) && updateFlag))
        {
            CommaTextStreamIo importFile = CommaTextStreamIo::constructForRead(File::UseFileFromURL(uploadFileURL));
    
            if (importFile)
            {
                importFile.inFieldDelimiter(#fieldDelimiter);
    
                ttsBegin;
    
                contractTable.NumberOfTerms = 0;

                try
                {
                    while(!importFile.status())
                    {
                        container data = importFile.read();

                        if(data)
                        {
                            this.createTerm(data);
                            contractTable.NumberOfTerms++;
                        }
                    }
                }
                catch
                {
                    throw error("@SYS135884");
                }
    
                if (!updateFlag)
                {
                    this.createDownpayment();
                    this.createEndTerm();
    
                    contractTable.ContractStatus = LBAContractStatus::TermsImported;
                    contractTable.update();
                }
    
                ttsCommit;
    
                FormDataSource dataSource = FormDataUtil::getFormDataSource(contractTable);
                if (dataSource)
                {
                    dataSource.reread();
                    dataSource.refresh();
                    dataSource.active();
                }
            }
            else
            {
                throw error(strfmt("@SYS335161", uploadFileName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [SysObsolete("Method unpack is no longer used", false)]
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        boolean updateFlag = false;
    
        if (!_args || _args.dataset() != tableNum(LBAContractTable))
        {
            throw error(strFmt("@SYS134996", tableStr(LBAContractTable)));
        }
    
        LBAImportTerms importTerms = new LBAImportTerms();
        importTerms.parmContractTable(_args.record());
    
        if (_args.parmEnumType() == enumNum(NoYes))
        {
            importTerms.parmUpdateFlag(_args.parmEnum() == NoYes::Yes);
        }
    
        if(importTerms.prompt())
        {
            importTerms.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>