<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNREventGeneric</Name>
	<SourceCode>
		<Declaration><![CDATA[
static class DNREventGeneric
{
    // class event handlers

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onFormRun_DFM</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(FormRun), staticDelegateStr(FormRun, onFormRun))]
    public static void onFormRun_DFM(FormRun _formInstance)
    {
        DNREventGeneric::DFMCreateDynamicButtons(_formInstance);
        DFMMandatoryField::checkSetMandatoryFields(_formInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DFMCreateDynamicButtons</Name>
				<Source><![CDATA[
    private static void DFMCreateDynamicButtons(FormRun _callerFormRun)
    {
        DFMMenuButtonAuto dfmAutoButton = new DFMMenuButtonAuto(_callerFormRun);

        if(dfmAutoButton.checkMustCreateButton())
        {
            dfmAutoButton.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInserted_FINDim</Name>
				<Source><![CDATA[
    // table event handlers

    [DataEventHandler(tableStr(AssetBook),              DataEventType::Inserted),
     DataEventHandler(tableStr(AssetTable),             DataEventType::Inserted),
     DataEventHandler(tableStr(BOBObjectGroup),         DataEventType::Inserted),
     DataEventHandler(tableStr(BOBObjectSubGroup),      DataEventType::Inserted),
     DataEventHandler(tableStr(BOBObjectTable),         DataEventType::Inserted),
     DataEventHandler(tableStr(BOBRentalTrans),         DataEventType::Inserted),
     DataEventHandler(tableStr(CompanyInfo),            DataEventType::Inserted),
     DataEventHandler(tableStr(CustTable),              DataEventType::Inserted),
     DataEventHandler(tableStr(HcmWorker),              DataEventType::Inserted),
     DataEventHandler(tableStr(InventItemGroup),        DataEventType::Inserted),
     DataEventHandler(tableStr(InventJournalTable),     DataEventType::Inserted),
     DataEventHandler(tableStr(InventJournalTrans),     DataEventType::Inserted),
     DataEventHandler(tableStr(InventLocation),         DataEventType::Inserted),
     DataEventHandler(tableStr(InventTable),            DataEventType::Inserted),
     DataEventHandler(tableStr(LBAContractTable),       DataEventType::Inserted),
     DataEventHandler(tableStr(LedgerJournalTable),     DataEventType::Inserted),
     DataEventHandler(tableStr(OMOperatingUnit),        DataEventType::Inserted),
     DataEventHandler(tableStr(ProjGroup),              DataEventType::Inserted),
     DataEventHandler(tableStr(ProjInvoiceEmpl),        DataEventType::Inserted),
     DataEventHandler(tableStr(ProjInvoiceItem),        DataEventType::Inserted),
     DataEventHandler(tableStr(ProjInvoiceRevenue),     DataEventType::Inserted),
     DataEventHandler(tableStr(ProjInvoiceTable),       DataEventType::Inserted),
     DataEventHandler(tableStr(ProjJournalTrans),       DataEventType::Inserted),
     DataEventHandler(tableStr(ProjRevenueTrans),       DataEventType::Inserted),
     DataEventHandler(tableStr(ProjTable),              DataEventType::Inserted),
     DataEventHandler(tableStr(PurchLine),              DataEventType::Inserted),
     DataEventHandler(tableStr(PurchTable),             DataEventType::Inserted),
     DataEventHandler(tableStr(RORVenueTable),          DataEventType::Inserted),
     DataEventHandler(tableStr(SalesLine),              DataEventType::Inserted),
     DataEventHandler(tableStr(SalesQuotationLine),     DataEventType::Inserted),
     DataEventHandler(tableStr(SalesQuotationTable),    DataEventType::Inserted),
     DataEventHandler(tableStr(SalesTable),             DataEventType::Inserted),
     DataEventHandler(tableStr(smmBusRelTable),         DataEventType::Inserted),
     DataEventHandler(tableStr(VendTable),              DataEventType::Inserted),
     DataEventHandler(tableStr(WPPExecutionGRoup),      DataEventType::Inserted),
     DataEventHandler(tableStr(WPPWorkOrderLine),       DataEventType::Inserted),
     DataEventHandler(tableStr(WPPWorkOrderTable),      DataEventType::Inserted),
     DataEventHandler(tableStr(WrkCtrTable),            DataEventType::Inserted),
     DataEventHandler(tableStr(WPPResourceTable),       DataEventType::Inserted)]
    public static void onInserted_FINDim(Common _sender, DataEventArgs _eventArgs)
    {
        FINDimValueController::eventInsert(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdated_FINDim</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(AssetBook),              DataEventType::Updated),
     DataEventHandler(tableStr(AssetTable),             DataEventType::Updated),
     DataEventHandler(tableStr(BOBObjectGroup),         DataEventType::Updated),
     DataEventHandler(tableStr(BOBObjectSubGroup),      DataEventType::Updated),
     DataEventHandler(tableStr(BOBObjectTable),         DataEventType::Updated),
     DataEventHandler(tableStr(BOBRentalTrans),         DataEventType::Updated),
     DataEventHandler(tableStr(CompanyInfo),            DataEventType::Updated),
     DataEventHandler(tableStr(CustTable),              DataEventType::Updated),
     DataEventHandler(tableStr(HcmWorker),              DataEventType::Updated),
     DataEventHandler(tableStr(InventItemGroup),        DataEventType::Updated),
     DataEventHandler(tableStr(InventJournalTable),     DataEventType::Updated),
     DataEventHandler(tableStr(InventJournalTrans),     DataEventType::Updated),
     DataEventHandler(tableStr(InventLocation),         DataEventType::Updated),
     DataEventHandler(tableStr(InventSerial),           DataEventType::Updated),
     DataEventHandler(tableStr(InventTable),            DataEventType::Updated),
     DataEventHandler(tableStr(LBAContractTable),       DataEventType::Updated),
     DataEventHandler(tableStr(LedgerJournalTable),     DataEventType::Updated),
     DataEventHandler(tableStr(OMOperatingUnit),        DataEventType::Updated),
     DataEventHandler(tableStr(ProjGroup),              DataEventType::Updated),
     DataEventHandler(tableStr(ProjInvoiceEmpl),        DataEventType::Updated),
     DataEventHandler(tableStr(ProjInvoiceItem),        DataEventType::Updated),
     DataEventHandler(tableStr(ProjInvoiceRevenue),     DataEventType::Updated),
     DataEventHandler(tableStr(ProjInvoiceTable),       DataEventType::Updated),
     DataEventHandler(tableStr(ProjJournalTrans),       DataEventType::Updated),
     DataEventHandler(tableStr(ProjRevenueTrans),       DataEventType::Updated),
     DataEventHandler(tableStr(ProjTable),              DataEventType::Updated),
     DataEventHandler(tableStr(PurchLine),              DataEventType::Updated),
     DataEventHandler(tableStr(PurchTable),             DataEventType::Updated),
     DataEventHandler(tableStr(RORVenueTable),          DataEventType::Updated),
     DataEventHandler(tableStr(SalesLine),              DataEventType::Updated),
     DataEventHandler(tableStr(SalesQuotationLine),     DataEventType::Updated),
     DataEventHandler(tableStr(SalesQuotationTable),    DataEventType::Updated),
     DataEventHandler(tableStr(SalesTable),             DataEventType::Updated),
     DataEventHandler(tableStr(smmBusRelTable),         DataEventType::Updated),
     DataEventHandler(tableStr(VendTable),              DataEventType::Updated),
     DataEventHandler(tableStr(WPPExecutionGRoup),      DataEventType::Updated),
     DataEventHandler(tableStr(WPPWorkOrderLine),       DataEventType::Updated),
     DataEventHandler(tableStr(WPPWorkOrderTable),      DataEventType::Updated),
     DataEventHandler(tableStr(WrkCtrTable),            DataEventType::Updated),
     DataEventHandler(tableStr(WPPResourceTable),       DataEventType::Updated)]
    public static void onUpdated_FINDim(Common _sender, DataEventArgs _eventArgs)
    {
        FINDimValueController::eventUpdate(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDeleting_FINDim</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(AssetBook),              DataEventType::Deleting),
     DataEventHandler(tableStr(AssetTable),             DataEventType::Deleting),
     DataEventHandler(tableStr(BOBObjectGroup),         DataEventType::Deleting),
     DataEventHandler(tableStr(BOBObjectSubGroup),      DataEventType::Deleting),
     DataEventHandler(tableStr(BOBObjectTable),         DataEventType::Deleting),
     DataEventHandler(tableStr(BOBRentalTrans),         DataEventType::Deleting),
     DataEventHandler(tableStr(CompanyInfo),            DataEventType::Deleting),
     DataEventHandler(tableStr(CustTable),              DataEventType::Deleting),
     DataEventHandler(tableStr(HcmWorker),              DataEventType::Deleting),
     DataEventHandler(tableStr(InventItemGroup),        DataEventType::Deleting),
     DataEventHandler(tableStr(InventJournalTable),     DataEventType::Deleting),
     DataEventHandler(tableStr(InventJournalTrans),     DataEventType::Deleting),
     DataEventHandler(tableStr(InventLocation),         DataEventType::Deleting),
     DataEventHandler(tableStr(InventSerial),           DataEventType::Deleting),
     DataEventHandler(tableStr(InventTable),            DataEventType::Deleting),
     DataEventHandler(tableStr(LBAContractTable),       DataEventType::Deleting),
     DataEventHandler(tableStr(LedgerJournalTable),     DataEventType::Deleting),
     DataEventHandler(tableStr(OMOperatingUnit),        DataEventType::Deleting),
     DataEventHandler(tableStr(ProjGroup),              DataEventType::Deleting),
     DataEventHandler(tableStr(ProjInvoiceEmpl),        DataEventType::Deleting),
     DataEventHandler(tableStr(ProjInvoiceItem),        DataEventType::Deleting),
     DataEventHandler(tableStr(ProjInvoiceRevenue),     DataEventType::Deleting),
     DataEventHandler(tableStr(ProjInvoiceTable),       DataEventType::Deleting),
     DataEventHandler(tableStr(ProjJournalTrans),       DataEventType::Deleting),
     DataEventHandler(tableStr(ProjRevenueTrans),       DataEventType::Deleting),
     DataEventHandler(tableStr(ProjTable),              DataEventType::Deleting),
     DataEventHandler(tableStr(PurchLine),              DataEventType::Deleting),
     DataEventHandler(tableStr(PurchTable),             DataEventType::Deleting),
     DataEventHandler(tableStr(RORVenueTable),          DataEventType::Deleting),
     DataEventHandler(tableStr(SalesLine),              DataEventType::Deleting),
     DataEventHandler(tableStr(SalesQuotationLine),     DataEventType::Deleting),
     DataEventHandler(tableStr(SalesQuotationTable),    DataEventType::Deleting),
     DataEventHandler(tableStr(SalesTable),             DataEventType::Deleting),
     DataEventHandler(tableStr(smmBusRelTable),         DataEventType::Deleting),
     DataEventHandler(tableStr(VendTable),              DataEventType::Deleting),
     DataEventHandler(tableStr(WPPExecutionGRoup),      DataEventType::Deleting),
     DataEventHandler(tableStr(WPPWorkOrderLine),       DataEventType::Deleting),
     DataEventHandler(tableStr(WPPWorkOrderTable),      DataEventType::Deleting),
     DataEventHandler(tableStr(WrkCtrTable),            DataEventType::Deleting),
     DataEventHandler(tableStr(WPPResourceTable),       DataEventType::Deleting)]
    public static void onDeleting_FINDim(Common _sender, DataEventArgs _eventArgs)
    {
        FINDimValueController::eventDelete(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValidatedWrite_FINDim</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(AssetBook),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(AssetTable),             DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(BOBObjectGroup),         DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(BOBObjectSubGroup),      DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(BOBObjectTable),         DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(BOBRentalTrans),         DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(CompanyInfo),            DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(CustTable),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(HcmWorker),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(InventItemGroup),        DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(InventJournalTable),     DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(InventLocation),         DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(InventSerial),           DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(LBAContractTable),       DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(LedgerJournalTable),     DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(OMOperatingUnit),        DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjGroup),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjInvoiceEmpl),        DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjInvoiceItem),        DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjInvoiceRevenue),     DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjInvoiceTable),       DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjJournalTrans),       DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjRevenueTrans),       DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(ProjTable),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(PurchLine),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(PurchTable),             DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(RORVenueTable),          DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(SalesLine),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(SalesQuotationLine),     DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(SalesQuotationTable),    DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(SalesTable),             DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(smmBusRelTable),         DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(VendTable),              DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(WPPExecutionGRoup),      DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(WPPWorkOrderLine),       DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(WPPWorkOrderTable),      DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(WrkCtrTable),            DataEventType::ValidatedWrite),
     DataEventHandler(tableStr(WPPResourceTable),       DataEventType::ValidatedWrite)]
    public static void onValidatedWrite_FINDim(Common _sender, DataEventArgs _eventArgs)
    {
        ValidateEventArgs validateArgs = _eventArgs as ValidateEventArgs;
        
        if (validateArgs.parmValidateResult())
        {
            validateArgs.parmValidateResult(FINDimValueController::eventValidateWrite(_sender));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDeleted_Sync</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSite),                             DataEventType::Deleted),
     DataEventHandler(tableStr(InventLocation),                         DataEventType::Deleted),
     DataEventHandler(tableStr(ProjCategory),                           DataEventType::Deleted),
     DataEventHandler(tableStr(ProjGroup),                              DataEventType::Deleted),
     DataEventHandler(tableStr(InventSiteLogisticsLocationRole),        DataEventType::Deleted),
     DataEventHandler(tableStr(InventLocationLogisticsLocationRole),    DataEventType::Deleted)]
    public static void onDeleted_Sync(Common _sender, DataEventArgs _eventArgs)
    {
        DNRCrossCompanySynchronizer::doSync(_sender, DataEventType::Deleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInserted_Sync</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSite),                             DataEventType::Inserted),
     DataEventHandler(tableStr(InventLocation),                         DataEventType::Inserted),
     //DataEventHandler(tableStr(ProjCategory),                           DataEventType::Inserted),
     DataEventHandler(tableStr(ProjGroup),                              DataEventType::Inserted),
     DataEventHandler(tableStr(InventSiteLogisticsLocation),            DataEventType::Inserted),
     DataEventHandler(tableStr(InventSiteLogisticsLocationRole),        DataEventType::Inserted),
     DataEventHandler(tableStr(InventLocationLogisticsLocation),        DataEventType::Inserted),
     DataEventHandler(tableStr(InventLocationLogisticsLocationRole),    DataEventType::Inserted)]
    public static void onInserted_Sync(Common _sender, DataEventArgs _eventArgs)
    {
        DNRCrossCompanySynchronizer::doSync(_sender, DataEventType::Inserted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdated_Sync</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSite),                             DataEventType::Updated),
     DataEventHandler(tableStr(InventLocation),                         DataEventType::Updated),
     //DataEventHandler(tableStr(ProjCategory),                           DataEventType::Updated),
     DataEventHandler(tableStr(ProjGroup),                              DataEventType::Updated)]
    public static void onUpdated_Sync(Common _sender, DataEventArgs _eventArgs)
    {
        DNRCrossCompanySynchronizer::doSync(_sender, DataEventType::Updated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdating_Sync</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventSite),                             DataEventType::Updating),
     DataEventHandler(tableStr(InventLocation),                         DataEventType::Updating),
     //DataEventHandler(tableStr(ProjCategory),                           DataEventType::Updating),
     DataEventHandler(tableStr(ProjGroup),                              DataEventType::Updating)]
    public static void onUpdating_Sync(Common _sender, DataEventArgs _eventArgs)
    {
        DNRCrossCompanySynchronizer::setOrig(_sender.orig());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>