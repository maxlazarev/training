<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAdditionalNoteManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRAdditionalNoteManager extends RunBase
{
    Common                  callerRecord;
    DNRAdditionalNoteTable  additionalNoteTable;
    DialogField             dfLocationNote, dfOrderNote, dfInternalNote, dfTerminationNote, dfObjectNote, dfRouteNote, dfInvoiceNote;
    boolean                 notesExist, wereNotesChanged;
    int                     parmEnumType;
    anytype                 parmEnum;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        #define.displayHeight(4)

        DialogRunbase dialog = super();
        SalesTable salesTable;

        boolean showLocationNote, showOrderNote, showInternalNote, showTerminationNote, showObjectNote, showRouteNote, showInvoiceNote;
        boolean allowEditOrderNote = true, allowEditInvoiceNote = true, allowEditAll = true;

        switch(callerRecord.TableId)
        {
            case tableNum(SalesTable):
                salesTable = callerRecord as SalesTable;

                if(salesTable && salesTable.SalesType == SalesType::RORRental)
                {
                    showOrderNote = true;
                    allowEditOrderNote = false;
                }

                showLocationNote = true;
                showRouteNote = true; 
                break;
        
            case tableNum(SalesLine), tableNum(RORRentalEditorLine):
                showInternalNote = true;
                showTerminationNote = true;
                showObjectNote = true;
                break;
        
            case tableNum(SalesQuotationTable):
                SalesQuotationTable salesQuotationTable = callerRecord as SalesQuotationTable;

                allowEditAll = this.allowEditAllQuotationTable(salesQuotationTable);
       
                if(salesQuotationTable && salesQuotationTable.QuotationType == QuotationType::RORRental)
                {
                    showOrderNote = true;
                    allowEditOrderNote = false;
                }

                showLocationNote = true;
                showRouteNote = true;
                break;
        
            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = callerRecord as SalesQuotationLine;

                allowEditAll = this.allowEditAllQuotationTable(salesQuotationLine.salesQuotationTable());
                showInternalNote = true;
                showTerminationNote = true;
                showObjectNote = true;
                break;
        
            case tableNum(smmBusRelTable):
                showOrderNote = true;
                break;
        
            case tableNum(RORVenueTable):
                showLocationNote = true;
                showRouteNote = true;
                break;
        
            case tableNum(BOBMaintenanceHistoryView),
                 tableNum(WPPWorkOrderLine),
                 tableNum(WPPWorkOrderTable),
                 tableNum(WPPWorkOrderView),
                 tableNum(WPPTmpServicePlanboardData),
                 tableNum(WPPWorkOrderLineListPageView):
                showOrderNote = true;
                showInvoiceNote = true;
                showInternalNote = true;
                break;
        
            case tableNum(CustInvoiceJour), tableNum(VendInvoiceJour):
                showInvoiceNote = true;
                allowEditInvoiceNote = false;
                break;
        
            case tableNum(InventJournalTable):
                InventJournalTable inventJournalTable = callerRecord as InventJournalTable;

                if(inventJournalTable && inventJournalTable.Posted)
                {
                    allowEditAll = false;
                }

                showLocationNote = true;
                showRouteNote = true;
                showInternalNote = true;
                break;
        
            case tableNum(WPPTmpTransportPlanboardData):
                WPPTmpTransportPlanboardData tmpTransportPlanboardData = callerRecord as WPPTmpTransportPlanboardData;

                if(parmEnumType == enumNum(HeadingLine) && parmEnum == HeadingLine::Line)
                {
                    if(tmpTransportPlanboardData && tmpTransportPlanboardData.SalesLineRecId)
                    {
                        showObjectNote = true;
                        showTerminationNote = true;
                        showInternalNote = true;
                    }
                    else
                    {
                        showOrderNote = true;
                        showInvoiceNote = true;
                        showInternalNote = true;
                    }
                }
                else
                {
                    if(tmpTransportPlanboardData && tmpTransportPlanboardData.SalesTableRecId)
                    {
                        showOrderNote = true;
                        showRouteNote = true;
                        showLocationNote = true;
                    }
                    else
                    {
                        showOrderNote = true;
                        showInternalNote = true;
                        showInvoiceNote = true;
                    }
                }
                break;

            case tableNum(WHSShipmentTable) :
                allowEditOrderNote = this.checkAllowEditOrderNote(callerRecord);

                showOrderNote = true;
                showLocationNote = true;
                showRouteNote = true;
                break;
        
            default:
                // do nothing
                break;
        }

        FormBuildGroupControl dialogGroup = dialog.curFormGroup();
        dialogGroup.columns(1);
        dialogGroup.widthMode(FormWidth::SizeToAvailable);

        if(showLocationNote)
        {
            dfLocationNote = dialog.addFieldValue(extendedTypeStr(DNRAdditionalNote), additionalNoteTable.LocationNote, "@DNR4331");
            dfLocationNote.allowEdit(allowEditAll);
            dfLocationNote.displayHeight(#displayHeight);
            dfLocationNote.widthMode(FormWidth::SizeToAvailable);
        }
    
        if(showOrderNote)    
        {
            dfOrderNote = dialog.addFieldValue(extendedTypeStr(DNRAdditionalNote), additionalNoteTable.OrderNote, "@DNR4427");
            dfOrderNote.allowEdit(allowEditAll && allowEditOrderNote);
            dfOrderNote.displayHeight(#displayHeight);
            dfOrderNote.widthMode(FormWidth::SizeToAvailable);
        }

        if(showInternalNote)
        {
            dfInternalNote = dialog.addFieldValue(extendedTypeStr(DNRAdditionalNote), additionalNoteTable.InternalNote, "@DNR4443");
            dfInternalNote.allowEdit(allowEditAll);
            dfInternalNote.displayHeight(#displayHeight);
            dfInternalNote.widthMode(FormWidth::SizeToAvailable);
        }

        if(showTerminationNote)
        {
            dfTerminationNote = dialog.addFieldValue(extendedTypeStr(DNRAdditionalNote), additionalNoteTable.TerminationNote, "@DNR4426");
            dfTerminationNote.allowEdit(allowEditAll);
            dfTerminationNote.displayHeight(#displayHeight);
            dfTerminationNote.widthMode(FormWidth::SizeToAvailable);
        }

        if(showObjectNote)
        {
            dfObjectNote = dialog.addFieldValue(extendedTypeStr(DNRAdditionalNote), additionalNoteTable.ObjectNote, "@DNR4425");
            dfObjectNote.allowEdit(allowEditAll);
            dfObjectNote.displayHeight(#displayHeight);
            dfObjectNote.widthMode(FormWidth::SizeToAvailable);
        }

        if(showRouteNote)
        {
            dfRouteNote = dialog.addFieldValue(extendedTypeStr(DNRAdditionalNote), additionalNoteTable.RouteNote, "@DNR4424");
            dfRouteNote.allowEdit(allowEditAll);
            dfRouteNote.displayHeight(#displayHeight);
            dfRouteNote.widthMode(FormWidth::SizeToAvailable);
        }    

        if(showInvoiceNote)
        {
            dfInvoiceNote = dialog.addFieldValue(extendedTypeStr(DNRAdditionalNote), additionalNoteTable.InvoiceNote, "@DNR4360");
            dfInvoiceNote.allowEdit(allowEditAll && allowEditInvoiceNote);
            dfInvoiceNote.displayHeight(#displayHeight);
            dfInvoiceNote.widthMode(FormWidth::SizeToAvailable);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowEditOrderNote</Name>
				<Source><![CDATA[
    protected boolean checkAllowEditOrderNote(Common _callerRecord)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        additionalNoteTable.LocationNote    = (dfLocationNote ? dfLocationNote.value() : '');
        additionalNoteTable.OrderNote       = (dfOrderNote ? dfOrderNote.value() : '');
        additionalNoteTable.InternalNote    = (dfInternalNote ? dfInternalNote.value() : '');
        additionalNoteTable.TerminationNote = (dfTerminationNote ? dfTerminationNote.value() : '');
        additionalNoteTable.ObjectNote      = (dfObjectNote ? dfObjectNote.value() : '');
        additionalNoteTable.RouteNote       = (dfRouteNote ? dfRouteNote.value() : '');
        additionalNoteTable.InvoiceNote     = (dfInvoiceNote ? dfInvoiceNote.value() : '');

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _callerRecord, int _parmEnumType, anytype _parmEnum)
    {
        super();

        callerRecord = _callerRecord;
        additionalNoteTable = DNRAdditionalNoteTable::find(callerRecord.TableId, callerRecord.RecId);

        if(additionalNoteTable)
        {
            notesExist = true;
        }

        parmEnumType = _parmEnumType;
        parmEnum = _parmEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.createOrUpdateNoteTable();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateNoteTable</Name>
				<Source><![CDATA[
    private void createOrUpdateNoteTable()
    {
        if(notesExist)
        {
            DNRAdditionalNoteTable notesOrig = additionalNoteTable.orig();
            wereNotesChanged = (notesOrig.InternalNote      != additionalNoteTable.InternalNote     ||
                                notesOrig.OrderNote         != additionalNoteTable.OrderNote        ||
                                notesOrig.ObjectNote        != additionalNoteTable.ObjectNote       ||
                                notesOrig.TerminationNote   != additionalNoteTable.TerminationNote  ||
                                notesOrig.LocationNote      != additionalNoteTable.LocationNote     ||
                                notesOrig.RouteNote         != additionalNoteTable.RouteNote        ||
                                notesOrig.InvoiceNote       != additionalNoteTable.InvoiceNote);

            additionalNoteTable.selectForUpdate(true);
            additionalNoteTable.update();
        }
        else
        {
            wereNotesChanged = true;
            this.initFromCallerRecord();
            additionalNoteTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWereNotesChanged</Name>
				<Source><![CDATA[
    public boolean getWereNotesChanged()
    {
        return wereNotesChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallerRecord</Name>
				<Source><![CDATA[
    [Hookable(true)]
    private void initFromCallerRecord()
    {
        WPPWorkOrderLine    workOrderLine;
        WPPWorkOrderTable   workOrderTable;
        
        switch(callerRecord.TableId)
        {
            case tableNum(BOBMaintenanceHistoryView):
                BOBMaintenanceHistoryView callerMaintenanceHistoryView = callerRecord as BOBMaintenanceHistoryView;
        
                if(parmEnumType == enumNum(HeadingLine) && parmEnum == HeadingLine::Line)
                {
                    workOrderLine = WPPWorkOrderLine::findRecId(callerMaintenanceHistoryView.WorkOrderLineRecId);
                    additionalNoteTable.initFromCommon(workOrderLine);
                }
                else
                {
                    workOrderTable = WPPWorkOrderTable::find(callerMaintenanceHistoryView.WorkOrderId);
                    additionalNoteTable.initFromCommon(workOrderTable);
                }
                break;
        
            case tableNum(WPPTmpServicePlanboardData):
                WPPTmpServicePlanboardData tmpServicePlanboardData = callerRecord as WPPTmpServicePlanboardData;
        
                if(parmEnumType == enumNum(HeadingLine) && parmEnum == HeadingLine::Line)
                {
                    workOrderLine = WPPWorkOrderLine::findRecId(tmpServicePlanboardData.WPPWorkOrderLineRecId);
                    additionalNoteTable.initFromCommon(workOrderLine);
                }
                else
                {
                    workOrderTable = WPPWorkOrderTable::find(tmpServicePlanboardData.WPPWorkOrderId);
                    additionalNoteTable.initFromCommon(workOrderTable);
                }
                break;
        
            case tableNum(WPPTmpTransportPlanboardData):
                WPPTmpTransportPlanboardData tmpTransportPlanboardData = callerRecord as WPPTmpTransportPlanboardData;
        
                if(parmEnumType == enumNum(HeadingLine) && parmEnum == HeadingLine::Line)
                {
                    if(tmpTransportPlanboardData.SalesLineRecId)
                    {
                        additionalNoteTable.RefTableId = tableNum(SalesLine);
                        additionalNoteTable.RefRecId   = tmpTransportPlanboardData.SalesLineRecId;
                    }
                    else
                    {
                        workOrderLine = WPPWorkOrderLine::findRecId(tmpTransportPlanboardData.WorkOrderLineRecId);
                        additionalNoteTable.initFromCommon(workOrderLine);
                    }
                }
                else
                {
                    if(tmpTransportPlanboardData.SalesTableRecId)
                    {
                        additionalNoteTable.RefTableId = tableNum(SalesTable);
                        additionalNoteTable.RefRecId   = tmpTransportPlanboardData.SalesTableRecId;
                    }
                    else
                    {
                        workOrderTable = WPPWorkOrderTable::findRecId(tmpTransportPlanboardData.WorkOrderTableRecId);
                        additionalNoteTable.initFromCommon(workOrderTable);
                    }
                }
                break;

            case tableNum(WHSShipmentTable):
                WHSShipmentTable shipment = callerRecord as WHSShipmentTable;
                SalesLine salesLine = this.getSalesLineFromWHSShipmentTable(shipment) as SalesLine;
        
                if (salesLine)
                {
                    SalesTable salesTable = salesLine.salesTable();
                    additionalNoteTable.initFromCommon(salesTable);
                }
                break;
        
            case tableNum(InventJournalTable):
                InventJournalTable inventJournalTable = callerRecord as InventJournalTable;
                additionalNoteTable.initFromCommon(inventJournalTable);
                break;

            default:
                additionalNoteTable.initFromCommon(callerRecord);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineFromWHSShipmentTable</Name>
				<Source><![CDATA[
    protected SalesLine getSalesLineFromWHSShipmentTable(WHSShipmentTable _shipment)
    {
        SalesLine salesLine;
        // WHSShipment has link to SalesLine only for Rental Transportation
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS94241";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DNRAdditionalNoteManager mgr = DNRAdditionalNoteManager::construct(_args.record(), _args.parmEnumType(), _args.parmEnum());

        if(mgr.prompt())
        {
            mgr.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportedTable</Name>
				<Source><![CDATA[
    private static boolean isSupportedTable(TableId _tableId)
    {
        return new SysDictTable(tableNum(DNRAdditionalNoteTable)).isTableInRelationships(tableId2Name(_tableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRAdditionalNoteManager construct(Common _callerRecord, int _parmEnumType = 0, anytype _parmEnum = 0)
    {
        if(_callerRecord && DNRAdditionalNoteManager::isSupportedTable(_callerRecord.TableId))
        {
            return new DNRAdditionalNoteManager(_callerRecord, _parmEnumType, _parmEnum);
        }
        else
        {
            throw error(strFmt("@SYS31187", tableId2Name(_callerRecord.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditAllQuotationTable</Name>
				<Source><![CDATA[
    protected boolean allowEditAllQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        return (_salesQuotationTable.QuotationType   == QuotationType::RORProjRental) ?
               (_salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
             || _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised) :
               (_salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created
             || _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>