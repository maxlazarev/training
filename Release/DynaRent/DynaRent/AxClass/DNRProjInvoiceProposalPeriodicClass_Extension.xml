<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjInvoiceProposalPeriodicClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjInvoiceProposalPeriodic))]
public final class DNRProjInvoiceProposalPeriodicClass_Extension
{
    private DialogField                 dialogDateTimeCalculation;
    private DialogField                 dialogIncludeUninvoiced;
    private DialogField                 dialogIncludeCredits;
    private INVCalculationDateTime      calculationDateTime;
    private INVIncludeUninvoiced        includeUninvoiced;
    private INVIncludeCredits           includeCredits;

    #define.CurrentVersion(4)
    #localmacro.CurrentListDNR
        calculationDateTime,
        includeUninvoiced,
        includeCredits
    #ENDMACRO
        
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        dialogRunbase = next dialog();

        if (!isBillingRuleProposal)
        {
            calculationDateTime = DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
                
            dialogRunbase.addGroup("@DNR1452");
            dialogDateTimeCalculation = dialogRunbase.addFieldValue(extendedTypeStr(INVCalculationDateTime), calculationDateTime);
                
            dialogRunbase.addGroup("@DNR8").columns(2);
            dialogIncludeUninvoiced = dialogRunbase.addFieldValue(extendedTypeStr(INVIncludeUninvoiced), includeUninvoiced);
            dialogIncludeCredits = dialogRunbase.addFieldValue(extendedTypeStr(INVIncludeCredits), includeCredits);
            
        }

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        if (!isBillingRuleProposal)
        {
            calculationDateTime = dialogDateTimeCalculation.value();
            includeUninvoiced = dialogIncludeUninvoiced.value();
            includeCredits = dialogIncludeCredits.value();            
        }

        boolean ret = next getFromDialog();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParameters</Name>
				<Source><![CDATA[
    protected ProjInvoiceProposalCreateLinesParams createParameters()
    {
        ProjInvoiceProposalCreateLinesParams ret = next createParameters();

        ret.INVparmCalculationDateTime(calculationDateTime);
        ret.INVparmIncludeUninvoiced(includeUninvoiced);
        ret.INVparmIncludeCredits(includeCredits);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUnpack</Name>
				<Source><![CDATA[
    private boolean DNRUnpack(container _packedClass)
    {
        Integer         version = RunBase::getVersion(_packedClass);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentListDNR] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPack</Name>
				<Source><![CDATA[
    private container DNRPack()
    {
        return [#CurrentVersion, #CurrentListDNR];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProjInvoiceProposalPeriodic), methodStr(ProjInvoiceProposalPeriodic, pack))]
    public static void pack_post(XppPrePostArgs _eventArgs)
    {
        ProjInvoiceProposalPeriodic hostObj = _eventArgs.getThis() as ProjInvoiceProposalPeriodic;
        SysPackExtensions::pack(_eventArgs, classStr(DNRProjInvoiceProposalPeriodicClass_Extension), hostObj.DNRPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProjInvoiceProposalPeriodic), methodStr(ProjInvoiceProposalPeriodic, unpack))]
    public static void unpack_post(XppPrePostArgs _eventArgs)
    {
        ProjInvoiceProposalPeriodic hostObj = _eventArgs.getThis() as ProjInvoiceProposalPeriodic;
        
        container myState = SysPackExtensions::unpack(_eventArgs, classStr(DNRProjInvoiceProposalPeriodicClass_Extension));

        //Also unpack the extension
        if (!hostObj.DNRUnpack(myState))
        {
            _eventArgs.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>