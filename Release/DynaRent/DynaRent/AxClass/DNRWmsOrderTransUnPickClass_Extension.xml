<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWmsOrderTransUnPickClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(WmsOrderTransUnPick))]
public final class DNRWmsOrderTransUnPickClass_Extension
{
    private InventSerialId inventSerialId;
    public BOBRentalType rentalType;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>unPick</Name>
				<Source><![CDATA[
    public void unPick(
        InventQty       _unPickQty,
        InventDim       _inventDimUnPickTo,
        boolean         _cancelPickingLine,
        PdsCWInventQty  _pdsCWUnPickQty)
    {
        #OCCRetryCount

        next unPick(_unPickQty, _inventDimUnPickTo, _cancelPickingLine, _pdsCWUnPickQty);
        try
        {
            ttsbegin;
            this.RORUnassignObject();
            ttscommit;
        }
        // *** Repeated code
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWMSOrderTrans</Name>
				<Source><![CDATA[
    protected void updateWMSOrderTrans()
    {
        ttsbegin;
        next updateWMSOrderTrans();

        if(!(parentMovement.canBeReserved() && (parentMovement.mustBeAutoReserved() || wmsOrderTransUnPick.InventDimFixed)))
        {
            if (unPickQty > 0 && inventDimUnPickTo.inventSerialId && rentalType)
            {
                inventDimUnPickTo.inventSerialId = '';
                inventDimUnPickTo = InventDim::findOrCreate(inventDimUnPickTo);
                wmsOrderTransUnPick.InventDimId = inventDimUnPickTo.InventDimId;
                wmsOrderTransUnPick.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    protected void updateInventory()
    {
        
        if (parentMovement.buffer().TableId == tableNum(SalesLine))
        {
            SalesLine salesLine = parentMovement.buffer();
                
            if (salesLine.salesTable().SalesType == SalesType::RORRental)
            {
                rentalType = BOBRentalType::find(salesLine.BOBRentalTypeId());
            }
        }

        next updateInventory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUnassignObject</Name>
				<Source><![CDATA[
    // extension methods

    private void RORUnassignObject()
    {
        if (rentalType && rentalType.Classification == BOBRentalTypeClassification::Serialized)
        {
            BOBObjectAssignmentEngine objectAssignmentEngine = BOBObjectAssignmentEngine::construct(parentMovement.buffer());
            objectAssignmentEngine.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>