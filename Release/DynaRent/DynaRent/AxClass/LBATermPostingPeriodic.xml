<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LBATermPostingPeriodic</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LBATermPostingPeriodic extends RunBaseBatch
{
    QueryRun            queryRun;
    LBAParameters       parameters;

    LedgerJournalTable  ledgerJournalTableInterest;
    LedgerJournalTable  ledgerJournalTableRedemption;

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@DNR6905";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransInterest</Name>
				<Source><![CDATA[
    private Voucher createLedgerJournalTransInterest(LBATermPaymentPeriodicView _termView)
    {
        LedgerJournalTrans ledgerJournalTrans;
        ;
    
        ledgerJournalTrans.CurrencyCode          = _termView.CurrencyCode;
        ledgerJournalTrans.JournalNum            = ledgerJournalTableInterest.journalNum;
    
        ledgerJournalTrans.initValue();
    
        ledgerJournalTrans.AccountType           = LedgerJournalACType::Ledger;
        ledgerJournalTrans.LedgerDimension       = this.getLedgerDimension(parameters.LedgerDimensionInterest, _termView.FINDefaultDimension);
        ledgerJournalTrans.DefaultDimension      = _termView.FINDefaultDimension;
    
        ledgerJournalTrans.OffsetAccountType     = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetLedgerDimension = this.getLedgerDimension(parameters.LedgerDimensionToBePaid, _termView.FINDefaultDimension);
    
        ledgerJournalTrans.Voucher               = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTableInterest)).getNew(false);
        ledgerJournalTrans.TransDate             = _termView.TransDate;
    
        ledgerJournalTrans.TransactionType       = LedgerTransType::LBAContracts;
        ledgerJournalTrans.LBATermTransid        = _termView.TermTransId;
        ledgerJournalTrans.LBATransType          = LBATransType::Interest;
    
        ledgerJournalTrans.AmountCurDebit        = _termView.InterestAmountMST;
        ledgerJournalTrans.Txt                   = _termView.ContractNumExt;
    
        ledgerJournalTrans.insert();
    
        return ledgerJournalTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransRedemption</Name>
				<Source><![CDATA[
    private Voucher createLedgerJournalTransRedemption(LBATermPaymentPeriodicView _termView)
    {
        LedgerJournalTrans ledgerJournalTrans;
        ;
    
        ledgerJournalTrans.CurrencyCode          = _termView.CurrencyCode;
        ledgerJournalTrans.JournalNum            = ledgerJournalTableRedemption.journalNum;
    
        ledgerJournalTrans.initValue();
    
        ledgerJournalTrans.AccountType           = LedgerJournalACType::Ledger;
        ledgerJournalTrans.LedgerDimension       = this.getLedgerDimension(parameters.LedgerDimensionLongTerm, _termView.FINDefaultDimension);
        ledgerJournalTrans.DefaultDimension      = _termView.FINDefaultDimension;
    
        ledgerJournalTrans.OffsetAccountType     = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetLedgerDimension = this.getLedgerDimension((_termView.TermType == LBATermType::FinalTerm ? parameters.LedgerDimensionFinalTerm : parameters.LedgerDimensionToBePaid), _termView.FINDefaultDimension);
    
        ledgerJournalTrans.Voucher               = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTableRedemption)).getNew(false);
        ledgerJournalTrans.TransDate             = _termView.TransDate;
    
        ledgerJournalTrans.TransactionType       = LedgerTransType::LBAContracts;
        ledgerJournalTrans.LBATermTransid        = _termView.TermTransId;
        ledgerJournalTrans.LBATransType          = LBATransType::Redemption;
    
        ledgerJournalTrans.AmountCurDebit        = (_termView.TermType == LBATermType::FinalTerm ? _termView.TermAmountMST : _termView.RedemptionAmountMST);
        ledgerJournalTrans.Txt                   = _termView.ContractNumExt;
    
        ledgerJournalTrans.insert();
    
        return ledgerJournalTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();
        dialog.caption(this.caption());
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount getLedgerDimension(LedgerDimensionDefaultAccount _ledgerDimension, DimensionDefault _defaultDimension = 0)
    {
        List dimensionSources;
        ;
    
        Debug::assert(_ledgerDimension);
    
        dimensionSources = new List(Types::Class);
    
        if (_defaultDimension)
        {
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension));
            LedgerDimensionDefaultingEngine::addDefaultDimensionForLedgerDimension(dimensionSources, _ledgerDimension);
        }
    
        return(LedgerDimensionDefaultingEngine::createLedgerDimension(_ledgerDimension, dimensionSources));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        parameters = LBAParameters::find();
        queryRun   = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    public QueryRun queryBuild()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbrContractStatus;
        QueryBuildRange         qbrDirectDebit;
        QueryBuildRange         qbrTermType;
        QueryBuildRange         qbrVoucherRedemption;
        Range                   range;
        ;
    
        query = new Query();
    
        qbds = query.addDataSource(tableNum(LBATermPaymentPeriodicView));
    
        range = strFmt('(%1 == %2) || (%3 != "")',
                       fieldStr(LBATermPaymentPeriodicView, DirectDebit),
                       enum2int(NoYes::Yes),
                       fieldStr(LBATermPaymentPeriodicView, VoucherPayment));
    
        qbrContractStatus       = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, ContractStatus));
        qbrDirectDebit          = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, DirectDebit));
        qbrTermType             = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, TermType));
        qbrVoucherRedemption    = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, VoucherRedemption));
    
        qbrContractStatus.status(RangeStatus::Locked);
        qbrDirectDebit.status(RangeStatus::Locked);
        qbrTermType.status(RangeStatus::Locked);
        qbrVoucherRedemption.status(RangeStatus::Locked);
    
        qbrContractStatus.value(strFmt('%1,%2', LBAContractStatus::Running, LBAContractStatus::Ended));
        qbrDirectDebit.value(range);
        qbrTermType.value(strFmt('%1,%2', LBATermType::Standard, LBATermType::FinalTerm));
        qbrVoucherRedemption.value(SysQuery::valueEmptyString());
    
        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
    
        LBAContractTerm contractTerm;
        LBATermPaymentPeriodicView termView;
        ;
    
        ttsbegin;
    
        while (queryRun.next())
        {
            termView = queryRun.get(tablenum(LBATermPaymentPeriodicView));
    
            // Redemption
    
            if (!ledgerJournalTableRedemption)
            {
                ledgerJournalTableRedemption.initFromLedgerJournalName(parameters.JournalNameRedemption);
                ledgerJournalTableRedemption.journalNum = JournalTableData::newTable(ledgerJournalTableRedemption).nextJournalId();
                ledgerJournalTableRedemption.insert();
            }
    
            contractTerm = LBAContractTerm::find(termView.TermTransId, true);
            contractTerm.setVoucherValue(fieldNum(LBAContractTerm, VoucherRedemption), this.createLedgerJournalTransRedemption(termView));
            contractTerm.update();
    
            // Interest
    
            if (termView.TermType == LBATermType::Standard && !termView.VoucherInterest)
            {
                if (!ledgerJournalTableInterest)
                {
                    ledgerJournalTableInterest.initFromLedgerJournalName(parameters.JournalNameInterest);
                    ledgerJournalTableInterest.JournalNum = JournalTableData::newTable(ledgerJournalTableInterest).nextJournalId();
                    ledgerJournalTableInterest.insert();
                }
    
                contractTerm = LBAContractTerm::find(termView.TermTransId, true);
                contractTerm.setVoucherValue(fieldNum(LBAContractTerm, VoucherInterest), this.createLedgerJournalTransInterest(termView));
                contractTerm.update();
    
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);
        container   packedQueryRun;
        ;
    
        switch (version)
        {
            case #CurrentVersion:
                [version, packedQueryRun] = _packedClass;
                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                break;
    
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LBATermPostingPeriodic termPostingPeriodic;
        ;
    
        termPostingPeriodic = new LBATermPostingPeriodic();
    
        if (termPostingPeriodic.prompt())
        {
            termPostingPeriodic.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>