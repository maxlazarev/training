<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderTableInteractionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPWorkOrderTableInteractionHelper
{
    WPPWorkOrderTable               workOrderTable;
    WPPWorkOrderLine                workOrderLine;
    WPPWorkOrderStatusRegistration  workOrderStatusRegistration;
    ProjStatusType                  projStatusType;
    Map                             possibleStatusMap;

    // Other places
    UnknownNoYes                    connectedToOrigin;
    UnknownNoYes                    buttonBusinessObjectEnabled;
    UnknownNoYes                    buttonObjectMaintenancePlanEnabled;    
    UnknownNoYes                    buttonTransportRouteEnabled;
    // Journal
    UnknownNoYes                    buttonJournalsEnabled;
    UnknownNoYes                    buttonHourEntryEnabled;
    UnknownNoYes                    buttonExpenseEntryEnabled;
    UnknownNoYes                    buttonItemJournalEntryEnabled;
    UnknownNoYes                    buttonFeeEntryEnabled;
    // Item task
    UnknownNoYes                    menuButtonItemTasksEnabled;
    UnknownNoYes                    buttonProjItemReqEnabled;
    UnknownNoYes                    buttonSalesOrderTableEnabled;
    UnknownNoYes                    buttonPurchOrderTableEnabled;
    UnknownNoYes                    buttonProdTableEnabled;
    UnknownNoYes                    buttonPurchReqTableEnabled;
    UnknownNoYes                    buttonPurchRFQCaseTableEnabled;
    UnknownNoYes                    buttonPurchAgreementDetailsEnabled;
    UnknownNoYes                    buttonSalesAgreementDetailsEnabled;

    UnknownNoYes                    menuButtonItemTasksEditEnabled;
    UnknownNoYes                    buttonProjItemReqEditEnabled;
    UnknownNoYes                    buttonSalesOrderTableEditEnabled;
    UnknownNoYes                    buttonPurchOrderTableEditEnabled;
    UnknownNoYes                    buttonProdTableEditEnabled;
    UnknownNoYes                    buttonPurchReqTableEditEnabled;
    UnknownNoYes                    buttonPurchRFQCaseTableEditEnabled;
    UnknownNoYes                    buttonPurchAgreementDetailsEditEnabled;
    UnknownNoYes                    buttonSalesAgreementDetailsEditEnabled;
    UnknownNoYes                    buttonShipmentEnabled;
    // Status
    UnknownNoYes                    buttonStatusCreatedEnabled;
    UnknownNoYes                    buttonStatusPartlyPlannedEnabled;
    UnknownNoYes                    buttonStatusPlannedEnabled;
    UnknownNoYes                    buttonStatusReleasedEnabled;
    UnknownNoYes                    buttonStatusInProgressEnabled;
    UnknownNoYes                    buttonStatusCompletedEnabled;
    UnknownNoYes                    buttonStatusCheckedWorkshopEnabled;
    UnknownNoYes                    buttonStatusCheckedAdminEnabled;
    UnknownNoYes                    buttonStatusInvoicedEnabled;
    UnknownNoYes                    buttonStatusClosedEnabled;
    // Bill/RelatedInfo
    UnknownNoYes                    workOrderHasProjInvoiceProjId;
    UnknownNoYes                    workOrderHasProjInvoiceProposal;
    UnknownNoYes                    workOrderHasProjInvoiceJournal;
    UnknownNoYes                    buttonReturnJournalEnabled;

    // Maintenance
    UnknownNoYes                    buttonAddItemReqEnabled;

    // Functions
    UnknownNoYes                    buttonChangeProjectContractEnabled;

    #localmacro.GetCached
        if (%1 == UnknownNoYes::Unknown)
        {
            %1 = (%2) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return %1 == UnknownNoYes::Yes;
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasObjectMaintenancePlan</Name>
				<Source><![CDATA[
    protected boolean hasObjectMaintenancePlan()
    {
        BOBObjectTable              objectTable;
        BOBObjectMaintenancePlan    objectMaintenancePlan;
        BOBDefaultMaintenancePlan   defaultMaintenancePlan;
        BOBMaintenanceLog           maintenanceLog;
        ;
    
        select firstonly RecId from objectTable
        where objectTable.RecId == workOrderTable.BOBObjectTableRecId
            exists join objectMaintenancePlan
            where objectMaintenancePlan.ObjectId == objectTable.ObjectId
                join TableId from defaultMaintenancePlan
                where defaultMaintenancePlan.RecId == objectMaintenancePlan.DefaultPlanRecId
                    join TableId from maintenanceLog
                    where maintenanceLog.PlanCode == defaultMaintenancePlan.PlanCode
                    && maintenanceLog.WPPWorkOrderId == workOrderTable.WorkOrderId;
    
        return (objectTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize work order header controls visibility states.
    /// </summary>
    /// <param name="_workOrderTable">The header record.</param>
    public void initHeaderActions(WPPWorkOrderTable _workOrderTable)
    {
        workOrderTable = _workOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize work order line controls visibility states.
    /// </summary>
    /// <param name="_workOrderLine">The line record.</param>
    /// <param name="_workOrderStatusRegistration">The status registration record linked to the line record.</param>
    public void initLineActions(WPPWorkOrderLine                _workOrderLine,
                                WPPWorkOrderStatusRegistration  _workOrderStatusRegistration)
    {
        WPPWorkOrderStatusGroup workOrderStatusGroup;
        WPPWorkOrderTaskTable   workOrderTaskTable;
    
        workOrderLine = _workOrderLine;
        workOrderStatusRegistration = _workOrderStatusRegistration;
        projStatusType = workOrderLine.projTable().status();
    
        select firstOnly WorkOrderStatusGroupId from workOrderStatusGroup
            exists join workOrderTaskTable
            where workOrderTaskTable.TaskId                 == workOrderLine.TaskId
            &&    workOrderTaskTable.WorkOrderStatusGroupId == workOrderStatusGroup.WorkOrderStatusGroupId;
    
        possibleStatusMap = WPPWorkOrderStatusSetup::getPossibleWorkOrderStatus(workOrderStatusGroup.WorkOrderStatusGroupId, _workOrderLine.Status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbButtonTransportRouteEnabled</Name>
				<Source><![CDATA[
    public boolean parmbButtonTransportRouteEnabled()
    {
        #GetCached(buttonTransportRouteEnabled, WPPTransportRouteAddress::existRefRecId(workOrderTable.OrderTableId, workOrderTable.OrderRecId))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonReturnJournalEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonReturnJournalEnabled()
    {
        #GetCached(buttonReturnJournalEnabled, workOrderTable.OrderTableId == tableNum(InventJournalTable))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonAddItemReqEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonAddItemReqEnabled()
    {
        WPPWorkOrderLine workOrderLineLocal;
    
        select firstOnly RecId from workOrderLineLocal
        where workOrderLineLocal.WorkOrderId == workOrderTable.WorkOrderId
        &&   !workOrderLineLocal.ItemReqAdded;
    
        #GetCached(buttonAddItemReqEnabled, workOrderLineLocal.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonBusinessObjectEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonBusinessObjectEnabled()
    {
        #GetCached(buttonBusinessObjectEnabled, workOrderTable.BOBObjectTableRecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonChangeProjectContract</Name>
				<Source><![CDATA[
    public boolean parmButtonChangeProjectContract()
    {
        boolean allowChange = false;

        if (workOrderTable.CompanyId == curExt())
        {
            allowChange = true;
        }
        else
        {
            ProjTable projTableLoc;
            WPPWorkOrderLine workOrderLineLoc;

            select firstonly RecId from projTableLoc
                exists join workOrderLineLoc
                where workOrderLineLoc.WorkOrderId == workOrderTable.WorkOrderId
                &&    workOrderLineLoc.ProjId == projTableLoc.ProjId
                &&    workOrderLineLoc.ProjCompanyId == curExt();

            if (projTableLoc.RecId)
            {
                allowChange = true;
            }
        }

        #GetCached(buttonChangeProjectContractEnabled, allowChange)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonExpenseEntryEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonExpenseEntryEnabled()
    {
        #GetCached(buttonExpenseEntryEnabled, workOrderLine.ProjId && workOrderStatusRegistration.AllowRegisterExpense)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonFeeEntryEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonFeeEntryEnabled()
    {
        #GetCached(buttonFeeEntryEnabled, workOrderLine.ProjId && workOrderStatusRegistration.AllowRegisterRevenue)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonHourEntryEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonHourEntryEnabled()
    {
        #GetCached(buttonHourEntryEnabled, workOrderLine.ProjId && workOrderStatusRegistration.AllowRegisterHours)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonItemJournalEntryEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonItemJournalEntryEnabled()
    {
        #GetCached(buttonItemJournalEntryEnabled, workOrderLine.ProjId && workOrderStatusRegistration.AllowRegisterMaterial)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonJournalsEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonJournalsEnabled()
    {
        #GetCached(buttonJournalsEnabled, WPPWorkOrderStatusRegistration::journalRegistrationAllowed(workOrderStatusRegistration.WorkOrderStatusGroupId))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonObjectMaintenancePlanEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonObjectMaintenancePlanEnabled()
    {
        #GetCached(buttonObjectMaintenancePlanEnabled, this.hasObjectMaintenancePlan())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonProdTableEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonProdTableEditEnabled()
    {
        ProdTable prodTable;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from prodTable
            where prodTable.ProjId == workOrderLine.ProjId;
        }
    
        #GetCached(buttonProdTableEditEnabled, prodTable.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonProdTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonProdTableEnabled()
    {
        #GetCached(buttonProdTableEnabled,
                   workOrderStatusRegistration.AllowRegisterProduction &&
                   projStatusType.ctrlProdOrder() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonProjItemReqEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonProjItemReqEditEnabled()
    {
        SalesLine   salesLine;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from salesLine
            where salesLine.SalesType == SalesType::ItemReq
            &&    salesLine.ProjId    == workOrderLine.ProjId;
        }
    
        #GetCached(buttonProjItemReqEditEnabled, salesLine.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonProjItemReqEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonProjItemReqEnabled()
    {
        #GetCached(buttonProjItemReqEnabled,
                   workOrderStatusRegistration.AllowRegisterItemRequirement &&
                   projStatusType.ctrlProdOrder() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchAgreementDetailsEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchAgreementDetailsEnabled()
    {
        #GetCached(buttonPurchAgreementDetailsEnabled,
                   workOrderStatusRegistration.AllowRegisterProjPurch &&
                   projStatusType.ctrlPurchAgreement() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchAgreementDetEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchAgreementDetEditEnabled()
    {
        PurchAgreementHeader    purchAgreementHeader;
        AgreementHeaderDefault  agreementHeaderDefault;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from purchAgreementHeader
            where !purchAgreementHeader.IsDeleted
            &&     purchAgreementHeader.BuyingLegalEntity == CompanyInfo::find().RecId
                exists join agreementHeaderDefault
                where agreementHeaderDefault.AgreementHeader == purchAgreementHeader.RecId
                &&    agreementHeaderDefault.Project == workOrderLine.ProjId;
        }
    
        #GetCached(buttonPurchAgreementDetailsEditEnabled, purchAgreementHeader.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchOrderTableEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchOrderTableEditEnabled()
    {
        PurchTable  purchTable;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from purchTable
            where purchTable.ProjId == workOrderLine.ProjId;
        }
    
        #GetCached(buttonPurchOrderTableEditEnabled, purchTable.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchOrderTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchOrderTableEnabled()
    {
        #GetCached(buttonPurchOrderTableEnabled,
                   workOrderStatusRegistration.AllowRegisterProjPurch &&
                   projStatusType.ctrlPurchOrderTable() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchReqTableEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchReqTableEditEnabled()
    {
        PurchReqTable   purchReqTable;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from purchReqTable
            where purchReqTable.ProjId == workOrderLine.ProjId;
        }
    
        #GetCached(buttonPurchReqTableEditEnabled, purchReqTable.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchReqTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchReqTableEnabled()
    {
        #GetCached(buttonPurchReqTableEnabled,
                   workOrderStatusRegistration.AllowRegisterPurchReqTable &&
                   projStatusType.ctrlPurchReqTable() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchRFQCaseTableEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchRFQCaseTableEditEnabled()
    {
        PurchRFQCaseTable   purchRFQCaseTable;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from purchRFQCaseTable
            where purchRFQCaseTable.ProjId == workOrderLine.ProjId;
        }
    
        #GetCached(buttonPurchRFQCaseTableEditEnabled, purchRFQCaseTable.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchRFQCaseTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPurchRFQCaseTableEnabled()
    {
        #GetCached(buttonPurchRFQCaseTableEnabled,
                   workOrderStatusRegistration.AllowRegisterProjPurch &&
                   projStatusType.ctrlPurchRFQCaseTable() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonSalesAgreementDetailsEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonSalesAgreementDetailsEnabled()
    {
        #GetCached(buttonSalesAgreementDetailsEnabled,
                   workOrderStatusRegistration.AllowRegisterSalesOrder &&
                   projStatusType.ctrlSalesAgreement() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonSalesAgreementDetEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonSalesAgreementDetEditEnabled()
    {
        SalesAgreementHeader    salesAgreementHeader;
        AgreementHeaderDefault  agreementHeaderDefault;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from salesAgreementHeader
            where !salesAgreementHeader.IsDeleted
            &&     salesAgreementHeader.SellingLegalEntity == CompanyInfo::find().RecId
                exists join agreementHeaderDefault
                where agreementHeaderDefault.AgreementHeader == salesAgreementHeader.RecId
                &&    agreementHeaderDefault.Project == workOrderLine.ProjId;
        }
    
        #GetCached(buttonSalesAgreementDetailsEditEnabled, salesAgreementHeader.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonSalesOrderTableEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonSalesOrderTableEditEnabled()
    {
        SalesTable  salesTable;
    
        if (workOrderLine.ProjId)
        {
            select firstOnly RecId from salesTable
            where salesTable.ProjId == workOrderLine.ProjId
            &&    salesTable.SalesType == SalesType::Sales;
        }
    
        #GetCached(buttonSalesOrderTableEditEnabled, salesTable.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonSalesOrderTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonSalesOrderTableEnabled()
    {
        #GetCached(buttonSalesOrderTableEnabled,
                   workOrderStatusRegistration.AllowRegisterSalesOrder &&
                   projStatusType.ctrlSalesOrderTable() &&
                   workOrderLine.workOrderTable().CustVendAccountType == CustVendACType::Cust)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusCheckedAdminEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusCheckedAdminEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::CheckedAdmin);
    
        #GetCached(buttonStatusCheckedAdminEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusCheckedWorkshopEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusCheckedWorkshopEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::CheckedWorkshop);
    
        #GetCached(buttonStatusCheckedWorkshopEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusClosedEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusClosedEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::Closed);
    
        #GetCached(buttonStatusClosedEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusCompletedEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusCompletedEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::Completed);
    
        #GetCached(buttonStatusCompletedEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusConfirmedEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusConfirmedEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::Confirmed);
    
        #GetCached(buttonStatusPartlyPlannedEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusCreatedEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusCreatedEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::Created);
    
        #GetCached(buttonStatusCreatedEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusInProgressEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusInProgressEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::InProgress);
    
        #GetCached(buttonStatusInProgressEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusInvoicedEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusInvoicedEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::Invoiced);
    
        #GetCached(buttonStatusInvoicedEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusPlannedEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusPlannedEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::Planned);
    
        #GetCached(buttonStatusPlannedEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonStatusReleasedEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonStatusReleasedEnabled()
    {
        boolean statusEnabled = possibleStatusMap.lookup(WPPWorkOrderLineStatus::Released);
    
        #GetCached(buttonStatusReleasedEnabled, statusEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConnectedToOrigin</Name>
				<Source><![CDATA[
    public boolean parmConnectedToOrigin()
    {
        #GetCached(connectedToOrigin, workOrderTable.OrderRecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuButtonItemTasksEnabled</Name>
				<Source><![CDATA[
    public boolean parmMenuButtonItemTasksEnabled()
    {
        #GetCached(menuButtonItemTasksEnabled, workOrderLine.ProjId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonShipmentEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonShipmentEnabled()
    {
        #GetCached(buttonShipmentEnabled, workOrderTable.OrderTableId == tableNum(WHSShipmentTable))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderHasProjInvoiceJournal</Name>
				<Source><![CDATA[
    public boolean parmWorkOrderHasProjInvoiceJournal()
    {
        #GetCached(workOrderHasProjInvoiceJournal, (select firstOnly RecId from ProjInvoiceJour where ProjInvoiceJour.ProjInvoiceProjId == workOrderTable.ProjInvoiceProjId).RecId != 0)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderHasProjInvoiceProjId</Name>
				<Source><![CDATA[
    public boolean parmWorkOrderHasProjInvoiceProjId()
    {
        #GetCached(workOrderHasProjInvoiceProjId, workOrderTable.ProjInvoiceProjId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderHasProjInvoiceProposal</Name>
				<Source><![CDATA[
    public boolean parmWorkOrderHasProjInvoiceProposal()
    {
        #GetCached(workOrderHasProjInvoiceProposal, (select firstOnly RecId from ProjProposalJour where ProjProposalJour.ProjInvoiceProjId == workOrderTable.ProjInvoiceProjId).RecId != 0)
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPWorkOrderTableInteractionHelper construct()
    {
        return new WPPWorkOrderTableInteractionHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>