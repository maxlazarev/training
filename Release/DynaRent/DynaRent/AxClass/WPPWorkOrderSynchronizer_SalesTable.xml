<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderSynchronizer_SalesTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPWorkOrderSynchronizer_SalesTable extends WPPWorkOrderSynchronizer
{
    SalesTable  salesTable;
    boolean     workOrderCreated;
    Map         orderLineReplacementMap;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun_Line</Name>
				<Source><![CDATA[
    protected QueryRun buildQueryRun_Line()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsSalesLine              = query.addDataSource(tableNum(SalesLine));
        QueryBuildDataSource qbdsWorkOrderTemplateTable = qbdsSalesLine.addDataSource(tableNum(WPPWorkOrderTemplateTable));
        QueryBuildDataSource qbdsWorkOrderTemplateLine  = qbdsWorkOrderTemplateTable.addDataSource(tableNum(WPPWorkOrderTemplateLine));
        QueryBuildDataSource qbdsWorkOrderTaskTable     = qbdsWorkOrderTemplateLine.addDataSource(tableNum(WPPWorkOrderTaskTable));

        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, InventDimId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, RORKitComponentType));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, ItemId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, RORRecIdExchanged));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, RORReturnInventLocationId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, RORVenueCode));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, SalesQty));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, QtyOrdered));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, TableId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, RecId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, ActivityNumber));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, DeliveryPostalAddress));
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, RecId));
        qbdsSalesLine.relations(false);
        qbdsSalesLine.addRange(fieldNum(SalesLine, SalesId)).value(salesTable.SalesId);
        qbdsSalesLine.addRange(fieldNum(SalesLine, WPPWorkOrderTemplateId)).value(SysQuery::valueNotEmptyString());

        qbdsWorkOrderTemplateTable.joinMode(JoinMode::InnerJoin);
        qbdsWorkOrderTemplateTable.relations(false);
        qbdsWorkOrderTemplateTable.addLink(fieldNum(SalesLine, WPPWorkOrderTemplateId), fieldNum(WPPWorkOrderTemplateTable, TemplateId));

        // Need to select the whole workOrderTemplateLine, otherwise the update of ParentLineRecId
        // on the work order line will fail
        qbdsWorkOrderTemplateLine.addOrderByField(fieldNum(WPPWorkOrderTemplateLine, LineNumber));
        qbdsWorkOrderTemplateLine.joinMode(JoinMode::InnerJoin);
        qbdsWorkOrderTemplateLine.relations(false);
        qbdsWorkOrderTemplateLine.addLink(fieldNum(WPPWorkOrderTemplateTable, TemplateId), fieldNum(WPPWorkOrderTemplateLine, TemplateId));

        qbdsWorkOrderTaskTable.addSelectionField(fieldNum(WPPWorkOrderTaskTable, WorkOrderStatusGroupId));
        qbdsWorkOrderTaskTable.joinMode(JoinMode::InnerJoin);
        qbdsWorkOrderTaskTable.relations(false);
        qbdsWorkOrderTaskTable.addLink(fieldNum(WPPWorkOrderTemplateLine, TaskId), fieldNum(WPPWorkOrderTaskTable, TaskId));

        QueryRun queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkObjectSubGroup</Name>
				<Source><![CDATA[
    protected boolean checkObjectSubGroup(SalesPurchLine              _salesLine,
                                          WPPWorkOrderTemplateLine    _workOrderTemplateLine)
    {
        boolean ret;
    
        if ((!_workOrderTemplateLine.BOBObjectGroupId && !_workOrderTemplateLine.BOBObjectSubGroupId)
        || ((_workOrderTemplateLine.BOBObjectGroupId || _workOrderTemplateLine.BOBObjectGroupId)
        &&   _salesLine.BOBcheckContainsObjectGroupSubGroup(_workOrderTemplateLine.BOBObjectGroupId, _workOrderTemplateLine.BOBObjectSubGroupId)))
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderLinked_Line</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private void generateWorkOrder_OrderLinked_Line()
    {
        SalesLine                   salesLine;
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        ProjGroup                   projGroup;
        ProjTable                   projTable, projTableFirst;
        WPPWorkOrderTable           workOrderTable;
        boolean                     projectCreated;
        boolean                     registrationAllowed;
        boolean                     canCreateInvoiceProject;
        boolean                     createWorkOrderLine;
        ProjInvoiceProjId           projInvoiceProjId;
        RecId                       salesLineRecIdPrev;
        smmActivities               activities;
        WPPWorkOrderLine            workOrderLine;
    
        projInvoiceProjId = NumberSeq::newGetNum(ProjParameters::numRefProjInvoiceProjId()).num();
    
        this.initMaps();

        QueryRun queryRun = this.buildQueryRun_Line();

        while (queryRun.next())
        {
            salesLine               = queryRun.get(tableNum(SalesLine));
            workOrderTemplateTable  = queryRun.get(tableNum(WPPWorkOrderTemplateTable));
            workOrderTemplateLine   = queryRun.get(tableNum(WPPWorkOrderTemplateLine));
            workOrderTaskTable      = queryRun.get(tableNum(WPPWorkOrderTaskTable));

            createWorkOrderLine = true;
    
            // Check whether a work order already exists, then don't create another one
            if (salesLine.RecId != salesLineRecIdPrev)
            {
                // Update the work order line when another salesline is selected
                if (salesLineRecIdPrev)
                {
                    this.updateWorkOrderLine();
                    this.initMaps();
                }
    
                projGroup      = workOrderTemplateTable.projGroup();
                workOrderTable = WPPWorkOrderTable::findFromOrder(salesLine.TableId, salesLine.RecId, true);
    
                if (workOrderTable)
                {
                    if (salesTable)
                    {
                        workOrderTable.initFromSalesTable(salesTable);
                        if (salesLine.RORVenueCode)
                        {
                            workOrderTable.RORVenueCode = salesLine.RORVenueCode;
                        }
                        workOrderTable.update();
                    }
    
                    projectCreated  = false;
                    workOrderCreated = false;
                    salesLineRecIdPrev = salesLine.RecId;
                }
            }
    
            if (workOrderTable
            &&  !workOrderCreated)
            {
                this.findWorkOrderLine(workOrderTemplateLine, salesLine.TableId, salesLine.RecId, salesLine, true);
    
                createWorkOrderLine = !this.checkWorkOrderLineExistence(workOrderTemplateLine, workOrderTable.WorkOrderId);
                lineNumber = createWorkOrderLine ? WPPWorkOrderLine::lastLineNumber(workOrderTable.WorkOrderId) : lineNumber;
            }
    
            if (createWorkOrderLine)
            {
                // if registrations are allowed then put the project on the work order line
                registrationAllowed = WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId);
    
                if (parameters.SeparateProjectPerWorkOrderLine
                &&  salesTable.ProjId)
                {
                    projInvoiceProjId = ProjTable::find(salesTable.ProjId).ProjInvoiceProjId;
                }
    
                if (salesTable.ProjId
                && !parameters.SeparateProjectPerWorkOrderLine)
                {
                    projTable = ProjTable::find(salesTable.ProjId);
                }
                else
                {
                    if (!projectCreated)
                    {
                        // Check whether an invoice project must be created
                        canCreateInvoiceProject = this.checkFillProjectContract(projGroup.projType);
    
    
                        // Create one invoice project for all projects
                        // Create new projects (one per order line)
                        projTable = this.createProject(projGroup.projType,
                                                        projGroup.ProjGroupId,
                                                        '',
                                                        canCreateInvoiceProject,
                                                        canCreateInvoiceProject ? projInvoiceProjId : '',
                                                        '',
                                                        salesTable.CustAccount,
                                                        '',
                                                        '',
                                                        true,
                                                        custTable.TaxGroup);
    
                        // Seperate project per work order line
                        if (parameters.SeparateProjectPerWorkOrderLine)
                        {
                            // Project to put on the order header
                            if (!projTableFirst)
                            {
                                projTableFirst.data(projTable);
                            }
                        }
                        else
                        {
                            projectCreated = true;
                        }
                    }
                }
    
                if (projTable
                &&  this.checkCreateActivity()
                && !salesLine.ActivityNumber)
                {
                    // Create activities
                    activities = this.createActivity(projTable, workOrderTemplateLine.TaskId);
                }
    
                // Create one work order per sales line
                if (salesLine.RecId != salesLineRecIdPrev)
                {
                    // Create a new work order header
                    workOrderTable = this.createWorkOrder(salesLine,
                                                          salesTable,
                                                          projTable,
                                                          projGroup,
                                                          workOrderTemplateTable);
                    lineNumber         = 1;
                    salesLineRecIdPrev = salesLine.RecId;
                    workOrderCreated   = true;
                }
                else
                {
                    lineNumber++;
                }
    
                // Create new work order lines
                workOrderLine = this.createWorkOrderLine(registrationAllowed ? projTable : null,
                                         workOrderTable,
                                         workOrderTemplateLine,
                                         this.checkObjectSubGroup(salesLine, workOrderTemplateLine),
                                         salesLine);
    
                if (workOrderLine && workOrderLine.ProjId)
                {
                    workOrderLine.RORProjActivity = (salesLine.ActivityNumber ? salesLine.ActivityNumber : activities.ActivityNumber);
                    workOrderLine.update();
                }
    
                this.copyTaskRequirements(workOrderLine, workOrderTable, salesLine, salesTable, salesLine.RORVenueCode, salesTable.RORsmmBusRelTable().BusRelAccount);
            }
    
            if (salesLine.RORRecIdExchanged)
            {
                orderLineReplacementMap.insert(salesLine.RecId, salesLine.RORRecIdExchanged);
            }
        }
    
        this.updateWorkOrderLine();
    
        if (projectCreated
        ||  (parameters.SeparateProjectPerWorkOrderLine && projTableFirst && !salesTable.ProjId))
        {
            this.updateSourceTable(projTableFirst.ProjId ? projTableFirst.ProjId : projTable.ProjId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderLinked_Table</Name>
				<Source><![CDATA[
    private void generateWorkOrder_OrderLinked_Table()
    {
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        WPPWorkOrderLine            workOrderLine;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        boolean                     projectCreated;
        boolean                     registrationAllowed;
        boolean                     canCreateInvoiceProject;
        boolean                     checkExistingWorkOrder;
        ProjInvoiceProjId           projInvoiceProjId;
    
        if (salesTable.WPPWorkOrderTemplateId)
        {
            checkExistingWorkOrder = true;
            projInvoiceProjId = NumberSeq::newGetNum(ProjParameters::numRefProjInvoiceProjId()).num();
    
            this.initMaps();
    
            // Need to select the whole workOrderTemplateLine, otherwise the update of ParentLineRecId
            // on the work order line will fail
            while select workOrderTemplateTable
            order by workOrderTemplateLine.LineNumber
            where workOrderTemplateTable.TemplateId == salesTable.WPPWorkOrderTemplateId
                join workOrderTemplateLine
                where workOrderTemplateLine.TemplateId == workOrderTemplateTable.TemplateId
                    join WorkOrderStatusGroupId from workOrderTaskTable
                    where workOrderTaskTable.TaskId == workOrderTemplateLine.TaskId
            {
                if (checkExistingWorkOrder)
                {
                    projGroup      = workOrderTemplateTable.projGroup();
                    workOrderTable = WPPWorkOrderTable::findFromOrder(salesTable.TableId, salesTable.RecId, true);
    
                    if (workOrderTable)
                    {
                        if (salesTable)
                        {
                            workOrderTable.initFromSalesTable(salesTable);
                            workOrderTable.update();
                        }
    
                        projectCreated  = false;
                        workOrderCreated = false;
                    }
    
                    checkExistingWorkOrder = false;
                }
    
                if (workOrderTable
                &&  !workOrderCreated)
                {
                    this.findWorkOrderLine(workOrderTemplateLine, salesTable.TableId, salesTable.RecId, null);
                }
                else
                {
                    // if registrations are allowed then put the project on the work order line
                    registrationAllowed = WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId);
    
                    if (parameters.SeparateProjectPerWorkOrderLine
                    &&  salesTable.ProjId)
                    {
                        projInvoiceProjId = ProjTable::find(salesTable.ProjId).ProjInvoiceProjId;
                    }
    
                    if (salesTable.ProjId
                    && !parameters.SeparateProjectPerWorkOrderLine)
                    {
                        projTable = ProjTable::find(salesTable.ProjId);
                    }
                    else
                    {
                        if (!projectCreated)
                        {
                            // Check whether an invoice project must be created
                            canCreateInvoiceProject = this.checkFillProjectContract(projGroup.projType);
    
    
                            // Create one invoice project for all projects
                            // Create new projects (one per order line)
                            projTable = this.createProject(projGroup.projType,
                                                            projGroup.ProjGroupId,
                                                            '',
                                                            canCreateInvoiceProject,
                                                            canCreateInvoiceProject ? projInvoiceProjId : '',
                                                            '',
                                                            salesTable.CustAccount,
                                                            '',
                                                            '',
                                                            true,
                                                            custTable.TaxGroup);
    
                            projectCreated = true;
                        }
                    }
    
                    if (projTable
                    &&  this.checkCreateActivity())
                    {
                        // Create activities
                        this.createActivity(projTable, workOrderTemplateLine.TaskId);
                    }
    
                    // Create a new work order header
                    if (!lineNumber)
                    {
                        workOrderTable = this.createWorkOrder(null,
                                                              salesTable,
                                                              projTable,
                                                              projGroup,
                                                              workOrderTemplateTable);
                    }
    
                    lineNumber++;
    
                    // Create new work order lines
                    workOrderLine = this.createWorkOrderLine(registrationAllowed ? projTable : null,
                                                             workOrderTable,
                                                             workOrderTemplateLine,
                                                             true);
    
                    this.copyTaskRequirements(workOrderLine, workOrderTable, null, salesTable, salesTable.RORVenueCode, salesTable.RORsmmBusRelTable().BusRelAccount);
    
                    workOrderCreated = true;
                }
            }
    
            this.updateWorkOrderLine();
    
            if (projectCreated)
            {
                this.updateSourceTable(projTable.ProjId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderNotLinked_Line</Name>
				<Source><![CDATA[
    private void generateWorkOrder_OrderNotLinked_Line()
    {
        SalesLine                   salesLine;
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        boolean                     createInvoiceProject;
        boolean                     canCreateInvoiceProject;
        boolean                     createWorkOrderLine;
        ProjInvoiceProjId           projInvoiceProjId;
        RecId                       salesLineRecIdPrev;
        smmActivities               activities;
        WPPWorkOrderLine            workOrderLine;
    
        createInvoiceProject = true;
        projInvoiceProjId    = NumberSeq::newGetNum(ProjParameters::numRefProjInvoiceProjId()).num();
    
        this.initMaps();

        QueryRun queryRun = this.buildQueryRun_Line();

        while (queryRun.next())
        {
            salesLine               = queryRun.get(tableNum(SalesLine));
            workOrderTemplateTable  = queryRun.get(tableNum(WPPWorkOrderTemplateTable));
            workOrderTemplateLine   = queryRun.get(tableNum(WPPWorkOrderTemplateLine));
            workOrderTaskTable      = queryRun.get(tableNum(WPPWorkOrderTaskTable));

            createWorkOrderLine = true;
    
            // Check whether a work order already exists, then don't create another one
            if (salesLine.RecId != salesLineRecIdPrev)
            {
                // Update the work order line when another salesline is selected
                if (salesLineRecIdPrev)
                {
                    this.updateWorkOrderLine();
                    this.initMaps();
                }
    
                projGroup      = workOrderTemplateTable.projGroup();
                workOrderTable = WPPWorkOrderTable::findFromOrder(salesLine.TableId, salesLine.RecId, true);
    
                if (workOrderTable)
                {
                    if (salesTable)
                    {
                        workOrderTable.initFromSalesTable(salesTable);
                        if (salesLine.RORVenueCode)
                        {
                            workOrderTable.RORVenueCode = salesLine.RORVenueCode;
                        }
                        workOrderTable.update();
                    }
    
                    workOrderCreated = false;
                    salesLineRecIdPrev = salesLine.RecId;
                }
            }
    
            if (workOrderTable
            &&  !workOrderCreated)
            {
                this.findWorkOrderLine(workOrderTemplateLine, salesLine.TableId, salesLine.RecId, salesLine, true);
    
                createWorkOrderLine = !this.checkWorkOrderLineExistence(workOrderTemplateLine, workOrderTable.WorkOrderId);
                lineNumber = createWorkOrderLine ? WPPWorkOrderLine::lastLineNumber(workOrderTable.WorkOrderId) : lineNumber;
            }
    
            if (createWorkOrderLine)
            {
                if (!projTable || parameters.SeparateProjectPerWorkOrderLine)
                {
                    projTable = null;
    
                    // if registrations are allowed then create a new ax project
                    if (WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId))
                    {
                        projGroup = workOrderTemplateTable.projGroup();
                        // Check whether an invoice project must be created
                        canCreateInvoiceProject = this.checkFillProjectContract(projGroup.projType);
    
                        // Create one invoice project for all projects
                        // Create new projects (one per task)
                        projTable = this.createProject(projGroup.projType,
                                                       projGroup.ProjGroupId,
                                                       '',
                                                       createInvoiceProject && canCreateInvoiceProject,
                                                       canCreateInvoiceProject ? projInvoiceProjId : '',
                                                       '',
                                                       salesTable.CustAccount,
                                                       '',
                                                       '',
                                                       true,
                                                       custTable.TaxGroup);

                        if (salesTable.RORVenueCode)
                        {
                            projTable.DeliveryLocation = salesTable.deliveryAddress().Location;
                            projTable.update();
                        }
                        // When an invoice project has been created then a new invoice project
                        // must not be created. Once the variable createInvoiceProject is set to false
                        // it will not be set to true anymore
                        if (canCreateInvoiceProject)
                        {
                            createInvoiceProject = false;
                        }
                    }
                }
    
                if (projTable
                &&  this.checkCreateActivity()
                && !salesLine.ActivityNumber)
                {
                    // Create activities
                    activities = this.createActivity(projTable, workOrderTemplateLine.TaskId);
                }
    
                // Create one work order per sales line
                if (salesLine.RecId != salesLineRecIdPrev)
                {
                    // Create a new work order header
                    workOrderTable = this.createWorkOrder(salesLine,
                                                          salesTable,
                                                          projTable,
                                                          projGroup,
                                                          workOrderTemplateTable);
                    lineNumber         = 1;
                    salesLineRecIdPrev = salesLine.RecId;
                    workOrderCreated   = true;
                }
                else
                {
                    lineNumber++;
                }
    
                // Create new work order lines
                workOrderLine = this.createWorkOrderLine(projTable,
                                         workOrderTable,
                                         workOrderTemplateLine,
                                         this.checkObjectSubGroup(salesLine, workOrderTemplateLine),
                                         salesLine);
    
                if (workOrderLine && workOrderLine.ProjId)
                {
                    workOrderLine.RORProjActivity = (salesLine.ActivityNumber ? salesLine.ActivityNumber : activities.ActivityNumber);
                    workOrderLine.update();
                }
    
                this.copyTaskRequirements(workOrderLine, workOrderTable, salesLine, salesTable, salesLine.RORVenueCode, salesTable.RORsmmBusRelTable().BusRelAccount);
            }
    
            if (salesLine.RORRecIdExchanged)
            {
                orderLineReplacementMap.insert(salesLine.RecId, salesLine.RORRecIdExchanged);
            }
        }
    
        this.updateWorkOrderLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderNotLinked_Table</Name>
				<Source><![CDATA[
    private void generateWorkOrder_OrderNotLinked_Table()
    {
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        WPPWorkOrderLine            workOrderLine;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        ProjInvoiceProjId           projInvoiceProjId;
        boolean                     createInvoiceProject;
        boolean                     canCreateInvoiceProject;
        boolean                     checkExistingWorkOrder;
    
        if (salesTable.WPPWorkOrderTemplateId)
        {
            createInvoiceProject   = true;
            projInvoiceProjId      = NumberSeq::newGetNum(ProjParameters::numRefProjInvoiceProjId()).num();
            checkExistingWorkOrder = true;
    
            this.initMaps();
    
            // Need to select the whole workOrderTemplateLine, otherwise the update of ParentLineRecId
            // on the work order line will fail
            while select workOrderTemplateTable
            order by workOrderTemplateLine.LineNumber
            where workOrderTemplateTable.TemplateId == salesTable.WPPWorkOrderTemplateId
                join workOrderTemplateLine
                where workOrderTemplateLine.TemplateId == workOrderTemplateTable.TemplateId
                    join WorkOrderStatusGroupId from workOrderTaskTable
                    where workOrderTaskTable.TaskId == workOrderTemplateLine.TaskId
            {
                if (checkExistingWorkOrder)
                {
                    projGroup      = workOrderTemplateTable.projGroup();
                    workOrderTable = WPPWorkOrderTable::findFromOrder(salesTable.TableId, salesTable.RecId, true);
    
                    if (workOrderTable)
                    {
                        if (salesTable)
                        {
                            workOrderTable.initFromSalesTable(salesTable);
                            workOrderTable.update();
                        }
    
                        workOrderCreated = false;
                    }
    
                    checkExistingWorkOrder = false;
                }
    
                if (workOrderTable
                &&  !workOrderCreated)
                {
                    this.findWorkOrderLine(workOrderTemplateLine, salesTable.TableId, salesTable.RecId, null);
                }
                else
                {
                    if (!projTable
                    ||   parameters.SeparateProjectPerWorkOrderLine)
                    {
                        projTable = null;
    
                        // if registrations are allowed then create a new ax project
                        if (WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId))
                        {
                            projGroup = workOrderTemplateTable.projGroup();
                            // Check whether an invoice project must be created
                            canCreateInvoiceProject = this.checkFillProjectContract(projGroup.projType);
    
                            // Create one invoice project for all projects
                            // Create new projects (one per task)
                            projTable = this.createProject(projGroup.projType,
                                                           projGroup.ProjGroupId,
                                                           '',
                                                           createInvoiceProject && canCreateInvoiceProject,
                                                           canCreateInvoiceProject ? projInvoiceProjId : '',
                                                           '',
                                                           salesTable.CustAccount,
                                                           '',
                                                           '',
                                                           true,
                                                           custTable.TaxGroup);
    
                            if (salesTable.RORVenueCode)
                            {
                                projTable.DeliveryLocation = salesTable.deliveryAddress().Location;
                                projTable.update();
                            }

                            // When an invoice project has been created then a new invoice project
                            // must not be created. Once the variable createInvoiceProject is set to false
                            // it will not be set to true anymore
                            if (canCreateInvoiceProject)
                            {
                                createInvoiceProject = false;
                            }
                        }
                    }
    
                    if (projTable
                    &&  this.checkCreateActivity())
                    {
                        // Create activities
                        this.createActivity(projTable, workOrderTemplateLine.TaskId);
                    }
    
                    // Create one work order per sales line
                    if (!lineNumber)
                    {
                        // Create a new work order header
                        workOrderTable = this.createWorkOrder(null,
                                                              salesTable,
                                                              projTable,
                                                              projGroup,
                                                              workOrderTemplateTable);
                    }
    
                    lineNumber++;
    
                    // Create new work order lines
                    workOrderLine = this.createWorkOrderLine(projTable,
                                                             workOrderTable,
                                                             workOrderTemplateLine,
                                                             true);
    
                    this.copyTaskRequirements(workOrderLine, workOrderTable, null, salesTable, salesTable.RORVenueCode, salesTable.RORsmmBusRelTable().BusRelAccount);
    
                    workOrderCreated = true;
                }
            }
    
            this.updateWorkOrderLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesTable _salesTable)
    {
        super();
    
        salesTable = _salesTable;
        custTable  = CustTable::find(salesTable.CustAccount);
    
        orderLineReplacementMap = new Map(Types::Int64, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _salesTable = salesTable)
    {
        salesTable = _salesTable as SalesTable;
    
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsBegin;
        if (salesTable.WPPIsRentalProject)
        {
            this.generateWorkOrder_OrderLinked_Table();
            this.generateWorkOrder_OrderLinked_Line();
        }
        else
        {
            this.generateWorkOrder_OrderNotLinked_Table();
            this.generateWorkOrder_OrderNotLinked_Line();
        }
    
        super();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    private void updateSourceTable(ProjId _projId)
    {
        SalesTable  salesTableUpdate;
        SalesLine   salesLineUpdate;
        InventTable inventTable;
    
        update_recordSet salesTableUpdate
        setting ProjId = _projId
        where salesTableUpdate.RecId == salesTable.RecId;        
        
        while select forupdate salesLineUpdate
        where salesLineUpdate.SalesId == salesTable.SalesId
            join ProjCategoryId from inventTable
            where inventTable.ItemId == salesLineUpdate.ItemId
        {
            salesLineUpdate.ProjId = _projId;
            salesLineUpdate.ProjCategoryId = inventTable.projCategoryId;
            salesLineUpdate.modifyField(fieldNum(SalesLine, ProjCategoryId));
            salesLineUpdate.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkOrderLine</Name>
				<Source><![CDATA[
    protected void updateWorkOrderLine()
    {
        SalesLine                       salesLine;
        MapEnumerator                   workOrderLineMapEnumerator;
        WPPWorkOrderLine                workOrderLine;
        WPPWorkOrderTemplateLine        workOrderTemplateLine;
        WPPWorkOrderDateTimeTemplate    workOrderDateTimeTemplate;
        WPPWorkOrderTable               workOrderTable;
        RORRentalDateTimes              rentalDateTimes;
        boolean                         updateWorkOrderLine;
        WPPWorkOrderTaskTable           workOrderTaskTable;
    
        workOrderLineMapEnumerator = workOrderLineMap.getEnumerator();
    
        while (workOrderLineMapEnumerator.moveNext())
        {
            RefRecid workOrderLineRecId = workOrderLineMapEnumerator.currentKey();
            workOrderTemplateLine = workOrderLineMapEnumerator.currentValue();

            select firstonly forupdate workOrderLine
            where workOrderLine.RecId == workOrderLineRecId
                join workOrderTaskTable
                where workOrderTaskTable.TaskId == workOrderLine.TaskId
                    join workOrderTable
                    where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId;

            workOrderDateTimeTemplate = WPPWorkOrderDateTimeTemplate::find(workOrderTemplateLine.RecId);
    
            if (( workOrderCreated && workOrderDateTimeTemplate.SynchMode != WPPDateTimeSynchMode::None)
            ||  (!workOrderCreated && workOrderDateTimeTemplate.SynchMode == WPPDateTimeSynchMode::KeepSynchronized))
            {
                if (workOrderTable.OrderTableId == tableNum(SalesLine))
                {
                    salesLine = SalesLine::findRecId(workOrderTable.OrderRecId);
                    rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();
                }
                else
                if (workOrderTable.OrderTableId == tableNum(SalesTable)
                &&  !rentalDateTimes)
                {
                    rentalDateTimes = salesTable.RORRentalDateTimesHost::rentalDateTimes();
                }
    
                workOrderLine.updateDate(fieldNum(WPPWorkOrderLine, RequestedStartDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                workOrderLine.updateDate(fieldNum(WPPWorkOrderLine, RequestedEndDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                workOrderLine.updateTime(fieldNum(WPPWorkOrderLine, RequestedStartDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                workOrderLine.updateTime(fieldNum(WPPWorkOrderLine, RequestedEndDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                updateWorkOrderLine = true;
            }
    
            if (workOrderTemplateLine.ParentLineRecId)
            {
                workOrderLine.updateParentLineNumber(workOrderTemplateLine.TemplateId,
                                                     workOrderTemplateLine.ParentLineRecId,
                                                     workOrderTemplateLineMap);
    
                updateWorkOrderLine = true;
            }
    
            if (workOrderTaskTable.TaskType == WPPTaskType::Load
            &&  orderLineReplacementMap.exists(workOrderTable.OrderRecId))
            {
                workOrderLine.ParentLineRecId = this.getParentLineRecId(orderLineReplacementMap.lookup(workOrderTable.OrderRecId), tableNum(SalesLine));
                updateWorkOrderLine = true;
            }
    
            this.checkUpdateWorkOrderLine(workOrderLine, updateWorkOrderLine);
        }
    
        // At the very end, because, for example, in the previous loop
        // line 5 can be updated before 3, then the root is not set correctly
        this.updateRootLineRecId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>