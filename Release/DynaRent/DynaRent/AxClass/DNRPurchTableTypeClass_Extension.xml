<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchTableTypeClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchTableType))]
public final class DNRPurchTableTypeClass_Extension
{
    private DNRPurchTableTypeStrategy strategy;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTypeBeChanged</Name>
				<Source><![CDATA[
    public boolean canTypeBeChanged()
    {
        boolean ret = next canTypeBeChanged();

        if (ret)
        {
            ret = this.RORCheckPurchType();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyCheckMessageForValidateDelete</Name>
				<Source><![CDATA[
    protected str intercompanyCheckMessageForValidateDelete()
    {
        str ret = next interCompanyCheckMessageForValidateDelete();

        if (purchTable.PurchaseType == PurchaseType::RORSubRental)
        {
            ret = "@DNR6916";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmPurchCycle</Name>
				<Source><![CDATA[
    // extension methods

    public boolean DNRParmPurchCycle(boolean _purchCycle = purchCycle)
    {
        purchCycle = _purchCycle;
        return purchCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmSalesPurchCycle</Name>
				<Source><![CDATA[
    public SalesPurchCycle DNRParmSalesPurchCycle(SalesPurchCycle _salesPurchCycle = salesPurchCycle)
    {
        salesPurchCycle = _salesPurchCycle;
        return salesPurchCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableTypeStrategy</Name>
				<Source><![CDATA[
    private DNRPurchTableTypeStrategy parmPurchTableTypeStrategy()
    {
        if(!strategy)
        {
            strategy = DNRPurchTableTypeStrategy::construct(this);
        }
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckPurchType</Name>
				<Source><![CDATA[
    private boolean RORCheckPurchType()
    {
        boolean     ret = true;
    
        if (purchTable.PurchaseType == PurchaseType::RORSubRental
        &&  purchTable.orig().PurchaseType != PurchaseType::RORSubRental)
        {
            DictEnum dictEnum = new DictEnum(enumNum(PurchaseType));
           ret = checkFailed(strFmt("@DNR6715", dictEnum.value2Label(enum2int(PurchaseType::RORSubRental)), "@DNR1715", "@DNR5976"));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORmayReturnNoteBeUpdated</Name>
				<Source><![CDATA[
    public boolean RORmayReturnNoteBeUpdated()
    {
        return this.parmPurchTableTypeStrategy().RORmayReturnNoteBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosBuild</Name>
				<Source><![CDATA[
    client server static int RORPosBuild()
    {
        return 9;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosEventEnd</Name>
				<Source><![CDATA[
    client server static int RORPosEventEnd()
    {
        return 11;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosEventStart</Name>
				<Source><![CDATA[
    client server static int RORPosEventStart()
    {
        return 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosInbound</Name>
				<Source><![CDATA[
    client server static int RORPosInbound()
    {
        return 13;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosOutbound</Name>
				<Source><![CDATA[
    client server static int RORPosOutbound()
    {
        return 8;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosPreperation</Name>
				<Source><![CDATA[
    client server static int RORPosPreperation()
    {
        return 7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosReturned</Name>
				<Source><![CDATA[
    client server static int RORPosReturned()
    {
        return 14;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosReturnInspection</Name>
				<Source><![CDATA[
    client server static int RORPosReturnInspection()
    {
        return 15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPosStrike</Name>
				<Source><![CDATA[
    client server static int RORPosStrike()
    {
        return 12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORupdateAmendmentLog</Name>
				<Source><![CDATA[
    public void RORupdateAmendmentLog(ConfirmId _confirmId)
    {
        this.parmPurchTableTypeStrategy().RORupdateAmendmentLog(_confirmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_constructDelegate</Name>
				<Source><![CDATA[
    // event handler methods

    [SubscribesTo(classStr(PurchTableType), staticDelegateStr(PurchTableType, constructDelegate))]
    public static void DNREvent_constructDelegate(PurchTable _purchTable, EventHandlerResult _eventHandlerResult)
    {
        if (_purchTable.PurchaseType == PurchaseType::RORSubRental)
        {
            _eventHandlerResult.result(PurchTableType_RORSubRental::construct(_purchTable));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>