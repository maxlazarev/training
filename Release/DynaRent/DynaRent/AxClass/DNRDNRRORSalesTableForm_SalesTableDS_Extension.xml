<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRDNRRORSalesTableForm_SalesTableDS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formDataSourceStr(DNRRORSalesTable, SalesTable))]
public final class DNRDNRRORSalesTableForm_SalesTableDS_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    int active()
    {
        SalesTable salesTable = element.salesTable();

        boolean currencyCodeAllowEdit = this.object(fieldNum(SalesTable, PurchOrderFormNum)).visible(salesTable.ProjId=='');
        boolean purchOrderFormNumVisible = this.object(fieldNum(SalesTable, PurchOrderFormNum)).visible(salesTable.ProjId=='');
        boolean customerRefVisible = this.object(fieldNum(SalesTable, PurchOrderFormNum)).visible(salesTable.ProjId=='');

        boolean workflowEnabled = element.design().workflowEnabled();

        int ret = next active();

        element.design().workflowEnabled(workflowEnabled);

        element.design().controlName(formControlStr(DNRRORSalesTable, Currency_M_editReportingCurrencyFixedExchangeRate)).visible(false);

        SalesTableType editSalesTableType = salesTable.type();

        this.object(fieldNum(SalesTable, CurrencyCode)  ).allowEdit(currencyCodeAllowEdit);
        this.object(fieldNum(SalesTable, CurrencyCode)  ).skip(!editSalesTableType.editCurrencyCode());
            
        this.object(fieldNum(SalesTable, PurchOrderFormNum)).visible(purchOrderFormNumVisible);
        this.object(fieldNum(SalesTable, CustomerRef)).visible(customerRefVisible);

        this.object(fieldNum(SalesTable, RORVenueCode)).mandatory(RORParameters::find().isWorkLocationMandatory);
        this.object(fieldNum(SalesTable, RORVenueCode)).allowEdit(enum2int(salesTable.DocumentStatus) < enum2int(DocumentStatus::PackingSlip));
        this.object(fieldNum(SalesTable, RORVenueCode)).skip(enum2int(salesTable.DocumentStatus) >= enum2int(DocumentStatus::PackingSlip));

        this.object(fieldNum(SalesTable, DeliveryName)).allowEdit(!salesTable.RORVenueCode);
        this.object(fieldNum(SalesTable, DeliveryName)).skip(salesTable.RORVenueCode != '');
        // Had to do it this way, because it is a reference group and therefore it is not possible
        // to set allowEdit by using the datasources object method
        element.design().controlName(formControlStr(DNRRORSalesTable, ReferenceGroup)).allowEdit(!salesTable.RORVenueCode);
        element.design().controlName(formControlStr(DNRRORSalesTable, ReferenceGroup)).skip(salesTable.RORVenueCode != '');
        element.design().controlName(formControlStr(DNRRORSalesTable, CopyOfReferenceGroup)).allowEdit(!salesTable.RORVenueCode);
        element.design().controlName(formControlStr(DNRRORSalesTable, CopyOfReferenceGroup)).skip(salesTable.RORVenueCode != '');

        this.allowDelete(editSalesTableType.checkDelete(false));

        element.RORUpdateHeaderButtonsDesign_SalesTableDS();
        this.RORUpdateDesign();

        element.design().controlName(formControlStr(DNRRORSalesTable, SalesTable_RetailChannel)).visible(false);
        element.design().controlName(formControlStr(DNRRORSalesTable, MCRPriceOverride)).visible(false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    void write()
    {
        SalesTable salesTableOrig;

        salesTableOrig.data(element.salesTable().orig());
        element.RORParmSalesTable_Orig(salesTableOrig);

        next write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTouched</Name>
				<Source><![CDATA[
    void setTouched()
    {
        next setTouched();
        element.RORUpdateHeaderButtonsDesign_SalesTableDS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reRead</Name>
				<Source><![CDATA[
    public void reRead()
    {
        SalesLine salesLine = element.RORSalesLine();

        // Rereading was causing an error when the sales line wouldn't get saved,
        // but the focus would be taken off the line.  This ensures an unsaved sales line is cleared
        // before the view is refreshed.
        if (!salesLine.RecId)
        {
            salesLine.clear();
        }

        next reRead();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        next init();

        switch (element.args().dataset())
        {
            case tableNum(smmBusRelTable):
                this.RORmodifyQueryBusRel();
                break;

            case tableNum(RORRentalOrderLineView):
                this.queryBuildDataSource().addRange(fieldNum(SalesTable, SalesId)).value(element.args().record().getFieldValue(fieldStr(RORRentalOrderLineView, SalesId)));
                break;
        }

        InventTransId callerSubRentalLineInventTransId = element.RORGetCallerSubRentalLineInventTransId();

        if (callerSubRentalLineInventTransId)
        {
            QueryBuildDataSource qbds = this.queryBuildDataSource().addDataSource(tableNum(RORSubrentalReference));
            qbds.relations(false);
            qbds.addLink(fieldNum(SalesTable, SalesId), fieldNum(RORSubrentalReference, SalesId));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(RORSubrentalReference, PurchInventTransId)).value(callerSubRentalLineInventTransId);
        }

        if (InventParameters::find().UseQualityManagement)
        {
            this.cacheAddMethod(tableMethodStr(SalesTable, qualityOrderStatusDisplay));
        }

        this.object(fieldNum(SalesTable, CurrencyCode)).allowEdit(false);
        this.object(fieldNum(SalesTable, InterCompanyDirectDelivery)).allowEdit(false);
        this.object(fieldNum(SalesTable, CurrencyCode)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateDesign</Name>
				<Source><![CDATA[
    // Extension methods

    public void RORUpdateDesign()
    {
        SalesTable salesTable = element.salesTable();

        this.object(fieldNum(SalesTable, ProjId)).allowEdit(salesTable.DocumentStatus == DocumentStatus::PurchaseOrder
                                                         || salesTable.DocumentStatus == DocumentStatus::Quotation
                                                         || salesTable.DocumentStatus == DocumentStatus::None
                                                         || !CustInvoiceTrans::existSalesId(salesTable.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORmodifyQueryBusRel</Name>
				<Source><![CDATA[
    void RORmodifyQueryBusRel()
    {
        smmBusRelTable smmBusRelTable = element.args().record();
        CustAccount custAccount = smmBusRelTable.custAccount();
        
        if (custAccount)
        {
            QueryBuildDataSource qbdsSalesTable = this.query().dataSourceTable(tableNum(SalesTable));
            qbdsSalesTable.clearDynalinks();
            qbdsSalesTable.addRange(fieldNum(SalesTable, CustAccount)).value(custAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTable_OnWritten</Name>
				<Source><![CDATA[
    // Event-handler methods

    [FormDataSourceEventHandler(formDataSourceStr(DNRRORSalesTable, SalesTable), FormDataSourceEventType::Written)]
    public static void SalesTable_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        SalesTable salesTableOrig = formRunObj.RORParmSalesTable_Orig();
        SalesTable salesTable = _sender.cursor() as SalesTable;
        
        salesTable.RORSynchroniseVenueCode(salesTableOrig);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>