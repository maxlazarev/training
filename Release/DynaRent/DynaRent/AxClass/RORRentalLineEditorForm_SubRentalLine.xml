<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalLineEditorForm_SubRentalLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORRentalLineEditorForm_SubRentalLine extends RORRentalLineEditorForm
{
    PurchLine   purchLine;
    PurchTable  purchTable;

    boolean     setIsModified;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSetTaxGroups</Name>
				<Source><![CDATA[
    protected void checkSetTaxGroups()
    {
        RORRentalEditorLine editorLine;
        ;

        if (purchTable.InclTax)
        {
            while select forUpdate editorLine
            where editorLine.ParmId == this.parmId()
            &&    editorLine.MainKitReference == purchLine.RecId
            &&    editorLine.RefTableId == tableNum(PurchLine)
            {
                editorLine.TaxGroup     =  purchLine.TaxGroup;
                editorLine.TaxItemGroup = (editorLine.TradeType == RORTradeType::SalesPurch ?
                                           InventTableModule::find(editorLine.ItemId, ModuleInventPurchSales::Purch).TaxItemGroupId :
                                           RORInventItemRentalSetup::findDefault(editorLine.ItemId).TaxItemGroup);
                editorLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    protected container createLine(RORRentalEditorLine  _rentalEditorLine,
                                   RORKitComponentType  _kitComponentType,
                                   RORRentalLine        _lineParent,
                                   LineNum              _lastLineNum)
    {
        PurchLine   purchLineComponent;
        ;
    
        purchLineComponent.initValue();
        purchLineComponent.initFromPurchTable(purchTable);
        purchLineComponent.PurchaseType             = purchLine.PurchaseType;
        purchLineComponent.PurchId                  = purchLine.PurchId;
        if (_rentalEditorLine.LineType == RORLineType::Normal || _rentalEditorLine.LineType == RORLineType::Insurance)
        {
            purchLineComponent.RORTradeType             = purchLine.RORTradeType;
            purchLineComponent.RORModifiedRORTradeType();
        }
        purchLineComponent.RORParentLineRecId       = _lineParent.RecId;
    
        purchLineComponent.ItemId                   = _rentalEditorLine.ItemId;
        purchLineComponent.itemIdChanged();
    
        this.initInventDimIdOnComponent(purchLineComponent, _rentalEditorLine);
    
        purchLineComponent.RORKitComponentType      = _rentalEditorLine.kitComponentType();
        purchLineComponent.RORAllowQtyEdit          = _rentalEditorLine.AllowQtyEdit;
    
        purchLineComponent.RORRentalLine::initPricingFromRentalLine(_rentalEditorLine);
        // can reset some pricing elements
        purchLineComponent.RORRentalLine::initFromParent(_lineParent);
    
        if(purchLineComponent.RORTradeType != RORTradeType::SalesPurch)
        {
            // Keep invoice profile and calendar the same as it was shown in RLE
            purchLineComponent.INVInvoiceProfileId  = _rentalEditorLine.INVInvoiceProfileId;
            purchLineComponent.DNRCalendarId        = _rentalEditorLine.DNRCalendarId;

            purchLineComponent.RORRentalPricesModified();
        }
    
        purchLineComponent.RORIsPriceFixed          = _rentalEditorLine.IsPriceFixed;
        purchLineComponent.RORIsPriceNet            = _rentalEditorLine.IsPriceNet;
    
        purchLineComponent.RORSuppItemTableRecid    = _rentalEditorLine.SuppItemTableRecid;
        // find a line number between _lastLineNum and the next line
        purchLineComponent.LineNumber = real2int(purchLineComponent.RORRentalLine::getNextLineNum(_lastLineNum, lastContractItemLineNum));
        purchLineComponent.RORIsModified = NoYes::Yes;
        setIsModified = true;
        purchLineComponent.createLine(true, false, false, true, false, false);
    
        _rentalEditorLine.DNRWriteAdditionalNotes(purchLineComponent);
    
        return [ purchLineComponent.InventTransId, purchLineComponent.LineNumber ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineById</Name>
				<Source><![CDATA[
    protected RORRentalLine findLineById(InventTransId _inventTransId)
    {
        return PurchLine::findInventTransId(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId getInventDimId()
    {
        InventDim   inventDim;
    
        if (purchTable.InventLocationId)
        {
            inventDim.InventLocationId = purchTable.InventLocationId;
        }
    
        if (purchTable.InventSiteId)
        {
            inventDim.InventSiteId = purchTable.InventSiteId;
        }
    
        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallerHeader</Name>
				<Source><![CDATA[
    public void initFromCallerHeader(RORRentalEditorLine _rentalEditorLine)
    {
        _rentalEditorLine.HeaderId              = purchTable.PurchId;
        _rentalEditorLine.INVInvoiceProfileId   = purchTable.INVInvoiceProfileId;
        _rentalEditorLine.CustVendAccount       = purchTable.OrderAccount;
    
        _rentalEditorLine.RORRentalLine::initFromHeaderBuffer(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PurchLine _purchLine)
    {
        super(_purchLine);
    
        purchLine   = _purchLine;
        purchTable  = _purchLine.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeader</Name>
				<Source><![CDATA[
    protected void updateHeader()
    {
        if (purchTable && !purchTable.RORIsModified && setIsModified)
        {
            ttsBegin;
            purchTable = PurchTable::findRecId(purchTable.RecId, true);
            purchTable.RORIsModified = setIsModified;
            purchTable.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    protected LineNum updateLine(
        Common                  _common,
        RORKitComponentType     _kitComponentType,
        RORRentalEditorLine     _rentalEditorLine = null)
    {
        PurchLine   purchLineUpdate = _common as PurchLine;
        PurchLine   purchLineOrig = purchLineUpdate.orig();
        boolean     hasEffectivityRange = mainKitHeader.EffectiveDateTimeFrom != DateTimeUtil::minValue() || mainKitHeader.EffectiveDateTimeTo != DateTimeUtil::minValue();
        ;
    
        if (purchLineUpdate)
        {
            purchLineUpdate.RORKitComponentType = _kitComponentType;
    
            if (_rentalEditorLine)
            {
                purchLineUpdate.RORRentalLine::updateFromRentalEditorLine(_rentalEditorLine, hasEffectivityRange);
                PurchLine::modifyPurchQty(purchLineUpdate, purchLineUpdate.inventDim(), false);
                if (purchLineUpdate.PurchQty != purchLineOrig.PurchQty)
                {
                    InventMovement::bufferSetRemainQty(purchLineUpdate);
                }
    
                _rentalEditorLine.DNRWriteAdditionalNotes(purchLineUpdate);
            }
    
            purchLineUpdate.update();
    
            if (hasEffectivityRange)
            {
                // set pricing values on buffer but don't commit to database
                purchLineUpdate.RORRentalLine::updateFromRentalEditorLine(_rentalEditorLine);
                PurchLine::modifyPurchQty(purchLineUpdate, purchLineUpdate.inventDim(), false);

                Map changesMap = this.getChangesMap(purchLineUpdate, purchLineOrig);
                ROROrderAmendmentDialogType::runFinancialChanges(purchLineOrig, changesMap);
            }
        }
    
        //Casting from int64 to int as it will end up in a field of type real (For use with salesLine.LineNum). This may never exceed maxInt.
        if (purchLineUpdate.LineNumber > maxInt())
        {
            throw error("@SYS27409");
        }
    
        return int642int(purchLineUpdate.LineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCallerLine</Name>
				<Source><![CDATA[
    protected RORRentalLine selectCallerLine(PurchLineRefRecId _callerLineRecId)
    {
        PurchLine callerLine;

        select firstonly callerLine where callerLine.RecId == _callerLineRecId;
        return callerLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>