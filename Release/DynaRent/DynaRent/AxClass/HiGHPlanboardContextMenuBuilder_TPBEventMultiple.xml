<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanboardContextMenuBuilder_TPBEventMultiple</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HiGHPlanboardContextMenuBuilder_TPBEventMultiple extends HiGHPlanboardContextMenuBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    // main extension point for customizing the contents of the context menu.
    public void populate()
    {
        WPPWorkOrderTable workOrderTable;
        WPPWorkOrderLine workOrderLine;
        WPPWorkOrderLineResource resourcePlanning;
        WPPWorkOrderTaskTable taskTable;
        WPPTransportPlanBoardEntityLock entityLock;
        Map allowedStatusUpdateMap;

        boolean allowUnassign               = true,
                allowStatusUpdate           = true,
                allowStatusUpdPlanned       = true,
                allowStatusUpdReleased      = true,
                allowStatusUpdInProgress    = true,
                allowStatusUpdCompleted     = true,
                isTaskLocked;
        
        DNRTmpIdList tmpRecIds;
        tmpRecIds.linkPhysicalTableInstance(this.getTmpIdList(sender));

        while select TableId from tmpRecIds
            join TableId from resourcePlanning
            where resourcePlanning.RecId == tmpRecIds.RefRecId
                join Status from workOrderLine
                where workOrderLine.RecId == resourcePlanning.WorkOrderLineRecId
                    join WorkOrderStatusGroupId from taskTable
                    where taskTable.TaskId == workOrderLine.TaskId
                        join BOBObjectTableRecId, OrderTableId from workOrderTable
                        where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                            outer join UserId from entityLock
                            where entityLock.RefTableId == resourcePlanning.TableId
                            &&    entityLock.RefRecId   == resourcePlanning.RecId
        {
            if(entityLock && entityLock.UserId != curUserId())
            {
                isTaskLocked  = true;
            }

            allowUnassign = (allowUnassign && workOrderLine.Status == WPPWorkOrderLineStatus::Planned);

            if(allowStatusUpdate && (workOrderTable.BOBObjectTableRecId 
                                  || workOrderTable.OrderTableId == tableNum(WHSShipmentTable) 
                                  || workOrderTable.OrderTableId == tableNum(InventJournalTable)
                                  || workOrderTable.OrderTableId == tableNum(SalesLine)
                                  || workOrderTable.OrderTableId == tableNum(PurchLine)))
            {
                allowedStatusUpdateMap      = WPPWorkOrderStatusSetup::getPossibleWorkOrderStatus(taskTable.WorkOrderStatusGroupId, workOrderLine.Status);
                allowStatusUpdPlanned       = (allowStatusUpdPlanned && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Planned));
                allowStatusUpdReleased      = (allowStatusUpdReleased && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Released));
                allowStatusUpdInProgress    = (allowStatusUpdInProgress && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::InProgress));
                allowStatusUpdCompleted     = (allowStatusUpdCompleted && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Completed));
            }
            else
            {
                allowStatusUpdate = false;
            }
        }

        if(isTaskLocked)
        {
            warning("@DNR7871");
        }
        else
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS32754"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS32845", (allowStatusUpdate && allowStatusUpdPlanned), #UpdateStatusPlannedMultiple));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS6966", (allowStatusUpdate && allowStatusUpdReleased), #UpdateStatusReleasedMultiple));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS137068", (allowStatusUpdate && allowStatusUpdInProgress), #UpdateStatusInProgressMultiple));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS55438", (allowStatusUpdate && allowStatusUpdCompleted), #UpdateStatusCompletedMultiple));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7206", allowUnassign, #UnassignTaskMultiple));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1496", true, #PrintDocuments));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpIdList</Name>
				<Source><![CDATA[
    private DNRTmpIdList getTmpIdList(HiGHPlanBoardOnContextPlannedEventEventArgs _sender)
    {
        DNRTmpIdList tmpRecIds;
        List plannedEvents = _sender.parmPlannedEvents();
        ListEnumerator plannedEventsEnum = plannedEvents.getEnumerator();
        RecordInsertList insertList = new RecordInsertList(tableNum(DNRTmpIdList), false, false, false, false, false, TmpRecIds);

        while(plannedEventsEnum.moveNext())
        {
            HiGHPlanBoardPlannedEventBaseArgs plannedEventBaseArgs = plannedEventsEnum.current();

            // load all selected item's RecIds into a temporary table so we can join them to the physical tables later
            tmpRecIds.RefRecId = plannedEventBaseArgs.parmRefRecId();
            insertList.add(tmpRecIds);
        }

        insertList.insertDatabase();
        return tmpRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>