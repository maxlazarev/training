<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ROROrderAmendmentDialogType_ChangeOnOff</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ROROrderAmendmentDialogType_ChangeOnOff extends ROROrderAmendmentDialogType_ChangeDate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWarningText</Name>
				<Source><![CDATA[
    public InfologText getWarningText()
    {
        // Super because some variables are set that are required to enabled/disable fields
        super();
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_Invoiced</Name>
				<Source><![CDATA[
    protected InfologText getWarningText_Invoiced()
    {
        PurchLine           purchLine;
        PurchTable          purchTable;
        SalesLine           salesLine;
        SalesTable          salesTable;
        InfologText         warningText;
    
        validateInvoiced = true;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
    
                if (purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Invoiced)
                {
                    warningText = strFmt("@DNR6351", strLwr("@DNR5973"));
    
                    validateInvoiced = false;
                }
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
    
                select firstonly RecId from purchLine
                where purchLine.PurchId            == purchTable.PurchId
                &&    purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Invoiced;
    
                if (purchLine.RecId)
                {
                    warningText = strFmt("@DNR6351", strLwr("@DNR5973"));
    
                    select firstonly RecId from purchLine
                    where purchLine.PurchId           == purchTable.PurchId
                    &&    purchLine.BOBRentalSubStatus < BOBRentalSubStatus::Invoiced;
    
                    validateInvoiced = !purchLine.RecId;
                }
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
    
                if (salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Invoiced)
                {
                    warningText = strFmt("@DNR6351", strLwr("@DNR5966"));
    
                    validateInvoiced = false;
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
    
                select firstOnly RecId from salesLine
                where salesLine.SalesId            == salesTable.SalesId
                &&    salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Invoiced;
    
                if (salesLine.RecId)
                {
                    warningText = strFmt("@DNR6351", strLwr("@DNR5966"));
    
                    select firstOnly RecId from salesLine
                    where salesLine.SalesId           == salesTable.SalesId
                    &&    salesLine.BOBRentalSubStatus < BOBRentalSubStatus::Invoiced;
    
                    validateInvoiced = !salesLine.RecId;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_Returned</Name>
				<Source><![CDATA[
    protected InfologText getWarningText_Returned()
    {
        PurchLine       purchLine;
        PurchTable      purchTable;
        SalesLine       salesLine;
        SalesTable      salesTable;
        InfologText     warningText;
        str             enabledDates;
    
        validateReturned = true;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
    
                if (purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned)
                {
                    warningText = strFmt("@DNR6350", strLwr("@DNR5973"));
                    validateReturned = false;
                }
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
    
                select RecId from purchLine
                where purchLine.PurchId == purchTable.PurchId
                && purchLine.RORTradeType != RORTradeType::SalesPurch
                && purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned;
    
                if (purchLine.RecId)
                {
                    warningText = strFmt("@DNR6350", strLwr("@DNR5973"));
    
                    select minOf(BOBRentalSubStatus) from purchLine
                    where purchLine.PurchId == purchTable.PurchId
                    && purchLine.RORTradeType != RORTradeType::SalesPurch;
    
                    validateReturned = purchLine.BOBRentalSubStatus < BOBRentalSubStatus::Returned;
                }
                break;
    
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
    
                if (salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned)
                {
                    warningText = strFmt("@DNR6350", strLwr("@DNR5966"));
                    validateReturned = false;
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
    
                select RecId from salesLine
                where salesLine.SalesId == salesTable.SalesId
                && salesLine.RORTradeType != RORTradeType::SalesPurch
                && salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned;
    
                if (salesLine.RecId)
                {
                    warningText = strFmt("@DNR6347", enabledDates, strLwr("@DNR5966"));
    
                    select minOf(BOBRentalSubStatus) from salesLine
                    where salesLine.SalesId == salesTable.SalesId
                    && salesLine.RORTradeType != RORTradeType::SalesPurch;
    
                    validateReturned = salesLine.BOBRentalSubStatus < BOBRentalSubStatus::Returned;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonType</Name>
				<Source><![CDATA[
    public DNRReasonType reasonType()
    {
        return DNRReasonType::OnOffDateChange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>