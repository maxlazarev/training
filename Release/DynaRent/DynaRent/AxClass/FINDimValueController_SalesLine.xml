<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimValueController_SalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimValueController_SalesLine extends FINDimValueController
{
    SalesLine   callerSalesLine;
    SalesTable  salesTable;




}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceptCascadedUpdate</Name>
				<Source><![CDATA[
    protected boolean acceptCascadedUpdate()
    {
        return (callerSalesLine.SalesStatus != SalesStatus::Invoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    protected Description getDescription()
    {
        return callerSalesLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimensionFieldId()
    {
        return fieldNum(SalesLine, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesLine _salesLine)
    {
        super(_salesLine);
        callerSalesLine = _salesLine;
    
        select firstOnly salesTable
        where salesTable.SalesId == callerSalesLine.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refDepartmentIdObjectOwner</Name>
				<Source><![CDATA[
    protected FINDimValueResult refDepartmentIdObjectOwner()
    {
        InventDim               inventDim;
        BOBObjectTable          objectTable;
        BOBObjectOwnershipLog   objectOwnershipLog;
    
        select firstOnly TableId from inventDim
        where inventDim.inventDimId == callerSalesLine.InventDimId
        &&    inventDim.inventSerialId
            join TableId from objectTable
            where objectTable.InventSerialId == inventDim.InventSerialId
                join Depot from objectOwnershipLog
                order by objectOwnershipLog.createdDateTime desc
                where objectOwnershipLog.ObjectId == objectTable.ObjectId;
    
        if (objectOwnershipLog)
        {
            return FINDimValueResult::constructReference(InventLocation::find(objectOwnershipLog.Depot));
        }
    
        return FINDimValueResult::constructValue('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>refLot</Name>
				<Source><![CDATA[
    protected FINDimValueResult refLot()
    {
        FINDimValueResult   valueResult;
        SalesLine           parentSalesLine;
        InventTable         inventTable;
        BOBObjectTable      objectTable;
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderLine    workOrderLine;
    
        if (salesTable.ProjId)
        {
            select firstOnly objectTable
                exists join workOrderTable
                where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                    join TableId from workOrderLine
                    where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                    &&    workOrderLine.ProjId      == salesTable.ProjId;
    
            valueResult = FINDimValueResult::constructReference(objectTable);
        }
        else if (callerSalesLine.RORKitComponentType == RORKitComponentType::Kit && !callerSalesLine.RORParentLineRecId)
        {
            parentSalesLine = FINDimValueController_Common::getKitMainComponentLine(callerSalesLine) as SalesLine;

            if(parentSalesLine)
            {
                valueResult = FINDimValueResult::constructReference(parentSalesLine);
            }
            else
            {
                valueResult = FINDimValueResult::constructReference(callerSalesLine.inventTable());
            }
        } 
        else if ((callerSalesLine.RORKitComponentType == RORKitComponentType::Component || callerSalesLine.RORKitComponentType == RORKitComponentType::KitComponent)
              && !callerSalesLine.inventDim().inventSerialId)
        {
            parentSalesLine = FINDimValueController_Common::getMainComponentLine(callerSalesLine) as SalesLine;

            if (parentSalesLine)
            {
                valueResult = FINDimValueResult::constructReference(parentSalesLine);
            }
            else
            {
                valueResult = FINDimValueResult::constructReference(callerSalesLine.inventTable());
            }
        }
        else if(callerSalesLine.RORKitComponentType == RORKitComponentType::KitComponent && callerSalesLine.RORParentLineRecId)
        {
            parentSalesLine = callerSalesLine.RORGetParentLine() as SalesLine;
            valueResult = FINDimValueResult::constructReference(parentSalesLine);
        }
        else if(callerSalesLine.ItemId != RAGParameters::find().ItemIdWarranty && !callerSalesLine.RORParentLineRecId)
        {
            valueResult = FINDimValueController_Common::refLot(callerSalesLine.ItemId, callerSalesLine.InventDimId);
    
            if(!valueResult || (valueResult.parmRefTableId() == 0 && valueResult.parmRefRecId() == 0))
            {
                select firstOnly RecId from inventTable
                where inventTable.ItemId == callerSalesLine.ItemId;
    
                valueResult = FINDimValueResult::constructReference(inventTable);
            }
        }
        else if(callerSalesLine.RORParentLineRecId)
        {
            parentSalesLine = callerSalesLine.RORGetParentLine();
            valueResult = FINDimValueResult::constructReference(parentSalesLine);
        }
        else
        {
            valueResult = FINDimValueController_Common::refLot(callerSalesLine.ItemId, callerSalesLine.InventDimId);
    
            if(!valueResult || (valueResult.parmRefTableId() == 0 && valueResult.parmRefRecId() == 0))
            {
                select firstOnly RecId from inventTable
                where inventTable.ItemId == callerSalesLine.ItemId;
    
                valueResult = FINDimValueResult::constructReference(inventTable);
            }
        }
    
        return valueResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refSalesTable</Name>
				<Source><![CDATA[
    protected FINDimValueResult refSalesTable()
    {
        return FINDimValueResult::constructReference(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCleanupQuery</Name>
				<Source><![CDATA[
    public SysDaQueryObject getCleanupQuery()
    {
        SysDaQueryObject cleanupQuery = new SysDaQueryObject(callerSalesLine);

        cleanupQuery.WhereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(callerSalesLine, fieldStr(SalesLine, SalesStatus)),
            new SysDaValueExpression(SalesStatus::Invoiced))
        .or(new SysDaEqualsExpression(
            new SysDaFieldExpression(callerSalesLine, fieldStr(SalesLine, SalesStatus)),
            new SysDaValueExpression(SalesStatus::Canceled))));

        return cleanupQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>