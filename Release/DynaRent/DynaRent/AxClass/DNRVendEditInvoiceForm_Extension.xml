<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRVendEditInvoiceForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(VendEditInvoice))]
public final class DNRVendEditInvoiceForm_Extension
{
    #task

    private boolean isSubRental;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    void reSelect()
    {
        if ((VendInvoiceInfoTable.INVPurchaseType == PurchaseType::RORSubRental || VendInvoiceInfoTable.purchTable().PurchaseType == PurchaseType::RORSubRental)
        &&   VendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending)
        {
            VendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::New;
            VendInvoiceInfoTable_ds.write();
            VendInvoiceInfoTable_ds.research(true);
        }

        purchFormLetter.DNRParmForceReselect(true);

        next reSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderFields</Name>
				<Source><![CDATA[
    public void setHeaderFields()
    {
        boolean isAdvance           = (vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance);
        boolean isHeaderInitialized = (vendInvoiceInfoTable.TableRefId != '');
        boolean enableFields;

        if (isLastInvoiceAdvance != isAdvance)
        {
            enableFields = isHeaderInitialized && !isAdvance;

            INVchooseInvoice.enabled(enableFields);
        }
        
        next setHeaderFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        if (_taskId == #taskEditRecord)
        {
            isSubRental = (isSubRental || (purchTable && purchTable.PurchaseType == PurchaseType::RORSubRental));
            
            INVCalculationPointGroup.visible(isSubRental);
            INVIncludeLinesGroup.visible(isSubRental);
            VendInvoiceInfoLine_ds.object(fieldNum(VendInvoiceInfoLine, INVInvoicePeriods)).visible(isSubRental);

            if (isSubRental)
            {
                PurchParmTable_PurchId.label("@DNR1715");
                PurchParmTable_PurchId2.label("@DNR1715");
            }
        }

        int ret = next task(_taskId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormDesign</Name>
				<Source><![CDATA[
    void setFormDesign(VendInvoiceDesignMode _vendInvoiceDesignMode)
    {
        next setFormDesign(_vendInvoiceDesignMode);

        switch (_vendInvoiceDesignMode)
        {
            case VendInvoiceDesignMode::MultipleInvoice:
                INVchooseInvoice.visible(purchEditLinesForm_Invoice.showOverviewNew_PL());
                break;

            case VendInvoiceDesignMode::MultipleInvoiceHeader:
                INVchooseInvoice.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountModified</Name>
				<Source><![CDATA[
    public void invoiceAccountModified()
    {
        vendInvoiceInfoTable.TransDate      = dateNull();
        vendInvoiceInfoTable.DocumentDate   = vendInvoiceInfoTable.TransDate;

        next invoiceAccountModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        VendInvoiceInfoTable    vendInvoiceInfoTableLocal;
        ParmId                  parmId;
        QueryFilter             queryFilter;
        QueryBuildDataSource    qbds;

        next init();

        FormButtonGroupControl      matching            =   this.design().controlName(formControlStr(VendEditInvoice, matching)) as FormButtonGroupControl;
        FormButtonSeparatorControl  separatorMatching   =   this.design().controlName(formControlStr(VendEditInvoice, separatorMatching)) as FormButtonSeparatorControl;

        //repeated to have the same result for the local variable parmid as in the original code.
        parmId = purchFormLetter.parmId();

        purchParmUpdate_ds.query().dataSourceTable(tableNum(PurchParmUpdate)).addRange(fieldNum(PurchParmUpdate, ParmId)).value(queryValue(parmId));
        vendInvoiceInfoTable_ds.query().dataSourceTable(tableNum(VendInvoiceInfoTable)).addRange(fieldNum(VendInvoiceInfoTable, ParmId)).value(queryValue(parmId));

        qbds = vendInvoiceInfoTable_ds.query().dataSourceTable(tablenum(VendInvoiceInfoTable));
        queryFilter = vendInvoiceInfoTable_ds.query().addQueryFilter(qbds, fieldStr(VendInvoiceInfoTable, ParmId));
        queryFilter.status(RangeStatus::Hidden);
        //repeated code ends here.

        if (purchFormLetter.parmCallerMenuItem() == menuitemActionStr(INVPurchFormLetter_NewInvoiceAction))
        {
            isSingleInvoiceHeader = true;
        }

        select firstOnly vendInvoiceInfoTableLocal
        where vendInvoiceInfoTableLocal.ParmId == parmId;

        PurchFormLetterContract purchFormLetterContract = purchFormLetter.getPurchFormLetterContract();
        purchFormLetterContract.FINparmPendingVendInvoiceInfoTable(vendInvoiceInfoTableLocal);

        isSubRental = purchFormLetterContract.RORIsSubRentalPosting();
    
        INVCalculationPointGroup.visible(isSubRental);
        INVIncludeLinesGroup.visible(isSubRental);
        VendInvoiceInfoLine_ds.object(fieldNum(VendInvoiceInfoLine, INVInvoicePeriods)).visible(isSubRental);
        separatorMatching.visible(!isSubRental);
        TabButtonParmLinePackingSlips.visible(!isSubRental);
        ParmLineMatchingDetails.visible(!isSubRental);
        TabButtonVendInvoicePolicyViolationLine.visible(!isSubRental);
        InvoiceDetails_MatchVariance.visible(!isSubRental);
    
        if (isSubRental)
        {
            FormTabPageControl tabPageParmSubTable          =   this.design().controlName(formControlStr(VendEditInvoice, tabPageParmSubTable)) as FormTabPageControl;
            FormStringControl purchParmSubTable_OrigPurchId =   this.design().controlName(formControlStr(VendEditInvoice, purchParmSubTable_OrigPurchId)) as FormStringControl;
            FormStringControl PurchParmLine_OrigPurchId1    =   this.design().controlName(formControlStr(VendEditInvoice, PurchParmLine_OrigPurchId1)) as FormStringControl;

            PurchParmTable_PurchId.label("@DNR1715");
            PurchParmTable_PurchId2.label("@DNR1715");
            InvoiceDetails_PurchId.label("@DNR1715");
            tabPageParmSubTable.caption("@DNR3227");
            purchParmSubTable_OrigPurchId.label("@DNR1715");
            PurchParmLine_OrigPurchId1.label("@DNR1715");
            //buttonRetPurchOrder.text("@DNR8580");
            //buttonRetPurchOrder.helpText("@DNR8581");    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRetrievePOButton</Name>
				<Source><![CDATA[
    public void enableRetrievePOButton()
    {
        next enableRetrievePOButton();

        // Obtain the value of the boolean 'doEnable'.
        boolean doEnable = buttonRetrievePO.enabled();

        if (vendInvoiceInfoTable)
        {
            buttonRetrievePO.enabled(doEnable && vendInvoiceInfoTable.INVPurchaseType != PurchaseType::RORSubRental);
            RORbuttonRetrievePO.enabled(doEnable && vendInvoiceInfoTable.INVPurchaseType == PurchaseType::RORSubRental);
        }
        else if (purchFormLetter && isSubRental)
        {
            buttonRetrievePO.enabled(false);
            RORbuttonRetrievePO.enabled(doEnable);
        }
        else
        {
            buttonRetrievePO.enabled(doEnable);
            RORbuttonRetrievePO.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineCreate</Name>
				<Source><![CDATA[
    void allowLineCreate()
    {
        boolean allowLineCreation = true;

        next allowLineCreate();

        if (isSubRental)
        {
            allowLineCreation = false;
        }
        else 

        if (!workflowFullEnabled || vendInvoiceInfoTable.InvoiceAccount == '')
        {
            // Can't create lines until vendor is entered
            allowLineCreation = false;
        }
        else if (!vendInvoiceInfoTable.isNonPO() && vendInvoiceInfoTable.purchTable().isInterCompanyOrder())
        {
            // Can't create lines when header has an inter-company PO assigned
            allowLineCreation = false;
        }
        else if (vendInvoiceInfoTable.vendTable_InvoiceAccount().interCompanyTradingRelationActive())
        {
            // Can't create lines when header has an inter-company vendor (AIF endpoint) assigned
            allowLineCreation = false;
        }
        else if (isLastInvoiceAdvance)
        {
            // Can't create lines when header is prepayment invoice
            allowLineCreation = false;
        }

        vendInvoiceInfoLine_ds.allowCreate(allowLineCreation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        next run();

        switch (purchFormLetter.parmCallerMenuItem())
        {
            case menuitemActionStr(INVVendEditInvoiceFromSubRentalOrder):
                INVchooseInvoice.clicked();
                break;

            case menuitemActionStr(INVPurchFormLetter_NewInvoiceAction):
                this.task(#taskNew);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateDesign</Name>
				<Source><![CDATA[
    // extension methods

    public void RORUpdateDesign()
    {
        boolean isSalesItemLine = vendInvoiceInfoLine.RORTradeType == RORTradeType::SalesPurch;
        
        vendInvoiceInfoLine_ds.object(fieldNum(VendInvoiceInfoLine, LineAmount)).allowEdit(isSalesItemLine);
        vendInvoiceInfoLine_ds.object(fieldNum(VendInvoiceInfoLine, PurchUnit)).allowEdit(isSalesItemLine);
        vendInvoiceInfoLine_ds.object(fieldNum(VendInvoiceInfoLine, ReceiveNow)).allowEdit(isSalesItemLine && vendInvoiceInfoLine.purchLine().RORLineType != RORLineType::Warranty);
        vendInvoiceInfoLine_ds.object(fieldNum(VendInvoiceInfoLine, ProcurementCategory)).allowEdit(isSalesItemLine);
        vendInvoiceInfoLine_ds.object(fieldNum(VendInvoiceInfoLine, PurchPrice)).allowEdit(isSalesItemLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmPurchFormLetter</Name>
				<Source><![CDATA[
    public PurchFormLetter_Invoice DNRparmPurchFormLetter(PurchFormLetter_Invoice _purchFormLetter = purchFormLetter)
    {
        purchFormLetter = _purchFormLetter;
        return purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRgetIsSubRental</Name>
				<Source><![CDATA[
    private boolean DNRgetIsSubRental()
    {
        return isSubRental;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable DNRGetVendInvoiceInfoTable()
    {
        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendInvoiceInfoTableDS_PurchId_onLookup</Name>
				<Source><![CDATA[
    public void VendInvoiceInfoTableDS_PurchId_onLookup(FormStringControl _callingControl)
    {
        FormRun                     formRun              = _callingControl.formRun();
        Object                      formRunObject        = formRun as Object;
        VendInvoiceInfoTable        vendInvoiceInfoTable = formRun.dataSource(formDataSourceStr(VendEditInvoice, VendInvoiceInfoTable)).cursor() as VendInvoiceInfoTable;
        PurchFormLetter_Invoice     purchFormLetter      = formRunObject.DNRparmPurchFormLetter();

        using(DNRVendInvoiceInfoTableDisposableContext context = new DNRVendInvoiceInfoTableDisposableContext())
        {
            context.DNRparmPurchFormLetter(purchFormLetter); // Used in /classes/DNRVendInvoiceInfoTableTable_Extension/methods/lookupPurchId
            vendInvoiceInfoTable.lookupPurchId(_callingControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendInvoiceInfoTableDS_PurchId_onJumpRef</Name>
				<Source><![CDATA[
    public void VendInvoiceInfoTableDS_PurchId_onJumpRef(FormDataObject _targetField)
    {
        PurchTable              purchTableLocal;
        FormRun                 formRun                 = _targetField.datasource().formRun();
        VendInvoiceInfoTable    VendInvoiceInfoTable    = formRun.dataSource(formDataSourceStr(VendEditInvoice, VendInvoiceInfoTable)).cursor()       as VendInvoiceInfoTable;
        VendInvoiceInfoSubTable VendInvoiceInfoSubTable = formRun.dataSource(formDataSourceStr(VendEditInvoice, VendInvoiceInfoSubTable)).cursor()    as VendInvoiceInfoSubTable;
            
        if(VendInvoiceInfoTable.purchId)
        {
            purchTableLocal = PurchTable::find(VendInvoiceInfoTable.purchId);
        }
        else if(VendInvoiceInfoSubTable.OrigPurchId)
        {
            purchTableLocal = PurchTable::find(VendInvoiceInfoSubTable.OrigPurchId);
        }
            
        if(purchTableLocal)
        {
            Args args = new Args();
            args.record(purchTableLocal);
            
            if(purchTableLocal.PurchaseType == PurchaseType::RORSubRental)
            {
                new MenuFunction(menuitemDisplayStr(RORPurchTable), MenuItemType::Display).run(args);
            }
            else
            {
                new MenuFunction(menuitemDisplayStr(PurchTable), MenuItemType::Display).run(args);
            }
        }
        else
        {
            //emulate super() call
            _targetField.jumpRef();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_VendInvoiceInfoTableDS_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods
    // This data event is used to register override methods.
    [FormDataSourceEventHandler(formDataSourceStr(VendEditInvoice, VendInvoiceInfoTable), FormDataSourceEventType::Initialized)]
    public static void DNREvent_VendInvoiceInfoTableDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        var overrides = _sender.formRun() as FormRun;

        _sender.object(fieldNum(VendInvoiceInfoTable, PurchId)).registerOverrideMethod(methodStr(FormDataObject, lookup), methodStr(DNRVendEditInvoiceForm_Extension, VendInvoiceInfoTableDS_PurchId_onLookup), overrides);
        _sender.object(fieldNum(VendInvoiceInfoTable, PurchId)).registerOverrideMethod(methodStr(FormDataObject, jumpref), methodStr(DNRVendEditInvoiceForm_Extension, VendInvoiceInfoTableDS_PurchId_onJumpRef), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_VendInvoiceInfoTableDS_OnInitValue</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(VendEditInvoice, VendInvoiceInfoTable), FormDataSourceEventType::InitValue)]
    public static void DNREvent_VendInvoiceInfoTableDS_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun                 formRun                 = _sender.formRun() as FormRun;
        Object                  formRunObject           = formRun as Object;
        PurchFormLetter_Invoice purchFormLetter         = formRunObject.DNRparmPurchFormLetter();
        boolean                 isSubRental             = formRunObject.DNRgetIsSubRental();
        VendInvoiceInfoTable    vendInvoiceInfoTable    = _sender.cursor() as VendInvoiceInfoTable;

        if (purchFormLetter && isSubRental)
        {
            vendInvoiceInfoTable.INVPurchaseType = PurchaseType::RORSubRental;
        }
        else
        {
            vendInvoiceInfoTable.INVPurchaseType = PurchaseType::Purch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_VendInvoiceInfoTableDS_PurchId_OnModified</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior"),
    FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, VendInvoiceInfoTable, PurchId), FormDataFieldEventType::Modified)]
    public static void DNREvent_VendInvoiceInfoTableDS_PurchId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = _sender.datasource().cursor() as VendInvoiceInfoTable;

        if (!VendInvoiceInfoTable.PurchId)
        {
            VendInvoiceInfoSubTable vendInvoiceInfoSubTableLocal;

            delete_from vendInvoiceInfoSubTableLocal
                    where vendInvoiceInfoSubTableLocal.ParmId == VendInvoiceInfoTable.ParmId &&
                          vendInvoiceInfoSubTableLocal.TableRefId == VendInvoiceInfoTable.TableRefId &&
                          vendInvoiceInfoSubTableLocal.OrigPurchId != '';
        }

        if (!vendInvoiceInfoTable.orig().TransDate && vendInvoiceInfoTable.TransDate)
        {
            vendInvoiceInfoTable.TransDate = dateNull();
            vendInvoiceInfoTable.DocumentDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVCalculationDateTime_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVCalculationDateTime), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVCalculationDateTime_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVIncludeCredits_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVIncludeCredits), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVIncludeCredits_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVIncludeDebits_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVIncludeDebits), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVIncludeDebits_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVIncludePartiallyInvoiced_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVIncludePartiallyInvoiced), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVIncludePartiallyInvoiced_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVIncludePreviouslyCredited_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVIncludePreviouslyCredited), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVIncludePreviouslyCredited_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVIncludePriceAdjustments_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVIncludePriceAdjustments), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVIncludePriceAdjustments_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();

    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVIncludeUninvoiced_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVIncludeUninvoiced), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVIncludeUninvoiced_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_INVRateMultiplierDateTime_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(VendEditInvoice, PurchParmUpdate, INVRateMultiplierDateTime), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_INVRateMultiplierDateTime_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun = _sender.datasource().formRun() as FormRun;

        formRun.updateDocWithSpecQty();
        formRun.checkIfMatchedAndRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RORbuttonRetrievePOCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(VendEditInvoice, RORbuttonRetrievePO), FormControlEventType::Clicked)]
    public static void DNREvent_RORbuttonRetrievePOCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object objectFormRun = _sender.formRun() as Object;
        FormRun formRun = _sender.formRun() as FormRun;
        VendInvoiceInfoTable vendInvoiceInfoTable = formRun.dataSource().cursor() as VendInvoiceInfoTable;
        Args args = new Args();
        PurchFormLetter_Invoice purchFormLetter = objectFormRun.DNRparmPurchFormLetter();

        args.name(formStr(PurchSelectLines));
        args.record(vendInvoiceInfoTable);
        args.parmObject(purchFormLetter);
        args.caller(formRun);
      
        formRun = classfactory.formRunClass(args);

        formRun.init();
        formRun.run();

        // By putting 'true' in the wait statement, the user is prevented from returning to the calling form.
        formRun.wait(true);
        
        formRun.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_INVChooseInvoiceCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(VendEditInvoice, INVChooseInvoice), FormControlEventType::Clicked)]
    public static void DNREvent_INVChooseInvoiceCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object                  objectFormRun = _sender.formRun() as Object;
        VendInvoiceInfoTable    vendInvoiceInfoTable = objectFormRun.DNRGetVendInvoiceInfoTable();

        boolean processFromPO = true;

        if(vendInvoiceInfoTable.RecId)
        {
            if(Box::okCancel("@SYS328513", DialogButton::Ok) != DialogButton::Ok)
            {
                processFromPO = false;
            }
        }

        if (processFromPO)
        {
            objectFormRun.createDocFromPO();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>