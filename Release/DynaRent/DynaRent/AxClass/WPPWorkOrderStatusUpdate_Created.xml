<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderStatusUpdate_Created</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPWorkOrderStatusUpdate_Created extends WPPWorkOrderStatusUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method")]
    protected void postUpdate()
    {
        WPPWorkOrderTaskTable       workOrderTaskTable;
        WPPWorkOrderLine            workOrderLineToUpdate;
        WPPWorkOrderStatusUpdate    workOrderStatusUpdate;
    
        super();
    
        if (workOrderLine.RootLineRecId
        &&  workOrderLine.Status != workOrderLineStatusCurrent)
        {
            workOrderTaskTable = WPPWorkOrderTaskTable::find(workOrderLine.TaskId);
            // Only update service tasks
            if (workOrderTaskTable.TaskType == WPPTaskType::Service)
            {
                // Update the root and child lines except the one where the update is called from
                 while select forUpdate workOrderLineToUpdate             
                where ((workOrderLine.RootLineRecId && (workOrderLineToUpdate.RootLineRecId == workOrderLine.RootLineRecId || workOrderLineToUpdate.RecId == workOrderLine.RootLineRecId))
                ||     workOrderLineToUpdate.RootLineRecId == workOrderLine.RecId)
    
                &&     workOrderLineToUpdate.Status        == workOrderLineStatusCurrent // workOrderLine.Status is already changed
                &&     workOrderLineToUpdate.RecId         != workOrderLine.RecId
                {
                    workOrderStatusUpdate = WPPWorkOrderStatusUpdate::construct(workOrderLineToUpdate, WPPWorkOrderLineStatus::Created);
                    workOrderStatusUpdate.init(false);
                    workOrderStatusUpdate.run();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdate</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    protected void preUpdate()
    {
        WPPWorkOrderLineResource    workOrderLineResource;
        WPPTaskType                 taskType;
        ;
    
        taskType = workOrderLine.workOrderTaskTable().TaskType;
    
        // in case we're dealing with a transport or service task,
        // always delete all planning records when changing the task status back to 'created'
    
        if(taskType == WPPTaskType::Delivery
        || taskType == WPPTaskType::InternalDelivery
        || taskType == WPPTaskType::Load
        || taskType == WPPTaskType::InternalLoad
        || taskType == WPPTaskType::Service)
        {
            delete_from workOrderLineResource
            where workOrderLineResource.WorkOrderLineRecId == workOrderLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;
    
        ret = super();
    
        if (ret)
        {
            ret = workOrderLine.validatePostedJournals();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderLineStatus</Name>
				<Source><![CDATA[
    public WPPWorkOrderLineStatus workOrderLineStatus()
    {
        return WPPWorkOrderLineStatus::Created;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>