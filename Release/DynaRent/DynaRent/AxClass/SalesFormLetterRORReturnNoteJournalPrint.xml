<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetterRORReturnNoteJournalPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesFormLetterRORReturnNoteJournalPrint extends FormletterJournalPrint
{
    CustRORReturnNoteJour returnNoteJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteProforma</Name>
				<Source><![CDATA[
    private void deleteProforma()
    {
        if (returnNoteJour.isProforma())
        {
            returnNoteJour.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    protected void doPrint()
    {
        CustRORReturnNoteJour journal;
    //  journal.printJournal(this, journalList);
        Args         parameters = new Args();
        MenuFunction returnNoteMenu;
    
        returnNoteMenu = new MenuFunction(menuitemOutputStr(RORReturnNote), MenuItemType::Output);
        parameters.caller(this);
        if (journalList)
        {
            parameters.object(journalList);
        }
        else
        {
            parameters.record(journal);
        }
    
        returnNoteMenu.run(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    public RecordSortedList newJournalList()
    {
        RecordSortedList recordSortedList;
    
        recordSortedList = new RecordSortedList(tableNum(CustRORReturnNoteJour));
        recordSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(CustRORReturnNoteJour), fieldNum(CustRORReturnNoteJour, RecId)));
    
        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    protected void sendAsXML()
    {
        boolean newLine;
    
        if (!this.parmProforma() && new SRSPrintDestinationSettings(this.parmPrinterSettingsFormLetter()).printMediumType() != SRSPrintMediumType::Screen)
        {
            newLine = journalList.first(returnNoteJour);
            while (newLine)
            {
                returnNoteJour.sendElectronically(PrintCopyOriginal::Original);
                newLine = journalList.next(returnNoteJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesFormLetterRORReturnNoteJournalPrint construct()
    {
        return new SalesFormLetterRORReturnNoteJournalPrint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingCompleted</Name>
				<Source><![CDATA[
    public static void renderingCompleted(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        // from the sender get the underyling SalesFormLetterRORReturnNoteJournalPrint instance
        SalesFormLetterRORReturnNoteJournalPrint caller = _sender.parmArgs().caller();
        caller.deleteProforma();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>