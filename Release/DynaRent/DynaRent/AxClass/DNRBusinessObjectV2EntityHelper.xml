<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRBusinessObjectV2EntityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRBusinessObjectV2EntityHelper
{
    String20                    objectId;
    DNRBusinessObjectV2Entity   busObjImpEntity;
    BOBObjectTable              objectTable;
    boolean                     isHeaderCreated;
    InventSerialId              inventSerialId;
    AssetId                     assetId;
    ItemId                      itemId;
    Description                 itemDescription;
    AssetGroupId                assetGroupId;
    InventSerialProdDate        prodDate;
    AssetAcquisitionDate        acquisitionDate;
    AssetBookId                 fiscBookId;
    AssetAcquisitionPrice       fiscAcquisitionPrice;
    AssetScrapValue             fiscScrapValue;
    AssetLastDepreciationDate   fiscLastDepreciationDate;
    AssetLifeTime               fiscLifeTime;
    AssetLifeTimeRest           fiscLifeTimeRest;
    AssetBookId                 ecoBookId;
    AssetAcquisitionPrice       ecoAcquisitionPrice;
    AssetScrapValue             ecoScrapValue;
    AssetLastDepreciationDate   ecoLastDepreciationDate;
    AssetLifeTime               ecoLifeTime;
    AssetLifeTimeRest           ecoLifeTimeRest;
    Name                        assetLeaseCompany;
    LedgerJournalNameId         ledgerJournalNameIdFisc, ledgerJournalNameIdEcon;
    AmountCurDebit              fiscAmountCurDebit;
    AmountCurDebit              ecoAmountCurDebit;
    AmountCurCredit             fiscAmountCurCredit;
    AmountCurCredit             ecoAmountCurCredit;
    CurrencyCode                currencyCode;
    MainAccountNum              mainAccountNum;
    TransDate                   transDate;
    InventLocationId            assetInventLocationId;
    NoYes                       objectBecomesAvailable;
    DNRReasonCode               reasonCode;
    AddressStreet               street;
    LogisticsAddressStreetNumber  streetNum;
    AddressCity                 city;
    AddressCountryRegionId      countryRegionId;
    AddressZipCodeId            zip;
    CompanyId                   physicalOwner;
    BOBFirstOnRentDate          firstOnRentDate;
    Price                       vendPrice;
    BOBRentalTypeId             rentalTypeId;
    BOBExternalObjectId         externalObjectId;
    BOBObjectCategory           objectCategory;
    BOBWarrantyToDate           warrantyToDate;
    LedgerJournalTable          fiscAcqJourTable, fiscDepJourTable, econAcqJourTable, econDepJourTable;
    CompanyId                   importCompanyId;
    DirOrganizationNumber       orgNumber;
    DirPartyBaseEntity          organization;
    BOBFleetNumber              fleetNumber;
    LedgerJournalId             fiscAcqJourId, fiscDepJourId, econAcqJourId, econDepJourId;
    EcoResProductDisplayProductNumber acqProductNumber, productNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importBusObj</Name>
				<Source><![CDATA[
    public static boolean importBusObj(DNRBusinessObjectV2Entity _busObjImpEntity)
    {
        DNRBusinessObjectV2EntityHelper importHandler = new DNRBusinessObjectV2EntityHelper();

        importHandler.parmObjImpEntity(_busObjImpEntity);
        boolean ret = importHandler.importLine();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmObjImpEntity</Name>
				<Source><![CDATA[
    public DNRBusinessObjectV2Entity parmObjImpEntity(DNRBusinessObjectV2Entity _busObjImpEntity = busObjImpEntity)
    {
        busObjImpEntity = _busObjImpEntity;

        return busObjImpEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUpdateRecord</Name>
				<Source><![CDATA[
    private boolean insertUpdateRecord(Common _common)
    {
        boolean ret = true;
        ;

        if (_common.validateWrite())
        {
            if (_common)
            {
                _common.update();
            }
            else
            {
                _common.insert();
            }
        }
        
        // when return false import for current fileLine record will be canceled
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetBook</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent", "assetBook is updated by the insertUpdateRecord method")]
    public void createAssetBook(AssetId _assetId)
    {
        AssetBook      assetBook;

        if (_assetId && fiscBookId)
        {
            select forupdate AssetBook
            where AssetBook.AssetId == _assetId
            &&    AssetBook.BookId  == fiscBookId;

            assetBook.AssetId               = _assetId;
            assetBook.BookId                = fiscBookId;
            assetBook.PostingProfile        = AssetParameters::find().PostingProfile;
            assetBook.AcquisitionDate       = acquisitionDate;
            assetBook.AcquisitionPrice      = fiscAcquisitionPrice;
            assetBook.ScrapValue            = fiscScrapValue;
            assetBook.LastDepreciationDate  = fiscLastDepreciationDate;
            assetBook.LifeTime              = fiscLifeTime;
            assetBook.LifeTimeRest          = fiscLifeTimeRest;

            this.insertUpdateRecord(assetBook);
        }

        if (_assetId && ecoBookId)
        {
            select forupdate AssetBook
            where AssetBook.AssetId == _assetId
            &&    AssetBook.BookId  == ecoBookId;

            assetBook.AssetId               = _assetId;
            assetBook.BookId                = ecoBookId;
            assetBook.PostingProfile        = AssetParameters::find().PostingProfile;
            assetBook.AcquisitionDate       = acquisitionDate;
            assetBook.AcquisitionPrice      = ecoAcquisitionPrice;
            assetBook.ScrapValue            = ecoScrapValue;
            assetBook.LastDepreciationDate  = ecoLastDepreciationDate;
            assetBook.LifeTime              = ecoLifeTime;
            assetBook.LifeTimeRest          = ecoLifeTimeRest;

            this.insertUpdateRecord(assetBook);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetTable</Name>
				<Source><![CDATA[
    private assetTable createAssetTable()
    {
        AssetTable      assetTable;
        ;

        if (assetId)
        {
            assetTable = AssetTable::find(assetId, true);

            if (!assetTable)
            {
                assetTable.AssetId          = assetId;
                assetTable.AssetGroup       = assetGroupId;
                assetTable.SerialNum        = inventSerialId;
                assetTable.Name             = itemId;
                assetTable.NameAlias        = itemDescription;
                assetTable.AssetType        = AssetType::Tangible;
                assetTable.PropertyType     = AssetPropertyType::FixedAsset;
                assetTable.Quantity         = 1;
                assetTable.BOBLeaseCompany  = assetLeaseCompany;

                this.insertUpdateRecord(assetTable);
            }
        }

        return assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventSerial</Name>
				<Source><![CDATA[
    private InventSerial createInventSerial()
    {
        InventSerial    inventSerial;
        ;

        if (!InventSerial::BOBFindByInventSerialId(inventSerialId))
        {
            inventSerial.InventSerialId = inventSerialId;
            inventSerial.ItemId         = itemId;
            inventSerial.Description    = itemDescription;
            inventSerial.ProdDate       = prodDate;

            this.insertUpdateRecord(inventSerial);
        }

        return inventSerial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable createLedgerJournalTable(LedgerJournalId _journalNum, LedgerJournalNameId _journalName)
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable.initFromLedgerJournalName(_journalName);
        ledgerJournalTable.JournalNum = _journalNum;

        if (!ledgerJournalTable.JournalNum)
        {
            ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
        }

        this.insertUpdateRecord(ledgerJournalTable);

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans_acq</Name>
				<Source><![CDATA[
    private ledgerJournalTrans_Asset createLedgerJournalTrans_acq(LedgerJournalId _journalNum, AssetTable _assetTable, Amount _debitAmount, AssetBookId _bookId)
    {
        LedgerJournalTrans_Asset    ledgerJournalTrans_Asset;
        ledgerJournalTrans          ledgerJournalTrans;
        DimensionDefault            defaultDimension;
        DimensionDynamicAccount     ledgerDimension;
        container                   dimensionContainert = conNull();
        ;

        dimensionContainert += 0;

        ledgerJournalTrans.initValue();
        ledgerJournalTrans.AmountCurDebit        = _debitAmount;
        ledgerJournalTrans.AmountCurCredit       = 0;
        ledgerJournalTrans.CurrencyCode          = currencyCode;
        ledgerJournalTrans.ExchRate              = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode);
        ledgerJournalTrans.AccountType           = LedgerJournalACType::FixedAssets;
        ledgerJournalTrans.JournalNum            = _journalNum;
        ledgerJournalTrans.TransDate             = transDate;
        ledgerJournalTrans.Txt                   = InventTable::find(itemId).NameAlias;
        ledgerJournalTrans.LedgerDimension       = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_assettable.AssetId, LedgerJournalACType::FixedAssets);
        ledgerJournalTrans.OffsetCompany         = importCompanyId ? importCompanyId : curext();
        ledgerJournalTrans.OffsetAccountType     = LedgerJournalACType::Ledger;
        ledgerdimension                          = LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(mainAccountNum);
        //TODO check how to get default dimension
        //Defaultdimension                         = LedgerJournalEngine::getAccountDefaultDimension(_accountNumber, curext(), _accountType, _assetBookId)
        defaultDimension                         = 0;
        //AxdDimensionUtil::getDimensionAttributeValueSetId(dimensionContainert);
        ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerdimension, DefaultDimension);
        ledgerJournalTrans.Company               = importCompanyId ? importCompanyId : curext();
        ledgerJournalTrans.voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(_journalNum))).getNew(false);

        this.insertUpdateRecord(ledgerJournalTrans);

        ledgerJournalTrans_Asset.RefRecId                       = ledgerJournalTrans.recid;
        ledgerJournalTrans_Asset.AssetId                        =_assetTable.AssetId;
        ledgerJournalTrans_Asset.TransType                      = AssetTransTypeJournal::Acquisition;
        ledgerJournalTrans_Asset.Company                        = importCompanyId ? importCompanyId : curext();
        ledgerJournalTrans_Asset.BookId                         = _bookId;
        ledgerJournalTrans_Asset.BOBInventLocationId            = assetInventLocationId;
        ledgerJournalTrans_Asset.AmountDebitReportingCurrency   = _debitAmount;
        ledgerJournalTrans_Asset.AmountCreditReportingCurrency  = 0;

        this.insertUpdateRecord(ledgerJournalTrans_Asset);

        return ledgerJournalTrans_Asset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans_dep</Name>
				<Source><![CDATA[
    private ledgerJournalTrans_Asset createLedgerJournalTrans_dep(LedgerJournalId _journalNum, AssetTable _assetTable, Amount _amountCredit, AssetBookId _bookId)
    {
        LedgerJournalTrans_Asset    ledgerJournalTrans_Asset;
        ledgerJournalTrans          ledgerJournalTrans;
        DimensionDefault            defaultDimension;
        DimensionDynamicAccount     ledgerDimension;
        container                   dimensionContainert = conNull();
        ;

        dimensionContainert += 0;

        ledgerJournalTrans.initValue();
        ledgerJournalTrans.AmountCurDebit           = 0;
        ledgerJournalTrans.AmountCurCredit          = _amountCredit;
        ledgerJournalTrans.CurrencyCode             = currencyCode;
        ledgerJournalTrans.ExchRate                 = ExchangeRateHelper::exchRate(LedgerJournalTrans.CurrencyCode);
        ledgerJournalTrans.AccountType              = LedgerJournalACType::FixedAssets;
        ledgerJournalTrans.JournalNum               = _journalNum;
        ledgerJournalTrans.TransDate                = transDate;
        ledgerJournalTrans.Txt                      = "Depreciation for fixed asset"; //"@DNR:DataMgmt_DepFAtxt"; //Depreciation for fixed asset
        ledgerJournalTrans.Company                  = importCompanyId ? importCompanyId : curext();
        ledgerJournalTrans.LedgerDimension          = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_assettable.AssetId, LedgerJournalACType::FixedAssets);
        ledgerJournalTrans.OffsetCompany            = importCompanyId ? importCompanyId : curext();
        ledgerJournalTrans.OffsetAccountType        = LedgerJournalACType::Ledger;
        ledgerDimension                             = LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(mainAccountNum);
        //TODO check how to get default dimension
        //Defaultdimension                            = AxdDimensionUtil::getDimensionAttributeValueSetId(dimensionContainert);

        defaultDimension                            = 0;
        ledgerJournalTrans.OffsetLedgerDimension    = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerdimension, DefaultDimension);
        ledgerJournalTrans.voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(_journalNum))).getNew(false);
        this.insertUpdateRecord(ledgerJournalTrans);

        ledgerJournalTrans_Asset.RefRecId                       = ledgerJournalTrans.recid;
        ledgerJournalTrans_Asset.AssetId                        =_assetTable.AssetId;
        ledgerJournalTrans_Asset.Company                        = importCompanyId ? importCompanyId : curext();
        ledgerJournalTrans_Asset.TransType                      = AssetTransTypeJournal::Depreciation;
        ledgerJournalTrans_Asset.BookId                         = _bookId;
        ledgerJournalTrans_Asset.AmountDebitReportingCurrency   = 0;
        ledgerJournalTrans_Asset.AmountCreditReportingCurrency  = _amountCredit;

        this.insertUpdateRecord(ledgerJournalTrans_Asset);

        return ledgerJournalTrans_Asset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importLine</Name>
				<Source><![CDATA[
    public boolean importLine()
    {
        InventSerial        inventSerial;
        AssetBook           assetBook;
        AssetTable          assetTable;

        this.initImportLineValues();
        this.initItemId(); 

        if (this.inventSerialId)
        {
            BOBObjectTable objTableSelect = BOBObjectTable::findInventSerialId(this.inventSerialId);

            if (objTableSelect)
            {
                return checkFailed(strFmt("@DNR:DataMgmt_BOExistsError", this.inventSerialId)); //Business object with invent serial id %1 already exists
            }
        }

        if (itemId)
        {
            if (inventSerialId)
            {
                inventSerial = this.createInventSerial(); //It will create pending category object
                objectTable = this.updateBOBObjectTable(inventSerialId);
            }
            else
            {
                //Create bulk object
                objectTable.clear();
                objectTable.initFromRentalType(BOBRentalType::find(rentalTypeId));
                objectTable.ObjectId            = objectId ? objectId : BOBObjectTable::getNewObjectId();
                objectTable.Name                = itemDescription;
                objectTable.Category            = objectCategory;
                objectTable.AcqProductNumber    = acqProductNumber;
                objectTable.RentalTypeId        = rentalTypeId;
                objectTable.insert();
            }

            if (objectTable.RecId)
            {
                this.updateBOBAvailabilityLog(objectTable.ObjectId);
                this.updateBOBObjectLocationLog(objectTable.ObjectId);
                this.updateBOBObjectOwnerShipLog(objectTable.ObjectId);

                this.updateInventTableModuleVend();

                if (objectCategory == BOBObjectCategory::Rental && assetId)
                {
                    assetTable  = this.createAssetTable();
                    this.createAssetBook(assetTable.AssetId);
                }

                if (assetTable)
                {
                    BOBObjectAssetLog::createLink(objectTable.ObjectId, assetTable.AssetId, assetLeaseCompany, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), dateMax());
                }
            }
        }

        //Creating acq and dep jorunals for asset
        if (objectCategory == BOBObjectCategory::Rental)
        {
            if (fiscAcqJourId)
            {
                fiscAcqJourTable = LedgerJournalTable::find(fiscAcqJourId);
                
                //Creating new journal, if doesn't exist yet
                if (!fiscAcqJourTable)
                {
                    fiscAcqJourTable = this.createLedgerJournalTable(fiscAcqJourId, ledgerJournalNameIdFisc);
                }
            }

            if (fiscDepJourId)
            {
                fiscDepJourTable = LedgerJournalTable::find(fiscDepJourId);

                //Creating new journal, if doesn't exist yet
                if (!fiscDepJourTable)
                {
                    fiscDepJourTable = this.createLedgerJournalTable(fiscDepJourId, ledgerJournalNameIdfisc);
                }
            }
            
            if (econAcqJourId)
            {
                econAcqJourTable = LedgerJournalTable::find(econAcqJourId);
                
                //Creating new journal, if doesn't exist yet
                if (!econAcqJourTable)
                {
                    econAcqJourTable = this.createLedgerJournalTable(econAcqJourId, ledgerJournalNameIdEcon);
                }
            }

            if (econDepJourId)
            {
                econDepJourTable = LedgerJournalTable::find(econDepJourId);

                //Creating new journal, if doesn't exist yet
                if (!econDepJourTable)
                {
                    econDepJourTable = this.createLedgerJournalTable(econDepJourId, ledgerJournalNameIdEcon);
                }
            }

            if (fiscBookId)
            {
                this.createLedgerJournalTrans_acq(fiscAcqJourTable.JournalNum, assetTable, fiscAmountCurDebit,  fiscBookId); // Acquisition line for FISC book
                this.createLedgerJournalTrans_dep(fiscDepJourTable.JournalNum, assetTable, fiscAmountCurCredit, fiscBookId); // Depriciation line for FISC book
            }

            if (ecoBookId)
            {
                this.createLedgerJournalTrans_acq(econAcqJourTable.JournalNum, assetTable, ecoAmountCurDebit,  ecoBookId);   // Acquisition line for ECON book
                this.createLedgerJournalTrans_dep(econDepJourTable.JournalNum, assetTable, ecoAmountCurCredit, ecoBookId);   // Depriciation line for ECON book
            }

            // Update financial dimensions
            if (assetTable)
            {
                assetTable.update();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initImportLineValues</Name>
				<Source><![CDATA[
    protected void initImportLineValues()
    {
        inventSerialId              = busObjImpEntity.InventSerialId;
        assetId                     = busObjImpEntity.AssetId;
        itemDescription             = busObjImpEntity.Name;
        assetGroupId                = busObjImpEntity.FixedAssetGroup; 
        prodDate                    = busObjImpEntity.TransactionDate; 
        acquisitionDate             = busObjImpEntity.AcquistionDate;  
        fiscBookId                  = busObjImpEntity.FiscalValueModel;
        fiscAcquisitionPrice        = busObjImpEntity.FiscalAcquisitionPrice;
        fiscScrapValue              = busObjImpEntity.FiscalScrapValue;       
        fiscLastDepreciationDate    = busObjImpEntity.FiscalLastDepreciationDate;
        fiscLifeTime                = busObjImpEntity.FiscalDepreciationPeriods; 
        fiscLifeTimeRest            = busObjImpEntity.FiscalDepreciationPeriodsRemaining;
        ecoBookId                   = busObjImpEntity.EconomicValueModel;                
        ecoAcquisitionPrice         = busObjImpEntity.EconomicAcquisitionPrice;          
        ecoScrapValue               = busObjImpEntity.EconomicScrapValue;                
        ecoLastDepreciationDate     = busObjImpEntity.EconomicLastDepreciationDate;      
        ecoLifeTime                 = busObjImpEntity.EconomicDepreciationPeriods;      
        ecoLifeTimeRest             = busObjImpEntity.EconomicDepreciationPeriodsRemainiing;
        assetLeaseCompany           = busObjImpEntity.AssetLeaseCompany;                    
        ledgerJournalNameIdFisc     = busObjImpEntity.FiscLedgerJournalName;                    
        ledgerJournalNameIdEcon     = busObjImpEntity.EconLedgerJournalName;
        fiscAmountCurDebit          = busObjImpEntity.FiscalAmountDebit;                    
        ecoAmountCurDebit           = busObjImpEntity.EconomicAmountDebit;                  
        fiscAmountCurCredit         = busObjImpEntity.FiscalAmountCredit;                   
        ecoAmountCurCredit          = busObjImpEntity.EconomicAmountCredit;                 
        currencyCode                = busObjImpEntity.Currency;                             
        mainAccountNum              = busObjImpEntity.MainAccountNumber;                    
        transDate                   = busObjImpEntity.TransactionDate;                      
        assetInventLocationId       = busObjImpEntity.AssetWarehouse;                         
        objectBecomesAvailable      = busObjImpEntity.ObjectBecomesAvailable > DateTimeUtil::date(DateTimeUtil::minValue());                 

        if (!objectBecomesAvailable)
        {
            reasonCode              = busObjImpEntity.ReasonCode;                        
        }

        street                      = busObjImpEntity.Street;                            
        streetNum                   = busObjImpEntity.StreetNumber;                      
        city                        = busObjImpEntity.City;                              
        countryRegionId             = busObjImpEntity.CountryRegionId;                   
        zip                         = busObjImpEntity.ZipCode;                           
        physicalOwner               = busObjImpEntity.PhysicalOwner;                     
        firstOnRentDate             = busObjImpEntity.FirstOnRentDate;                   
        vendPrice                   = busObjImpEntity.VendorPrice;                       
        rentalTypeId                = busObjImpEntity.RentalTypeId;                      
        externalObjectId            = busObjImpEntity.ExternalObjectId;                  
        objectCategory              = busObjImpEntity.Category;                          
        warrantyToDate              = busObjImpEntity.WarrantyToDate;                    
        orgNumber                   = busObjImpEntity.OrganizationNumber;
        fiscAcqJourId               = busObjImpEntity.FiscAcqLedgerJournalId;
        fiscDepJourId               = busObjImpEntity.FiscDepLedgerJournalId;
        econAcqJourId               = busObjImpEntity.EconAcqLedgerJournalId;
        econDepJourId               = busObjImpEntity.EconDepLedgerJournalId;
        objectId                    = busObjImpEntity.ObjectId;
        acqProductNumber            = busObjImpEntity.AcqProductNumber;
        productNumber               = busObjImpEntity.ProductNumber;
        fleetNumber                 = busObjImpEntity.FleetNumber;

        if (orgNumber)
        {
            select firstonly RecId from organization
            where organization.OrganizationNumber == orgNumber;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemId</Name>
				<Source><![CDATA[
    private void initItemId()
    {
        //Finding released product in current company based on provided product number and rental type id
        EcoResProduct productMaster;
        InventTable   inventTable;

        select firstonly TableId from productMaster
        where productMaster.DisplayProductNumber == productNumber
        &&    productMaster.BOBRentalTypeId      == rentalTypeId
            join inventTable
            where inventTable.Product == productMaster.RecId;

        itemId = inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOBAvailabilityLog</Name>
				<Source><![CDATA[
    private void updateBOBAvailabilityLog(BOBObjectId _objectId)
    {
        BOBObjectAvailabilityLog::changeAvailability(_objectId, objectBecomesAvailable, reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOBObjectLocationLog</Name>
				<Source><![CDATA[
    private void updateBOBObjectLocationLog(BOBObjectId _objectId)
    {
        LogisticsPostalAddress          postalAddress;
        DirPartyPostalAddressView       addressView;
        LogisticsPostalAddressEntity    postalAddressEntity;
        LogisticsPostalAddressView      logisticsPostalAddressView;

        if (street  && city)
        {
            addressView.Street          = street;
            addressView.StreetNumber    = streetNum;
            addressView.City            = city;
            addressView.ZipCode         = zip;
            addressView.CountryRegionId = countryRegionId;

            postalAddressEntity = LogisticsPostalAddressEntity::construct();
            logisticsPostalAddressView.initFromPartyPostalAddressView(addressView);
            postalAddress = postalAddressEntity.createPostalAddress(logisticsPostalAddressView);

            BOBObjectLocationLog::changeLocation(_objectId, postalAddress.RecId, DirUtility::getCurrentDateTime());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOBObjectOwnerShipLog</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent", "ownershipLog is updated by the insertUpdateRecord method")]
    private void updateBOBObjectOwnerShipLog(BOBObjectId _objectId)
    {
        BOBObjectOwnershipLog   ownershipLog;

        select firstOnly forUpdate ownershipLog
        where ownershipLog.ObjectId == _objectId;

        if (ownershipLog)
        {
            ownershipLog.FinancialOwner  = curext();
            ownershipLog.PhysicalOwner   = physicalOwner;
            ownershipLog.FirstOnRentDate = firstOnRentDate;

            this.insertUpdateRecord(ownershipLog);
        }
        else
        {
            BOBObjectView objectView;
            select firstonly objectView
            where objectView.ObjectId == _objectId;

            ownershipLog.clear();
            ownershipLog.initValue();
            ownershipLog.initFromObjectView(objectView);
            ownershipLog.FinancialOwnerFlag  = NoYes::Yes;
            ownershipLog.FinancialOwner      = curExt();
            ownershipLog.PhysicalOwnerFlag   = NoYes::Yes;
            ownershipLog.PhysicalOwner       = physicalOwner;
            ownershipLog.FirstOnRentDateFlag = NoYes::Yes;
            ownershipLog.FirstOnRentDate     = firstOnRentDate;

            this.insertUpdateRecord(ownershipLog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOBObjectTable</Name>
				<Source><![CDATA[
    public BOBObjectTable updateBOBObjectTable(InventSerialId _inventSerialId = "")
    {
        objectTable = _inventSerialId
                      ? BOBObjectTable::findInventSerialId(_inventSerialId, true)
                      : BOBObjectTable::findObjectId(objectId);

        if (objectTable)
        {
            objectTable.ObjectId            = objectId ? objectId : objectTable.ObjectId;
            objectTable.Name                = itemDescription;
            objectTable.RentalTypeId        = rentalTypeId;
            objectTable.ExternalObjectId    = externalObjectId;
            objectTable.Category            = objectCategory;
            objectTable.WarrantyToDate      = warrantyToDate;
            objectTable.AcqProductNumber    = acqProductNumber;
            objectTable.FleetNumber         = fleetNumber;

            if (organization)
            {
                objectTable.OrganizationParty = organization.RecId;
            }
        }

        this.insertUpdateRecord(objectTable);

        return objectTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTableModuleVend</Name>
				<Source><![CDATA[
    private InventTableModule updateInventTableModuleVend()

    {
        InventTableModule moduleVend = InventTableModule::find(itemId, ModuleInventPurchSales::Purch, true);
        ;

        if (moduleVend)
        {
            moduleVend.Price = vendPrice;
            this.insertUpdateRecord(moduleVend);
        }

        return moduleVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItem</Name>
				<Source><![CDATA[
    private boolean checkItem(itemId _itemId)
    {
        boolean     ret = true;
        ;

        if (!InventTable::exist(_itemId))
        {
            ret = checkFailed(strFmt("Released product not found with id %1", _itemId)); //TODO create label
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateImportLine</Name>
				<Source><![CDATA[
    public boolean validateImportLine()
    {
        boolean                             ret = true;
        EcoResTrackingDimensionGroupItem    trackingDimensionGroupItem;
        EcoResTrackingDimensionGroup        trackingDimensionGroup;
        ;

        ret = this.checkItem(itemId);

        select firstOnly RecId from trackingDimensionGroupItem
        where trackingDimensionGroupItem.ItemDataAreaId == curext()
        &&    trackingDimensionGroupItem.ItemId         == itemId
            exists join trackingDimensionGroup
            where trackingDimensionGroup.RecId == trackingDimensionGroupItem.TrackingDimensionGroup
            &&    !trackingDimensionGroup.IsSerialNumberControlEnabled;

        if (ret && itemId && inventSerialId && trackingDimensionGroupItem.RecId)
        {
            ret = checkFailed(strFmt("Serial number tracking is disabled for the item id %1", itemId)); //TODO create label
        }

        if (ret && inventSerialId && BOBObjectTable::existInventSerialId(inventSerialId))
        {
            ret = checkFailed(strFmt("A business object already exist with serial number %1", inventSerialId)); //TODO create label
        }

        if (ret && objectCategory == BOBObjectCategory::Rental && assetId && assetGroupId && !AssetGroup::exist(assetGroupId))
        {
            ret = checkFailed(strFmt("Asset group id %1 does not exist", assetGroupId)); //TODO create label
        }

        if (ret && reasonCode && !DNRReasonTable::find(reasonCode))
        {
            ret = checkFailed(strFmt("Reason code id %1 does not exist", reasonCode)); //TODO create label
        }

        if (ret && physicalOwner && !CompanyInfo::findDataArea(physicalOwner))
        {
            ret = checkFailed(strFmt("No legal entity found with id %1", physicalOwner)); //TODO create label
        }

        if (ret && objectCategory == BOBObjectCategory::Rental
            && (   (ledgerJournalNameIdFisc && !LedgerJournalName::find(ledgerJournalNameIdFisc))
                || (ledgerJournalNameIdEcon && !LedgerJournalName::find(ledgerJournalNameIdEcon)))
            )
        {
            ret = checkFailed(strFmt("Asset journal name not found with id %1 or %2", ledgerJournalNameIdFisc, ledgerJournalNameIdEcon)); //TODO create label
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>