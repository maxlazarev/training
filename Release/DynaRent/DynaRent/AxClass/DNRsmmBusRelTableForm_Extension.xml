<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRsmmBusRelTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(smmBusRelTable))]
public final class DNRsmmBusRelTableForm_Extension
{
    // chain-of-command wrapper methods

    

    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        next init();

        nonConformance.visible(InventParameters::find().UseQualityManagement);
        custNonConformance.visible(InventParameters::find().UseQualityManagement);
        purchaseCycle.visible(PurchParameters::find().PurchaseCycle);

        FINDimValueController::setEditableDimensionSet(tableNum(smmBusRelTable), this.design().controlName(formControlStr(smmBusRelTable, DimensionEntryControl)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableApplicableGeneralConvertButtons</Name>
				<Source><![CDATA[
    public void enableApplicableGeneralConvertButtons(boolean _isCustomer, boolean _isVendor)
    {
        next enableApplicableGeneralConvertButtons(_isCustomer, _isVendor);

        smmBusRelTypeGroup  busRelTypeGroup     = smmBusRelTypeGroup::find(smmBusRelTable.BusRelTypeId);

        boolean             enableCustomer      = (smmBusRelTable 
                                                    && (busRelTypeGroup.TableType != smmBusRelTypeSourceTable::Customer && busRelTypeGroup.TableType != smmBusRelTypeSourceTable::IRMCustVend) 
                                                    && !CustTable::findByPartyRecId(smmBusRelTable.Party));

        boolean             enableVendor        = (smmBusRelTable 
                                                    && (busRelTypeGroup.TableType != smmBusRelTypeSourceTable::Vendor && busRelTypeGroup.TableType != smmBusRelTypeSourceTable::IRMCustVend) 
                                                    && !VendTable::findByPartyRecId(smmBusRelTable.Party));

        boolean             enableCustomerVendor = (smmBusRelTable
                                                    && busRelTypeGroup.TableType == smmBusRelTypeSourceTable::Relation
                                                    && !_isCustomer
                                                    && !_isVendor);
    
        Convert2CustomerCtrl.enabled(enableCustomer);
        Convert2VendorCtrl.enabled(enableVendor);
        IRMConvertToCustomerVendor.enabled(enableCustomerVendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    public void updateControls()
    {
        next updateControls();

        this.RORupdateControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORupdateControls</Name>
				<Source><![CDATA[
    // extension methods

    private void RORupdateControls()
    {
        CatVendorChannel    catVendorChannel;
        CustTable           custTable;
        smmBusRelTypeGroup  smmBusRelTypeGroup = smmBusRelTypeGroup::find(smmBusRelTable.BusRelTypeId);
        boolean             isCustomer = (smmBusRelTypeGroup.TableType == smmBusRelTypeSourceTable::Customer || smmBusRelTypeGroup.TableType == smmBusRelTypeSourceTable::IRMCustVend);
        boolean             isVendor   = (smmBusRelTypeGroup.TableType == smmBusRelTypeSourceTable::Vendor || smmBusRelTypeGroup.TableType == smmBusRelTypeSourceTable::IRMCustVend);
        boolean             isProspect = (smmBusRelTypeGroup.TableType == smmBusRelTypeSourceTable::Relation);
    
        // Enable/disable the Purchase ActionPaneTab
        RORProcurement.enabled(isVendor);
    
        // Enable/disable button groups
        SalesQuality.enabled(isCustomer);
        btngrpSellSetup.enabled(isCustomer);
    
        // Enable/disable menu buttons
        mibRORSalesQuotationTable.enabled(isCustomer || isProspect);
        RORSalesQuotationProjTable.enabled(isCustomer || isProspect);
        mibROROrderPurchaseOrders.enabled(isVendor);
        mibRORSalesTable.enabled(isCustomer);
    
        // Enable/disable the Rental buttons
        RORSalesCreateQuotation.enabled(isCustomer || isProspect);
        RORPurchCreateOrderFromVendor.enabled(isVendor);
        mibSalesTableNew.enabled(isCustomer);
        mibPriceDiscAdmTable_SalesCreate.enabled(isCustomer);
        mbOrders.enabled(isCustomer);
        mibCustPackingSlipJournal.enabled(isCustomer);
        mibPriceDiscTable_Sales.enabled(isCustomer);
        mbSalesPrice.enabled(isCustomer);
        mbDiscounts.enabled(isCustomer);
        mibSuppItemTable_Sales.enabled(isCustomer);
        RORSuppItemTable_Rental.enabled(isCustomer);
        RORSuppItemTable_SubRentalAction.enabled(isVendor);
        //mbAxdSend.enabled(isCustomer);
    
        // Only enable the Processing buttons when the type is customer
        if (isCustomer)
        {
            //Enable or Disable buttons for catalog import processing
            catVendorChannel = CatVendorChannel::find(smmBusRelTable.Party);
    
            if(catVendorChannel.RecId == 0)
            {
                configureCatalogImportProcessing.visible(true);
                enableCatalogImportProcessing.visible(false);
                disableCatalogImportProcessing.visible(false);
            }
            else
            {
                if(catVendorChannel.IsEnabled == NoYes::Yes)
                {
                    configureCatalogImportProcessing.visible(false);
                    enableCatalogImportProcessing.visible(false);
                    disableCatalogImportProcessing.visible(true);
                }
                else
                {
                    configureCatalogImportProcessing.visible(false);
                    enableCatalogImportProcessing.visible(true);
                    disableCatalogImportProcessing.visible(false);
                }
            }
    
            custTable = CustTable::findByPartyRecId(smmBusRelTable.Party);
    
            mibSalesTableNew.enabled(CustTable.Blocked != CustVendorBlocked::All);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callCatVendorConfigurationForImportClass</Name>
				<Source><![CDATA[
    public void callCatVendorConfigurationForImportClass(FormControl _sender, str _menuItemActionStr)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        smmBusRelTable smmBusRelTable = formRun.dataSource(formDataSourceStr(smmBusRelTable, smmBusRelTable)).cursor() as smmBusRelTable;
        VendTable vendTable = VendTable::findByPartyRecId(smmBusRelTable.Party);

        if(vendTable)
        {
            Args args = new Args();
            args.caller(formRun);
            args.record(vendTable);

            new MenuFunction(_menuItemActionStr, MenuItemType::Action).run(args);
        }
        else
        {
            throw error(strFmt("Prospect %1 is not a vendor", smmBusRelTable.BusRelAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_smmBusRelTableDS_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods

    [FormDataSourceEventHandler(formDataSourceStr(smmBusRelTable, smmBusRelTable), FormDataSourceEventType::Initialized)]
    public static void DNREvent_smmBusRelTableDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;

        if(formRun.args().dataset() == tableNum(RORRentalOrderLineView))
        {
            _sender.queryBuildDataSource().addRange(fieldNum(smmBusRelTable, Party))
                .value(SysQuery::value(formRun.args().record().getFieldValue(fieldStr(RORRentalOrderLineView, CustTableParty))));
        }
        else if(formRun.args().dataset() == tableNum(RORSubRentalOrderLineView))
        {
            _sender.queryBuildDataSource().addRange(fieldNum(smmBusRelTable, Party))
                .value(SysQuery::value(formRun.args().record().getFieldValue(fieldStr(RORSubRentalOrderLineView, Party))));
        }
        else if(formRun.args().dataset() == tableNum(RORRentalQuotationOrderLineView))
        {
            _sender.queryBuildDataSource().addRange(fieldNum(smmBusRelTable, Party))
                .value(SysQuery::value(formRun.args().record().getFieldValue(fieldStr(RORRentalQuotationOrderLineView, Party))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ConfigureCatalogImportProcessingCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(smmBusRelTable, ConfigureCatalogImportProcessing), FormControlEventType::Clicked)]
    public static void DNREvent_ConfigureCatalogImportProcessingCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.callCatVendorConfigurationForImportClass(_sender, menuItemActionStr(CatVendorConfigureForCatalogImport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_EnableCatalogImportProcessingCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(smmBusRelTable, EnableCatalogImportProcessing), FormControlEventType::Clicked)]
    public static void DNREvent_EnableCatalogImportProcessingCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.callCatVendorConfigurationForImportClass(_sender, menuItemActionStr(CatVendorEnableForCatalogImport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_CatVendorDisableForCatalogImportCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(smmBusRelTable, DisableCatalogImportProcessing), FormControlEventType::Clicked)]
    public static void DNREvent_CatVendorDisableForCatalogImportCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.callCatVendorConfigurationForImportClass(_sender, menuItemActionStr(CatVendorDisableForCatalogImport));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>