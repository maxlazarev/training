<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderOverviewFeesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(querystr(WPPWorkOrderOverviewFees)),
    SRSReportParameterAttribute(classstr(WPPWorkOrderReportsContract))
]
public class WPPWorkOrderOverviewFeesDP extends SRSReportDataProviderBase
{
    WPPWorkOrderTable       workOrderTable;
    WPPWorkOrderOverviewTmp workOrderOverviewTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkOrderFees</Name>
				<Source><![CDATA[
    private void getWorkOrderFees()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource qbds;
    
        WPPWorkOrderLine    workOrderLine;
        ProjJournalTable    journalTable;
        ProjJournalTrans    journalTrans;
    
        query = this.parmQuery();
    
        qbds = query.dataSourceTable(tableNum(WPPWorkOrderLine));
        qbds.addDynalink(fieldNum(WPPWorkOrderLine, WorkOrderId), workOrderTable, fieldNum(WPPWorkOrderTable, WorkOrderId));
        qbds.addRange(fieldNum(WPPWorkOrderLine, ProjId)).value(SysQuery::valueNotEmptyString());
    
        query.dataSourceTable(tableNum(ProjJournalTable)).addRange(fieldNum(ProjJournalTable, JournalType)).value(enum2str(ProjJournalType::Revenue));
    
        queryRun = new QueryRun(query);
    
        while (queryRun.next())
        {
            workOrderLine  = queryRun.get(tablenum(WPPWorkOrderLine));
            journalTable   = queryRun.get(tableNum(ProjJournalTable));
            journalTrans   = queryRun.get(tableNum(ProjJournalTrans));
    
            workOrderOverviewTmp.WorkOrderId        = workOrderLine.WorkOrderId;
            workOrderOverviewTmp.WorkOrderLine      = workOrderLine.LineNumber;
            workOrderOverviewTmp.TaskId             = workOrderLine.TaskId;
            workOrderOverviewTmp.Description        = HcmWorker::find(journalTrans.Worker).name();
            workOrderOverviewTmp.TransDate          = journalTrans.TransDate;
            workOrderOverviewTmp.CategoryId         = journalTrans.CategoryId;
            workOrderOverviewTmp.Qty                = journalTrans.Qty;
            workOrderOverviewTmp.CostPrice          = journalTrans.CostPrice;
            workOrderOverviewTmp.CostAmount         = journalTrans.CostPrice * journalTrans.Qty;
            workOrderOverviewTmp.SalesPrice         = journalTrans.SalesPrice;
            workOrderOverviewTmp.SalesAmount        = journalTrans.SalesPrice * journalTrans.Qty;
            workOrderOverviewTmp.LinePropertyId     = journalTrans.LinePropertyId;
            workOrderOverviewTmp.Posted             = journalTable.Posted;
            workOrderOverviewTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderFeesTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute(tablestr(WPPWorkOrderOverviewTmp))
    ]
    public WPPWorkOrderOverviewTmp getWorkOrderFeesTmp()
    {
        select workOrderOverviewTmp;
        return workOrderOverviewTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        WPPWorkOrderReportsContract contract;
    
        contract = this.parmDataContract() as WPPWorkOrderReportsContract;
        workOrderTable = WPPWorkOrderTable::find(contract.parmWorkOrderId());
    
        this.getWorkOrderFees();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>