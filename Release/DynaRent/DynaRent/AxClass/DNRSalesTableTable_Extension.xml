<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesTable))]
public final class DNRSalesTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSalesLinesOnUpdateSalesTable</Name>
				<Source><![CDATA[
    protected void updateSalesLinesOnUpdateSalesTable(SalesTable _salesTable_Orig)
    {
        next updateSalesLinesOnUpdateSalesTable(_salesTable_Orig);

        boolean isUpdateRequiredIndia = this.mustUpdateSalesLinesOnUpdateSalesTable_IN(_salesTable_Orig);
        boolean isUpdateRequired = this.mustUpdateSalesLinesOnUpdateSalesTable(_salesTable_Orig);

        if(this.SkipLineUpdate || (!isUpdateRequired && !isUpdateRequiredIndia)
        && (_salesTable_Orig.RORVenueCode != this.RORVenueCode || _salesTable_Orig.CurrencyCode != this.CurrencyCode))
        {
            SalesLine salesLine;
            Query query = this.buildSalesLinesToBeUpdatedQuery();
            QueryRun queryRun = new QueryRun(query);

            while(queryRun.next())
            {
                salesLine = queryRun.get(tableNum(SalesLine));
                salesLine.RORIsModified = this.RORIsModified;
                salesLine.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLineOnUpdateSalesTable</Name>
				<Source><![CDATA[
    protected void initializeSalesLineOnUpdateSalesTable(SalesLine _salesLine)
    {
        _salesLine.RORIsModified = this.RORIsModified;

        next initializeSalesLineOnUpdateSalesTable(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSalesLinesOnUpdateSalesTable</Name>
				<Source><![CDATA[
    protected boolean mustUpdateSalesLinesOnUpdateSalesTable(SalesTable _salesTable_Orig)
    {
        boolean ret = next mustUpdateSalesLinesOnUpdateSalesTable(_salesTable_Orig);
        return ret || _salesTable_Orig.RORIsModified != this.RORIsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefIntercompanyPurchaseOrder</Name>
				<Source><![CDATA[
    public void jumpRefIntercompanyPurchaseOrder(Object _caller)
    {
        if(this.SalesType == SalesType::RORRental)
        {
            TradeInterCompany::construct(this).formRun(formStr(RORPurchTable), _caller);
        }
        else
        {
            next jumpRefIntercompanyPurchaseOrder(_caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areInterCompanyOrdersAllowedForSalesType</Name>
				<Source><![CDATA[
    public boolean areInterCompanyOrdersAllowedForSalesType()
    {
        boolean ret = next areInterCompanyOrdersAllowedForSalesType();

        return (ret || this.SalesType == SalesType::RORRental);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate</Name>
				<Source><![CDATA[
    container checkIfUpdate(container _packedCheckIfUpdateContract)
    {
        container ret = next checkIfUpdate(_packedCheckIfUpdateContract);
        
        if (this.company() == curext())
        {
            SalesTableType salesTableType = this.type();
            salesTableType.FINparmIgnoreCustCreditCheck(this.DNRIgnoreCustCreditCheck);
        }
        this.DNRIgnoreCustCreditCheck = NoYes::No;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour</Name>
				<Source><![CDATA[
    void initFromCustInvoiceJour(CustInvoiceJour custInvoiceJour)
    {
        // RLAM - We want to overwrite the value of this.NumberSequenceGroup
        // if it is filled inside the RORInitFromInventLocation method
        this.RORInitFromInventLocation();

        boolean shouldOverwrite = true;
        NumberSequenceGroupId tmpNumberSequenceGroup = this.NumberSequenceGroup;
        
        if(!this.NumberSequenceGroup)
        {
            shouldOverwrite = false;
        }

        next initFromCustInvoiceJour(custInvoiceJour);

        if(shouldOverwrite)
        {
            this.NumberSequenceGroup = tmpNumberSequenceGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable()
    {
        next initFromCustTable();
            
        CustTable custTable = this.custTable_CustAccount();
        
        this.FINinitFromCustTable(custTable);
        this.RORInitFromCustTable(custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTableForProjOrder</Name>
				<Source><![CDATA[
    protected void initFromCustTableForProjOrder()
    {
        CustAccount tmpCustAccount = this.CustAccount;

        next initFromCustTableForProjOrder();

        // *** Repeated code
        if (this.skipInitFromCustTableForProjOrder())
        {
            return;
        }

        // RLAM - We want to use our custom CustAccount value if our condition holds
        // We therefore reset it afterwards. The initFromCustTable method, however,
        // performs computations based on CustAccount, so we repeat that as well
        if (this.RecId == 0 && this.SalesType == SalesType::RORRental && tmpCustAccount)
        {
            this.CustAccount = tmpCustAccount;
            this.initFromCustTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable _projTable)
    {
        LogisticsDeliveryName       tmpDeliveryName             = this.DeliveryName;
        LogisticsPostalAddressRecId tmpDeliveryPostalAddress    = this.DeliveryPostalAddress;

        next initFromProjTable(_projTable);

        // RLAM - We want to use our custom DeliveryName & DeliveryPostalAddress values
        // if our condition holds. We therefore reset them afterwards.
        if (this.RecId == 0 && this.SalesType == SalesType::RORRental && this.CustAccount)
        {
            this.DeliveryName           = tmpDeliveryName;
            this.DeliveryPostalAddress  = tmpDeliveryPostalAddress;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceJour</Name>
				<Source><![CDATA[
    void initFromProjInvoiceJour(ProjInvoiceJour projInvoiceJour)
    {
        // RLAM - We want to overwrite the value of this.NumberSequenceGroup
        // if it is filled inside the RORInitFromInventLocation method
        this.RORInitFromInventLocation();

        boolean shouldOverwrite = true;
        NumberSequenceGroupId tmpNumberSequenceGroup = this.NumberSequenceGroup;
        
        if(!this.NumberSequenceGroup)
        {
            shouldOverwrite = false;
        }

        next initFromProjInvoiceJour(projInvoiceJour);

        if(shouldOverwrite)
        {
            this.NumberSequenceGroup = tmpNumberSequenceGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    void initFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        next initFromSalesQuotationTable(_salesQuotationTable);

        this.RORContactPersonIdOperator = _salesQuotationTable.RORContactPersonIdOperator;
        this.RORVenueCode               = _salesQuotationTable.RORVenueCode;
        this.INVInvoiceProfileId        = _salesQuotationTable.INVInvoiceProfileId;
        this.DNRCalendarId              = _salesQuotationTable.DNRCalendarId;
        this.RORPriceTimeUnit           = _salesQuotationTable.RORPriceTimeUnit;
        this.WPPWorkOrderTemplateId     = _salesQuotationTable.WPPWorkOrderTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void initFromSalesTable(SalesTable salesTable)
    {
        // RLAM - We want to overwrite the value of this.NumberSequenceGroup
        // if it is filled inside the RORInitFromInventLocation method
        this.RORInitFromInventLocation();

        boolean shouldOverwrite = true;
        NumberSequenceGroupId tmpNumberSequenceGroup = this.NumberSequenceGroup;
        
        if(!this.NumberSequenceGroup)
        {
            shouldOverwrite = false;
        }

        next initFromSalesTable(salesTable);

        if(shouldOverwrite)
        {
            this.NumberSequenceGroup = tmpNumberSequenceGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastJournals</Name>
				<Source><![CDATA[
    container lastJournals()
    {
        container c = next lastJournals();

        #ISOCountryRegionCodes
        if(!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            c += ["", dateNull()];
            c += ["", dateNull()];
            c += ["", dateNull()];
            c += ["", dateNull()];
        }
    
        c = conIns(c, SalesTableType::RORPosPreperation(),      [this.RORLastPreparation(),      this.RORLastPreparationDate()]);
        c = conIns(c, SalesTableType::RORPosOutbound(),         [this.RORLastOutbound(),         this.RORLastOutboundDate()]);
        c = conIns(c, SalesTableType::RORPosBuild(),            [this.RORLastBuild(),            this.RORLastBuildDate()]);
        c = conIns(c, SalesTableType::RORPosEventStart(),       [this.RORLastEventStart(),       this.RORLastEventStartDate()]);
        c = conIns(c, SalesTableType::RORPosEventEnd(),         [this.RORLastEventEnd(),         this.RORLastEventEndDate()]);
        c = conIns(c, SalesTableType::RORPosStrike(),           [this.RORLastStrike(),           this.RORLastStrikeDate()]);
        c = conIns(c, SalesTableType::RORPosInbound(),          [this.RORLastInbound(),          this.RORLastInboundDate()]);
        c = conIns(c, SalesTableType::RORPosReturned(),         [this.RORLastReturned(),         this.RORLastReturnedDate()]);
        c = conIns(c, SalesTableType::RORPosReturnInspection(), [this.RORLastReturnInspection(), this.RORLastReturnInspectionDate()]);

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationTypesForLastQuotation</Name>
				<Source><![CDATA[
    protected container quotationTypesForLastQuotation()
    {
        container ret = next quotationTypesForLastQuotation();
        ret += [QuotationType::RORRental];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINRentalProjectInvoicing</Name>
				<Source><![CDATA[
    // extension methods

    public boolean FINRentalProjectInvoicing()
    {
        return (this.ProjId && RORParameters::find().RentalProjectInvoicing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitFromVenueTable</Name>
				<Source><![CDATA[
    public void RORinitFromVenueTable(RORVenueTable _venueTable,
                                      boolean       _copyProjInfo = true)
    {
        LogisticsEntityPostalAddressView    addressView;
    
        select firstonly PostalAddress from addressView
        where addressView.IsPrimary == NoYes::Yes
        &&    addressView.EntityType == LogisticsLocationEntityType::RORVenue
        &&    addressView.Entity     == _venueTable.RecId;
    
        this.DeliveryName          = _venueTable.Name;
        this.DeliveryPostalAddress = addressView.PostalAddress;
        this.AddressRefRecId       = _venueTable.RecId;
        this.AddressRefTableId     = _venueTable.TableId;
    
        if (_copyProjInfo
        && ((this.RecId && !this.ProjId) || (!this.RecId && _venueTable.WPPProjId)))
        {
            this.WPPIsRentalProject = _venueTable.WPPIsRentalProject;
            this.ProjId             = _venueTable.WPPProjId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventStartDate</Name>
				<Source><![CDATA[
    private TransDate RORLastEventStartDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventStarted;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastPreparationDate</Name>
				<Source><![CDATA[
    private TransDate RORLastPreparationDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Prepared;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturnInspectionDate</Name>
				<Source><![CDATA[
    private TransDate RORLastReturnInspectionDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::ReturnInspected;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLineBuffer</Name>
				<Source><![CDATA[
    public SalesLine RORLineBuffer()
    {
        SalesLine salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCanChangeRentalDates</Name>
				<Source><![CDATA[
    public boolean WPPCanChangeRentalDates()
    {
        boolean     ret = true;
        SalesLine   salesLine;
    
        while select salesLine
        where salesLine.SalesId == this.SalesId
        {
            ret = salesLine.WPPCanChangeRentalDates();
    
            if (!ret)
            {
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPupdateWorkOrder</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public static void WPPupdateWorkOrder(SalesTable _salesTable)
    {
        WPPWorkOrderTable   workOrderTable;
        SalesLine           salesLine;
    
        if (WPPWorkOrderTable::existFromOrder(_salesTable.TableId, _salesTable.RecId))
        {
            DirPartyRecId partyRecId = _salesTable.partyTable_CustAccount().RecId;

            // Synchronize the assigned object to the related work order
            update_recordSet workOrderTable
            setting LogisticsLocationRecId = _salesTable.DeliveryPostalAddress,
                    OrganizationParty = partyRecId,
                    CustVendAccountType = CustVendACType::Cust,
                    RORVenueCode = _salesTable.RORVenueCode,
                    FINCreditCheckStatus = _salesTable.FINCreditCheckStatus
            where workOrderTable.OrderTableId == _salesTable.TableId
            &&    workOrderTable.OrderRecId   == _salesTable.RecId;
        }
        else
        {
            // Update all work order related to the line
            select firstOnly RecId from workOrderTable
                exists join salesLine
                where salesLine.TableId == workOrderTable.OrderTableId
                &&    salesLine.RecId   == workOrderTable.OrderRecId
                &&    salesLine.SalesId == _salesTable.SalesId;
    
            if (workOrderTable)
            {
                workOrderTable = null;
                DirPartyRecId partyRecId = _salesTable.partyTable_CustAccount().RecId;
    
                update_recordSet workOrderTable
                setting LogisticsLocationRecId = _salesTable.DeliveryPostalAddress,
                        OrganizationParty = partyRecId,
                        CustVendAccountType = CustVendACType::Cust,
                        RORVenueCode = _salesTable.RORVenueCode,
                        FINCreditCheckStatus = _salesTable.FINCreditCheckStatus
                    exists join salesLine
                    where salesLine.TableId == workOrderTable.OrderTableId
                    &&    salesLine.RecId   == workOrderTable.OrderRecId
                    &&    salesLine.SalesId == _salesTable.SalesId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPIsObjectAssignmentEnabled</Name>
				<Source><![CDATA[
    public boolean WPPIsObjectAssignmentEnabled()
    {
        boolean     ret;
        SalesLine   salesLine;
        ;
    
        while select salesLine
        where salesLine.SalesId == this.SalesId
        {
            ret = salesLine.WPPIsObjectAssignmentEnabled();
    
            if (ret)
            {
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPInitFromWorkOrderTable</Name>
				<Source><![CDATA[
    public void WPPInitFromWorkOrderTable(WPPWorkOrderTable _workOrderTable)
    {
        this.DeliveryPostalAddress = _workOrderTable.LogisticsLocationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORlastJournals</Name>
				<Source><![CDATA[
    [SysObsolete("Method RORlastJournals is no longer used. Please wrap the /Tables/SalesTable/Methods/lastJournals instead.", false)]
    public container RORlastJournals()
    {
        container  c;
    
        // Used from Standard AX
        c = conIns(c, SalesTableType::posQuotation(),       [this.lastQuotation(),   this.lastQuotationDate()]);
        c = conIns(c, SalesTableType::posConfirmation(),    [this.lastConfirm(),     this.lastConfirmDate()]);
        c = conIns(c, SalesTableType::posPickingList(),     [this.lastPickingList(), this.lastPickingListDate()]);
        c = conIns(c, SalesTableType::posPackingSlip(),     [this.lastPackingSlip(), this.lastPackingSlipDate()]);
        c = conIns(c, SalesTableType::posInvoice(),         [this.lastInvoice(),     this.lastInvoiceDate()]);
    
        // Added for Rental
        c = conIns(c, SalesTableType::RORPosPreperation(),      [this.lastPackingSlip(),    this.lastPackingSlipDate()]);
        c = conIns(c, SalesTableType::RORPosOutbound(),         [this.lastInvoice(),        this.lastInvoiceDate()]);
        c = conIns(c, SalesTableType::RORPosBuild(),            [this.lastQuotation(),      this.lastQuotationDate()]);
        c = conIns(c, SalesTableType::RORPosEventStart(),       [this.lastConfirm(),        this.lastConfirmDate()]);
        c = conIns(c, SalesTableType::RORPosEventEnd(),         [this.lastPickingList(),    this.lastPickingListDate()]);
        c = conIns(c, SalesTableType::RORPosStrike(),           [this.lastPackingSlip(),    this.lastPackingSlipDate()]);
        c = conIns(c, SalesTableType::RORPosInbound(),          [this.lastInvoice(),        this.lastInvoiceDate()]);
        c = conIns(c, SalesTableType::RORPosReturned(),         [this.lastPackingSlip(),    this.lastPackingSlipDate()]);
        c = conIns(c, SalesTableType::RORPosReturnInspection(), [this.lastInvoice(),        this.lastInvoiceDate()]);
    
        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPEditProjId</Name>
				<Source><![CDATA[
    edit ProjId WPPEditProjId(boolean _set, ProjId _projId)
    {
        if(_set)
        {
            this.ProjId = _projId;
        }

        return this.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROReditContactPersonNameOperator</Name>
				<Source><![CDATA[
    static edit ContactPersonName ROReditContactPersonNameOperator(SalesTable _hostObj, boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        DirPartyTable       partyTable;
        ContactPersonId     contactPersonId;
    
        if (_set)
        {
            if (name)
            {
                contactPersonId = _hostObj.RORContactPersonIdOperator;
                contactPerson   = ContactPerson::find(_name);
    
                _hostObj.RORContactPersonIdOperator = contactPerson.ContactPersonId;
    
                if (_hostObj.RORContactPersonIdOperator)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    select ContactPersonId from contactPerson
                    where contactPerson.CustAccount == _hostObj.CustAccount
                        join Name from partyTable
                        where partyTable.RecId == contactPerson.Party
                        &&    partyTable.Name like name;
    
                    if (contactPerson)
                    {
                        _hostObj.RORContactPersonIdOperator = contactPerson.ContactPersonId;
                        name                            = partyTable.Name;
                    }
                }
                if (contactPersonId != _hostObj.RORContactPersonIdOperator)
                {
                    if (_hostObj.checkContactPerson())
                    {
                        _hostObj.initFromContactInfo();
                        if (FormDataUtil::getFormDataSource(_hostObj))
                        {
                            FormDataUtil::getFormDataSource(_hostObj).refresh();
                        }
                    }
                    else
                    {
                        _hostObj.RORContactPersonIdOperator = contactPersonId;
                    }
    
                }
            }
            else
            {
                _hostObj.RORContactPersonIdOperator = '';
            }
        }
        else
        {
            name = _hostObj.RORcontactPersonNameOperator();
        }
    
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORcontactPersonNameOperator</Name>
				<Source><![CDATA[
    display ContactPersonName RORcontactPersonNameOperator()
    {
        return ContactPerson::name(this.RORContactPersonIdOperator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturnedDate</Name>
				<Source><![CDATA[
    private TransDate RORLastReturnedDate()
    {
        CustRORReturnNoteSalesLink      returnNoteSalesLink;
        CustRORReturnNoteTrans          returnNoteTrans;
    
        select maxOf(DeliveryDate) from returnNoteSalesLink
        where returnNoteSalesLink.OrigSalesId  == this.SalesId
            exists join returnNoteTrans
            where returnNoteTrans.SalesId == returnNoteSalesLink.salesId
            && returnNoteTrans.ReturnNoteId == returnNoteSalesLink.ReturnNoteId
            && returnNoteTrans.DeliveryDate == returnNoteSalesLink.DeliveryDate
            && returnNoteTrans.Qty;
    
        return returnNoteSalesLink.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromInventLocation</Name>
				<Source><![CDATA[
    public void RORInitFromInventLocation(InventLocationID _inventLocationId = this.InventLocationId)
    {
        InventLocation          inventLocation;
        InventLocationId        origWarehouse;
    
        origWarehouse = this.orig().InventLocationId;
    
        if (!origWarehouse && _inventLocationId)
        {
            inventLocation = InventLocation::find(_inventLocationId);
    
            if(inventLocation.RORNumberSequenceGroup)
            {
                this.NumberSequenceGroup = inventLocation.RORNumberSequenceGroup;
            }
    
            if (inventLocation.RORVATNum)
            {
                this.VATNum = inventLocation.RORVATNum;
            }
        }
        else if (origWarehouse)
        {
            inventLocation = InventLocation::find(origWareHouse);
    
            if (inventLocation.RORNumberSequenceGroup == this.NumberSequenceGroup)
            {
                this.NumberSequenceGroup = (_inventLocationId ? InventLocation::find(_inventLocationId).RORNumberSequenceGroup : '');
            }
    
            if (inventLocation.RORVATNum == this.VATNum)
            {
                this.VATNum = (_inventLocationId ? InventLocation::find(_inventLocationId).RORVATNum : '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCreditCheckNoWarning</Name>
				<Source><![CDATA[
    public boolean FINCreditCheckNoWarning(boolean _onlyWarning = true,
                                           boolean _showMessage = true)
    {
        boolean ret = true;
    
        if (this.custTable_CustAccount().FINMayUseCreditCheckStatus()
        && !FINCheckCreditLimit::checkCreditLimit_Sales(this, _onlyWarning, _showMessage))
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastOutboundDate</Name>
				<Source><![CDATA[
    private TransDate RORLastOutboundDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Outbound;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPworkOrderInfoModified</Name>
				<Source><![CDATA[
    public boolean WPPworkOrderInfoModified(SalesTable  _salesTableOrig)
    {
        boolean ret;
    
        if (this.WPPIsRentalProject != _salesTableOrig.WPPIsRentalProject
        ||  this.ProjId             != _salesTableOrig.ProjId)
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROROrderType</Name>
				<Source><![CDATA[
    public SalesType ROROrderType()
    {
        return this.SalesType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastStrikeDate</Name>
				<Source><![CDATA[
    private TransDate RORLastStrikeDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Strike;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromCustTable</Name>
				<Source><![CDATA[
    public void RORInitFromCustTable(CustTable _custTable, AxSalesTable _axSalesTable = null)
    {
        RORCalendarId       calendarId;
        DNRWorkerDefaults   workerDefaults = DNRWorkerDefaults::findByUserId();
    
        if (this.SalesType == SalesType::RORRental)
        {
            if(workerDefaults.InventLocationId)
            {
                this.InventLocationId = workerDefaults.InventLocationId;
            }
        }
        else if(workerDefaults.RORInventJournalWarehouse)
        {
            this.InventLocationId = workerDefaults.RORInventJournalWarehouse;
        }

        if(workerDefaults.SalesPoolId)
        {
            this.SalesPoolId = workerDefaults.SalesPoolId;
        }
    
        this.RORInitFromInventLocation();
    
        if (this.InventLocationId)
        { 
            this.InventSiteId = InventLocation::find(this.InventLocationId).InventSiteId;
        }
    
        this.INVInvoiceProfileId  = _custTable.INVInvoiceProfileId;
        this.RORPriceTimeUnit     = _custTable.RORPriceTimeUnit;
    
        calendarId = _custTable.DNRRentalCalendarId;
    
        if (calendarId
        &&  calendarId != this.DNRCalendarId)
        {
            this.DNRCalendarId = calendarId;
            this.RORRentalDateTimesHost::checkUpdateRentalDates(true);
        }
    
        // used in inter company order
        if (_axSalesTable)
        {
            _axSalesTable.parmInventLocationId(this.InventLocationId);
            _axSalesTable.parmInventSiteId(this.InventSiteId);
            _axSalesTable.parmINVInvoiceProfileId(this.INVInvoiceProfileId);
            _axSalesTable.parmRORPriceTimeUnit(this.RORPriceTimeUnit);
            _axSalesTable.parmDNRCalendarId(this.DNRCalendarId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturned</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastReturned()
    {
        CustRORReturnNoteSalesLink   returnNoteSalesLink;
        CustRORReturnNoteTrans          returnNoteTrans;
    
        select firstonly ReturnNoteId from returnNoteSalesLink
        order by DeliveryDate desc, ReturnNoteId desc
        where returnNoteSalesLink.OrigSalesId == this.SalesId
            exists join returnNoteTrans
            where returnNoteTrans.SalesId == returnNoteSalesLink.salesId
            && returnNoteTrans.ReturnNoteId == returnNoteSalesLink.ReturnNoteId
            && returnNoteTrans.DeliveryDate == returnNoteSalesLink.DeliveryDate
            && returnNoteTrans.Qty;
    
        return returnNoteSalesLink.ReturnNoteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturnInspection</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastReturnInspection()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::ReturnInspected;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastOutbound</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastOutbound()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Outbound;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINinitFromCustTable</Name>
				<Source><![CDATA[
    private void FINinitFromCustTable(CustTable  _custTable)
    {
        this.FINCreditCheckStatus = _custTable.FINCreditCheckStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastBuildDate</Name>
				<Source><![CDATA[
    private TransDate RORLastBuildDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Built;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastStrike</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastStrike()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Strike;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastPreparation</Name>
				<Source><![CDATA[
    public RORCustSubStatusDocNum RORLastPreparation()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Prepared;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastInbound</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastInbound()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Inbound;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastBuild</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastBuild()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Built;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventEnd</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastEventEnd()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventEnded;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventEndDate</Name>
				<Source><![CDATA[
    private TransDate RORLastEventEndDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventEnded;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventStart</Name>
				<Source><![CDATA[
    public CustConfirmDocNum RORLastEventStart()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select firstonly TableId from subStatusSalesLink
        order by @Date desc, SubStatusId desc
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join SubStatusDocNum from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventStarted;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastInboundDate</Name>
				<Source><![CDATA[
    private TransDate RORLastInboundDate()
    {
        CustRORSubStatusSalesLink   subStatusSalesLink;
        CustRORSubStatusJour        subStatusJour;
    
        select maxOf(@Date) from subStatusSalesLink
        where subStatusSalesLink.OrigSalesId == this.SalesId
            join TableId from subStatusJour
            where subStatusJour.SubStatusId        == subStatusSalesLink.SubStatusId
            &&    subStatusJour.Date               == subStatusSalesLink.Date
            &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Inbound;
    
        return subStatusSalesLink.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORmustUseAmendment</Name>
				<Source><![CDATA[
    public boolean RORmustUseAmendment()
    {
        return enum2int(this.DocumentStatus) >= enum2int(DocumentStatus::Confirmation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORsmmBusRelTable</Name>
				<Source><![CDATA[
    public smmBusRelTable RORsmmBusRelTable()
    {
        return smmBusRelTable::findByParty(CustTable::find(this.CustAccount).Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSynchroniseVenueCode</Name>
				<Source><![CDATA[
    public void RORSynchroniseVenueCode(SalesTable _salesTable_Orig)
    {
        SalesLine                   salesLine;
        PurchTable                  purchTable;
        LogisticsPostalAddressRecId originalDeliveryPostalAddress;
    
    
        if (this.RORVenueCode != _salesTable_Orig.RORVenueCode)
        {
            ttsBegin;
            while select forUpdate purchTable
            where purchTable.RORVenueCode == _salesTable_Orig.RORVenueCode
                exists join salesLine
                where salesLine.SalesId                 == this.SalesId
                &&    salesLine.DeliveryPostalAddress   == this.DeliveryPostalAddress
                &&    salesLine.InventRefType           == InventRefType::Purch
                &&    salesLine.InventRefId             == purchTable.PurchId
            {
                originalDeliveryPostalAddress = purchTable.DeliveryPostalAddress;
    
                purchTable.RORVenueCode = this.RORVenueCode;
                purchTable.modifiedField(fieldNum(PurchTable, RORVenueCode));
                purchTable.update();
    
                purchTable.copyAddressToLine(DialogButton::YesToAll, originalDeliveryPostalAddress);
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayOnRentDateTime</Name>
				<Source><![CDATA[
        [SysClientCacheDataMethod(true)]
        display ROROnRentDateTime  RORDisplayOnRentDateTime()
        {
            RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

            return rentalDateTimes.getOnRentDateTime();
        }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayOffRentDateTime</Name>
				<Source><![CDATA[
        [SysClientCacheDataMethod(true)]
        display ROROffRentDateTime RORDisplayOffRentDateTime()
        {
            RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

        return rentalDateTimes.getOffRentDateTime(false, false);
        }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayExpOffRentDateTime</Name>
				<Source><![CDATA[
        [SysClientCacheDataMethod(true)]
        display RORExpectedOffRentDateTime RORDisplayExpOffRentDateTime()
        {
            RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

            return rentalDateTimes.getOffRentDateTime();
        }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdating</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(SalesTable), DataEventType::Updating)]
    public static void DNREvent_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        SalesTable hostObj          = _sender as SalesTable;
        SalesTable salesTable_Orig  = hostObj.orig();

        if (!hostObj.RORIsModified
        &&  !salesTable_Orig.RORIsModified
        &&  hostObj.RORRentalHeader::orderMustBeReConfirmed(salesTable_Orig))
        {
            hostObj.RORIsModified = NoYes::Yes;
        }

        if (hostObj.SalesType == SalesType::RORRental && hostObj.TaxGroup != salesTable_Orig.TaxGroup)
        {
            ROROrderAmendmentLog::createAmendmentLog(DNRAmendmentAction::Updated, hostObj, DNRAmendmentEventType::SalesTaxGroupHeader);     
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>