<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransSyncDisposableContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransSyncDisposableContext implements System.IDisposable
{
    private static BOBRentalTransSyncDisposableContext instance;

    private DNRStack parameterStack;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        if (instance)
        {
            throw error("Nesting of BOBRentalTransSyncDisposableContext is not supported.");
        }

        parameterStack  = new DNRStack(Types::Class);
        instance        = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    public static BOBRentalTransSyncDisposableContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>peek</Name>
				<Source><![CDATA[
    public BOBRentalTransSyncParameters peek()
    {
        return parameterStack.peek() as BOBRentalTransSyncParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>push</Name>
				<Source><![CDATA[
    public void push(BOBRentalTransSyncParameters _parameters)
    {
        parameterStack.push(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventTransRecIds</Name>
				<Source><![CDATA[
    public void processInventTransRecIds(MethodName _methodName, InventMovement _inventMovement)
    {
        BOBRentalTransSyncParameters parameters = parameterStack.pop() as BOBRentalTransSyncParameters;

        if (this.skipProcessInventTransRecIds(_inventMovement))
        {
            return;
        }

        if (parameters.getMethodName() == _methodName)
        {
            SetEnumerator enumerator = parameters.getInventTransRecIdEnumerator();

            while (enumerator.moveNext())
            {
                InventTransRefRecId inventTransRecId    = enumerator.current();
                InventTrans         inventTrans         = InventTrans::findRecId(inventTransRecId);

                BOBRentalTransManager::newInventMovement(_inventMovement, inventTrans).synchronize();

            }
        }
        else
        {
            throw error(strFmt("Method name is not equal to method name on stack. Method name should be '%1', but '%2' was found.", _methodName, parameters.getMethodName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipProcessInventTransRecIds</Name>
				<Source><![CDATA[
    protected boolean skipProcessInventTransRecIds(InventMovement _inventMovement)
    {
        boolean ret;
        Common buffer = _inventMovement.buffer();

        if (buffer.TableId == tableNum(RetailTransactionSalesTrans))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSync</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2021. This method is no longer supported.", false)]
    public boolean mustSync()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>