<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventJournalTransTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventJournalTrans))]
public final class DNRInventJournalTransTable_Extension
{
    // chain-of-command wrappers

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(NoYes _dropEstimated)
    {
        using (DNRPrimitiveDisposableContext context = new DNRPrimitiveDisposableContext())
        {
            context.DNRparmBoolean(_dropEstimated);
            next update(_dropEstimated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(NoYes _dropEstimated)
    {
        using (DNRPrimitiveDisposableContext context = new DNRPrimitiveDisposableContext())
        {
            context.DNRparmBoolean(_dropEstimated);
            next insert(_dropEstimated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBeditTransDateTime</Name>
				<Source><![CDATA[
    // extension methods

    public edit TransDateTime BOBeditTransDateTime(boolean _set, TransDateTime _transDateTime)
    {
        FormDataSource  formDataSource = this.dataSource();
        FormRun         formRun = formDataSource.formRun(); // Always InventJournalCount
        InventJournalFormTrans_Mov_BOBCount formClass = formRun.journalForm() as InventJournalFormTrans_Mov_BOBCount;
        
        if(formClass)
        {
            return formClass.editTransDateTime(_set, this, _transDateTime);
        }

        return utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetObjectView</Name>
				<Source><![CDATA[
    private BOBObjectView DNRGetObjectView()
    {
        BOBObjectView   objectView;
        FormDataSource  formDataSource = this.dataSource(); 
        FormRun         formRun = formDataSource.formRun(); // Always InventJournalCount
        InventSerialId  inventSerialId;

        Map inventSerialIdCache = formRun.DNRGetInventSerialIdCache();
        
        if(inventSerialIdCache.exists(this.RecId))
        {
            inventSerialId = inventSerialIdCache.lookup(this.RecId);
        }
        else
        {
            inventSerialId = InventDim::find(this.InventDimId).inventSerialId;
            inventSerialIdCache.insert(this.RecId, inventSerialId);
        }

        if(inventSerialId)
        {
            Map  map = formRun.DNRGetObjectViewCache();
            
            if(map.exists(this.RecId))
            {
                objectView = map.lookup(this.RecId);
            }
            else
            {
                select firstonly objectView
                where objectView.InventSerialId == inventSerialId;
                map.insert(this.RecId, objectView);
            }
        }

        return objectView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayIsObjectAvailable</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display NoYes BOBdisplayIsObjectAvailable()
    {
        return this.DNRGetObjectView().IsAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayObjectAddress</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display LogisticsAddressing BOBDisplayObjectAddress()
    {
        return this.DNRGetObjectView().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationCity</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display LogisticsAddressCityName BOBdisplayObjectLocationCity()
    {
        return this.DNRGetObjectView().City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayAssetId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display AssetId BOBDisplayAssetId()
    {
        BOBObjectAssetLog   objectAssetLog;
        BOBObjectView       objectView = this.DNRGetObjectView();
        TransDate           transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if(objectView)
        {
            select firstonly AssetId from objectAssetLog
            where objectAssetLog.ObjectId == objectView.ObjectId
            &&    objectAssetLog.AssetCompanyId == objectView.FinancialOwner
            &&    objectAssetLog.ValidFrom <= transDate
            &&  (!objectAssetLog.ValidTo || objectAssetLog.ValidTo >= transDate);
        }

        return objectAssetLog.AssetId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSetTaxGroup</Name>
				<Source><![CDATA[
    public void FINSetTaxGroup()
    {
        if (!this.FINIgnoreTaxMatrix
        &&  this.JournalType == InventJournaltype::project
        &&  TaxParameters::find().FINCheckTaxMatrix != FINCheckTaxMatrix::Disabled)
        {
            this.ProjTaxGroupId = FINTaxMatrix::findTaxGroup(this, this.ProjTaxGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetObjectTable</Name>
				<Source><![CDATA[
    public BOBObjectTable RORGetObjectTable()
    {
        InventTable             inventTable;
        ItemId                  itemId = this.ItemId;
        InventDim               inventDim = this.inventDim();
        AssetTable              assetTable;
        BOBObjectTable          objectTable;
        BOBObjectAssetLog       objectAssetLog;
        BOBRentalType           rentalType = BOBRentalType::findFromItemId(itemId);
    
        Debug::assert(rentalType.RecId != 0);
    
        switch(rentalType.Classification)
        {
            case BOBRentalTypeClassification::Serialized:
                objectTable = BOBObjectTable::findInventSerialId(inventDim.inventSerialId);
                break;
    
            case BOBRentalTypeClassification::Bulk:
                select firstOnly objectTable
                where objectTable.RentalTypeId == rentalType.RentalTypeId
                &&   !objectTable.InventSerialId
                    exists join objectAssetLog
                    where objectAssetLog.ObjectId == objectTable.ObjectId
                        join TableId from assetTable
                        where assetTable.DataAreaId == objectAssetLog.AssetCompanyId
                        &&    assetTable.AssetId == objectAssetLog.AssetId
                        &&    assetTable.BOBIsBulkParent;
                break;
    
            default:
                throw error(strFmt("@DNR5945", itemId));
        }
    
        return objectTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayTotalReturnQty</Name>
				<Source><![CDATA[
    display RORTotalReturnQty RORDisplayTotalReturnQty()
    {
        return (this.RORGoodQty + this.RORSurplusQty + this.RORLostQty + this.RORDamagedQty + this.RORScrappedQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORValidateField</Name>
				<Source><![CDATA[
    public boolean RORValidateField(FieldId _fieldIdToValidate)
    {
        boolean ret = true;
    
        if (_fieldIdToValidate == fieldNum(InventJournalTrans, RORSurplusQty) && this.RORSurplusQty && this.RORLostQty)
        {
            ret = checkFailed(strFmt("@DNR10009", fieldId2pname(tableNum(InventJournalTrans), _fieldIdToValidate), fieldId2pname(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, RORLostQty))));
        }
    
        if (_fieldIdToValidate == fieldNum(InventJournalTrans, RORLostQty) && this.RORSurplusQty && this.RORLostQty)
        {
            ret = checkFailed(strFmt("@DNR10009", fieldId2pname(tableNum(InventJournalTrans), _fieldIdToValidate), fieldId2pname(tableNum(InventJournalTrans), fieldNum(InventJournalTrans, RORSurplusQty))));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventUpd_Estimated</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    protected void instantiateInventUpd_Estimated(NoYes _dropEstimated = NoYes::No)
    {
        InventUpd_Estimated estimated, ret;

        boolean createCompensatingMovement = !_dropEstimated;

        try
        {
            if (createCompensatingMovement)
            {
                // compensating movement
                InventMovement movement = this.instantiateInventMovement(InventMovSubType::BOBCompensatingTrans);
            
                estimated = InventUpd_Estimated::newInventMovement(movement);
            
                estimated.BOBParmIsCompensatingTrans(true);
                estimated.updateNow();
            }
        }
        catch
        {
            throw Error("@DNR:ErrorCreatingCompensating");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventMovement</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    protected InventMovement instantiateInventMovement(InventMovSubType _inventMovSubType)
    {
        return InventMovement::construct(this, _inventMovSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPDisplayPostingStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORInventStatus WPPDisplayPostingStatus()
    {
        InventTrans inventTrans = InventTrans::findTransId(this.InventTransId);
        str         postingStatus;
    
        if (hasFieldAccess(tableNum(InventTrans), fieldNum(InventTrans, StatusIssue))
        &&  hasFieldAccess(tableNum(InventTrans), fieldNum(InventTrans, StatusReceipt)))
        {
            if (inventTrans.StatusIssue == StatusIssue::None)
            {
                if (inventTrans.StatusReceipt == StatusReceipt::None)
                {
                    postingStatus = '';
                }
                else
                {
                    postingStatus = enum2str(inventTrans.StatusReceipt);
                }
            }
            else
            {
                postingStatus = enum2str(inventTrans.StatusIssue);
            }
        }
    
        return postingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBObtainCurrAddressForCurrInventJournalTrans</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    private BOBObjectAddressView BOBObtainCurrAddressForCurrInventJournalTrans()
    {
        BOBObjectAddressView objectAddressView;
        
        return objectAddressView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRCreateCompensatingTrans</Name>
				<Source><![CDATA[
    private void DNRCreateCompensatingTrans()
    {
        boolean dropEstimated = DNRPrimitiveDisposableContext::current().DNRparmBoolean();
        
        if (this.JournalType == InventJournalType::OwnershipChange)
        {
            dropEstimated = NoYes::Yes;
        }

        if(!dropEstimated && this.DNRMayCreateCompensatingTrans())
        {
            InventMovement  inventMovement = InventMovement::construct(this, InventMovSubType::BOBCompensatingTrans);
            inventMovement.inventTransOriginId(InventTransOrigin::findByInventTransId(this.InventTransId).RecId);
            
            InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(inventMovement);
            estimated.BOBParmIsCompensatingTrans(true);
            estimated.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRMayCreateCompensatingTrans</Name>
				<Source><![CDATA[
    public boolean DNRMayCreateCompensatingTrans()
    {
        boolean ret;

        if(this.inventJournalTable().BOBInventJournalType == BOBInventJournalType::Count)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRSetAssetCostPrice</Name>
				<Source><![CDATA[
    public void DNRSetAssetCostPrice()
    {
        EcoResProduct   ecoResProduct;
        InventTable     inventTable;
        BOBRentalType   rentalType;
        AssetTable      assetTable;
        AssetBook       assetBook;
        AssetBookTable  assetBookTable;
    
        this.CostPrice = 0;
        this.CostAmount = 0;
    
        if (this.AssetId)
        {
            // in theory multiple 'current' value models could
            // exist for a fixed asset so we take the first one
            select firstOnly Quantity from assetTable
            where assetTable.AssetId == this.AssetId
                join  assetBook
                where assetBook.AssetId == assetTable.AssetId
                    join TableId from assetBookTable
                    where assetBookTable.BookId == assetBook.BookId
                    &&    assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
                        join TableId from inventTable
                        where inventTable.ItemId == this.ItemId
                            join TableId from ecoResProduct
                            where ecoResProduct.RecId == inventTable.Product
                                join Classification from rentalType
                                where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId;
    
            if (assetTable)
            {
                if (rentalType.Classification == BOBRentalTypeClassification::Serialized)
                {
                    this.CostPrice = assetBook.assetNetBookValue();
                    this.CostAmount = this.CostPrice * this.Qty;
                }
                else if (rentalType.Classification == BOBRentalTypeClassification::Bulk && this.Qty && assetTable.Quantity > 0)
                {
                    this.CostPrice = assetBook.assetNetBookValue() / assetTable.Quantity;
                    this.CostAmount = this.CostPrice * this.Qty;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_checkQty_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(tableStr(InventJournalTrans), tableMethodStr(InventJournalTrans, checkQty))]
    public static void DNREvent_checkQty_post(XppPrePostArgs _eventArgs)
    {
        InventJournalTrans hostObj = _eventArgs.getThis() as InventJournalTrans;
        
        if (hostObj.JournalType != InventJournalType::Count 
        && hostObj.Qty == 0
        // This is true only for return journal
        && hostObj.RORSurplusQty != 0)
        {
            infolog.cut(infologLine());
            _eventArgs.setReturnValue(true);           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventJournalTrans), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        InventJournalTrans inventJournalTrans = _sender as InventJournalTrans;
        
        inventJournalTrans.DNRCreateCompensatingTrans();
        inventJournalTrans.FINSetTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdating</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventJournalTrans), DataEventType::Updating)]
    public static void DNREvent_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        InventJournalTrans inventJournalTrans = _sender as InventJournalTrans;

        inventJournalTrans.DNRCreateCompensatingTrans();
        inventJournalTrans.FINSetTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnValidatedField</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventJournalTrans), DataEventType::ValidatedField)]
    public static void DNREvent_OnValidatedField(Common _sender, DataEventArgs _eventArgs)
    {
        InventJournalTrans      hostObject              = _sender as InventJournalTrans;
        ValidateFieldEventArgs  validateFieldEventArgs  = _eventArgs as ValidateEventArgs;
        boolean                 ret                     = validateFieldEventArgs.parmValidateResult();

        if (ret)
        {
            ret = hostObject.RORValidateField(validateFieldEventArgs.parmFieldId());
            validateFieldEventArgs.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnValidatedWrite</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventJournalTrans), DataEventType::ValidatedWrite)]
    public static void DNREvent_OnValidatedWrite(Common _sender, DataEventArgs _eventArgs)
    {
        InventJournalTrans  hostObject      = _sender as InventJournalTrans;
        ValidateEventArgs   validateArgs    = _eventArgs as ValidateEventArgs;
        boolean             ret             = validateArgs.parmValidateResult();

        if (ret)
        {   
            ret = FINDimValueController::eventValidateWrite(_sender);

            validateArgs.parmValidateResult(ret);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    //COC to insert Rental type 
    public void initFromInventTable(InventTable     _inventTable,
                                    boolean         _initQty ,
                                    boolean         _initInventDim ,
                                    boolean         _initCostPrice,
                                    boolean         _initInventoryStatus)
    {
        next initFromInventTable(_inventTable,_initQty,_initInventDim,_initCostPrice,_initInventoryStatus);
        this.BOBRentalTypeId = _inventTable.BOBRentalType().RentalTypeId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>