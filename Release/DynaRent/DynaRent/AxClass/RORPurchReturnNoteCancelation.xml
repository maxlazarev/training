<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORPurchReturnNoteCancelation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORPurchReturnNoteCancelation
{
    SysQueryRun             chooseLines;
    VendRORReturnNoteJour   callerTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the chooseLines query.
    /// </summary>
    private void initQueryBuild()
    {
        chooseLines = new SysQueryRun(this.queryName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    public VendRORReturnNoteJour parmCallerTable(VendRORReturnNoteJour _callerTable = callerTable)
    {
        if (!prmisDefault(_callerTable))
        {
            callerTable = _callerTable;
        }
    
        return callerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    private void postInventory(PurchLine _purchLine)
    {
        /*InventMovement  inventMovement;
        InventUpd_RORSubStatus inventUpdate;
        PurchParmLine   purchParmLine;
        ;
    
        select firstOnly purchParmLine
        where purchParmLine.InventTransId == _purchLine.InventTransId;
    
        inventMovement = InventMovement::construct(_purchLine);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, purchParmLine, BOBRentalSubStatus::Delivered, -inventMovement.transSign());
        inventUpdate.updateNow(ledgerVoucher);
    
        inventMovement = InventMovement::construct(_purchLine, InventMovSubType::BOBCompensatingTrans);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, purchParmLine, BOBRentalSubStatus::Delivered, -inventMovement.transSign());
        inventUpdate.BOBParmIsCompensatingTrans(true);
        inventUpdate.updateNow(ledgerVoucher);
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    private str queryName()
    {
        return queryStr(PurchUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PurchLine               purchLine;
        VendRORReturnNoteTrans  returnNoteTrans;
    
        boolean updatePurchLine;
        boolean updateReturnNoteTrans;
        ;
    
        this.updateQueryBuildOnCancelation();
    
        ttsBegin;
    
        while (chooseLines.next())
        {
            updatePurchLine = false;
            updateReturnNoteTrans = false;
    
            if (chooseLines.changed(tableNum(PurchLine)))
            {
                purchLine = chooseLines.get(tableNum(PurchLine));
                updatePurchLine = true;
            }
    
            if (chooseLines.changed(tableNum(VendRORReturnNoteTrans)))
            {
                returnNoteTrans = chooseLines.get(tableNum(VendRORReturnNoteTrans));
                updateReturnNoteTrans = true;
            }
    
            if (updatePurchLine)
            {
                this.updatePurchLineQuantities(purchLine, returnNoteTrans);
            }
    
            if (updateReturnNoteTrans)
            {
                this.updateVendRORRetirnTransQuantities(returnNoteTrans);
                this.postInventory(purchLine);
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchLineQuantities</Name>
				<Source><![CDATA[
    public void updatePurchLineQuantities(PurchLine _purchLine, VendRORReturnNoteTrans _returnNoteTrans)
    {
        _purchLine.selectForUpdate(true);
    
        _purchLine.RORRemainPurchReturn  += _returnNoteTrans.Qty;
        _purchLine.RORRemainInventReturn += _returnNoteTrans.InventQty;
        _purchLine.RORPurchReturned      -= _returnNoteTrans.Qty;
    
        _purchLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildOnCancelation</Name>
				<Source><![CDATA[
    public void updateQueryBuildOnCancelation()
    {
        #Query
        Query                query;
        QueryBuildDataSource qbds;
        VendRORReturnNoteJour  vendRORReturnNoteJour = this.parmCallerTable() as VendRORReturnNoteJour;
    
        this.initQueryBuild();
    
        query = chooseLines.query();
        query.interactive(false);
        chooseLines.literals(#queryForcePlaceholders);
    
        qbds = query.dataSourceTable(tableNum(PurchLine)).addDataSource(tableNum(VendRORReturnNoteTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(PurchLine,InventTransId), fieldNum(VendRORReturnNoteTrans, InventTransId));
        qbds.addRange(fieldNum(VendRORReturnNoteTrans, VendReturnNote)).value(queryValue(vendRORReturnNoteJour.RecId));
        qbds.addRange(fieldNum(VendRORReturnNoteTrans, Qty)).value(queryValue('> 0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendRORRetirnTransQuantities</Name>
				<Source><![CDATA[
    public void updateVendRORRetirnTransQuantities(VendRORReturnNoteTrans _returnNoteTrans)
    {
        _returnNoteTrans.selectForUpdate(true);
    
        //_returnNoteTrans.Remain         += _returnNoteTrans.Qty;
        //_returnNoteTrans.RemainInvent   += _returnNoteTrans.InventQty;
    
        _returnNoteTrans.Qty = 0;
        _returnNoteTrans.InventQty = 0;
    
        _returnNoteTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static server RORPurchReturnNoteCancelation construct()
    {
        return new RORPurchReturnNoteCancelation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RORPurchReturnNoteCancelation    returnNoteCancelation;
        ;
    
        if (_args.caller() && _args.record() && _args.record().TableId == tableNum(CustRORReturnNoteJour))
        {
            returnNoteCancelation = RORPurchReturnNoteCancelation::construct();
    
            returnNoteCancelation.parmCallerTable(_args.record());
            returnNoteCancelation.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>