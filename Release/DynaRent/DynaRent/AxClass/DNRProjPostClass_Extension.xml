<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjPostClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjPost))]
public final class DNRProjPostClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreateProjCost</Name>
				<Source><![CDATA[
    public static boolean checkCreateProjCost(ItemId _itemId, ProjId _projId)
    {
        boolean ret = next checkCreateProjCost(_itemId, _projId);

        DNRInventMovementUpdateLedgerDisposableContext context = DNRInventMovementUpdateLedgerDisposableContext::current();

        if (ret && context && !context.DNRParmMustBeBookedToLedger())
        {
            ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCreateProjTransItem</Name>
				<Source><![CDATA[
    public static ProjPost newCreateProjTransItem(Common            _buffer,
                                                  LedgerVoucher     _ledgerVoucher,
                                                  ProjAdjustRefId   _projAdjustRefId,
                                                  NoYes             _notReduceForecast,
                                                  InventTransId     _inventTransId,
                                                  SalesQty          _salesQty)
    {
        ProjPost ret = next newCreateProjTransItem(_buffer, _ledgerVoucher, _projAdjustRefId, _notReduceForecast, _inventTransId, _salesQty);

        if (_buffer.TableId == tableNum(InventJournalTrans))
        {
            InventJournalTrans  inventJournalTrans  = _buffer;
            ProjTrans           projTrans           = ProjTrans::newInventJournalTrans(inventJournalTrans);
            ProjGroup           projGroup           = ProjGroup::find(ProjTable::find(inventJournalTrans.ProjId).ProjGroupId);

            if (projGroup.ItemTransCost == ProjLedgerStatus::BalanceSheet)
            {
                if (InventTable::modelGroupByItemId(inventJournalTrans.ItemId).PostOnhandFinancial)
                {
                    if (projTrans.projLineProperty().ToBeCapitalize)
                    {
                        if (! ProjTable::isPLPostingRequired(projTrans.projTable().ProjId))
                        {
                            // Post item to balance
                            ret.parmEnterCost(ProjParameters::find().WPPProjWIPItemPostingOnProj);
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventUpd_Financial</Name>
				<Source><![CDATA[
    public static ProjPost newInventUpd_Financial(InventUpd_Financial   _financial,
                                                  LedgerVoucher         _ledgerVoucher,
                                                  ProjAdjustRefId       _projAdjustRefId,
                                                  boolean               _negRec,
                                                  InventTransId         _inventTransId,
                                                  NoYes                 _notReduceForecast)
    {
        
        ProjGroup   projGroup   = ProjGroup::find(ProjTable::find(_financial.movement().projId()).ProjGroupId);
        ProjTrans   projTrans   = ProjTrans::newInventUpd_Financial(_financial, _projAdjustRefId);
        boolean     enterCost;

        ProjPost ret = next newInventUpd_Financial(_financial, _ledgerVoucher, _projAdjustRefId, _negRec, _inventTransId, _notReduceForecast);

        if (projGroup.ItemTransCost == ProjLedgerStatus::BalanceSheet)
        {
            if (InventTable::modelGroupByItemId(_financial.movement().itemId()).PostOnhandFinancial)
            {
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    if (! ProjTable::isPLPostingRequired(_financial.movement().projId()))
                    {
                        enterCost = ProjParameters::find().WPPProjWIPItemPostingOnProj;
                    }
                }
            }
        }

        ret.parmEnterCost(enterCost);
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>