<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAssetProposalDepreciationDisposableContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRAssetProposalDepreciationDisposableContext implements System.IDisposable
{
    private static DNRAssetProposalDepreciationDisposableContext instance;

    private Map assetIdToAssetTableMethodMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error("Nesting of DNRAssetProposalDepreciationDisposableContext is not supported.");
        }

        assetIdToAssetTableMethodMap = new Map(Types::String, Types::Class);

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAssetTableMethodToMap</Name>
				<Source><![CDATA[
    public void addAssetTableMethodToMap(AssetId _key, AssetTableMethod _value)
    {
        assetIdToAssetTableMethodMap.insert(_key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    public static DNRAssetProposalDepreciationDisposableContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    public static DNRAssetProposalDepreciationDisposableContext findOrCreate()
    {
        if (!DNRAssetProposalDepreciationDisposableContext::current())
        {
            new DNRAssetProposalDepreciationDisposableContext();
        }

        return DNRAssetProposalDepreciationDisposableContext::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingPeriodsForAsset</Name>
				<Source><![CDATA[
    public AssetDepreciationTime getRemainingPeriodsForAsset(AssetId _assetId)
    {
        if (assetIdToAssetTableMethodMap.exists(_assetId))
        {
            AssetTableMethod assetTableMethod = assetIdToAssetTableMethodMap.lookup(_assetId);
            return assetTableMethod.parmRemaningPeriods();
        }
        
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>