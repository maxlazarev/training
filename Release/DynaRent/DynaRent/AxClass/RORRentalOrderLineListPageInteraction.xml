<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalOrderLineListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORRentalOrderLineListPageInteraction extends SysListPageInteractionBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentRentalOrderLineView</Name>
				<Source><![CDATA[
    private RORRentalOrderLineView currentRentalOrderLineView()
    {
        return this.listPage().activeRecord(queryDataSourceStr(RORRentalOrderLineListPage, RORRentalOrderLineView)) as RORRentalOrderLineView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        super(_query);

        Common callerRecord = this.listPage().listPageArgs().externalRecord();

        if (!callerRecord)
        {
            TransDateTime onRentStartDateTime = this.getOnRentStartDateTime();
            TransDateTime onRentEndDateTime = this.getOnRentEndDateTime();

            TransDateTime onRentStartDateTimeNoOffset = DateTimeUtil::removeTimeZoneOffset(onRentStartDateTime, DateTimeUtil::getUserPreferredTimeZone());
            TransDateTime onRentEndDateTimeNoOffset = DateTimeUtil::removeTimeZoneOffset(onRentEndDateTime, DateTimeUtil::getUserPreferredTimeZone());
        
            QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(RORRentalOrderLineView));
            QueryBuildRange onRentDateTimeRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(RORRentalOrderLineView, OnRentDateTime));
            onRentDateTimeRange.value(SysQuery::range(onRentStartDateTimeNoOffset, onRentEndDateTimeNoOffset));

            this.updateDateTimeControl(formControlStr(RORRentalOrderLineListPage, OnRentStartDateTime), onRentStartDateTime);
            this.updateDateTimeControl(formControlStr(RORRentalOrderLineListPage, OnRentEndDateTime), onRentEndDateTime);
        }

        this.linkActive(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnRentStartDateTime</Name>
				<Source><![CDATA[
    protected TransDateTime getOnRentStartDateTime()
    {
        return DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - 90, 0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnRentEndDateTime</Name>
				<Source><![CDATA[
    protected TransDateTime getOnRentEndDateTime()
    {
        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDateTimeControl</Name>
				<Source><![CDATA[
    private void updateDateTimeControl(IdentifierName _control, TransDateTime _dateTimeValue)
    {
        FormDateTimeControl dateTimeControl = this.listPage().formRun().design().controlName(_control);

        if (dateTimeControl)
        {
            dateTimeControl.dateTimeValue(_dateTimeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActive</Name>
				<Source><![CDATA[
    protected void linkActive(Query _query)
    {
        Common callerRecord = this.listPage().listPageArgs().externalRecord();
        BOBObjectView objectView;
        BOBObjectViewV2 objectViewV2;

        if (callerRecord)
        {
            switch (callerRecord.TableId)
            {
                case tableNum(BOBObjectView):
                    objectView = callerRecord;

                    break;

                case tableNum(BOBObjectViewV2):
                    objectViewV2 = callerRecord;

                    break;

                case tableNum(BOBObjectTable):
                    BOBObjectTable objectTableCaller = callerRecord;

                    if (isConfigurationkeyEnabled(configurationKeyNum(DNRBusinessObjectViewV2)))
                    {
                        select firstonly objectViewV2
                        where objectViewV2.ObjectId == objectTableCaller.ObjectId;
                    }
                    else
                    {
                        select firstonly objectView
                        where objectView.ObjectId == objectTableCaller.ObjectId;
                    }

                    break;

                default:
                    break;
            }
        }

        if (objectView)
        {
            _query.dataSourceTable(tableNum(RORRentalOrderLineView)).clearDynalinks();

            // Bulk - fall back to rental type
            if (!objectView.InventSerialId)
            {
                _query.dataSourceTable(tableNum(RORRentalOrderLineView)).addDynalink(fieldNum(RORRentalOrderLineView, BOBRentalTypeIdRequested), objectView, fieldNum(BOBObjectView, RentalTypeId));
            }
            else 
            {
                _query.dataSourceTable(tableNum(RORRentalOrderLineView)).addDynalink(fieldNum(RORRentalOrderLineView, InventSerialId), objectView, fieldNum(BOBObjectView, InventSerialId));
            }
        }
        else if (objectViewV2)
        {
            _query.dataSourceTable(tableNum(RORRentalOrderLineView)).clearDynalinks();

            // Bulk - fall back to rental type
            if (!objectViewV2.InventSerialId)
            {
                _query.dataSourceTable(tableNum(RORRentalOrderLineView)).addDynalink(fieldNum(RORRentalOrderLineView, BOBRentalTypeIdRequested), objectViewV2, fieldNum(BOBObjectViewV2, RentalTypeId));
            }
            else
            {
                _query.dataSourceTable(tableNum(RORRentalOrderLineView)).addDynalink(fieldNum(RORRentalOrderLineView, InventSerialId), objectViewV2, fieldNum(BOBObjectViewV2, InventSerialId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged()
    {
        ListPage                listPage;
        RORRentalOrderLineView  currentRecord;
        ;
    
        super();
    
        listPage = this.listPage();
        currentRecord = this.currentRentalOrderLineView();
    
        listPage.actionPaneControlEnabled(formControlStr(RORRentalOrderLineListPage, BOBObjectTable), currentRecord.inventSerialId != ''
            || (currentRecord.ItemId && currentRecord.BOBRentalTypeIdRequested && InventTable::find(currentRecord.ItemId).BOBIsBulkRentalItem()));
        listPage.actionPaneControlEnabled(formControlStr(RORRentalOrderLineListPage, RORPurchTable), currentRecord.TradeType == RORTradeType::SubRental);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when you must disable or enable a button in the action pane. The
    /// method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    protected void setButtonEnabled()
    {
        this.setButtonReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonReferences</Name>
				<Source><![CDATA[
    private void setButtonReferences()
    {
        RORRentalOrderLineView rentalOrderLineView = this.currentRentalOrderLineView();
        this.listPage().actionPaneControlEnabled(formControlStr(RORRentalOrderLineListPage, BOBMaintenanceHistory), rentalOrderLineView.inventSerialId != ''
            || (rentalOrderLineView.ItemId && rentalOrderLineView.BOBRentalTypeIdRequested && InventTable::find(rentalOrderLineView.ItemId).BOBIsBulkRentalItem()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>