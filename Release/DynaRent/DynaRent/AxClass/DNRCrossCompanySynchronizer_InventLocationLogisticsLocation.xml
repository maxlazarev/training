<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCrossCompanySynchronizer_InventLocationLogisticsLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRCrossCompanySynchronizer_InventLocationLogisticsLocation extends DNRCrossCompanySynchronizer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldIds2Identify</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Identify()
    {
        Set fieldIdsSet = new Set(Types::Integer);
        
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, InventLocation));
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, Location));

        return fieldIdsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIds2Sync</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Sync()
    {
        Set fieldIdsSet = new Set(Types::Integer);

        //Standard Fields
        //Any changes here shall also be reflected in Class DNROMNewLegalEntityViewModelClass_Extension
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, AttentionToAddressLine));
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, IsDefault));
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, IsPostalAddress));
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, IsPrimary));
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, IsPrivate));
        fieldIdsSet.add(fieldNum(InventLocationLogisticsLocation, Location));

        return fieldIdsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventInserted</Name>
				<Source><![CDATA[
    protected void eventInserted()
    {
        DataAreaId                          dataAreaId;
        InventLocationId                    origLocationId;
        InventLocationLogisticsLocation     newRecord;
        InventLocationLogisticsLocation     logisticsLocation = callerRecord;
        SetEnumerator                       enumerator = dataAreaIds2Sync.getEnumerator();
        changecompany(transDataAreaId)
        {
            InventLocation  inventLocation;
            
            select inventLocation
            where inventLocation.RecId == logisticsLocation.InventLocation;

            origLocationId = inventLocation.InventLocationId;
        }

        while(enumerator.moveNext())
        {
            dataAreaId = enumerator.current();
            changecompany(dataAreaId)
            {
                newRecord.clear();
                newRecord.InventLocation = InventLocation::find(origLocationId).RecId;
                
                this.copyData(newRecord);
                
                if(newRecord.InventLocation && this.validateWrite(newRecord))
                {
                    newRecord.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>