<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuantity_RORSubStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::RORSubStatus)]
class SalesQuantity_RORSubStatus extends SalesQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(Common                    _salesLine,
                                      SalesUpdate               _specQty         = SalesUpdate::All,
                                      InventQty                 _qty             = naReal(),
                                      boolean                   _creditRemaining = false,
                                      boolean                   _calcRemaining   = true,
                                      PackingSlipIdForUpdate_W  _packingSlips    = "")
    {
        SalesLine   salesLine;
        InventQty   qtyAvailable;
        InventQty   qtyUpdate;
        InventQty   numOfRemainOrig;
        InventQty   qtyRemainNew;
    
        salesLine    = _salesLine as SalesLine;
        qtyAvailable = this.RORgetSubStatusFromToQty(salesLine, _qty, salesLine.inventTable().inventUnitId());
    
        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = salesLine.inventDeliverNow;
                    break;
    
                default:
                    qtyUpdate = qtyAvailable;
            }
        }
    
        if (qtyAvailable != naReal()
        &&  qtyUpdate     > qtyAvailable)
        {
            qtyUpdate = qtyAvailable;
        }
    
        if (_calcRemaining)
        {
            numOfRemainOrig = qtyAvailable;
            qtyRemainNew    = qtyAvailable - qtyUpdate;
        }
    
        qtyUpdate       = qtyUpdate       == naReal() ? 0 : qtyUpdate;
        numOfRemainOrig = numOfRemainOrig == naReal() ? 0 : numOfRemainOrig;
        qtyRemainNew    = qtyRemainNew    == naReal() ? 0 : qtyRemainNew;
    
        return [qtyUpdate, numOfRemainOrig, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    protected container calcQtySales(Common                     _salesLine,
                                     SalesUpdate                _specQty         = SalesUpdate::All,
                                     SalesQty                   _qty             = naReal(),
                                     boolean                    _creditRemaining = false,
                                     boolean                    _calcRemaining   = true,
                                     PackingSlipIdForUpdate_W   _packingSlips    = "")
    {
        SalesLine   salesLine;
        SalesQty    qtyAvailable;
        SalesQty    qtyUpdate;
        SalesQty    numOfRemainOrig;
        SalesQty    qtyRemainNew;
    
        salesLine    = _salesLine as SalesLine;
        qtyAvailable = this.RORgetSubStatusFromToQty(salesLine, _qty, salesLine.SalesUnit);
    
        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow  :
                    qtyUpdate = salesLine.salesDeliverNow;
                    break;
    
                default :
                    qtyUpdate = salesLine.SalesQty;
                    break;
            }
        }
    
        if (qtyAvailable != naReal()
        &&  qtyUpdate     > qtyAvailable)
        {
            qtyUpdate = qtyAvailable;
        }
    
        if (_calcRemaining)
        {
            numOfRemainOrig = qtyAvailable;
            qtyRemainNew    = qtyAvailable - qtyUpdate;
        }
    
        qtyUpdate       = qtyUpdate       == naReal() ? 0 : qtyUpdate;
        numOfRemainOrig = numOfRemainOrig == naReal() ? 0 : numOfRemainOrig;
        qtyRemainNew    = qtyRemainNew    == naReal() ? 0 : qtyRemainNew;
    
        return [qtyUpdate, numOfRemainOrig, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    protected container pdsCWCalcQtyInvent(
        Common         _common,
        SalesUpdate    _specQty             = SalesUpdate::All,
        PdsCWInventQty _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        return [0];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>