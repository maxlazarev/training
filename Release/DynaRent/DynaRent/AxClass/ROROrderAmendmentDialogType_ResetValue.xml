<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ROROrderAmendmentDialogType_ResetValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ROROrderAmendmentDialogType_ResetValue extends ROROrderAmendmentDialogType
{
    INVTmpPeriodManagerUpdateParm   tmpPeriodManagerUpdateParm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChangesMap</Name>
				<Source><![CDATA[
    protected Map getChangesMap(RORRentalLine _rentalLine, INVPeriodStartDateTime _startDateTime, INVPeriodEndDateTime _endDateTime)
    {
        Map changesMap = new Map(Types::Container, Types::Container);

        if (tmpPeriodManagerUpdateParm.CalendarIdFlag)
        {
            changesMap.insert([_startDateTime, _endDateTime, 'CalendarId'], [_rentalLine.CalendarId]);
        }

        if (tmpPeriodManagerUpdateParm.LinePercentFlag)
        {
            changesMap.insert([_startDateTime, _endDateTime, 'LinePercent'], [_rentalLine.LinePercent]);
        }

        if (tmpPeriodManagerUpdateParm.RentalModeIdFlag)
        {
            changesMap.insert([_startDateTime, _endDateTime, 'RentalModeId'], [_rentalLine.INVRentalModeId]);
        }

        if (tmpPeriodManagerUpdateParm.RentPriceFlag)
        {
            changesMap.insert([_startDateTime, _endDateTime, 'RentalPrice'], [_rentalLine.Price]);
        }

        return changesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeToChildLines_PurchLine</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method")]
    private void cascadeToChildLines_PurchLine(
        PurchLine    _purchLine,
        INVPeriodStartDateTime  _startDateTime,
        INVPeriodEndDateTime    _endDateTime)
    {
        PurchLine               purchLineChild;
            
        while select forupdate purchLineChild
        where       purchLineChild.PurchId            == _purchLine.PurchId
        &&          purchLineChild.RORParentLineRecId == _purchLine.RecId
        &&          purchLineChild.RORTradeType       == _purchLine.RORTradeType
        {           
            Map changesMap = this.getChangesMap(purchLineChild, _startDateTime, _endDateTime);
            INVInvoicePeriodHost invoicePeriodHost = purchLineChild;
            ROROrderAmendmentDialogType::runFinancialChanges(invoicePeriodHost, changesMap);
    
            // update also sub-kits.
            this.cascadeToChildLines_PurchLine(purchLineChild, _startDateTime, _endDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeToChildLines_SalesLine</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method")]
    private void cascadeToChildLines_SalesLine(
        SalesLine               _salesLine,
        INVPeriodStartDateTime  _startDateTime,
        INVPeriodEndDateTime    _endDateTime)
    {
        SalesLine               salesLineChild;
           
        while select forupdate salesLineChild
        where       salesLineChild.salesId            == _salesLine.salesId
        &&          salesLineChild.RORParentLineRecId == _salesLine.RecId
        &&          salesLineChild.RORTradeType       == _salesLine.RORTradeType
        {          
            Map changesMap = this.getChangesMap(salesLineChild, _startDateTime, _endDateTime);
            INVInvoicePeriodHost invoicePeriodHost = salesLineChild;
            ROROrderAmendmentDialogType::runFinancialChanges(invoicePeriodHost, changesMap);
    
            // update also sub-kits.
            this.cascadeToChildLines_salesLine(salesLineChild, _startDateTime, _endDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText</Name>
				<Source><![CDATA[
    public InfologText getWarningText()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    
        rentalStopOneDayActive = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonType</Name>
				<Source><![CDATA[
    public DNRReasonType reasonType()
    {
        return DNRReasonType::ResetValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PurchLine               purchLine;
        SalesLine               salesLine;
        RORRentalDateTimes      rentalDateTimesLocal;
        CalendarId              calendarId;
        TimeZone                userTimeZone;
        INVPeriodStartDateTime  startDateTime;
        INVPeriodEndDateTime    endDateTime;
    
        userTimeZone = DateTimeUtil::getUserPreferredTimeZone();
    
        this.setTmpPeriodManagerUpdateParm();
    
        if (rentalStopOneDayActive)
        {
            // When the rental stop starts on the on rent date or
            // stops at the off rent date then take the time off the on rent/off rent time
            rentalDateTimesLocal = this.findRentalDateTimes();
    
            startDateTime  = DateTimeUtil::applyTimeZoneOffset(rentalDateTimesLocal.OnRentDateTime , DateTimeUtil::getOriginatingTimeZone(rentalDateTimesLocal.OnRentDateTime ));
            endDateTime    = DateTimeUtil::applyTimeZoneOffset(rentalDateTimesLocal.OffRentDateTime, DateTimeUtil::getOriginatingTimeZone(rentalDateTimesLocal.OffRentDateTime));
    
            if (tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(startDateTime))
            {
                startDateTime = rentalDateTimesLocal.OnRentDateTime;
            }
            else
            {
                startDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(tmpOrderAmendmentDialogTable.RentalStopDate, 0), userTimeZone);
            }
    
            if (tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(endDateTime))
            {
                endDateTime = rentalDateTimesLocal.OffRentDateTime;
            }
            else
            {
                endDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(tmpOrderAmendmentDialogTable.RentalStopDate + 1, 0), userTimeZone);
            }
    
            tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom = tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(startDateTime) ? startDateTime : DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(startDateTime, userTimeZone), userTimeZone);
            tmpOrderAmendmentDialogTable.EffectiveDateTimeTo   = tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(endDateTime) ? endDateTime : DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(endDateTime, userTimeZone), userTimeZone);
        }
        else
        {
            startDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom, userTimeZone), userTimeZone);
            endDateTime   = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(tmpOrderAmendmentDialogTable.EffectiveDateTimeTo  , userTimeZone), userTimeZone);
        }
    
        ttsBegin;

        INVInvoicePeriodHost invoicePeriodHost;

        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
                
                Map changesMapPurch = this.getChangesMap(purchLine, startDateTime, endDateTime);
                invoicePeriodHost = purchLine;
                ROROrderAmendmentDialogType::runFinancialChanges(invoicePeriodHost, changesMapPurch);

                if (tmpOrderAmendmentDialogTable.IncludeChildren)
                {
                    this.cascadeToChildLines_PurchLine(purchLine, startDateTime, endDateTime);
                }
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                
                Map changesMapSales = this.getChangesMap(salesLine, startDateTime, endDateTime);
                invoicePeriodHost = salesLine;
                ROROrderAmendmentDialogType::runFinancialChanges(invoicePeriodHost, changesMapSales);

                if (tmpOrderAmendmentDialogTable.IncludeChildren)
                {
                    this.cascadeToChildLines_SalesLine(salesLine, startDateTime, endDateTime);
                }
                break;
        }
    
        super();
        ttsCommit;
    
        if (confirmOrder)
        {
            this.confirmOrder();
        }
        else
        {
            this.WPPSynchronizeWorkOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpPeriodManagerUpdateParm</Name>
				<Source><![CDATA[
    private void setTmpPeriodManagerUpdateParm()
    {
        tmpPeriodManagerUpdateParm.CalendarIdFlag   = tmpOrderAmendmentDialogTable.ResetCalendarId;
        tmpPeriodManagerUpdateParm.LineDiscFlag     = tmpOrderAmendmentDialogTable.ResetLineDisc;
        tmpPeriodManagerUpdateParm.LinePercentFlag  = tmpOrderAmendmentDialogTable.ResetLinePercent;
        tmpPeriodManagerUpdateParm.RentalModeIdFlag = tmpOrderAmendmentDialogTable.ResetRentalModeId;
        tmpPeriodManagerUpdateParm.RentPriceFlag    = tmpOrderAmendmentDialogTable.ResetRentPrice;
    
        tmpPeriodManagerUpdateParm.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>