<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPCellBackgroundColorGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPCellBackgroundColorGenerator
{
    WPPLayoutManager    layoutManager;
    Set                 colorSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    private WPPCellBackgroundColor generateData(WPPWorkOrderTaskId _taskId, WPPWorkOrderLineStatus _workOrderLineStatus = WPPWorkOrderLineStatus::Created)
    {
        WPPCellBackgroundColor cellBackGroundColor;
    
        cellBackGroundColor.Color             = this.getNewColor();
        cellBackGroundColor.LayoutManagerCode = layoutManager.Code;
        cellBackGroundColor.TaskId            = _taskId;
        cellBackGroundColor.Status            = _workOrderLineStatus;
    
        colorSet.add(cellBackGroundColor.Color);
    
        return cellBackGroundColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewColor</Name>
				<Source><![CDATA[
    private int getNewColor()
    {
        int colorBlack = WinAPI::RGB2int(0, 0, 0);
        int colorWhite = WinAPI::RGB2int(255, 255, 255);
    
        RandomGenerate randomGenerate = RandomGenerate::construct();
    
        int color = randomGenerate.randomInt(colorBlack, colorWhite);
    
        // Check whether a color is already used
        // if so, then generate a new color
        while (colorSet.in(color))
        {
            color = randomGenerate.randomInt(colorBlack, colorWhite);
        }
    
        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLayoutManager</Name>
				<Source><![CDATA[
    public WPPLayoutManager parmLayoutManager(WPPLayoutManager _layoutManager = layoutManager)
    {
        layoutManager = _layoutManager;
    
        return layoutManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveUsedColors</Name>
				<Source><![CDATA[
    private Set retrieveUsedColors()
    {
        WPPCellBackgroundColor cellBackGroundColor;
    
        colorSet = new set(Types::Integer);
    
        // Retrieve all the used colors for the current code
        while select Color from cellBackGroundColor
        where cellBackGroundColor.LayoutManagerCode == layoutManager.Code
        {
            colorSet.add(cellBackGroundColor.Color);
        }
    
        return colorSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        WPPCellBackgroundColor  cellBackGroundColor;
        WPPWorkOrderTaskTable   workOrderTaskTable;
        WPPWorkOrderLineStatus  workOrderLineStatus;
        Counter                 statusCounter;
    
        RecordInsertList cellBackGroundColorInsertList = new RecordInsertList(tableNum(WPPCellBackgroundColor));
    
        this.retrieveUsedColors();
    
        if (layoutManager.NormalAbsence == WPPNormalAbsence::Normal)
        {
            DictEnum dictEnum = new DictEnum(enumNum(WPPWorkOrderLineStatus));
    
            // Loop through all the statuses and create the ones that are missing
            for (statusCounter = 0; statusCounter <= dictEnum.values(); statusCounter++)
            {
                workOrderLineStatus = dictEnum.index2Value(statusCounter);
    
                if (!WPPCellBackgroundColor::existLayoutManagerCodeStatus(layoutManager.Code, workOrderLineStatus))
                {
                    cellBackGroundColor = this.generateData('', workOrderLineStatus);
                    cellBackGroundColorInsertList.add(cellBackGroundColor);
                }
            }
        }
        else
        {
            // Check which tasks not exist and create the ones that are missing
            while select TaskId from workOrderTaskTable
                notExists join cellBackGroundColor
                where cellBackGroundColor.TaskId == workOrderTaskTable.TaskId
                &&    cellBackGroundColor.LayoutManagerCode == layoutManager.Code
            {
                cellBackGroundColor = this.generateData(workOrderTaskTable.TaskId);
                cellBackGroundColorInsertList.add(cellBackGroundColor);
            }
        }
    
        cellBackGroundColorInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPCellBackgroundColorGenerator construct()
    {
        return new WPPCellBackgroundColorGenerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.dataset() != tableNum(WPPLayoutManager))
        {
            throw error(Error::missingRecord(tableId2pname(tableNum(WPPLayoutManager))));
        }
    
        WPPLayoutManager layoutManager = _args.record();
    
        WPPCellBackgroundColorGenerator cellBackgroundColorGenerator = WPPCellBackgroundColorGenerator::construct();
        cellBackgroundColorGenerator.parmLayoutManager(layoutManager);
        cellBackgroundColorGenerator.run();
    
        if (FormDataUtil::getFormDataSource(layoutManager))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(layoutManager);
            formDataSource.research(true);
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>