<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCustCustomerV3Entity_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(dataentityviewstr(CustCustomerV3Entity))]
public final class DNRCustCustomerV3Entity_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(CustCustomerV3Entity, CustTable))
        {
            CustTable custTableLoc              = _dataSourceCtx.getBuffer();
            //The DNRCustRequisition field is causing errors in entity when used from LogicApps, to fix that 4 separate un-bound enum fields are exposed in entity instead of the DNRCustRequistion field itself
            custTableLoc.DNRCustRequisition[1]  = this.DNRCustRequisition_Sales;
            custTableLoc.DNRCustRequisition[2]  = this.DNRCustRequisition_Rental;
            custTableLoc.DNRCustRequisition[3]  = this.DNRCustRequisition_WorkOrder;
            custTableLoc.DNRCustRequisition[4]  = this.DNRCustRequisition_Project;

            _dataSourceCtx.setBuffer(custTableLoc);
        }

        next mapEntityToDataSource(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    //Below code is commented due to lower version of support branch. Below code is to fix Customer V3 entity import bug from Microsoft code where
    //it keeps complaining about missing MCRCustTableBuffer. To be checked further if that is not setup controlled. Commented for now
    /*
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret = next insertEntityDataSource(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(CustCustomerV3Entity, CustTable))
        {
            //This code is to fix a bug with Microsoft code where this entity always throws error on insert/update 
            //that the MCRCustTable buffer not found.
            MCRCustTable mcrCustTable = MCRCustTable::findByCustAccount(this.CustomerAccount);

            if (!mcrCustTable)
            {
                mcrCustTable.clear();
                mcrCustTable.initValue();

                mcrCustTable.CustTable = _dataSourceCtx.getBuffer().RecId;
                mcrCustTable.doInsert();
            }
            
            DataEntityDataSourceRuntimeContext runTimeContextMCRCustTable = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustCustomerV3Entity, MCRCustTable));
            runTimeContextMCRCustTable.setBuffer(mcrCustTable);
            runTimeContextMCRCustTable.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }

        return ret;
    }

    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(CustCustomerV3Entity, CustTable))
        {
            //This code is to fix a bug with Microsoft code where this entity always throws error on insert/update
            //that the MCRCustTable buffer not found.
            MCRCustTable mcrCustTable = MCRCustTable::findByCustAccount(this.CustomerAccount);

            if (!mcrCustTable)
            {
                mcrCustTable.clear();
                mcrCustTable.initValue();

                mcrCustTable.CustTable = _dataSourceCtx.getBuffer().RecId;
                mcrCustTable.doInsert();
            }
            
            DataEntityDataSourceRuntimeContext runTimeContextMCRCustTable = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustCustomerV3Entity, MCRCustTable));
            runTimeContextMCRCustTable.setBuffer(mcrCustTable);
            runTimeContextMCRCustTable.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }

        boolean ret = next updateEntityDataSource(_entityCtx, _dataSourceCtx);

        return ret;
    }
    */

    public void insert()
    {
        next insert();

        //Updating the ProspectGroupId field to the smmBusRelTable to RAGBusRelGroupId field.
        //This is being done after whole insert/update in order to avoid conflicts with standard customer record insertion.
        this.DNRUpdateBusRel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        next update();

        //Updating the ProspectGroupId field to the smmBusRelTable to RAGBusRelGroupId field.
        //This is being done after whole insert/update in order to avoid conflicts with standard customer record insertion.
        this.DNRUpdateBusRel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUpdateBusRel</Name>
				<Source><![CDATA[
    private void DNRUpdateBusRel()
    {
        if (this.DNRProspectGroupId)
        {
            CustTable           custTableLoc;
            smmBusRelTable      busRelTable;

            select firstonly TableId from custTableLoc
            where custTableLoc.AccountNum == this.CustomerAccount
                join busRelTable
                where busRelTable.Party == custTableLoc.Party;

            if (busRelTable && busRelTable.RAGBusRelGroupId != this.DNRProspectGroupId)
            {
                busRelTable.selectForUpdate(true);
                busRelTable.RAGBusRelGroupId = this.DNRProspectGroupId;
                busRelTable.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>