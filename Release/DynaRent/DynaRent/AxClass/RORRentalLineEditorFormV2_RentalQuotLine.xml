<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalLineEditorFormV2_RentalQuotLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORRentalLineEditorFormV2_RentalQuotLine extends RORRentalLineEditorFormV2
{
    SalesQuotationLine  salesQuotationLine;
    SalesQuotationTable salesQuotationTable;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSetTaxGroups</Name>
				<Source><![CDATA[
    protected void checkSetTaxGroups()
    {
        RORRentalEditorLine editorLine;
        ;

        if (salesQuotationTable.InclTax)
        {
            while select forUpdate editorLine
            where editorLine.ParmId == this.parmId()
            &&    editorLine.MainKitReference == salesQuotationLine.RecId
            &&    editorLine.RefTableId == tableNum(SalesQuotationLine)
            {
                editorLine.TaxGroup     =  salesQuotationLine.TaxGroup;
                editorLine.TaxItemGroup = (editorLine.TradeType == RORTradeType::SalesPurch ?
                                           InventTableModule::find(editorLine.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId :
                                           RORInventItemRentalSetup::findDefault(editorLine.ItemId).TaxItemGroup);
                editorLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    protected container createLine(RORRentalEditorLine  _rentalEditorLine,
                                   RORKitComponentType  _kitComponentType,
                                   RORRentalLine        _lineParent,
                                   LineNum              _lastLineNum)
    {
        SalesQuotationLine  salesQuotationLineComponent;
        SalesQuotationLine  parentSalesQuotationLine = _lineParent;
        ;
    
        ttsbegin;
        salesQuotationLineComponent.initValue();
        salesQuotationLineComponent.initFromSalesQuotationTable(salesQuotationTable);
        salesQuotationLineComponent.QuotationType               = salesQuotationLine.QuotationType;
    
        if (salesQuotationLine.QuotationType == QuotationType::RORProjRental)
        {
            salesQuotationLineComponent.ProjTransType           = salesQuotationLine.ProjTransType;
            salesQuotationLineComponent.RORProjTransType        = salesQuotationLine.RORProjTransType;
            salesQuotationLineComponent.ProjCategoryId          = salesQuotationLine.ProjCategoryId;
            salesQuotationLineComponent.LinePropertyId          = salesQuotationLine.LinePropertyId;
            salesQuotationLineComponent.TransDate               = salesQuotationLine.TransDate;
            salesQuotationLineComponent.ProjDescription         = salesQuotationLine.ProjDescription;
        }
    
        salesQuotationLineComponent.QuotationId                 = salesQuotationLine.QuotationId;
        salesQuotationLineComponent.RORTradeType                = salesQuotationLine.RORTradeType;
        salesQuotationLineComponent.RORModifiedRORTradeType();
        salesQuotationLineComponent.ItemId                      = _rentalEditorLine.ItemId;
        salesQuotationLineComponent.itemIdChanged();
    
        this.initInventDimIdOnComponent(salesQuotationLineComponent, _rentalEditorLine);

        salesQuotationLineComponent.ProjDescription = salesQuotationLineComponent.inventTable().defaultProductName();

        
        salesQuotationLineComponent.RORReturnInventLocationId   = parentSalesQuotationLine.RORReturnInventLocationId ?
            parentSalesQuotationLine.RORReturnInventLocationId : _rentalEditorLine.InventLocationId;
    
        salesQuotationLineComponent.RORParentLineRecId          = _lineParent.RecId;
    
        salesQuotationLineComponent.RORKitComponentType         = _rentalEditorLine.kitComponentType();
        salesQuotationLineComponent.RORAllowQtyEdit             = _rentalEditorLine.AllowQtyEdit;
    
        salesQuotationLineComponent.RORRentalLine::initPricingFromRentalLine(_rentalEditorLine);
        // can reset some pricing elements
        salesQuotationLineComponent.RORRentalLine::initFromParent(_lineParent);
    
        if(salesQuotationLineComponent.RORTradeType != RORTradeType::SalesPurch)
        {
            // Keep invoice profile and calendar the same as it was shown in RLE
            salesQuotationLineComponent.INVInvoiceProfileId  = _rentalEditorLine.INVInvoiceProfileId;
            salesQuotationLineComponent.DNRCalendarId        = _rentalEditorLine.DNRCalendarId;

            salesQuotationLineComponent.RORRentalPricesModified();
        }
    
        salesQuotationLineComponent.RORIsPriceFixed             = _rentalEditorLine.IsPriceFixed;
        salesQuotationLineComponent.RORIsPriceNet               = _rentalEditorLine.IsPriceNet;
    
        salesQuotationLineComponent.RORSuppItemTableRecid    = _rentalEditorLine.SuppItemTableRecid;
        // find a line number between _lastLineNum and the next line
        salesQuotationLineComponent.LineNum = salesQuotationLineComponent.RORRentalLine::getNextLineNum(_lastLineNum, lastContractItemLineNum);
        salesQuotationLineComponent.createLine(true, false, false, true, false, false);
    
        _rentalEditorLine.DNRWriteAdditionalNotes(salesQuotationLineComponent);
        ttscommit;
    
        return [ salesQuotationLineComponent.InventTransId, salesQuotationLineComponent.LineNum ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineById</Name>
				<Source><![CDATA[
    protected RORRentalLine findLineById(InventTransId _inventTransId)
    {
        return SalesQuotationLine::findInventTransId(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId getInventDimId()
    {
        InventDim   inventDim;
    
        if (salesQuotationTable.InventLocationId)
        {
            inventDim.InventLocationId = salesQuotationTable.InventLocationId;
        }
    
        if (salesQuotationTable.InventSiteId)
        {
            inventDim.InventSiteId = salesQuotationTable.InventSiteId;
        }
    
        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallerHeader</Name>
				<Source><![CDATA[
    public void initFromCallerHeader(RORRentalEditorLine _rentalEditorLine)
    {
        _rentalEditorLine.HeaderId              = salesQuotationTable.QuotationId;
        _rentalEditorLine.INVInvoiceProfileId   = salesQuotationTable.INVInvoiceProfileId;
        _rentalEditorLine.CustVendAccount       = salesQuotationTable.CustAccount;
    
        _rentalEditorLine.RORRentalLine::initFromHeaderBuffer(salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesQuotationLine _salesQuotationLine)
    {
        super(_salesQuotationLine);
    
        salesQuotationLine  = _salesQuotationLine;
        salesQuotationTable = _salesQuotationLine.salesQuotationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    protected LineNum updateLine(
        Common                  _common,
        RORKitComponentType     _kitComponentType,
        RORRentalEditorLine     _rentalEditorLine = null)
    {
        SalesQuotationLine salesQuotationLineUpdate = _common as SalesQuotationLine;
    
        if (salesQuotationLineUpdate)
        {
            salesQuotationLineUpdate.RORKitComponentType = _kitComponentType;
    
            if (_rentalEditorLine)
            {
                salesQuotationLineUpdate.RORRentalLine::updateFromRentalEditorLine(_rentalEditorLine);
                salesQuotationLineUpdate.salesQtyModified();
    
                _rentalEditorLine.DNRWriteAdditionalNotes(salesQuotationLineUpdate);
            }
    
            salesQuotationLineUpdate.update();
        }
    
        return salesQuotationLineUpdate.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCallerLine</Name>
				<Source><![CDATA[
    protected RORRentalLine selectCallerLine(SalesQuotationLineRefRecId _callerLineRecId)
    {
        SalesQuotationLine callerLine;

        select firstonly callerLine where callerLine.RecId == _callerLineRecId;
        return callerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSelectedLines</Name>
				<Source><![CDATA[
    protected void createSelectedLines()
    {
        RORRentalLine       lineParent;
        RORRentalEditorLine rentalEditorLine;
        ListEnumerator      listEnumerator = List::create(packedRentalEditorLineList).getEnumerator();
        Map                 mapCreatedLines = new Map(Types::Int64, Types::String); // RecId, LineKey
        Map                 mapRLELines = new Map(Types::Int64, Types::Real); // RecId, LineNum
        Num                 lineKey;
        RORKitComponentType kitComponentType;
        LineNum             lineNum;
        RORRentalLine       sourceLine;
        RORRentalDateTimes  rentalDateTimes;
        RAGParameters       ragParametersLocal = RAGParameters::find();
    
        this.checkAddedDeletedLines();
    
        RecordInsertList    recordInsertListRQL = new RecordInsertList(tableNum(SalesQuotationLine));
        DNRTmpIdList        tmpRORRentalDateTimesRecIdList;
        RecordInsertList    recordInsertListRORRentalDateTimes = new RecordInsertList(tableNum(DNRTmpIdList),false, false,false, false, false, tmpRORRentalDateTimesRecIdList);
        TableId             tableIdRLE = tableNum(RORRentalEditorLine);
        SalesQuotationLine  salesQuotationLineLoc, salesQuotationLineLocSelect, callerSalesQuotationLine;

        callerSalesQuotationLine = callerRentalLine;

        while (listEnumerator.moveNext())
        {
            rentalEditorLine = listEnumerator.current();

            if (rentalEditorLine.ItemId == ragParametersLocal.ItemIdInsurance
            || rentalEditorLine.ItemId == ragParametersLocal.ItemIdTransport
            || rentalEditorLine.ItemId == ragParametersLocal.ItemIdReturnTransport)
            {
                // Don't create Transport/Insurance lines
                continue;
            }
    
            kitComponentType = rentalEditorLine.KitComponentType;
            sourceLine = this.previouslyCreatedLine(rentalEditorLine);

            LineNum RLELineNum; 
    
            // existing line, so we may need to update
            if (sourceLine)
            {
                ttsBegin;
                sourceLine.selectForUpdate(true);
                RLELineNum = this.updateLine(sourceLine, kitComponentType, rentalEditorLine);
                ttsCommit;
    
                // include previously-created component in map using stored InventTrans from temp table population
                lineKey = rentalEditorLine.InventTransId;
            }
            // newly added line, so create new one
            else
            {
                RLELineNum = rentalEditorLine.LineNum + (callerSalesQuotationLine.LineNum - 1);

                LineNum parentRLERecordLineNum = mapRLELines.lookup(rentalEditorLine.ParentLineRecId);
                LineNum parentLineNum         = rentalEditorLine.RefRecId == callerRentalLine.RecId ? callerSalesQuotationLine.LineNum : parentRLERecordLineNum;
                
                salesQuotationLineLoc         = this.createLineBuffer(rentalEditorLine, kitComponentType, lineParent, parentLineNum); //TODO remove the lineParent parameter if not needed
                salesQuotationLineLoc.LineNum = RLELineNum; //It will help reducing the database call to one for line number assignment
                
                recordInsertListRQL.add(salesQuotationLineLoc);

                tmpRORRentalDateTimesRecIdList.clear();
                tmpRORRentalDateTimesRecIdList.RefRecId = rentalEditorLine.RecId;
                recordInsertListRORRentalDateTimes.add(tmpRORRentalDateTimesRecIdList);
            }
    
            mapCreatedLines.insert(rentalEditorLine.RecId, lineKey);
            mapRLELines.insert(rentalEditorLine.RecId, RLELineNum);//rentalEditorLine.LineNum);
        }

        recordInsertListRORRentalDateTimes.insertDatabase();
        recordInsertListRQL.insertDatabase();

        //Clear the RORRentalDateTimes records in single operation at the end
        delete_from rentalDateTimes
        exists join tmpRORRentalDateTimesRecIdList
        where tmpRORRentalDateTimesRecIdList.RefRecId == rentalDateTimes.RecId
        &&    rentalDateTimes.RefTableId              == tableIdRLE;

        //Clear the temp table
        delete_from tmpRORRentalDateTimesRecIdList;

        this.updateParentReference(callerSalesQuotationLine.QuotationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentReference</Name>
				<Source><![CDATA[
    private void updateParentReference(QuotationId _quotationId)
    {
        SalesQuotationLine salesQuoptationLineUpdate, salesQuotationLineParent;
        
        salesQuoptationLineUpdate.skipDataMethods(true);
        salesQuoptationLineUpdate.skipBusinessEvents(true);
        salesQuoptationLineUpdate.skipEvents(true);

        update_recordset salesQuoptationLineUpdate
        setting RORParentLineRecId = salesQuotationLineParent.RecId
        where salesQuoptationLineUpdate.QuotationId == _quotationId
        &&    salesQuoptationLineUpdate.RORParentLineNum
        &&    salesQuoptationLineUpdate.RORParentLineRecId == 0
              join RecId from salesQuotationLineParent
              where salesQuotationLineParent.QuotationId == _quotationId
              &&    salesQuotationLineParent.LineNum     == salesQuoptationLineUpdate.RORParentLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineBuffer</Name>
				<Source><![CDATA[
    protected Common createLineBuffer(RORRentalEditorLine  _rentalEditorLine,
                                      RORKitComponentType  _kitComponentType,
                                      RORRentalLine        _lineParent,
                                      LineNum              _parentLineNum) 
    {
        SalesQuotationLine  salesQuotationLineComponent;
        InventTable         inventTable;
        EcoResProduct       product;

        select firstonly inventTable
        where inventTable.ItemId == _rentalEditorLine.ItemId
            join DisplayProductNumber from product
            where product.RecId == inventTable.Product;

        salesQuotationLineComponent.initValue();
        salesQuotationLineComponent.initFromSalesQuotationTable(salesQuotationTable);
        salesQuotationLineComponent.QuotationType               = salesQuotationLine.QuotationType;
    
        if (salesQuotationLine.QuotationType == QuotationType::RORProjRental)
        {
            salesQuotationLineComponent.ProjTransType           = salesQuotationLine.ProjTransType;
            salesQuotationLineComponent.RORProjTransType        = salesQuotationLine.RORProjTransType;
            salesQuotationLineComponent.ProjCategoryId          = salesQuotationLine.ProjCategoryId;
            salesQuotationLineComponent.LinePropertyId          = salesQuotationLine.LinePropertyId;
            salesQuotationLineComponent.TransDate               = salesQuotationLine.TransDate;
            salesQuotationLineComponent.ProjDescription         = salesQuotationLine.ProjDescription;
        }
    
        salesQuotationLineComponent.QuotationId                 = salesQuotationLine.QuotationId;
        salesQuotationLineComponent.RORTradeType                = salesQuotationLine.RORTradeType;
        salesQuotationLineComponent.RORModifiedRORTradeType();
        salesQuotationLineComponent.ItemId                      = _rentalEditorLine.ItemId;
        salesQuotationLineComponent.initFromInventTable(inventTable);
        this.initInventDimIdOnComponent(salesQuotationLineComponent, _rentalEditorLine);

        salesQuotationLineComponent.ProjDescription             = product.DisplayProductNumber;
        salesQuotationLineComponent.RORReturnInventLocationId   = _rentalEditorLine.InventLocationId;
        salesQuotationLineComponent.RORParentLineNum            = _parentLineNum;
        salesQuotationLineComponent.RORKitComponentType         = _rentalEditorLine.kitComponentType();
        salesQuotationLineComponent.RORAllowQtyEdit             = _rentalEditorLine.AllowQtyEdit;
    
        salesQuotationLineComponent.RORRentalLine::initPricingFromRentalLine(_rentalEditorLine);
        salesQuotationLineComponent.INVSkipTierMultiplierCalcOnCreation = true;

        if (callerRentalLine.IsPriceFixed)
        {
            salesQuotationLineComponent.RORIsPriceNet  = NoYes::No;
            salesQuotationLineComponent.LinePercent    = 100.00;
            salesQuotationLineComponent.LineAmount     = salesQuotationLineComponent.calcLineAmountForced();
        }

        if (callerRentalLine.IsPriceNet)
        {
            salesQuotationLineComponent.RORIsPriceNet = _lineParent.IsPriceNet;
        }

        if (salesQuotationLineComponent.RORTradeType != RORTradeType::SalesPurch)
        {
            salesQuotationLineComponent.INVInvoiceProfileId    = callerRentalLine.INVInvoiceProfileId ? callerRentalLine.INVInvoiceProfileId : salesQuotationLineComponent.INVInvoiceProfileId;
            salesQuotationLineComponent.RORCalendarId             = (salesQuotationLineComponent.RORCalendarId && salesQuotationLineComponent.RORLineType == RORLineType::Insurance) ? salesQuotationLineComponent.RORCalendarId : callerRentalLine.CalendarId;
            salesQuotationLineComponent.RORPriceTimeUnit          = callerRentalLine.PriceTimeUnit ? callerRentalLine.PriceTimeUnit : salesQuotationLineComponent.RORPriceTimeUnit;
            salesQuotationLineComponent.INVRentalModeId        = callerRentalLine.INVRentalModeId ? callerRentalLine.INVRentalModeId : salesQuotationLineComponent.INVRentalModeId;
        }

        if(salesQuotationLineComponent.RORTradeType != RORTradeType::SalesPurch)
        {
            // Keep invoice profile and calendar the same as it was shown in RLE
            salesQuotationLineComponent.INVInvoiceProfileId  = _rentalEditorLine.INVInvoiceProfileId;
            salesQuotationLineComponent.DNRCalendarId        = _rentalEditorLine.DNRCalendarId;
            salesQuotationLineComponent.RORRentalPricesModified();
        }
    
        salesQuotationLineComponent.RORIsPriceFixed             = _rentalEditorLine.IsPriceFixed;
        salesQuotationLineComponent.RORIsPriceNet               = _rentalEditorLine.IsPriceNet;
        salesQuotationLineComponent.RORSuppItemTableRecid       = _rentalEditorLine.SuppItemTableRecid;

        salesQuotationLineComponent.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        
        return salesQuotationLineComponent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>