<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPSubTaskDefaultData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPSubTaskDefaultData
{
    Common                  callerRecord;
    WPPWorkOrderTaskTable   taskTable;
    InventTable             inventTable;
    BOBObjectTable          objectTable;
    WPPWorkOrderLine        workOrderLine;
    WPPSubTaskDefault       subTaskDefaultTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    public void createRecord(WPPSubTaskDefault _tmpRecordCreated)
    {
        WPPSubTaskDefault   subTaskDefaultDb;
        WPPSubTaskDefault   subTaskDefaultTmpFind;
        WPPSubTaskId        subTaskId;
    
        // BP Deviation documented - DynaRent
        subTaskDefaultTmpFind.setTmp();
        subTaskDefaultTmpFind.data(subTaskDefaultTmp);
    
        if (WPPSubTaskDefault::findTmpSubTaskId(subTaskDefaultTmp, _tmpRecordCreated.SubTaskId))
        {
            subTaskId = _tmpRecordCreated.SubTaskId;
    
            _tmpRecordCreated.delete();
            FormDataUtil::getFormDataSource(_tmpRecordCreated).research();
    
            throw error(strFmt("@DNR7289", fieldId2pname(tableNum(WPPSubTaskDefault), fieldNum(WPPSubTaskDefault, SubTaskId)), subTaskId));
        }
        else
        {
            // add the inserted temporary record to the database as well
            subTaskDefaultDb.data(_tmpRecordCreated);
            subTaskDefaultDb.RefTableId     = callerRecord.TableId;
            subTaskDefaultDb.RefRecId       = callerRecord.RecId;
            subTaskDefaultDb.OverwriteRecId = 0;
            subTaskDefaultDb.RecIdDb        = 0;
            subTaskDefaultDb.insert();
    
            _tmpRecordCreated.RecIdDb = subTaskDefaultDb.RecId;
            _tmpRecordCreated.doUpdate();
            FormDataUtil::getFormDataSource(_tmpRecordCreated).reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecord</Name>
				<Source><![CDATA[
    public void deleteRecord(WPPSubTaskDefault _tmpRecordDeleted)
    {
        WPPSubTaskDefault subTaskDefaultDb;
    
        if (callerRecord is WPPWorkOrderTaskTable || callerRecord is InventTable)
        {
            // any record that overwrites the one being deleted must now become
            // a 'standalone', i.e. it mustn't overwrite anything anymore
            update_recordSet subTaskDefaultDb
            setting OverwriteRecId = 0
            where subTaskDefaultDb.OverwriteRecId == _tmpRecordDeleted.RecIdDb
            &&   !subTaskDefaultDb.IsDeleted;
    
            // any record that overwrites the one being deleted is used to effectively 'remove' the one being
            // deleted -- these are no longer necessary and can now be deleted
            delete_from subTaskDefaultDb
            where subTaskDefaultDb.OverwriteRecId == _tmpRecordDeleted.RecIdDb
            &&    subTaskDefaultDb.IsDeleted;
        }
    
        if (_tmpRecordDeleted.OverwriteRecId || callerRecord.TableId == _tmpRecordDeleted.RefTableId)
        {
            // delete the source record in the database
            delete_from subTaskDefaultDb
            where subTaskDefaultDb.RecId == _tmpRecordDeleted.RecIdDb;
        }
        else
        {
            // create a new record with "IsDeleted" checked to effectively
            // 'remove' the record being deleted
            subTaskDefaultDb.data(_tmpRecordDeleted);
            subTaskDefaultDb.IsDeleted      = NoYes::Yes;
            subTaskDefaultDb.RefTableId     = callerRecord.TableId;
            subTaskDefaultDb.RefRecId       = callerRecord.RecId;
            subTaskDefaultDb.OverwriteRecId = _tmpRecordDeleted.RecIdDb;
            subTaskDefaultDb.RecIdDb        = 0;
            subTaskDefaultDb.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyRecord</Name>
				<Source><![CDATA[
    public void modifyRecord(WPPSubTaskDefault _tmpRecordModified)
    {
        WPPSubTaskDefault   subTaskDefaultDb;
        boolean             mustInsert;
    
        // if(callerRecord is WPPWorkOrderTaskTable || _tmpRecordModified.OverwriteRecId)
        if (_tmpRecordModified.OverwriteRecId || callerRecord.TableId == _tmpRecordModified.RefTableId)
        {
            // in case we're dealing with a record that has a direct physical source
            // record in the database, we need to update that source
            update_recordSet subTaskDefaultDb
            setting GroupId        = _tmpRecordModified.GroupId,
                    SubTaskId      = _tmpRecordModified.SubTaskId,
                    TaskId         = _tmpRecordModified.TaskId,
                    SequenceNumber = _tmpRecordModified.SequenceNumber
            where subTaskDefaultDb.RecId == _tmpRecordModified.RecIdDb;
        }
        else
        if (callerRecord is InventTable || callerRecord is BOBObjectTable)
        {
            mustInsert = true;
    
            if (callerRecord.TableId != _tmpRecordModified.RefTableId)
            {
                // the user modified an inherited record -- see if we need to save anything to the db
                subTaskDefaultDb = WPPSubTaskDefault::find(_tmpRecordModified.RecIdDb);
    
                if (subTaskDefaultDb.GroupId   == _tmpRecordModified.GroupId
                &&  subTaskDefaultDb.SubTaskId == _tmpRecordModified.SubTaskId
                &&  subTaskDefaultDb.TaskId    == _tmpRecordModified.TaskId)
                {
                    mustInsert = false; // nothing was modified so we don't have to do anything
                }
            }
    
            if (mustInsert)
            {
                // create a new record that overwrites the source record
                subTaskDefaultDb.data(_tmpRecordModified);
                subTaskDefaultDb.RefTableId     = callerRecord.TableId;
                subTaskDefaultDb.RefRecId       = callerRecord.RecId;
                subTaskDefaultDb.RecIdDb        = 0;
                subTaskDefaultDb.OverwriteRecId = _tmpRecordModified.RecIdDb;
                subTaskDefaultDb.insert();
    
                _tmpRecordModified.RecIdDb = subTaskDefaultDb.RecId;
                _tmpRecordModified.update();
            }
        }
        else
        if (!(callerRecord is WPPWorkOrderTaskTable) && !_tmpRecordModified.OverwriteRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(Common _common)
    {
        callerRecord = _common;

        switch (callerRecord.TableId)
        {
            case tableNum(WPPWorkOrderTaskTable):
                taskTable = callerRecord as WPPWorkOrderTaskTable;

                break;

            case tableNum(InventTable):
                inventTable = callerRecord as InventTable;

                break;

            case tableNum(BOBObjectTable):
                objectTable = callerRecord as BOBObjectTable;
                inventTable = objectTable.inventTable();

                break;

            case tableNum(BOBObjectView):
                BOBObjectView objectView = callerRecord as BOBObjectView;

                objectTable     = BOBObjectTable::findObjectId(objectView.ObjectId);
                inventTable     = objectTable.inventTable();
                callerRecord    = objectTable;

                break;

            case tableNum(BOBObjectViewV2):
                BOBObjectViewV2 objectViewV2 = callerRecord as BOBObjectViewV2;

                objectTable     = BOBObjectTable::findObjectId(objectViewV2.ObjectId);
                inventTable     = objectTable.inventTable();
                callerRecord    = objectTable;

                break;

            case tableNum(WPPWorkOrderLine):
                workOrderLine   = callerRecord as WPPWorkOrderLine;
                taskTable       = workOrderLine.workOrderTaskTable();
                objectTable     = workOrderLine.workOrderTable().BOBObjectTable();

                if (objectTable)
                {
                    inventTable   = objectTable.inventTable();
                }

                break;

            default:
                throw error(strFmt("@DNR2491", tableId2name(callerRecord.TableId), classStr(WPPSubTaskDefaultData)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInsertMethodInLoop", "subTaskDefaultTmp.setTmp(); has been set as a Tmp table" )]
    public WPPSubTaskDefault populateTmpData(WPPWorkOrderTaskId _taskId = '')
    {
        WPPSubTaskDefault   subTaskDefaultDb;
        WPPSubTaskTable     subTaskTable;
    
        void localMethod(Common _refRecord)
        {
            while select subTaskDefaultDb
            order by subTaskTable.GroupId
            where subTaskDefaultDb.RefTableId == _refRecord.TableId
            &&    subTaskDefaultDb.RefRecId   == _refRecord.RecId
                join RecId, TableId from subTaskTable
                where subTaskTable.GroupId   == subTaskDefaultDb.GroupId
                &&    subTaskTable.SubTaskId == subTaskDefaultDb.SubTaskId
            {
                if (subTaskDefaultDb.OverwriteRecId && subTaskDefaultDb.IsDeleted)
                {
                    subTaskDefaultTmp = WPPSubTaskDefault::findTmpRecId(subTaskDefaultTmp, subTaskDefaultDb.OverwriteRecId, true);
                    subTaskDefaultTmp.delete();
                }
                else
                if (subTaskDefaultDb.OverwriteRecId)
                {
                    subTaskDefaultTmp = WPPSubTaskDefault::findTmpRecId(subTaskDefaultTmp, subTaskDefaultDb.OverwriteRecId, true);
                    subTaskDefaultTmp.initFromSubTaskDefault(subTaskDefaultDb);
                    subTaskDefaultTmp.update();
                }
                else
                {
                    subTaskDefaultTmp.clear();
                    subTaskDefaultTmp.initFromSubTaskDefault(subTaskDefaultDb);
                    subTaskDefaultTmp.insert();
                }
            }
        }
        ;
    
        // BP Deviation documented - DynaRent
        subTaskDefaultTmp.setTmp();
    
        ttsBegin;
        if (callerRecord is WPPWorkOrderTaskTable)
        {
            while select subTaskDefaultDb
            order by subTaskTable.GroupId
            where subTaskDefaultDb.RefTableId == taskTable.TableId
            &&    subTaskDefaultDb.RefRecId   == taskTable.RecId
                join TableId from subTaskTable
                where subTaskTable.GroupId   == subTaskDefaultDb.GroupId
                &&    subTaskTable.SubTaskId == subTaskDefaultDb.SubTaskId
            {
                subTaskDefaultTmp.clear();
                subTaskDefaultTmp.initFromSubTaskDefault(subTaskDefaultDb);
                subTaskDefaultTmp.insert();
            }
        }
        else
        {
            while select subTaskDefaultDb
            order by subTaskTable.GroupId
            where subTaskDefaultDb.RefTableId == tableNum(WPPWorkOrderTaskTable)
            &&   (!_taskId || subTaskDefaultDb.TaskId == _taskId)
                join TableId from subTaskTable
                where subTaskTable.GroupId   == subTaskDefaultDb.GroupId
                &&    subTaskTable.SubTaskId == subTaskDefaultDb.SubTaskId
            {
                subTaskDefaultTmp.clear();
                subTaskDefaultTmp.initFromSubTaskDefault(subTaskDefaultDb);
                subTaskDefaultTmp.insert();
            }
    
            if (inventTable)
            {
                localMethod(inventTable);
    
                if (objectTable)
                {
                    localMethod(objectTable);
                }
            }
        }
        ttsCommit;
    
        return subTaskDefaultTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPSubTaskDefaultData construct(Common _common)
    {
        return new WPPSubTaskDefaultData(_common);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>