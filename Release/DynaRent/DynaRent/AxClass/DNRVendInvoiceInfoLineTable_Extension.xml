<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRVendInvoiceInfoLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(VendInvoiceInfoLine))]
public final class DNRVendInvoiceInfoLineTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    void initFromPurchLine(PurchLine _purchLine)
    {
        next initFromPurchLine(_purchLine);

        this.FINIgnoreTaxMatrix       = _purchLine.FINIgnoreTaxMatrix;
        this.FINCountryStartTransport = _purchLine.FINCountryStartTransport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSetTaxGroup</Name>
				<Source><![CDATA[
    // extension methods

    public void FINSetTaxGroup()
    {
        if (!this.FINIgnoreTaxMatrix
        &&   TaxParameters::find().FINCheckTaxMatrix != FINCheckTaxMatrix::Disabled)
        {
            this.TaxGroup = FINTaxMatrix::findTaxGroup(this, this.TaxGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORTimeZoneSite</Name>
				<Source><![CDATA[
    public display Timezone RORTimeZoneSite()
    {
        return this.purchLine().RORTimeZoneSite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParentInvoiceInfoLine</Name>
				<Source><![CDATA[
    static VendInvoiceInfoLine RORParentInvoiceInfoLine(ParmId _parmId, PurchLine _purchLineParent)
    {
        VendInvoiceInfoLine invoiceInfoLineParent;
    
        if (_parmId && _purchLineParent)
        {
            select firstonly invoiceInfoLineParent
             where invoiceInfoLineParent.ParmId           == _parmId
                && invoiceInfoLineParent.OrigPurchId      == _purchLineParent.PurchId
                && invoiceInfoLineParent.itemId           == _purchLineParent.ItemId
                && invoiceInfoLineParent.LineNum          == _purchLineParent.LineNumber
                && invoiceInfoLineParent.InventTransId    == _purchLineParent.InventTransId
                && invoiceInfoLineParent.PurchLineRecId   == _purchLineParent.RecId
                //&& !invoiceInfoLineParent.RORInventTransIdParent
                && invoiceInfoLineParent.LineAmount       != 0;
        }
    
        return invoiceInfoLineParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnModifiedField</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(VendInvoiceInfoLine), DataEventType::ModifiedField)]
    public static void DNREvent_OnModifiedField(Common _sender, DataEventArgs _eventArgs)
    {
        ModifyFieldEventArgs eventArgs  = _eventArgs as ModifyFieldEventArgs;
        VendInvoiceInfoLine  hostRecord = _sender as VendInvoiceInfoLine;
        
        switch(eventArgs.parmFieldId())
        {
            case fieldNum(VendInvoiceInfoLine, TaxGroup) :
            case fieldNum(VendInvoiceInfoLine, FINCountryStartTransport):
            case fieldNum(VendInvoiceInfoLine, TaxItemGroup):
                if (!hostRecord.FINIgnoreTaxMatrix
                &&  TaxParameters::find().FINCheckTaxMatrix != FINCheckTaxMatrix::Disabled)
                {
                    hostRecord.FINSetTaxGroup();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(VendInvoiceInfoLine), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        VendInvoiceInfoLine hostRecord = _sender as VendInvoiceInfoLine;
        hostRecord.FINSetTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdating</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(VendInvoiceInfoLine), DataEventType::Updating)]
    public static void DNREvent_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        VendInvoiceInfoLine hostRecord = _sender as VendInvoiceInfoLine;
        
        VendInvoiceInfoLine orig = hostRecord.orig();

        if(hostRecord.TaxGroup != orig.TaxGroup
        || hostRecord.FINCountryStartTransport != orig.FINCountryStartTransport
        || hostRecord.TaxItemGroup != orig.TaxItemGroup)
        {
            hostRecord.FINSetTaxGroup();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>