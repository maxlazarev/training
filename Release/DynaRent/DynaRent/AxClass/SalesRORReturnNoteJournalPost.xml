<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesRORReturnNoteJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::RORReturnNote)]
class SalesRORReturnNoteJournalPost
extends FormletterJournalPost
{
    CustRORReturnNoteJour   returnNoteJour;
    CustRORReturnNoteTrans  returnNoteTrans;
    SalesLine               salesLine;
    SalesTable              salesTable;
    SalesParmTable          salesParmTable;
    SalesParmLine           salesParmLine;    
    boolean                 skipUpdateSalesLineStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _journalline)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        CustRORReturnNoteTrans  localReturnNoteTrans = _journalline as CustRORReturnNoteTrans;
        InventQty               qtyRemain             = localReturnNoteTrans.InventQty;
    
    
        if (salesLine.isStocked())
        {
            while select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId       == localReturnNoteTrans.InventTransId
            &&    inventTransOrigin.ReferenceCategory   == InventTransType::Sales
                join InventDimId, Qty from inventTrans
                where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                &&    ((inventTrans.PackingSlipId           == localReturnNoteTrans.ReturnNoteId && salesLine.SalesType != SalesType::ItemReq) ||
                      (inventTrans.InvoiceId                == localReturnNoteTrans.ReturnNoteId && salesLine.SalesType == SalesType::ItemReq))
                &&    inventTrans.DatePhysical              == localReturnNoteTrans.DeliveryDate
                &&    inventTrans.PackingSlipReturned       == NoYes::No
            {
                if (qtyRemain)
                {
                    qtyRemain = this.createInventReportDimHistory(localReturnNoteTrans.InventTransId,
                                                                  inventTrans.InventDimId,
                                                                  localReturnNoteTrans.ReturnNoteId,
                                                                  inventTrans.Qty, qtyRemain);
                }
                else
                    break;
            }
        }
        else
        {
            this.createInventReportDimHistory(localReturnNoteTrans.InventTransId,
                                              localReturnNoteTrans.InventDimId,
                                              localReturnNoteTrans.ReturnNoteId,
                                              localReturnNoteTrans.Qty,
                                              localReturnNoteTrans.Qty );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSourceLine</Name>
				<Source><![CDATA[
    protected void checkSourceLine()
    {
        super();
    
        if (salesParmLine.RemainBefore != salesLine.RORRemainSalesReturn)
        {
            throw error("@SYS23025");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus  documentStatus()
    {
        return DocumentStatus::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    protected void endPostLine()
    {
        BOBObjectManager::returnSalesLine(salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    protected void endUpdate()
    {
        super();
        this.interCompanyPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return returnNoteJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        super();
    
        salesLine = returnNoteTrans.salesLine(true);
        this.initRelatedParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedParmLine</Name>
				<Source><![CDATA[
    protected void initRelatedParmLine()
    {
        select firstonly salesParmLine
        where salesParmLine.ParmId          == returnNoteJour.ParmId
        &&    salesParmLine.TableRefId      == salesParmTable.TableRefId
        &&    salesParmLine.SalesLineRecId  == salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPost</Name>
				<Source><![CDATA[
    protected void interCompanyPost()
    {
        RecordSortedList                journalList;
        SalesRORReturnNoteJournalPrint  journalPrint;
    
        if (salesParmTable.RORAutomaticallyPostSubRental)
        {
            journalPrint = SalesRORReturnNoteJournalPrint::construct();
            journalList = journalPrint.newJournalList();
            journalList.ins(returnNoteJour);
            InterCompanyPostPurch::post(this.parmChainFormletterContract(), returnNoteJour, journalList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = returnNoteTrans)
    {
        returnNoteTrans = _journalLine as CustRORReturnNoteTrans;
        return returnNoteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected TableId journalLineTableId()
    {
        return tableNum(CustRORReturnNoteTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = returnNoteJour)
    {
        returnNoteJour = _journalTable as CustRORReturnNoteJour;
        return returnNoteJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    protected void postInventory()
    {
        InventMovement inventMovement;
        InventUpd_RORReturnNote inventUpdate;
        ;
    
        inventMovement = InventMovement::construct(salesLine, InventMovSubType::BOBCompensatingTrans);
    
        inventUpdate = InventUpd_RORReturnNote::construct(inventMovement, salesParmLine, BOBRentalSubStatus::Returned, -inventMovement.transSign());
        inventUpdate.BOBParmIsCompensatingTrans(true);
        inventUpdate.updateNow(ledgerVoucher);
    
        inventMovement = InventMovement::construct(salesLine);
    
        inventUpdate = InventUpd_RORReturnNote::construct(inventMovement, salesParmLine, BOBRentalSubStatus::Returned, -inventMovement.transSign());
        inventUpdate.BOBParmFormLetterUpdDateTime(salesParmTable.Transdate, salesParmTable.BOBTransTime);
        inventUpdate.updateNow(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    public SalesLine salesLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmLine</Name>
				<Source><![CDATA[
    public SalesParmLine salesParmLine()
    {
        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    protected Common sourceLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt transactionLogTxt()
    {
        return "@DNR6220";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType transactionLogType()
    {
        return TransactionLogType::RORRentalReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return returnNoteJour.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    protected void updateJournalLine()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalDates</Name>
				<Source><![CDATA[
    private void updateRentalDates(SalesLine _salesLine)
    {
        FieldId             fieldId;
        RORRentalDateTimes  rentalDateTimes;
            
        if (FINRentalInvoiceProfile::find(_salesLine.INVInvoiceProfileId).InvoiceStartEndBasis == INVInvoiceStartEndBasis::DeliveryReturn
        &&  !_salesLine.RORRemainSalesReturn && !_salesLine.RemainSalesPhysical)
        {
            rentalDateTimes = _salesLine.RORRentalDateTimes(true);
    
            if (rentalDateTimes)
            {
                fieldId = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd());
    
                if (DateTimeUtil::date(rentalDateTimes.(fieldId)) <= dateNull())
                {
                    rentalDateTimes.(fieldId) = DateTimeUtil::newDateTime(salesParmTable.TransDate, 
                                                                          salesParmTable.BOBTransTime, 
                                                                          DateTimeUtil::getUserPreferredTimeZone());
                    rentalDateTimes.update();
                    _salesLine.reread();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalSpecifications</Name>
				<Source><![CDATA[
    private void updateRentalSpecifications(SalesLine _salesLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected void updateSourceLine()
    {
        SalesLineType   salesLineType;
    
        // Remove to qty awaiting return and add to returned
        salesLine.RORRemainInventReturn     -= salesParmLine.DeliverNow;
        salesLine.RORRemainSalesReturn      -= salesParmLine.InventNow;
        salesLine.RORSalesReturned          += salesParmLine.DeliverNow;
        salesLine.RORInventReturned         += salesParmLine.InventNow;
    
        salesLineType = SalesLineType::construct(salesLine);
        salesLineType.DNRparmSkipUpdateSalesLineStatus(skipUpdateSalesLineStatus);
        salesLineType.updateSalesLine();
        salesLine.doUpdate();
    
        salesTable = salesLine.salesTable(true);
        salesTable.updateBackStatus();

        this.updateRentalSpecifications(salesLine);
        // Update qty on rental periods, using invoicing date/time from line
        this.updateRentalDates(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPMustDuplicateTask</Name>
				<Source><![CDATA[
    public void WPPMustDuplicateTask()
    {
        if (!this.WPPParmMustDuplicateWorkOrderLine()
        &&   salesParmTable.WPPDuplTaskOnPartialFormLetterPosting
        &&   chainFormletterContract.WPPParmMustDuplicateTask())
        {
            this.WPPParmMustDuplicateWorkOrderLine(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmSkipUpdateSalesLineStatus</Name>
				<Source><![CDATA[
    public boolean DNRparmSkipUpdateSalesLineStatus(boolean _skipUpdateSalesLineStatus = skipUpdateSalesLineStatus)
    {
        skipUpdateSalesLineStatus = _skipUpdateSalesLineStatus;
        return skipUpdateSalesLineStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesRORReturnNoteJournalPost construct()
    {
        return new SalesRORReturnNoteJournalPost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>