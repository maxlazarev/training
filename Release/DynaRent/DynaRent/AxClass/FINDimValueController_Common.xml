<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimValueController_Common</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimValueController_Common extends FINDimValueController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    protected Description getDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimensionFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemGroupId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findItemGroupId(ProjId _projId)
    {
        BOBObjectTable      objectTable;
        EcoResProduct       ecoResProduct;
        InventTable         inventTable;
        WPPWorkOrderLine    workOrderLine;
        WPPWorkOrderTable   workOrderTable;
        InventItemGroupItem itemGroupItem;
    
        if (_projId)
        {
            select firstOnly TableId from workOrderLine
            where workOrderLine.ProjId == _projId
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                    join TableId from objectTable
                    where objectTable.RecId == workOrderTable.BOBObjectTableRecId
                        join TableId from ecoResProduct
                        where ecoResProduct.DisplayProductNumber == ecoResProduct.BOBRentalTypeId
                        &&    ecoResProduct.BOBRentalTypeId == objectTable.RentalTypeId
                            join TableId from inventTable
                            where inventTable.Product == ecoResProduct.RecId
                                join ItemGroupId from itemGroupItem
                                where itemGroupItem.ItemDataAreaId == curExt2dataareaid(tableNum(InventTable))
                                &&    itemGroupItem.ItemId         == inventTable.ItemId;
        }
    
        return FINDimValueResult::constructValue(itemGroupItem.ItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findItemId(ProjId _projId)
    {
        InventTable         inventTable;
        EcoResProduct       ecoResProduct;
        BOBObjectTable      objectTable;
        WPPWorkOrderLine    workOrderLine;
        WPPWorkOrderTable   workOrderTable;
    
        if (_projId)
        {
            select firstOnly TableId from workOrderLine
            where workOrderLine.ProjId == _projId
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                    join TableId from objectTable
                    where objectTable.RecId == workOrderTable.BOBObjectTableRecId
                        join TableId from ecoResProduct
                        where ecoResProduct.DisplayProductNumber == ecoResProduct.BOBRentalTypeId
                        &&    ecoResProduct.BOBRentalTypeId == objectTable.RentalTypeId
                            join ItemId from inventTable
                            where inventTable.Product == ecoResProduct.RecId;
        }
    
        return FINDimValueResult::constructValue(inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjSubGroupId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findObjSubGroupId(ProjId _projId)
    {
        EcoResProduct           ecoResProduct;
        BOBObjectTable          objectTable;
        WPPWorkOrderLine        workOrderLine;
        WPPWorkOrderTable       workOrderTable;
        BOBRentalType           rentalType;
    
        if (_projId)
        {
            select firstOnly TableId from workOrderLine
            where workOrderLine.ProjId == _projId
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                    join TableId from objectTable
                    where objectTable.RecId == workOrderTable.BOBObjectTableRecId
                        join ObjectSubGroupId from rentalType
                        where rentalType.RentalTypeId == objectTable.RentalTypeId;
        }
    
        return FINDimValueResult::constructValue(rentalType.ObjectSubGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjGroupId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findObjGroupId(ProjId _projId)
    {
        EcoResProduct           ecoResProduct;
        BOBObjectTable          objectTable;
        WPPWorkOrderLine        workOrderLine;
        WPPWorkOrderTable       workOrderTable;
        BOBRentalType           rentalType;
    
        if (_projId)
        {
            select firstOnly TableId from workOrderLine
            where workOrderLine.ProjId == _projId
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                    join TableId from objectTable
                    where objectTable.RecId == workOrderTable.BOBObjectTableRecId
                        join ObjectGroupId from rentalType
                        where rentalType.RentalTypeId == objectTable.RentalTypeId;
        }
    
        return FINDimValueResult::constructValue(rentalType.ObjectGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesPurchId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findSalesPurchId(ProjId _projId)
    {
        WPPWorkOrderTable workOrderTable = WPPWorkOrderLine::findProjId(_projId).workOrderTable();
    
        switch (workOrderTable.OrderTableId)
        {
            case tableNum(PurchLine):
                return FINDimValueResult::constructValue(PurchLine::findRecId(workOrderTable.OrderRecId).PurchId);
    
            case tableNum(SalesLine):
                return FINDimValueResult::constructValue(SalesLine::findRecId(workOrderTable.OrderRecId).SalesId);
    
            default:
                return FINDimValueResult::constructValue('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSerialItemId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findSerialItemId(ProjId _projId)
    {
        BOBObjectTable      objectTable;
        WPPWorkOrderLine    workOrderLine;
        WPPWorkOrderTable   workOrderTable;
    
        if (_projId)
        {
            select firstOnly TableId from workOrderLine
            where workOrderLine.ProjId == _projId
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                    join InventSerialId from objectTable
                    where objectTable.RecId == workOrderTable.BOBObjectTableRecId;
        }
    
        return FINDimValueResult::constructValue(objectTable.InventSerialId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserDefaultDepartmentId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findUserDefaultDepartmentId()
    {
        return FINDimValueResult::constructValue(DNRWorkerDefaults::findByUserId().DepartmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkOrderId</Name>
				<Source><![CDATA[
    public static FINDimValueResult findWorkOrderId(ProjId _projId)
    {
        WPPWorkOrderLine workOrderLine;
    
        if (_projId)
        {
            workOrderLine = WPPWorkOrderLine::findProjId(_projId);
        }
    
        if (workOrderLine)
        {
            return FINDimValueResult::constructValue(workOrderLine.WorkOrderId);
        }
        else
        {
            return FINDimValueResult::constructValue('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKitMainComponentLine</Name>
				<Source><![CDATA[
    public static RORRentalLine getKitMainComponentLine(RORRentalLine _childLine)
    {
        RORRentalLine   subKitLine, mainComponentLine = _childLine.RORLineBuffer();
        InventTable     inventTable;
        EcoResProduct   ecoResProduct;
        BOBRentalType   rentalType;
    
        // check direct childs first
        select firstonly mainComponentLine
        where mainComponentLine.ParentLineRecId == _childLine.RecId
        &&    mainComponentLine.RecId != _childLine.RecId
            exists join inventTable
            where inventTable.ItemId == mainComponentLine.ItemId
                join TableId from ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
                    join TableId from rentalType
                    where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                    &&    rentalType.RORIsMainComponent;
    
        if(!mainComponentLine)
        {
            // check if maincomponent is in subkits, deeper we are not gonaa search!
            select firstOnly RecId from subKitLine
            where subKitLine.ParentLineRecId == _childLine.RecId
                join ItemId from mainComponentLine
                where mainComponentLine.ParentLineRecId == subKitLine.RecId
                    exists join inventTable
                    where inventTable.ItemId == mainComponentLine.ItemId
                        join TableId from ecoResProduct
                        where ecoResProduct.RecId == inventTable.Product
                            join TableId from rentalType
                            where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                            &&    rentalType.RORIsMainComponent;
        }
    
        return mainComponentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainComponentLine</Name>
				<Source><![CDATA[
    public static RORRentalLine getMainComponentLine(RORRentalLine _childLine)
    {
        RORRentalLine   mainComponentLine = _childLine.RORLineBuffer(); // "maps" map to real buffer so that we can select
        InventTable     inventTable;
        EcoResProduct   ecoResProduct;
        BOBRentalType   rentalType;
    
        // check siblings first
        select firstonly mainComponentLine
        where mainComponentLine.ParentLineRecId == _childLine.ParentLineRecId
        &&    mainComponentLine.RecId != _childLine.RecId
            exists join inventTable
            where inventTable.ItemId == mainComponentLine.ItemId
                join TableId from ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
                        join TableId from rentalType
                        where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                        &&    rentalType.RORIsMainComponent;
    
        if(!mainComponentLine)
        {
            // check parent
            select firstOnly mainComponentLine
            where mainComponentLine.RecId == _childLine.ParentLineRecId
                join TableId from inventTable
                where inventTable.ItemId == mainComponentLine.ItemId
                    outer join TableId from ecoResProduct
                    where ecoResProduct.RecId == inventTable.Product
                         outer join RORIsMainComponent from rentalType
                         where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                         &&    rentalType.RORIsMainComponent;
    
            if(mainComponentLine && !rentalType.RORIsMainComponent && mainComponentLine.ParentLineRecId)
            {
                mainComponentLine = FINDimValueController_Common::getMainComponentLine(mainComponentLine); // recursive call
            }
            else if(!rentalType.RORIsMainComponent)
            {
                mainComponentLine = null;
            }
        }
    
        return mainComponentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refDepartmentId</Name>
				<Source><![CDATA[
    public static FINDimValueResult refDepartmentId(ProjId _projId)
    {
        WPPWorkOrderLine workOrderLine;
    
        if (_projId)
        {
            workOrderLine = WPPWorkOrderLine::findProjId(_projId);
    
            if (workOrderLine)
            {
                return FINDimValueResult::constructReference(workOrderLine);
            }
            else
            {
                return FINDimValueResult::constructReference(ProjTable::find(_projId));
            }
        }
    
        return FINDimValueResult::constructValue('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>refLot</Name>
				<Source><![CDATA[
    public static FINDimValueResult refLot(ItemId _itemId, InventDimId _inventDimId)
    {
        FINDimValueResult   ret;
        InventDim           inventDim;
        InventSerial        inventSerial;
        InventTable         inventTable;
        EcoResProduct       ecoResProduct;
        BOBObjectTable      objectTable;
        ;
    
        // first try to retrieve the BO using the simplest approach
        select firstOnly InventSerialId from inventDim
        where inventDim.inventDimId == _inventDimId
        &&    inventDim.inventSerialId // serialized objects only
            outer join RecId from objectTable
            where objectTable.InventSerialId == inventDim.inventSerialId;
    
        if(objectTable)
        {
            ret = FINDimValueResult::constructReference(objectTable);
        }
        else if(inventDim.inventSerialId)
        {
            // check if the serial number exists in the current company
            select firstonly RecId from inventSerial
                exists join inventDim
                where inventDim.inventDimId     == _inventDimId
                &&    inventDim.inventSerialId  == inventSerial.InventSerialId;
    
            if(inventSerial)
            {
                ret = FINDimValueResult::constructReference(inventSerial);
            }
            else
            {
                // the serial number originates from another company,
                // so create a reference to the business object using the item
                select firstonly RecId from objectTable
                    exists join ecoResProduct
                    where ecoResProduct.BOBRentalTypeId == objectTable.RentalTypeId
                        join TableId from inventTable
                        where inventTable.ItemId    == _itemId
                        &&    inventTable.Product   == ecoResProduct.RecId
                            join TableId from inventDim
                            where inventDim.inventSerialId  == objectTable.InventSerialId
                            &&    inventDim.inventDimId     == _inventDimId;
    
                ret = FINDimValueResult::constructReference(objectTable);
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>