<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanboardContextMenuBuilder_TPBEventSingle</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HiGHPlanboardContextMenuBuilder_TPBEventSingle extends HiGHPlanboardContextMenuBuilder
{
    RefTableId recordTableId;
    RefRecId recordReference;
    boolean isPlannedTask;
    boolean isUnplannedDlvTask;
    HiGHPlanboardContextMenuData contextMenuData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TableId _entryTableId, RefRecId _entryRecId)
    {
        recordTableId = _entryTableId;
        recordReference = _entryRecId;

        isPlannedTask = (_entryTableId == tableNum(WPPWorkOrderLineResource));
        isUnplannedDlvTask = (_entryTableId == tableNum(WPPWorkOrderLine) && this.getTaskType(_entryRecId) == WPPTaskType::Delivery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    // main extension point for customizing the contents of the context menu.
    public void populate()
    {
        this.initSelection();

        if(contextMenuData.workOrderTable.OrderTableId && contextMenuData.workOrderTable.OrderRecId)
        {
            switch(contextMenuData.workOrderTable.OrderTableId)
            {
                case tableNum(SalesLine):
                    this.selectForSalesLine();
                    break;

                case tableNum(PurchLine):
                    this.selectForPurchLine();
                    break;

                case tableNum(SalesTable):
                    this.selectForSalesTable();
                    break;

                case tableNum(PurchTable):
                    this.selectForPurchTable();
                    break;

                case tableNum(WHSShipmentTable):
                    this.selectForWHSShipment();
                    break;

                case tableNum(InventJournalTable):
                    contextMenuData.allowBusObjAttrs = false;
                    break;

                default:
                    break;
            }

            contextMenuData.allowViewInMap = (contextMenuData.deliveryPostalAddress != 0 && contextMenuData.shipmentRecId && contextMenuData.inventJournalTableRecId);
        }
        else 
        {
            this.selectForTaskTable();
        }

        boolean isTaskLocked;

        if(contextMenuData.entityLockRecId && contextMenuData.userId != curUserId())
        {
            isTaskLocked = true;
        }

        if(isTaskLocked)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader(strFmt("@DNR4590", contextMenuData.userName)));
        }

        this.populateFunctionsGroup(isTaskLocked);
        this.populateStatusUpdateGroup();
        this.populateTaskGroup();
        this.populateCustVendGroup();
        this.populateParentTaskGroup();
        this.populateBusinessObjectGroup();
        this.populateOrderGroup();
        this.populateWarningsGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFunctionsGroup</Name>
				<Source><![CDATA[
    private void populateFunctionsGroup(boolean _isTaskLocked)
    {
        boolean allowUnassignTask           = (isPlannedTask && contextMenuData.lineStatus == WPPWorkOrderLineStatus::Planned && !_isTaskLocked);
        boolean allowBusObjAssign           = (!contextMenuData.shipmentRecId
                                            && !contextMenuData.inventJournalTableRecId
                                            && contextMenuData.lineStatus <= WPPWorkOrderLineStatus::Planned
                                            && contextMenuData.parentLineStatus <= WPPWorkOrderLineStatus::Planned
                                            && contextMenuData.taskType == WPPTaskType::Delivery
                                            && contextMenuData.salesLineRecId
                                            && contextMenuData.kitComponentType != RORKitComponentType::Kit
                                            && contextMenuData.kitComponentType != RORKitComponentType::KitComponent
                                            && contextMenuData.rentalTypeClassification == BOBRentalTypeClassification::Serialized
                                            && contextMenuData.subStatus <= BOBRentalSubStatus::Confirmed
                                            && !_isTaskLocked);
        boolean taskIsCompleted             = (contextMenuData.lineStatus == WPPWorkOrderLineStatus::Completed);
        boolean allowChangeLocation         = (contextMenuData.taskId == WPPParameters::find().InternalDeliveryTaskId && !_isTaskLocked && !taskIsCompleted);
        boolean allowPrintDocuments         = (isPlannedTask && !_isTaskLocked && !taskIsCompleted);
        boolean allowViewInMap              = (contextMenuData.allowViewInMap && !taskIsCompleted);
        boolean allowOrderSpecifications    = (contextMenuData.allowBusObjAttrs && !taskIsCompleted);
        boolean allowSplitShipment          = (contextMenuData.shipmentRecId
                                            && contextMenuData.shipmentStatus == WHSShipmentStatus::Open
                                            && contextMenuData.lineStatus <= WPPWorkOrderLineStatus::Planned
                                            && contextMenuData.parentLineStatus <= WPPWorkOrderLineStatus::Planned);
        boolean allowPrintJournal           = (contextMenuData.inventJournalTableRecId != 0 && !taskIsCompleted);

        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS81103"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR815", allowUnassignTask, #UnassignTask));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField((this.hasBusinessObject() ? "@DNR1748" : "@DNR3392"), allowBusObjAssign, #AssignObject));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR4392", allowChangeLocation, #ChangeInternalDlvLocation));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1496", allowPrintDocuments, #PrintDocuments));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7192", allowViewInMap, #ViewInMap));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7194", allowOrderSpecifications, #RentalOrderSpecifications));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR8520", allowSplitShipment, #SplitShipment));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS20698", allowPrintJournal, #PrintReturnJournal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStatusUpdateGroup</Name>
				<Source><![CDATA[
    private void populateStatusUpdateGroup()
    {
        if(isPlannedTask
       && (this.hasBusinessObject() || contextMenuData.kitComponentType == RORKitComponentType::Kit || contextMenuData.salesLineRecId 
            || contextMenuData.purchLineRecId || contextMenuData.inventTransferTableRecId || contextMenuData.workOrderTable.OrderTableId == tableNum(inventJournalTable)))
        {
            Map allowedStatusUpdateMap = WPPWorkOrderStatusSetup::getPossibleWorkOrderStatus(contextMenuData.workOrderStatusGroupId, contextMenuData.lineStatus);
            boolean allowStatusUpdPlanned = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Planned);
            boolean allowStatusUpdReleased = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Released);
            boolean allowStatusUpdInProgress = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::InProgress);
            boolean allowStatusUpdCompleted = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Completed);

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS32754"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS32845", allowStatusUpdPlanned, #UpdateStatusPlanned));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS6966", allowStatusUpdReleased, #UpdateStatusReleased));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS137068", allowStatusUpdInProgress, #UpdateStatusInProgress));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS54623", allowStatusUpdCompleted, #UpdateStatusCompleted));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaskGroup</Name>
				<Source><![CDATA[
    private void populateTaskGroup()
    {
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS35988"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6461", contextMenuData.workOrderTable.WorkOrderId, true, #JumpRefWorkOrderId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS27207", strFmt("%1", contextMenuData.lineNumber)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS110827", contextMenuData.projId, true, #JumpRefProjId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS121658", contextMenuData.taskId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS36398", strFmt("%1", contextMenuData.lineStatus)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendGroup</Name>
				<Source><![CDATA[
    private void populateCustVendGroup()
    {
        if(contextMenuData.dirPartyTableRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS8079", contextMenuData.partyVendName, true, #JumpRefCustVendAccount));
        }
        else // also show label 'customer' when there is no customer or vendor
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS302", contextMenuData.partyCustName, true, #JumpRefCustVendAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateParentTaskGroup</Name>
				<Source><![CDATA[
    private void populateParentTaskGroup()
    {
        if(contextMenuData.parentLineRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR7203"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10220", contextMenuData.parentWorkorderId, true, #JumpRefWorkOrderId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10221", strFmt("%1", contextMenuData.parentLineNumber)));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10222", contextMenuData.parentTaskId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBusinessObjectGroup</Name>
				<Source><![CDATA[
    private void populateBusinessObjectGroup()
    {
        if(contextMenuData.objectTableRecId && !contextMenuData.shipmentRecId && !contextMenuData.inventJournalTableRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR5863"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR5875", contextMenuData.objectId, true, #JumpRefObjectId));

            if(isConfigurationkeyEnabled(configurationKeyNum(BOBFleetNumber)))
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR8214", contextMenuData.fleetNumber));
            }

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS477", contextMenuData.inventSerialId, true, #JumpRefInventSerialId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS25653", contextMenuData.assetId, true, #JumpRefAssetId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS12836", contextMenuData.inventTableItemId, true, #JumpRefItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOrderGroup</Name>
				<Source><![CDATA[
    private void populateOrderGroup()
    {
        DNRAdditionalNoteTable additionalNotes;

        if(contextMenuData.salesLineRecId || contextMenuData.salesLineMainComponentRecId)
        {
            Phone contactPhone, operatorPhone;

            if(contextMenuData.contactPersonParty)
            {
                contactPhone = this.getPhoneNumber(contextMenuData.contactPersonParty);
            }
            if(contextMenuData.operatorParty)
            {
                operatorPhone = this.getPhoneNumber(contextMenuData.operatorParty);
            }

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader(contextMenuData.salesType == SalesType::RORRental ? "@DNR1539" : "@SYS80119"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue(contextMenuData.salesType == SalesType::RORRental ? "@DNR6231" : "@DNR:SalesOrderNumber", contextMenuData.salesId, true, #JumpRefSalesPurchId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS35826", contextMenuData.dirPersonName, true, #JumpRefSalesResponsible));
            
            if(!contextMenuData.shipmentRecId)
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR5656", contextMenuData.salesLineMainComponentRecId ? contextMenuData.salesLineMainComponentItemId : contextMenuData.orderItemId, true, #JumpRefItemId));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6215", contextMenuData.salesLineMainComponentRecId ? contextMenuData.salesLineMainComponentRentalTypeIdRequested : contextMenuData.rentalTypeIdRequested));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6214", contextMenuData.salesLineMainComponentRecId ? contextMenuData.salesLineMainComponentRentalTypeIdAssigned : contextMenuData.rentalTypeIdAssigned, true, #JumpRefRentalTypeId));
            }

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS124695", contextMenuData.partyContactName, true, #JumpRefSalesContactPerson));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS83745", contactPhone));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS9679", contextMenuData.partyOperatorName, true, #JumpRefSalesOperator));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10219", operatorPhone));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6160", contextMenuData.venueCode, true, #JumpRefVenueCode));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS34979", RORVenueTable::find(contextMenuData.venueCode).Name));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue(contextMenuData.salesType == SalesType::RORRental ? "@DNR:RentalDeliveryAddress" : "@DNR:SalesDeliveryAddress", strFmt("%1\n%2", contextMenuData.street, contextMenuData.city), true));

            if(contextMenuData.salesType == SalesType::RORRental && contextMenuData.inventRefType == InventRefType::Purch && contextMenuData.inventRefId)
            {
                PurchTable purchTable = purchTable::find(contextMenuData.inventRefId);
                VendTable vendTable = purchTable.vendTable_OrderAccount();
                LogisticsPostalAddress postalAddress = vendTable.postalAddress();

                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader(purchTable.PurchaseType == PurchaseType::RORSubRental ? "@DNR1715" : "@SYS25545"));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", purchTable.PurchId, true, #JumpRefIndirectPurchOrder));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS8079", vendTable.name(), true, #JumpRefIndirectVendor));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS7924", strFmt("%1\n%2", postalAddress.Street, postalAddress.City)));
            }

            // additional from salesTable is used also when shipment is linked
            additionalNotes = DNRAdditionalNoteTable::find(tableNum(SalesTable), contextMenuData.salesTableRecId);
        }
        else if(contextMenuData.purchLineRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader(contextMenuData.purchType == PurchaseType::RORSubRental ? "@DNR1715" : "@SYS25545"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", contextMenuData.purchId, true, #JumpRefSalesPurchId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS21867", contextMenuData.dirPersonName, true, #JumpRefPurchPlacer));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS12836", contextMenuData.orderItemId, true, #JumpRefItemId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6215", contextMenuData.rentalTypeId, true, #JumpRefRentalTypeId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6160", contextMenuData.venueCode, true, #JumpRefVenueCode));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS34979", RORVenueTable::find(contextMenuData.venueCode).Name));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS7924", strFmt("%1\n%2", contextMenuData.street, contextMenuData.city)));

            additionalNotes = DNRAdditionalNoteTable::find(tableNum(PurchTable), contextMenuData.purchTableRecId);
        }
        else if(contextMenuData.inventTransferTableRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS78234"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", contextMenuData.inventTransferId, true, #JumpRefTransferId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS25253", contextMenuData.inventLocationIdFrom));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS8519", contextMenuData.inventLocationIdTo));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS78253", strFmt("%1", contextMenuData.inventTransferShipDate)));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS78255", strFmt("%1", contextMenuData.inventTransferReceiveDate)));
            LogisticsPostalAddress postalAddress = InventLocation::find(contextMenuData.inventLocationIdTo).logisticsPostalAddress();
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS22223", strFmt("%1\n%2", contextMenuData.street, contextMenuData.city)));

            if(contextMenuData.shipmentRecId)
            {
                additionalNotes = DNRAdditionalNoteTable::find(tableNum(WHSShipmentTable), contextMenuData.shipmentRecId);
            }
        }
        else if(contextMenuData.inventJournalTableRecId)
        {
            additionalNotes = DNRAdditionalNoteTable::find(tableNum(InventJournalTable), contextMenuData.inventJournalTableRecId);
        }
        else if(contextMenuData.postalAddressRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS14719"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS34979", contextMenuData.description));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS7924", strFmt("%1\n%2", contextMenuData.street, contextMenuData.city)));
        }

        if(contextMenuData.salesLineMainComponentRecId || contextMenuData.salesLineRecId || contextMenuData.purchLineRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS94241"));

            // order header notes
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4331", additionalNotes.LocationNote, true, #JumpRefAdditionalNotesHeader));

            if(!contextMenuData.shipmentRecId)
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4427", additionalNotes.OrderNote, true, #JumpRefAdditionalNotesHeader));
            }

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4424", additionalNotes.RouteNote, true, #JumpRefAdditionalNotesHeader));

            if(!contextMenuData.shipmentRecId)
            {
                // order line notes
                additionalNotes = DNRAdditionalNoteTable::find(contextMenuData.workOrderTable.OrderTableId, contextMenuData.workOrderTable.OrderRecId);
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4443", additionalNotes.InternalNote, true, #JumpRefAdditionalNotesLine));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4425", additionalNotes.ObjectNote, true, #JumpRefAdditionalNotesLine));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4426", additionalNotes.TerminationNote, true, #JumpRefAdditionalNotesLine));
            }
        }
        else if(contextMenuData.inventTransferLineRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS94241"));

            // shipment notes
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4331", additionalNotes.LocationNote, true, #JumpRefAdditionalNotesHeader));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4424", additionalNotes.RouteNote, true, #JumpRefAdditionalNotesHeader));
        }
        else if(contextMenuData.inventJournalTableRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS94241"));

            // return journal notes
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4331", additionalNotes.LocationNote, true, #JumpRefAdditionalNotesHeader));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4443", additionalNotes.InternalNote, true, #JumpRefAdditionalNotesHeader));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4424", additionalNotes.RouteNote, true, #JumpRefAdditionalNotesHeader));
        }
        else
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS94241"));

            // work order header notes
            additionalNotes = DNRAdditionalNoteTable::find(tableNum(WPPWorkOrderTable), contextMenuData.workOrderTable.RecId);
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10223", additionalNotes.OrderNote, true, #JumpRefAdditionalNotesHeader));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10224", additionalNotes.InternalNote, true, #JumpRefAdditionalNotesHeader));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10225", additionalNotes.InvoiceNote, true, #JumpRefAdditionalNotesHeader));

            // work order line notes
            additionalNotes = DNRAdditionalNoteTable::find(tableNum(WPPWorkOrderLine), contextMenuData.workOrderLine.RecId);
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10226", additionalNotes.OrderNote, true, #JumpRefAdditionalNotesLine));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10227", additionalNotes.InternalNote, true, #JumpRefAdditionalNotesLine));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10228", additionalNotes.InvoiceNote, true, #JumpRefAdditionalNotesLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWarningsGroup</Name>
				<Source><![CDATA[
    private void populateWarningsGroup()
    {
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS59278"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon(strFmt("@SYS70454", contextMenuData.taskType), this.getTaskTypeImage(contextMenuData.taskType, contextMenuData.taskId)));

        if(!contextMenuData.shipmentRecId && !contextMenuData.inventJournalTableRecId)
        {
            if(contextMenuData.tradeType == RORTradeType::SubRental)
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon("@DNR4680", #SubRental));
            }

            ROROrderAmendmentLog amendmentLog;

            if(contextMenuData.exchangeAmendmentExchangeType == RORAmendmentExchangeType::Technical || contextMenuData.amendmentExchangeType == RORAmendmentExchangeType::Technical)
            {
                select firstOnly DNRReasonCode from amendmentLog
                order by CreatedDateTime desc
                where (contextMenuData.exchangeAmendmentExchangeType == RORAmendmentExchangeType::Technical
                &&     amendmentLog.RefTableId == tableNum(SalesLine)
                &&     amendmentLog.RefRecId == contextMenuData.salesLineExchangeRecId)
                ||    (contextMenuData.amendmentExchangeType == RORAmendmentExchangeType::Technical
                &&     amendmentLog.RefTableId == tableNum(SalesLine)
                &&     amendmentLog.RefRecId == contextMenuData.salesLineRecId);

                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon(strFmt("@DNR6921", amendmentLog.DNRReasonCode), #TechnicalExch));
            }

            if(contextMenuData.exchangeAmendmentExchangeType == RORAmendmentExchangeType::Commercial || contextMenuData.amendmentExchangeType == RORAmendmentExchangeType::Commercial)
            {
                select firstOnly DNRReasonCode from amendmentLog
                order by CreatedDateTime desc
                where (contextMenuData.exchangeAmendmentExchangeType == RORAmendmentExchangeType::Commercial
                &&     amendmentLog.RefTableId == tableNum(SalesLine)
                &&     amendmentLog.RefRecId == contextMenuData.salesLineExchangeRecId)
                ||    (contextMenuData.amendmentExchangeType == RORAmendmentExchangeType::Commercial
                &&     amendmentLog.RefTableId == tableNum(SalesLine)
                &&     amendmentLog.RefRecId == contextMenuData.salesLineRecId);

                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon(strFmt("@DNR6922", amendmentLog.DNRReasonCode), #CommercialExch));
            }

            if(this.hasBusinessObject())
            {
                if(!contextMenuData.isObjectAvailable && contextMenuData.objectAvailabilityLogRecId)
                {
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon(strFmt("%1\n%2", "@DNR3714", contextMenuData.reasonCode), #ObjNotAvailable));
                }

                if(contextMenuData.LastOnRentDate)
                {
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon("@DNR6923", #ObjLord));
                }
            }

            if(contextMenuData.salesLineMainComponentRecId)
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon("@DNR8109", #LinkedToKit));
            }

            DNRAdditionalNoteTable additionalNotes;
            if(contextMenuData.salesLineRecId || contextMenuData.salesLineMainComponentRecId)
            {
                additionalNotes = DNRAdditionalNoteTable::find(tableNum(SalesTable), contextMenuData.salesTableRecId);
            }
            else if(contextMenuData.purchLineRecId)
            {
                additionalNotes = DNRAdditionalNoteTable::find(tableNum(PurchTable), contextMenuData.purchTableRecId);
            }

            if(additionalNotes.TerminationNote)
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon("@DNR6926", #TerminationNote));
            }

            if(contextMenuData.lastOnRentDate
            && contextMenuData.taskType == WPPTaskType::Load
            && contextMenuData.objectCategory == BOBObjectCategory::Rental)
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon("@DNR7498", #LoadTaskWithLord));
            }

            if(!contextMenuData.allSerializedItemsHaveSerialNumber)
            {
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon("@DNR8110", #KitMissingSerialNum));
            }
        }

        // in the delivery section show this icon on all tasks that have a parent that has not yet been completed,
        // in the planned section show this icon on internal load tasks that have a parent that has not yet been completed
        WPPParameters parameters = WPPParameters::find();

        if(parameters.ShowParentNotCompletedIcon
        && contextMenuData.parentLineRecId
        && contextMenuData.parentLineStatus < WPPWOrkOrderLineStatus::Completed
        && (isUnplannedDlvTask || (isPlannedTask && contextMenuData.taskId == parameters.InternalLoadTaskId)))
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon("@DNR8408", #ParentLineNotCompleted));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelection</Name>
				<Source><![CDATA[
    private void initSelection()
    {
        WPPWorkOrderLine workOrderLine, workOrderLineParent;
        WPPWorkOrderLineRecId workOrderLineRecId = isPlannedTask ? WPPWorkOrderLineResource::findRecId(recordReference).WorkOrderLineRecId : recordReference;
        WPPWorkOrderTaskTable taskTable;
        WPPWorkOrderTable workOrderTable;
        BOBObjectTable objectTable;
        EcoResProduct ecoResProduct;
        InventTable inventTable;
        BOBObjectView objectView;
        BOBObjectAvailabilityLog availabilityLog;
        DirPartyTable partyCust, partyVend;
        WPPTransportPlanBoardEntityLock entityLock;
        
        contextMenuData = new HiGHPlanboardContextMenuData();

        select firstonly crosscompany LineNumber, ProjId, TaskId, Status from workOrderLine
        where workOrderLine.RecId == workOrderLineRecId
            join TaskType, WorkOrderStatusGroupId from taskTable
            where taskTable.TaskId == workOrderLine.TaskId
                join workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                    outer join objectTable
                    where objectTable.RecId == workOrderTable.BOBObjectTableRecId
                        outer join TableId from ecoResProduct
                        where ecoResProduct.DisplayProductNumber == ecoResProduct.BOBRentalTypeId
                        &&    ecoResProduct.BOBRentalTypeId == objectTable.RentalTypeId
                            outer join ItemId from inventTable
                            where inventTable.DataAreaId == workOrderTable.CompanyId
                            &&    inventTable.Product == ecoResProduct.RecId
                                outer join LastOnRentDate, IsAvailable, PostalAddressRecId from objectView
                                where objectView.ObjectId == objectTable.ObjectId
                                    outer join DNRReasonCode, RecId from availabilityLog
                                    where availabilityLog.RecId == objectView.AvailabilityRecId
                                        outer join Name from partyCust
                                        where CustVendACType::Cust == workOrderTable.CustVendAccountType
                                        &&    partyCust.RecId == workOrderTable.OrganizationParty
                                            outer join Name, RecId from partyVend
                                            where CustVendACType::Vend == workOrderTable.CustVendAccountType
                                            &&    partyVend.RecId == workOrderTable.OrganizationParty
                                                outer join WorkOrderId, LineNumber, TaskId, Status, RecId from workOrderLineParent
                                                where workOrderLineParent.RecId == workOrderLine.ParentLineRecId
                                                    outer join UserId from entityLock
                                                    where entityLock.RefTableId == recordTableId
                                                    &&  ((isPlannedTask && entityLock.RefRecId == recordReference) || entityLock.RefRecId == workOrderLine.RecId);

        contextMenuData.exchangeAmendmentExchangeType       = true;
        contextMenuData.allSerializedItemsHaveSerialNumber  = true;

        contextMenuData.lineNumber  = workOrderLine.LineNumber;
        contextMenuData.projId      = workOrderLine.ProjId;
        contextMenuData.taskId      = workOrderLine.TaskId;
        contextMenuData.lineStatus  = workOrderLine.Status;

        contextMenuData.taskType                = taskTable.TaskType;
        contextMenuData.workOrderStatusGroupId  = taskTable.WorkOrderStatusGroupId;

        contextMenuData.workOrderTable = workOrderTable;

        contextMenuData.objectId            = objectTable.ObjectId;
        contextMenuData.fleetNumber         = objectTable.FleetNumber;
        contextMenuData.inventSerialId      = objectTable.InventSerialId;
        contextMenuData.assetId             = objectTable.assetId();
        contextMenuData.objectCategory      = objectTable.Category;
        contextMenuData.objectTableRecId    = objectTable.RecId;

        contextMenuData.inventTableItemId   = inventTable.ItemId;

        contextMenuData.lastOnRentDate      = objectView.LastOnRentDate;
        contextMenuData.isObjectAvailable   = objectView.IsAvailable;
        contextMenuData.postalAddressRecId  = objectView.PostalAddressRecId;

        contextMenuData.objectAvailabilityLogRecId  = availabilityLog.RecId;
        contextMenuData.reasonCode                  = availabilityLog.DNRReasonCode;

        contextMenuData.partyCustName       = partyCust.Name;
        contextMenuData.partyVendName       = partyVend.Name;
        contextMenuData.dirPartyTableRecId  = partyVend.RecId;

        contextMenuData.parentLineRecId     = workOrderLineParent.RecId;
        contextMenuData.parentWorkorderId   = workOrderLineParent.WorkOrderId;
        contextMenuData.parentLineNumber    = workOrderLineParent.LineNumber;
        contextMenuData.parentTaskId        = workOrderLineParent.TaskId;
        contextMenuData.parentLineStatus    = workOrderLineParent.Status;

        contextMenuData.userId = entityLock.UserId;

        if (entityLock.UserId)
        {
            UserInfo userInfo;

            select firstonly Name from userInfo
            where userInfo.Id == entityLock.UserId;

            contextMenuData.userName = userInfo.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForSalesLine</Name>
				<Source><![CDATA[
    private void selectForSalesLine()
    {   
        SalesTable salesTable;
        SalesLine salesLine;
        InventTable inventTable;
        EcoResProduct ecoResProduct;
        BOBRentalType rentalType;
        HcmWorker worker;
        DirPerson dirPerson;
        ContactPerson contactPerson, operator;
        DirPartyTable partyContact, partyOperator;
        LogisticsPostalAddress postalAddress;
        
        container conCompany = [contextMenuData.workOrderTable.CompanyId];

        select firstonly crosscompany : conCompany SalesId, SalesType, RORVenueCode, RecId from salesTable
            join RecId, RORKitComponentType, BOBRentalSubStatus, ItemId, BOBRentalTypeIdRequested, BOBRentalTypeIdAssigned, 
                 InventRefType, InventRefId, RORAmendmentExchangeType, RORTradeType from salesLine
            where salesLine.RecId == contextMenuData.workOrderTable.OrderRecId
            &&    salesLine.SalesId == salesTable.SalesId
                join TableId from inventTable
                where inventTable.ItemId == salesLine.ItemId
                    join TableId from ecoResProduct
                    where ecoResProduct.RecId == inventTable.Product
                        outer join Classification from rentalType
                        where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                            outer join TableId from worker
                            where worker.RecId == salesTable.WorkerSalesResponsible
                                outer join Name from dirPerson
                                where dirPerson.RecId == worker.Person
                                    outer join Party from contactPerson
                                    where contactPerson.ContactPersonId == salesTable.ContactPersonId
                                        outer join Name from partyContact
                                        where partyContact.RecId == contactPerson.Party
                                            outer join Party from operator
                                            where operator.ContactPersonId == salesTable.RORContactPersonIdOperator
                                                outer join Name from partyOperator
                                                where partyOperator.RecId == operator.Party
                                                    outer join Street, City from postalAddress
                                                    where postalAddress.RecId == salesLine.DeliveryPostalAddress;

        contextMenuData.salesId = salesTable.SalesId;
        contextMenuData.salesType = salesTable.SalesType;
        contextMenuData.venueCode = salesTable.RORVenueCode;
        contextMenuData.salesTableRecId = salesTable.RecId;

        contextMenuData.salesLineRecId = salesLine.RecId;
        contextMenuData.kitComponentType = salesLine.RORKitComponentType;
        contextMenuData.subStatus = salesLine.BOBRentalSubStatus;
        contextMenuData.orderItemId = salesLine.ItemId;
        contextMenuData.rentalTypeIdRequested = salesLine.BOBRentalTypeIdRequested;
        contextMenuData.rentalTypeIdAssigned = salesLine.BOBRentalTypeIdAssigned;
        contextMenuData.inventRefType = salesLine.InventRefType;
        contextMenuData.inventRefId = salesLine.InventRefId;
        contextMenuData.amendmentExchangeType = salesLine.RORAmendmentExchangeType;
        contextMenuData.tradeType = salesLine.RORTradeType;

        contextMenuData.rentalTypeClassification = rentalType.Classification;

        contextMenuData.dirPersonName = dirPerson.Name;
        contextMenuData.contactPersonParty = contactPerson.Party;
        contextMenuData.partyContactName = partyContact.Name;
        contextMenuData.operatorParty = operator.Party;
        contextMenuData.partyOperatorName = partyOperator.Name;

        contextMenuData.street = postalAddress.Street;
        contextMenuData.city = postalAddress.City;

        if (rentalType.RecId && rentalType.RORKitStandalone == RORKitStandalone::Kit)
        {
            SalesLine salesLineMC, salesLineExch;
            InventDim inventDim;
            BOBObjectTable objectTable;
            BOBObjectView objectView;
            BOBObjectAvailabilityLog availabilityLog;

            // Find the first main components
            select firstonly crosscompany ItemId, BOBRentalTypeIdRequested, BOBRentalTypeIdAssigned, RecId from salesLineMC
            where salesLineMC.DataAreaId == salesLine.DataAreaId
            &&    salesLineMC.RORParentLineRecId == salesLine.RecId
                join TableId from inventDim
                where inventDim.inventDimId == salesLineMC.InventDimId
                &&    inventDim.inventSerialId
                    join TableId from inventTable
                    where inventTable.ItemId == salesLineMC.ItemId
                        join TableId from ecoResProduct
                        where ecoResProduct.RecId == inventTable.Product
                            join Classification from rentalType
                            where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                            &&    rentalType.RORIsMainComponent
                                outer join objectTable
                                where objectTable.InventSerialId == inventDim.inventSerialId
                                    outer join LastOnRentDate, IsAvailable from objectView
                                    where objectView.ObjectId == objectTable.ObjectId
                                        outer join DNRReasonCode, RecId from availabilityLog
                                        where availabilityLog.RecId == objectView.AvailabilityRecId
                                            outer join RORAmendmentExchangeType from salesLineExch
                                            where salesLineExch.RORRecIdExchanged == salesLineMC.RecId;

            contextMenuData.allSerializedItemsHaveSerialNumber = salesLine.RORIsSerialNumberAssigned(salesLine.RecId);

            contextMenuData.salesLineMainComponentItemId = salesLineMC.ItemId;
            contextMenuData.salesLineMainComponentRentalTypeIdRequested = salesLineMC.BOBRentalTypeIdRequested;
            contextMenuData.salesLineMainComponentRentalTypeIdAssigned = salesLineMC.BOBRentalTypeIdAssigned;
            contextMenuData.salesLineMainComponentRecId = salesLineMC.RecId;

            contextMenuData.rentalTypeClassification = rentalType.Classification;

            contextMenuData.objectId = objectTable.ObjectId;
            contextMenuData.objectTableRecId = objectTable.RecId;
            contextMenuData.fleetNumber = objectTable.FleetNumber;
            contextMenuData.inventSerialId = objectTable.InventSerialId;
            contextMenuData.assetId = objectTable.assetId();
            contextMenuData.objectCategory = objectTable.Category;

            contextMenuData.lastOnRentDate = objectView.LastOnRentDate;
            contextMenuData.isObjectAvailable = objectView.IsAvailable;

            contextMenuData.objectAvailabilityLogRecId = availabilityLog.RecId;
            contextMenuData.reasonCode = availabilityLog.DNRReasonCode;

            contextMenuData.exchangeAmendmentExchangeType = salesLineExch.RORAmendmentExchangeType;
            contextMenuData.salesLineExchangeRecId = salesLineExch.RecId;
        }
        else
        {
            SalesLine salesLineExch;

            select firstonly crosscompany RORAmendmentExchangeType from salesLineExch
            where salesLineExch.DataAreaId == salesLine.DataAreaId
            &&    salesLineExch.RORRecIdExchanged == salesLine.RecId;

            contextMenuData.exchangeAmendmentExchangeType = salesLineExch.RORAmendmentExchangeType;
            contextMenuData.salesLineExchangeRecId = salesLineExch.RecId;
        }

        contextMenuData.allowBusObjAttrs = (salesTable.SalesType == SalesType::RORRental);
        
        this.getDeliveryPostalAddress(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForPurchLine</Name>
				<Source><![CDATA[
    private void selectForPurchLine()
    {
        PurchTable purchTable;
        PurchLine purchLine;
        InventTable inventTable;
        EcoResProduct ecoResProduct;
        BOBRentalType rentalType;
        HcmWorker worker;
        DirPerson dirPerson;
        ContactPerson contactPerson;
        DirPartyTable partyContact;
        LogisticsPostalAddress postalAddress;

        container conCompany = [contextMenuData.workOrderTable.CompanyId];

        select firstonly crosscompany : conCompany PurchId, PurchaseType, RORVenueCode, RecId from purchTable
            join ItemId, BOBRentalTypeId, RecId, RORKitComponentType from purchLine
            where purchLine.RecId == contextMenuData.workOrderTable.OrderRecId
            &&    purchLine.PurchId == purchTable.PurchId
                join TableId from inventTable
                where inventTable.ItemId == purchLine.ItemId
                    outer join TableId from ecoResProduct
                    where ecoResProduct.RecId == inventTable.Product
                        outer join Classification from rentalType
                        where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                            outer join TableId from worker
                            where worker.RecId == purchTable.WorkerPurchPlacer
                                outer join Name from dirPerson
                                where dirPerson.RecId == worker.Person
                                    outer join Party from contactPerson
                                    where contactPerson.ContactPersonId == purchTable.ContactPersonId
                                        outer join Name from partyContact
                                        where partyContact.RecId == contactPerson.Party
                                            outer join Street, City from postalAddress
                                            where postalAddress.RecId == purchLine.DeliveryPostalAddress;

        contextMenuData.purchId = purchTable.PurchId;
        contextMenuData.purchType = purchTable.PurchaseType;
        contextMenuData.venueCode = purchTable.RORVenueCode;
        contextMenuData.purchTableRecId = purchTable.RecId;
        
        contextMenuData.orderItemId = purchLine.ItemId;
        contextMenuData.rentalTypeId = purchLine.BOBRentalTypeId;
        contextMenuData.purchLineRecId = purchLine.RecId;
        contextMenuData.kitComponentType = purchLine.RORKitComponentType;

        contextMenuData.rentalTypeClassification = rentalType.Classification;

        contextMenuData.dirPersonName = dirPerson.Name;
        contextMenuData.contactPersonParty = contactPerson.Party;
        contextMenuData.partyContactName = partyContact.Name;

        contextMenuData.street = postalAddress.Street;
        contextMenuData.city = postalAddress.City;
        
        this.getDeliveryPostalAddress(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForSalesTable</Name>
				<Source><![CDATA[
    private void selectForSalesTable()
    {
        SalesTable salesTable;
        SalesLine SalesLine, salesLineExch;
        InventTable inventTable;
        EcoResProduct ecoResProduct;
        BOBRentalType rentalType;
        HcmWorker worker;
        DirPerson dirPerson;
        ContactPerson contactPerson, operator;
        DirPartyTable partyContact, partyOperator;
        LogisticsPostalAddress postalAddress;
        
        container conCompany = [contextMenuData.workOrderTable.CompanyId];

        select firstonly crosscompany : conCompany SalesId, SalesType, RORVenueCode, RecId from salesTable
        where salesTable.RecId == ContextMenuData.WorkOrderTable.OrderRecId
            join RecId, RORKitComponentType, BOBRentalSubStatus, ItemId, BOBRentalTypeIdRequested, BOBRentalTypeIdAssigned,
                 InventRefType, InventRefId, RORAmendmentExchangeType, RORTradeType from salesLine
            where salesLine.SalesId == salesTable.SalesId
                join TableId from inventTable
                where inventTable.ItemId == salesLine.ItemId
                    outer join TableId from ecoResProduct
                    where ecoResProduct.RecId == inventTable.Product
                        outer join Classification from rentalType
                        where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                            outer join TableId from worker
                            where worker.RecId == salesTable.WorkerSalesResponsible
                                outer join Name from dirPerson
                                where dirPerson.RecId == worker.Person
                                    outer join Party from contactPerson
                                    where contactPerson.ContactPersonId == salesTable.ContactPersonId
                                        outer join Name from partyContact
                                        where partyContact.RecId == contactPerson.Party
                                            outer join Party from operator
                                            where operator.ContactPersonId == salesTable.RORContactPersonIdOperator
                                                outer join Name from partyOperator
                                                where partyOperator.RecId == operator.Party
                                                    outer join Street, City from postalAddress
                                                    where postalAddress.RecId == salesLine.DeliveryPostalAddress;
        
        contextMenuData.salesId = salesTable.SalesId;
        contextMenuData.salesType = salesTable.SalesType;
        contextMenuData.venueCode = salesTable.RORVenueCode;
        contextMenuData.salesTableRecId = salesTable.RecId;

        contextMenuData.salesLineRecId = salesLine.RecId;
        contextMenuData.kitComponentType = salesLine.RORKitComponentType;
        contextMenuData.subStatus = salesLine.BOBRentalSubStatus;
        contextMenuData.orderItemId = salesLine.ItemId;
        contextMenuData.rentalTypeIdRequested = salesLine.BOBRentalTypeIdRequested;
        contextMenuData.rentalTypeIdAssigned = salesLine.BOBRentalTypeIdAssigned;
        contextMenuData.inventRefType = salesLine.InventRefType;
        contextMenuData.inventRefId = salesLine.InventRefId;
        contextMenuData.amendmentExchangeType = salesLine.RORAmendmentExchangeType;
        contextMenuData.tradeType = salesLine.RORTradeType;

        contextMenuData.rentalTypeClassification = rentalType.Classification;

        contextMenuData.dirPersonName = dirPerson.Name;
        contextMenuData.contactPersonParty = contactPerson.Party;
        contextMenuData.partyContactName = partyContact.Name;
        contextMenuData.operatorParty = operator.Party;
        contextMenuData.partyOperatorName = partyOperator.Name;

        contextMenuData.street = postalAddress.Street;
        contextMenuData.city = postalAddress.City;

        select firstOnly RORAmendmentExchangeType from salesLineExch
        where salesLineExch.DataAreaId == salesLine.DataAreaId
        &&    salesLineExch.RORRecIdExchanged == salesLine.RecId;

        contextMenuData.exChangeAmendmentExchangeType = salesLineExch.RORAmendmentExchangeType;
        contextMenuData.salesLineExchangeRecId = salesLineExch.RecId;

        contextMenuData.allowBusObjAttrs = (salesTable.SalesType == SalesType::RORRental);
        
        this.getDeliveryPostalAddress(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForPurchTable</Name>
				<Source><![CDATA[
    private void selectForPurchTable()
    {
        PurchTable purchTable;
        PurchLine purchLine;
        InventTable inventTable;
        EcoResProduct ecoResProduct;
        BOBRentalType rentalType;
        HcmWorker worker;
        DirPerson dirPerson;
        ContactPerson contactPerson;
        DirPartyTable partyContact;
        LogisticsPostalAddress postalAddress;
        
        container conCompany = [contextMenuData.workOrderTable.CompanyId];

        select firstonly crosscompany : conCompany PurchId, PurchaseType, RORVenueCode, RecId from purchTable
        where purchTable.RecId == contextMenuData.workOrderTable.OrderRecId
            join ItemId, BOBRentalTypeId, RecId, RORKitComponentType from purchLine
            where purchLine.PurchId == purchTable.PurchId
                join TableId from inventTable
                where inventTable.ItemId == purchLine.ItemId
                    outer join TableId from ecoResProduct
                    where ecoResProduct.RecId == inventTable.Product
                        outer join Classification from rentalType
                        where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                            outer join TableId from worker
                            where worker.RecId == purchTable.WorkerPurchPlacer
                                outer join Name from dirPerson
                                where dirPerson.RecId == worker.Person
                                    outer join Party from contactPerson
                                    where contactPerson.ContactPersonId == purchTable.ContactPersonId
                                        outer join Name from partyContact
                                        where partyContact.RecId == contactPerson.Party
                                            outer join Street, City from postalAddress
                                            where postalAddress.RecId == purchLine.DeliveryPostalAddress;

        contextMenuData.purchId = purchTable.PurchId;
        contextMenuData.purchType = purchTable.PurchaseType;
        contextMenuData.venueCode = purchTable.RORVenueCode;
        contextMenuData.purchTableRecId = purchTable.RecId;
        
        contextMenuData.orderItemId = purchLine.ItemId;
        contextMenuData.rentalTypeId = purchLine.BOBRentalTypeId;
        contextMenuData.purchLineRecId = purchLine.RecId;
        contextMenuData.kitComponentType = purchLine.RORKitComponentType;

        contextMenuData.rentalTypeClassification = rentalType.Classification;

        contextMenuData.dirPersonName = dirPerson.Name;
        contextMenuData.contactPersonParty = contactPerson.Party;
        contextMenuData.partyContactName = partyContact.Name;

        contextMenuData.street = postalAddress.Street;
        contextMenuData.city = postalAddress.City;

        this.getDeliveryPostalAddress(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForWHSShipment</Name>
				<Source><![CDATA[
    private void selectForWHSShipment()
    {
        SalesTable salesTable;
        SalesLine salesLine;
        WHSLoadLine loadLine;
        WHSShipmentTable shipment;
        InventTable inventTable;
        EcoResProduct ecoResProduct;
        BOBRentalType rentalType;
        HcmWorker worker;
        DirPerson dirPerson;
        ContactPerson contactPerson, operator;
        DirPartyTable partyContact, partyOperator;
        LogisticsPostalAddress postalAddress;
        
        container conCompany = [contextMenuData.workOrderTable.CompanyId];

        select firstonly crosscompany : conCompany SalesId, SalesType, RORVenueCode, RecId from salesTable
            join RecId, RORKitComponentType, BOBRentalSubStatus, ItemId, BOBRentalTypeIdRequested, BOBRentalTypeIdAssigned,
                 InventRefType, InventRefId, RORAmendmentExchangeType, RORTradeType from salesLine
            where salesLine.SalesId == salesTable.SalesId
                join TableId from loadLine
                where loadLine.inventTransId == salesLine.InventTransId
                &&    loadLine.OrderNum == salesLine.SalesId
                &&    loadLine.inventTransType == InventTransType::Sales
                    join RecId, ShipmentStatus, ShipmentId, InventSiteId, InventLocationId from shipment
                    where shipment.shipmentId == loadLine.shipmentId
                    &&    shipment.RecId == contextMenuData.workOrderTable.OrderRecId
                        join TableId from inventTable
                        where inventTable.ItemId == loadLine.ItemId
                            outer join TableId from ecoResProduct
                            where ecoResProduct.RecId == inventTable.Product
                                outer join Classification from rentalType
                                where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId
                                    outer join TableId from worker
                                    where worker.RecId == salesTable.WorkerSalesResponsible
                                        outer join Name from dirPerson
                                        where dirPerson.RecId == worker.Person
                                            outer join Party from contactPerson
                                            where contactPerson.ContactPersonId == salesTable.ContactPersonId
                                                outer join Name from partyContact
                                                where partyContact.RecId == contactPerson.Party
                                                    outer join Party from operator
                                                    where operator.ContactPersonId == salesTable.RORContactPersonIdOperator
                                                        outer join Name from partyOperator
                                                        where partyOperator.RecId == operator.Party
                                                            outer join Street, City from postalAddress
                                                            where postalAddress.RecId == salesLine.DeliveryPostalAddress;

        contextMenuData.salesId = salesTable.SalesId;
        contextMenuData.salesType = salesTable.SalesType;
        contextMenuData.venueCode = salesTable.RORVenueCode;
        contextMenuData.salesTableRecId = salesTable.RecId;

        contextMenuData.salesLineRecId = salesLine.RecId;
        contextMenuData.kitComponentType = salesLine.RORKitComponentType;
        contextMenuData.subStatus = salesLine.BOBRentalSubStatus;
        contextMenuData.orderItemId = salesLine.ItemId;
        contextMenuData.rentalTypeIdRequested = salesLine.BOBRentalTypeIdRequested;
        contextMenuData.rentalTypeIdAssigned = salesLine.BOBRentalTypeIdAssigned;
        contextMenuData.inventRefType = salesLine.InventRefType;
        contextMenuData.inventRefId = salesLine.InventRefId;
        contextMenuData.amendmentExchangeType = salesLine.RORAmendmentExchangeType;
        contextMenuData.tradeType = salesLine.RORTradeType;

        contextMenuData.dirPersonName = dirPerson.Name;
        contextMenuData.contactPersonParty = contactPerson.Party;
        contextMenuData.partyContactName = partyContact.Name;
        contextMenuData.operatorParty = operator.Party;
        contextMenuData.partyOperatorName = partyOperator.Name;

        contextMenuData.street = postalAddress.Street;
        contextMenuData.city = postalAddress.City;

        contextMenuData.allowBusObjAttrs = false; //(salesTable.SalesType == SalesType::RORRental);

        this.getDeliveryPostalAddress(salesLine);

        if(!salesTable.RecId)
        {
            InventTransferTable inventTransferTable;
            InventTransferLine inventTransferLine;

            select firstonly crosscompany : conCompany TransferId, InventLocationIdFrom, InventLocationIdTo, ShipDate, ReceiveDate, RecId from inventTransferTable
                join RecId from inventTransferLine
                where inventTransferLine.TransferId == inventTransferTable.TransferId
                    join TableId from loadLine
                    where loadLine.inventTransId == inventTransferLine.InventTransId
                    &&    loadLine.OrderNum == inventTransferLine.TransferId
                    &&    loadLine.inventTransType == InventTransType::TransferOrderShip
                        join RecId, ShipmentStatus, ShipmentId, InventSiteId, InventLocationId from shipment
                        where shipment.shipmentId == loadLine.shipmentId
                        &&    shipment.RecId == contextMenuData.workOrderTable.OrderRecId
                            join TableId from inventTable
                            where inventTable.ItemId == loadLine.ItemId
                                outer join TableId from ecoResProduct
                                where ecoResProduct.RecId == inventTable.Product
                                    outer join Classification from rentalType
                                    where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId;

            contextMenuData.inventTransferTableRecId = inventTransferTable.RecId;
            contextMenuData.inventTransferLineRecId = inventTransferLine.RecId;
        }

        contextMenuData.shipmentRecId = shipment.RecId;
        contextMenuData.shipmentStatus = shipment.ShipmentStatus;
        contextMenuData.shipmentId = shipment.ShipmentId;
        contextMenuData.inventSiteId = shipment.InventSiteId;
        contextMenuData.inventLocationId = shipment.InventLocationId;

        contextMenuData.rentalTypeClassification = rentalType.Classification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForTaskTable</Name>
				<Source><![CDATA[
    private void selectForTaskTable()
    {
        LogisticsPostalAddress postalAddress;
        LogisticsLocation logisticsLocation;

        switch(contextMenuData.taskType)
        {
            case WPPTaskType::InternalDelivery,
                 WPPTaskType::Delivery:
                select firstOnly Street, City from postalAddress
                where postalAddress.RecId == contextMenuData.workOrderTable.LogisticsLocationRecId
                    join Description from logisticsLocation
                    where logisticsLocation.RecId == postalAddress.Location;

                contextMenuData.street = postalAddress.Street;
                contextMenuData.city = postalAddress.City;
                contextMenuData.description = logisticsLocation.Description;
                break;

            case WPPTaskType::InternalLoad,
                 WPPTaskType::Load:
                select firstOnly Street, City from postalAddress
                where postalAddress.RecId == contextMenuData.postalAddressRecId
                    join Description from logisticsLocation
                    where logisticsLocation.RecId == postalAddress.Location;

                contextMenuData.street = postalAddress.Street;
                contextMenuData.city = postalAddress.City;
                contextMenuData.description = logisticsLocation.Description;
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskType</Name>
				<Source><![CDATA[
    private WPPTaskType getTaskType(WPPWorkOrderLineRecId _recId)
    {
        WPPWorkOrderLine workOrderLine;
        WPPWorkOrderTaskTable workOrderTaskTable;

        select firstOnly TaskType from workOrderTaskTable
            exists join workOrderLine
            where workOrderLine.TaskId == workOrderTaskTable.TaskId
            &&    workOrderLine.RecId  == _recId;

        return workOrderTaskTable.TaskType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryPostalAddress</Name>
				<Source><![CDATA[
    private void getDeliveryPostalAddress(SalesPurchLine _salesPurchLine)
    {
        contextMenuData.deliveryPostalAddress = _salesPurchLine.salesPurchLineInterface().DNRparmRORDeliveryPostalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBusinessObject</Name>
				<Source><![CDATA[
    private boolean hasBusinessObject()
    {
        return (contextMenuData.objectId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskTypeImage</Name>
				<Source><![CDATA[
    private str getTaskTypeImage(WPPTaskType _taskType, WPPWorkOrderTaskId _taskId)
    {
        WPPParameters parameters = WPPParameters::find();
        str ret;

        if(_taskType == WPPTaskType::Delivery)
        {
            ret = #TaskTypeDlv;
        }
        else if(_taskType == WPPTaskType::Load)
        {
            ret = #TaskTypeLoad;
        }
        else if(_taskId == parameters.InternalDeliveryTaskId)
        {
            ret = #TaskIdIntDlv;
        }
        else if(_taskId == parameters.InternalLoadTaskId)
        {
            ret = #TaskIdIntLoad;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>