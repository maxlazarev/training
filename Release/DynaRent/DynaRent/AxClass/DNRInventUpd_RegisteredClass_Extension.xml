<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventUpd_RegisteredClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpd_Registered))]
public final class DNRInventUpd_RegisteredClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeInventUpd_Picked</Name>
				<Source><![CDATA[
    protected InventUpd_Picked initializeInventUpd_Picked(
        InventMovement  _relatedMovement,
        InventDim       _inventDimRelated,
        InventDimParm   _inventDimParm,
        InventQty       _qtyToPick,
        PdsCWInventQty  _cwToPick)
    {
        InventUpd_Picked ret = next initializeInventUpd_Picked(_relatedMovement, _inventDimRelated, _inventDimParm, _qtyToPick, _cwToPick);

        ret.BOBParmBlockUpdateCompensatingTrans(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        ttsbegin;

        if (registered)
        {
            this.BOBCheckUpdateCompensatingTrans();
        }

        next updateNow();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRegisterInventTrans</Name>
				<Source><![CDATA[
    protected container updateRegisterInventTrans(InventTrans _inventTrans, InventDimId _registerInventDimId, InventQty _addRegistered, PdsCWInventQty _cwAddRegistered)
    {
        container ret;

        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated, _inventTrans.RecId));

            ret = next updateRegisterInventTrans(_inventTrans, _registerInventDimId, _addRegistered, _cwAddRegistered);

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRegisterLess</Name>
				<Source><![CDATA[
    protected void updateRegisterLess()
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            next updateRegisterLess();

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBCheckUpdateCompensatingTrans</Name>
				<Source><![CDATA[
    private void BOBCheckUpdateCompensatingTrans()
    {
        InventUpd_Picked        inventUpd_Picked;
        InventMovement          inventMovement;
        InventTransferLine      inventTransferLine;
    
        switch(movement.buffer().TableId)
        {
            case tableNum(InventTransferLine):
                inventTransferLine = movement.buffer() as InventTransferLine;
                inventTransferLine.selectForUpdate(true);
                break;
        }
    
        if (this.createMovementForCompensatingTransTo(inventTransferLine, movement))
        {
            inventMovement = InventMovement::construct(inventTransferLine, InventMovSubType::BOBCompensatingTransTo);
        }
    
        if (inventMovement)
        {
            inventUpd_Picked = InventUpd_Picked::newParameters(inventMovement,
                                                               this.parmRegInventDimCriteria(),
                                                               this.parmRegInventDimParm(),
                                                               this.parmArrInventDimCriteria(),
                                                               this.parmArrInventDimParm(),
                                                               -this.parmRegistered());
    
            inventUpd_Picked.BOBParmIsCompensatingTrans(true);
            inventUpd_Picked.parmAllowNegativePhysical(true);
            inventUpd_Picked.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMovementForCompensatingTransTo</Name>
				<Source><![CDATA[
    [Hookable(true)]
    protected boolean createMovementForCompensatingTransTo(InventTransferLine   _inventTransferLine, InventMovement _movement)
    {
        boolean ret;

        if (_inventTransferLine
        &&  (_inventTransferLine.RORTradeType == RORTradeType::Rental || _inventTransferLine.RORTradeType == RORTradeType::SubRental)
        &&  _movement is InventMov_TransferTo)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>