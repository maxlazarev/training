<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalLineEditorForm_RentalQuotLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORRentalLineEditorForm_RentalQuotLine extends RORRentalLineEditorForm
{
    SalesQuotationLine  salesQuotationLine;
    SalesQuotationTable salesQuotationTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSetTaxGroups</Name>
				<Source><![CDATA[
    protected void checkSetTaxGroups()
    {
        RORRentalEditorLine editorLine;
        ;

        if (salesQuotationTable.InclTax)
        {
            while select forUpdate editorLine
            where editorLine.ParmId == this.parmId()
            &&    editorLine.MainKitReference == salesQuotationLine.RecId
            &&    editorLine.RefTableId == tableNum(SalesQuotationLine)
            {
                editorLine.TaxGroup     =  salesQuotationLine.TaxGroup;
                editorLine.TaxItemGroup = (editorLine.TradeType == RORTradeType::SalesPurch ?
                                           InventTableModule::find(editorLine.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId :
                                           RORInventItemRentalSetup::findDefault(editorLine.ItemId).TaxItemGroup);
                editorLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    protected container createLine(RORRentalEditorLine  _rentalEditorLine,
                                   RORKitComponentType  _kitComponentType,
                                   RORRentalLine        _lineParent,
                                   LineNum              _lastLineNum)
    {
        SalesQuotationLine  salesQuotationLineComponent;
        SalesQuotationLine  parentSalesQuotationLine = _lineParent;
        ;
    
        ttsbegin;
        salesQuotationLineComponent.initValue();
        salesQuotationLineComponent.initFromSalesQuotationTable(salesQuotationTable);
        salesQuotationLineComponent.QuotationType               = salesQuotationLine.QuotationType;
    
        if (salesQuotationLine.QuotationType == QuotationType::RORProjRental)
        {
            salesQuotationLineComponent.ProjTransType           = salesQuotationLine.ProjTransType;
            salesQuotationLineComponent.RORProjTransType        = salesQuotationLine.RORProjTransType;
            salesQuotationLineComponent.ProjCategoryId          = salesQuotationLine.ProjCategoryId;
            salesQuotationLineComponent.LinePropertyId          = salesQuotationLine.LinePropertyId;
            salesQuotationLineComponent.TransDate               = salesQuotationLine.TransDate;
            salesQuotationLineComponent.ProjDescription         = salesQuotationLine.ProjDescription;
        }
    
        salesQuotationLineComponent.QuotationId                 = salesQuotationLine.QuotationId;
        salesQuotationLineComponent.RORTradeType                = salesQuotationLine.RORTradeType;
        salesQuotationLineComponent.RORModifiedRORTradeType();
        salesQuotationLineComponent.ItemId                      = _rentalEditorLine.ItemId;
        salesQuotationLineComponent.itemIdChanged();
    
        this.initInventDimIdOnComponent(salesQuotationLineComponent, _rentalEditorLine);

        salesQuotationLineComponent.ProjDescription = salesQuotationLineComponent.inventTable().defaultProductName();

        
        salesQuotationLineComponent.RORReturnInventLocationId   = parentSalesQuotationLine.RORReturnInventLocationId ?
            parentSalesQuotationLine.RORReturnInventLocationId : _rentalEditorLine.InventLocationId;
    
        salesQuotationLineComponent.RORParentLineRecId          = _lineParent.RecId;
    
        salesQuotationLineComponent.RORKitComponentType         = _rentalEditorLine.kitComponentType();
        salesQuotationLineComponent.RORAllowQtyEdit             = _rentalEditorLine.AllowQtyEdit;
    
        salesQuotationLineComponent.RORRentalLine::initPricingFromRentalLine(_rentalEditorLine);
        // can reset some pricing elements
        salesQuotationLineComponent.RORRentalLine::initFromParent(_lineParent);
    
        if(salesQuotationLineComponent.RORTradeType != RORTradeType::SalesPurch)
        {
            // Keep invoice profile and calendar the same as it was shown in RLE
            salesQuotationLineComponent.INVInvoiceProfileId  = _rentalEditorLine.INVInvoiceProfileId;
            salesQuotationLineComponent.DNRCalendarId        = _rentalEditorLine.DNRCalendarId;

            salesQuotationLineComponent.RORRentalPricesModified();
        }
    
        salesQuotationLineComponent.RORIsPriceFixed             = _rentalEditorLine.IsPriceFixed;
        salesQuotationLineComponent.RORIsPriceNet               = _rentalEditorLine.IsPriceNet;
    
        salesQuotationLineComponent.RORSuppItemTableRecid    = _rentalEditorLine.SuppItemTableRecid;
        // find a line number between _lastLineNum and the next line
        salesQuotationLineComponent.LineNum = salesQuotationLineComponent.RORRentalLine::getNextLineNum(_lastLineNum, lastContractItemLineNum);
        salesQuotationLineComponent.createLine(true, false, false, true, false, false);
    
        _rentalEditorLine.DNRWriteAdditionalNotes(salesQuotationLineComponent);
        ttscommit;
    
        return [ salesQuotationLineComponent.InventTransId, salesQuotationLineComponent.LineNum ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineById</Name>
				<Source><![CDATA[
    protected RORRentalLine findLineById(InventTransId _inventTransId)
    {
        return SalesQuotationLine::findInventTransId(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId getInventDimId()
    {
        InventDim   inventDim;
    
        if (salesQuotationTable.InventLocationId)
        {
            inventDim.InventLocationId = salesQuotationTable.InventLocationId;
        }
    
        if (salesQuotationTable.InventSiteId)
        {
            inventDim.InventSiteId = salesQuotationTable.InventSiteId;
        }
    
        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallerHeader</Name>
				<Source><![CDATA[
    public void initFromCallerHeader(RORRentalEditorLine _rentalEditorLine)
    {
        _rentalEditorLine.HeaderId              = salesQuotationTable.QuotationId;
        _rentalEditorLine.INVInvoiceProfileId   = salesQuotationTable.INVInvoiceProfileId;
        _rentalEditorLine.CustVendAccount       = salesQuotationTable.CustAccount;
    
        _rentalEditorLine.RORRentalLine::initFromHeaderBuffer(salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesQuotationLine _salesQuotationLine)
    {
        super(_salesQuotationLine);
    
        salesQuotationLine  = _salesQuotationLine;
        salesQuotationTable = _salesQuotationLine.salesQuotationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    protected LineNum updateLine(
        Common                  _common,
        RORKitComponentType     _kitComponentType,
        RORRentalEditorLine     _rentalEditorLine = null)
    {
        SalesQuotationLine salesQuotationLineUpdate = _common as SalesQuotationLine;
    
        if (salesQuotationLineUpdate
        &&  salesQuotationLineUpdate.RORRentalLine::isLineUpdated(_rentalEditorLine))
        {
            salesQuotationLineUpdate.RORKitComponentType = _kitComponentType;
    
            if (_rentalEditorLine)
            {
                salesQuotationLineUpdate.RORRentalLine::updateFromRentalEditorLine(_rentalEditorLine);
                salesQuotationLineUpdate.salesQtyModified();
    
                _rentalEditorLine.DNRWriteAdditionalNotes(salesQuotationLineUpdate);
            }
    
            salesQuotationLineUpdate.update();
        }
    
        return salesQuotationLineUpdate.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCallerLine</Name>
				<Source><![CDATA[
    protected RORRentalLine selectCallerLine(SalesQuotationLineRefRecId _callerLineRecId)
    {
        SalesQuotationLine callerLine;

        select firstonly callerLine where callerLine.RecId == _callerLineRecId;
        return callerLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>