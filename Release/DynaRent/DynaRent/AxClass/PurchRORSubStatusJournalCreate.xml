<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRORSubStatusJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRORSubStatusJournalCreate extends FormletterJournalCreate
{
    VendRORSubStatusJour        subStatusJour;
    VendRORSubStatusTrans       subStatusTrans;

    PurchTable                  purchTable;
    PurchParmTable              purchParmTable;
    PurchParmUpdate             purchParmUpdate;
    PurchLine                   purchLine;

    PurchTotals                 purchTotals;
    RecordSortedList            recordListPurchParmLine;
    NoYes                       creditNote;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void calcLine(PurchLine _purchLine, PurchParmLine _purchParmLine)
    {
        _purchLine          = this.getPurchLine(_purchParmLine);
        updateNow           = _purchParmLine.ReceiveNow;
        updateNowInvent     = _purchParmLine.InventNow;
        lineValue           = _purchLine.calcLineAmountExclTax(updateNow, this.updateDate(), purchTotals.tax());
        lineValueInclTax    = _purchLine.calcLineAmount(updateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the purch update line should be discarded.
    /// </summary>
    /// <param name="_purchParmLine">
    ///    The purch update line to be checked.
    /// </param>
    /// <returns>
    ///    true if the purch update line should be discarded; otherwise, false.
    /// </returns>
    protected boolean checkDiscardLine(Common _purchParmLine)
    {
        PurchParmLine purchParmLine = _purchParmLine as PurchParmLine;
        InventMovement inventMovement;
    
        if (!purchParmLine.ReceiveNow)
        {
            return true;
        }
    
        purchLine = purchParmLine.purchLine();
        if (purchLine.isStocked())
        {
            inventMovement = InventMovement::construct(purchLine);
            if (inventMovement.mustCheckOverDeliveryForQty(-purchParmLine.InventNow) && !inventMovement.checkNotOverDelivery(-purchParmLine.InventNow, false, 0))
            {
                return true;
            }
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected void createJournalHeader()
    {
        this.setDeliveryFields();
    
        subStatusJour.LedgerVoucher = this.getVoucher();
        subStatusJour.Qty           = purchTotals.purchQty();
        subStatusJour.Weight        = purchTotals.purchWeight();
        subStatusJour.Volume        = purchTotals.purchVolume();
        subStatusJour.PurchBalance  = purchTotals.purchBalance();
        subStatusJour.EndDisc       = purchTotals.purchEndDisc();
        subStatusJour.SumMarkup     = purchTotals.purchMarkup();
        subStatusJour.SumTax        = purchTotals.purchTaxTotal();
        subStatusJour.RoundOff      = purchTotals.purchRoundOff();
        subStatusJour.Amount        = purchTotals.purchTotalAmount();
    
        subStatusJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a journal line.
    /// </summary>
    /// <param name="_parmLine">
    ///   The record to base the journal line upon.
    /// </param>
    protected void  createJournalLine(Common _parmLine)
    {
        Label                   label = new Label(subStatusJour.LanguageId);
        RORRentalDateTimes      rentalDateTimes;
        PurchTable              purchTableLocal = purchLine.purchTable();
    
        subStatusTrans.clear();
        subStatusTrans.initValue();
    
        subStatusTrans.initFromPurchLine(purchLine);
    
        this.calcLine(purchLine, _parmLine as PurchParmLine);
    
        subStatusTrans.setLinenum(real2int(this.getLineNum()));
    
        subStatusTrans.PurchId        = subStatusJour.PurchId;
        subStatusTrans.SubStatusId    = subStatusJour.SubStatusId;
        subStatusTrans.Date           = subStatusJour.Date;
    
        subStatusTrans.Qty            = updateNow;
        subStatusTrans.InventQty      = updateNowInvent;
        subStatusTrans.LineAmount     = lineValue;
        subStatusTrans.LineAmountTax  = lineValueInclTax - lineValue;
    
        subStatusTrans.TaxWriteCode   = this.parmTax().taxWriteCode();
    
        subStatusTrans.LineHeader = label.extractString(literalStr("@DNR1715"))  + ' ' + purchLine.PurchId       + ' '
                                    + label.extractString(literalStr("@SYS8079")) + ' ' + purchTableLocal.OrderAccount  + ' '
                                    + (purchTableLocal.VendorRef ? (label.extractString(literalStr("@SYS9452"))  + ' ' + purchTableLocal.VendorRef + ' ') : '')
                                    + subStatusTrans.LineHeader;
    
        this.insertJournalLine(subStatusTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal link.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The record on which to base the journal link.
    /// </param>
    protected void createJournalLink(Common _purchParmLine)
    {
        PurchParmLine               purchParmLine = _purchParmLine as PurchParmLine;
        VendRORSubStatusPurchLink   subStatusPurchLink;
    
        subStatusPurchLink.initFromPurchParmLine  (purchParmLine);
        subStatusPurchLink.initFromVendRORSubStatusJour(subStatusJour);
        this.insertJournalLink(subStatusPurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the form letter type.
    /// </summary>
    /// <returns>
    /// A <c>FormletterType</c> enumeration value.
    /// </returns>
    protected FormletterType formletterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the current journal header.
    /// </summary>
    /// <returns>
    ///   A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return subStatusJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLine</Name>
				<Source><![CDATA[
    protected PurchLine  getPurchLine(
        PurchParmLine     _purchParmLine,
        boolean           _forUpdate = false)
    {
        PurchLine  localPurchLine;
    
        localPurchLine.selectForUpdate(_forUpdate);
    
        select firstonly localPurchLine
        where localPurchLine.RecId == _purchParmLine.PurchLineRecId;
    
        if (! PurchTable::exist(localPurchLine.PurchId))
        {
            throw error("@SYS16740");
        }
    
        return localPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return super(); // subStatusJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        subStatusJour.clear();
        subStatusJour.initValue();
    
        subStatusJour.SubStatusId         = this.getJournalNumber();
        subStatusJour.ParmId              = purchParmUpdate.ParmId;
        subStatusJour.Date                = purchParmTable.TransDate;
        subStatusJour.BOBRentalSubStatus  = this.RORparmRentalSubStatus();
    
        subStatusJour.initFromPurchTable(purchTable);
        subStatusJour.setDocNum(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    protected void initSourceTable()
    {
        purchTable = purchParmTable.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {
        purchTotals = PurchTotals::newParmTable(purchParmTable, purchParmUpdate.SpecQty, purchParmUpdate.ParmId, purchParmUpdate.SumPurchId, documentStatus);
        purchTotals.calc();
        this.parmTax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    ///   The table ID for the journal line table.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(VendRORSubStatusTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    ///   The table ID for the journal link table.
    /// </returns>
    protected TableId linksTableId()
    {
        return tableNum(VendRORSubStatusPurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    ///   A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return RORParameters::numRefSubStatus_SubRental();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceVoucher</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceVoucher()
    {
        return RORParameters::numRefSubStatus_SubRental();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;
        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchParmUpdate)
    {
        purchParmUpdate = _parmUpdate as PurchParmUpdate;
        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    protected boolean proforma()
    {
        return purchParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    public PurchTable purchTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>RecordSortedList</c> object with every posting parameter line record.
    /// </summary>
    /// <returns>
    /// A <c>RecordSortedList</c> object.
    /// </returns>
    protected RecordSortedList recordListParmLine()
    {
        return purchTotals.recordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    protected void setDeliveryFields()
    {
        PurchLine       localPurchLine;
        PurchParmLine   purchParmLine;
    
        select firstonly purchParmLine
        where purchParmLine.ParmId     == purchParmTable.ParmId
        &&    purchParmLine.TableRefId == purchParmTable.TableRefId;
    
        localPurchLine = purchParmLine.purchLine();
    
        subStatusJour.DeliveryPostalAddress = purchParmTable.DeliveryPostalAddress ? purchParmTable.DeliveryPostalAddress
                                                                                 : localPurchLine.DeliveryPostalAddress;
        subStatusJour.DeliveryName      = purchParmTable.DeliveryName    ? purchParmTable.DeliveryName
                                                                           : localPurchLine.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the source table for the journal.
    /// </summary>
    /// <returns>
    ///   A record.
    /// </returns>
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the total object.
    /// </summary>
    /// <returns>
    ///   A total object.
    /// </returns>
    protected Object totals()
    {
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    ///   A record.
    /// </returns>
    protected Common typeParmLine()
    {
        PurchParmLine   purchParmLine;
    
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate  updateDate()
    {
        return purchParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRORSubStatusJournalCreate construct()
    {
        return new PurchRORSubStatusJournalCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>