<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransMgr_SalesQuotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransMgr_SalesQuotation extends BOBRentalTransManager
{
    SalesQuotationTable salesQuotationTable;
    SalesQuotationLine  salesQuotationLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    protected BOBRentalTransActive active()
    {
        switch(salesQuotationTable.QuotationStatus)
        {
            case SalesQuotationStatus::Cancelled,
                 SalesQuotationStatus::Confirmed,
                 SalesQuotationStatus::Lost:
                return BOBRentalTransActive::Closed;
    
            default:
                return (salesQuotationLine.BOBSellFixedAsset ? BOBRentalTransActive::Active : BOBRentalTransActive::Inactive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyFrom</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyFrom()
    {
        return BOBDateTimeCertainty::Tentative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyTo</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyTo(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return BOBDateTimeCertainty::Tentative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        TransDate transDate = (salesQuotationLine.ReceiptDateRequested ? salesQuotationLine.ReceiptDateRequested : salesQuotationLine.ShippingDateRequested);
        return DateTimeUtil::newDateTime(transDate, 0, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer()
    {
        salesQuotationLine = buffer as SalesQuotationLine;
        salesQuotationTable = salesQuotationLine.salesQuotationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId inventLocationId()
    {
        return inventTrans.inventLocationId();
        // return salesQuotationLine.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId rentalTypeId()
    {
        return (salesQuotationLine.BOBRentalTypeIdAssigned ?
                salesQuotationLine.BOBRentalTypeIdAssigned :
                salesQuotationLine.BOBRentalTypeIdRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    protected BOBRentalTransType transType()
    {
        return BOBRentalTransType::SalesQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    protected void updateBuffer(boolean _doUpdateBuffer)
    {
        BOBRentalTrans rentalTrans;
        ;
    
        if(salesQuotationLine.RecId)
        {
            select firstonly SubStatus, RecId from rentalTrans
            order by SubStatus asc
            where rentalTrans.InventTransOrigin == inventTrans.InventTransOrigin
            &&    rentalTrans.TransType         != BOBRentalTransType::InventCounting;
    
            salesQuotationLine.selectForUpdate(true);
            salesQuotationLine.BOBRentalSubStatus = (rentalTrans.RecId ? rentalTrans.SubStatus : subStatus);
    
            if(_doUpdateBuffer)
            {
                salesQuotationLine.doUpdate();
            }
        }
        else // record is being inserted
        {
            salesQuotationLine.BOBRentalSubStatus = subStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans</Name>
				<Source><![CDATA[
    public void deleteInventTrans()
    {
        if(this.mustMaintainRentalTrans())
        {
            if (salesQuotationLine.QuotationStatus == SalesQuotationStatus::Sent)
            {
                BOBRentalTrans rentalTrans;

                // used when confirming quotation - called before quotation line update so status is still Sent
                // rather than deleting the rental transaction, in this case we just want to close it
                update_recordSet rentalTrans
                setting Active = BOBRentalTransActive::Closed
                where rentalTrans.InventTransRecId == inventTrans.RecId;
            }
            else
            {
                super();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>