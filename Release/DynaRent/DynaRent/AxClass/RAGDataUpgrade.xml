<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAGDataUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RAGDataUpgrade extends RunBaseBatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;
    
        dialog.addText("@SYS78858");
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
    
        try
        {
            ttsbegin;
    
            this.updateContractLinePriceRates();
    
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContractLinePriceRates</Name>
				<Source><![CDATA[
    private void updateContractLinePriceRates()
    {
        Num             priceRateCode;
        UnitOfMeasure   unitOfMeasure;
        RAGContractLine contractLine;
        PriceCur        price;
        Qty             minQty, maxQty;
        ;
    
        while select forUpdate contractLine
        where contractLine.AgreementType == RAGAgreementType::GrossPrice
        ||    contractLine.AgreementType == RAGAgreementType::NetPrice
        ||    contractLine.AgreementType == RAGAgreementType::MinQty
        ||    contractLine.AgreementType == RAGAgreementType::MaxQty
        ||    contractLine.AgreementType == RAGAgreementType::Rigging
        {
            switch(contractLine.AgreementType)
            {
                case RAGAgreementType::GrossPrice:
                    [ price, priceRateCode ] = contractLine.Value;
                    unitOfMeasure = UnitOfMeasure::findBySymbol(priceRateCode);
                    contractLine.Value = [ price, unitOfMeasure.RecId ];
                    break;
    
                case RAGAgreementType::NetPrice:
                    [ price, priceRateCode ] = contractLine.Value;
                    unitOfMeasure = UnitOfMeasure::findBySymbol(priceRateCode);
                    contractLine.Value = [ price, unitOfMeasure.RecId ];
                    break;
    
                case RAGAgreementType::MinQty:
                    [ minQty, priceRateCode ] = contractLine.Value;
                    unitOfMeasure = UnitOfMeasure::findBySymbol(priceRateCode);
                    contractLine.Value = [ minQty, unitOfMeasure.RecId ];
                    break;
    
                case RAGAgreementType::MaxQty:
                    [ maxQty, priceRateCode ] = contractLine.Value;
                    unitOfMeasure = UnitOfMeasure::findBySymbol(priceRateCode);
                    contractLine.Value = [ maxQty, unitOfMeasure.RecId ];
                    break;
    
                case RAGAgreementType::Rigging:
                    [ price, priceRateCode, minQty, maxQty ] = contractLine.Value;
                    unitOfMeasure = UnitOfMeasure::findBySymbol(priceRateCode);
                    contractLine.Value = [ price, unitOfMeasure.RecId, minQty, maxQty ];
                    break;
            }
    
            contractLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RAGDataUpgrade dataUpgrade = new RAGDataUpgrade();
        ;
    
        if(dataUpgrade.prompt())
        {
            dataUpgrade.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>