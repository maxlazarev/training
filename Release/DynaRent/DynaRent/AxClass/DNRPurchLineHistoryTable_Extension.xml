<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchLineHistoryTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(PurchLineHistory))]
public final class DNRPurchLineHistoryTable_Extension
{
    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RORDisplayDiscPercent</Name>
				<Source><![CDATA[
    display RORRentalDiscPercent RORDisplayDiscPercent()
    {
        RORRentalDiscPercent    rentalDiscPercent;
        
        if (hasFieldAccess(tableNum(PurchLineHistory), fieldNum(PurchLineHistory, LinePercent)))
        {
            switch (this.RORTradeType)
            {
                case RORTradeType::Rental,
                     RORTradeType::SubRental:
                    rentalDiscPercent = this.RORRentalLine::editDiscPercent(false, 0);
                    break;
                
                default:
                    rentalDiscPercent = this.LinePercent;
            }
        }
        
        return rentalDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayLineAmount</Name>
				<Source><![CDATA[
    display LineAmount RORDisplayLineAmount()
    {
        LineAmount    lineAmount;
        
        if (hasFieldAccess(tableNum(PurchLineHistory), fieldNum(PurchLineHistory, LineAmount)))
        {
            lineAmount = this.RORRentalLine::editLineAmount(false, 0);
        }
        
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayNetAmount</Name>
				<Source><![CDATA[
    display RORRentalNetAmount RORDisplayNetAmount()
    {
        RORRentalNetAmount    netAmount;
        
        if (hasFieldAccess(tableNum(PurchLineHistory), fieldNum(PurchLineHistory, RORRentalGrossAmount)))
        {
            netAmount = this.RORRentalLine::editNetAmount(false, 0);
        }
        
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetHeader</Name>
				<Source><![CDATA[
    public RORRentalHeader RORGetHeader(boolean _forUpdate = false)
    {
        return this.purchLine().purchTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetParentLine</Name>
				<Source><![CDATA[
    public RORRentalLine RORGetParentLine(boolean _forUpdate = false)
    {
        PurchLineHistory    purchLineHistory;
        PurchLine           purchLine;
        ;
        
        if (this.RORParentLineRecId)
        {
            purchLineHistory.selectForUpdate(_forUpdate);
            
            select firstonly purchLineHistory
            where purchLineHistory.PurchId  == this.PurchId
            && purchLineHistory.ValidFrom   == this.ValidFrom
            && purchLineHistory.ValidTo     == this.ValidTo
                exists join purchLine
                where purchLine.InventTransId == purchLineHistory.InventTransId
                && purchLine.RecId            == this.RORParentLineRecId;
            
            return purchLineHistory;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>