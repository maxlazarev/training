<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPWorkOrderTableListPageInteraction
extends SysListPageInteractionBase
{
    WPPWorkOrderTableInteractionHelper  workOrderTableInteractionHelper;
    WPPWorkOrderTableListPage           workOrderTableListPage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentWorkOrderTable</Name>
				<Source><![CDATA[
    protected WPPWorkOrderView currentWorkOrderTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(WPPWorkOrderTableListPage, WorkOrderView)) as WPPWorkOrderView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        QueryBuildDataSource    qbdsProjGroup;
        QueryBuildRange         qbr;
        Common                  caller;

        if (this.isTableQuery())
        {
            QueryBuildDataSource qbdsWorkOrderView = _query.dataSourceTable(tableNum(WPPWorkOrderView));

            if (workOrderTableListPage != WPPWorkOrderTableListPage::Main)
            {
                qbdsProjGroup = qbdsWorkOrderView.addDataSource(tableNum(ProjGroup));
                qbdsProjGroup.addLink(fieldNum(WPPWorkOrderView, ProjGroupId), fieldNum(ProjGroup, ProjGroupId));
                qbdsProjGroup.joinMode(JoinMode::ExistsJoin);
            }

            switch (workOrderTableListPage)
            {
                case WPPWorkOrderTableListPage::Maintenance:
                    qbdsProjGroup.addRange(fieldNum(ProjGroup, WPPWorkOrderType)).value(SysQuery::value(WPPWorkOrderType::Maintenance));
                    break;

                case WPPWorkOrderTableListPage::Sales:
                    qbdsProjGroup.addRange(fieldNum(ProjGroup, WPPWorkOrderType)).value(SysQuery::value(WPPWorkOrderType::Sales));
                    break;

                case WPPWorkOrderTableListPage::Damage:
                    qbdsProjGroup.addRange(fieldNum(ProjGroup, WPPWorkOrderType)).value(SysQuery::value(WPPWorkOrderType::Damage));
                    break;

                case WPPWorkOrderTableListPage::Transport:
                    qbdsProjGroup.addRange(fieldNum(ProjGroup, WPPWorkOrderType)).value(SysQuery::value(WPPWorkOrderType::Transport));
                    break;

                case WPPWorkOrderTableListPage::Claims:
                    qbdsProjGroup.addRange(fieldNum(ProjGroup, WPPWorkOrderType)).value(SysQuery::value(WPPWorkOrderType::Claims));
                    break;
            }

            caller = this.page().pageArgs().externalRecord();

            switch (caller.TableId)
            {
                case tableNum(BOBObjectTable):
                    qbdsWorkOrderView.addDynalink(fieldNum(WPPWorkOrderView, BOBObjectTableRecId), caller, fieldNum(BOBObjectTable, RecId));
                    break;

                case tableNum(BOBObjectView):
                case tableNum(BOBObjectViewV2):
                    QueryBuildDataSource qbdsObjectTable = qbdsWorkOrderView.addDataSource(tableNum(BOBObjectTable));
                    qbdsObjectTable.relations(false);
                    qbdsObjectTable.joinMode(JoinMode::ExistsJoin);
                    qbdsObjectTable.addLink(fieldNum(WPPWorkOrderView, BOBObjectTableRecId), fieldNum(BOBObjectTable, RecId));

                    BOBObjectId qbrObjectIdValue = (caller.TableId == tableNum(BOBObjectView) ?
                                                    SysQuery::value(caller.(fieldNum(BOBObjectView, ObjectId))) :
                                                    SysQuery::value(caller.(fieldNum(BOBObjectViewV2, ObjectId))));

                    qbdsObjectTable.addRange(fieldNum(BOBObjectTable, ObjectId)).value(qbrObjectIdValue);
                    break;

                case tableNum(RORRentalOrderLineView):
                    qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, OrderTableId)).value(SysQuery::value(tableNum(SalesLine)));
                    qbdsWorkOrderView.addDynalink(fieldNum(WPPWorkOrderView, OrderRecId), caller, fieldNum(RORRentalOrderLineView, SalesLineRecId));
                    break;

                case tableNum(RORRentalFuelMgtView):
                    qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, OrderTableId)).value(SysQuery::value(tableNum(SalesLine)));
                    qbdsWorkOrderView.addDynalink(fieldNum(WPPWorkOrderView, OrderRecId), caller, fieldNum(RORRentalFuelMgtView, SalesLineRecId));
                    break;

                case tableNum(ProjTable):
                    QueryBuildDataSource qbdsWorkOrderLine = qbdsWorkOrderView.addDataSource(tableNum(WPPWorkOrderLine));
                    qbdsWorkOrderLine.relations(false);
                    qbdsWorkOrderLine.joinMode(JoinMode::ExistsJoin);
                    qbdsWorkOrderLine.addLink(fieldNum(WPPWorkOrderView, WorkOrderId), fieldNum(WPPWorkOrderLine, WorkOrderId));
                    qbr = qbdsWorkOrderLine.addRange(fieldNum(WPPWorkOrderLine, ProjId));
                    qbr.value(strFmt('((%1.%2 == "%3") || ((%4.%5 == %6) && (%4.%7 == %8)))'
                                    ,qbdsWorkOrderLine.name()
                                    ,fieldStr(WPPWorkOrderLine, ProjId)
                                    ,caller.(fieldNum(ProjTable, ProjId))
                                    ,qbdsWorkOrderView.name()
                                    ,fieldStr(WPPWorkOrderView, OrderTableId)
                                    ,caller.TableId
                                    ,fieldStr(WPPWorkOrderView, OrderRecId)
                                    ,caller.RecId));
                    break;

                case tableNum(SalesTable):
                    qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, OrderTableId)).value(SysQuery::value(tableNum(SalesLine)));
                    QueryBuildDataSource qbdsSalesLine = qbdsWorkOrderView.addDataSource(tableNum(SalesLine));
                    qbdsSalesLine.relations(false);
                    qbdsSalesLine.joinMode(JoinMode::ExistsJoin);
                    qbr = qbdsSalesLine.addRange(fieldNum(SalesLine, SalesId));
                    qbr.value(strFmt('((%1.%2 == "%3") && (%1.%4 == %5.%6))'
                                    ,qbdsSalesLine.name()
                                    ,fieldStr(SalesLine, SalesId)
                                    ,caller.(fieldNum(SalesTable, SalesId))
                                    ,fieldStr(SalesLine, RecId)
                                    ,qbdsWorkOrderView.name()
                                    ,fieldStr(WPPWorkOrderView, OrderRecId)));
                    break;

                case tableNum(CustTable):
                    qbdsWorkOrderView.addDynalink(fieldNum(WPPWorkOrderView, CompanyId), caller, fieldNum(CustTable, DataAreaId));
                    qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, CustVendAccountType)).value(SysQuery::value(CustVendACType::Cust));
                    qbdsWorkOrderView.addDynalink(fieldNum(WPPWorkOrderView, OrganizationParty), caller, fieldNum(CustTable, Party));
                    break;

                case tableNum(VendTable):
                    qbdsWorkOrderView.addDynalink(fieldNum(WPPWorkOrderView, CompanyId), caller, fieldNum(VendTable, DataAreaId));
                    qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, CustVendAccountType)).value(SysQuery::value(CustVendACType::Vend));
                    qbdsWorkOrderView.addDynalink(fieldNum(WPPWorkOrderView, OrganizationParty), caller, fieldNum(VendTable, Party));
                    break;

                case tableNum(smmBusRelTable):
                    CustTable custTable = CustTable::findByPartyRecId(caller.(fieldNum(smmBusRelTable, Party)));
                    VendTable vendTable = VendTable::findByPartyRecId(caller.(fieldNum(smmBusRelTable, Party)));

                    if (custTable)
                    {
                        qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, CompanyId)).value(custTable.DataAreaId);
                        qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, CustVendAccountType)).value(SysQuery::value(CustVendACType::Cust));
                        qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, OrganizationParty)).value(queryValue(custTable.Party));
                    }

                    if (vendTable)
                    {
                        qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, CompanyId)).value(vendTable.DataAreaId);
                        qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, CustVendAccountType)).value(SysQuery::value(CustVendACType::Vend));
                        qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, OrganizationParty)).value(queryValue(vendTable.Party));
                    }

                    if (!custTable && !vendTable)
                    {
                        qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, RecId)).value(SysQuery::valueEmptyString());
                    }
                    break;

                case tableNum(BSAContractTable):
                    BSAContractTable contractTable = caller;
                    qbdsWorkOrderView.addRange(fieldNum(WPPWorkOrderView, ProjInvoiceProjId)).value(contractTable.ProjInvoiceProjId);
                    break;

                case tableNum(BSAContractView):
                    BSAContractView contractView = caller;
                    
                    QueryBuildDataSource qbdsBSAContractTable = qbdsWorkOrderView.addDataSource(tableNum(BSAContractTable));
                    qbdsBSAContractTable.relations(false);
                    qbdsBSAContractTable.joinMode(JoinMode::ExistsJoin);
                    qbdsWorkOrderView.addLink(fieldNum(WPPWorkOrderView, ProjInvoiceProjId), fieldNum(BSAContractTable, ProjInvoiceProjId));

                    qbdsBSAContractTable.addRange(fieldNum(BSAContractTable, ContractId)).value(contractView.ContractId);
                    break;

                default:
                    // do nothing
                    break;
            }
        }

        super(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableQuery</Name>
				<Source><![CDATA[
    protected boolean isTableQuery()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged()
    {
        workOrderTableInteractionHelper = WPPWorkOrderTableInteractionHelper::construct();
        workOrderTableInteractionHelper.initHeaderActions(WPPWorkOrderTable::find(this.currentWorkOrderTable().WorkOrderId));
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonBill</Name>
				<Source><![CDATA[
    protected void setButtonBill()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, CtrlProposal), workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceProjId() && workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceProposal());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, CtrlInvoices), workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceProjId() && workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceJournal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when you must disable or enable a button in the action pane. The
    /// method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    protected void setButtonEnabled()
    {
        this.setButtonOtherPlaces();
        this.setButtonBill();
        this.setButtonMaintainNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonMaintainNew</Name>
				<Source><![CDATA[
    private void setButtonMaintainNew()
    {
        WPPWorkOrderView    workOrderView;
        boolean             hasBillingRules;
        boolean             canInvProposalCreated;
    
        workOrderView   = this.currentWorkOrderTable();
        hasBillingRules = PSAContractLineItems::hasBillingRules(workOrderView.ProjInvoiceProjId);
    
        if (hasBillingRules)
        {
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, PSAProjProposalSelection), false);
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, PSAProjProposalSelectionCLIN), true);
        }
        else
        {
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, PSAProjProposalSelection), true);
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, PSAProjProposalSelectionCLIN), false);
        }
    
        canInvProposalCreated = WPPWorkOrderTable::canCreateInvoiceProposal(workOrderView.WorkOrderId);
    
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, PSAProjProposalSelection), canInvProposalCreated);
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, PSAProjProposalSelectionCLIN), canInvProposalCreated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonOtherPlaces</Name>
				<Source><![CDATA[
    protected void setButtonOtherPlaces()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, WPPViewDetails), workOrderTableInteractionHelper.parmConnectedToOrigin());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, BOBObjectTableForm), workOrderTableInteractionHelper.parmButtonBusinessObjectEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, BOBMaintenanceHistory), workOrderTableInteractionHelper.parmButtonBusinessObjectEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, BOBObjectMaintenancePlan), workOrderTableInteractionHelper.parmButtonObjectMaintenancePlanEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderTableListPage, ChangeProjectContract), workOrderTableInteractionHelper.parmButtonChangeProjectContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPageType</Name>
				<Source><![CDATA[
    protected void setListPageType(ListPageArgs _listPageArgs)
    {
        workOrderTableListPage = (_listPageArgs && _listPageArgs.enumTypeParameter() == enumNum(WPPWorkOrderTableListPage)) ? _listPageArgs.enumParameter() : WPPWorkOrderTableListPage::Main;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>