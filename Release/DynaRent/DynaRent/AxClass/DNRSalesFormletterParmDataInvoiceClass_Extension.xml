<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesFormletterParmDataInvoiceClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormletterParmDataInvoice))]
public final class DNRSalesFormletterParmDataInvoiceClass_Extension
{    
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBasedOnPackingSlip</Name>
				<Source><![CDATA[
    protected void createBasedOnPackingSlip(Map _packingSlipJourLines, Map _emptyHeaders, Map _emptyLines)
    {
        using(DNRSalesFormLetterParmDataInvoiceReArrangeDisposableContext context = new DNRSalesFormLetterParmDataInvoiceReArrangeDisposableContext())
        {
            context.DNRParmMustReSelectAndDeleteEmptySalesParmTable(this.INVParmMustReSelectAndDeleteEmptySalesParmTable(_packingSlipJourLines));
            next createBasedOnPackingSlip(_packingSlipJourLines, _emptyHeaders, _emptyLines);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common _salesTable)
    {
        boolean     ret             = next mayJournalBePosted(_salesTable);
        SalesTable  hostSalesTable  = _salesTable as SalesTable;

        if (ret)
        {
            SalesFormLetterContract formLetterContract = this.INVParmFormLetterContract();
            
            ret = formLetterContract.parmCallerMenuItem() != menuitemActionStr(RORSalesFormLetter_InvoiceProj_Action)
                  || hostSalesTable.ProjId;

            if (formLetterContract.RORparmMustExcludeRentalOrders())
            {
                ret = (hostSalesTable.SalesType != SalesType::RORRental);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    protected void selectChooseLines(boolean _append)
    {
        if (this.lineListTableId() != tableNum(WMSShipment)
        && salesParmUpdate.SpecQty == SalesUpdate::PackingSlip 
        && !this.parmCreateFromLines())
        {
            parmLineMap = new Map(Types::String,Types::Record);
        }

        next selectChooseLines(_append);                
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        next updateQueryBuild();

        MenuItemNameAction callerMenuItem = this.INVParmFormLetterContract().parmCallerMenuItem();

        if (callerMenuItem == menuitemActionStr(SalesFormLetter_RORInvoice)
        ||  callerMenuItem == menuitemActionStr(RORSalesFormLetter_InvoiceProj_Action))
        {
            QueryBuildDataSource salesTableQBDS = chooseLines.query().dataSourceTable(tableNum(SalesTable));
            salesTableQBDS.addRange(fieldNum(SalesTable, SalesType)).value(SysQuery::value(SalesType::RORRental));

            if (RORParameters::find().RentalProjectInvoicing)
            {
                QueryBuildRange projIdQBR = salesTableQBDS.addRange(fieldNum(SalesTable, ProjId));
                projIdQBR.value(callerMenuItem == menuitemActionStr(SalesFormLetter_RORInvoice) ?
                                SysQuery::valueEmptyString() : SysQuery::valueNotEmptyString());
                projIdQBR.status(RangeStatus::Locked);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _salesParmUpdate)
    {
        INVInvoicingOptions invoicingOptions = INVInvoicingOptions::newSalesParmUpdate(_salesParmUpdate as SalesParmUpdate); 

        Common ret = next parmParmUpdate(_salesParmUpdate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVHasParmLine</Name>
				<Source><![CDATA[
    // extension methods
    public boolean INVHasParmLine(SalesLine _salesLine)
    {
        boolean ret;
    
        if (_salesLine)
        {
            if (parmLineMap && parmLineMap.exists(this.parmLineMapKey(_salesLine)))
            {
                ret = true;
            }            
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVqtySalesPurch</Name>
				<Source><![CDATA[
    public container INVqtySalesPurch(RORRentalLine _rentalLine, Qty _qty = 0)
    {
        return this.qtySales(_rentalLine, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVParmMustReSelectAndDeleteEmptySalesParmTable</Name>
				<Source><![CDATA[
    private boolean INVParmMustReSelectAndDeleteEmptySalesParmTable(Map _packingSlipJourLines)
    {
        boolean ret = false;

        if (_packingSlipJourLines && _packingSlipJourLines.elements())
        {
            MapEnumerator enumerator = _packingSlipJourLines.getEnumerator();

            if (enumerator.moveNext())
            {
                RecId               packingSlipJourRecId    = enumerator.currentKey();
                CustPackingSlipJour custPackingSLipJour     = CustPackingSlipJour::findRecId(packingSlipJourRecId);
                Query               chooseLinesQuery        = chooseLines.query();

                if (custPackingSLipJour.SalesType == SalesType::RORRental
                // When the user manually adds a range to the query (and the range has not been added through code), then it is actually not a
                // 'QueryBuildRange', but a 'QueryFilter'.
                &&  !chooseLinesQuery.findQueryFilter(chooseLinesQuery.dataSourceTable(tableNum(SalesLine)), fieldStr(SalesLine, BOBRentalSubStatus)))
                {
                    ret = true;
                }  
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>