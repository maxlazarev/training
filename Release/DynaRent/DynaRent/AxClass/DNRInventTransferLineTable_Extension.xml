<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventTransferLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventTransferLine))]
public final class DNRInventTransferLineTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        InventTransOriginId originIdShip = InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        InventTransOriginId originIdReceive = InventTransOriginTransferReceive::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);

        next delete();

        if (this.RORTradeType == RORTradeType::Rental || this.RORTradeType == RORTradeType::SubRental)
        {
            // Shipping transaction
            InventMovement inventMovement = InventMovement::construct(this, InventMovSubType::BOBCompensatingTrans);
            inventMovement.inventTransOriginId(originIdShip);

            InventUpd_DeleteMovement deleteMovement = InventUpd_DeleteMovement::newMovement(inventMovement);
            deleteMovement.BOBParmIsCompensatingTrans(true);
            deleteMovement.updateNow();

            // Receiving transaction
            inventMovement = InventMovement::construct(this, InventMovSubType::BOBCompensatingTrans);
            inventMovement.inventTransOriginId(originIdReceive);

            deleteMovement = InventUpd_DeleteMovement::newMovement(inventMovement);
            deleteMovement.BOBParmIsCompensatingTrans(true);
            deleteMovement.updateNow();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public void initFromInventTable(InventTable _inventTable, InventDimId _inventDimId)
    {
        next initFromInventTable(_inventTable, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = next validateField(_fieldIdToCheck);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBRentalSubStatus</Name>
				<Source><![CDATA[
    // extension methods

    public BOBRentalSubStatus BOBRentalSubStatus(InventLocationId _inventLocationId = this.inventTransferTable().InventLocationIdFrom)
    {
        BOBRentalTrans                  rentalTrans;
        InventTransOriginTransferShip   inventTransOriginTransferShip;
        ;
    
        select firstonly SubStatus from rentalTrans
        order by SubStatus asc
        where rentalTrans.TransType != BOBRentalTransType::InventCounting
        &&    rentalTrans.InventLocationId == _inventLocationId
            exists join inventTransOriginTransferShip
            where inventTransOriginTransferShip.InventTransOrigin       == rentalTrans.InventTransOrigin
            &&    inventTransOriginTransferShip.TransferShipLineNum     == this.LineNum
            &&    inventTransOriginTransferShip.TransferShipDataAreaId  == this.dataAreaId
            &&    inventTransOriginTransferShip.TransferShipId          == this.TransferId;
    
        return rentalTrans.SubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORgetLineNumContainer</Name>
				<Source><![CDATA[
    public container RORgetLineNumContainer(LineNum _lineNumCurrent, boolean _lineTypeNormal = true)
    {
        InventTransferLine inventTransferLine;

        select firstonly LineNum from inventTransferLine
        order by LineNum asc
        where inventTransferLine.TransferId == this.TransferId
        &&    inventTransferLine.LineNum > _lineNumCurrent;

        return [ inventTransferLine.LineNum, 0.0, 0.0 ];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>