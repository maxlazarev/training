<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ROROrderAmendmentDialogType_ChangeDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ROROrderAmendmentDialogType_ChangeDate extends ROROrderAmendmentDialogType
{
    boolean         validateConnectedToOrder;
    boolean         validatedOrderLineStatus;
    boolean         validateReturned;
    boolean         validateAutoCreateCreditNote;
    boolean         validateInvoiced;
    boolean         validateSynchronizeFromParent;
    boolean         validateExchange;
    boolean         validateReplacement;
    boolean         forceStopTierRangeRecalculation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValidationContainer</Name>
				<Source><![CDATA[
    public container getValidationContainer()
    {
        return [validateConnectedToOrder,
                validatedOrderLineStatus,
                validateReturned,
                validateAutoCreateCreditNote,
                validateInvoiced,
                validateSynchronizeFromParent,
                validateExchange,
                validateReplacement];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public InfologText getWarningText()
    {
        InfologText     warningText;
    
        warningText  = this.getWarningText_ConnectedOrder();
        warningText += !validateConnectedToOrder ? '\n' : '';
        warningText += this.getWarningText_OrderLineStatus();
        warningText += !validatedOrderLineStatus ? '\n' : '';
        warningText += this.getWarningText_Returned();
        warningText += !validateReturned ? '\n' : '';
        warningText += this.getWarningText_AutoCreateCreditNote();
        warningText += !validateAutoCreateCreditNote ? '\n' : '';
        warningText += this.getWarningText_Invoiced();
        warningText += !validateInvoiced ? '\n' : '';
        warningText += this.getWarningText_SynchronizeFromParent();
        warningText += !validateSynchronizeFromParent ? '\n' : '';
        warningText += this.getWarningText_Exchanged();
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_AutoCreateCreditNote</Name>
				<Source><![CDATA[
    private InfologText getWarningText_AutoCreateCreditNote()
    {
        PurchLine       purchLine;
        PurchTable      purchTable;
        SalesLine       salesLine;
        SalesTable      salesTable;
        InfologText     warningText;
    
        validateAutoCreateCreditNote = true;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
                break;
    
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_ConnectedOrder</Name>
				<Source><![CDATA[
    private InfologText getWarningText_ConnectedOrder()
    {
        PurchLine       purchLine;
        PurchTable      purchTable;
        SalesLine       salesLine;
        SalesTable      salesTable;
        InfologText     warningText;
        boolean         first;
        str             linkedOrders;
    
        #Evat_NL
    
        validateConnectedToOrder = true;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
                first     = true;
    
                while select SalesId from salesLine
                where salesLine.InventRefId == purchLine.PurchId
                &&    salesLine.InventRefTransId == purchLine.InventTransId
                {
                    if (first)
                    {
                        linkedOrders = salesLine.SalesId;
                        first = false;
                    }
                    else
                    {
                        linkedOrders += #CERT_KOMMASPACE + salesLine.SalesId;
                    }
                }
    
                if (linkedOrders)
                {
                    warningText = strFmt("@DNR6354", strLwr("@DNR1087"), strLwr("@DNR1715")) + ' ';
                    warningText += strFmt("@DNR6762", linkedOrders);
                    validateConnectedToOrder = false;
                }
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
                first     = true;
    
                while select SalesId from salesLine
                where salesLine.InventRefId == purchTable.PurchId
                {
                    if (first)
                    {
                        linkedOrders = salesLine.SalesId;
                        first = false;
                    }
                    else
                    {
                        linkedOrders += #CERT_KOMMASPACE + salesLine.SalesId;
                    }
                }
    
                if (linkedOrders)
                {
                    warningText = strFmt("@DNR6354", strLwr("@DNR1087"), strLwr("@DNR1715")) + ' ';
                    warningText += strFmt("@DNR6762", linkedOrders);
                    validateConnectedToOrder = false;
                }
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                first     = true;
    
                while select PurchId from purchLine
                where purchLine.PurchId == salesLine.InventRefId
                &&    purchLine.InventTransId == salesLine.InventRefTransId
                {
                    if (first)
                    {
                        linkedOrders = purchLine.PurchId;
                        first = false;
                    }
                    else
                    {
                        linkedOrders += #CERT_KOMMASPACE + purchLine.PurchId;
                    }
                }
    
                if (linkedOrders)
                {
                    warningText = strFmt("@DNR6354", strLwr("@DNR3227"), strLwr("@DNR1539")) + ' ';
                    warningText += strFmt("@DNR6762", linkedOrders);
                    validateConnectedToOrder = false;
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
                first      = true;
    
                while select PurchId from purchLine
                group by PurchId
                    join TableId from salesLine
                    group by SalesId
                    where salesLine.SalesId == salesTable.SalesId
                    &&    salesLine.InventRefId == purchLine.PurchId
                    &&    salesLine.InventRefTransId == purchLine.InventTransId
                {
                    if (first)
                    {
                        linkedOrders = purchLine.PurchId;
                        first = false;
                    }
                    else
                    {
                        linkedOrders += #CERT_KOMMASPACE + purchLine.PurchId;
                    }
                }
    
                if (linkedOrders)
                {
                    warningText = strFmt("@DNR6354", strLwr("@DNR3227"), strLwr("@DNR1539")) + ' ';
                    warningText += strFmt("@DNR6762", linkedOrders);
                    validateConnectedToOrder = false;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_Exchanged</Name>
				<Source><![CDATA[
    private InfologText getWarningText_Exchanged()
    {
        SalesLine       salesLine, salesLineOther;
        SalesTable      salesTable;
        InfologText     warningText;
    
        validateExchange = true;
        validateReplacement = true;
    
        switch (common.TableId)
        {
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                if (salesLine.RORRecIdExchanged)
                {
                    warningText = "@DNR6405";
    
                    validateExchange = false;
                }
                else
                {
                    select firstOnly RecId from salesLineOther
                    where salesLineOther.RORRecIdExchanged == salesLine.RecId;
    
                    if (salesLineOther.RecId)
                    {
                        warningText = "@DNR6772";
                        validateReplacement = false;
                    }
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
                select firstonly RecId from salesLine
                where salesLine.SalesId == salesTable.SalesId
                &&    salesLine.RORRecIdExchanged;
    
                if (salesLine.RecId)
                {
                    warningText = "@DNR6406";
    
                    validateExchange = false;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_Invoiced</Name>
				<Source><![CDATA[
    protected InfologText getWarningText_Invoiced()
    {
        PurchLine           purchLine;
        PurchTable          purchTable;
        SalesLine           salesLine;
        SalesTable          salesTable;
        InfologText         warningText;
    
        validateInvoiced = true;
    
        if (this.allowChangeDateForInvoicedPeriods())
        {
            return warningText;
        }
    
        switch (common.TableId)
        {
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
    
                select firstonly RecId from purchLine
                where purchLine.PurchId            == purchTable.PurchId
                &&    purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Invoiced;
    
                if (purchLine.RecId)
                {
                    warningText = strFmt("@DNR6351", strLwr("@DNR5973"));
    
                    select firstonly RecId from purchLine
                    where purchLine.PurchId           == purchTable.PurchId
                    &&    purchLine.BOBRentalSubStatus < BOBRentalSubStatus::Invoiced;
    
                    validateInvoiced = !purchLine.RecId;
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
    
                select firstOnly RecId from salesLine
                where salesLine.SalesId            == salesTable.SalesId
                &&    salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Invoiced;
    
                if (salesLine.RecId)
                {
                    warningText = strFmt("@DNR6351", strLwr("@DNR5966"));
    
                    select firstOnly RecId from salesLine
                    where salesLine.SalesId           == salesTable.SalesId
                    &&    salesLine.BOBRentalSubStatus < BOBRentalSubStatus::Invoiced;
    
                    validateInvoiced = !salesLine.RecId;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningText_OffRentBeforeInvoiced</Name>
				<Source><![CDATA[
    protected boolean showWarningText_OffRentBeforeInvoiced(TransDateTime _newOffRentDateTime)
    {
        boolean ret = false;
        // Value can be changed in different model.
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_OffRentBeforeInvoiced</Name>
				<Source><![CDATA[
    public InfologText getWarningText_OffRentBeforeInvoiced(TransDateTime _newOffRentDateTime)
    {
        InfologText         warningText;
        boolean             showWarning;
            
        if (this.allowChangeDateForInvoicedPeriods())
        {
            return warningText;
        }
    
        switch (common.TableId)
        {
            case tableNum(PurchTable),
                 tableNum(SalesTable),
                 tableNum(SalesLine),
                 tableNum(PurchLine):
                if (this.showWarningText_OffRentBeforeInvoiced(_newOffRentDateTime))
                {
                    warningText = strFmt("@DNR8503", DateTimeUtil::applyTimeZoneOffset(_newOffRentDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_OrderLineStatus</Name>
				<Source><![CDATA[
    private InfologText getWarningText_OrderLineStatus()
    {
        PurchLine       purchLine;
        PurchTable      purchTable;
        SalesLine       salesLine;
        SalesTable      salesTable;
        InfologText     warningText;
        str             enabledDates;
    
        #Evat_NL
    
        validatedOrderLineStatus = true;
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RORPreparationDateTime)))
        {
            enabledDates = configurationkeyId2pName(configurationKeyNum(RORPreparationDateTime));
        }
    
        if (isConfigurationkeyEnabled(configurationKeyNum(ROROutboundDateTime)))
        {
            enabledDates += enabledDates ? #CERT_KOMMASPACE + configurationkeyId2pName(configurationKeyNum(ROROutboundDateTime)) : configurationkeyId2pName(configurationKeyNum(ROROutboundDateTime));
        }
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRequestedDeliveryDateTime)))
        {
            enabledDates += enabledDates ? #CERT_KOMMASPACE + configurationkeyId2pName(configurationKeyNum(RORRequestedDeliveryDateTime)) : configurationkeyId2pName(configurationKeyNum(RORRequestedDeliveryDateTime));
        }
    
        if (isConfigurationkeyEnabled(configurationKeyNum(ROROnRentDateTime)))
        {
            enabledDates += enabledDates ? #CERT_KOMMASPACE + configurationkeyId2pName(configurationKeyNum(ROROnRentDateTime)) : configurationkeyId2pName(configurationKeyNum(ROROnRentDateTime));
        }
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
    
                if (purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Delivered)
                {
                    warningText = strFmt("@DNR6349", enabledDates, strLwr(enum2str(BOBRentalSubStatus::Delivered)));
                    validatedOrderLineStatus = false;
                }
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
    
                select maxOf(BOBRentalSubStatus) from purchLine
                where purchLine.PurchId == purchTable.PurchId;
    
                if (purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Delivered)
                {
                    warningText = strFmt("@DNR6348", enabledDates);
                    validatedOrderLineStatus = false;
                }
                break;
    
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
    
                if (salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Delivered)
                {
                    warningText = strFmt("@DNR6349", enabledDates, strLwr(enum2str(BOBRentalSubStatus::Delivered)));
                    validatedOrderLineStatus = false;
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
    
                select maxof(BOBRentalSubStatus), RecId from salesLine
                where salesLine.SalesId == salesTable.SalesId;
    
                if (salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Delivered)
                {
                    warningText = strFmt("@DNR6347", enabledDates);
                    validatedOrderLineStatus = false;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowChangeDateForInvoicedPeriods</Name>
				<Source><![CDATA[
    protected boolean allowChangeDateForInvoicedPeriods()
    {
        boolean ret = true;
        INVInvoiceProfileId invoiceProfileId;
        PurchLine   purchLine;
        PurchTable  purchTable;
        SalesLine   salesLine;
        SalesTable  salesTable;

        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;    
                invoiceProfileId = purchLine.INVInvoiceProfileId;
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
                invoiceProfileId = purchTable.INVInvoiceProfileId;
                break;
    
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                invoiceProfileId = salesLine.INVInvoiceProfileId;
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
                invoiceProfileId = salesTable.INVInvoiceProfileId;
                break;
    
            default:
                break;
        }

        if (invoiceProfileId)
        {
            ret = FINRentalInvoiceProfile::find(invoiceProfileId).AllowChangeDateForInvoicedPeriods;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_Returned</Name>
				<Source><![CDATA[
    protected InfologText getWarningText_Returned()
    {
        PurchLine       purchLine;
        PurchTable      purchTable;
        SalesLine       salesLine;
        SalesTable      salesTable;
        InfologText     warningText;
        str             enabledDates;
    
        validateReturned = true;
    
        if (this.allowChangeDateForInvoicedPeriods())
        {
            return warningText;
        }
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
    
                if (purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned)
                {
                    //warningText = strFmt("@DNR6350", strLwr("@DNR5973"));
                    validateReturned = false;
                }
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
    
                select RecId from purchLine
                where purchLine.PurchId == purchTable.PurchId
                && purchLine.RORTradeType != RORTradeType::SalesPurch
                && purchLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned;
    
                if (purchLine.RecId)
                {
                    //warningText = strFmt("@DNR6350", strLwr("@DNR5973"));
    
                    select minOf(BOBRentalSubStatus) from purchLine
                    where purchLine.PurchId == purchTable.PurchId
                    && purchLine.RORTradeType != RORTradeType::SalesPurch;
    
                    validateReturned = purchLine.BOBRentalSubStatus < BOBRentalSubStatus::Returned;
                }
                break;
    
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
    
                if (salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned)
                {
                    //warningText = strFmt("@DNR6350", strLwr("@DNR5966"));
                    validateReturned = false;
                }
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
    
                select RecId from salesLine
                where salesLine.SalesId == salesTable.SalesId
                && salesLine.RORTradeType != RORTradeType::SalesPurch
                && salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned;
    
                if (salesLine.RecId)
                {
                    //warningText = strFmt("@DNR6347", enabledDates, strLwr("@DNR5966"));
    
                    select minOf(BOBRentalSubStatus) from salesLine
                    where salesLine.SalesId == salesTable.SalesId
                    && salesLine.RORTradeType != RORTradeType::SalesPurch;
    
                    validateReturned = salesLine.BOBRentalSubStatus < BOBRentalSubStatus::Returned;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText_SynchronizeFromParent</Name>
				<Source><![CDATA[
    private InfologText getWarningText_SynchronizeFromParent()
    {
        PurchLine       purchLine;
        SalesLine       salesLine;
        InfologText     warningText;
    
        validateSynchronizeFromParent = true;
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
    
                if (purchLine.RORParentLineRecId
                &&  purchLine.RORRentalDateTimesHost::rentalDateTimes().SynchronizeFromParent)
                {
                    if (warningText)
                    {
                        warningText += '\n';
                    }
                    warningText += "@DNR6342";
    
                    validateSynchronizeFromParent = false;
                }
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
    
                if (salesLine.RORParentLineRecId
                &&  salesLine.RORRentalDateTimesHost::rentalDateTimes().SynchronizeFromParent)
                {
                    if (warningText)
                    {
                        warningText += '\n';
                    }
                    warningText += "@DNR6342";
    
                    validateSynchronizeFromParent = false;
                }
                break;
    
            default:
                break;
        }
    
        return warningText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    
        // BP Deviation documented - DynaRent
        rentalDateTimes.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonType</Name>
				<Source><![CDATA[
    public DNRReasonType reasonType()
    {
        return DNRReasonType::DateChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsBegin;

        if (tmpOrderAmendmentDialogTable.TerminationNote)
        {
            DNRAdditionalNoteTable  additionalNoteTable;

            select firstonly forUpdate additionalNoteTable
            where additionalNoteTable.RefTableId == common.TableId
            &&    additionalNoteTable.RefRecId   == common.RecId;
    
            additionalNoteTable.initFromCommon(common);
            additionalNoteTable.TerminationNote = tmpOrderAmendmentDialogTable.TerminationNote;
            additionalNoteTable.write(); // insert or update
        }
    
        if (tmpOrderAmendmentDialogTable.TerminationNumber)
        {
            orderAmendmentLog.initValue();
            orderAmendmentLog.DNRReasonType = this.reasonType();
            orderAmendmentLog.initFromTmpOrderAmendmentDialogTable(tmpOrderAmendmentDialogTable);
            orderAmendmentLog.initFromSalesPurchLine(common);
            orderAmendmentLog.setLogTextGenerated(tmpOrderAmendmentDialogTable,
                                                  this.reasonType());
            orderAmendmentLog.insert();
        }
    
        Counter fieldCounter;
        boolean updateSourceLine;
        RORRentalDateTimes rentalDateTimesOrig = this.findRentalDateTimes();
        DictTable dictTable = new DictTable(rentalDateTimesOrig.TableId);

        // Loop through all the fields of the RORRentalDateTimes table
        for (fieldCounter = 1; fieldCounter <= dictTable.fieldCnt(); fieldCounter++)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(fieldCounter);
            DictField dictField = dictTable.fieldObject(fieldId);
    
            // When the current field is not a system field
            // and the value is changed then create a new log record
            if (!dictField.isSystem()
            &&  dictField.isSql()
            &&  dictField.id() != fieldNum(RORRentalDateTimes, ParentRentalDateTimes)
            &&  dictField.id() != fieldNum(RORRentalDateTimes, SynchronizeFromParent)
            &&  rentalDateTimesOrig.(fieldId) != rentalDateTimes.(fieldId))
            {
                if (dictField.id() != fieldNum(RORRentalDateTimes, RefTableId)
                &&  dictField.id() != fieldNum(RORRentalDateTimes, RefRecId))
                {
                    // Remember to set salesPurchLine.RORIsModified to Yes when inserting amendment log record.
                    orderAmendmentLog.clear();
                    orderAmendmentLog.initValue();
                    orderAmendmentLog.DNRReasonType = this.reasonType();
                    orderAmendmentLog.initFromTmpOrderAmendmentDialogTable(tmpOrderAmendmentDialogTable);
                    orderAmendmentLog.initFromSalesPurchLine(common);
                    updateSourceLine = true;
    
                    orderAmendmentLog.setLogTextGenerated(tmpOrderAmendmentDialogTable,
                                                            this.reasonType(),
                                                            RORRentalDateTimes::fieldId2DateTimeType(fieldId),
                                                            rentalDateTimesOrig.(fieldId),
                                                            rentalDateTimes.(fieldId));
                    orderAmendmentLog.insert();
                }
            }
        }
    
        if (updateSourceLine)
        {
            switch (common.TableId)
            {
                case tableNum(PurchLine),
                        tableNum(SalesLine):
                    //orderAmendmentLog.initFromSalesPurchLine(common);
                    this.updateSourceLine(common);
                    break;
    
                case tableNum(PurchTable),
                        tableNum(SalesTable):
                    //orderAmendmentLog.initFromSalesPurchTable(common);
                    this.updateSourceTable();
                    break;
    
                default:
                    break;
            }
    
            updateSourceLine = false;
        }
    
        this.updateRentalDates();
        ttsCommit;
    
        if (confirmOrder)
        {
            this.confirmOrder();
        }
        else
        {
            this.WPPSynchronizeWorkOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfoMessage</Name>
				<Source><![CDATA[
    public void showInfoMessage()
    {
        SalesLine   salesLine;
        ;
    
        if (common.TableId == tableNum(SalesLine))
        {
            salesLine = common;
            if (!salesLine.WPPCanChangeRentalDates())
            {
                throw error("@DNR8489");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalDates</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    private void updateRentalDates()
    {
        RORRentalDateTimes  rentalDateTimesUpdate, rentalDateTimesLineUpdate;
        SalesLine           salesLine;
        PurchLine           purchLine;
        SalesTable          salesTable;
        PurchTable          purchTable;
    
        rentalDateTimesUpdate = RORRentalDateTimes::findReference(common.TableId, common.RecId, true);
        rentalDateTimesUpdate.initFromRentalDateTimes(rentalDateTimes);
    
        switch (common.TableId)
        {
            case tableNum(PurchLine):
                purchLine = common as PurchLine;
                rentalDateTimesUpdate.SynchronizeFromParent = NoYes::No;
                break;
    
            case tableNum(SalesLine):
                salesLine = common as SalesLine;
                rentalDateTimesUpdate.SynchronizeFromParent = NoYes::No;
                break;
    
            case tableNum(PurchTable):
                purchTable = common as PurchTable;
                update_recordSet rentalDateTimesLineUpdate
                setting SynchronizeFromParent = NoYes::No
                where rentalDateTimesLineUpdate.ParentRentalDateTimes == rentalDateTimesUpdate.RecId
                    exists join purchLine
                    where purchLine.PurchId            == purchTable.PurchId
                    &&    purchLine.TableId            == rentalDateTimesLineUpdate.RefTableId
                    &&    purchLine.RecId              == rentalDateTimesLineUpdate.RefRecId
                    &&    purchline.BOBRentalSubStatus >= BOBRentalSubStatus::Returned;
                break;
    
            case tableNum(SalesTable):
                salesTable = common as SalesTable;
                update_recordSet rentalDateTimesLineUpdate
                setting SynchronizeFromParent = NoYes::No
                where rentalDateTimesLineUpdate.ParentRentalDateTimes == rentalDateTimesUpdate.RecId
                    exists join salesLine
                    where salesLine.SalesId            == salesTable.SalesId
                    &&    salesLine.TableId            == rentalDateTimesLineUpdate.RefTableId
                    &&    salesLine.RecId              == rentalDateTimesLineUpdate.RefRecId
                    &&    salesLine.BOBRentalSubStatus >= BOBRentalSubStatus::Returned;
                break;
    
            default:
                break;
        }
    
        rentalDateTimesUpdate.update(null, (rentalDateTimesUpdate.RefTableId == tableNum(SalesLine) || rentalDateTimesUpdate.RefTableId == tableNum(PurchLine)), forceStopTierRangeRecalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPSynchronizeWorkOrder</Name>
				<Source><![CDATA[
    protected void WPPSynchronizeWorkOrder()
    {
        WPPWorkOrderTable   workOrderTable;
        SalesTable          salesTable;
        SalesLine           salesLine;
    
        super();

        switch (common.TableId)
        {
            case tableNum(SalesLine):
                
                while select workOrderTable
                where workOrderTable.OrderTableId == common.TableId
                &&    workOrderTable.OrderRecId   == common.RecId
                {
                    workOrderTable.updateResourcesFromRentalDateChange();
                }
    
                while select workOrderTable
                    exists join salesLine
                    where salesLine.TableId ==  workOrderTable.OrderTableId
                    &&    salesLine.RecId == workOrderTable.OrderRecId
                    &&    salesLine.RORParentLineRecId == common.RecId
                {
                    workOrderTable.updateResourcesFromRentalDateChange();
                }
    
                break;
    
            case tableNum(SalesTable):
                salesTable = common;
    
                while select workOrderTable
                where workOrderTable.OrderTableId == salesTable.TableId
                &&    workOrderTable.OrderRecId   == salesTable.RecId
                {
                    workOrderTable.updateResourcesFromRentalDateChange();
                }
    
                while select workOrderTable
                    exists join salesLine
                    where salesLine.TableId ==  workOrderTable.OrderTableId
                    &&    salesLine.RecId   == workOrderTable.OrderRecId
                    &&    salesLine.SalesId == salesTable.SalesId
                {
                    workOrderTable.updateResourcesFromRentalDateChange();
                }
                break;
    
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalUserInteraction</Name>
				<Source><![CDATA[
    protected DialogButton additionalUserInteraction()
    {
        DialogButton        dialogButton = super();
        INVInvoiceProfileId invoiceProfileId = this.getInvoiceProfile(common);

        if (invoiceProfileId && FINRentalInvoiceProfile::find(invoiceProfileId).PriceTierMultiplierCalcMethod == INVPriceTierMultiplierCalcMethod::Creating)
        {
            dialogButton = Box::yesNoCancel("@DNR:OnCreationTierRecalculationAuto", DialogButton::No);
            forceStopTierRangeRecalculation = (dialogButton != DialogButton::Yes);
        }

        return dialogButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceProfile</Name>
				<Source><![CDATA[
    protected INVInvoiceProfileId getInvoiceProfile(Common _common)
    {
        INVInvoiceProfileId invoiceProfileId;

        switch (common.TableId)
        {
            case tableNum(PurchLine):
                PurchLine purchLine = common as PurchLine;
                invoiceProfileId = purchLine.INVInvoiceProfileId;
                break;
    
            case tableNum(PurchTable):
                PurchTable purchTable = common as PurchTable;
                invoiceProfileId = purchTable.INVInvoiceProfileId;
                break;
    
    
            case tableNum(SalesLine):
                SalesLine salesLine = common as SalesLine;
                invoiceProfileId = salesLine.INVInvoiceProfileId;
                break;
    
            case tableNum(SalesTable):
                SalesTable salesTable = common as SalesTable;
                invoiceProfileId = salesTable.INVInvoiceProfileId;
                break;
    
            default:
                break;
        }

        return invoiceProfileId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>