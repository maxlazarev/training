<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWMSPickingRegistrationForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(WMSPickingRegistration))]
public final class DNRWMSPickingRegistrationForm_Extension
{
    private WPPPickingRegistration  pickingRegistration;
    private boolean                 doRefreshCallerDatasource;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pickAllLines</Name>
				<Source><![CDATA[
    public void pickAllLines()
    {
        if (pickingRegistration)
        {
            pickingRegistration.parmRegistrationIsUpdated(true);
        }

        doRefreshCallerDatasource = true;

        next pickAllLines();

        doRefreshCallerDatasource = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    public void doResearch()
    {
        next doResearch();

        if (salesTable_ds)
        {
            salesTable_ds.research(true);
        }

        if (inventTransferTable_ds)
        {
            inventTransferTable_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickSelectedLines</Name>
				<Source><![CDATA[
    public void pickSelectedLines()
    {
        if (pickingRegistration)
        {
            pickingRegistration.parmRegistrationIsUpdated(true);
        }

        doRefreshCallerDatasource = true;

        next pickSelectedLines();

        doRefreshCallerDatasource = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerDatasource</Name>
				<Source><![CDATA[
    public void refreshCallerDatasource()
    {
        next refreshCallerDatasource();

        // In certain scenarios, the below caller datasources should NOT be refreshed/researched by calling this method (e.g., when unpicking a line,
        // when splitting a line, etc.). In those scenarios, the caller datasources shoud be refreshed/researched by calling this form's
        // 'doResearch()' method (i.e., see the comment at the method 'doResearch()').
        if (doRefreshCallerDatasource)
        {
            if (salesTable_ds)
            {
                salesTable_ds.research(true);
            }
        
            if (inventTransferTable_ds)
            {
                inventTransferTable_ds.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBRentalTypeId</Name>
				<Source><![CDATA[
    // extension methods

    public BOBRentalTypeId BOBRentalTypeId()
    {
        SalesLine salesLine = SalesLine::findInventTransId(WMSOrderTrans.inventTransId);
    
        return salesLine ? salesLine.BOBRentalTypeIdRequested : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORResearchSalesLines</Name>
				<Source><![CDATA[
    public void RORResearchSalesLines()
    {
        if (salesTable_ds)
        {
            salesTable_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmPickingRegistration</Name>
				<Source><![CDATA[
    public WPPPickingRegistration DNRparmPickingRegistration(WPPPickingRegistration _pickingRegistration = pickingRegistration)
    {
        pickingRegistration = _pickingRegistration;
        return pickingRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_element_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods

    [FormEventHandler(formStr(WMSPickingRegistration), FormEventType::Initialized)]
    public static void DNREvent_element_OnInitialized(xFormRun _sender, FormEventArgs _eventArgs)
    {
        FormRun formRun = _sender as FormRun;
        Object  hostObj = formRun as Object;

        if (formRun.args()
        &&  formRun.args().caller()
        &&  classIdGet(formRun.args().caller()) == classNum(WPPPickingRegistration))
        {
            hostObj.DNRparmPickingRegistration(formRun.args().caller());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_WMSOrderTransDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(WMSPickingRegistration, WMSOrderTrans), FormDataSourceEventType::Initialized)]
    public static void DNREvent_WMSOrderTransDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        _sender.cacheAddMethod(tableMethodStr(WMSOrderTrans, BOBdisplayMaintenanceWarning));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_inventDimDS_inventSerialId_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(WMSPickingRegistration, InventDim, inventSerialId), FormDataFieldEventType::Validated)]
    public static void DNREvent_inventDimDS_inventSerialId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormDataFieldCancelEventArgs    args            = _eventArgs as FormDataFieldCancelEventArgs;
        boolean                         doCancel        = args.cancel();

        SalesLine                       salesLine;
        WMSOrderTrans                   WMSOrderTrans   = _sender.datasource().formRun().dataSource(formDataSourceStr(WMSPickingRegistration, WMSOrderTrans)).cursor() as WMSOrderTrans;
        InventDim                       inventDim       = _sender.datasource().cursor() as InventDim;
        boolean                         ret             = !doCancel;

        // This handler is not executed if 'super()' returns false.
        // We therefore do not have to check the return value before executing our custom code.
        if (ret && WMSOrderTrans.inventTransType == InventTransType::Sales)
        {
            ret = WMSOrderTrans.BOBValidateObjectAssignment();
        }
            
        if (ret && WMSOrderTrans.inventTransType == InventTransType::Sales)
        {
            select firstOnly salesLine
                where salesLine.InventTransId == WMSOrderTrans.inventTransId;
        }
            
        if (salesLine)
        {
            ret = salesLine.BOBValidateObjectAssignment(inventDim.InventSerialId, InventTable::find(WMSOrderTrans.ItemId));
        }

        if (!ret)
        {
            args.cancel(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>