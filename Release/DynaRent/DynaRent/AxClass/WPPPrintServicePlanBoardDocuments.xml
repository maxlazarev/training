<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPPrintServicePlanBoardDocuments</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPPrintServicePlanBoardDocuments extends RunBase
{
    List                        workOrderLineRecIdList;
    Range                       workOrderLineRecId;

    NoYes                       printWorkOrderConfirmation;
    NoYes                       printWorkOrderTaskConfirmation;
    NoYes                       printWorkOrderOverview;

    SRSPrintDestinationSettings printDestinationSettings;
    SRSPrintDestinationSettings tempPrintDestinationSettings;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
    
        dialog = Dialog::newFormnameRunbase(formStr(WPPPrintServicePlanBoardDocuments), this);
    
        dialog = this.dialogInternal(dialog);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret;
    
        ret = super();
    
        this.readSettings();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintWorkOrderConfirmation</Name>
				<Source><![CDATA[
    public NoYes parmPrintWorkOrderConfirmation(NoYes _printWorkOrderConfirmation = printWorkOrderConfirmation)
    {
        printWorkOrderConfirmation = _printWorkOrderConfirmation;
    
        return printWorkOrderConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintWorkOrderOverview</Name>
				<Source><![CDATA[
    public NoYes parmPrintWorkOrderOverview(NoYes _printWorkOrderOverview = printWorkOrderOverview)
    {
        printWorkOrderOverview = _printWorkOrderOverview;
    
        return printWorkOrderOverview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintWorkOrderTaskConfirmation</Name>
				<Source><![CDATA[
    public NoYes parmPrintWorkOrderTaskConfirmation(NoYes _printWorkOrderTaskConfirmation = printWorkOrderTaskConfirmation)
    {
        printWorkOrderTaskConfirmation = _printWorkOrderTaskConfirmation;
    
        return printWorkOrderTaskConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderLineRecIdList</Name>
				<Source><![CDATA[
    public List parmWorkOrderLineRecIdList(List _workOrderLineRecIdList = workOrderLineRecIdList)
    {
        workOrderLineRecIdList = _workOrderLineRecIdList;
    
        return workOrderLineRecIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>printDestinationSettings</c> property.
    /// </summary>
    /// <param name="value">
    ///    The new value of the <c>printDestinationSettings</c> property; optional.
    /// </param>
    /// <returns>
    ///    The current <c>SRSPrintDestinationSettings</c> property.
    /// </returns>
    public SRSPrintDestinationSettings printDestinationSettings(SRSPrintDestinationSettings value = printDestinationSettings)
    {
        printDestinationSettings = value;
    
        if (printDestinationSettings == null)
        {
            // create and initialize the default SRSPrintDestinationSettings object
            printDestinationSettings = new SRSPrintDestinationSettings();
        }
    
        return printDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    private void printReport(QueryName          _queryName,
                             TableId            _queryDataSource,
                             FieldId            _queryFieldId,
                             str                _dynamicParameter,
                             SRSCatalogItemName _reportName,
                             boolean            _useLineNumber = false)
    {
        ListEnumerator                          listEnumerator;
        WPPWorkOrderTable                       workOrderTable;
        WPPWorkOrderLine                        workOrderLine;
        WPPWorkOrderLineResource                workOrderLineResource;
        DataArea                                dataArea;
        SrsReportDataContract                   contract;
        Query                                   query;
        QueryBuildDataSource                    qbds;
        QueryBuildRange                         qbr;
        Map                                     queries;
        Filename                                filename, filenameOrig;
        str                                     suffix;
        int                                     position;
        Counter                                 counter;
    
        listEnumerator = workOrderLineRecIdList.getEnumerator();
    
        while (listEnumerator.moveNext())
        {
            select firstOnly WorkOrderId, CompanyId from workOrderTable
                join LineNumber from workOrderLine
                where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                    exists join workOrderLineResource
                    where workOrderLineResource.WorkOrderLineRecId == workOrderLine.RecId
                    &&    workOrderLineResource.RecId              == listEnumerator.current();
    
            select firstOnly Id from dataArea
            where dataArea.id == workOrderTable.CompanyId
            &&    dataArea.isVirtual == NoYes::No;
    
            changeCompany(dataArea ? dataArea.id : curext())
            {
                query = new Query(_queryName);
                qbds = query.dataSourceTable(_queryDataSource);
                qbr = SysQuery::findOrCreateRange(qbds, _queryFieldId);
                qbr.value(SysQuery::value(workOrderTable.WorkOrderId));
    
                queries = new Map(Types::String, Types::Class);
                queries.insert(_dynamicParameter, query);

                if (_useLineNumber)
                {
                    contract.parmRdlContract().setValue('LineNumber', workOrderLine.LineNumber);
                }
                contract.parmReportCaption("@DNR6789");
                contract.parmQueryContracts(queries);
                contract.parmPrintSettings(printDestinationSettings);
    
                if (printDestinationSettings.printMediumType() == SRSPrintMediumType::File
                &&  SysFormUtil::DNRFileExists(printDestinationSettings.fileName()))
                {
                    if (!counter)
                    {
                        filenameOrig = printDestinationSettings.fileName();
                        position = strFind(filenameOrig, '.', strLen(filenameOrig), -strLen(filenameOrig));
    
                        suffix = subStr(filenameOrig, position, strLen(filenameOrig));
                        filenameOrig = strDel(filenameOrig, strLen(filenameOrig), -strLen(suffix));
                    }
    
                    counter++;
                    filename = strFmt('%1_%2%3', filenameOrig, counter, suffix);
                    printDestinationSettings.fileName(filename);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads saved print destination settings that are used to display the report.
    /// </summary>
    public void readPrintDestinationSettings()
    {
        SRSReportPrintDestinationSettings printDestinationSettingsTable;
        SRSPrintDestinationSettings printDestSettings;
    
        select firstonly printDestinationSettingsTable
        where printDestinationSettingsTable.UserId     == curUserId()
        &&    printDestinationSettingsTable.ReportName == this.name();
    
        if (printDestinationSettingsTable != null
        &&  printDestinationSettingsTable.PrintDestinationSettings != conNull())
        {
            printDestSettings = new SRSPrintDestinationSettings(printDestinationSettingsTable.PrintDestinationSettings);
            if (printDestSettings != null)
            {
                this.printDestinationSettings(printDestSettings);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the settings saved for this report.
    /// </summary>
    public void readSettings()
    {
        this.readPrintDestinationSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (printWorkOrderConfirmation)
        {
            this.printReport(queryStr(WPPWorkOrderConfirmation),
                             tableNum(WPPWorkOrderReports),
                             fieldNum(WPPWorkOrderReports, WorkOrderId),
                             'WPPWorkOrderConfirmat_DynamicParameter',
                             ssrsReportStr(WPPWorkOrderConfirmation, WorkOrderConfirmation));
        }
    
        if (printWorkOrderTaskConfirmation)
        {
            this.printReport(queryStr(WPPWorkOrderConfirmation),
                             tableNum(WPPWorkOrderReports),
                             fieldNum(WPPWorkOrderReports, WorkOrderId),
                             'WPPWorkOrderConfirmat_DynamicParameter',
                             ssrsReportStr(WPPWorkOrderConfirmation, WorkOrderConfirmation),
                             true);
        }
    
        if (printWorkOrderOverview)
        {
            this.printReport(queryStr(WPPWorkOrderOverview),
                             tableNum(WPPWorkOrderReports),
                             fieldNum(WPPWorkOrderReports, WorkOrderId),
                             'WPPWorkOrderOverview_DynamicParameter',
                             ssrsReportStr(WPPWorkOrderOverview, Report));
        }
    
        this.saveSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves print destination settings that are used to display the report.
    /// </summary>
    public void savePrintDestinationSettings()
    {
        // perform the save on the server to minimize RPC calls
        WPPPrintServicePlanBoardDocuments::savePrintDestinationSettingsOnServer(this.name(), this.printDestinationSettings());
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the current values that are used to display the report
    /// </summary>
    public void saveSettings()
    {
        this.savePrintDestinationSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tempPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>tempPrintDestinationSettings</c> property. This property is used
    ///    by the <c>SRSReportRunForm</c> form.
    /// </summary>
    /// <param name="value">
    ///    The new value of the <c>tempPrintDestinationSettings</c> property; optional.
    /// </param>
    /// <returns>
    ///    The current value of the <c>tempPrintDestinationSettings</c> property.
    /// </returns>
    public SRSPrintDestinationSettings tempPrintDestinationSettings(SRSPrintDestinationSettings value = tempPrintDestinationSettings)
    {
        container c;
        tempPrintDestinationSettings = value;
    
        if (tempPrintDestinationSettings == null)
        {
            // make a copy of the current printDestinationSettings
            c = this.printDestinationSettings().pack();
            tempPrintDestinationSettings = new SRSPrintDestinationSettings(c);
        }
    
        return tempPrintDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPPrintServicePlanBoardDocuments construct()
    {
        return new WPPPrintServicePlanBoardDocuments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WPPPrintServicePlanBoardDocuments   printServicePlanBoardDocuments;
        List                                workOrderLineRecIdList;
    
        workOrderLineRecIdList = _args.parmObject();
    
        printServicePlanBoardDocuments = WPPPrintServicePlanBoardDocuments::construct();
        printServicePlanBoardDocuments.init();
        printServicePlanBoardDocuments.parmWorkOrderLineRecIdList(workOrderLineRecIdList);
    
        if (printServicePlanBoardDocuments.prompt())
        {
            printServicePlanBoardDocuments.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePrintDestinationSettingsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves print destination settings that are used to display the report.
    /// </summary>
    /// <param name="_className">
    ///    The name of the class.
    /// </param>
    /// <param name="_printDestinationSettings">
    ///    A <c>SRSPrintDestinationSettings</c> object that contains the printer settings.
    /// </param>
    private static server void savePrintDestinationSettingsOnServer(ClassDescription            _className,
                                                                    SRSPrintDestinationSettings _printDestinationSettings)
    {
        SRSReportPrintDestinationSettings printDestinationSettingsTable;
    
        if (strLen(_className) == 0)
        {
            return;
        }
    
        ttsBegin;
        select forupdate printDestinationSettingsTable
        where printDestinationSettingsTable.UserId == curUserId()
        &&    printDestinationSettingsTable.ReportName == _className;
    
        if (printDestinationSettingsTable != null)
        {
            printDestinationSettingsTable.PrintDestinationSettings = _printDestinationSettings.pack();
            printDestinationSettingsTable.update();
        }
        else
        {
            printDestinationSettingsTable.UserId = curUserId();
            printDestinationSettingsTable.ReportName = _className;
            printDestinationSettingsTable.PrintDestinationSettings = _printDestinationSettings.pack();
            printDestinationSettingsTable.insert();
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>