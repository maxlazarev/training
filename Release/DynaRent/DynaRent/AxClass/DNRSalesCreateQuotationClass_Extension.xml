<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesCreateQuotationClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesCreateQuotation))]
public final class DNRSalesCreateQuotationClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public SalesQuotationTable create(QuotationType _quotationType, Common _callerRecord, boolean _initFromCustTable)
    {
        Common              callerRecordLocal;
        smmBusRelTable      smmBusRelTable;
        RORVenueTable       venueTable;
        CustTable           custTable;
        SalesQuotationTable ret;

        callerRecordLocal = new DictTable(_callerRecord.TableId).makeRecord();  // We don't want to 'lose' the table id of '_callerRecord'!
        callerRecordLocal.data(_callerRecord);

        switch (_callerRecord.TableId)
        {
            case tableNum(RORVenueTable):
                venueTable = _callerRecord as RORVenueTable;
    
                if (venueTable.smmBusRelAccount)
                {
                    select firstOnly smmBusRelTable
                    where smmBusRelTable.BusRelAccount == venueTable.smmBusRelAccount
                        outer join custTable
                        where custTable.Party == smmBusRelTable.Party;
                }
                break;
    
            case tableNum(smmBusRelTable):
                smmBusRelTable = _callerRecord as smmBusRelTable;
                custTable = CustTable::findByPartyRecId(smmBusRelTable.Party);
                break;
        }

        if (custTable)
        {
            callerRecordLocal.data(custTable);
        }
        else if (smmBusRelTable)
        {
            callerRecordLocal.data(smmBusRelTable);
        }

        using (RORVenueCodeDisposableContext context = new RORVenueCodeDisposableContext())
        {
            context.RORParmVenueCode(venueTable.VenueCode);
            context.parmTableId(venueTable.TableId);
            context.parmRecId(venueTable.RecId);

            ret = next create(_quotationType, callerRecordLocal, _initFromCustTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // If a sales quotation is being created from the 'CustTable' form, but the user cancels the creation,
    // the following redundant error message is shown: "Sales quotation order was not created."
    // We want to supress this error message.
    public static void main(Args _args)
    {
        boolean ignoreErrorMsg = false;

        if (_args.parmEnum() == QuotationType::RORRental
        ||  _args.parmEnum() == QuotationType::RORProjRental)
        {
            ignoreErrorMsg = true;
        }

        // Check if the caller is the 'CustTable' form.
        if (_args && _args.caller() is FormRun)
        {
            FormRun callerForm = _args.caller() as FormRun;

            if (callerForm.name() == formStr(CustTable))
            {
                ignoreErrorMsg = true;
            }
        }

        try
        {
            next main(_args);
        }
        // An error has been thrown.
        catch
        {
            // We only want to supress the relevant error message if the caller is the 'CustTable' form.
            if (ignoreErrorMsg)
            {
                Counter infoLogLineCounter;
                Counter infoLogLineToDelete;
                
                SysInfologEnumerator sysInfoLogEnumerator = SysInfologEnumerator::newData(infolog.infologData());

                // Loop over the (error) messages in the info log.
                while(sysInfoLogEnumerator.moveNext())
                {
                    infologLineCounter += 1;

                    // If we find the relevant error message, remember the line number and break out of the loop;
                    // we are not interested in the other (error) messages.
                    if (sysInfoLogEnumerator.currentMessage() == "@SYS335701")
                    {
                        infoLogLineToDelete = infoLogLineCounter;
                        break;
                    }
                }

                // Delete the relevant error message from the info log.
                if (infoLogLineToDelete)
                {
                    infolog.clear(infoLogLineToDelete);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>