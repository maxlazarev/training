<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBMaintenanceItemReqData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBMaintenanceItemReqData
{
    Common                      callerRecord;
    WPPWorkOrderTaskTable       taskTable;
    InventTable                 inventTable;
    BOBObjectTable              objectTable;
    WPPWorkOrderLine            workOrderLine;
    BOBObjectMaintenancePlan    objectMaintenancePlan;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    public void createRecord(BOBMaintenanceItemReq _tmpRecordCreated)
    {
        BOBMaintenanceItemReq itemReqDb;
        ;
    
        // add the inserted temporary record to the database as well
        itemReqDb.data(_tmpRecordCreated);
        itemReqDb.RefTableId = callerRecord.TableId;
        itemReqDb.RefRecId = callerRecord.RecId;
        itemReqDb.OverwriteRecId = 0;
        itemReqDb.RecIdDb = 0;
        itemReqDb.insert();
    
        _tmpRecordCreated.RecIdDb = itemReqDb.RecId;
        _tmpRecordCreated.doUpdate();
        FormDataUtil::getFormDataSource(_tmpRecordCreated).reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecord</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public void deleteRecord(BOBMaintenanceItemReq _tmpRecordDeleted)
    {
        BOBMaintenanceItemReq itemReqDb;
        ;
    
        if(callerRecord is WPPWorkOrderTaskTable || callerRecord is InventTable)
        {
            // any record that overwrites the one being deleted must now become
            // a 'standalone', i.e. it mustn't overwrite anything anymore
            update_recordSet itemReqDb
            setting OverwriteRecId = 0
            where itemReqDb.OverwriteRecId == _tmpRecordDeleted.RecIdDb
            &&    itemReqDb.Qty != 0;
    
            // any record that overwrites the one being deleted AND has a
            // quantity of zero is used to effectively 'remove' the one being
            // deleted -- these are no longer necessary and can now be deleted
            delete_from itemReqDb
            where itemReqDb.OverwriteRecId == _tmpRecordDeleted.RecIdDb
            &&    itemReqDb.Qty == 0;
        }
    
        // if(callerRecord is WPPWorkOrderTaskTable || _tmpRecordDeleted.OverwriteRecId)
        if(_tmpRecordDeleted.OverwriteRecId || callerRecord.TableId == _tmpRecordDeleted.RefTableId)
    
        {
            // delete the source record in the database
            delete_from itemReqDb
            where itemReqDb.RecId == _tmpRecordDeleted.RecIdDb;
        }
        else
        {
            // create a new record with quantity zero to effectively
            // 'remove' the record being deleted
            itemReqDb.data(_tmpRecordDeleted);
            itemReqDb.Qty = 0;
            itemReqDb.RefTableId = callerRecord.TableId;
            itemReqDb.RefRecId = callerRecord.RecId;
            itemReqDb.OverwriteRecId = _tmpRecordDeleted.RecIdDb;
            itemReqDb.RecIdDb = 0;
            itemReqDb.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyRecord</Name>
				<Source><![CDATA[
    public void modifyRecord(BOBMaintenanceItemReq _tmpRecordModified)
    {
        BOBMaintenanceItemReq itemReqDb;
        boolean mustInsert;
    
        // if(callerRecord is WPPWorkOrderTaskTable || _tmpRecordModified.OverwriteRecId)
        if(_tmpRecordModified.OverwriteRecId || callerRecord.TableId == _tmpRecordModified.RefTableId)
    
        {
            // in case we're dealing with a record that has a direct physical source
            // record in the database, we need to update that source
            update_recordSet itemReqDb
            setting ItemId = _tmpRecordModified.ItemId,
                    Qty = _tmpRecordModified.Qty,
                    UnitOfMeasure = _tmpRecordModified.UnitOfMeasure,
                    ItemSetupType = _tmpRecordModified.ItemSetupType
            where itemReqDb.RecId == _tmpRecordModified.RecIdDb;
        }
        else if(callerRecord is InventTable || callerRecord is BOBObjectTable)
        {    
            if(this.mustInsertRecord(_tmpRecordModified))
            {
                // create a new record that overwrites the source record
                itemReqDb.data(_tmpRecordModified);
                itemReqDb.RefTableId = callerRecord.TableId;
                itemReqDb.RefRecId = callerRecord.RecId;
                itemReqDb.RecIdDb = 0;
                itemReqDb.OverwriteRecId = _tmpRecordModified.RecIdDb;
                itemReqDb.insert();
    
                _tmpRecordModified.RecIdDb = itemReqDb.RecId;
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertRecord</Name>
				<Source><![CDATA[
    protected boolean mustInsertRecord(BOBMaintenanceItemReq _tmpRecordModified)
    {
        if(callerRecord.TableId != _tmpRecordModified.RefTableId)
        {
            // the user modified an inherited record -- see if we need to save anything to the db
            BOBMaintenanceItemReq itemReqDb = BOBMaintenanceItemReq::find(_tmpRecordModified.RecIdDb);
    
            if(itemReqDb.WPPTaskId == _tmpRecordModified.WPPTaskId
            && itemReqDb.ItemId == _tmpRecordModified.ItemId
            && itemReqDb.Qty == _tmpRecordModified.Qty
            && itemReqDb.UnitOfMeasure == _tmpRecordModified.UnitOfMeasure
            && itemReqDb.ItemSetupType == _tmpRecordModified.ItemSetupType)
            {
                return false; // nothing was modified so we don't have to do anything
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _common)
    {
        callerRecord = _common;

        switch (callerRecord.TableId)
        {
            case tableNum(WPPWorkOrderTaskTable):
                taskTable = callerRecord as WPPWorkOrderTaskTable;

                break;

            case tableNum(InventTable):
                inventTable = callerRecord as InventTable;

                break;

            case tableNum(BOBObjectTable):
                objectTable = callerRecord as BOBObjectTable;
                inventTable = objectTable.inventTable();

                break;

            case tableNum(BOBObjectView):
                BOBObjectView objectView = callerRecord as BOBObjectView;

                objectTable     = BOBObjectTable::findObjectId(objectView.ObjectId);
                inventTable     = objectTable.inventTable();
                callerRecord    = objectTable;

                break;

            case tableNum(BOBObjectViewV2):
                BOBObjectViewV2 objectViewV2 = callerRecord as BOBObjectViewV2;

                objectTable     = BOBObjectTable::findObjectId(objectViewV2.ObjectId);
                inventTable     = objectTable.inventTable();
                callerRecord    = objectTable;

                break;

            case tableNum(WPPWorkOrderLine):
                workOrderLine   = callerRecord as WPPWorkOrderLine;
                taskTable       = workOrderLine.workOrderTaskTable();
                objectTable     = workOrderLine.workOrderTable().BOBObjectTable();

                if (objectTable)
                {
                    inventTable = objectTable.inventTable();
                }

                break;

            case tableNum(BOBObjectMaintenancePlan):
                objectMaintenancePlan   = callerRecord as BOBObjectMaintenancePlan;
                objectTable             = BOBObjectTable::findObjectId(objectMaintenancePlan.ObjectId);
                inventTable             = objectTable.inventTable();

                break;

            default:
                throw error(strFmt("@DNR2491", tableId2name(callerRecord.TableId), classStr(BOBMaintenanceItemReqData)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInsertMethodInLoop", "itemReqTmp.setTmp(); has been set as a Tmp table" )]
    public BOBMaintenanceItemReq populateTmpData()
    {
        BOBMaintenanceItemReq       itemReqTmp, itemReqDb;
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
    
        void localMethod(Common _refRecord)
        {
            if (callerRecord is BOBObjectMaintenancePlan)
            {
                while select itemReqDb
                where itemReqDb.RefTableId == _refRecord.TableId
                &&    itemReqDb.RefRecId   == _refRecord.RecId
                    exists join taskTable
                    where taskTable.TaskId == itemReqDb.WPPTaskId
                        join TableId from workOrderTemplateLine
                        where workOrderTemplateLine.TaskId     == taskTable.TaskId
                        &&    workOrderTemplateLine.TemplateId == objectMaintenancePlan.WPPTemplateId
                {
                    if(itemReqDb.OverwriteRecId && itemReqDb.Qty == 0)
                    {
                        itemReqTmp = BOBMaintenanceItemReq::findTmpRecId(itemReqTmp, itemReqDb.OverwriteRecId, true);
                        itemReqTmp.delete();
                    }
                    else if(itemReqDb.OverwriteRecId)
                    {
                        itemReqTmp = BOBMaintenanceItemReq::findTmpRecId(itemReqTmp, itemReqDb.OverwriteRecId, true);
                        itemReqTmp.initFromMaintenanceItemReq(itemReqDb);
                        itemReqTmp.update();
                    }
                    else
                    {
                        itemReqTmp.clear();
                        itemReqTmp.initFromMaintenanceItemReq(itemReqDb);
                        itemReqTmp.insert();
                    }
                }
            }
            else
            {
                while select itemReqDb
                where itemReqDb.RefTableId == _refRecord.TableId
                &&    itemReqDb.RefRecId == _refRecord.RecId
                {
                    if(itemReqDb.OverwriteRecId && itemReqDb.Qty == 0)
                    {
                        itemReqTmp = BOBMaintenanceItemReq::findTmpRecId(itemReqTmp, itemReqDb.OverwriteRecId, true);
                        itemReqTmp.delete();
                    }
                    else if(itemReqDb.OverwriteRecId)
                    {
                        itemReqTmp = BOBMaintenanceItemReq::findTmpRecId(itemReqTmp, itemReqDb.OverwriteRecId, true);
                        itemReqTmp.initFromMaintenanceItemReq(itemReqDb);
                        if (itemReqTmp)
                        {
                            itemReqTmp.update();
                        }
                        else
                        {
                            // called if item requirement was deleted earlier
                            itemReqTmp.insert();
                        }
                    }
                    else
                    {
                        itemReqTmp.clear();
                        itemReqTmp.initFromMaintenanceItemReq(itemReqDb);
                        itemReqTmp.insert();
                    }
                }
            }
        }
        ;
    
        itemReqTmp.setTmp();
    
        ttsBegin;
    
        if(callerRecord is WPPWorkOrderTaskTable)
        {
            while select itemReqDb
            where itemReqDb.RefTableId == taskTable.TableId
            &&    itemReqDb.RefRecId == taskTable.RecId
            {
                itemReqTmp.clear();
                itemReqTmp.initFromMaintenanceItemReq(itemReqDb);
                itemReqTmp.insert();
            }
        }
        else
        {
            if (callerRecord is BOBObjectMaintenancePlan)
            {
                while select itemReqDb
                where itemReqDb.RefTableId == tableNum(WPPWorkOrderTaskTable)
                    exists join taskTable
                    where taskTable.RecId == itemReqDb.RefRecId
                        join TableId from workOrderTemplateLine
                        where workOrderTemplateLine.TaskId     == taskTable.TaskId
                        &&    workOrderTemplateLine.TemplateId == objectMaintenancePlan.WPPTemplateId
                {
                    itemReqTmp.clear();
                    itemReqTmp.initFromMaintenanceItemReq(itemReqDb);
                    itemReqTmp.insert();
                }
            }
            else
            {
                while select itemReqDb
                where itemReqDb.RefTableId == tableNum(WPPWorkOrderTaskTable)
                {
                    itemReqTmp.clear();
                    itemReqTmp.initFromMaintenanceItemReq(itemReqDb);
                    itemReqTmp.insert();
                }
            }
    
            if(inventTable)
            {
                localMethod(inventTable);
    
                if(objectTable)
                {
                    localMethod(objectTable);
                }
            }
        }
    
        ttsCommit;
    
        return itemReqTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>