<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanBoardRowItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to marshall data between the server side HiGHPlanBoard control and the browser
/// </summary>
[DataContractAttribute]
class HiGHPlanBoardRowItem extends FormDataContract
{
    str         rowItemId           = '';                       //Unique label per row in chart
    str         rowItemLabel        = '';                       //Unique label per row in chart
    int         rowItemColor        = 0;                        //Color of row item header
    int         rowNumber           = 0;                        //Sequential row number
    List        plannedEvents       = new List(Types::Class);   //List of HiGHPlanBoardPlannedEvent objects related to this row item
    List        rowPeriods          = new List(Types::Class);   //List of periods. We store periods per row item, as different row items could have different open periods
    int         maxCollisionLevel   = 0;                        //Maximum collision level. Used to determine row render height
    RefTableId  refTableId          = 0;                        //Used server side only
    RefRecId    refRecId            = 0;                        //Used server side only
    str         rowPeriodJson       = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RowItemId')]
    public str parmId(str _rowItemId = rowItemId)
    {
        if (!prmIsDefault(_rowItemId))
        {
            rowItemId = _rowItemId;
        }
        return rowItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemLabel</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RowItemLabel')]
    str parmRowItemLabel(str _rowItemLabel = rowItemLabel)
    {
        if (!prmIsDefault(_rowItemLabel))
        {
            rowItemLabel = _rowItemLabel;
        }
        return rowItemLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemColor</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RowItemColor')]
    int parmRowItemColor(int _rowItemColor = rowItemColor)
    {
        if (!prmIsDefault(_rowItemColor))
        {
            rowItemColor = _rowItemColor;
        }
        return rowItemColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowNumber</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RowNumber')]
    public int parmRowNumber(int _rowNumber = rowNumber)
    {
        if (!prmIsDefault(_rowNumber))
        {
            rowNumber = _rowNumber;
        }
        return rowNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowPeriods</Name>
				<Source><![CDATA[
    public List parmRowPeriods(List _rowPeriods = rowPeriods)
    {
        if (!prmIsDefault(_rowPeriods))
        {
            rowPeriods = _rowPeriods;
        }
        return rowPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowPeriodsJson</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RowPeriods')]
    public str parmRowPeriodsJson(str _rowPeriodJson = rowPeriodJson)
    {
        if (!prmIsDefault(_rowPeriodJson))
        {
            rowPeriodJson = _rowPeriodJson;
        }
        else if(!rowPeriodJson)
        {
            rowPeriodJson = this.getRowPeriodsJson();
        }
        
        return rowPeriodJson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowPeriodsJson</Name>
				<Source><![CDATA[
    public str getRowPeriodsJson()
    {
        #TimeConstants

        #define.endDateTime('EndDateTime')
        #define.isCurrent('IsCurrent')
        #define.isSecondaryPeriodStart('IsSecondaryPeriodStart')
        #define.label('Label')
        #define.open('Open')
        #define.periodId('PeriodId')
        #define.rowItemId('RowItemId')
        #define.startDateTime('StartDateTime')

        System.Text.StringBuilder strBuilder = new System.Text.StringBuilder('[');
        ListEnumerator enumerator = this.parmRowPeriods().getEnumerator();
        utcDateTime jsonDateTimeBase = DateTimeUtil::newDateTime(1\1\1970, 0);
        int64 timeStamp;

        while(enumerator.moveNext())
        {
            HiGHPlanBoardPeriod period = enumerator.current();
            
            timeStamp = DateTimeUtil::getDifference(period.parmStartDateTime(), jsonDateTimeBase) * #millisecondsPerSecond;
            str startDateTimeStr = strFmt("\/Date(%1)\/", timeStamp);
            
            timeStamp = DateTimeUtil::getDifference(period.parmEndDateTime(), jsonDateTimeBase) * #millisecondsPerSecond;
            str endDateTimeStr = strFmt("\/Date(%1)\/", timeStamp);
            
            // example outut:  {"EndDateTime":"/Date(1529542800000)/","IsCurrent":false,"IsSecondaryPeriodStart":false,"Label":"0","Open":false,"PeriodId":0,"RowItemId":"","StartDateTime":"/Date(1529539200000)/"}
            str rowPeriodStr = strFmt('{"%1":"%2","%3":%4,"%5":%6,"%7":"%8","%9":%10,"%11":%12,"%13":"%14","%15":"%16"},',
                             /* 1*/   #endDateTime,
                             /* 2*/   endDateTimeStr,
                             /* 3*/   #isCurrent,
                             /* 4*/   period.parmIsCurrent(),
                             /* 5*/   #isSecondaryPeriodStart,
                             /* 6*/   period.parmIsSecondaryPeriodStart(),
                             /* 7*/   #label,
                             /* 8*/   period.parmLabel(),
                             /* 9*/   #open,
                             /*10*/   period.parmIsOpen(),
                             /*11*/   #periodId,
                             /*12*/   period.parmId(),
                             /*13*/   #rowItemId,
                             /*14*/   period.parmRowItemId(),
                             /*15*/   #startDateTime,
                             /*16*/   startDateTimeStr);

                             strBuilder.Append(rowPeriodStr);
        }

        strBuilder.Remove(strBuilder.get_Length() - 1, 1); // remove the last comma
        strBuilder.Append(']');
        return strBuilder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedEvents</Name>
				<Source><![CDATA[
    [DataMemberAttribute('PlannedEvents')]
    public List parmPlannedEvents(List _plannedEvents = plannedEvents)
    {
        if (!prmIsDefault(_plannedEvents))
        {
            plannedEvents = _plannedEvents;
        }
        return plannedEvents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxCollisionLevel</Name>
				<Source><![CDATA[
    [DataMemberAttribute('MaxCollisionLevel')]
    public int parmMaxCollisionLevel(int _maxCollisionLevel = maxCollisionLevel)
    {
        if (!prmIsDefault(_maxCollisionLevel))
        {
            maxCollisionLevel = _maxCollisionLevel;
        }
        return maxCollisionLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    public RefTableId parmRefTableId(RefTableId _refTableId = refTableId)
    {
        if (!prmIsDefault(_refTableId))
        {
            refTableId = _refTableId;
        }
        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    public RefRecId parmRefRecId(RefRecId _refRecId = refRecId)
    {
        if (!prmIsDefault(_refRecId))
        {
            refRecId = _refRecId;
        }
        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static HiGHPlanBoardRowItem newParameters(str _id, str _rowItemLabel, int _rowItemColor, List _rowPeriods, List _plannedEvents, RefTableId _refTableId, RefRecId _refRecId, int _maxCollisionLevel = -1, int _rowNumber = 0)
    {
        HiGHPlanBoardRowItem rowItem = new HiGHPlanBoardRowItem();
        rowItem.parmId(_id);
        rowItem.parmRowItemLabel(_rowItemLabel);
        rowItem.parmRowItemColor(_rowItemColor);
        rowItem.parmRowNumber(_rowNumber);
        rowItem.parmRowPeriods(HiGHPlanBoardPeriod::cloneList(_rowPeriods));
        rowItem.parmPlannedEvents(_plannedEvents);
        rowItem.parmMaxCollisionLevel(_maxCollisionLevel);
        rowItem.parmRefTableId(_refTableId);
        rowItem.parmrefRecId(_refRecId);

        return rowItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a rowItem in the plannedEvents List
    /// </summary>
    /// <param name = "_rowItemId">Id of the rowItem to be searched for</param>
    /// <param name = "_rowItems">List of HiGHPlanBoardRowItem</param>
    /// <returns>HiGHPlanBoardRowItem object found, or null if not found</returns>
    public static HiGHPlanBoardRowItem find(str _rowItemId, List _rowItems)
    {
        ListEnumerator leRowItems = _rowItems.getEnumerator();

        while (leRowItems.moveNext())
        {
            HiGHPlanBoardRowItem rowItem = leRowItems.current();

            if (rowItem.parmId() == _rowItemId)
            {
                return rowItem;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPeriodAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the availability of all periods associated with this row
    /// </summary>
    /// <param name = "_isOpen">Boolean flag indicating if period is open or not</param>
    public void resetPeriodAvailability(boolean _isOpen)
    {
        ListEnumerator leRowPeriods = this.parmRowPeriods().getEnumerator();

        while (leRowPeriods.moveNext())
        {
            HiGHPlanBoardPeriod period = leRowPeriods.current();
            period.parmIsOpen(_isOpen);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCollisionLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the collisionLevel for a plannedEvent in a rowItem
    /// </summary>
    /// <param name = "_plannedEventId">Id of the plannedEvent (To avoid detecting itself as a conflict)</param>
    /// <param name = "_startPeriod">Start period to check for potential collision</param>
    /// <param name = "_endPeriod">End period to check for potential collision</param>
    /// <param name = "_rowPlannedEvents">List of planned events for RowItem</param>
    /// <returns>integer containing the collisionLevel</returns>
    private static int calculateCollisionLevel(str _plannedEventId, int _startPeriod, int _endPeriod, List _rowPlannedEvents)
    {
        ListEnumerator leRowItemPlannedEvents = _rowPlannedEvents.getEnumerator();
        int result = 0;

        while (leRowItemPlannedEvents.moveNext())
        {
            HiGHPlanBoardPlannedEvent plannedEvent = leRowItemPlannedEvents.current();

            if    ((plannedEvent.parmCollisionLevel() >= 0)         //Only compare to plannedEvents that already have been checked (collisionLevel not -1)
                && (plannedEvent.parmId() != _plannedEventId)       //Do not compare plannedEvent to itself
                && (_startPeriod < plannedEvent.parmEndPeriod())
                && (_endPeriod > plannedEvent.parmStartPeriod()))
            {
                result = plannedEvent.parmCollisionLevel() + 1;
            }
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCollisionLevels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the collisionLevels for all plannedEvents in a rowItem
    /// </summary>
    /// <param name = "_rowItem">The HiGHPlanBoardRowItem object to update collisionLevels for</param>
    public static void calculateCollisionLevels(HiGHPlanBoardRowItem _rowItem)
    {
        ListEnumerator  leRowItemPlannedEvents = _rowItem.parmPlannedEvents().getEnumerator();
        int             maxCollisionLevelLocal = 0;

        if (!_rowItem)
        {
            throw error("Row item not found.");
        }

        //Reset collisionLevels
        while (leRowItemPlannedEvents.moveNext())
        {
            HiGHPlanBoardPlannedEvent plannedEvent = leRowItemPlannedEvents.current();
            plannedEvent.parmCollisionLevel(-1);
        }

        //Determine new collisionLevels
        leRowItemPlannedEvents.reset();
        while (leRowItemPlannedEvents.moveNext())
        {
            HiGHPlanBoardPlannedEvent plannedEvent = leRowItemPlannedEvents.current();

            int collisionLevel = HiGHPlanBoardRowItem::calculateCollisionLevel(plannedEvent.parmId(), plannedEvent.parmStartPeriod(), plannedEvent.parmEndPeriod(), _rowItem.parmPlannedEvents());
            plannedEvent.parmCollisionLevel(collisionLevel);

            if (collisionLevel > maxCollisionLevelLocal)
            {
                maxCollisionLevelLocal = collisionLevel;
            }
        }

        _rowItem.parmMaxCollisionLevel(maxCollisionLevelLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateOnlySetTimes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the collisionLevels for all plannedEvents in a rowItem
    /// </summary>
    /// <param name = "_rowItem">The HiGHPlanBoardRowItem object to update collisionLevels for</param>
    public static List dateOnlySetTimes(List _rowItems, int _timeScale, str _rowItemId = '')
    {
        utcdatetime     cursorDateTime;
        ListEnumerator  leRowItems = _rowItems.getEnumerator();

        while (leRowItems.moveNext())
        {
            HiGHPlanBoardRowItem rowItem = leRowItems.current();

            //If no RowItemId, do all... else, only the one specified
            if (_rowItemId == '' || rowItem.parmId() == _rowItemId)
            {
                List periods = rowItem.parmRowPeriods();
                ListEnumerator lePlannedEvents = rowItem.parmPlannedEvents().getEnumerator();

                //Make sure cursor resets with every new rowItem
                cursorDateTime = DateTimeUtil::minValue();
                
                while (lePlannedEvents.moveNext())
                {
                    HiGHPlanBoardPlannedEvent plannedEvent = lePlannedEvents.current();

                    //Check if same date, if not, reset cursorDateTime
                    if (DateTimeUtil::date(cursorDateTime) != DateTimeUtil::date(plannedEvent.parmStartDateTime()))
                    {
                        cursorDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(plannedEvent.parmStartDateTime()), str2Time("0:00:00"));
                    }

                    plannedEvent.parmStartDateTime(cursorDateTime);
                    cursorDateTime = DateTimeUtil::addMinutes(cursorDateTime, _timeScale);

                    //If it went past 24 hours, set endtime oif plannedEvent to 23:59:59 (end of day), and reset time to 0:00:00 for next event starttime
                    if (DateTimeUtil::date(cursorDateTime) != DateTimeUtil::date(plannedEvent.parmStartDateTime()))
                    {
                        plannedEvent.parmEndDateTime(DateTimeUtil::newDateTime(DateTimeUtil::date(plannedEvent.parmStartDateTime()), str2Time("23:59:59")));
                        cursorDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(plannedEvent.parmStartDateTime()), str2Time("0:00:00"));
                    }
                    else
                    {
                        plannedEvent.parmEndDateTime(cursorDateTime);
                    }

                    //Reset periods
                    int startPeriod, endPeriod;
                    boolean startPeriodOpen, endPeriodOpen;

                    [startPeriod, startPeriodOpen]  = HiGHPlanBoardPeriod::calculatePeriodFromDateTime(plannedEvent.parmStartDateTime(),  periods);
                    [endPeriod, endPeriodOpen]      = HiGHPlanBoardPeriod::calculatePeriodFromDateTime(plannedEvent.parmEndDateTime(),    periods);

                    if (startPeriod == endPeriod)
                    {
                        endPeriod++;
                    }

                    plannedEvent.parmStartPeriod(startPeriod);
                    plannedEvent.parmEndPeriod(endPeriod);
                }
            }
        }

        return _rowItems;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>