<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLogisticsLocationEntityClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LogisticsLocationEntity))]
public final class DNRLogisticsLocationEntityClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultLocationRoleFromEntity</Name>
				<Source><![CDATA[
    public static Map getDefaultLocationRoleFromEntity(TableId _entityTableId)
    {
        LogisticsLocationRole   locationRole;
        Map                     defaultLocationRole;

        Map ret = next getDefaultLocationRoleFromEntity(_entityTableId);
 
        if (_entityTableId == tableNum(RORVenueTable))
        {
            locationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);
        }

        if (locationRole)
        {
            defaultLocationRole = new Map(Types::Int64, Types::String);
            defaultLocationRole.insert(locationRole.RecId, locationRole.description());
            ret = defaultLocationRole;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_findLocation_find_delegate</Name>
				<Source><![CDATA[
    // event handler methods

    [SubscribesTo(classStr(LogisticsLocationEntity), delegateStr(LogisticsLocationEntity, findLocation_find_delegate))]
    public static void DNREvent_findLocation_find_delegate(Common _common, TransDateTime _transDateTime, EventHandlerResult _eventHandlerResult)
    {
        if (_common.TableId == tableNum(RORVenueTable))
        {
            _eventHandlerResult.result(LogisticsLocationEntity::constructFromLocationRecId(
                                       RORVenueTable::getLocationFromRole(_common.(fieldNum(RORVenueTable, RecId)),
                                       LogisticsLocationRoleType::Delivery, _transDateTime)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>