<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_RORSubStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PurchCalcTaxFactoryAttribute(tableStr(VendRORSubStatusJour))]
class       PurchCalcTax_RORSubStatus
extends     PurchCalcTax_PurchOrder
{
    VendRORSubStatusJour    vendRORSubStatusJour;    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return purchTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendRORSubStatusJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendRORSubStatusJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method")]
    void  initCursor()
    {
        select nofetch forupdate purchLine
        where purchLine.PurchId == vendRORSubStatusJour.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the purchase order document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in item price; otherwise, false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return purchTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount  markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        return purchLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(VendRORSubStatusJour _vendRORSubStatusJour)
    {
        super(_vendRORSubStatusJour);
    
        vendRORSubStatusJour = _vendRORSubStatusJour;
        purchTable           = vendRORSubStatusJour.purchTable();
        update               = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next purchLine;
    
        this.initCursorMarkup(purchLine.TableId, purchLine.RecId);
    
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingRecID</Name>
				<Source><![CDATA[
    recId  origHeadingRecID()
    {
        return purchTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingTableID</Name>
				<Source><![CDATA[
    tableId  origHeadingTableID()
    {
        return purchTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupRecId</Name>
				<Source><![CDATA[
    recId  purchMarkupRecId()
    {
        return markupTrans.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupTableId</Name>
				<Source><![CDATA[
    tableId  purchMarkupTableId()
    {
        return markupTrans.TransTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void  setTax(TaxWriteCode   taxWriteCode,
                 AmountCur      amountCur)
    {
        if (    purchLine.ConfirmedTaxWriteCode != taxWriteCode
            ||  purchLine.ConfirmedTaxAmount    != amountCur)
        {
            purchLine.ConfirmedTaxWriteCode    = taxWriteCode;
            purchLine.ConfirmedTaxAmount       = amountCur;
            purchLine.IsModified               = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax processing attributes on the current <c>MarkupTransHistory</c> record.
    /// </summary>
    /// <param name="taxWriteCode">
    /// A value to assign to the <c>TaxWriteCode</c> field.
    /// </param>
    /// <param name="amountCur">
    /// A value to assign to the <c>TaxAmount</c> field.
    /// </param>
    /// <remarks>
    /// If any of the attributes are currently stored on the <c>MarkupTransHistory</c> record and that
    /// record is shared by multiple order versions, it will be split and the request values will be used
    /// for the current version only.
    /// </remarks>
    void setTaxMarkup(TaxWriteCode taxWriteCode, AmountCur amountCur)
    {
        if (    markupTrans.TaxWriteCode   != taxWriteCode
            ||  markupTrans.TaxAmount      != amountCur)
        {
            markupTrans.IsModified      = NoYes::Yes;
        }
    
        super(taxWriteCode, amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        return purchLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        return purchLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    PurchQty    transQty()
    {
        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId transTransId()
    {
        return purchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendRORSubStatusJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>