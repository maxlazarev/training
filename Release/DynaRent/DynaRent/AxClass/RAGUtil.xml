<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAGUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RAGUtil
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcNetPrice</Name>
				<Source><![CDATA[
    public static PriceCur calcNetPrice(
        Price               _grossPrice,
        SalesDiscPercent    _discPercent,
        CurrencyCode        _currencyCode,
        boolean             _skipRounding = false)
    {
        PriceCur price = _grossPrice * (100 - _discPercent) / 100;
        ;
    
        if (_skipRounding)
        {
            return price;
        }
        else
        {
            return ExchangeRateHelper::mstPrice(price, _currencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPriceInUnit</Name>
				<Source><![CDATA[
    public static PriceCur calcPriceInUnit(RAGTmpContractLine   _tmpLine,
                                           RAGTierMultiplier    _multiplier,
                                           UnitOfMeasureRecId   _unitFrom)
    {
        PriceCur            ret = 0;
        UnitOfMeasureRecId  unitTo;
        ;
    
        if (_multiplier
        &&  _unitFrom
        && (_tmpLine.NetPrice_Price || _tmpLine.GrossPrice_Price)
        &&  hasFieldAccess(tableNum(RAGTmpContractLine), fieldNum(RAGTmpContractLine, GrossPrice_Price))
        &&  hasFieldAccess(tableNum(RAGTmpContractLine), fieldNum(RAGTmpContractLine, Discount_Percentage))
        &&  hasFieldAccess(tableNum(RAGTmpContractLine), fieldNum(RAGTmpContractLine, NetPrice_Price)))
        {
            if(_tmpLine.NetPrice_Price)
            {
                ret = _tmpLine.NetPrice_Price * _multiplier;
                unitTo = _tmpLine.NetPrice_TimeUnit;
            }
            else if(_tmpLine.GrossPrice_Price)
            {
                ret = _tmpLine.GrossPrice_Price * _multiplier;
    
                if(_tmpLine.Discount_Percentage)
                {
                    ret = ret * (1 - (_tmpLine.Discount_Percentage / 100));
                }
    
                unitTo = _tmpLine.GrossPrice_TimeUnit;
            }
    
            if(ret)
            {
                ret = UnitOfMeasureConverter::convert(ret, _unitFrom, unitTo, NoYes::No);
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRentalDiscount</Name>
				<Source><![CDATA[
    public static SalesDiscPercent calcRentalDiscount(Price _grossPrice, Price _netPrice)
    {
        SalesDiscPercent ret;
        ;
    
        if(_grossPrice)
        {
            ret = (_grossPrice - _netPrice) / _grossPrice * 100;
        }
        else
        {
            ret = (_grossPrice - _netPrice) * 100;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustApplyRentalAgreements</Name>
				<Source><![CDATA[
    public static boolean mustApplyRentalAgreements(BOBRentalTypeId _rentalTypeId)
    {
        boolean         ret = false;
        RAGParameters   parameters;
        ;
    
        if(_rentalTypeId && RAGRentalTypeGroupSorting::exist(_rentalTypeId, RAGTypeGroup::Type))
        {
            parameters = RAGParameters::find();
            ret = (parameters.RORHeaderDateTimeType && parameters.RORLineDateTimeType);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceTierPeriod2multiplierPeriod</Name>
				<Source><![CDATA[
    public static INVMultiplierPeriods priceTierPeriod2multiplierPeriod(RAGPriceTierPeriod _priceTierPeriod)
    {
        switch(_priceTierPeriod)
        {
            case RAGPriceTierPeriod::Hours, RAGPriceTierPeriod::Days:   
                return INVMultiplierPeriods::Calendar;

            case RAGPriceTierPeriod::ChargeableHours, RAGPriceTierPeriod::ChargeableDays:
                return INVMultiplierPeriods::Chargeable;

            case RAGPriceTierPeriod::AfterDays:
                return INVMultiplierPeriods::RangeCalendar;

            default:
                throw error(strFmt("@SYS88512", _priceTierPeriod));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTiersForUnusedTierPeriod</Name>
				<Source><![CDATA[
    public static void deleteTiersForUnusedTierPeriod()
    {
        RAGContractLine contractTier;

        ttsbegin;
        delete_from contractTier
        where contractTier.TierPeriod != RAGPriceTierPeriod::Hours
        && contractTier.TierPeriod != RAGPriceTierPeriod::Days
        && contractTier.TierPeriod != RAGPriceTierPeriod::ChargeableHours
        && contractTier.TierPeriod != RAGPriceTierPeriod::ChargeableDays
        && contractTier.TierPeriod != RAGPriceTierPeriod::AfterDays
            && (contractTier.AgreementType == RAGAgreementType::PriceTier || contractTier.AgreementType == RAGAgreementType::TransportTier);
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>