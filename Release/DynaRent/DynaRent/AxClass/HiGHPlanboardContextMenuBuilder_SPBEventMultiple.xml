<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanboardContextMenuBuilder_SPBEventMultiple</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HiGHPlanboardContextMenuBuilder_SPBEventMultiple extends HiGHPlanboardContextMenuBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    // main extension point for customizing the contents of the context menu.
    public void populate()
    {
        WPPWorkOrderLine workOrderLine;
        WPPWorkOrderTaskTable taskTable;
        WPPWorkOrderLineResource resourcePlanning;

        boolean allowUnassign                   = true,
                allowStatusUpdCreated           = true,
                allowStatusUpdPlanned           = true,
                allowStatusUpdReleased          = true,
                allowStatusUpdInProgress        = true,
                allowStatusUpdCompleted         = true,
                allowStatusUpdCheckedWorkshop   = true,
                allowStatusUpdCheckedAdmin      = true,
                allowStatusUpdInvoiced          = true,
                allowStatusUpdClosed            = true;
       
        DNRTmpIdList tmpRecIds;
        tmpRecIds.linkPhysicalTableInstance(this.getTmpIdList(sender));

        while select TableId from tmpRecIds
            join TableId from resourcePlanning
            where resourcePlanning.RecId == tmpRecIds.RefRecId
                join Status from workOrderLine
                where workOrderLine.RecId == resourcePlanning.WorkOrderLineRecId
                    join WorkOrderStatusGroupId from taskTable
                    where taskTable.TaskId == workOrderLine.TaskId
        {
            allowUnassign               = (allowUnassign && workOrderLine.Status == WPPWorkOrderLineStatus::Planned);

            Map allowedStatusUpdateMap  = WPPWorkOrderStatusSetup::getPossibleWorkOrderStatus(taskTable.WorkOrderStatusGroupId, workOrderLine.Status);
            allowStatusUpdCreated       = (allowStatusUpdCreated && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Created));
            allowStatusUpdPlanned       = (allowStatusUpdPlanned && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Planned));
            allowStatusUpdReleased      = (allowStatusUpdReleased && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Released));
            allowStatusUpdInProgress    = (allowStatusUpdInProgress && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::InProgress));
            allowStatusUpdCompleted     = (allowStatusUpdCompleted && allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Completed));
        }

        // create status update submenu
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS32754"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS6966", !allowStatusUpdReleased, #UpdateStatusReleased));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS137068", !allowStatusUpdInProgress, #UpdateStatusInProgress));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS55438", !allowStatusUpdCompleted, #UpdateStatusCompleted));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1378", !allowStatusUpdCheckedWorkshop, #UpdateStatusCheckedWorkshop));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1377", !allowStatusUpdCheckedAdmin, #UpdateStatusCheckedAdmin));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS14205", !allowStatusUpdInvoiced, #UpdateStatusInvoiced));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS14403", !allowStatusUpdClosed, #UpdateStatusClosed));

        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR815", !allowUnassign, #UnassignTask));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7201", true, #ViewWorkOrder));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7350", true, #ViewLineResource));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1496", true, #PrintDocuments));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7197", true, #RefreshPlanned));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7348", true, #RefreshApply));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpIdList</Name>
				<Source><![CDATA[
    private DNRTmpIdList getTmpIdList(HiGHPlanBoardOnContextPlannedEventEventArgs _sender)
    {
        DNRTmpIdList tmpRecIds;
        List plannedEvents = _sender.parmPlannedEvents();
        ListEnumerator plannedEventsEnum = plannedEvents.getEnumerator();
        RecordInsertList insertList = new RecordInsertList(tableNum(DNRTmpIdList), false, false, false, false, false, tmpRecIds);

        while(plannedEventsEnum.moveNext())
        {
            HiGHPlanBoardPlannedEventBaseArgs plannedEventBaseArgs = plannedEventsEnum.current();

            // load all selected item's RecIds into a temporary table so we can join them to the physical tables later
            tmpRecIds.RefRecId = plannedEventBaseArgs.parmRefRecId();
            insertList.add(tmpRecIds);
        }

        insertList.insertDatabase();

        return tmpRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>