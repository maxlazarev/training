<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventMov_PurchClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventMov_Purch))]
public final class DNRInventMov_PurchClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructInventUpdForUpdateAutoLossProfit</Name>
				<Source><![CDATA[
    protected InventUpd_Financial constructInventUpdForUpdateAutoLossProfit(InventMov_Virtuel _movement_Virtuel, InventUpd_Financial _financial)
    {
        InventUpd_Financial ret = next constructInventUpdForUpdateAutoLossProfit(_movement_Virtuel, _financial);

        ret.BOBParmIsCompensatingTrans(_financial.BOBParmIsCompensatingTrans());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnUpdate</Name>
				<Source><![CDATA[
    protected InventUpd_Estimated updateInventoryOnUpdate()
    {
        InventUpd_Estimated ret = next updateInventoryOnUpdate();

        if (ret)
        {
            // compensating movement -- reuse InventTransOriginId so we don't end up with duplicates in table InventTransOrigin
            if (purchLine.RORTradeType == RORTradeType::SubRental)
            {
                InventMovement movement = InventMovement::construct(purchLine, InventMovSubType::BOBCompensatingTrans);
                movement.inventTransOriginId(inventTransOriginId);
    
                ret = InventUpd_Estimated::newInventMovement(movement);
                ret.BOBParmIsCompensatingTrans(true);
                ret.updateNow();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        boolean                 _allowNegative)
    {
        AmountCur   costAmmountCurLocal = _updateNow.parmCostAmountCur();
        CostAmount  ret;

        if (_updateNow.parmCostAmountCur()
        &&  !this.mustBeBookedFinancially()
        &&  purchLine.RORTradeType != RORTradeType::SalesPurch)
        {
            _updateNow.parmCostAmountCur(0);
        }

        ret = next updateLedgerFinancial(_ledgerVoucher, _updateNow, _allowNegative);

        _updateNow.parmCostAmountCur(costAmmountCurLocal);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    public InventTransOriginId markingRefInventTransOrigin()
    {
        InventTransOriginId ret = next markingRefInventTransOrigin();
        
        // We don't want to create any marking for Sub Rental order when created from a Rental Order
        if ( purchLine.RORTradeType == RORTradeType::SubRental)
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBConstruct</Name>
				<Source><![CDATA[
    // extension methods

    public static InventMovement BOBConstruct(PurchLine _purchLine, InventMovSubType _subType = InventMovSubType::None)
    {
        InventMovement inventMovement;
        ;
    
        if(_purchLine.RORTradeType == RORTradeType::SubRental)
        {
            if(_subType == InventMovSubType::BOBCompensatingTrans)
            {
                inventMovement = new InventMov_RORRentalPurch_Issue(_purchLine);
            }
            else
            {
                inventMovement = new InventMov_RORRentalPurch_Receipt(_purchLine);
            }
    
            inventMovement.inventMovSubType(_subType);
        }
        else
        {
            inventMovement = InventMov_Purch::newFromPurchLine(_purchLine);
        }
    
        return inventMovement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>