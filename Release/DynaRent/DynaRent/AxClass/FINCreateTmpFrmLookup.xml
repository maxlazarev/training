<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINCreateTmpFrmLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINCreateTmpFrmLookup
{
    FINTmpFrmLookup     tmpFrmLookup;

    FINModule           module;
    DirPartyRecId       party;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromProjTable</Name>
				<Source><![CDATA[
    private void createFromProjTable()
    {
        ProjTable       projTable;
        CustTable       custTable;
    
        while select ProjId, Name, CustAccount, ProjInvoiceProjId from projTable
            exists join custTable
            where custTable.AccountNum == projTable.CustAccount
            &&    custTable.Party      == party
        {
            tmpFrmLookup.initFromProjTable(projTable);
            tmpFrmLookup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromRentalOrder</Name>
				<Source><![CDATA[
    private void createFromRentalOrder()
    {
        SalesTable  salesTable;
        CustTable   custTable;
    
        while select SalesId, SalesName, CustAccount, InvoiceAccount from salesTable
        where salesTable.SalesType == SalesType::RORRental
            exists join custTable
            where custTable.AccountNum == salesTable.CustAccount
            &&    custTable.Party      == party
        {
            tmpFrmLookup.initFromSalesTable(salesTable);
            tmpFrmLookup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSalesTable</Name>
				<Source><![CDATA[
    private void createFromSalesTable()
    {
        SalesTable  salesTable;
        CustTable   custTable;
    
        while select SalesId, SalesName, CustAccount, InvoiceAccount from salesTable
        where salesTable.SalesType != SalesType::RORRental
            exists join custTable
            where custTable.AccountNum == salesTable.CustAccount
            &&    custTable.Party      == party
        {
            tmpFrmLookup.initFromSalesTable(salesTable);
            tmpFrmLookup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWorkOrderTable</Name>
				<Source><![CDATA[
    private void createFromWorkOrderTable()
    {
        WPPWorkOrderTable   workOrderTable;
        SalesLine           salesLine;
        SalesTable          salesTable;
        CustTable           custTable;
    
        while select workOrderTable
        where workOrderTable.CustVendAccountType == CustVendACType::Cust
        &&    workOrderTable.OrganizationParty == party
            join RecId from salesLine
            where salesLine.TableId == workOrderTable.OrderTableId
            &&    salesLine.RecId == workOrderTable.OrderRecId
                join InvoiceAccount from salesTable
                where salesTable.SalesId == salesLine.SalesId
                    exists join custTable
                    where custTable.AccountNum == salesTable.CustAccount
                    &&    custTable.Party      == workOrderTable.OrganizationParty
        {
            tmpFrmLookup.initFromWorkOrderTable(workOrderTable, salesTable.InvoiceAccount);
            tmpFrmLookup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    public FINModule parmModule(FINModule _module = module)
    {
        module = _module;
    
        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParty</Name>
				<Source><![CDATA[
    public DirPartyRecId parmParty(DirPartyRecId _party = party)
    {
        party = _party;
    
        return party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFrmLookup</Name>
				<Source><![CDATA[
    public FINTmpFrmLookup parmTmpFrmLookup(FINTmpFrmLookup _tmpFrmLookup = tmpFrmLookup)
    {
        tmpFrmLookup = _tmpFrmLookup;
    
        return tmpFrmLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        switch (module)
        {
            case FINModule::WPPWorkOrder:
                //this.createFromProjTable();
                this.createFromWorkOrderTable();
                break;
    
            case FINModule::RentalOrder:
                this.createFromRentalOrder();
                break;
    
            case FINModule::SalesOrder:
                this.createFromSalesTable();
                break;
    
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FINCreateTmpFrmLookup construct()
    {
        return new FINCreateTmpFrmLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>