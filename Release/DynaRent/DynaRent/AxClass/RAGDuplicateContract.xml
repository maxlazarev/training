<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAGDuplicateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RAGDuplicateContract extends RunBase
{
    // dialog
    DialogField             dfCurrencyCode;
    DialogField             dfDescription;
    DialogField             dfFromDate;
    DialogField             dfToDate;
    DialogField             dfContractType;
    DialogField             dfAccountRelation;
    DialogField             dfReferenceModule;
    DialogField             dfRentalSubRental;
    DialogField             dfContractIdOrig;
    DialogField             dfContractOrigToDate;
    DialogField             dfStatus;
    DialogField             dfMarkupPct;
    Map                     accountRelationMap;

    // contract to be duplicated
    RAGContractTable        contractTableOrig;
    ToDate                  contractOrigToDate;

    // new contract properties
    RAGContractId           contractIdNew;
    Description             descriptionNew;
    RAGContractType         contractTypeNew;
    RAGRelationAccount      relationAccountNew;
    RAGContractRefModule    refModuleNew;
    RAGRentalSubRental      rentalSubRentalNew;
    CurrencyCode            currencyCodeNew;
    FromDate                fromDateNew;
    ToDate                  toDateNew;
    RAGContractStatus       statusNew;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateContractOrig</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    private void checkUpdateContractOrig()
    {
        RAGContractTable contractTable;
    
        if (contractOrigToDate)
        {
            update_recordset contractTable
            setting ToDate = contractOrigToDate
            where contractTable.ContractId == contractTableOrig.ContractId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContract</Name>
				<Source><![CDATA[
    private void createContract()
    {
        RAGContractTable newContractTable;
        ;
    
        contractIdNew = RAGContractTable::getNewContractId();
    
        newContractTable.ContractId         = contractIdNew;
        newContractTable.Description        = descriptionNew;
        newContractTable.ContractType       = contractTypeNew;
        newContractTable.RelationAccount    = relationAccountNew;
        newContractTable.ReferenceModule    = refModuleNew;
        newContractTable.RentalSubRental    = rentalSubRentalNew;
        newContractTable.FromDate           = fromDateNew;
        newContractTable.ToDate             = toDateNew;
        newContractTable.CurrencyCode       = currencyCodeNew;
        newContractTable.Status             = statusNew;
    
        if (newContractTable.ContractType == RAGContractType::RentalOrder
        ||  newContractTable.ContractType == RAGContractType::RentalOrderLine)
        {
            newContractTable.setRentalSubRentalFromModule();
        }
        else
        {
            newContractTable.RentalSubRental = contractTableOrig.RentalSubRental;
        }
    
        if (!newContractTable.validateWrite())
        {
            throw error("@SYS18447");
        }
    
        newContractTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    private void createLines()
    {
        RAGContractLine     contractLineOrig;
        RAGContractLine     contractLineNew;
        ;
    
        insert_recordset contractLineNew (AgreementType, ContractId, ContractLevel, NumOfTierPeriods, RentalTypeRelation, TierPeriod, Value)
        select AgreementType, contractIdNew, ContractLevel, NumOfTierPeriods, RentalTypeRelation, TierPeriod, Value
        from  contractLineOrig
        where contractLineOrig.ContractId == contractTableOrig.ContractId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;
        DialogGroup     dgContractOrig;
        DialogGroup     dgContractCopy;
    
        DialogField     dialogField;
        RAGContractType contractType;
        DictEnum        dictEnum;
        int             i;
    
        accountRelationMap = new Map(Types::Enum, Types::Class);
        dictEnum = new DictEnum(enumNum(RAGContractType));
        dialog = super();
        dialog.allowUpdateOnSelectCtrl(true);
        dialog.caption("@DNR6617");
    
        dgContractOrig          = dialog.addGroup("@DNR6618");
        dfContractIdOrig        = dialog.addFieldValue(extendedTypeStr(RAGContractId), contractTableOrig.ContractId);
        dfContractOrigToDate    = dialog.addField(extendedTypeStr(ToDate), "@DNR6619");
    
        dgContractCopy          = dialog.addGroup("@DNR6620");
        dfDescription           = dialog.addField(extendedTypeStr(Description));
        dfContractType          = dialog.addFieldValue(enumStr(RAGContractType), contractTableOrig.ContractType);
        dfReferenceModule       = dialog.addFieldValue(enumStr(RAGContractRefModule), contractTableOrig.ReferenceModule);
        dfRentalSubRental       = dialog.addFieldValue(enumStr(RAGRentalSubRental), contractTableOrig.RentalSubRental);
    
        for (i = 0; i < dictEnum.values(); i++)
        {
            contractType        = dictEnum.index2Value(i);
            dialogField         = dialog.addField(RAGDuplicateContract::contractType2TypeName(contractType), "@SYS265");
            dialogField.displayLength(20);
            dialogField.allowEdit(contractType != RAGContractType::Default);
            dialogField.visible(contractTableOrig.ContractType == contractType);
            accountRelationMap.insert(contractType, dialogField);
        }
    
        dfCurrencyCode          = dialog.addFieldValue(extendedTypeStr(CurrencyCode), contractTableOrig.CurrencyCode);
        dfFromDate              = dialog.addFieldValue(extendedTypeStr(FromDate), contractTableOrig.ToDate + 1);
        dfToDate                = dialog.addField(extendedTypeStr(ToDate));
        dfStatus                = dialog.addField(enumStr(RAGContractStatus));
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    public void dialogSelectCtrl()
    {
        MapEnumerator   enumerator;
        DialogField     accountRelationField;
        RAGContractType contractType;
        ;
    
        super();
    
        enumerator = accountRelationMap.getEnumerator();
    
        while (enumerator.moveNext())
        {
            contractType = enumerator.currentKey();
            accountRelationField = enumerator.currentValue();
            accountRelationField.visible(dfContractType.value() == contractType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        RAGContractTable    contractTableLocal;
        MapEnumerator       enumerator;
        DialogField         accountRelationField;
        RAGContractType     contractType;
        ;
    
        enumerator = accountRelationMap.getEnumerator();
    
        while (enumerator.moveNext())
        {
            contractType = enumerator.currentKey();
            accountRelationField = enumerator.currentValue();
    
            if (dfContractType.value() == contractType)
            {
                relationAccountNew = accountRelationField.value();
            }
        }
    
        currencyCodeNew     = dfCurrencyCode.value();
        descriptionNew      = dfDescription.value();
        fromDateNew         = dfFromDate.value();
        toDateNew           = dfToDate.value();
        contractTypeNew     = dfContractType.value();
        refModuleNew        = dfReferenceModule.value();
        rentalSubRentalNew  = dfRentalSubRental.value();
        contractOrigToDate  = dfContractOrigToDate.value();
        statusNew           = dfStatus.value();
    
        contractTableLocal = RAGContractTable::find(dfContractIdOrig.value());
        this.setContractTableOrig(contractTableLocal);
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewContractId</Name>
				<Source><![CDATA[
    public RAGContractId getNewContractId()
    {
        return contractIdNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.validate())
        {
            ttsbegin;
    
            this.createContract();
            this.createLines();
            this.checkUpdateContractOrig();
    
            ttscommit;
        }
        else
        {
            throw error(strFmt("@DNR6621", contractTableOrig.ContractId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractTableOrig</Name>
				<Source><![CDATA[
    public void setContractTableOrig(RAGContractTable _contractTableOrig)
    {
        contractTableOrig = _contractTableOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractType</Name>
				<Source><![CDATA[
    public void setContractType(RAGContractType _contractType)
    {
        contractTypeNew = _contractType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    public void setCurrencyCode(CurrencyCode _currencyCode)
    {
        currencyCodeNew = _currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDescription</Name>
				<Source><![CDATA[
    public void setDescription(Description _description)
    {
        descriptionNew = _description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDate</Name>
				<Source><![CDATA[
    public void setFromDate(FromDate _fromDate)
    {
        fromDateNew = _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefModule</Name>
				<Source><![CDATA[
    public void setRefModule(RAGContractRefModule _refModule)
    {
        refModuleNew = _refModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRelationAccount</Name>
				<Source><![CDATA[
    public void setRelationAccount(RAGRelationAccount _relationAccount)
    {
        relationAccountNew = _relationAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    public void setStatus(RAGContractStatus _status)
    {
        statusNew = _status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    public void setToDate(ToDate _toDate)
    {
        toDateNew = _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;
        ;
    
        if (!currencyCodeNew)
        {
            ret = checkFailed(strFmt("@SYS50104", "@SYS7572"));
        }
    
        if (!contractTableOrig)
        {
            ret = checkFailed(strFmt("@DNR6622", dfContractIdOrig.value()));
        }
        else
        {
            if (contractOrigToDate && contractOrigToDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = checkFailed("@DNR6623");
            }
    
            if (contractOrigToDate && contractOrigToDate < contractTableOrig.FromDate)
            {
                ret = checkFailed("@DNR6624");
            }
        }
    
        if (toDateNew && toDateNew < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            ret = checkFailed("@DNR6623");
        }
    
        if (fromDateNew && toDateNew && fromDateNew > toDateNew)
        {
            ret = checkFailed("@SYS16982");
        }
    
        if(ret)
        {
            switch(contractTypeNew)
            {
                case RAGContractType::BusRelContractGroup:
                    if(!RAGBusRelContractGroup::exist(relationAccountNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR52"));
                    }
                    break;
    
                case RAGContractType::BusinessRelation:
                    if(!smmBusRelTable::exist(relationAccountNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@SYS80068"));
                    }
                    break;
    
                case RAGContractType::VenueGroup:
                    if(!RORVenueGroup::exist(relationAccountNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR6014"));
                    }
                    break;
    
                case RAGContractType::Venue:
                    if(!RORVenueTable::exist(relationAccountNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR6006"));
                    }
                    break;
    
                case RAGContractType::ProjectGroup:
                    if(!ProjGroup::exist(relationAccountNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@SYS15509"));
                    }
                    break;
    
                case RAGContractType::Project:
                    if(!ProjTable::exist(relationAccountNew))
                    {
                        ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@SYS36368"));
                    }
                    break;
    
                case RAGContractType::RentalOrder:
                    switch(refModuleNew)
                    {
                        case RAGContractRefModule::Sales:
                            if(SalesTable::find(relationAccountNew).SalesType != SalesType::RORRental)
                            {
                                ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR1087"));
                            }
                            break;
    
                        case RAGContractRefModule::Purchase:
                            if(PurchTable::find(relationAccountNew).PurchaseType != PurchaseType::RORSubRental)
                            {
                                ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR3227"));
                            }
                            break;
    
                        case RAGContractRefModule::Quotation:
                            if(SalesQuotationTable::find(relationAccountNew).QuotationType != QuotationType::RORRental)
                            {
                                ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR1593"));
                            }
                            break;
    
                        default:
                            ret = checkFailed(strFmt("@DNR1721", "@DNR6447", contractTypeNew, "@SYS9941"));
                            break;
                    }
                    break;
    
                case RAGContractType::RentalOrderLine:
                    switch(refModuleNew)
                    {
                        case RAGContractRefModule::Sales:
                            if(!SalesLine::findInventTransId(relationAccountNew).RecId)
                            {
                                ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR5966"));
                            }
                            break;
    
                        case RAGContractRefModule::Purchase:
                            if(!PurchLine::findInventTransId(relationAccountNew).RecId)
                            {
                                ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR5973"));
                            }
                            break;
    
                        case RAGContractRefModule::Quotation:
                            if(!SalesQuotationLine::findInventTransId(relationAccountNew).RecId)
                            {
                                ret = checkFailed(strFmt("@SYS55265", relationAccountNew, "@SYS265", "@DNR6843"));
                            }
                            break;
    
                        default:
                            ret = checkFailed(strFmt("@DNR1721", "@DNR6447", contractTypeNew, "@SYS9941"));
                            break;
                    }
                    break;
    
                default:
                    // no additional check
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAGDuplicateContract construct()
    {
        return new RAGDuplicateContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExactDuplicate</Name>
				<Source><![CDATA[
    public static RAGDuplicateContract constructExactDuplicate(RAGContractTable _contractTable)
    {
        RAGDuplicateContract duplicator = new RAGDuplicateContract();
    
        duplicator.setContractTableOrig(_contractTable);
        duplicator.setDescription(_contractTable.Description);
        duplicator.setContractType(_contractTable.ContractType);
        duplicator.setRelationAccount(_contractTable.RelationAccount);
        duplicator.setRefModule(_contractTable.ReferenceModule);
        duplicator.setCurrencyCode(_contractTable.CurrencyCode);
        duplicator.setFromDate(_contractTable.FromDate);
        duplicator.setToDate(_contractTable.ToDate);
        duplicator.setStatus(RAGContractStatus::Created);
    
        return duplicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractType2TypeName</Name>
				<Source><![CDATA[
    private static ExtendedDataTypeName contractType2TypeName(RAGContractType _type)
    {
        ExtendedDataTypeName ret;
    
        switch (_type)
        {
            case RAGContractType::BusRelContractGroup:
                ret = extendedTypeStr(RAGBusRelGroupId);
                break;
    
            case RAGContractType::BusinessRelation:
                ret = extendedTypeStr(smmBusRelAccount);
                break;
    
            case RAGContractType::VenueGroup:
                ret = extendedTypeStr(RORVenueGroupId);
                break;
    
            case RAGContractType::Venue:
                ret = extendedTypeStr(RORVenueCode);
                break;
    
            case RAGContractType::ProjectGroup:
                ret = extendedTypeStr(ProjGroupId);
                break;
    
            case RAGContractType::Project:
                ret = extendedTypeStr(ProjId);
                break;
    
            default:
                // no lookups for default, rental order, and rental order line
                ret = extendedTypeStr(Num);
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@DNR6617";
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateAll</Name>
				<Source><![CDATA[
    public static server void duplicateAll(
        RAGContractType      _contractType,
        RAGRelationAccount   _relationAccountFrom,
        RAGContractRefModule _refModuleFrom,
        CurrencyCode         _currencyCode,
        RAGRelationAccount   _relationAccountTo,
        RAGContractRefModule _refModuleTo)
    {
        RAGContractTable        contractTable;
        RAGDuplicateContract    duplicator;
    
        while select contractTable
        where contractTable.ContractType    == _contractType
        &&    contractTable.RelationAccount == _relationAccountFrom
        &&    contractTable.ReferenceModule == _refModuleFrom
        &&    contractTable.CurrencyCode    == _currencyCode
        {
            duplicator = RAGDuplicateContract::constructExactDuplicate(contractTable);
            duplicator.setRefModule(_refModuleTo);
            duplicator.setRelationAccount(_relationAccountTo);
            duplicator.setStatus(contractTable.Status);
            duplicator.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RAGContractView         contractView;
        RAGContractTable        callerContractTable;
        RAGDuplicateContract    duplicator;
        FormDataSource          formDataSource;
        Args                    newArgs;
        ;
    
        duplicator = RAGDuplicateContract::construct();
    
        if (_args)
        {
            if (_args.dataset() == tableNum(RAGContractTable))
            {
                callerContractTable = _args.record();
            }
            else if (_args.dataset() == tableNum(RAGContractView))
            {
                contractView = _args.record();
                callerContractTable = RAGContractTable::find(contractView.ContractId);
            }
        }
    
        duplicator.setContractTableOrig(callerContractTable);
    
        if (duplicator.prompt())
        {
            duplicator.runOperation();
    
            if (_args && _args.record() && FormDataUtil::isFormDataSource(_args.record()))
            {
                formDataSource = FormDataUtil::getFormDataSource(_args.record());
                formDataSource.research(true);
                formDataSource.refresh();
            }
            else
            {
                newArgs = new Args();
                newArgs.lookupField(fieldNum(RAGContractTable, ContractId));
                newArgs.lookupValue(duplicator.getNewContractId());
                new MenuFunction(menuitemDisplayStr(RAGContractTable), MenuItemType::Display).run(newArgs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>