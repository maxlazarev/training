<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchAutoCreate_SalesStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DNRExtensionStrategyFactoryAttribute(classStr(PurchAutoCreate_Sales))]
class DNRPurchAutoCreate_SalesStrategy extends DNRPurchAutoCreateStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RORCreateRentalDatesForHeader</Name>
				<Source><![CDATA[
    public void RORCreateRentalDatesForHeader()
    {
        PurchAutoCreate_Sales hostObj = this.parmPurchAutoCreate_Sales();

        PurchTable purchTable = hostObj.parmPurchTable();
        SalesTable salesTable = hostObj.DNRParmSalesTable();

        // Synchronise purchase rental dates from sales header
        if (purchTable.PurchaseType == PurchaseType::RORSubRental)
        {
            if (hostObj.DNRParmBack2BackRentalDateTimes())
            {
                using (DNRPrimitiveDisposableContext context = new DNRPrimitiveDisposableContext())
                {
                    SetEnumerator setEnumerator = Set::create(hostObj.DNRParmBack2BackRentalDateTimes()).getEnumerator();
                    setEnumerator.moveNext();

                    context.DNRparmBoolean(true);

                    SalesLine salesLine = SalesLine::findRecId(setEnumerator.current().getFieldValue(literalStr(RefRecId)));
                    LogisticsPostalAddress logisticsPostalAddress = salesLine.inventDim().inventLocation().LogisticsPostalAddress();
                    
                    ttsbegin;

                    if (logisticsPostalAddress)
                    {
                        purchTable.DeliveryPostalAddress = logisticsPostalAddress.RecId;
                    }

                    LogisticsLocation location = LogisticsLocation::find(LogisticsPostalAddress.Location);
                    if (location.Description)
                    {
                        purchTable.DeliveryName = location.Description;
                    }
                    else
                    {
                        purchTable.DeliveryName = salesLine.DeliveryName;
                    }

                    purchTable.DNRBack2Back = NoYes::Yes;
                    purchTable.update();
                    ttscommit;

                    hostObj.RORCopyRentalDateTimes(setEnumerator.current(), purchTable, true); // copy dates from the first line to the header
                }
            }
            else
            {
                hostObj.RORCopyRentalDateTimes(salesTable.RORRentalDateTimesHost::rentalDateTimes(), purchTable, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUseExistingPurchTable</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public boolean RORUseExistingPurchTable(boolean _searchForPurchTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAutoCreate_Sales</Name>
				<Source><![CDATA[
    private PurchAutoCreate_Sales parmPurchAutoCreate_Sales()
    {
        return this.parmPurchAutoCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>