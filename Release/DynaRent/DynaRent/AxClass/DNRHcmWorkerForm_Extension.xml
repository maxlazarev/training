<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRHcmWorkerForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(HcmWorker))]
public final class DNRHcmWorkerForm_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        next init();

        FINDimValueController::setEditableDimensionSet(tableNum(HcmWorker), this.design().controlName(formControlStr(HcmWorker, FINDimensionEntryControl)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRWorkerDefaults_updateDesign</Name>
				<Source><![CDATA[
    // extension methods

    public void DNRWorkerDefaults_updateDesign(FormDataSource _dataSource)
    {
        DNRWorkerDefaults recordBuffer = _dataSource.cursor() as DNRWorkerDefaults;

        _dataSource.object(fieldNum(DNRWorkerDefaults, LocalAssignmentOnly)).allowEdit(recordBuffer.InventLocationId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRWorkerDefaults_OnJumpRef</Name>
				<Source><![CDATA[
    public void DNRWorkerDefaults_OnJumpRef(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        SelectableDataArea company = _sender.datasource().cursor().company();

        if(curExt() == company)
        {
            // no need to interfere -- perform the jumpRef, don't cancel the super call
        }
        else
        {
            changecompany(company)
            {
                _sender.jumpRef(); // call jumpRef again, this time in the appropriate company
            }

            FormDataFieldCancelableSuperEventArgs cancelableArgs = _eventArgs as FormDataFieldCancelableSuperEventArgs;
            cancelableArgs.CancelSuperCall(); // don't call super()
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNRWorkerDefaultsDS_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods

    [FormDataSourceEventHandler(formDataSourceStr(HcmWorker, DNRWorkerDefaults), FormDataSourceEventType::Initialized)]
    public static void DNREvent_DNRWorkerDefaultsDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        Object formRunObject = _sender.formRun() as Object;
        formRunObject.DNRWorkerDefaults_updateDesign(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNRWorkerDefaultsDS_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorker, DNRWorkerDefaults), FormDataSourceEventType::SelectionChanged)]
    public static void DNREvent_DNRWorkerDefaultsDS_OnSelectionChanged(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        Object formRunObject = _sender.formRun() as Object;
        formRunObject.DNRWorkerDefaults_updateDesign(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNRWorkerDefaultsDS_InventLocationId_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorker, DNRWorkerDefaults, InventLocationId), FormDataFieldEventType::Modified)]
    public static void DNREvent_DNRWorkerDefaultsDS_InventLocationId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        Object formRunObject = _sender.datasource().formRun() as Object;
        formRunObject.DNRWorkerDefaults_updateDesign(_sender.datasource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNRWorkerDefaultsDS_InventLocationId_OnJumpRef</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorker, DNRWorkerDefaults, InventLocationId), FormDataFieldEventType::JumpRef)]
    public static void DNREvent_DNRWorkerDefaultsDS_InventLocationId_OnJumpRef(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        Object formRunObject = _sender.datasource().formRun() as Object;
        formRunObject.DNRWorkerDefaults_OnJumpRef(_sender, _eventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNRWorkerDefaultsDS_RORInventJournalWarehouse_OnJumpRef</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorker, DNRWorkerDefaults, RORInventJournalWarehouse), FormDataFieldEventType::JumpRef)]
    public static void DNREvent_DNRWorkerDefaultsDS_RORInventJournalWarehouse_OnJumpRef(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        Object formRunObject = _sender.datasource().formRun() as Object;
        formRunObject.DNRWorkerDefaults_OnJumpRef(_sender, _eventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_FINFinancialDimensionsCTRL_OnPageActivated</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(HcmWorker, FINFinancialDimensions), FormControlEventType::PageActivated)]
    public static void DNREvent_FINFinancialDimensionsCTRL_OnPageActivated(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun();
        HcmWorker hcmWorker = formRunObj.dataSource(formDataSourceStr(HcmWorker, HcmWorker)).cursor();

        DimensionEntryControl dimensionEntryControl = formRunObj.design().controlName(formControlStr(HcmWorker, FINDimensionEntryControl));
        dimensionEntryControl.parmCompany(hcmWorker.company());
        dimensionEntryControl.reactivate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>