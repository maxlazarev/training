<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventJournalCountForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventJournalCount))]
public final class DNRInventJournalCountForm_Extension
{
    private boolean isBOBCountingJournal;
    private Map     inventSerialIdCache;        // key = InventJournalTrans.RecId, value = InventDim.InventSerialId
    private Map     objectViewCache;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructInventJournalCountController</Name>
				<Source><![CDATA[
    protected InventJournalFormTrans_Mov_Count constructInventJournalCountController()
    {
        InventJournalFormTrans_Mov_Count ret = next constructInventJournalCountController();
        
        if(isBOBCountingJournal)
        {
            ret =  new InventJournalFormTrans_Mov_BOBCount(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    void enableButtonsActive()
    {
        next enableButtonsActive();

        DNRInventCountCreateItems.enabled(!inventJournalTable.NumOfLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInvalidInitFormMethodWarning", "Validation of caller must be performed before invoking super().")]
    void init()
    {
        if (this.args().menuItemName() == menuitemDisplayStr(BOBInventJournalTableRentalItemCount))
        {
            isBOBCountingJournal = true;
        }
        
        next init();

        if(isBOBCountingJournal)
        {
            this.design().caption("@DNR:RentalCounting");
            InventJournalTable_InventSiteId.visible(true);
            InventJournalTable_InventLocationId.visible(true);

            Count_MenuButton.visible(false);
            BOBCount_MenuButton.visible(true);

        }

        FINDimValueController::setEditableDimensionSet(tableNum(InventJournalTrans), this.design().controlName(formControlStr(InventJournalCount, DimensionEntryControl)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBIsObjectCountingJournal</Name>
				<Source><![CDATA[
    // extension methods

    public boolean BOBIsObjectCountingJournal()
    {
        return isBOBCountingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTransDS_ItemId_OnLookup</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public void inventJournalTransDS_ItemId_OnLookup(FormStringControl _formControl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTransDS_BOBRentalTypeId_OnLookup</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public void inventJournalTransDS_BOBRentalTypeId_OnLookup(FormStringControl _formControl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmJournalFormController</Name>
				<Source><![CDATA[
    public InventJournalFormController_Movement DNRparmJournalFormController(InventJournalFormController_Movement _journalFormController = journalFormController)
    {
        journalFormController = _journalFormController;
        return journalFormController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmInventJournalCountForm</Name>
				<Source><![CDATA[
    public InventJournalCountForm DNRParmInventJournalCountForm(InventJournalCountForm _inventJournalCountForm = inventJournalCountForm)
    {
        inventJournalCountForm = _inventJournalCountForm;
        return inventJournalCountForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBeditTransDateTime</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    edit TransDateTime BOBeditTransDateTime(boolean _set, TransDateTime _transDateTime)
    {
        return utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBInitializeCaches</Name>
				<Source><![CDATA[
    public void BOBInitializeCaches()
    {
        // Initialize the relevant caches.
        objectViewCache         = new Map(Types::Int64, Types::Record);
        inventSerialIdCache     = new Map(Types::Int64, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBResetActiveRecordCache</Name>
				<Source><![CDATA[
    public void BOBResetActiveRecordCache()
    {
        if(objectViewCache.exists(inventJournalTrans.RecId))
        {
            objectViewCache.remove(inventJournalTrans.RecId);
        }
        
        if(inventSerialIdCache.exists(inventJournalTrans.RecId))
        {
            inventSerialIdCache.remove(inventJournalTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetObjectViewCache</Name>
				<Source><![CDATA[
    public Map DNRGetObjectViewCache()
    {
        return objectViewCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetInventSerialIdCache</Name>
				<Source><![CDATA[
    public Map DNRGetInventSerialIdCache()
    {
        return inventSerialIdCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayAssetId</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display AssetId BOBdisplayAssetId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayAssetQty</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display AssetQuantity BOBdisplayAssetQty()
    {
        AssetQuantity ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayIsObjectAvailable</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false) ,
     SysClientCacheDataMethodAttribute(true)]
    display NoYes BOBdisplayIsObjectAvailable()
    {
        NoYes ret;
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationCounty</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressCountyId BOBdisplayObjectLocationCounty()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationCountryRegionId</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressCountryRegionId BOBdisplayObjectLocationCountryRegionId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationZipCode</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressZipCodeId BOBdisplayObjectLocationZipCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationStreet</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressStreet BOBdisplayObjectLocationStreet()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationCity</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressCityName BOBdisplayObjectLocationCity()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationStreetNum</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressStreetNumber BOBdisplayObjectLocationStreetNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayObjectLocationState</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressStateId BOBdisplayObjectLocationState()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBObtainCurrAddressForCurrInventJournalTrans</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    private BOBObjectAddressView BOBObtainCurrAddressForCurrInventJournalTrans()
    {
        BOBObjectAddressView objectAddressView;

        return objectAddressView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayQtyNotYetReturned</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBRentalQty BOBDisplayQtyNotYetReturned()
    {
        InventJournalFormTrans_Mov_BOBCount formClass   = this.journalForm() as InventJournalFormTrans_Mov_BOBCount;
        return formClass.qtyNotYetReturned();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayQtyNotYetDelivered</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBRentalQty BOBDisplayQtyNotYetDelivered()
    {
        InventJournalFormTrans_Mov_BOBCount formClass   = this.journalForm() as InventJournalFormTrans_Mov_BOBCount;
        return formClass.qtyNotYetDelivered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBparmIsCountingJournal</Name>
				<Source><![CDATA[
    // Do not allow the class variable 'isBOBCountingJournal' to be set from outside this class; we want to keep it in sync with the eponymous
    // class variable in the class 'DNRInventJournalTableForm_Extension'.
    public boolean BOBparmIsCountingJournal()
    {
        return isBOBCountingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTableDS_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods

    [FormDataSourceEventHandler(formDataSourceStr(InventJournalCount, InventJournalTable), FormDataSourceEventType::Initialized)]
    public static void DNREvent_InventJournalTableDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.formRun() as FormRun;
        QueryBuildRange qbr = SysQuery::findOrCreateRange(_sender.queryBuildDataSource(), fieldNum(InventJournalTable, BOBInventJournalType));
        
        if(hostForm.BOBIsObjectCountingJournal())
        {
            qbr.value(SysQuery::value(BOBInventJournalType::Count));
        }
        else
        {
            qbr.value(SysQuery::value(BOBInventJournalType::Standard));
        }

        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventJournalCount, InventJournalTrans), FormDataSourceEventType::Initialized)]
    public static void DNREvent_InventJournalTransDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.formRun() as FormRun;

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;

            _sender.object(fieldNum(InventJournalTrans, ItemId)).registerOverrideMethod(methodStr(FormDataObject, lookup),
                                                                                        methodStr(InventJournalFormTrans_Mov_BOBCount, lookupItemId), formClass);
            _sender.object(fieldNum(InventJournalTrans, BOBRentalTypeId)).registerOverrideMethod(methodStr(FormDataObject, lookup), 
                                                                                                 methodStr(InventJournalFormTrans_Mov_BOBCount, lookupRentalType), formClass);
        }
        else
        {
            _sender.object(fieldNum(InventJournalTrans, BOBCounted)).visible(false);
            _sender.object(fieldNum(InventJournalTrans, BOBQty)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_OnValidatedWrite</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventJournalCount, InventJournalTrans), FormDataSourceEventType::ValidatedWrite)]
    public static void DNREvent_InventJournalTransDS_OnValidatedWrite(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun     hostForm    = _sender.formRun() as FormRun;

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            if(!formClass.dataSourceValidatePost())
            {
                FormDataSourceCancelEventArgs eventArgs = _eventArgs as FormDataSourceCancelEventArgs;
                eventArgs.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_OnValidatedDelete</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventJournalCount, InventJournalTrans), FormDataSourceEventType::ValidatedDelete)]
    public static void DNREvent_InventJournalTransDS_OnValidatedDelete(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun     hostForm    = _sender.formRun() as FormRun;

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            if(!formClass.dataSourceValidateDeletePost())
            {
                FormDataSourceCancelEventArgs eventArgs = _eventArgs as FormDataSourceCancelEventArgs;
                eventArgs.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_OnQueryExecuted</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(InventJournalCount, InventJournalTrans), FormDataSourceEventType::QueryExecuted)]
    public static void DNREvent_InventJournalTransDS_OnQueryExecuted(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun     hostForm    = _sender.formRun() as FormRun;

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            formClass.datasourceExecuteQueryPost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_BOBRentalTypeId_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalCount, InventJournalTrans, BOBRentalTypeId), FormDataFieldEventType::Modified)]
    public static void DNREvent_InventJournalTransDS_BOBRentalTypeId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun     hostForm    = _sender.datasource().formRun() as FormRun;

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            formClass.fieldModifiedRentalTypePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_BOBQty_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalCount, InventJournalTrans, BOBQty), FormDataFieldEventType::Modified)]
    public static void DNREvent_InventJournalTransDS_BOBQty_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.datasource().formRun();

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount     formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            formClass.fieldModifiedBOBQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_BOBCounted_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalCount, InventJournalTrans, BOBCounted), FormDataFieldEventType::Modified)]
    public static void DNREvent_InventJournalTransDS_BOBCounted_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.datasource().formRun();

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount     formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            formClass.fieldModifiedBOBCounted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventJournalTransDS_BOBCounted_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalCount, InventJournalTrans, BOBCounted), FormDataFieldEventType::Validated)]
    public static void DNREvent_InventJournalTransDS_BOBCounted_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.datasource().formRun();

        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount     formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            if(!formClass.fieldValidatedCountedPost())
            {
                FormDataFieldCancelEventArgs eventArgs = _eventArgs as FormDataFieldCancelEventArgs;
                eventArgs.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventDimDS_inventSerialId_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalCount, InventDim, inventSerialId), FormDataFieldEventType::Modified)]
    public static void DNREvent_InventDimDS_inventSerialId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.datasource().formRun();

        if(hostForm.BOBIsObjectCountingJournal())
        {
            hostForm.BOBResetActiveRecordCache();
            InventJournalFormTrans_Mov_BOBCount     formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            formClass.fieldModifiedInventSerialID();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventDimDS_InventSerialId_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(InventJournalCount, InventDim, inventSerialId), FormDataFieldEventType::Validated)]
    public static void DNREvent_InventDimDS_InventSerialId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.datasource().formRun();
        
        if(hostForm.BOBIsObjectCountingJournal())
        {
            InventJournalFormTrans_Mov_BOBCount     formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
            
            if(!formClass.fieldValidatedInventSerialIdPost())
            {
                FormDataFieldCancelEventArgs eventArgs = _eventArgs as FormDataFieldCancelEventArgs;
                eventArgs.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBBusinessObject_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(InventJournalCount, BOBBusinessObject), FormControlEventType::Clicked)]
    public static void BOBBusinessObject_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.formRun() as FormRun;
        InventJournalFormTrans_Mov_BOBCount     formClass   = hostForm.journalForm() as InventJournalFormTrans_Mov_BOBCount;
        formClass.BOBBusinessObjectCtrlClicked();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>