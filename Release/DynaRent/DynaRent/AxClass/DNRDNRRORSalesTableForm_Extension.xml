<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRDNRRORSalesTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(DNRRORSalesTable))]
public final class DNRDNRRORSalesTableForm_Extension
{
    private SalesTable salesTable_Orig;
    private SalesLine salesline_Orig;
    private InventTransId callerSubRentalLineInventTransId;
    private RecId recIdParent;
    private SalesLine salesLinePreDelete;
    private boolean lineAmountModified;
    private boolean showRentalLineEditor;
    private boolean updateKitPricing;
    private boolean rereadLines;
    private boolean convertPrices;
    private boolean isOverrideMethodRegistered;
    private RORTradeType salesLineTradeType;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setItemIdFieldsOnSalesLine</Name>
				<Source><![CDATA[
    protected void setItemIdFieldsOnSalesLine(ItemId _itemId)
    {
        next setItemIdFieldsOnSalesLine(_itemId);

        if (!salesLine
        &&  salesLine.RORTradeType == RORTradeType::Rental
        &&  salesLineTradeType == RORTradeType::SalesPurch)
        {
            salesLine.RORTradeType = RORTradeType::SalesPurch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSalesTableFormFromEnumType</Name>
				<Source><![CDATA[
    protected SalesTableForm constructSalesTableFormFromEnumType(EnumId _initialMenuItemArgsEnumId, SalesTableFormId _initialMenuItemArgsFormId, Common _initialFormRunRecord)
    {
        SalesTableForm ret = next constructSalesTableFormFromEnumType(_initialMenuItemArgsEnumId, _initialMenuItemArgsFormId, _initialFormRunRecord);
        
        if (_initialMenuItemArgsEnumId != enumNum(SalesTableFormId))
        {
            ret = SalesTableForm::construct(SalesTableFormId::RORRentalOrder, this.args().record());
        }

        if (this.args().dataset() == tableNum(RORVenueTable))
        {
            RORVenueTable venueTable = this.args().record();
            ret.RORparmVenueCode(venueTable.VenueCode);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listPageFormName</Name>
				<Source><![CDATA[
    protected str listPageFormName()
    {
        str ret = next listPageFormName();
        ret = formStr(RORSalesTableListPage);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void  init()
    {
        if (this.args().dataset() == tableNum(RORSubRentalOrderLineView)
        &&  this.args().caller()
        &&  this.args().caller().name() == formStr(RORSubRentalOrderLineListPage))
        {
            callerSubRentalLineInventTransId = this.args().record().getFieldValue(fieldStr(RORSubRentalOrderLineView, InventTransId));
        }

        next init();

        CaseButton.visible(false);
        DNRCaseButton.visible(true);

        salesTable_ds.object(fieldNum(SalesTable, Reservation)).visible(false);

        FINDimValueController::setEditableDimensionSet(tableNum(SalesTable), DimensionEntryControlTable);
        FINDimValueController::setEditableDimensionSet(tableNum(SalesLine), DimensionEntryControlLine);

        McrMarginPercentSalesLineUpdate.visible(false);
        
        FormFunctionButtonControl fmbcRORCreateSubRentalOrder = this.design().controlName(formControlStr(DNRRORSalesTable, RORCreateSubRentalOrder)) as FormFunctionButtonControl;
        FormFunctionButtonControl fmbcRORCreateSubRentalOrderMultipleLines = this.design().controlName(formControlStr(DNRRORSalesTable, RORCreateSubRentalOrderMultipleLines)) as FormFunctionButtonControl;
        FormFunctionButtonControl fmbcButtonRORPurchTableThisCompany = this.design().controlName(formControlStr(DNRRORSalesTable, ButtonRORPurchTableThisCompany)) as FormFunctionButtonControl;
        FormFunctionButtonControl fmbcROROrderAmendmentDialogType_ChangeDate_Header = this.design().controlName(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_ChangeDate_Header)) as FormFunctionButtonControl;
        FormFunctionButtonControl fmbcRORbuttonUpdateInvoiceProj = this.design().controlName(formControlStr(DNRRORSalesTable, RORbuttonUpdateInvoiceProj)) as FormFunctionButtonControl;
        FormFunctionButtonControl fmbcBOBObjectAssignmentEngine = this.design().controlName(formControlStr(DNRRORSalesTable, BOBObjectAssignmentEngine)) as FormFunctionButtonControl;
        
        FormButtonControl fbcButtonInterCompanyRORSalesTable = this.design().controlName(formControlStr(DNRRORSalesTable, ButtonInterCompanyRORSalesTable)) as FormButtonControl;
        FormButtonControl fbcButtonInterCompanyOriginalRORSalesTable = this.design().controlName(formControlStr(DNRRORSalesTable, ButtonInterCompanyOriginalRORSalesTable)) as FormButtonControl;
        FormButtonControl fbcButtonInterCompanyRORPurchTable = this.design().controlName(formControlStr(DNRRORSalesTable, ButtonInterCompanyRORPurchTable)) as FormButtonControl;
        
        FormStringControl fscRORContactPerson_M_editContactPersonName = this.design().controlName(formControlStr(DNRRORSalesTable, RORContactPerson_M_editContactPersonName)) as FormStringControl;
        FormStringControl fscRORContactPerson_M_ROReditContactPersonNameOperator = this.design().controlName(formControlStr(DNRRORSalesTable, RORContactPerson_M_ROReditContactPersonNameOperator)) as FormStringControl;
        FormStringControl fscBOBObjectTable_ObjectId = this.design().controlName(formControlStr(DNRRORSalesTable, BOBObjectTable_ObjectId)) as FormStringControl;
        FormStringControl fscBOBObjectTable_AssetId = this.design().controlName(formControlStr(DNRRORSalesTable, BOBObjectTable_AssetId)) as FormStringControl;
        FormStringControl fscBOBObjectTable_FleetNumber = this.design().controlName(formControlStr(DNRRORSalesTable, BOBObjectTable_FleetNumber)) as FormStringControl;
        FormStringControl fscBOBFixedAssets_M_BOBEditAssetId = this.design().controlName(formControlStr(DNRRORSalesTable, BOBFixedAssets_M_BOBEditAssetId)) as FormStringControl;
        FormStringControl fscROReditContactPersonNameOperator = this.design().controlName(formControlStr(DNRRORSalesTable, ROReditContactPersonNameOperator)) as FormStringControl;

        FormRealControl frcROReditLineAmount = this.design().controlName(formControlStr(DNRRORSalesTable, ROReditLineAmount)) as FormRealControl;

        // std controls
        FormFunctionButtonControl fmbcbuttonPurchTable = this.design().controlName(formControlStr(DNRRORSalesTable, buttonPurchTable)) as FormFunctionButtonControl;
        FormFunctionButtonControl fmbcCheckCreditLimit = this.design().controlName(formControlStr(DNRRORSalesTable, CheckCreditLimit)) as FormFunctionButtonControl;
        FormFunctionButtonControl fmbcbuttonDeliverySchedule = this.design().controlName(formControlStr(DNRRORSalesTable, buttonDeliverySchedule)) as FormFunctionButtonControl;

        // override methods

        fmbcRORCreateSubRentalOrder.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, RORCreateSubRentalOrderCTRL_onClicked), this);
        fmbcRORCreateSubRentalOrderMultipleLines.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, RORCreateSubRentalOrderMultipleLinesCTRL_onClicked), this);
        fmbcButtonRORPurchTableThisCompany.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, ButtonRORPurchTableThisCompanyCTRL_onClicked), this);
        fmbcROROrderAmendmentDialogType_ChangeDate_Header.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, ROROrderAmendmentDialogType_ChangeDate_HeaderCTRL_onClicked), this);
        fmbcRORbuttonUpdateInvoiceProj.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, RORbuttonUpdateInvoiceProjCTRL_onClicked), this);
        fmbcBOBObjectAssignmentEngine.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, BOBObjectAssignmentEngineCTRL_onClicked), this);

        fbcButtonInterCompanyRORSalesTable.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, ButtonInterCompanyRORSalesTableCTRL_onClicked), this);
        fbcButtonInterCompanyOriginalRORSalesTable.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, ButtonInterCompanyOriginalRORSalesTableCTRL_onClicked), this);
        fbcButtonInterCompanyRORPurchTable.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, ButtonInterCompanyRORPurchTableCTRL_onClicked), this);

        
        fscRORContactPerson_M_editContactPersonName.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(DNRDNRRORSalesTableForm_Extension, RORContactPerson_M_editContactPersonNameCTRL_onJumpRef), this);
        fscRORContactPerson_M_editContactPersonName.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DNRDNRRORSalesTableForm_Extension, RORContactPerson_M_editContactPersonNameCTRL_onLookup), this);
        fscRORContactPerson_M_ROReditContactPersonNameOperator.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(DNRDNRRORSalesTableForm_Extension, RORContactPerson_M_ROReditContactPersonNameOperatorCTRL_onJumpRef), this);
        fscRORContactPerson_M_ROReditContactPersonNameOperator.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DNRDNRRORSalesTableForm_Extension, RORContactPerson_M_ROReditContactPersonNameOperatorCTRL_onLookup), this);
        fscBOBObjectTable_ObjectId.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(DNRDNRRORSalesTableForm_Extension, BOBObjectTable_ObjectIdCTRL_onJumpRef), this);
        fscBOBObjectTable_AssetId.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(DNRDNRRORSalesTableForm_Extension, BOBObjectTable_AssetIdCTRL_onJumpRef), this);
        fscBOBObjectTable_FleetNumber.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(DNRDNRRORSalesTableForm_Extension, BOBObjectTable_FleetNumberCTRL_onJumpRef), this);
        fscBOBFixedAssets_M_BOBEditAssetId.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(DNRDNRRORSalesTableForm_Extension, BOBFixedAssets_M_BOBEditAssetIdCTRLonJumpRef), this);
        fscBOBFixedAssets_M_BOBEditAssetId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DNRDNRRORSalesTableForm_Extension, BOBFixedAssets_M_BOBEditAssetIdCTRLonLookup), this);
        fscROReditContactPersonNameOperator.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(DNRDNRRORSalesTableForm_Extension, ROReditContactPersonNameOperatorCTRLonJumpRef), this);
        fscROReditContactPersonNameOperator.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DNRDNRRORSalesTableForm_Extension, ROReditContactPersonNameOperatorCTRLonLookup), this);
        
        frcROReditLineAmount.registerOverrideMethod(methodStr(FormRealControl, modified), methodStr(DNRDNRRORSalesTableForm_Extension, ROReditLineAmountCTRLonModified), this);

        // std controls
        fmbcbuttonPurchTable.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, buttonPurchTableCTRL_onClicked), this);
        fmbcCheckCreditLimit.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, CheckCreditLimitCTRL_onClicked), this);
        fmbcbuttonDeliverySchedule.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked), methodStr(DNRDNRRORSalesTableForm_Extension, buttonDeliveryScheduleCTRL_onClicked), this);

    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void  run()
    {
        next run();

        if(callerSubRentalLineInventTransId
        && (select count(RecId) from RORSubrentalReference
            where RORSubrentalReference.PurchInventTransId == callerSubRentalLineInventTransId).RecId > 1)
        {
            this.task(1317); // multiple rental order lines attached to caller -- switch to grid view
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(InventDimFormDesignUpdate mode)
    {
        next updateDesign(mode);

        switch (mode)
        {
            case InventDimFormDesignUpdate::Active,
                 InventDimFormDesignUpdate::FieldChange:
                inventDim_ds.object(fieldNum(InventDim, InventSerialId)).allowEdit(salesLine.RecId != 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditNoteLine</Name>
				<Source><![CDATA[
    void checkCreditNoteLine()
    {
        next checkCreditNoteLine();

        if(salesLine.RORTradeType != RORTradeType::SalesPurch)
        {
            salesLine_ds.object(fieldNum(SalesLine, Scrap)).allowEdit(false);
            salesLine_ds.object(fieldNum(SalesLine, Scrap)).skip(true);

            salesLine_ds.object(fieldNum(SalesLine, InventTransIdReturn)).allowEdit(false);
            salesLine_ds.object(fieldNum(SalesLine, InventTransIdReturn)).skip(true);

            salesLine_ds.object(fieldNum(SalesLine, CostPrice)).allowEdit(false);
            salesLine_ds.object(fieldNum(SalesLine, CostPrice)).skip(true);
        }

        TMSRateRouteWorkbench_Rate.enabled(true);
        TMSRateRouteWorkbench_RateShop.enabled(true);
        TMSRateRouteWorkbench_Route.enabled(true);
        TMSRateRouteWorkbench_RateRoute.enabled(true);
        AutoRate.enabled(true);
        TMSRateRouteWorkbench.enabled(true);
        TMSRouteWorkbench.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmSourceIdUpdateOnLines</Name>
				<Source><![CDATA[
    protected boolean confirmSourceIdUpdateOnLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRefresh</Name>
				<Source><![CDATA[
    void doRefresh(boolean _lineRefreshNeeded)
    {
        next doRefresh(_lineRefreshNeeded);
        RORRentalDateTimesHeader_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaptionText</Name>
				<Source><![CDATA[
    void  setCaptionText()
    {
        next setCaptionText();

        Name name = salesTable.isInterCompanyOrder() ? salesTable.DeliveryName : salesTable.SalesName;
        
        this.design().caption(strFmt("@SYS4009992",
                                        "@DNR6231",
                                        salesTable.SalesId,
                                        ',',
                                        "@SYS7399",
                                        name,
                                        ',',
                                        "@SYS5398",
                                        salesLine.itemName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetEditGiftCard</Name>
				<Source><![CDATA[
    void mcrSetEditGiftCard()
    {
        next mcrSetEditGiftCard();

        giftCardVirtual.visible(false);
        giftCardPhysical.visible(false);
        mcrSalesLine_GiftCardNumber.visible(false);
        mcrGiftCardPolicies.visible(false);
        MCRSalesLine_GiftCardAmount_RU.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetFormParts</Name>
				<Source><![CDATA[
    void mcrSetFormParts()
    {
        next mcrSetFormParts();

        if(LineViewTab.isDisplayed())
        {
            SalesLine_ItemId.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOrderEntryModeInit</Name>
				<Source><![CDATA[
    void mcrOrderEntryModeInit()
    {
        next mcrOrderEntryModeInit();

        MCRLogisticsLocationSelectHeader1.visible(false);
        CopyOfDirPartyPostalAddressNewHeader.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>noteFormatEdit</Name>
				<Source><![CDATA[
    public void noteFormatEdit()
    {
        noteFormat_TH.visible(false);
        salesTable_RefInvoiceId_TH.visible(false);
        salesTable_RefInvoiceAmountCur_TH.visible(false);
        editReasonCode_TH.visible(false);
        salesTable_TaxAgent_TH.visible(false);

        next noteFormatEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExternalWorkOrderStatusVisibility</Name>
				<Source><![CDATA[
    public void updateExternalWorkOrderStatusVisibility()
    {
        boolean integrationVisible = Integration.visible();
        next updateExternalWorkOrderStatusVisibility();
        Integration.visible(integrationVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmSalesLineTradeType</Name>
				<Source><![CDATA[
    // Extension methods

    public RORTradeType RORParmSalesLineTradeType(RORTradeType _salesLineTradeType = salesLineTradeType)
    {
        salesLineTradeType = _salesLineTradeType;
        return salesLineTradeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmIsOverrideMethodRegistered</Name>
				<Source><![CDATA[
    public boolean RORParmIsOverrideMethodRegistered(boolean _isOverrideMethodRegistered = isOverrideMethodRegistered)
    {
        isOverrideMethodRegistered = _isOverrideMethodRegistered;

        return isOverrideMethodRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateDesign</Name>
				<Source><![CDATA[
    public void RORUpdateDesign()
    {
        boolean showRentalDateTimes = isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes));

        TabLineRentalDates.visible(showRentalDateTimes);
        TabHeaderRentalDates.visible(showRentalDateTimes);
        
        boolean showLineActions = (salesLine.RecId && LineView.isActivePage() && !TabPageGrid.isActivePage());

        ROROrderAmendmentLog_Line.enabled(showLineActions);
        ROROrderAmendmentLog_LineLevel.enabled(showLineActions);
        AdditionalLineNotes.enabled(showLineActions);
        AdditionalLineNotes_LineLevel.enabled(showLineActions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateHeaderButtonsDesign_SalesTableDS</Name>
				<Source><![CDATA[
    public void RORUpdateHeaderButtonsDesign_SalesTableDS()
    {
        SalesTableType salesTableType = salesTable.type();

        boolean canCreateSubRentalAndBacktoBack = salesTable.FINCreditCheckNoWarning(true, false) 
            && salesTableType.RORhasLineToCreatePurchOrder() && salesTableType.canCreatePurchOrder();
        
        this.design().controlName(formControlStr(DNRRORSalesTable, RORCreateSubRentalOrderMultipleLines)).enabled(canCreateSubRentalAndBacktoBack);

        this.design().controlName(formControlStr(DNRRORSalesTable, DNRBack2BackHeader)).enabled(canCreateSubRentalAndBacktoBack);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBUpdateDesign_SalesLineDS</Name>
				<Source><![CDATA[
    public void BOBUpdateDesign_SalesLineDS()
    {
        salesLine_ds.object(fieldNum(SalesLine, BOBSellFixedAsset)).allowEdit(salesLine.RORTradeType == RORTradeType::SalesPurch && salesLine.SalesQty > 0);
        BOBFixedAssets_M_BOBEditAssetId.allowEdit(salesLine.RORTradeType == RORTradeType::SalesPurch);
        salesLine_ds.object(fieldNum(SalesLine, Reservation)).allowEdit(salesLine.RORTradeType == RORTradeType::SalesPurch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateDesign_SalesLineDS</Name>
				<Source><![CDATA[
    public void RORUpdateDesign_SalesLineDS(boolean _allowEditRentalPricing, boolean _allowEditSalesPricing, boolean _allowEditQty)
    {
        ItemId itemIdWarranty = RAGParameters::find().ItemIdWarranty;
        boolean canEditCalendarProfile = SalesLine.RORTradeType != RORTradeType::SalesPurch &&
                (_allowEditRentalPricing ||
                 salesLine.ItemId == itemIdWarranty ||
                 salesLine.RORKitComponentType == RORKitComponentType::Kit ||
                 salesLine.RORKitComponentType == RORKitComponentType::KitComponent);
                    
        salesLine_ds.object(fieldNum(SalesLine, RORRentalGrossAmount)).allowEdit(_allowEditRentalPricing);
        salesLine_ds.object(fieldNum(SalesLine, SalesPrice)).enabled(_allowEditSalesPricing);
        
        // Only allow calendar changes for parent lines (will then cascade)
        salesLine_ds.object(fieldNum(SalesLine, DNRCalendarId)).allowEdit(canEditCalendarProfile);
        salesLine_ds.object(fieldNum(SalesLine, INVInvoiceProfileId)).allowEdit(canEditCalendarProfile);
        salesLine_ds.object(fieldNum(SalesLine, RORPriceTimeUnit)).allowEdit(canEditCalendarProfile);
        salesLine_ds.object(fieldNum(SalesLine, INVRentalModeId)).allowEdit(canEditCalendarProfile);
        salesLine_ds.object(fieldNum(SalesLine, INVRateMultiplierTier)).allowEdit(_allowEditRentalPricing || _allowEditSalesPricing);
        
        salesLine_ds.object(fieldnum(SalesLine, SalesQty)).allowEdit(_allowEditQty);
        salesLine_ds.object(fieldnum(SalesLine, SalesUnit)).allowEdit(_allowEditQty);
        salesLine_ds.object(fieldnum(SalesLine, QtyOrdered)).allowEdit(_allowEditQty);
        salesLine_ds.object(fieldnum(SalesLine, SalesPrice)).allowEdit(_allowEditSalesPricing);
        salesLine_ds.object(fieldnum(SalesLine, PriceUnit)).allowEdit(_allowEditSalesPricing);
        salesLine_ds.object(fieldnum(SalesLine, LineAmount)).allowEdit(_allowEditSalesPricing);
        salesLine_ds.object(fieldnum(SalesLine, SalesMarkup)).allowEdit(_allowEditSalesPricing);
        salesLine_ds.object(fieldnum(SalesLine, LineDisc)).allowEdit(_allowEditSalesPricing);
        salesLine_ds.object(fieldnum(SalesLine, LinePercent)).allowEdit(_allowEditSalesPricing);
        salesLine_ds.object(fieldnum(SalesLine, MultiLnDisc)).allowEdit(_allowEditSalesPricing);
        salesLine_ds.object(fieldnum(SalesLine, MultiLnPercent)).allowEdit(_allowEditSalesPricing);
        
        salesLine_ds.object(fieldnum(SalesLine, RORReturnInventLocationId)).allowEdit(salesLine.RORTradeType != RORTradeType::SalesPurch && salesLine.BOBRentalSubStatus < BOBRentalSubStatus::Returned);
        
        ROReditNetAmount.allowEdit(SalesLine.ItemId != itemIdWarranty && !SalesLine.RORIsPriceFixed);
        ROReditLineAmount.allowEdit(SalesLine.ItemId != itemIdWarranty && !SalesLine.RORIsPriceFixed);
        RORPricing_DNRSalesLineTable_Extension_ROREditNetAmount.allowEdit(SalesLine.ItemId != itemIdWarranty && !SalesLine.RORIsPriceFixed);
                           
        RORTogglePriceType_Fixed::updateButtonDesign(RORTogglePriceType_Fixed, salesLine);
        RORTogglePriceType_Net::updateButtonDesign(RORTogglePriceType_Net, salesLine);
        
        RAGContractTable_SalesLine.enabled(LineView.isActivePage()      &&
                                              !TabPageGrid.isActivePage()   &&
                                               salesLine.RORRentalDateTimesHost::rentalDateTimes().RecId != 0 &&
                                               RAGUtil::mustApplyRentalAgreements(salesLine.BOBRentalTypeIdRequested));
        
        BOBRentalTrans.enabled(salesLine.BOBRentalTypeIdRequested != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTableDS_CustAccount_onResolveAmbiguousReference</Name>
				<Source><![CDATA[
    public str SalesTableDS_CustAccount_onResolveAmbiguousReference(FormControl _callingControl)
    {
        var referenceResolver = new FormControlAmbiguousReferenceResolver(_callingControl);
        return referenceResolver.resolveAmbiguousReference(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTableDS_InvoiceAccount_onResolveAmbiguousReference</Name>
				<Source><![CDATA[
    public str SalesTableDS_InvoiceAccount_onResolveAmbiguousReference(FormControl _callingControl)
    {
        var referenceResolver = new FormControlAmbiguousReferenceResolver(_callingControl);
        return referenceResolver.resolveAmbiguousReference(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTableDS_RORPriceTimeUnit_OnlookupReference</Name>
				<Source><![CDATA[
    public Common SalesTableDS_RORPriceTimeUnit_OnlookupReference(FormReferenceControl _callingControl)
    {
        return UnitOfMeasureLookup::lookupReferenceForUnitOfMeasureClass(_callingControl, UnitOfMeasureClass::Time);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesLineDS_BOBConversionJourId_onJumpRef</Name>
				<Source><![CDATA[
    public void SalesLineDS_BOBConversionJourId_onJumpRef(FormDataObject _targetField)
    {
        Args args = new Args();

        args.lookupField(fieldNum(InventJournalTable, JournalId));
        args.lookupValue(salesLine.BOBConversionJourId);

        new MenuFunction(menuitemDisplayStr(BOBConvJourAssetToInvent), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesLineDS_RORPriceTimeUnit_onModified</Name>
				<Source><![CDATA[
    public void SalesLineDS_RORPriceTimeUnit_onModified(FormDataObject _targetField)
    {
        convertPrices = false;
        DialogButton dialogButton = Box::yesNoCancel(strFmt("@DNR6681", UnitOfMeasure::find(salesLine.RORPriceTimeUnit).Symbol), dialogButton::Yes);

        switch (dialogButton)
        {
            case DialogButton::Cancel :
                salesLine.RORPriceTimeUnit = salesLine.orig().RORPriceTimeUnit;
            //go through
            case DialogButton::No :
                // just go to super()
                break;

            default :
                salesLine.RORModifiedPriceTimeUnit();
                convertPrices = true;
        }

        _targetField.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesLineDS_RORPriceTimeUnit_OnlookupReference</Name>
				<Source><![CDATA[
    public Common SalesLineDS_RORPriceTimeUnit_OnlookupReference(FormReferenceControl _callingControl)
    {
        return UnitOfMeasureLookup::lookupReferenceForUnitOfMeasureClass(_callingControl, UnitOfMeasureClass::Time);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateSubRentalOrderCTRL_onClicked</Name>
				<Source><![CDATA[
    public void RORCreateSubRentalOrderCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        if (!salesLine.WPPIsObjectAssignmentEnabled())
        {
            _callingControl.clicked(); // simulate super call
            this.RORUpdateHeaderButtonsDesign_SalesTableDS();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateSubRentalOrderMultipleLinesCTRL_onClicked</Name>
				<Source><![CDATA[
    public void RORCreateSubRentalOrderMultipleLinesCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        if (!salesTable.WPPIsObjectAssignmentEnabled())
        {
            _callingControl.clicked(); // simulate super call
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ButtonInterCompanyRORSalesTableCTRL_onClicked</Name>
				<Source><![CDATA[
    public void ButtonInterCompanyRORSalesTableCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        TradeInterCompany::construct(salesTable.referencePurchTable()).formRun(formStr(DNRRORSalesTable), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ButtonInterCompanyOriginalRORSalesTableCTRL_onClicked</Name>
				<Source><![CDATA[
    public void ButtonInterCompanyOriginalRORSalesTableCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        TradeInterCompany::construct(salesTable, true).formRun(formStr(DNRRORSalesTable), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ButtonRORPurchTableThisCompanyCTRL_onClicked</Name>
				<Source><![CDATA[
    public void ButtonRORPurchTableThisCompanyCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        TradeInterCompany::construct(salesTable).referenceForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROROrderAmendmentDialogType_ChangeDate_HeaderCTRL_onClicked</Name>
				<Source><![CDATA[
    public void ROROrderAmendmentDialogType_ChangeDate_HeaderCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        if(salesTable.WPPCanChangeRentalDates())
        {
            _callingControl.clicked(); // simulate super call
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORbuttonUpdateInvoiceProjCTRL_onClicked</Name>
				<Source><![CDATA[
    // Copied from /Forms/DNRRORSalesTable/Controls/buttonUpdateInvoice
    public void RORbuttonUpdateInvoiceProjCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        // <GEERU>
        if (isRU)
        {
            salesTable.checkMarkupTrans_RU();
        }
        // </GEERU>

        boolean canUpdateInvoice = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(CDSIntegration)))
        {
            SalesOriginInternalType salesOriginInternalType = SalesOriginInternalType::find(salesTable.SalesOriginId);

            if (salesOriginInternalType
                    && salesOriginInternalType.OriginType == SalesOriginType::WorkOrderIntegration
                    && salesTableExternalWorkOrderStatus.ExternalWorkOrderStatus != SalesExternalWorkOrderStatus::ClosedPosted
                    && Box::okCancel("@SCM:MessageValidation_SalesOrderUpdateInvoiceForNonClosedPostedWorkOrder", DialogButton::Cancel) == DialogButton::Cancel)
            {
                canUpdateInvoice = checkFailed("@SYS21533");
            }
        }

        if (canUpdateInvoice)
        {
            _callingControl.clicked();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBObjectAssignmentEngineCTRL_onClicked</Name>
				<Source><![CDATA[
    public void BOBObjectAssignmentEngineCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        if (!salesLine.WPPIsObjectAssignmentEnabled())
        {
            _callingControl.clicked(); // simulate super call
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonPurchTableCTRL_onClicked</Name>
				<Source><![CDATA[
    public void buttonPurchTableCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckCreditLimitCTRL_onClicked</Name>
				<Source><![CDATA[
    public void CheckCreditLimitCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        this.automaticTotalDiscount();

        // Replaced the standard credit limit check with the DynaRent one
        FINCheckCreditLimit::checkCreditLimit_Sales(SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonDeliveryScheduleCTRL_onClicked</Name>
				<Source><![CDATA[
    public void buttonDeliveryScheduleCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        salesTable_ds.reread();

        Args args = new Args();
        args.name(formStr(SalesDeliverySchedule));
        args.caller(this);
        args.record(salesLine);
        args.menuItemName(menuItemDisplayStr(SalesDeliverySchedule));
        args.menuItemType(MenuItemType::Display);

        FormRun deliverySchedule = classfactory.formRunClass(args);
        deliverySchedule.run();
        deliverySchedule.wait();

        if (deliverySchedule.closedOk())
        {
            mcrProcessingDeliverySchedule = true;
            salesLine_ds.reread();
            salesLine_ds.rereadReferenceDataSources();
            salesLine_ds.research(true);
            salesTable_ds.research(true);
            salesTableForm.setTouched(salesTable);
            mcrProcessingDeliverySchedule = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ButtonInterCompanyRORPurchTableCTRL_onClicked</Name>
				<Source><![CDATA[
    public void ButtonInterCompanyRORPurchTableCTRL_onClicked(FormFunctionButtonControl _callingControl)
    {
        _callingControl.clicked(); // simulate super call
        TradeInterCompany::construct(salesTable).formRun(formStr(RORPurchTable), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORContactPerson_M_editContactPersonNameCTRL_onJumpRef</Name>
				<Source><![CDATA[
    public void RORContactPerson_M_editContactPersonNameCTRL_onJumpRef(FormStringControl _callingControl)
    {
        RORContactPerson_ContactPersonId.jumpRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORContactPerson_M_editContactPersonNameCTRL_onLookup</Name>
				<Source><![CDATA[
    public void RORContactPerson_M_editContactPersonNameCTRL_onLookup(FormStringControl _callingControl)
    {
        ContactPerson::lookupCustContactPerson(RORContactPerson_ContactPersonId,
                                               salesTable.CustAccount,
                                               _callingControl,
                                               salesTable.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORContactPerson_M_ROReditContactPersonNameOperatorCTRL_onJumpRef</Name>
				<Source><![CDATA[
    public void RORContactPerson_M_ROReditContactPersonNameOperatorCTRL_onJumpRef(FormStringControl _callingControl)
    {
        RORContactPerson_RORContactPersonIdOperator.jumpRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORContactPerson_M_ROReditContactPersonNameOperatorCTRL_onLookup</Name>
				<Source><![CDATA[
    public void RORContactPerson_M_ROReditContactPersonNameOperatorCTRL_onLookup(FormStringControl _callingControl)
    {
        ContactPerson::RORLookupContactPerson(RORContactPerson_RORContactPersonIdOperator,
                                              salesTable,
                                              _callingControl,
                                              salesTable.RORContactPersonIdOperator,
                                              RORContactPersonRoleFilter::Operator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBObjectTable_ObjectIdCTRL_onJumpRef</Name>
				<Source><![CDATA[
    public void BOBObjectTable_ObjectIdCTRL_onJumpRef(FormStringControl _callingControl)
    {
        Args args = new Args();
        args.caller(this);
        
        if(_callingControl.text())
        {
            args.lookupField(fieldNum(BOBObjectTable, ObjectId));
            args.lookupValue(_callingControl.text());
        }
        else
        {
            args.formViewOption(FormViewOption::Grid);
        }
        
        new MenuFunction(menuitemDisplayStr(BOBObjectTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBObjectTable_AssetIdCTRL_onJumpRef</Name>
				<Source><![CDATA[
    public void BOBObjectTable_AssetIdCTRL_onJumpRef(FormStringControl _callingControl)
    {
        Args args = new Args();
        args.caller(this);
        
        if(_callingControl.text())
        {
            args.lookupField(fieldNum(AssetTable, AssetId));
            args.lookupValue(_callingControl.text());
        }
        else
        {
            args.formViewOption(FormViewOption::Grid);
        }
        
        new MenuFunction(menuitemDisplayStr(AssetTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBObjectTable_FleetNumberCTRL_onJumpRef</Name>
				<Source><![CDATA[
    public void BOBObjectTable_FleetNumberCTRL_onJumpRef(FormStringControl _callingControl)
    {
        Args args = new Args();
        args.caller(this);
        
        if(_callingControl.text())
        {
            args.lookupField(fieldNum(BOBObjectTable, ObjectId));
            args.lookupValue(_callingControl.text());
        }
        else
        {
            args.formViewOption(FormViewOption::Grid);
        }
        
        new MenuFunction(menuitemDisplayStr(BOBObjectTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBFixedAssets_M_BOBEditAssetIdCTRLonJumpRef</Name>
				<Source><![CDATA[
    public void BOBFixedAssets_M_BOBEditAssetIdCTRLonJumpRef(FormStringControl _callingControl)
    {
        Args args = new Args();
        args.name(formStr(AssetTable));
        args.caller(this);
        args.lookupValue(_callingControl.text());
        args.lookupField(fieldNum(AssetTable, AssetId));
        args.menuItemName(menuItemDisplayStr(AssetTable));
        args.menuItemType(MenuItemType::Display);
        
        FormRun formRun = ClassFactory::formRunClassOnClient(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBFixedAssets_M_BOBEditAssetIdCTRLonLookup</Name>
				<Source><![CDATA[
    public void BOBFixedAssets_M_BOBEditAssetIdCTRLonLookup(FormStringControl _callingControl)
    {
        AssetTable::BOBLookupAssetTable(_callingControl, salesLine, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROReditContactPersonNameOperatorCTRLonJumpRef</Name>
				<Source><![CDATA[
    public void ROReditContactPersonNameOperatorCTRLonJumpRef(FormStringControl _callingControl)
    {
        SalesTable_RORContactPersonIdOperator.jumpRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROReditContactPersonNameOperatorCTRLonLookup</Name>
				<Source><![CDATA[
    public void ROReditContactPersonNameOperatorCTRLonLookup(FormStringControl _callingControl)
    {
        ContactPerson::RORLookupContactPerson(SalesTable_RORContactPersonIdOperator,
                                              salesTable,
                                              _callingControl,
                                              salesTable.RORContactPersonIdOperator,
                                              RORContactPersonRoleFilter::Operator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROReditLineAmountCTRLonModified</Name>
				<Source><![CDATA[
    public void ROReditLineAmountCTRLonModified(FormRealControl _callingControl)
    {
        lineAmountModified = true;
        _callingControl.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSalesLine</Name>
				<Source><![CDATA[
    public SalesLine RORSalesLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetCallerSubRentalLineInventTransId</Name>
				<Source><![CDATA[
    public InventTransId RORGetCallerSubRentalLineInventTransId()
    {
        return callerSubRentalLineInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmSalesTable_Orig</Name>
				<Source><![CDATA[
    public SalesTable RORParmSalesTable_Orig(SalesTable _salesTable_Orig = salesTable_Orig)
    {
        salesTable_Orig = _salesTable_Orig;
        return salesTable_Orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmSalesLine_Orig</Name>
				<Source><![CDATA[
    public SalesLine RORParmSalesLine_Orig(SalesLine _salesLine_Orig = salesLine_Orig)
    {
        salesLine_Orig = _salesLine_Orig;
        return salesLine_Orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmLineAmountModified</Name>
				<Source><![CDATA[
    public boolean RORParmLineAmountModified(boolean _lineAmountModified = lineAmountModified)
    {
        lineAmountModified = _lineAmountModified;
        return lineAmountModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmShowRentalLineEditor</Name>
				<Source><![CDATA[
    public boolean RORParmShowRentalLineEditor(boolean _showRentalLineEditor = showRentalLineEditor)
    {
        showRentalLineEditor = _showRentalLineEditor;
        return showRentalLineEditor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmUpdateKitPricing</Name>
				<Source><![CDATA[
    public boolean RORParmUpdateKitPricing(boolean _updateKitPricing = updateKitPricing)
    {
        updateKitPricing = _updateKitPricing;
        return updateKitPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmRereadLines</Name>
				<Source><![CDATA[
    public boolean RORParmRereadLines(boolean _rereadLines = rereadLines)
    {
        rereadLines = _rereadLines;
        return rereadLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmConvertPrices</Name>
				<Source><![CDATA[
    public boolean RORParmConvertPrices(boolean _convertPrices = convertPrices)
    {
        convertPrices = _convertPrices;
        return convertPrices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInventDim_ds</Name>
				<Source><![CDATA[
    public FormDataSource RORInventDim_ds()
    {
        return InventDim_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORMcrSalesLineDropShipment</Name>
				<Source><![CDATA[
    public MCRSalesLineDropShipment RORMcrSalesLineDropShipment()
    {
        return mcrSalesLineDropShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmRecIdParent</Name>
				<Source><![CDATA[
    public RecId RORParmRecIdParent(RecId _recIdParent = recIdParent)
    {
        recIdParent = _recIdParent;
        return recIdParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmSalesLinePreDelete</Name>
				<Source><![CDATA[
    public SalesLine RORParmSalesLinePreDelete(SalesLine _salesLinePreDelete = salesLinePreDelete)
    {
        salesLinePreDelete = _salesLinePreDelete;
        return salesLinePreDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesTableDS_OnInitialized</Name>
				<Source><![CDATA[
    // Event-handler methods

    [FormDataSourceEventHandler(formDataSourceStr(DNRRORSalesTable, SalesTable), FormDataSourceEventType::Initialized)]
    public static void DNREvent_SalesTableDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        var overrides = _sender.formRun() as FormRun;

        if (formHasMethod(overrides, formMethodStr(DNRRORSalesTable, RORParmIsOverrideMethodRegistered))
        &&  !overrides.RORParmIsOverrideMethodRegistered())
        {
            // Due to many extensions this code is executed more than once which was causing a stack trace.
            _sender.object(fieldNum(SalesTable, CustAccount)).registerOverrideMethod(methodStr(FormDataObject, resolveAmbiguousReference), methodStr(DNRDNRRORSalesTableForm_Extension, SalesTableDS_CustAccount_onResolveAmbiguousReference), overrides);
            _sender.object(fieldNum(SalesTable, InvoiceAccount)).registerOverrideMethod(methodStr(FormDataObject, resolveAmbiguousReference), methodStr(DNRDNRRORSalesTableForm_Extension, SalesTableDS_InvoiceAccount_onResolveAmbiguousReference), overrides);
            _sender.object(fieldNum(SalesTable, RORPriceTimeUnit)).registerOverrideMethod(methodStr(FormDataObject, resolveAmbiguousReference), methodStr(DNRDNRRORSalesTableForm_Extension, SalesTableDS_RORPriceTimeUnit_OnlookupReference), overrides);

            overrides.RORParmIsOverrideMethodRegistered(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesLineDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(DNRRORSalesTable, SalesLine), FormDataSourceEventType::Initialized)]
    public static void DNREvent_SalesLineDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        var overrides = _sender.formRun() as FormRun;

        _sender.object(fieldNum(SalesLine, BOBConversionJourId)).registerOverrideMethod(methodStr(FormDataObject, jumpref), methodStr(DNRDNRRORSalesTableForm_Extension, SalesLineDS_BOBConversionJourId_onJumpRef), overrides);
        _sender.object(fieldNum(SalesLine, RORPriceTimeUnit)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(DNRDNRRORSalesTableForm_Extension, SalesLineDS_RORPriceTimeUnit_onModified), overrides);
        _sender.object(fieldNum(SalesLine, RORPriceTimeUnit)).registerOverrideMethod(methodStr(FormDataObject, lookupReference), methodStr(DNRDNRRORSalesTableForm_Extension, SalesLineDS_RORPriceTimeUnit_onLookupReference), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_MCROrderHoldsCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORSalesTable, MCROrderHolds), FormControlEventType::Clicked)]
    public static void DNREvent_MCROrderHoldsCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        SalesTable salesTable = formRunObj.salesTable();
        
        // Order hold is not allowed if the order is part of an IC chain or marked for IC autocreation,
        // but if somehow an order hold already exists allow button to be clicked so hold can be removed
        if(SalesTableForm::mcrEnableOrderHoldsButton(salesTable)
        && salesTable.existInterCompanyPurch())
        {
            throw error("@SCM:OrderHoldFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_MainTabCTRL_OnTabChanged</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORSalesTable, MainTab), FormControlEventType::TabChanged)]
    public static void DNREvent_MainTabCTRL_OnTabChanged(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.RORUpdateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_BOBbuttonLineQuantity_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORSalesTable, BOBbuttonLineQuantity), FormControlEventType::Clicked)]
    public static void DNREvent_BOBbuttonLineQuantity_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        SalesTable salesTable = formRunObj.salesTable();
        SalesLine salesLine   = _sender.formRun().datasource(formdatasourcestr(DNRRORSalesTable, SalesLine)).cursor();

        Args args = new Args();

        args.record(salesTable);
        args.parm(salesLine.InventTransId);

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(SalesTableLineQuantity), MenuItemType::Display);

        menuFunction.run(args);

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>