<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesTableSalesLineDataSourceWritingClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesTableSalesLineDataSourceWriting))]
public final class DNRSalesTableSalesLineDataSourceWritingClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSaleLineInventDimId</Name>
				<Source><![CDATA[
    public void updateSaleLineInventDimId(InventDim _inventDim)
    {
        next updateSaleLineInventDimId(_inventDim);

        if(salesLine.RORTradeType != RORTradeType::SalesPurch)
        {
            if (!salesLine.RecId && _inventDim.InventLocationId && !salesLine.RORReturnInventLocationId)
            {
                salesLine.RORReturnInventLocationId = _inventDim.InventLocationId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markToSyncLinkedPurchaseOrderLine</Name>
				<Source><![CDATA[
    public void markToSyncLinkedPurchaseOrderLine()
    {
        // RLAM - We never want to update the linked Purchase Order line
        // By temporarily hacking the value of salesLine.InventRefType, the if-clause in the
        // mustUpdateLinkedPurchaseOrderLine method always fails
        InventRefType tempInventRefType = salesLine.InventRefType;
        
        if(salesLine.RORTradeType != RORTradeType::SalesPurch)
        {
            salesLine.InventRefType = InventRefType::Sales;
        }
            
        next markToSyncLinkedPurchaseOrderLine();
        
        if(salesLine.RORTradeType != RORTradeType::SalesPurch)
        {
            salesLine.InventRefType = tempInventRefType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesLineDataSourceForIntercompanyOrder</Name>
				<Source><![CDATA[
    public void querySalesLineDataSourceForIntercompanyOrder(SalesTable _salesTable, FormDataSource _salesLine_ds)
    {
        next querySalesLineDataSourceForIntercompanyOrder(_salesTable, _salesLine_ds);
        
        if(salesLine.RORTradeType != RORTradeType::SalesPurch)
        {
            Object formRunObj = _salesLine_ds.formRun() as Object;
            boolean rereadLines;
                
            if (formHasMethod(formRunObj, identifierStr(DNRParmRereadLines)))
            {
                rereadLines = formRunObj.DNRParmRereadLines();
            }

            // *** Repeated code
            if(!PurchTable::find(salesLine.InventRefId).InterCompanyOrder
            && !_salesTable.InterCompanyOrder
            && rereadLines)
            {
                SalesLine localSalesLine;
                localSalesLine.data(salesLine.data());
                _salesLine_ds.executeQuery();
                _salesLine_ds.positionToRecord(localSalesLine);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>