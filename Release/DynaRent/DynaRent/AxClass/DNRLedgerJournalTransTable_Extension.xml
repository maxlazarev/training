<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLedgerJournalTransTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(LedgerJournalTrans))]
public final class DNRLedgerJournalTransTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteForJournalType</Name>
				<Source><![CDATA[
    protected void deleteForJournalType(boolean _deleteVoucher, LedgerJournalType _ledgerJournalType)
    {
        this.LBADelete();

        next deleteForJournalType(_deleteVoucher, _ledgerJournalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayFleetNumber</Name>
				<Source><![CDATA[
    // extension methods

    [SysClientCacheDataMethodAttribute(true)]
    display BOBFleetNumber BOBDisplayFleetNumber()
    {
        return BOBObjectTable::findObjectId(this.BOBObjectId).FleetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVHasPendingInvoice</Name>
				<Source><![CDATA[
    public boolean INVHasPendingInvoice()
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        boolean                 ret;
        ;
    
        select firstOnly RecId from vendInvoiceInfoTable
        where vendInvoiceInfoTable.PoolRecId == this.RecId
        &&    !vendInvoiceInfoTable.ParmId
        &&    vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;
    
        if (vendInvoiceInfoTable)
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVInvoicePurchId</Name>
				<Source><![CDATA[
    public PurchId INVInvoicePurchId()
    {
        PurchId                 purchId = this.PurchIdRange;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        ;
    
        if (!purchId || !PurchTable::exist(purchId))
        {
            if (this.Invoice)
            {
                select firstOnly PurchId from vendInvoiceInfoTable
                where vendInvoiceInfoTable.Num == this.Invoice
                    outer join OrigPurchId from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    &&    vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                    &&    vendInvoiceInfoLine.OrigPurchId;
    
                purchId = vendInvoiceInfoTable.PurchId ? vendInvoiceInfoTable.PurchId : vendInvoiceInfoLine.OrigPurchId;
            }
        }
        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LBADelete</Name>
				<Source><![CDATA[
    private void LBADelete()
    {
        LBAContractTerm contractTerm;
    
        if (this.LBATermTransId)
        {
            contractTerm = LBAContractTerm::find(this.LBATermTransId, true);
    
            if (contractTerm)
            {
                switch (this.LBATransType)
                {
                    case LBATransType::Interest:
                        contractTerm.VoucherInterest = '';
                        break;
    
                    case LBATransType::Payment:
                        contractTerm.VoucherPayment = '';
                        break;
    
                    case LBATransType::Redemption:
                        contractTerm.VoucherRedemption = '';
                        break;
    
                    case LBATransType::Invoice:
                        contractTerm.VoucherInvoice = '';
                        break;
                }
    
                contractTerm.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountInCostPrice</Name>
				<Source><![CDATA[
    public TaxAmountJournal taxAmountInCostPrice()
    {
        TaxTrans            taxTrans;
        TaxAmountJournal    taxInCostPrice;
        LedgerJournalTable  ledgerJournalTable;
        TaxCalculation      taxCalculation;

        if (this.ledgerJournalTable().Posted)
        {
            select sum(TaxInCostPriceRegulated) from taxTrans
            where taxTrans.TransDate    == this.TransDate
            &&    taxTrans.Voucher      == this.Voucher
            &&    taxTrans.JournalNum   == this.JournalNum
            &&    taxTrans.SourceRecId  == this.RecId
            &&    taxTrans.TaxAutogenerated == NoYes::No;
            
            taxInCostPrice = taxTrans.TaxInCostPriceRegulated;

            select sum(TaxInCostPrice) from taxTrans
            where taxTrans.TransDate    == this.TransDate
            &&    taxTrans.Voucher      == this.Voucher
            &&    taxTrans.JournalNum   == this.JournalNum
            &&    taxTrans.SourceRecId  == this.RecId
            &&    taxTrans.TaxAutogenerated == NoYes::Yes;
            
            taxInCostPrice += taxTrans.TaxInCostPrice;

            return abs(taxInCostPrice);
        }
        else
        {
            ledgerJournalTable = this.ledgerJournalTable();

            if (TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, this.Voucher, this.Invoice))
            {
                TaxUncommitted::getActualTaxInCostPriceForSourceLine(this.TableId, this.RecId);
            }
            else
            {
                taxCalculation = LedgerJournalTrans::getTaxInstance(this.JournalNum, this.Voucher, this.Invoice, false, this);

                taxInCostPrice = taxCalculation.totalTaxInCostPrice(this.RecId);
            }

            return abs(taxInCostPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_update_post</Name>
				<Source><![CDATA[
    // event handler methods

    //Used the post event on the method in place of onUpdated Event as super call in the update method is in a transacation block
    // and updating the record again will cause an UpdateConflict
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, update))]
    public static void DNREvent_update_post(XppPrePostArgs _eventArgs)
    {
        LedgerJournalTrans ledgerJournalTrans = _eventArgs.getThis() as LedgerJournalTrans;
    
        if (!ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().FINSuppressDimensionControl)
        {
            FINDimValueController::eventUpdate(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::Inserted)]
    public static void DNREvent_OnInserted(Common _sender, DataEventArgs _eventArgs)
    {
        LedgerJournalTrans ledgerJournalTrans = _sender as LedgerJournalTrans;
    
        if (!ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().FINSuppressDimensionControl)
        {
            FINDimValueController::eventInsert(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnDeleting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::Deleting)]
    public static void DNREvent_OnDeleting(Common _sender, DataEventArgs _eventArgs)
    {
        LedgerJournalTrans ledgerJournalTrans = _sender as LedgerJournalTrans;
    
        if (!ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().FINSuppressDimensionControl)
        {
            FINDimValueController::eventDelete(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnValidatedWrite</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::ValidatedWrite)]
    public static void DNREvent_OnValidatedWrite(Common _sender, DataEventArgs _eventArgs)
    {
        ValidateEventArgs validateArgs = _eventArgs as ValidateEventArgs;
        
        if (validateArgs.parmValidateResult())
        {
            LedgerJournalTrans ledgerJournalTrans = _sender as LedgerJournalTrans;
    
            if (!ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().FINSuppressDimensionControl)
            {
                validateArgs.parmValidateResult(FINDimValueController::eventValidateWrite(ledgerJournalTrans));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>