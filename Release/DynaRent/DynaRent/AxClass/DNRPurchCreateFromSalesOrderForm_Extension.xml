<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchCreateFromSalesOrderForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(PurchCreateFromSalesOrder))]
public final class DNRPurchCreateFromSalesOrderForm_Extension
{
    private boolean isSubRental;
    private RORRentalDateTimes rentalDateTimes;
    private boolean DNRBackToBackCreate;
    private tmpPurchLinePrice tmpPurchLinePriceLocal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    void closeOk()
    {
        Set rentalDateTimesRecordSet = new Set(Types::Record);

        next closeOk();

        tmpPurchLinePriceLocal = tmpPurchLinePrice;

        if (this.parmDNRBackToBackCreate())
        {
            RORRentalDateTimes RORRentalDateTimesLocal = RORRentalDateTimes_ds.cursor();
  
            while select RORRentalDateTimesLocal
            exists join tmpPurchLinePriceLocal
                where tmpPurchLinePriceLocal.SalesLineRefRecId == RORRentalDateTimesLocal.RefRecId
                && tmpPurchLinePriceLocal.Included == NoYes::Yes
            {
                rentalDateTimesRecordSet.add(RORRentalDateTimesLocal);
            }

            purchCreateFromSalesOrder.DNRParmBack2BackRentalDateTimes(rentalDateTimesRecordSet.pack());
        }
        else
        {
            purchCreateFromSalesOrder.DNRParmBack2BackRentalDateTimes(conNull());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        purchCreateFromSalesOrder = this.args().caller();
        boolean rentalCaller = ((purchCreateFromSalesOrder.parmCallerRecord().TableId == tableNum(SalesLine) && purchCreateFromSalesOrder.parmSalesLine().RORTradeType == RORTradeType::Rental)
                            ||  (purchCreateFromSalesOrder.parmCallerRecord().TableId == tableNum(SalesTable) && purchCreateFromSalesOrder.parmSalesTable().SalesType == SalesType::RORRental)
                            ||  (purchCreateFromSalesOrder.parmCallerRecord().TableId == tableNum(PurchTable) && purchCreateFromSalesOrder.DNRGetPurchTable().PurchaseType == PurchaseType::RORSubRental));

        isSubRental = rentalCaller && purchCreateFromSalesOrder.RORParmCanBeSubRental() && !(purchCreateFromSalesOrder is PurchCreateFromSalesOrderDropShipment);

        purchCreateFromSalesOrder.DNRParmIsRentalCaller(rentalCaller); // don't forget!

        next init();

        if (rentalCaller)
        {
            FormStringControl SalesLine_SalesIdCtrl = this.design().controlName(formControlStr(PurchCreateFromSalesOrder, SalesLine_SalesId));
            SalesLine_SalesIdCtrl.label("@DNR10");
        }

        if (isSubRental)
        {
            this.design().caption("@DNR1120");
            transferAddress.value(true);
            PurchasePrice.allowEdit(false); // Unit Price must be fetched from Sub-Rental Agreement. This field is made read only for sub-Rental orders creations.
        }
        
        SalesLine_RORRentalGrossAmount.visible(isSubRental);
        SalesLine_RORLinePercent.visible(isSubRental);
        SalesLine_RORDisplayNetAmount.visible(isSubRental);
        SalesLine_RORPriceTimeUnit.visible(isSubRental);

        ROREditRateCode.visible(isSubRental);
        ROREditPurchId.visible(isSubRental);
        ROREditPurchRequester.visible(isSubRental);
 

        RORDisplaySubRentalGrossAmount.visible(isSubRental);
        ROREditSubRentalLineDisc.visible(isSubRental);
        RORDisplaySubRentalMarginPct.visible(isSubRental);
        RORDisplaySubRentalMarginStatus.visible(isSubRental);

        if (purchCreateFromSalesOrder.getCallerArgs().menuItemName() == menuItemActionStr(DNRPurchCreateFromSalesOrder_Back2BackHeader) ||
            purchCreateFromSalesOrder.getCallerArgs().menuItemName() == menuItemActionStr(DNRPurchCreateFromSalesOrder_Back2BackLines))
        {
            DNRBackToBackCreate = true;
            this.design().caption("@DNR:CreateSubRentalBack2Back");

            DNRTabPageRental.visible(true);
            this.initB2BRORRentalDateTime();
        }
        else
        {
            query query = RORRentalDateTimes_ds.query();

            query.dataSourceTable(tableNum(RORRentalDateTimes)).enabled(false);
        }

        if(rentalCaller && (isSubRental || DNRBackToBackCreate))
        {
            purchCreateFromSalesOrder.RORparmForcePurchTypePurchase(false);
        }
        else
        {
            purchCreateFromSalesOrder.RORparmForcePurchTypePurchase(true);
        }

        this.design().controlName(formControlStr(PurchCreateFromSalesOrder, LineDetails)).visible(!isSubRental && !DNRBackToBackCreate);
        this.design().controlName(formControlStr(PurchCreateFromSalesOrder, SalesLine_PdsCWSalesUnit)).visible(!isSubRental && !DNRBackToBackCreate);
        PdsCWQty.visible(!isSubRental && !DNRBackToBackCreate);
        CheckBoxMinMaxQty.visible(!isSubRental && !DNRBackToBackCreate);
        SearchForAgreements.visible(!isSubRental && !DNRBackToBackCreate);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    void initFields()
    {
        next initFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetPrice</Name>
				<Source><![CDATA[
    protected boolean mustResetPrice(InterCompanyEndpointActionPolicy _interCompanyEndpointActionPolicy)
    {
        boolean ret = next mustResetPrice(_interCompanyEndpointActionPolicy);

        return ret && !isSubRental;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    void updateDesign(InventDimFormDesignUpdate mode)
    {
        next updateDesign(mode);

        if (tmpPurchLinePrice.isInterCompanyVendor())
        {
            InterCompanyEndpointActionPolicy interCompanyActionPolicy = tmpPurchLinePrice.interCompanyActionPolicy();

            PurchasePrice.allowEdit(interCompanyActionPolicy.EditPrice && !isSubRental);
        }
        else
        {
            PurchasePrice.allowEdit(!isSubRental);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInterCompanyDelivery</Name>
				<Source><![CDATA[
    public boolean validateInterCompanyDelivery(SalesLine _salesLine, VendAccount _vendAccount, boolean _showWarnings)
    {
        SalesTable  salesTable  = _salesLine.salesTable();
        boolean     showWarning = _showWarnings;

        if (purchCreateFromSalesOrder.tradeLineDlvType() != TradeLineDlvType::DropShip
        &&  salesTable.InterCompanyDirectDelivery
        &&  salesTable.SalesType == SalesType::RORRental)
        {
            showWarning = false;
        }

        boolean ret = next validateInterCompanyDelivery(_salesLine, _vendAccount, showWarning);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditPurchId_SalesLineDS</Name>
				<Source><![CDATA[
    // extension methods

    [SysObsolete('Obsolete', false)]
    edit PurchId ROREditPurchId_SalesLineDS(boolean _set, SalesLine _salesLine, PurchId _purchId)
    {  
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditPurchRequester_SalesLineDS</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    edit HcmWorkerName ROREditPurchRequester_SalesLineDS(boolean _set, SalesLine _salesLine, HcmWorkerName _purchRequester)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditRateCode</Name>
				<Source><![CDATA[
    [SysObsolete('Use DNRSalesLineTable_Extension/ROREditRateCode instead', false)]
    public UnitOfMeasureSymbol ROREditRateCode(boolean _set, SalesLine _salesLine, UnitOfMeasureSymbol _rateCode)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditSpecifyUnitPrice</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public Price ROREditSpecifyUnitPrice(boolean _set, SalesLine _salesLine, Price _price)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplaySubRentalGrossAmount</Name>
				<Source><![CDATA[
    // Callled from DNRSalesLineTable1_Extension Class
    public RORRentalGrossAmount RORDisplaySubRentalGrossAmount(SalesLine _salesLine)
    {
        this.selectTmpPurchLinePrice(_salesLine);
        return tmpPurchLinePrice.RORSubRentalGrossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplaySubRentalPriceTimeUnit</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public UnitOfMeasureSymbol RORDisplaySubRentalPriceTimeUnit(SalesLine _salesLine)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplaySubRentalMarginStatus</Name>
				<Source><![CDATA[
    // Callled from DNRSalesLineTable1_Extension Class
    display RORSubRentalMarginStatus RORDisplaySubRentalMarginStatus(SalesLine _salesLine)
    {
        this.selectTmpPurchLinePrice(_salesLine);
        return tmpPurchLinePrice.RORSubRentalMarginStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplaySubRentalMarginPct</Name>
				<Source><![CDATA[
    // Callled from DNRSalesLineTable1_Extension Class
    display Percent RORDisplaySubRentalMarginPct(SalesLine _salesLine)
    {
        this.selectTmpPurchLinePrice(_salesLine);
        return tmpPurchLinePrice.RORSubRentalMarginPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmIsSubRental</Name>
				<Source><![CDATA[
    public boolean DNRParmIsSubRental(boolean _isSubRental = isSubRental)
    {
        isSubRental = _isSubRental;
        return isSubRental;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmMapModifiedQty</Name>
				<Source><![CDATA[
    public Map DNRParmMapModifiedQty(Map _mapModifiedQty = mapModifiedQty)
    {
        mapModifiedQty = _mapModifiedQty;
        return mapModifiedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmPurchCreateFromSalesOrder</Name>
				<Source><![CDATA[
    public PurchCreateFromSalesOrder DNRParmPurchCreateFromSalesOrder(PurchCreateFromSalesOrder _purchCreateFromSalesOrder = purchCreateFromSalesOrder)
    {
        purchCreateFromSalesOrder = _purchCreateFromSalesOrder;
        return purchCreateFromSalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmTmpPurchLinePrice</Name>
				<Source><![CDATA[
    public TmpPurchLinePrice RORParmTmpPurchLinePrice(TmpPurchLinePrice _tmpPurchLinePrice = tmpPurchLinePrice)
    {
        tmpPurchLinePrice = _tmpPurchLinePrice;
        return tmpPurchLinePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_init_post</Name>
				<Source><![CDATA[
    // event handler methods

    [SysObsolete('Use Chain Of Command', false),
     PostHandlerFor(formStr(PurchCreateFromSalesOrder), formMethodStr(PurchCreateFromSalesOrder, init))]
    public static void DNREvent_init_post(XppPrePostArgs _eventArgs)
    {
        int i = 1; // To avoid car issues (empty method)
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ROREditPurchRequesterCTRL_OnJumpRef</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchCreateFromSalesOrder, ROREditPurchRequester), FormControlEventType::JumpRef)]
    public static void DNREvent_ROREditPurchRequesterCTRL_OnJumpRef(FormControl _sender, FormControlEventArgs _args)
    {
        FormStringControl   strCtrl         = _sender as FormStringControl;
        HcmWorkerName       purchRequester  = strCtrl.text();

        if (purchRequester)
        {
            HcmWorker       worker      = HcmWorker::findByPersonnelNumber(purchRequester);

            HcmWorker::jumpRef(worker.RecId, _sender.formRun());

            FormControlCancelableSuperEventArgs cancelableArgs = _args as FormControlCancelableSuperEventArgs;
            cancelableArgs.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ROREditPurchRequesterCTRL_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchCreateFromSalesOrder, ROREditPurchRequester), FormControlEventType::Lookup)]
    public static void DNREvent_ROREditPurchRequesterCTRL_OnLookup(FormControl _sender, FormControlEventArgs _args)
    {
        HcmWorkerLookup hcmWorkerLookup = HcmWorkerLookup::newCustomOptions(true, true, true, false, false, false, false, false, false);
        hcmWorkerLookup.WPPparmReturnWorkerName(true);
        hcmWorkerLookup.lookupWorker(_sender);

        FormControlCancelableSuperEventArgs cancelableArgs = _args as FormControlCancelableSuperEventArgs;
        cancelableArgs.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ROREditPurchIdCTRL_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchCreateFromSalesOrder, ROREditPurchId), FormControlEventType::Lookup)]
    public static void DNREvent_ROREditPurchIdCTRL_OnLookup(FormControl _sender, FormControlEventArgs _args)
    {
        FormRun         formRun     = _sender.formRun() as FormRun;
        FormDataSource  fds         = formRun.dataSource(formDataSourceStr(PurchCreateFromSalesOrder, SalesLine)) as FormDataSource;
        SalesLine       salesLine   = fds.cursor() as SalesLine;
        
        Object      fdsObject   = fds as Object;
        VendAccount vendAccount = fdsObject.specifyVendAccount(false, salesLine, '');

        PurchTable::RORLookupPurchTableFromSales(_sender, salesLine.salesTable(), vendAccount);

        FormControlCancelableSuperEventArgs cancelableArgs = _args as FormControlCancelableSuperEventArgs;
        cancelableArgs.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ROREditRateCodeCTRL_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchCreateFromSalesOrder, ROREditRateCode), FormControlEventType::Lookup)]
    public static void DNREvent_ROREditRateCodeCTRL_OnLookup(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormControlCancelableSuperEventArgs eventArgs = _eventArgs as FormControlCancelableSuperEventArgs;
        eventArgs.CancelSuperCall();

        UnitOfMeasureLookup::lookupForUnitOfMeasureClass(_sender, _sender.valueStr(), UnitOfMeasureClass::Time);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ROREditRateCodeCTRL_OnValidated</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchCreateFromSalesOrder, ROREditRateCode), FormControlEventType::Validated)]
    public static void DNREvent_ROREditRateCodeCTRL_OnValidated(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormStringControl control = _sender as FormStringControl;
        
        if (UnitOfMeasure::findBySymbol(control.text()).UnitOfMeasureClass != UnitOfMeasureClass::Time)
        {
            FormControlCancelEventArgs eventArgs = _eventArgs as FormControlCancelEventArgs;
            checkFailed(strFmt("@GLS105985", control.text(), tablePName(UnitOfMeasure)));
            eventArgs.cancel(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditPurchId</Name>
				<Source><![CDATA[
    //Called from DNRPurchCreateFromSalesOrderForm_SalesLineDS_Extension
    public edit PurchId ROREditPurchId(SalesLine _salesLine, boolean _set, PurchId _purchId)
    {
        this.selectTmpPurchLinePrice(_salesLine);
        
        if(_set)
        {
            if(_purchId)
            {
                PurchTable purchTable = PurchTable::find(_purchId);

                if(purchTable 
                && purchTable.PurchaseType == PurchaseType::RORSubRental
                && purchTable.CurrencyCode == tmpPurchLinePrice.CurrencyCode)
                {
                    Object dataSourceObject = _salesLine.dataSource();
                    VendAccount vendAccount = dataSourceObject.specifyVendAccount(true, _salesLine, purchTable.OrderAccount);
                
                    if(vendAccount == purchTable.OrderAccount )
                    {
                        tmpPurchLinePrice.RORPurchId = _purchId;
                        tmpPurchLinePrice.write();
                    }
                }
            }
            else
            {
                tmpPurchLinePrice.RORPurchId = _purchId;
                tmpPurchLinePrice.write();
            }
        }
            
        return tmpPurchLinePrice.RORPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditPurchRequestPersonnelId</Name>
				<Source><![CDATA[
    public edit HcmPersonnelNumberId ROREditPurchRequestPersonnelId(SalesLine _salesLine, boolean _set, HcmPersonnelNumberId _personnelNumberId)
    {
        this.selectTmpPurchLinePrice(_salesLine);
        
        if(_set)
        {
            tmpPurchLinePrice.RORRequester = HcmWorker::findByPersonnelNumber(_personnelNumberId).RecId;
            tmpPurchLinePrice.write();
        }

        return HcmWorker::find(tmpPurchLinePrice.RORRequester).PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPopulateTmpRentalDateTimes</Name>
				<Source><![CDATA[
    public RORRentalDateTimes DNRPopulateTmpRentalDateTimes(Query _query)
    {
        RORParameters RORParameters = RORParameters::find();

        ttsbegin;

        rentalDateTimes.setTmp();

        QueryRun queryRun = new QueryRun(_query);
   
        while(queryRun.next())
        {
            SalesLine salesLineLocal = queryRun.get(tableNum(SalesLine));
            
            rentalDateTimes.data(salesLineLocal.RORRentalDateTimesHost::rentalDateTimes());
            
            this.DNRAssignDates(rentalDateTimes, RORParameters.Back2BackRentalCalendar, RORParameters.Back2BackOnRentDays, RORParameters.Back2BackOffRentDays);

            rentalDateTimes.insert();
        }

        ttscommit;

        return rentalDateTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initB2BRORRentalDateTime</Name>
				<Source><![CDATA[
    void initB2BRORRentalDateTime()
    {
        RORRentalDateTimes.setTmp();
        RORRentalDateTimes.setTmpData(this.DNRPopulateTmpRentalDateTimes(salesLine_ds.query()));

    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRAssignDates</Name>
				<Source><![CDATA[
    public void DNRAssignDates(RORRentalDateTimes _rentalDateTimes, DNRCalendarId _calendarId, int _onRentDays, int _offRentDays)
    {
        if (_rentalDateTimes.OnRentDateTime)
        {
            date onRentDate = DNRWorkCalendar::findNextOpenDate(_calendarId, _rentalDateTimes.OnRentDate, true, _onRentDays);
            _rentalDateTimes.OnRentDateTime = DateTimeUtil::addDays(_rentalDateTimes.OnRentDateTime, onRentDate - _rentalDateTimes.OnRentDate);
        }

        if (_rentalDateTimes.OffRentDateTime)
        {
            date offRentDate = DNRWorkCalendar::findNextOpenDate(_calendarId, _rentalDateTimes.OffRentDate, false, _offRentDays);
            _rentalDateTimes.OffRentDateTime = DateTimeUtil::addDays(_rentalDateTimes.OffRentDateTime, offRentDate - _rentalDateTimes.OffRentDate);
        }

        if (_rentalDateTimes.ExpectedOffRentDateTime)
        {
            date expectedOffRentDate = DNRWorkCalendar::findNextOpenDate(_calendarId, _rentalDateTimes.ExpectedOffRentDate, false, _offRentDays);
            _rentalDateTimes.ExpectedOffRentDateTime = DateTimeUtil::addDays(_rentalDateTimes.ExpectedOffRentDateTime, expectedOffRentDate - _rentalDateTimes.ExpectedOffRentDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDNRBackToBackCreate</Name>
				<Source><![CDATA[
    public boolean parmDNRBackToBackCreate(boolean _backToBackCreate = DNRBackToBackCreate)
    {
        DNRBackToBackCreate = _backToBackCreate;
        return DNRBackToBackCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>