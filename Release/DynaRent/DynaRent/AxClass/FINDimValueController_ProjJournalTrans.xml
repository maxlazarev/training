<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimValueController_ProjJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimValueController_ProjJournalTrans extends FINDimValueController
{
    ProjJournalTrans callerProjJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findItemGroupId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findItemGroupId()
    {
        return FINDimValueController_Common::findItemGroupId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjGroupId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findObjGroupId()
    {
        return FINDimValueController_Common::findObjGroupId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findItemId()
    {
        return FINDimValueController_Common::findItemId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjSubGroupId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findObjSubGroupId()
    {
        return FINDimValueController_Common::findObjSubGroupId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesPurchId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findSalesPurchId()
    {
        return FINDimValueController_Common::findSalesPurchId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSerialItemId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findSerialItemId()
    {
        return FINDimValueController_Common::findSerialItemId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserDepartmentId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findUserDepartmentId()
    {
        FINDimValueResult           ret;
        OMOperatingUnit             operatingUnit;
        HcmPositionDetail           positionDetail;
        HcmPosition                 position;
        HcmPositionWorkerAssignment positionWorkerAssignment;
        HcmWorker                   worker;
        TransDateTime               transDateTime;
    
        #DNRConstants
    
        transDateTime = DateTimeUtil::newDateTime(callerProjJournalTrans.TransDate, #INVMidday(43200));
    
        select firstOnly OMOperatingUnitNumber from operatingUnit
            exists join positionDetail
            where positionDetail.Department == operatingUnit.RecId
                join TableId from position
                where position.RecId == positionDetail.Position
                    join TableId from positionWorkerAssignment
                    where positionWorkerAssignment.Position == position.RecId
                    &&    positionWorkerAssignment.ValidFrom <= transDateTime
                    &&    positionWorkerAssignment.ValidTo   >= transDateTime
                        join TableId from worker
                        where worker.RecId == positionWorkerAssignment.Worker
                        &&    worker.RecId == callerProjJournalTrans.Worker;
    
        ret = FINDimValueResult::constructValue(operatingUnit.OMOperatingUnitNumber);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkOrderId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findWorkOrderId()
    {
        return FINDimValueController_Common::findWorkOrderId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    protected Description getDescription()
    {
        return callerProjJournalTrans.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimensionFieldId()
    {
        return fieldNum(ProjJournalTrans, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjJournalTrans _projJournalTrans)
    {
        super(_projJournalTrans);
        callerProjJournalTrans = _projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refDepartmentId</Name>
				<Source><![CDATA[
    protected FINDimValueResult refDepartmentId()
    {
        return FINDimValueController_Common::refDepartmentId(callerProjJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refProject</Name>
				<Source><![CDATA[
    protected FINDimValueResult refProject()
    {
        if (callerProjJournalTrans.ProjId)
        {
            return FINDimValueResult::constructReference(ProjTable::find(callerProjJournalTrans.ProjId));
        }
        else
        {
            return FINDimValueResult::constructValue('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refWorkerId</Name>
				<Source><![CDATA[
    protected FINDimValueResult refWorkerId()
    {
        return FINDimValueResult::constructReference(HcmWorker::find(callerProjJournalTrans.Worker));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCleanupQuery</Name>
				<Source><![CDATA[
    public SysDaQueryObject getCleanupQuery()
    {
        ProjJournalTable projJournalTable;
        SysDaQueryObject projJournalTransQuery = new SysDaQueryObject(callerProjJournalTrans);
        SysDaQueryObject projJournalTableQuery = new SysDaQueryObject(projJournalTable);

        projJournalTableQuery.WhereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(projJournalTable, fieldStr(ProjJournalTable, JournalId)),
                                      new SysDaFieldExpression(callerProjJournalTrans, fieldStr(ProjJournalTrans, JournalId)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(projJournalTable, fieldStr(ProjJournalTable, Posted)),
                                           new SysDaValueExpression(NoYes::Yes))));

        projJournalTransQuery.joinClause(SysDaJoinKind::ExistsJoin, projJournalTableQuery);
        return projJournalTransQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>