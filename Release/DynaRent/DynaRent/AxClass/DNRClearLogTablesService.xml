<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRClearLogTablesService</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRClearLogTablesService
{
    DNRClearLogTablesContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears log tables by transfering records to archive tables
    /// </summary>
    /// <param name = "_dataContract">The clear logging tables data contract.</param>
    public void runExecution(DNRClearLogTablesContract _contract)
    {
        #OCCRetryCount

        setPrefix("@DNR:RunningDataCleanUpJob");

        contract = _contract;

        try
        {
            ttsbegin;
            
            if (contract.checkParameterDays())
            {
                this.clearLogTables();
            }

            if (contract.checkParameterDaysArchive())
            {
                this.clearArchiveTables();
            }
                
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::Error)
        {
            throw error("@DNR:AnErrorHasOccurred");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLogTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// transfers records from tables to archive tables
    /// </summary>
    public void clearLogTables()
    {
        if (contract.parmClearBOBMaintenanceLog())
        {
            this.copyContent(tableNum(BOBMaintenanceLog), tableNum(BOBMaintenanceLogArchive), fieldNum(BOBMaintenanceLog, CreatedDateTime));
        }

        if (contract.parmClearBOBObjectAssetLog())
        {
            this.copyContent(tableNum(BOBObjectAssetLog), tableNum(BOBObjectAssetLogArchive), fieldNum(BOBObjectAssetLog, CreatedDateTime));
        }

        if (contract.parmClearBOBObjectAvailabilityLog())
        {
            this.copyContent(tableNum(BOBObjectAvailabilityLog), tableNum(BOBObjectAvailabilityLogArchive), fieldNum(BOBObjectAvailabilityLog, CreatedDateTime));
        }

        if (contract.parmClearBOBObjectDetailsLog())
        {
            this.copyContent(tableNum(BOBObjectDetailsLog), tableNum(BOBObjectDetailsLogArchive), fieldNum(BOBObjectDetailsLog, CreatedDateTime));
        }

        if (contract.parmClearBOBObjectLocationLog())
        {
            this.copyContent(tableNum(BOBObjectLocationLog), tableNum(BOBObjectLocationLogArchive), fieldNum(BOBObjectLocationLog, CreatedDateTime));
        }

        if (contract.parmClearBOBObjectOwnershipLog())
        {
            this.copyContent(tableNum(BOBObjectOwnershipLog), tableNum(BOBObjectOwnershipLogArchive), fieldNum(BOBObjectOwnershipLog, CreatedDateTime));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>clearArchiveTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// deletes data from archive tables
    /// </summary>
    public void clearArchiveTables()
    {
        info(strFmt("@DNR:DeletingDataFromArchiveTablesOlderThanDays", contract.parmNumberOfDaysArchive()));

        if (contract.parmClearBOBObjectOwnershipLogArchive())
        {
            this.deleteArchiveContent(tableNum(BOBObjectOwnershipLogArchive), fieldNum(BOBObjectOwnershipLogArchive, DateTimeField));
        }

        if (contract.parmClearBOBObjectAvailabilityLogArchive())
        {
            this.deleteArchiveContent(tableNum(BOBObjectAvailabilityLogArchive), fieldNum(BOBObjectAvailabilityLogArchive, DateTimeField));
        }

        if (contract.parmClearBOBObjectDetailsLogArchive())
        {
            this.deleteArchiveContent(tableNum(BOBObjectDetailsLogArchive), fieldNum(BOBObjectDetailsLogArchive, DateTimeField));
        }

        if (contract.parmClearBOBObjectLocationLogArchive())
        {
            this.deleteArchiveContent(tableNum(BOBObjectLocationLogArchive), fieldNum(BOBObjectLocationLogArchive, DateTimeField));
        }

        if (contract.parmClearBOBMaintenanceLogArchive())
        {
            this.deleteArchiveContent(tableNum(BOBMaintenanceLogArchive), fieldNum(BOBMaintenanceLogArchive, DateTimeField));
        }

        if (contract.parmClearBOBObjectAssetLogArchive())
        {
            this.deleteArchiveContent(tableNum(BOBObjectAssetLogArchive), fieldNum(BOBObjectAssetLogArchive, DateTimeField));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>copyContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// copy content from one table to another table
    /// </summary>
    public void copyContent(TableId _tableIdSource, TableId _tableIdTarget, fieldId _fieldId)
    {
        Common tableTarget = new DictTable(_tableIdTarget).makeRecord();

        info(strFmt("@DNR:MovingDataFromTable", tableId2Name(_tableIdSource)));

        Query query = this.createQuery(_tableIdSource, _fieldId);
        Map targetToSourceMapping = this.createMapping(_tableIdSource, _tableIdTarget, query, _fieldId);

        Query::insert_recordset(tableTarget, targetToSourceMapping, query);

        Query::delete_from(query, true, true, true);

        info(strFmt("@DNR:MovedRecordsFromTo", int2Str(tableTarget.rowCount()),  tableId2Name(_tableIdSource), tableTarget.getPhysicalTableName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteArchiveContent</Name>
				<Source><![CDATA[
    public void deleteArchiveContent(tableId _tableId, fieldId _fieldId)
    {
        Query query = this.createQuery(_tableId);

        QueryBuildDataSource qbds = query.dataSourceTable(_tableId);

        qbds.addRange(_fieldId).value(SysQuery::range(dateNull(), today() - contract.parmNumberOfDaysArchive()));

        info(strFmt("@DNR:DeletedRecordsFromTable", Query::delete_from(query, true, true, true), tableId2Name(_tableId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// copy content from one table to another table
    /// </summary>
    public Query createQuery(tableId _tableSource, fieldId _fieldId = 0)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(_tableSource);

        query.clearAllFields();

        if (_fieldId)
        {
            this.addDateRange(query, _tableSource, _fieldId);
        }


        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// create mapping beetween two tables
    /// </summary>
    public Map createMapping(TableId _tableIdSource, TableId _tableIdTarget, Query _query, fieldId _fieldId = 0)
    {
        Map        targetToSourceMapping  = new Map(Types::String, Types::Container);
        DictTable  dictTable = new sysDictTable(_tableIdSource);
        FieldId    fieldId = dictTable.fieldNext(0);
        DictField  dictField;
        QueryBuildDataSource qbds = _query.dataSourceTable(_tableIdSource);

        while (fieldId)
        {
            dictField = dictTable.fieldObject(fieldId);

            if (dictField.isSql() && !dictField.isSystem() && fieldId != _fieldId)
            {
                this.addFieldMapping(qbds.uniqueId(), dictField.name(), _tableIdSource, _tableIdTarget, fieldId, qbds, targetToSourceMapping);
            }
            
            fieldId = dictTable.fieldNext(fieldId);
        }

        this.addFieldMapping(qbds.uniqueId(), literalStr(RefRecId), _tableIdSource, _tableIdTarget, fieldName2Id(_tableIdSource, literalStr(RecId)), qbds, targetToSourceMapping);
        
        if (_fieldId)
        {
            this.addFieldMapping(qbds.uniqueId(), literalStr(DateTimeField), _tableIdSource, _tableIdTarget, _fieldId, qbds, targetToSourceMapping);
        }

        return targetToSourceMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// copy content from one table to another table
    /// </summary>
    public void addDateRange(Query _query, TableId _tableId, fieldid _fieldId)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(_tableId);
        qbds.addRange(_fieldId).value(SysQuery::range(dateNull(), today() - contract.parmNumberOfDays()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// adds mapping between two fields(source and target) to the map
    /// </summary>
    private void addFieldMapping(int _queryId, FieldName _destinationField, TableId _sourceTable, TableId _targetTable, FieldId _sourceField, QueryBuildDataSource _qbds, Map _fieldMap)
    {
        if (fieldName2Id(_targetTable, _destinationField) == 0)
        {
            throw error(strFmt("@DNR:TableDoesNotContainField", tableId2Name(_targetTable), _destinationField));
        }

        _qbds.addSelectionField(_sourceField);
        _fieldMap.insert(_destinationField, [_queryId, fieldId2Name(_sourceTable, _sourceField)]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>