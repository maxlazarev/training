<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSalesQuotationTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RORSalesQuotationTableInteraction</c> class is the interaction class for the rental quotation
/// form.
/// </summary>
class RORSalesQuotationTableInteraction
    extends PageInteraction
{
    SalesQuotationTableForm                 salesQuotationTableForm;

    SalesQuotationTableInteractionHelper    salesQuotationTableInteractionHelper;

    SalesQuotationTable                     salesQuotationTable;
    SalesQuotationLine                      salesQuotationLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableCommonActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables common header and line level menu items
    /// </summary>
    protected void enableCommonActions()
    {
        // Header Update actions
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonUpdateQuotation),
            salesQuotationTableInteractionHelper.parmUpdateQuotationEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonUpdateConfirmation),
            salesQuotationTableInteractionHelper.parmUpdateConfirmationEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControl</Name>
				<Source><![CDATA[
    protected void enableControl(str _formControlStr, boolean _enabled)
    {
        this.page().actionPaneControlEnabled(_formControlStr, _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    protected void enableHeaderActions()
    {
        salesQuotationTableInteractionHelper = SalesQuotationTableInteractionHelper::construct();
        salesQuotationTableInteractionHelper.initHeaderActions(salesQuotationTable);
    
        this.enableCommonActions();
        this.enableHeaderSalesQuotationTabActions();
        this.enableHeaderQuoteTabActions();
        this.enableHeaderGeneralTabActions();
        this.enableHeaderFollowUpTabActions();
        this.enableHeaderUpdateActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFollowUpTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level follow up tab menu items.
    /// </summary>
    protected void enableHeaderFollowUpTabActions()
    {
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonConvert2Customer),
            salesQuotationTableInteractionHelper.parmCanConvert2Customer());
        this.enableControl(formControlStr(RORSalesQuotationTable, SalesQuotationChangeReasonCode),
            salesQuotationTableInteractionHelper.parmChangeReasonCodeEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderGeneralTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level general tab menu items.
    /// </summary>
    protected void enableHeaderGeneralTabActions()
    {
        // General
        this.enableControl(formControlStr(RORSalesQuotationTable, smmDocuments),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, AttachedSalesOrders),
            salesQuotationTableInteractionHelper.parmAttachedSalesOrdersEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, smmActivities_quotationInquiry),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, ContactPerson),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, PrintMgmt),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderQuoteTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level quote tab menu items.
    /// </summary>
    protected void enableHeaderQuoteTabActions()
    {
        this.enableControl(formControlStr(RORSalesQuotationTable, SalesQuotationPriceSimHeader),
            salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTable.QuotationStatus != SalesQuotationStatus::Confirmed);
        this.enableControl(formControlStr(RORSalesQuotationTable, priceDiscActual),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonJournalQuotation),
            salesQuotationTableInteractionHelper.parmJournalQuotationEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, CustQuotationJournalConfirmation),
            salesQuotationTableInteractionHelper.parmJournalConfirmationEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, MarkupTrans_HeadingQuotation),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, TaxTransSource),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, BankLGRequestForm),
            salesQuotationTableInteractionHelper.parmBankLGRequestFormEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonEndDiscAction),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, MultiLnDiscAction),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.enableControl(formControlStr(RORSalesQuotationTable, Customer), !salesQuotationTableInteractionHelper.parmIsProspect());
        this.enableControl(formControlStr(RORSalesQuotationTable, businessRelationShip), salesQuotationTableInteractionHelper.parmIsProspect());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderSalesQuotationTabActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level sales quotation tab menu items.
    /// </summary>
    protected void enableHeaderSalesQuotationTabActions()
    {
        this.enableControl(formControlStr(RORSalesQuotationTable, ButtonAlternativeQuotations),
            salesQuotationTableInteractionHelper.parmAlternativeQuotationsEnabled());        
        //this.enableControl(formControlStr(RORSalesQuotationTable, SalesQuotationTotals),
        //    salesQuotationTableInteractionHelper.parmQuotationNotConfirmed());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderUpdateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level update menu items.
    /// </summary>
    protected void enableHeaderUpdateActions()
    {
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonUpdateLost),
            salesQuotationTableInteractionHelper.parmUpdateLostEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonUpdateCancelled),
            salesQuotationTableInteractionHelper.parmUpdateCancelledEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    protected void enableLineActions()
    {
        salesQuotationTableInteractionHelper.initLineActions(salesQuotationTable, salesQuotationLine);
    
        this.enableCommonActions();
        this.enableLineUpdateActions();
        this.enableLineFunctionActions();
        this.enableLineInventoryActions();
    
        // Delivery actions
        this.enableControl(formControlStr(RORSalesQuotationTable, SalesAvailableDlvDatesLines),
            salesQuotationTableInteractionHelper.parmAvailableDlvDateLineEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, LineViewSalesAvailableDlvDatesLines),
            salesQuotationTableInteractionHelper.parmAvailableDlvDateLineEnabled());
    
        // PBA actions
        this.enableLinePBAActions();
        this.enableLineInquiryActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level function menu items.
    /// </summary>
    protected void enableLineFunctionActions()
    {
        boolean mayQuotationBeCopied = salesQuotationTableInteractionHelper.parmMayQuotationBeCopied();

        this.enableControl(formControlStr(RORSalesQuotationTable, SalesQuotationCopyAllLines), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, SalesQuickQuote), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, AddLines), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, RetailAddItemMenuItem), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, RORRentalLineEditorFormButton), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, BOBObjectAssignmentEngine), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, RORTogglePriceType_Net), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, RORTogglePriceType_Fixed), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, WPPTaskRequirementsLine), mayQuotationBeCopied);
        this.enableControl(formControlStr(RORSalesQuotationTable, WPPTransportRouteFormHandler), mayQuotationBeCopied);
    
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonDeliverySchedule),
            salesQuotationTableInteractionHelper.parmDeliveryScheduleEnabled());
    
        this.enableControl(formControlStr(RORSalesQuotationTable, SalesQuotationPriceSim),
            salesQuotationTableInteractionHelper.parmIsNotTemplate());
    
        this.enableControl(formControlStr(RORSalesQuotationTable, SuppItemCalc_Quotation),
            !salesQuotationTableInteractionHelper.parmIsCategoryBasedLine());
    
        this.enableControl(formControlStr(RORSalesQuotationTable, MarkupTrans_LineQuotation),
            salesQuotationTableInteractionHelper.parmMiscChargesEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInquiryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level inquiry menu items are enabled
    /// </summary>
    protected void enableLineInquiryActions()
    {
        this.enableControl(formControlStr(RORSalesQuotationTable, BOBTmpOnHandRentalInventory),
            SalesQuotationLine.RORTradeType != RORTradeType::SalesPurch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInventoryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level inventory menu items.
    /// </summary>
    protected void enableLineInventoryActions()
    {
        // Action pane strip
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonLineInventTrans),
            salesQuotationTableInteractionHelper.parmLineInventTransEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonLineInventOnHand),
            salesQuotationTableInteractionHelper.parmLineInventOnHandEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, buttonLineInventLot),
            salesQuotationTableInteractionHelper.parmLineInventTransEnabled());
        this.enableControl(formControlStr(RORSalesQuotationTable, InventDimTracking),
            salesQuotationTableInteractionHelper.parmLineInventTransEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLinePBAActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level Product Builder configuration buttons.
    /// </summary>
    public void enableLinePBAActions()
    {
        //this.enableControl(formControlStr(RORSalesQuotationTable, pbaConfiguratedItem), salesQuotationTableInteractionHelper.parmPBAConfiguratedItemEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineUpdateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level update menu items.
    /// </summary>
    protected void enableLineUpdateActions()
    {
        this.enableControl(formControlStr(RORSalesQuotationTable, BOMPriceCalc),
            salesQuotationTableInteractionHelper.parmBOMCalculationsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesQuotationTableInteraction</c> class by using the active
    /// records for the form.
    /// </summary>
    private void init()
    {
        salesQuotationTable         = this.page().activeRecord('SalesQuotationTable');
        salesQuotationLine          = this.page().activeRecord('SalesQuotationLine');
    
        salesQuotationTableInteractionHelper = SalesQuotationTableInteractionHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the line action menu item buttons when the active sales quotation order line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesQuotationLine', 'selectionChanged')]
    public void salesQuotationLine_DS_selectionChanged()
    {
        this.init();
        this.enableLineActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header action menu item buttons when the active sales quotation order header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesQuotationTable', 'selectionChanged')]
    public void salesQuotationTable_DS_selectionChanged()
    {
        this.init();
        this.enableHeaderActions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>