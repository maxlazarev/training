<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchAutoCreate_SalesLineStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DNRExtensionStrategyFactoryAttribute(classStr(PurchAutoCreate_SalesLine))]
class DNRPurchAutoCreate_SalesLineStrategy extends DNRPurchAutoCreate_SalesStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RORCreateRentalDatesForHeader</Name>
				<Source><![CDATA[
    public void RORCreateRentalDatesForHeader()
    {
        PurchAutoCreate_SalesLine hostObj = this.parmPurchAutoCreate_SalesLine();

        PurchTable purchTable = hostObj.parmPurchTable();
        SalesTable salesTable = hostObj.DNRParmSalesTable();
        SalesLine salesLine = hostObj.DNRParmSalesLine();
        TmpPurchLinePrice tmpPurchLinePrice = hostObj.DNRParmTmpPurchLinePrice();

        // Synchronise purchase rental dates from sales header
        if (purchTable.PurchaseType == PurchaseType::RORSubRental)
        {
            //When create sub-rental from salesline then dates and specifications should be copied from sale line instead of sales table.
            if (!salesLine)
            {
                select firstonly tmpPurchLinePrice
                where tmpPurchLinePrice.SalesId == salesTable.SalesId;
    
                salesLine = SalesLine::findRecId(tmpPurchLinePrice.SalesLineRefRecId);
            }

            LogisticsPostalAddress LogisticsPostalAddress = salesLine.inventDim().inventLocation().LogisticsPostalAddress();
                    
            if (LogisticsPostalAddress.RecId)
            {
                purchTable.selectForUpdate(true);
                purchTable.DeliveryPostalAddress = LogisticsPostalAddress.RecId;

                LogisticsLocation location = LogisticsLocation::find(LogisticsPostalAddress.Location);
                if (location.Description)
                {
                    purchTable.DeliveryName = location.Description;
                }
                else
                {
                    purchTable.DeliveryName = salesLine.DeliveryName;
                }

                purchTable.update();
            }
    
            if (hostObj.DNRParmBack2BackRentalDateTimes())
            {
                SetEnumerator setEnumerator = Set::create(hostObj.DNRParmBack2BackRentalDateTimes()).getEnumerator();
                RORRentalDateTimes rentalDateTimes;

                while(setEnumerator.moveNext())
                {
                    rentalDateTimes = setEnumerator.current();

                    if (rentalDateTimes.RefTableId == salesLine.TableId && rentalDateTimes.RefRecId == salesLine.RecId)
                    {
                        hostObj.RORCopyRentalDateTimes(rentalDateTimes, purchTable, true); // copy back to back rental dates from the line to the header
                        break;
                    }
                }
            }
            else
            {
                hostObj.RORCopyRentalDateTimes(salesLine.RORRentalDateTimesHost::rentalDateTimes(), purchTable, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAutoCreate_SalesLine</Name>
				<Source><![CDATA[
    private PurchAutoCreate_SalesLine parmPurchAutoCreate_SalesLine()
    {
        return this.parmPurchAutoCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>