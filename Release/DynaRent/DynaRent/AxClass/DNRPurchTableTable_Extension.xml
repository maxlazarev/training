<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(PurchTable))]
public final class DNRPurchTableTable_Extension
{
    // Chain-of-Command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustUpdatePurchLinesOnUpdatePurchTable</Name>
				<Source><![CDATA[
    protected boolean mustUpdatePurchLinesOnUpdatePurchTable(PurchTable _purchTableOrig)
    {
        boolean ret = next mustUpdatePurchLinesOnUpdatePurchTable(_purchTableOrig);

        return ret || (_purchTableOrig.RORIsModified != this.RORIsModified);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchLineOnUpdatePurchTable</Name>
				<Source><![CDATA[
    protected void initializePurchLineOnUpdatePurchTable(PurchLine _purchLine, VendTable _vendTable)
    {
        VendAccount tmpVendAccount = _purchLine.VendAccount;

        next initializePurchLineOnUpdatePurchTable(_purchLine, _vendTable);

        if (tmpVendAccount != _purchLine.VendAccount)
        {
            _purchLine.INVSetTierMultiplierRateOnCreation();
        }

        _purchLine.RORIsModified = this.RORIsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefIntercompanySalesOrder</Name>
				<Source><![CDATA[
    public void jumpRefIntercompanySalesOrder(Object _caller)
    {
        if(this.PurchaseType == PurchaseType::RORSubRental)
        {
            TradeInterCompany::construct(this).formRun(formStr(RORSalesTable), _caller);
        }
        else
        {
            next jumpRefIntercompanySalesOrder(_caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    public server DimensionDefault copyDimension(DimensionDefault _defaultDimension, DimensionCopy _dimensionCopy)
    {
        DimensionDefault origDimension = this.DefaultDimension;
        DimensionDefault suggestedNewDimension = next copyDimension(_defaultDimension, _dimensionCopy);

        // in case PurchTable's dimensions are controlled by the FINDim framework, we don't want to use standard AX logic to populate them
        return (FINDimAttributeSetup::existTableId(tableNum(PurchTable)) ? origDimension : suggestedNewDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccount</Name>
				<Source><![CDATA[
    boolean checkAccount()
    {
        boolean ret = next checkAccount();

        return(ret && this.RORCheckCanUseVendor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingJournals</Name>
				<Source><![CDATA[
    container existingJournals()
    {
        container ret = next existingJournals();

        ret += [this.RORLastPreparation(),
                this.RORLastOutbound(),
                this.RORLastBuild(),
                this.RORLastEventStart(),
                this.RORLastEventEnd(),
                this.RORLastStrike(),
                this.RORLastInbound(),
                this.RORLastReturned(),
                this.RORLastReturnInspection()];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQTable</Name>
				<Source><![CDATA[
    public void initFromPurchRFQTable(PurchRFQTable _purchRFQTable)
    {
        next initFromPurchRFQTable(_purchRFQTable);

        this.Requester = _purchRFQTable.Requester;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    public void initFromPurchTable(PurchTable _purchTable)
    {
        next initFromPurchTable(_purchTable);

        this.RORinitFromPurchTable(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    public void initFromSalesTable(SalesTable _salesTable)
    {
        next initFromSalesTable(_salesTable);

        if (this.InterCompanyDirectDelivery
        && _salesTable.SalesType == SalesType::RORRental)
        {
            this.InterCompanyAllowIndirectCreation  = NoYes::Yes;
            this.RORVenueCode                       = _salesTable.RORVenueCode;
            this.InterCompanyDirectDelivery         = NoYes::No;
        }

        this.RORInitFromSalesTable(_salesTable);
        this.INVInitFromSalesTable(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    public void initFromVendTable(VendTable _vendTable)
    {
        LogisticsDeliveryName       deliveryNameLocal           = this.DeliveryName;
        LogisticsPostalAddressRecId deliveryPostalAddressLocal  = this.DeliveryPostalAddress;
        AddressRefRecId             addressRefRecIdLocal        = this.AddressRefRecId;
        AddressRefTableId           addressRefTableIdLocal      = this.AddressRefTableId;

        this.InventLocationId = _vendTable.InventLocation;

        boolean addressSetLocal = this.setAddressFromInventLocationId(this.InventLocationId);

        next initFromVendTable(_vendTable);
  
        if (!this.RecId || !this.isDropShipment())
        {
            if (this.PurchaseType != PurchaseType::RORSubRental && !addressSetLocal)
            {
                // Reset the fields set by the call to the method 'setDefaultDeliveryAddress()' inside the method 'initFromVendTableIL()'.
                this.DeliveryName           = deliveryNameLocal;
                this.DeliveryPostalAddress  = deliveryPostalAddressLocal;
                this.AddressRefRecId        = addressRefRecIdLocal;
                this.AddressRefTableId      = addressRefTableIdLocal;
            }
        }

        this.RORinitFromVendTable(_vendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        this.RORModifiedField(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(PurchTable, OrderAccount),
                 fieldNum(PurchTable, RORVenueCode),
                 fieldNum(PurchTable, DeliveryPostalAddress):
                    PurchTable::WPPupdateWorkOrder(this);
                    break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventLocationId</Name>
				<Source><![CDATA[
    public boolean setAddressFromInventLocationId(InventLocationId _inventLocationId)
    {
        // RLAM - The original method returns if the purchasetype is a return item.
        // We want to accomplish the same behaviour if our condition holds
        // We thus hack the value of PurchaseType and reset it afterwards if our condition is true
        PurchaseType tmpPurchaseType = this.PurchaseType;
        boolean ourCondition = ((this.PurchaseType == PurchaseType::RORSubRental && this.RORVenueCode)
                             || (this.PurchaseType == PurchaseType::Purch && this.AddressRefTableId == tableNum(WPPWorkOrderTable)));

        if (ourCondition)
        {
            this.PurchaseType = PurchaseType::ReturnItem;
        }

        boolean ret = next setAddressFromInventLocationId(_inventLocationId);

        if (ourCondition)
        {
            this.PurchaseType = tmpPurchaseType;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventSiteId</Name>
				<Source><![CDATA[
    public boolean setAddressFromInventSiteId(InventSiteId _inventSiteId)
    {
        // RLAM - The original method returns if the purchasetype is a return item.
        // We want to accomplish the same behaviour if our condition holds
        // We thus hack the value of PurchaseType and reset it afterwards if our condition is true
        PurchaseType tmpPurchaseType = this.PurchaseType;
        boolean ourCondition = ((this.PurchaseType == PurchaseType::RORSubRental && this.RORVenueCode) || this.ProjId);

        if (ourCondition)
        {
            this.PurchaseType = PurchaseType::ReturnItem;
        }

        boolean ret = next setAddressFromInventSiteId(_inventSiteId);

        if (ourCondition)
        {
            this.PurchaseType = tmpPurchaseType;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINRentalProjectInvoicing</Name>
				<Source><![CDATA[
    // extension methods

    public boolean FINRentalProjectInvoicing()
    {
        boolean ret;
        ProjId  projId = this.ProjId ? this.ProjId : RORVenueTable::find(this.RORVenueCode).WPPProjId;

        if (projId)
        {
            ret = RORParameters::find().RentalProjectInvoicing;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExpectedOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORExpectedOffRentDateTime displayExpectedOffRentDateTime()
    {
        return this.RORRentalDateTimesHost::rentalDateTimes().ExpectedOffRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROffRentDateTime displayOffRentDateTime()
    {
        return this.RORRentalDateTimesHost::rentalDateTimes().OffRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOnRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROnRentDateTime displayOnRentDateTime()
    {
        return this.RORRentalDateTimesHost::rentalDateTimes().OnRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVinitFromSalesTable</Name>
				<Source><![CDATA[
    public void INVinitFromSalesTable(SalesTable _salesTable)
    {
        if (!this.INVInvoiceProfileId)
        {
            this.INVInvoiceProfileId = _salesTable.INVInvoiceProfileId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVinitFromVendTable</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2021, Form Method has been made obsolete, use RORinitFromVendTable instead", false)]
    public void INVinitFromVendTable(VendTable  _vendTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckCanUseVendor</Name>
				<Source><![CDATA[
    public boolean RORCheckCanUseVendor()
    {
        boolean         ret = true;
        ;
    
        if (this.PurchaseType == PurchaseType::RORSubRental
        && (!this.DNRCalendarId || !this.INVInvoiceProfileId || !this.RORPriceTimeUnit))
        {
            VendParameters  vendParameters  = VendParameters::find();
            VendTable       vendTable       = VendTable::find(this.OrderAccount);
    
        if ((!vendTable.DNRRentalCalendarId && !vendParameters.DNRRentalCalendarId)
            || (!vendTable.INVInvoiceProfileId && !vendParameters.INVInvoiceProfileId)
            || (!vendTable.RORPriceTimeUnit && !vendParameters.RORPriceTimeUnit))
            {
                ret = checkFailed(strFmt("@DNR8490"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitFromPurchTable</Name>
				<Source><![CDATA[
    public void RORinitFromPurchTable(PurchTable _purchTable)
    {
        this.RORVenueCode = _purchTable.RORVenueCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitFromSalesTable</Name>
				<Source><![CDATA[
    public void RORinitFromSalesTable(SalesTable _salesTable)
    {
        VendParameters vendParameters = VendParameters::find();

        if (!this.INVInvoiceProfileId)
        {
            this.INVInvoiceProfileId = vendParameters.INVInvoiceProfileId ? vendParameters.INVInvoiceProfileId : _salesTable.INVInvoiceProfileId;
        }

        if (!this.DNRCalendarId)
        {
            this.DNRCalendarId = vendParameters.DNRRentalCalendarId ? vendParameters.DNRRentalCalendarId : _salesTable.DNRCalendarId;
        }
    
        if (!this.RORPriceTimeUnit)
        {
            this.RORPriceTimeUnit = vendParameters.RORPriceTimeUnit ? vendParameters.RORPriceTimeUnit : _salesTable.RORPriceTimeUnit;
        }
    
        if(this.PurchaseType == PurchaseType::RORSubRental
        && _salesTable.SalesType == SalesType::RORRental
        && _salesTable.RORVenueCode)
        {
            this.RORVenueCode = _salesTable.RORVenueCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitFromVendTable</Name>
				<Source><![CDATA[
    public void RORinitFromVendTable(VendTable _vendTable)
    {
        RORCalendarId       calendarId;
        RORParameters       parameters;
        VendParameters      vendParameters;
        DNRWorkerDefaults   workerDefaults;

        workerDefaults = DNRWorkerDefaults::findByUserId();
    
        parameters = RORParameters::find();

        if (this.mustSetInventLocationId())
        {
            if (this.PurchaseType == PurchaseType::RORSubRental)
            {
                if(parameters.SubRentalWarehouse)
                {
                    this.InventLocationId = parameters.SubRentalWarehouse;
                }
                else if(workerDefaults.InventLocationId)
                {
                    this.InventLocationId = workerDefaults.InventLocationId;
                }
            }
            else if(workerDefaults.RORInventJournalWarehouse)
            {
                this.InventLocationId = workerDefaults.RORInventJournalWarehouse;
            }
    
            this.setAddressFromInventLocationId(this.InventLocationId);
    
            if (this.InventLocationId)
            {
                this.InventSiteId = InventLocation::find(this.InventLocationId).InventSiteId;
            }
        }

        vendParameters = VendParameters::find();
    
        this.INVInvoiceProfileId    = _vendTable.INVInvoiceProfileId;
        this.RORPriceTimeUnit       = _vendTable.RORPriceTimeUnit;
        
        calendarId = _vendTable.DNRRentalCalendarId;
    
        if (calendarId && calendarId != this.DNRCalendarId)
        {
            this.DNRCalendarId = calendarId;
            this.RORRentalDateTimesHost::checkUpdateRentalDates(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitFromVenueTable</Name>
				<Source><![CDATA[
    public void RORinitFromVenueTable(RORVenueTable _venueTable = RORVenueTable::find(this.RORVenueCode),
                                      boolean       _copyProjInfo = true)
    {
        LogisticsEntityPostalAddressView    addressView;
    
        select firstonly PostalAddress from addressView
        where addressView.IsPrimary == NoYes::Yes
        &&    addressView.EntityType == LogisticsLocationEntityType::RORVenue
        &&    addressView.Entity     == _venueTable.RecId;
    
        this.DeliveryName          = _venueTable.Name;
        this.DeliveryPostalAddress = addressView.PostalAddress;
        this.AddressRefRecId       = _venueTable.RecId;
        this.AddressRefTableId     = _venueTable.TableId;
    
        if (_copyProjInfo)
        {
            this.WPPIsRentalProject = _venueTable.WPPIsRentalProject;
            this.ProjId             = _venueTable.WPPProjId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastBuild</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastBuild()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Built;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastBuildDate</Name>
				<Source><![CDATA[
    public TransDate RORLastBuildDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Built).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventEnd</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastEventEnd()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventEnded;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventEndDate</Name>
				<Source><![CDATA[
    public TransDate RORLastEventEndDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventEnded).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventStart</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastEventStart()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventStarted;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastEventStartDate</Name>
				<Source><![CDATA[
    public TransDate RORLastEventStartDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::EventStarted).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastInbound</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastInbound()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Inbound;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastInboundDate</Name>
				<Source><![CDATA[
    public TransDate RORLastInboundDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Inbound).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORlastJournals</Name>
				<Source><![CDATA[
    public container  RORlastJournals()
    {
        container  c;
    
        c = conIns(c, PurchTableType::posPurchaseOrder(),       [this.lastPurchaseOrder(),       this.lastPurchaseOrderDate()]);
        c = conIns(c, PurchTableType::posReceiptsList(),        [this.lastReceiptsList(),        this.lastReceiptsListDate()]);
        c = conIns(c, PurchTableType::posPackingSlip(),         [this.lastPackingSlip(),         this.lastPackingSlipDate()]);
        c = conIns(c, PurchTableType::posInvoice(),             [this.lastInvoice(),             this.lastInvoiceDate()]);
    
        c = conIns(c, PurchTableType::RORPosPreperation(),      [this.RORLastPreparation(),      this.RORLastPreparationDate()]);
        c = conIns(c, PurchTableType::RORPosOutbound(),         [this.RORLastOutbound(),         this.RORLastOutboundDate()]);
    
        c = conIns(c, PurchTableType::RORPosBuild(),            [this.RORLastBuild(),            this.RORLastBuildDate()]);
        c = conIns(c, PurchTableType::RORPosEventStart(),       [this.RORLastEventStart(),       this.RORLastEventStartDate()]);
        c = conIns(c, PurchTableType::RORPosEventEnd(),         [this.RORLastEventEnd(),         this.RORLastEventEndDate()]);
        c = conIns(c, PurchTableType::RORPosStrike(),           [this.RORLastStrike(),           this.RORLastStrikeDate()]);
        c = conIns(c, PurchTableType::RORPosInbound(),          [this.RORLastInbound(),          this.RORLastInboundDate()]);
    
        c = conIns(c, PurchTableType::RORPosReturned(),         [this.RORLastReturned(),         this.RORLastReturnedDate()]);
        c = conIns(c, PurchTableType::RORPosReturnInspection(), [this.RORLastReturnInspection(), this.RORLastReturnInspectionDate()]);
    
        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastOutbound</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastOutbound()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Outbound;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastOutboundDate</Name>
				<Source><![CDATA[
    public TransDate RORLastOutboundDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Outbound).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastPreparation</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastPreparation()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Prepared;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastPreparationDate</Name>
				<Source><![CDATA[
    public TransDate RORLastPreparationDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Prepared).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturned</Name>
				<Source><![CDATA[
    public RORVendReturnNoteDocNum RORLastReturned()
    {
        VendRORReturnNoteJour       returnNoteJour;
        VendRORReturnNoteTrans      returnNoteTrans;
    
        select firstonly ReturnNoteDocNum from returnNoteJour
        order by ReturnDate desc, ReturnNoteId desc
        where returnNoteJour.PurchId            == this.PurchId
            exists join returnNoteTrans
            where returnNoteTrans.VendReturnNote == returnNoteJour.RecId
            && returnNoteTrans.Qty;
    
        return returnNoteJour.ReturnNoteDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturnedDate</Name>
				<Source><![CDATA[
    public TransDate RORLastReturnedDate()
    {
        VendRORReturnNoteJour   returnNoteJour;
        VendRORReturnNoteTrans  returnNoteTrans;
    
        select maxof(ReturnDate) from returnNoteJour
        where returnNoteJour.PurchId == this.PurchId
            exists join returnNoteTrans
            where returnNoteTrans.VendReturnNote == returnNoteJour.RecId
            && returnNoteTrans.Qty;
    
        return returnNoteJour.ReturnDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturnInspection</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastReturnInspection()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::ReturnInspected;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastReturnInspectionDate</Name>
				<Source><![CDATA[
    public TransDate RORLastReturnInspectionDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::ReturnInspected).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastStrike</Name>
				<Source><![CDATA[
    public RORVendSubStatusDocNum RORLastStrike()
    {
        VendRORSubStatusJour      subStatusJour;
    
        select firstonly SubStatusDocNum from subStatusJour
        order by @Date desc, SubStatusId desc
        where subStatusJour.PurchId            == this.PurchId
        &&    subStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Strike;
    
        return subStatusJour.SubStatusDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLastStrikeDate</Name>
				<Source><![CDATA[
    public TransDate RORLastStrikeDate()
    {
        return (select maxof(@Date) from VendRORSubStatusJour
                where VendRORSubStatusJour.PurchId            == this.PurchId
                &&    VendRORSubStatusJour.BOBRentalSubStatus == BOBRentalSubStatus::Strike).@Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLineBuffer</Name>
				<Source><![CDATA[
    public PurchLine RORLineBuffer()
    {
        PurchLine purchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORmodifiedField</Name>
				<Source><![CDATA[
    public void RORmodifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchTable, RORVenueCode):
                // Only copy the venue proj info when the order is not yet confirmed
                this.RORinitFromVenueTable(RORVenueTable::find(this.RORVenueCode), VendPurchOrderJour::numberOfPurchOrder(this) == 0);
                break;
    
            case fieldNum(PurchTable, DNRCalendarId):
                // Check the dates against calendar.
                // If this is the first time entering a calendar then auto-update dates when blocked
                this.RORRentalDateTimesHost::checkUpdateRentalDates(!this.orig().DNRCalendarId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORmustUseAmendment</Name>
				<Source><![CDATA[
    public client server boolean RORmustUseAmendment()
    {
        return /*RORAmendmentTable::existsReference(RORSalesQuotation::Purchase, this.PurchId) || */(enum2int(this.DocumentStatus) >= enum2int(DocumentStatus::Confirmation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROROrderType</Name>
				<Source><![CDATA[
    public PurchaseType ROROrderType()
    {
        return this.PurchaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORsmmBusRelTable</Name>
				<Source><![CDATA[
    public smmBusRelTable RORsmmBusRelTable()
    {
        return smmBusRelTable::findByParty(this.vendTable_OrderAccount().Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPInitFromWorkOrderTable</Name>
				<Source><![CDATA[
    public void WPPInitFromWorkOrderTable(WPPWorkOrderTable _workOrderTable)
    {
        this.DeliveryName          = LogisticsLocation::find(_workOrderTable.deliveryAddress().Location).Description;
        this.DeliveryPostalAddress = _workOrderTable.LogisticsLocationRecId;
        this.AddressRefRecId       = _workOrderTable.RecId;
        this.AddressRefTableId     = _workOrderTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLookupPurchTableFromSales</Name>
				<Source><![CDATA[
    public static client void RORLookupPurchTableFromSales(FormStringControl _formControl, SalesTable _salesTable, VendAccount _vendAccount = '')
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(PurchTable), _formControl);
        Query                   query          = new Query();
        QueryBuildDataSource    purchTable_qbds;
        Object                  form = _formControl.formRun();
    
        purchTable_qbds = query.addDataSource(tableNum(PurchTable));
        purchTable_qbds.addRange(fieldnum(PurchTable, PurchaseType)).value(SysQuery::value(PurchaseType::RORSubRental));
        purchTable_qbds.addRange(fieldnum(PurchTable, CurrencyCode)).value(SysQuery::value(_salesTable.CurrencyCode));
        purchTable_qbds.addRange(fieldnum(PurchTable, PurchStatus)).value(SysQuery::range(PurchStatus::None,PurchStatus::Received));
        purchTable_qbds.addRange(fieldnum(PurchTable, DNRBack2Back)).value(form.parmDNRBackToBackCreate());

        if (_vendAccount)
        {
            purchTable_qbds.addRange(fieldnum(PurchTable, OrderAccount)).value(SysQuery::value(_vendAccount));
        }

        sysTableLookup.addLookupField(fieldNum(PurchTable, PurchId), true);
        sysTableLookup.addLookupField(fieldNum(PurchTable, OrderAccount));
        sysTableLookup.addLookupField(fieldNum(PurchTable, PurchName));
        sysTableLookup.addLookupField(fieldNum(PurchTable, PurchStatus));
        sysTableLookup.addLookupField(fieldNum(PurchTable, DocumentStatus));
    
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPexistProjId</Name>
				<Source><![CDATA[
    public static client boolean WPPexistProjId(ProjId _projId, RecId _recId = 0)
    {
        return _projId && (select firstonly RecId from PurchTable
                           where PurchTable.ProjId == _projId
                           && (!_recId || PurchTable.RecId != _recId)).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPhasProjectTrans</Name>
				<Source><![CDATA[
    public static boolean WPPhasProjectTrans(ProjId _projId)
    {
        boolean ret = true;
    
        if (ProjTable::find(_projId).trxExists())
        {
            ret = checkFailed(strFmt("@DNR6562", _projId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPupdateWorkOrder</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public static void WPPupdateWorkOrder(PurchTable _purchTable)
    {
        WPPWorkOrderTable   workOrderTable;
        PurchLine           purchLine;
        VendTable           vendTable;
    
        if (WPPWorkOrderTable::existFromOrder(_purchTable.TableId, _purchTable.RecId))
        {
            // Synchronize the assigned object to the related work order
            update_recordSet workOrderTable
            setting LogisticsLocationRecId = _purchTable.DeliveryPostalAddress,
                    OrganizationParty = vendTable.Party,
                    CustVendAccountType = CustVendACType::Vend,
                    RORVenueCode = _purchTable.RORVenueCode
            where workOrderTable.OrderTableId == _purchTable.TableId
            &&    workOrderTable.OrderRecId   == _purchTable.RecId
                join Party from vendTable
                where vendTable.DataAreaId == workOrderTable.CompanyId
                &&    vendTable.AccountNum == _purchTable.OrderAccount;
        }
        else
        {
            // Update all work order related to the line
            select firstOnly RecId from workOrderTable
                exists join purchLine
                where purchLine.TableId == workOrderTable.OrderTableId
                &&    purchLine.RecId   == workOrderTable.OrderRecId
                &&    purchLine.PurchId == _purchTable.PurchId;
    
            if (workOrderTable)
            {
                workOrderTable = null;
                DirPartyRecId partyRecId = _purchTable.party();

                update_recordSet workOrderTable
                setting LogisticsLocationRecId = _purchTable.DeliveryPostalAddress,
                        OrganizationParty = partyRecId,
                        CustVendAccountType = CustVendACType::Vend,
                        RORVenueCode = _purchTable.RORVenueCode
                    exists join purchLine
                    where purchLine.TableId == workOrderTable.OrderTableId
                    &&    purchLine.RecId   == workOrderTable.OrderRecId
                    &&    purchLine.PurchId == _purchTable.PurchId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdating</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(PurchTable), DataEventType::Updating)]
    public static void DNREvent_OnUpdating(Common sender, DataEventArgs _eventArgs)
    {
        PurchTable hostObj          = sender as PurchTable;
        PurchTable purchTableOrig   = hostObj.extensionOrig();

        if (!hostObj.RORIsModified && !purchTableOrig.RORIsModified && hostObj.RORRentalHeader::orderMustBeReConfirmed(purchTableOrig))
        {
            hostObj.RORIsModified = NoYes::Yes;
        }

        if (hostObj.PurchaseType == PurchaseType::RORSubRental && hostObj.TaxGroup != purchTableOrig.TaxGroup)
        {
            ROROrderAmendmentLog::createAmendmentLog(DNRAmendmentAction::Updated, hostObj, DNRAmendmentEventType::SalesTaxGroupHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayHeaderOnRentalDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    display ROROnRentDateTime RORdisplayHeaderOnRentalDateTime()
    {
        RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

        return rentalDateTimes.getOnRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayHeaderOffRentalDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    display ROROffRentDateTime RORdisplayHeaderOffRentalDateTime()
    {
        RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

        return rentalDateTimes.getOffRentDateTime(false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayHeaderExpOffRentalDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    display RORExpectedOffRentDateTime RORdisplayHeaderExpOffRentalDateTime()
    {
        RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

        return rentalDateTimes.getOffRentDateTime();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>