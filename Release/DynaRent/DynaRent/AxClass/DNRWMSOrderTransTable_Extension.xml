<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWMSOrderTransTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(WMSOrderTrans))]
public final class DNRWMSOrderTransTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isQuantityValidForSplit</Name>
				<Source><![CDATA[
    protected boolean isQuantityValidForSplit(InventQty _splitQty, PdsCWInventQty _pdsCWSplitQty)
    {
        boolean ret = next isQuantityValidForSplit(_splitQty, _pdsCWSplitQty);

        boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        if(!isCWItem)
        {
            ret = true;
            if(_splitQty <= 0
            || (this.DNRAllowSplitFullQty && _splitQty > this.Qty)
            || (!this.DNRAllowSplitFullQty && _splitQty >= this.Qty))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    public WMSOrderTrans split(InventQty _splitQty, PdsCWInventQty _pdsCWSplitQty)
    {
        WMSOrderTrans ret = next split(_splitQty, _pdsCWSplitQty);
        this.DNRAllowSplitFullQty = NoYes::No;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBdisplayMaintenanceWarning</Name>
				<Source><![CDATA[
    // extension methods

    [SysClientCacheDataMethodAttribute(true)]
    display BOBObjectMaintenanceWarning BOBdisplayMaintenanceWarning()
    {
        #ResAppl
        #DNRConstants

        BOBObjectMaintenanceWarningView warningView;
        BOBObjectTable                  objectTable;
        BOBRentalType                   rentalType;
        SalesLine                       salesLine;

        select firstonly Classification, RentalTypeId from rentalType
            join TableId from salesLine 
            where salesLine.InventTransId == this.inventTransId
            &&    ((salesLine.BOBRentalTypeIdAssigned && rentalType.RentalTypeId == salesLine.BOBRentalTypeIdAssigned)
            ||    (!salesLine.BOBRentalTypeIdAssigned && rentalType.RentalTypeId == salesLine.BOBRentalTypeIdRequested));
            
        if (rentalType.Classification == BOBRentalTypeClassification::Bulk)
        {
            select firstOnly MustWarn from warningView
                exists join objectTable
                where objectTable.RentalTypeId == rentalType.RentalTypeId
                &&    !objectTable.InventSerialId
                &&    objectTable.ObjectId == warningView.ObjectId;
        }
        else
        {
            InventDim inventDim;

            select firstOnly MustWarn from warningView
                exists join objectTable
                where objectTable.ObjectId == warningView.ObjectId
                    join RecId from inventDim
                    where inventDim.inventDimId == this.inventDimId
                    &&    inventDim.inventSerialId == objectTable.InventSerialId;
        }
    
        if(warningView.MustWarn)
        {
            return #Image_Warning;
        }
    
        return #blankImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBRentalTypeId</Name>
				<Source><![CDATA[
    public BOBRentalTypeId BOBRentalTypeId()
    {
        SalesLine salesLine = SalesLine::findInventTransId(this.inventTransId);
        ;
    
        return salesLine ? salesLine.BOBRentalTypeIdRequested : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBValidateObjectAssignment</Name>
				<Source><![CDATA[
    public boolean BOBValidateObjectAssignment()
    {
        boolean ret = true;
        WMSOrderTrans   orderTransOther;
        InventDim       inventDim;
        InventSerialId  inventSerialId = this.inventDim().inventSerialId;
        ;
    
        if (inventSerialId)
        {
            select firstOnly RecId from orderTransOther
            where orderTransOther.routeId == this.routeId
            &&    orderTransOther.RecId   != this.RecId
                exists join inventDim
                where inventDim.inventDimId     == orderTransOther.inventDimId
                &&    inventDim.inventSerialId  == inventSerialId;
    
            if (orderTransOther)
            {
                ret = checkFailed(strFmt("@DNR8108", inventSerialId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>