<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotEditLinesForm_RORRental_SubStat</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationEditLinesFormFactoryAttribute(ModuleAxapta::RORRental, DocumentStatus::RORSubStatus)]
class SalesQuotEditLinesForm_RORRental_SubStat extends SalesQuotationEditLinesForm_Sales_Send
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::RORSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    protected void updateInventory(InventMovement _inventMovement, boolean _isCompensatingTrans = false)
    {
        InventMovement inventMovement;
        InventUpd_RORSubStatus inventUpdate;
    
        inventMovement = InventMovement::construct(salesQuotationLine, InventMovSubType::BOBCompensatingTrans);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, salesQuotationParmLine, BOBRentalSubStatus::Quotation, -inventMovement.transSign());
        inventUpdate.BOBParmIsCompensatingTrans(true);
        inventUpdate.updateNow(ledgerVoucher);
    
        inventMovement = InventMovement::construct(salesQuotationLine);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, salesQuotationParmLine, BOBRentalSubStatus::Quotation, -inventMovement.transSign());
        inventUpdate.updateNow(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    boolean updateNow()
    {
        InventMovement  inventMovement;
    
        this.initJournal();
        this.initMarkup();
    
        this.displayProgress();
    
        salesQuotationLine.clear();
        salesQuotationParmLine.clear();
    
        recordListSalesQuotationParmLine.first(salesQuotationParmLine);
        while (salesQuotationParmLine)
        {
            if (!this.checkDiscardLine())
            {
                salesQuotationLine = this.getSalesQuotationLine(salesQuotationParmLine);
    
                setPrefix(#PreFixField(salesQuotationLine, QuotationId));
    
                this.displayProgress();
    
                #LinePrefix(salesQuotationLine, salesQuotationLine.inventdim().preFixProductDim(EcoResProductDimGroupSetup::newItemId(salesQuotationLine.ItemId)))
    
                this.calcLine(salesQuotationLine, salesQuotationParmLine);
    
                // For rental, first post receipt
                if (salesQuotationLine.RORTradeType != RORTradeType::SalesPurch)
                {
                    inventMovement = InventMovement::construct(salesQuotationLine, InventMovSubType::BOBCompensatingTrans);
                    this.updateInventory(inventMovement, true);
                }
    
                inventMovement = InventMovement::construct(salesQuotationLine);
                this.updateInventory(inventMovement);
    
    
                this.writeJournalLine();
                this.postMarkupLine();
            }
    
            if (!recordListSalesQuotationParmLine.next(salesQuotationParmLine))
            {
                break;
            }
        }
    
        if (!this.checkIfSomethingIsPosted())
        {
            return false;
        }
    
        progress.setText("@SYS25781");
        this.writeJournal();
        this.postMarkupTable();
        this.postTax(false);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@DNR1593";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>