<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPTaskRequirementsData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPTaskRequirementsData
{
    Common                          callerRecord;
    WPPWorkOrderTaskTable           taskTable;
    InventTable                     inventTable;
    BOBObjectTable                  objectTable;
    WPPWorkOrderLine                workOrderLine;
    WPPWorkOrderLineListPageView    workOrderLineListPageView;
    WPPTaskRequirements             taskRequirementsTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    public void createRecord(WPPTaskRequirements _tmpRecordCreated)
    {
        WPPTaskRequirements         taskRequirementsDb;
        WPPTaskRequirements         taskRequirementsTmpFind;
        WPPCapabilityId             capabilityId;
    
        // BP Deviation documented - DynaRent
        taskRequirementsTmpFind.setTmp();
        taskRequirementsTmpFind.data(_tmpRecordCreated);
    
        if (WPPTaskRequirements::findTmpCapabilityId(taskRequirementsTmp, taskRequirementsTmpFind.TaskId, taskRequirementsTmpFind.CapabilityId, taskRequirementsTmpFind.RecId))
        {
            capabilityId = _tmpRecordCreated.CapabilityId;
    
            _tmpRecordCreated.delete();
            FormDataUtil::getFormDataSource(_tmpRecordCreated).research();
    
            throw error(strFmt("@DNR7289", fieldId2pname(tableNum(WPPTaskRequirements), fieldNum(WPPTaskRequirements, CapabilityId)), capabilityId));
        }
        else
        {
            // add the inserted temporary record to the database as well
            taskRequirementsDb.data(_tmpRecordCreated);
            taskRequirementsDb.RefTableId     = callerRecord.TableId;
            taskRequirementsDb.RefRecId       = callerRecord.RecId;
            taskRequirementsDb.OverwriteRecId = 0;
            taskRequirementsDb.RecIdDb        = 0;
            taskRequirementsDb.insert();
    
            _tmpRecordCreated.RecIdDb = taskRequirementsDb.RecId;
            _tmpRecordCreated.doUpdate();
            FormDataUtil::getFormDataSource(_tmpRecordCreated).reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecord</Name>
				<Source><![CDATA[
    public void deleteRecord(WPPTaskRequirements _tmpRecordDeleted)
    {
        WPPTaskRequirements taskRequirementsDb;
    
        if (callerRecord is WPPWorkOrderTaskTable || callerRecord is InventTable)
        {
            // any record that overwrites the one being deleted must now become
            // a 'standalone', i.e. it mustn't overwrite anything anymore
            update_recordSet taskRequirementsDb
            setting OverwriteRecId = 0
            where taskRequirementsDb.OverwriteRecId == _tmpRecordDeleted.RecIdDb
            &&   !taskRequirementsDb.IsDeleted;
    
            // any record that overwrites the one being deleted is used to effectively 'remove' the one being
            // deleted -- these are no longer necessary and can now be deleted
            delete_from taskRequirementsDb
            where taskRequirementsDb.OverwriteRecId == _tmpRecordDeleted.RecIdDb
            &&    taskRequirementsDb.IsDeleted;
        }
    
        if (_tmpRecordDeleted.OverwriteRecId || callerRecord.TableId == _tmpRecordDeleted.RefTableId)
        {
            // delete the source record in the database
            delete_from taskRequirementsDb
            where taskRequirementsDb.RecId == _tmpRecordDeleted.RecIdDb;
        }
        else
        {
            // create a new record with "IsDeleted" checked to effectively
            // 'remove' the record being deleted
            taskRequirementsDb.data(_tmpRecordDeleted);
            taskRequirementsDb.IsDeleted      = NoYes::Yes;
            taskRequirementsDb.RefTableId     = callerRecord.TableId;
            taskRequirementsDb.RefRecId       = callerRecord.RecId;
            taskRequirementsDb.OverwriteRecId = _tmpRecordDeleted.RecIdDb;
            taskRequirementsDb.RecIdDb        = 0;
            taskRequirementsDb.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCallerRecordValid</Name>
				<Source><![CDATA[
    protected boolean isCallerRecordValid()
    {
        return (callerRecord is RORVenueTable
            ||  callerRecord is smmBusRelTable
            ||  callerRecord is SalesQuotationTable
            ||  callerRecord is SalesQuotationLine
            ||  callerRecord is SalesTable
            ||  callerRecord is SalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyRecord</Name>
				<Source><![CDATA[
    public void modifyRecord(WPPTaskRequirements _tmpRecordModified)
    {
        WPPTaskRequirements taskRequirementsDb;
        boolean             mustInsert;
    
        // if(callerRecord is WPPWorkOrderTaskTable || _tmpRecordModified.OverwriteRecId)
        if (_tmpRecordModified.OverwriteRecId
        ||  callerRecord.TableId == _tmpRecordModified.RefTableId)
        {
            // in case we're dealing with a record that has a direct physical source
            // record in the database, we need to update that source
            update_recordSet taskRequirementsDb
            setting CapabilityId = _tmpRecordModified.CapabilityId,
                    TaskId       = _tmpRecordModified.TaskId
            where taskRequirementsDb.RecId == _tmpRecordModified.RecIdDb;
        }
        else
        if (callerRecord is InventTable
        ||  callerRecord is BOBObjectTable)
        {
            mustInsert = true;
    
            if (callerRecord.TableId != _tmpRecordModified.RefTableId)
            {
                // the user modified an inherited record -- see if we need to save anything to the db
                taskRequirementsDb = WPPTaskRequirements::find(_tmpRecordModified.RecIdDb);
    
                if (taskRequirementsDb.CapabilityId == _tmpRecordModified.CapabilityId
                &&  taskRequirementsDb.TaskId       == _tmpRecordModified.TaskId)
                {
                    mustInsert = false; // nothing was modified so we don't have to do anything
                }
            }
    
            if (mustInsert)
            {
                // create a new record that overwrites the source record
                taskRequirementsDb.data(_tmpRecordModified);
                taskRequirementsDb.RefTableId     = callerRecord.TableId;
                taskRequirementsDb.RefRecId       = callerRecord.RecId;
                taskRequirementsDb.RecIdDb        = 0;
                taskRequirementsDb.OverwriteRecId = _tmpRecordModified.RecIdDb;
                taskRequirementsDb.insert();
    
                _tmpRecordModified.RecIdDb = taskRequirementsDb.RecId;
                _tmpRecordModified.update();
            }
        }
        else
        if (!(callerRecord is WPPWorkOrderTaskTable)
        &&  !_tmpRecordModified.OverwriteRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _callerRecord)
    {
        callerRecord = _callerRecord;

        switch (callerRecord.TableId)
        {
            case tableNum(WPPWorkOrderTaskTable):
                taskTable = callerRecord as WPPWorkOrderTaskTable;

                break;

            case tableNum(InventTable):
                inventTable = callerRecord as InventTable;

                break;

            case tableNum(BOBObjectTable):
                objectTable = callerRecord as BOBObjectTable;
                inventTable = objectTable.inventTable();

                break;

            case tableNum(BOBObjectView):
                BOBObjectView objectView = callerRecord as BOBObjectView;

                objectTable     = BOBObjectTable::findObjectId(objectView.ObjectId);
                inventTable     = objectTable.inventTable();
                callerRecord    = objectTable;

                break;

            case tableNum(BOBObjectViewV2):
                BOBObjectViewV2 objectViewV2 = callerRecord as BOBObjectViewV2;

                objectTable     = BOBObjectTable::findObjectId(objectViewV2.ObjectId);
                inventTable     = objectTable.inventTable();
                callerRecord    = objectTable;

                break;

            case tableNum(WPPWorkOrderLine):
                workOrderLine   = callerRecord as WPPWorkOrderLine;
                taskTable       = workOrderLine.workOrderTaskTable();
                objectTable     = workOrderLine.workOrderTable().BOBObjectTable();

                if (objectTable)
                {
                    inventTable = objectTable.inventTable();
                }

                break;

            case tableNum(WPPWorkOrderLineListPageView):
                workOrderLineListPageView   = callerRecord as WPPWorkOrderLineListPageView;
                taskTable                   = WPPWorkOrderTaskTable::find(workOrderLineListPageView.TaskId);
                objectTable                 = BOBObjectTable::findRecId(workOrderLineListPageView.BOBObjectTableRecId);

                if (objectTable)
                {
                    inventTable = objectTable.inventTable();
                }

                break;

            default:
                if (! this.isCallerRecordValid())
                {
                    throw error(strFmt("@DNR2491", tableId2name(callerRecord.TableId), classStr(WPPTaskRequirementsData)));
                }
                // No action required
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInsertMethodInLoop", "taskRequirementsTmp.setTmp(); has been set as a Tmp table" )]
    public WPPTaskRequirements populateTmpData(WPPWorkOrderTaskId _taskId = '')
    {
        WPPTaskRequirements     taskRequirementsDb;
        WPPCapability           resourceCapability;;
    
        void localMethod(Common _refRecord)
        {
            while select taskRequirementsDb
            where taskRequirementsDb.RefTableId == _refRecord.TableId
            &&    taskRequirementsDb.RefRecId   == _refRecord.RecId
            && (!_taskId || taskRequirementsDb.TaskId == _taskId)
                join RecId, TableId from resourceCapability
                where resourceCapability.CapabilityId == taskRequirementsDb.CapabilityId
            {
                if (taskRequirementsDb.OverwriteRecId && taskRequirementsDb.IsDeleted)
                {
                    taskRequirementsTmp = WPPTaskRequirements::findTmpRecId(taskRequirementsTmp, taskRequirementsDb.OverwriteRecId, true);
                    taskRequirementsTmp.delete();
                }
                else
                if (taskRequirementsDb.OverwriteRecId)
                {
                    taskRequirementsTmp = WPPTaskRequirements::findTmpRecId(taskRequirementsTmp, taskRequirementsDb.OverwriteRecId, true);
                    taskRequirementsTmp.initFromTaskRequirements(taskRequirementsDb);
                    taskRequirementsTmp.update();
                }
                else
                {
                    taskRequirementsTmp.clear();
                    taskRequirementsTmp.initFromTaskRequirements(taskRequirementsDb);
                    taskRequirementsTmp.insert();
                }
            }
        }
        ;
    
        // BP Deviation documented - DynaRent
        taskRequirementsTmp.setTmp();
    
        ttsBegin;

        if (this.isCallerRecordValid() || callerRecord is WPPWorkOrderTaskTable || callerRecord is WPPWorkOrderLine)
        {
            while select taskRequirementsDb
            where taskRequirementsDb.RefTableId == callerRecord.TableId
            &&    taskRequirementsDb.RefRecId   == callerRecord.RecId
                join TableId from resourceCapability
                where resourceCapability.CapabilityId == taskRequirementsDb.CapabilityId
            {
                taskRequirementsTmp.clear();
                taskRequirementsTmp.initFromTaskRequirements(taskRequirementsDb);
                taskRequirementsTmp.insert();
            }
        }
        else
        {
            while select taskRequirementsDb
            where taskRequirementsDb.RefTableId == tableNum(WPPWorkOrderTaskTable)
            &&   (!_taskId || taskRequirementsDb.TaskId == _taskId)
                join TableId from resourceCapability
                where resourceCapability.CapabilityId == taskRequirementsDb.CapabilityId
            {
                taskRequirementsTmp.clear();
                taskRequirementsTmp.initFromTaskRequirements(taskRequirementsDb);
                taskRequirementsTmp.insert();
            }
    
            if (inventTable)
            {
                localMethod(inventTable);
    
                if (objectTable)
                {
                    localMethod(objectTable);
                }
            }
    
            if (workOrderLine)
            {
                localMethod(workOrderLine);
            }
            else
            if (workOrderLineListPageView)
            {
                localMethod(workOrderLineListPageView);
            }
        }

        ttsCommit;
    
        return taskRequirementsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPTaskRequirementsData construct(Common _callerRecord)
    {
        return new WPPTaskRequirementsData(_callerRecord);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>