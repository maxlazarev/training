<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalLineEditorFormV2_RentalLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORRentalLineEditorFormV2_RentalLine extends RORRentalLineEditorFormV2
{
    SalesTable  salesTable;
    SalesLine   salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSetTaxGroups</Name>
				<Source><![CDATA[
    protected void checkSetTaxGroups()
    {
        RORRentalEditorLine editorLine;
        ;

        if (salesTable.InclTax)
        {
            while select forUpdate editorLine
            where editorLine.ParmId == this.parmId()
            &&    editorLine.MainKitReference == salesLine.RecId
            &&    editorLine.RefTableId == tableNum(SalesLine)
            {
                editorLine.TaxGroup     =  salesLine.TaxGroup;
                editorLine.TaxItemGroup = (editorLine.TradeType == RORTradeType::SalesPurch ?
                                           InventTableModule::find(editorLine.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId :
                                           RORInventItemRentalSetup::findDefault(editorLine.ItemId).TaxItemGroup);
                editorLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    protected container createLine(RORRentalEditorLine  _rentalEditorLine,
                                   RORKitComponentType  _kitComponentType,
                                   RORRentalLine        _lineParent,
                                   LineNum              _lastLineNum)
    {
        SalesLine parentSalesLine = _lineParent;

        if (!parentSalesLine)
        {
            parentSalesLine.RORLineBuffer();
        }

        ttsBegin;

        SalesLine salesLineComponent;

        salesLineComponent.initValue();
        salesLineComponent.initFromSalesTable(salesTable);
        salesLineComponent.SalesType                = salesLine.SalesType;
        salesLineComponent.SalesId                  = salesLine.SalesId;
        salesLineComponent.RORTradeType             = salesLine.RORTradeType;
        salesLineComponent.RORModifiedRORTradeType();
        salesLineComponent.ItemId                   = _rentalEditorLine.ItemId;
        salesLineComponent.itemIdChanged();

        this.initInventDimIdOnComponent(salesLineComponent, _rentalEditorLine);

        salesLineComponent.RORReturnInventLocationId   = parentSalesLine.RORReturnInventLocationId ?
            parentSalesLine.RORReturnInventLocationId : _rentalEditorLine.InventLocationId;

        salesLineComponent.RORParentLineRecId       = _lineParent.RecId;

        salesLineComponent.RORKitComponentType      = _rentalEditorLine.kitComponentType();
        salesLineComponent.RORAllowQtyEdit          = _rentalEditorLine.AllowQtyEdit;

        salesLineComponent.RORRentalLine::initPricingFromRentalLine(_rentalEditorLine);
        salesLineComponent.INVSkipTierMultiplierCalcOnCreation = true;

        // can reset some pricing elements
        salesLineComponent.RORRentalLine::initFromParent(_lineParent);

        if(salesLineComponent.RORTradeType != RORTradeType::SalesPurch)
        {
            // Keep invoice profile and calendar the same as it was shown in RLE
            salesLineComponent.INVInvoiceProfileId  = _rentalEditorLine.INVInvoiceProfileId;
            salesLineComponent.DNRCalendarId        = _rentalEditorLine.DNRCalendarId;
            salesLineComponent.RORPriceTimeUnit     = _rentalEditorLine.PriceTimeUnit;

            salesLineComponent.RORRentalPricesModified();
        }

        salesLineComponent.RORIsPriceFixed          = _rentalEditorLine.IsPriceFixed;
        salesLineComponent.RORIsPriceNet            = _rentalEditorLine.IsPriceNet;

        salesLineComponent.RORSuppItemTableRecid    = _rentalEditorLine.SuppItemTableRecid;

        // find a line number between _lastLineNum and the next line
        salesLineComponent.LineNum = salesLineComponent.RORRentalLine::getNextLineNum(_lastLineNum, lastContractItemLineNum);
        salesLineComponent.createLine(true, false, false, true, false, false, false, true);

        _rentalEditorLine.DNRWriteAdditionalNotes(salesLineComponent);

        ttsCommit;

        return [ salesLineComponent.InventTransId, salesLineComponent.LineNum ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineById</Name>
				<Source><![CDATA[
    protected RORRentalLine findLineById(InventTransId _inventTransId)
    {
        return SalesLine::findInventTransId(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId getInventDimId()
    {
        InventDim   inventDim;
    
        if (salesTable.InventLocationId)
        {
            inventDim.InventLocationId = salesTable.InventLocationId;
        }
    
        if (salesTable.InventSiteId)
        {
            inventDim.InventSiteId = salesTable.InventSiteId;
        }
    
        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallerHeader</Name>
				<Source><![CDATA[
    public void initFromCallerHeader(RORRentalEditorLine _rentalEditorLine)
    {
        _rentalEditorLine.HeaderId              = salesTable.SalesId;
        _rentalEditorLine.INVInvoiceProfileId   = salesTable.INVInvoiceProfileId;
        _rentalEditorLine.CustVendAccount       = salesTable.CustAccount;
    
        _rentalEditorLine.RORRentalLine::initFromHeaderBuffer(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesLine _salesLine)
    {
        super(_salesLine);
    
        salesLine   = _salesLine;
        salesTable  = _salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    protected LineNum updateLine(
        Common                  _common,
        RORKitComponentType     _kitComponentType,
        RORRentalEditorLine     _rentalEditorLine = null)
    {
        SalesLine       salesLineUpdate = _common as SalesLine;
        SalesLine       salesLineOrig = salesLineUpdate.orig();
        boolean         hasEffectivityRange = (mainKitHeader.EffectiveDateTimeFrom != DateTimeUtil::minValue() || mainKitHeader.EffectiveDateTimeTo != DateTimeUtil::minValue()) 
                                            || salesLineUpdate.SalesStatus == SalesStatus::Invoiced;
        ;
    
        if (salesLineUpdate)
        {
            salesLineUpdate.RORKitComponentType = _kitComponentType;
    
            if (_rentalEditorLine)
            {
                salesLineUpdate.RORRentalLine::updateFromRentalEditorLine(_rentalEditorLine, hasEffectivityRange);
                salesLineUpdate.salesQtyModified();
    
                _rentalEditorLine.DNRWriteAdditionalNotes(salesLineUpdate);
            }
    
            salesLineUpdate.update();
    
            if (hasEffectivityRange)
            {
                // set pricing values on buffer but don't commit to database
                salesLineUpdate.RORRentalLine::updateFromRentalEditorLine(_rentalEditorLine);
                salesLineUpdate.salesQtyModified();                   

                Map changesMap = this.getChangesMap(salesLineUpdate, salesLineOrig);
                ROROrderAmendmentDialogType::runFinancialChanges(salesLineOrig, changesMap);            
            }
        }
    
        return salesLineUpdate.lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCallerLine</Name>
				<Source><![CDATA[
    protected RORRentalLine selectCallerLine(SalesLineRefRecId _callerLineRecId)
    {
        SalesLine callerLine;

        select firstonly callerLine where callerLine.RecId == _callerLineRecId;
        return callerLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>