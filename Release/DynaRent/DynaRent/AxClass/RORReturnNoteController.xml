<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORReturnNoteController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RORReturnNoteController extends TradeDocumentReportController
{
    FormletterJournalPrint  formletterJournalPrint;
    CustRORReturnNoteJour   returnNoteJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    protected str documentTitle()
    {
        str documentTitle;
    
        if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            if (returnNoteJour.isProforma())
            {
                documentTitle = literalStr("@DNR7228");
            }
            else
            {
                documentTitle = literalStr("@DNR7229");
            }
        }
        else
        {
            if (returnNoteJour.isProforma())
            {
                documentTitle = literalStr("@DNR7230");
            }
            else
            {
                documentTitle = literalStr("@DNR7231");
            }
        }
    
        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    protected RecId getRecordId()
    {
        return returnNoteJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    protected TableId getTableId()
    {
        return tableNum(CustRORReturnNoteJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();
    
        if (classIdGet(this.parmArgs().caller()) == classNum(SalesFormLetterRORReturnNoteJournalPrint))
        {
            // Set the caller
            formletterJournalPrint = this.parmArgs().caller();
        }
    
        if (this.parmArgs().record())
        {
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }
    
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::RORReturnNote);
        formLetterReport.parmPrintType(printCopyOriginal);
    
        if (formletterJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(formletterJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(formletterJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(formletterJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    protected void modifyContract()
    {
        SRSTmpDataStore         srsTmpDataStore;
        RORReturnNoteContract   returnNoteContract = contract as RORReturnNoteContract;
    
        if (formletterJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = formletterJournalPrint.pack();
            srsTmpDataStore.insert();
    
            // Set the rec id to contract parameter
            returnNoteContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        return journalList.first(returnNoteJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        return journalList.next(returnNoteJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        formLetterReport.loadPrintSettings(returnNoteJour, SalesTable::find(returnNoteJour.SalesId), returnNoteJour.LanguageId);
        this.parmReportContract().parmRdlContract().parmLanguageId(returnNoteJour.LanguageId);
        this.parmReportContract().parmRdlContract().parmLabelLanguageId(returnNoteJour.LanguageId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    protected void setDataContractRecord(Common _common)
    {
        returnNoteJour = args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RORReturnNoteController construct()
    {
        return new RORReturnNoteController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController  formLetterController = RORReturnNoteController::construct();
    
        RORReturnNoteController controller = formLetterController;
        controller.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::RORReturnNote).getDefaultReportFormat());
    
        if (classIdGet(_args.caller()) == classNum(SalesFormLetterRORReturnNoteJournalPrint))
        {
            formLetterController.renderingCompleted += eventhandler(SalesFormLetterRORReturnNoteJournalPrint::renderingCompleted);
        }
    
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>