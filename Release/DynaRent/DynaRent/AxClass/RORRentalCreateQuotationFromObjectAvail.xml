<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalCreateQuotationFromObjectAvail</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORRentalCreateQuotationFromObjectAvail
{
    SalesQuotationTable         salesQuotationTable;
    BOBTmpObjectAvailability    tmpObjectAvailability;
    boolean                     isCreatedNew;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates rental quotation.
    /// </summary>
    /// <returns>
    ///   The record of the new quotation if a quotation was created; otherwise, null.
    /// </returns>
    public SalesQuotationTable create()
    {
        this.createTable();
    
        if (salesQuotationTable)
        {
            this.createLine();
        }
    
        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    private void createLine()
    {
        SalesQuotationLine salesQuotationLine;
    
        try
        {
            ttsBegin;
    
            salesQuotationLine.initValue();
            salesQuotationLine.initFromSalesQuotationTable(salesQuotationTable);
            salesQuotationLine.RORTradeType = RORTradeType::Rental;
    
            if (tmpObjectAvailability.RentalTypeId)
            {
                InventTable inventTable = InventTable::BOBFindFromRentalType(tmpObjectAvailability.RentalTypeId);
                salesQuotationLine.ItemId = inventTable.ItemId;
                salesQuotationLine.itemIdChanged();
                salesQuotationLine.initFromInventTable(inventTable);
            }
    
            salesQuotationLine.setPriceDisc(salesQuotationLine.inventDim());
            salesQuotationLine.createLine();
    
            RORRentalDateTimes rentalDateTimes = salesQuotationLine.RORRentalDateTimes(true);
    
            if (rentalDateTimes)
            {
                rentalDateTimes.SynchronizeFromParent = false;
                rentalDateTimes.OnRentDateTime = tmpObjectAvailability.ROROnRentDateTime;
                rentalDateTimes.modifiedField(fieldNum(RORRentalDateTimes, OnRentDateTime));
                rentalDateTimes.OffRentDateTime = tmpObjectAvailability.ROROffRentDateTime;
                rentalDateTimes.modifiedField(fieldNum(RORRentalDateTimes, OffRentDateTime));
                rentalDateTimes.update();
            }
    
            ttsCommit;
    
            RORRentalLineEditorForm::createSupplementaryItemsLines(salesQuotationLine);
    
            //Assign serial number
            if (salesQuotationLine && tmpObjectAvailability.InventSerialId)
            {
                ttsBegin;
                BOBObjectAssignmentEngine objectAssignmentEngine = BOBObjectAssignmentEngine::construct(salesQuotationLine, tmpObjectAvailability.InventSerialId);
                objectAssignmentEngine.runOperation();
                ttsCommit;
            }
        }
        catch
        {
            if (isCreatedNew)
            {
                salesQuotationTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    private void createTable()
    {
        SalesQuotationTableForm     salesQuotationTableForm;
    
        salesQuotationTableForm = SalesQuotationTableForm::construct(QuotationType::RORRental, null);
        salesQuotationTableForm.RORParmSelectionFromDateTime(DateTimeUtil::applyTimeZoneOffset(tmpObjectAvailability.ROROnRentDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        salesQuotationTableForm.RORParmSelectionToDateTime(DateTimeUtil::applyTimeZoneOffset(tmpObjectAvailability.RORExpectedOffRentDateTime, DateTimeUtil::getUserPreferredTimeZone()));
    
        if (salesQuotationTableForm.create())
        {
            salesQuotationTable = salesQuotationTableForm.salesQuotationTable();
            isCreatedNew        = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpObjectAvailability</Name>
				<Source><![CDATA[
    public BOBTmpObjectAvailability parmTmpObjectAvailability(BOBTmpObjectAvailability _tmpObjectAvailability = tmpObjectAvailability)
    {
        tmpObjectAvailability = _tmpObjectAvailability;
    
        return tmpObjectAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RORRentalCreateQuotationFromObjectAvail construct()
    {
        return new RORRentalCreateQuotationFromObjectAvail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Args                                    rentalQuotationCreateArgs;
        SalesQuotationTable                     quotationTable;
        RORRentalCreateQuotationFromObjectAvail rentalCreateQuotation;
    
        if (!_args || !_args.record() || _args.dataset() != tableNum(BOBTmpObjectAvailability))
        {
            throw error(strFmt("@SYS29104", classStr(RORRentalCreateQuotationFromObjectAvail)));
        }
    
        rentalCreateQuotation = RORRentalCreateQuotationFromObjectAvail::construct();
        rentalCreateQuotation.parmTmpObjectAvailability(_args.record());
        quotationTable = rentalCreateQuotation.create();
    
        if (!quotationTable)
        {
            return; // Quotation creation was canceled
        }
    
        rentalQuotationCreateArgs = new Args();
        rentalQuotationCreateArgs.lookupValue(quotationTable.QuotationId);
        //rentalQuotationCreateArgs.record(quotationTable);
        rentalQuotationCreateArgs.caller(_args.caller());
        rentalQuotationCreateArgs.parmObject(_args.caller());
        rentalQuotationCreateArgs.openMode(OpenMode::Edit);
    
        new MenuFunction(menuitemDisplayStr(SalesQuotationJumpRef), MenuItemType::Display).run(rentalQuotationCreateArgs);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>