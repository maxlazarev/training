<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransMgr_Rental</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransMgr_Rental extends BOBRentalTransManager
{
    SalesLine               salesLine;
    SalesTable              salesTable;
    RORRentalDateTimes      rentalDateTimes;
    INVInvoiceStartEndBasis invoiceStartEndBasis;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    protected BOBRentalTransActive active()
    {
        return (salesTable.SalesStatus == SalesStatus::Canceled ? BOBRentalTransActive::Closed : super());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDisabledSubStatus</Name>
				<Source><![CDATA[
    protected boolean allowDisabledSubStatus()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyFrom</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyFrom()
    {
        return (inventTrans.StatusIssue == StatusIssue::Deducted || inventTrans.StatusIssue == StatusIssue::Sold ?
                BOBDateTimeCertainty::Fixed :
                BOBDateTimeCertainty::Firm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyTo</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyTo(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        BOBDateTimeCertainty ret;
    
        switch(_newSubStatus)
        {
            case BOBRentalSubStatus::Ordered,
                 BOBRentalSubStatus::Confirmed,
                 BOBRentalSubStatus::Picked,
                 BOBRentalSubStatus::Prepared,
                 BOBRentalSubStatus::Outbound,
                 BOBRentalSubStatus::Delivered,
                 BOBRentalSubStatus::Built,
                 BOBRentalSubStatus::EventStarted,
                 BOBRentalSubStatus::EventEnded,
                 BOBRentalSubStatus::Strike,
                 BOBRentalSubStatus::Inbound:
                TransDate offRentDate = DateTimeUtil::date(rentalDateTimes.OffRentDateTime);
                ret = (offRentDate ? BOBDateTimeCertainty::Firm : BOBDateTimeCertainty::Tentative);
                break;
    
            case BOBRentalSubStatus::Returned,
                 BOBRentalSubStatus::ReturnInspected,
                 BOBRentalSubStatus::Invoiced:
                ret = BOBDateTimeCertainty::Fixed;
                break;
    
            default:
                throw error("@DNR6063");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        FromDateTime ret;
    
        if(invoiceStartEndBasis == INVInvoiceStartEndBasis::DeliveryReturn
        && subStatus >= BOBRentalSubStatus::Delivered
        && inventTrans.BOBPckSlpUpdDateTime)
        {
            ret = inventTrans.BOBPckSlpUpdDateTime;
        }
        else
        {
            ret = rentalDateTimes.OnRentDateTime;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer()
    {
        salesLine = buffer as SalesLine;
        salesTable = salesLine.salesTable();
        rentalDateTimes = (salesLine.RecId ?
                           salesLine.RORRentalDateTimesHost::rentalDateTimes() :
                           salesTable.RORRentalDateTimesHost::rentalDateTimes());
        invoiceStartEndBasis = (salesLine.RecId ?
                                FINRentalInvoiceProfile::find(salesLine.INVInvoiceProfileId).InvoiceStartEndBasis :
                                FINRentalInvoiceProfile::find(salesTable.INVInvoiceProfileId).InvoiceStartEndBasis);
    
        bufferLocationId = salesLine.inventDim().InventLocationId;
        bufferReturnLocationId = salesLine.RORReturnInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId inventLocationId()
    {
        return inventTrans.inventLocationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId rentalTypeId()
    {
        return (subStatus == BOBRentalSubStatus::Picked && inventTrans.inventSerialId() ?
                BOBObjectTable::findInventSerialId(inventTrans.inventSerialId()).RentalTypeId :
                salesLine.BOBRentalTypeId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        ToDateTime ret;
    
        if(invoiceStartEndBasis == INVInvoiceStartEndBasis::DeliveryReturn
        && _newSubStatus >= BOBRentalSubStatus::Returned
        && inventTrans.BOBReturnNoteUpdDateTime)
        {
            ret = inventTrans.BOBReturnNoteUpdDateTime;
        }
        else
        {
            TransDate offRentDate = DateTimeUtil::date(rentalDateTimes.OffRentDateTime);
            ret = (offRentDate ? rentalDateTimes.OffRentDateTime : rentalDateTimes.ExpectedOffRentDateTime);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    protected BOBRentalTransType transType()
    {
        return (salesLine.RORTradeType == RORTradeType::SalesPurch ?
                BOBRentalTransType::Sales :
                BOBRentalTransType::Rental);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    protected void updateBuffer(boolean _doUpdateBuffer)
    {
        if(salesLine.RecId)
        {
            if (salesLine.SalesStatus == SalesStatus::Canceled)
            {
                salesLine.BOBRentalSubStatus = BOBRentalSubStatus::None;
            }
            else
            {
                BOBRentalTrans rentalTrans;

                select firstonly SubStatus, RecId from rentalTrans
                order by SubStatus asc
                where rentalTrans.InventTransOrigin == inventTrans.InventTransOrigin
                &&    rentalTrans.TransType         != BOBRentalTransType::InventCounting;
    
                salesLine.selectForUpdate(true);
                salesLine.BOBRentalSubStatus = (rentalTrans.RecId ? rentalTrans.SubStatus : subStatus);
    
                if(_doUpdateBuffer)
                {
                    salesLine.doUpdate();
                }
            }
        }
        else // record is being inserted
        {
            salesLine.BOBRentalSubStatus = subStatus;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>