<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationUpdateClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationUpdate))]
public final class DNRSalesQuotationUpdateClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery(Query  _query)
    {
        Query               retQuery            = next initQuery(_query);
        QueryBuildRange     queryBuildRangeType = retQuery.dataSourceTable(tableNum(SalesQuotationTable)).findRange(fieldNum(SalesQuotationTable, QuotationType));

        queryBuildRangeType.status(RangeStatus::Open);

        this.queryRun().query(retQuery);

        return retQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertParmToQuotationType</Name>
				<Source><![CDATA[
    // RLAM - Method carries the replacable attribute so we don't have to call next
    protected QuotationType convertParmToQuotationType(str _parm)
    {
        const str Rental        = 'Rental';
        const str RentalProject = 'Rental project';

        QuotationType ret;

        switch (_parm)
        {
            case Rental:
                ret = QuotationType::RORRental;
                break;

            case RentalProject:
                ret = QuotationType::RORProjRental;
                break;

            default:
                ret = next convertParmToQuotationType(_parm);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBCloseRentalTrans</Name>
				<Source><![CDATA[
    // extension methods

    public void BOBCloseRentalTrans(SalesQuotationTable _salesQuotationTable)
    {
        SalesQuotationLine                  quotationLineLocal;
        InventTransOriginSalesQuotationLine origin;
        InventTrans                         inventTrans;
    
        while select inventTrans
            join TableId from origin
            where origin.InventTransOrigin == inventTrans.InventTransOrigin
                join  quotationLineLocal
                where quotationLineLocal.dataAreaId == origin.SalesQuotationLineDataAreaId
                &&    quotationLineLocal.InventTransId == origin.SalesQuotationLineInventTransId
                &&    quotationLineLocal.QuotationId == _salesQuotationTable.QuotationId
        {
            InventMovement movement = InventMovement::constructNoThrow(quotationLineLocal);
            BOBRentalTransManager::newInventMovement(movement, inventTrans).synchronize();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>