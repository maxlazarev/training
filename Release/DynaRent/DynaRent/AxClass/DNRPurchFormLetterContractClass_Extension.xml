<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchFormLetterContractClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchFormLetterContract))]
public final class DNRPurchFormLetterContractClass_Extension
{
    private VendInvoiceInfoTable pendingVendInvoiceInfoTable;
    private DocumentStatus DNRDocumentStatus;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        DNRDocumentStatus
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RORIsSubRentalPosting</Name>
				<Source><![CDATA[
    public boolean RORIsSubRentalPosting()
    {
        boolean ret;
        PurchTable purchTable = this.parmPurchTable();
        
        if (this.parmCallerMenuItem() == menuitemActionStr(INVPurchFormLetter_NewInvoiceAction))
        {
            ret = true;
        }
        else
        {
            if (!purchTable && pendingVendInvoiceInfoTable)
            {
                purchTable = pendingVendInvoiceInfoTable.purchTable();
            }
    
            if (purchTable && purchTable.PurchaseType == PurchaseType::RORSubRental)
            {
                ret = true;
            }
            else if (!purchTable && pendingVendInvoiceInfoTable && pendingVendInvoiceInfoTable.INVPurchaseType == PurchaseType::RORSubRental)
            {
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINparmPendingVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable FINparmPendingVendInvoiceInfoTable(VendInvoiceInfoTable _pendingVendInvoiceInfoTable = pendingVendInvoiceInfoTable)
    {
        pendingVendInvoiceInfoTable = _pendingVendInvoiceInfoTable;
        return pendingVendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDNRDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDNRDocumentStatus(DocumentStatus _DNRDocumentStatus = DNRDocumentStatus)
    {
        DNRDocumentStatus = _DNRDocumentStatus;
        return DNRDocumentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUnpack</Name>
				<Source><![CDATA[
       private boolean DNRUnpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        switch(version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPack</Name>
				<Source><![CDATA[
    private container DNRPack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_pack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(PurchFormLetterContract), methodStr(PurchFormLetterContract, pack))]
    public static void DNREvent_pack_post(XppPrePostArgs _eventArgs)
    {
        PurchFormLetterContract instance = _eventArgs.getThis() as PurchFormLetterContract;

        // also pack the extension
        SysPackExtensions::pack(_eventArgs, classStr(DNRPurchFormLetterContractClass_Extension), instance.DNRPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_unpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(PurchFormLetterContract), methodStr(PurchFormLetterContract, unpack))]
    public static void DNREvent_unpack_post(XppPrePostArgs _eventArgs)
    {
        PurchFormLetterContract instance = _eventArgs.getThis() as PurchFormLetterContract;

        container myState = SysPackExtensions::unpack(_eventArgs, classStr(DNRPurchFormLetterContractClass_Extension));

        //Also unpack the extension
        if (!instance.DNRUnpack(myState))
        {
            _eventArgs.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>