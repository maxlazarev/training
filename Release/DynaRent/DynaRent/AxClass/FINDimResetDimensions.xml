<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimResetDimensions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimResetDimensions extends RunBaseBatch
{
    DialogRunbase   dialog;
    TableName       tableName;
    DialogField     dfTableName;
    DialogField     dfForceUpdate;
    NoYesId         forceUpdate;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        tableName,
        forceUpdate
    #endmacro

    #define.dialogFieldNum(999)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormBuildStringControl ctrl;
        ;

        dialog = super();
        dialog.caption("@DNR10134");

        dfTableName = new DialogField(dialog, extendedTypeStr(tableName), #dialogFieldNum);
        dialog.addCtrlDialogField(dfTableName.name());
        dfTableName.init(dialog);

        dfForceUpdate = dialog.addFieldValue(extendedTypeStr(NoYesId), forceUpdate, "@DNR:Force", "@DNR:ForceUpdateHelpTxt");

        ctrl = dfTableName.control();
        ctrl.mandatory(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FormRun formRun = _dialog.dialogForm().formRun();

        super(_dialog);

        formRun.controlMethodOverload(true);
        FormRun.controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld999_1_lookup</Name>
				<Source><![CDATA[
    private void fld999_1_lookup()
    {
        TmpTableName            tmpData;
        FINDimAttributeSetup    attrSetup;
        SysTableLookup          lookup;
        Object                  ctrl;
        ;

        while select RefTableId from attrSetup
        group by RefTableId
        {
            tmpData.clear();
            tmpData.RefTableId = attrSetup.RefTableId;
            tmpData.TableName = tableId2name(attrSetup.RefTableId);
            tmpData.insert();
        }

        ctrl = dialog.formRun().controlCallingMethod();

        lookup = SysTableLookup::newParameters(tableNum(TmpTableName), ctrl);
        lookup.addLookupfield(fieldNum(TmpTableName, RefTableId));
        lookup.addLookupfield(fieldNum(TmpTableName, tableName), true);
        lookup.parmTmpBuffer(tmpData);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        tableName   = dfTableName.value();
        forceUpdate = dfForceUpdate.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (this.validate())
        {
            try
            {
                ttsbegin;

                this.processRecords();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch(Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
        else
        {
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        SysDictTable dictTable;
        boolean ret = true;
        TableId tableId;

        if (tableName)
        {
            tableId = tableName2id(tableName);

            if (tableId)
            {
                dictTable = new SysDictTable(tableId);

                if (dictTable.isView() || dictTable.isMap() || dictTable.tableType() != TableType::Regular)
                {
                    ret = checkFailed(strFmt("@SYS31187", tableName));
                }
                else if (!FINDimAttributeSetup::existTableId(tableId))
                {
                    ret = checkFailed(strFmt("@DNR1186", tableName));
                }
            }
            else
            {
                ret = checkFailed(strFmt("@SYS75357", tableName));
            }
        }
        else
        {
            ret = checkFailed(strFmt("@SYS50104", "@SYS28366"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@DNR10134";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FINDimResetDimensions resetter = new FINDimResetDimensions();

        if (resetter.prompt())
        {
            resetter.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecords</Name>
				<Source><![CDATA[
    private void processRecords()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryRun                queryRun;
        Common                  record;
        Counter                 cnt;
        TableId                 tableId;

        // local method >>>
        // code repeated from FINDimValueController class hierarchy, acceptCascadingUpdate methods
        boolean acceptUpdate()
        {
            switch(record.TableId)
            {
                case tableNum(SalesTable):
                    return (record.getFieldValue(fieldStr(SalesTable, SalesStatus)) != SalesStatus::Invoiced);

                case tableNum(SalesQuotationTable):
                    return (record.getFieldValue(fieldStr(SalesQuotationTable, QuotationStatus)) == SalesQuotationStatus::Created);

                case tableNum(PurchTable):
                    return (record.getFieldValue(fieldStr(PurchTable, PurchStatus)) != PurchStatus::Invoiced);

                case tableNum(SalesLine):
                    return (record.getFieldValue(fieldStr(SalesLine, SalesStatus)) != SalesStatus::Invoiced);

                case tableNum(SalesQuotationLine):
                    return (record.getFieldValue(fieldStr(SalesQuotationLine, QuotationStatus)) == SalesQuotationStatus::Created);

                case tableNum(PurchLine):
                    return (record.getFieldValue(fieldStr(PurchLine, PurchStatus)) != PurchStatus::Invoiced);

                default:
                    return true;
            }
        }
        // local method <<<
        ;

        tableId = tableName2Id(tableName);
        query = new Query();
        qbds = query.addDataSource(tableId);
        qbds.update(true);
        queryRun = new QueryRun(query);

        while(queryRun.next())
        {
            record = queryRun.get(tableId);

            if (acceptUpdate())
            {
                if(forceUpdate)
                {
                    FINDimValueController::eventUpdateForced(record);
                }
                else
                {
                    FINDimValueController::eventDelete(record);
                    FINDimValueController::eventInsert(record);
                }
                cnt ++;
            }
        }

        info(strFmt("@SYS74545", cnt, tableId2pname(tableId)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>