<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSalesTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RORSalesTableListPageInteraction
extends SysListPageInteractionBase
{
    SalesTableListPage              salesTableListPage;
    SalesTableInteractionHelper     salesTableInteractionHelper;
    RORParameters                   parameters;

    boolean     quotationJournalExists;
    boolean     confirmationJournalExists;
    boolean     pickingListJournalExists;
    boolean     packingSlipJournalExists;
    boolean     invoiceJournalExists;

    boolean     canAmendmentLostOrderBeUpdated;
    boolean     canAmendmentChangeDateBeUpdated;
    boolean     canAmendmentReturnBeUpdated;

    // DynaRent
    boolean     preparationJournalExists;
    boolean     outboundJournalExists;
    boolean     buildJournalExists;
    boolean     eventStartJournalExists;
    boolean     eventEndJournalExists;
    boolean     strikeJournalExists;
    boolean     inboundJournalExists;
    boolean     returnNoteJournalExists;
    boolean     inspectionJournalExists;

    boolean     canConfirmationBeUpdated;
    boolean     canPickingListBeUpdated;
    boolean     canPickingListBeRegistrated;
    boolean     canPackingSlipBeUpdated;
    boolean     canInvoiceBeUpdated;

    // DynaRent
    boolean     canPreparationBeUpdated;
    boolean     canOutboundBeUpdated;
    boolean     canBuildBeUpdated;
    boolean     canEventStartBeUpdated;
    boolean     canEventEndBeUpdated;
    boolean     canStrikeBeUpdated;
    boolean     canInboundBeUpdated;
    boolean     canReturnNoteBeUpdated;
    boolean     canInspectionBeUpdated;
    boolean     canBulkReturnNoteBeUpdated;

    boolean     useQualityManagement;

    PurchTable  purchTable;
    RecId       salesTableRecid;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentPurchTable</Name>
				<Source><![CDATA[
    private PurchTable currentPurchTable()
    {
        SalesTable  salesTable = this.currentSalesTable();
    
        if (salesTableRecid != salesTable.RecId)
        {
            purchTable = salesTable.referencePurchTable();
            salesTableRecid = salesTable.RecId;
        }
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSalesTable</Name>
				<Source><![CDATA[
    public SalesTable currentSalesTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(SalesTableListPage, SalesTable)) as SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableTemplateButton</Name>
				<Source><![CDATA[
    boolean enableTemplateButton()
    {
        return (this.currentSalesTable().RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListPageType</Name>
				<Source><![CDATA[
    private SalesTableListPage getListPageType()
    {
        return salesTableListPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCanBeUpdated</Name>
				<Source><![CDATA[
    private void initCanBeUpdated()
    {
        SalesTableCheckIfUpdateContract checkIfContract = SalesTableCheckIfUpdateContract::construct();
        SalesTableCanBeUpdatedContract  canBeUpdatedContract;
        container                       canBeUpdated;
        SalesTableType                  salesTableType = this.currentSalesTable().type();
        boolean                         isRentalDirectDelivery;
        BOBRentalType                   rentalType;
        SalesLine                       salesLine;
    
        if (this.currentSalesTable().InterCompanyDirectDelivery
        && this.currentSalesTable().SalesType == SalesType::RORRental
        && this.currentSalesTable().InterCompanyPurchId)
        {
            isRentalDirectDelivery = true;
        }
    
        if (!isRentalDirectDelivery)
        {
            select firstOnly RecId from rentalType
            where rentalType.Classification == BOBRentalTypeClassification::Bulk
                exists join salesLine
                where salesLine.BOBRentalTypeIdRequested == rentalType.RentalTypeId
                &&    salesLine.SalesId                  == this.currentSalesTable().SalesId;
        }
    
        // Check whether the amendment can be updated
        canAmendmentLostOrderBeUpdated  = salesTableInteractionHelper.RORparmEnableAmendmentLostOrder();
        canAmendmentChangeDateBeUpdated = salesTableInteractionHelper.RORparmEnableAmendmentDateChangeHeader();
        canAmendmentReturnBeUpdated     = salesTableInteractionHelper.RORparmEnableCreateReturnHeader();
    
        checkIfContract.parmCheckConfirmation(true);
        checkIfContract.parmCheckPickingList(true);
        checkIfContract.parmCheckPickingListRegistration(true);
        checkIfContract.parmCheckPackingSlip(true);
        checkIfContract.parmCheckInvoice(true);
        checkIfContract.RORparmCheckPreparation(true);
        checkIfContract.RORparmCheckOutbound(true);
        checkIfContract.RORparmCheckBuild(true);
        checkIfContract.RORparmCheckEventStart(true);
        checkIfContract.RORparmCheckEventEnd(true);
        checkIfContract.RORparmCheckStrike(true);
        checkIfContract.RORparmCheckInbound(true);
        checkIfContract.RORparmCheckReturnNote(true);
        checkIfContract.RORparmCheckInspection(true);
    
        this.currentSalesTable().DNRIgnoreCustCreditCheck = NoYes::Yes;
        canBeUpdated = this.currentSalesTable().checkIfUpdate(checkIfContract.pack());
        canBeUpdatedContract = SalesTableCanBeUpdatedContract::create(canBeUpdated);
    
        canConfirmationBeUpdated    = canBeUpdatedContract.parmCanConfirmationBeUpdated() && salesTableType.canConfirmationBeUpdated();
        canPickingListBeUpdated     = !isRentalDirectDelivery && canBeUpdatedContract.parmCanPickingListBeUpdated() && salesTableType.canPickingListBeUpdated();
        canPickingListBeRegistrated = !isRentalDirectDelivery && canBeUpdatedContract.parmCanPickingListBeRegistrated() || salesTableType.canPickingListBeRegistrated();
        canPackingSlipBeUpdated     = !isRentalDirectDelivery && canBeUpdatedContract.parmCanPackingSlipBeUpdated() && salesTableType.canPackingslipBeUpdated(DocumentStatus::PackingSlip);
        canInvoiceBeUpdated         = canBeUpdatedContract.parmCanInvoiceBeUpdated() && salesTableType.canInvoiceBeUpdated();
    
        // DynaRent
        canPreparationBeUpdated     = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanPreparationBeUpdated();
        canOutboundBeUpdated        = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanOutboundBeUpdated();
        canBuildBeUpdated           = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanBuildBeUpdated();
        canEventStartBeUpdated      = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanEventStartBeUpdated();
        canEventEndBeUpdated        = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanEventEndBeUpdated();
        canStrikeBeUpdated          = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanStrikeBeUpdated();
        canInboundBeUpdated         = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanInboundBeUpdated();
        canReturnNoteBeUpdated      = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanReturnNoteBeUpdated();
        canInspectionBeUpdated      = !isRentalDirectDelivery && canBeUpdatedContract.RORparmCanInspectionBeUpdated();
        canBulkReturnNoteBeUpdated  = canReturnNoteBeUpdated  && rentalType.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        ListPage listPage = this.listPage();
        ListPageArgs listPageArgs = listPage.listPageArgs();

        if(listPageArgs)
        {
            if(listPageArgs.externalRecord() &&
               listPageArgs.externalRecord().TableId == tableNum(ProjInvoiceTable))
            {
                var projInvoiceTable = this.listPage().listPageArgs().externalRecord() as ProjInvoiceTable;
                var qbds = _query.dataSourceTable(tableNum(SalesTable)).addDataSource(tableNum(ProjTable));
                qbds.relations(true);
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.addRange(fieldNum(ProjTable,ProjInvoiceProjId)).value(queryValue(projInvoiceTable.ProjInvoiceProjId));
            }
            else if(listPageArgs.menuItemName() == menuitemDisplayStr(RORSalesTableListPageProject))
            {
                QueryBuildDataSource salesTableDS = _query.dataSourceName(formDataSourceStr(RORSalesTable, SalesTable));
                str salesTableDSName = salesTableDS.name();
                salesTableDS.addRange(fieldNum(SalesTable, DataAreaId)).value(strFmt("((%1.%2 == %3) || (%1.%4 != %5))",
                                                                              salesTableDSName, fieldStr(SalesTable, WPPIsRentalProject), enum2int(NoYes::Yes),
                                                                              fieldStr(SalesTable, ProjId), SysQuery::valueEmptyString()));
            }
        }

        super(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the list page type and the modeledQueryName during the initialization of the list page
    /// </summary>
    public void initializing()
    {
        useQualityManagement = InventParameters::find().UseQualityManagement;
        parameters = RORParameters::find();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalExists</Name>
				<Source><![CDATA[
    private void initJournalExists()
    {
        container       lastJournals;
        QuotationId     quotationId;
        TransDate       quotationDate;
        ConfirmId       confirmId;
        TransDate       confirmDate;
        PickingListId   pickingListId;
        TransDate       pickingListDate;
        PackingSlipId   packingSlipId;
        TransDate       packingSlipDate;
        InvoiceId       invoiceId;
        TransDate       invoiceDate;
        // DynaRent
        CustConfirmDocNum   preparationId;
        CustConfirmDocNum   outboundId;
        CustConfirmDocNum   buildId;
        CustConfirmDocNum   eventStartId;
        CustConfirmDocNum   eventEndId;
        CustConfirmDocNum   strikeId;
        CustConfirmDocNum   inboundId;
        CustConfirmDocNum   returnNoteId;
        CustConfirmDocNum   inspectionId;
        TransDate           preparationDate;
        TransDate           outboundDate;
        TransDate           buildDate;
        TransDate           eventStartDate;
        TransDate           eventEndDate;
        TransDate           strikeDate;
        TransDate           inboundDate;
        TransDate           returnNoteDate;
        TransDate           inspectionDate;
    
        if (this.currentSalesTable().DocumentStatus || this.currentSalesTable().QuotationId)
        {
            lastJournals = this.currentSalesTable().lastJournals();
    
            [quotationId,   quotationDate]      = conPeek(lastJournals, SalesTableType::posQuotation());
            quotationJournalExists = quotationId ? true : false;
            [confirmId,     confirmDate]        = conPeek(lastJournals, SalesTableType::posConfirmation());
            confirmationJournalExists = confirmId ? true : false;
            [pickingListId, pickingListDate]    = conPeek(lastJournals, SalesTableType::posPickingList());
            pickingListJournalExists = pickingListId ? true : false;
            [packingSlipId, packingSlipDate]    = conPeek(lastJournals, SalesTableType::posPackingSlip());
            packingSlipJournalExists = packingSlipId ? true : false;
            [invoiceId,     invoiceDate]        = conPeek(lastJournals, SalesTableType::posInvoice());
            invoiceJournalExists        = invoiceId ? true : false;
    
            // DynaRent
            [preparationId, preparationDate]    = conPeek(lastJournals, SalesTableType::RORPosPreperation());
            preparationJournalExists = preparationId ? true : false;
            [outboundId, outboundDate]    = conPeek(lastJournals, SalesTableType::RORPosOutbound());
            outboundJournalExists = outboundId ? true : false;
            [buildId, buildDate]    = conPeek(lastJournals, SalesTableType::RORPosBuild());
            buildJournalExists = buildId ? true : false;
            [eventStartId, eventStartDate]    = conPeek(lastJournals, SalesTableType::RORPosEventStart());
            eventStartJournalExists = eventStartId ? true : false;
            [eventEndId, eventEndDate]    = conPeek(lastJournals, SalesTableType::RORPosEventEnd());
            eventEndJournalExists = eventEndId ? true : false;
            [strikeId, strikeDate]    = conPeek(lastJournals, SalesTableType::RORPosStrike());
            strikeJournalExists = strikeId ? true : false;
            [inboundId, inboundDate]    = conPeek(lastJournals, SalesTableType::RORPosInbound());
            inboundJournalExists = inboundId ? true : false;
            [returnNoteId, returnNoteDate]    = conPeek(lastJournals, SalesTableType::RORPosReturned());
            returnNoteJournalExists = returnNoteId ? true : false;
            [inspectionId, inspectionDate]    = conPeek(lastJournals, SalesTableType::RORPosReturnInspection());
            inspectionJournalExists = inspectionId ? true : false;
        }
        else
        {
            quotationJournalExists      = false;
            confirmationJournalExists   = false;
            pickingListJournalExists    = false;
            packingSlipJournalExists    = false;
            invoiceJournalExists        = false;
    
            // DynaRent
            preparationJournalExists    = false;
            outboundJournalExists       = false;
            buildJournalExists          = false;
            eventStartJournalExists     = false;
            eventEndJournalExists       = false;
            strikeJournalExists         = false;
            inboundJournalExists        = false;
            returnNoteJournalExists     = false;
            inspectionJournalExists     = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the selectionChanged and enables the action pane buttons
    /// </summary>
    public void selectionChanged()
    {
        salesTableInteractionHelper = SalesTableInteractionHelper::construct();
        salesTableInteractionHelper.initHeaderActions(this.currentSalesTable());
    
        this.initJournalExists();
        this.initCanBeUpdated();
        this.setCaption();
        //this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, mbTemplatesButton), this.enableTemplateButton());
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAmendment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the header level amendment menu items are enabled.
    /// </summary>
    private void setButtonAmendment()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTable, ROROrderAmendmentDialogType_LostOrder_Header), canAmendmentLostOrderBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTable, ROROrderAmendmentDialogType_ChangeDate_Header), canAmendmentChangeDateBeUpdated);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables menu items for bank document in manage action pane tab.
    /// </summary>
    protected void setButtonBankDocument()
    {
        this.listPage().actionPaneControlEnabled(
            formControlStr(RORSalesTableListPage, buttonCreateBankLCExport),
            salesTableInteractionHelper.parmButtonCreateBankLCExport());
        this.listPage().actionPaneControlEnabled(
            formControlStr(RORSalesTableListPage, bankLGRequestForm),
            salesTableInteractionHelper.parmButtonBankLGRequestForm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when you must disable or enable a button in the action pane. The
    /// method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    protected void setButtonEnabled()
    {
        this.setButtonSalesOrder();
        this.setButtonSell();
        this.setButtonPreRental();
        this.setButtonInvoice();
        this.setButtonPostRental();
        this.setButtonInterCompany();
        this.setButtonGeneral();
        this.setButtonBankDocument();
        this.setButtonAmendment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneral</Name>
				<Source><![CDATA[
    private void setButtonGeneral()
    {
        //relatedDocumentsGeneral
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, CostControlCommittedCost), this.currentSalesTable().ProjId ? true : false);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, PurchTableGeneral), salesTableInteractionHelper.RORparmPurchaseOrderExists());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SubRentalGeneral), salesTableInteractionHelper.RORparmSubRentalOrderExists());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonSalesAgreement), this.currentSalesTable().MatchingAgreement);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonReferences),
            salesTableInteractionHelper.parmReferencesEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, ContactPersonButton),
            salesTableInteractionHelper.parmContactPersonExists());
    
        // Work order
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, WPPWorkOrderTable), salesTableInteractionHelper.WPPparmWorkOrderLineExistsHeader());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonInterCompany</Name>
				<Source><![CDATA[
    private void setButtonInterCompany()
    {
        boolean     canInterCompanyPickingListBeUpdated;
        container   interCompanyCanBeUpdated;
        SalesTable  interCompanySalesOrder = this.currentPurchTable().interCompanySalesTable();
        SalesTableCheckIfUpdateContract checkIfUpdateContract;
        SalesTableCanBeUpdatedContract  canBeUpatedContract;
    
        if (interCompanySalesOrder)
        {
            checkIfUpdateContract = SalesTableCheckIfUpdateContract::construct();
            checkIfUpdateContract.parmCheckPickingList(true);
            interCompanyCanBeUpdated = interCompanySalesOrder.checkIfUpdate(checkIfUpdateContract.pack());
            canBeUpatedContract = SalesTableCanBeUpdatedContract::create(interCompanyCanBeUpdated);
    
            canInterCompanyPickingListBeUpdated = canBeUpatedContract.parmCanPickingListBeUpdated();
        }
    
        if (this.currentSalesTable().SalesType == SalesType::RORRental
        && (this.currentSalesTable().InterCompanyDirectDelivery || this.currentSalesTable().InterCompanyDirectDeliveryOrig))
        {
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanySalesTable), false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyOriginalSalesTable), false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, purchTable), false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyPurchTable), false);
    
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyRORSalesTable), this.currentPurchTable().InterCompanySalesId ? true : false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyOriginalRORSalesTable), this.currentSalesTable().InterCompanyOriginalSalesId ? true : false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORPurchTable), this.currentPurchTable().InterCompanySalesId ? true : false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyRORPurchTable), this.currentSalesTable().InterCompanyPurchId  ? true : false);
        }
        else
        {
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanySalesTable), this.currentPurchTable().InterCompanySalesId ? true : false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyOriginalSalesTable), this.currentSalesTable().InterCompanyOriginalSalesId ? true : false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, purchTable), this.currentPurchTable().InterCompanySalesId ? true : false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyPurchTable), this.currentSalesTable().InterCompanyPurchId  ? true : false);
    
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyRORSalesTable), false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyOriginalRORSalesTable), false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORPurchTable), false);
            this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyRORPurchTable), false);
        }
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, interCompanyPickinglist), canInterCompanyPickingListBeUpdated);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonInvoice</Name>
				<Source><![CDATA[
    protected void setButtonInvoice()
    {
        SalesTable      salesTable;
        ProjTable       projTable;
        ProjStatusType  projStatusType;
        boolean         canCreateInvoiceProposal;
        boolean         rentalProjectInvoicing;
    
        salesTable = this.currentSalesTable();
        rentalProjectInvoicing = salesTable.FINRentalProjectInvoicing();

        if (salesTable.ProjId)
        {
            projTable = salesTable.projTable();
            projStatusType = projTable.status();
            canCreateInvoiceProposal = ProjStatusTypeRule::exist(projTable.Status, projTable.Type, ProjStatusRule::CreateInvoiceProposal)
                                       && !rentalProjectInvoicing;
        }
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonJournalInvoice), (!salesTable.ProjId) && invoiceJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonPaymentSchedule), (!salesTable.returnItem() && (salesTable.PaymentSched ? true : false)));
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonUpdateInvoice), canInvoiceBeUpdated && !salesTable.ProjId);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORbuttonUpdateInvoiceProj), canInvoiceBeUpdated
            && rentalProjectInvoicing);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonProformaInvoice), canInvoiceBeUpdated && !salesTable.ProjId);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, ProjProposalSelection), salesTable.ProjId != '' && canCreateInvoiceProposal);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, ProjInvoiceProposalListPage), salesTable.ProjId != '' && projStatusType.ctrlProposal());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, ProjInvoiceJournal), salesTable.ProjId != '' && projStatusType.ctrlInvoices());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonPostRental</Name>
				<Source><![CDATA[
    private void setButtonPostRental()
    {
        //DynaRent
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusEvendEnd), canEventEndBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusStrike), canStrikeBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusInbound), canInboundBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusReturned), canReturnNoteBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusReturnInsp), canInspectionBeUpdated);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalEventEnd_action), eventEndJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalStrike_action), strikeJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalInbound_action), inboundJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalReturnNote_action), returnNoteJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalReturnInsp_action), inspectionJournalExists);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonPreRental</Name>
				<Source><![CDATA[
    private void setButtonPreRental()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonJournalPickingList), (!this.currentSalesTable().returnItem() && pickingListJournalExists));
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonJournalPackingSlip), packingSlipJournalExists);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonUpdatePickingList), canPickingListBeUpdated);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonUpdatePickingListRegistrate), canPickingListBeRegistrated);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonUpdatePackingSlip), canPackingSlipBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonProformaPackingSlip), canPackingSlipBeUpdated);
    
        //DynaRent
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusPreparation), canPreparationBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusOutbound), canOutboundBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusBuild), canBuildBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesFormLetter_RORSubStatusEventStart), canEventStartBeUpdated);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalPreparation_action), preparationJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalOutbound_action), outboundJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalBuild_action), buildJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, RORCustConfirmJournalEventStart_action), eventStartJournalExists);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables Sales order action pane tab menu items.
    /// </summary>
    protected void setButtonSalesOrder()
    {
        SalesTable  salesTable = this.currentSalesTable();
        SalesTableType  salesTableType = salesTable.type();
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesCopyAllHeader), !salesTableInteractionHelper.parmReturnItem());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesCopyJournalHeader), !salesTableInteractionHelper.parmReturnItem());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonCreatePurchOrder), (!salesTable.custTable_CustAccount().FINMayUseCreditCheckStatus() || FINCheckCreditLimit::checkCreditLimit_Sales(salesTable, true, false)) &&
                                                     salesTableType.RORhasLineToCreatePurchOrder() &&
                                                     salesTableType.canCreatePurchOrder());
    
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonCreateDropShipment), salesTableInteractionHelper.parmCanCreateDropShipment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonSell</Name>
				<Source><![CDATA[
    private void setButtonSell()
    {
        boolean allowDelete = this.currentSalesTable().checkDelete(true, true);//We cannot show any dialogs from the list page as is also renders on EP.
        FormDataSource salesTable_ds;
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, Generate), canConfirmationBeUpdated);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, buttonJournalConfirmation), confirmationJournalExists && !this.currentSalesTable().returnItem());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, QuotationConfirmationJournal), quotationJournalExists);
    
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, Maintain), allowDelete);
    
        salesTable_ds = FormDataUtil::getFormDataSource(this.currentSalesTable());
        if (salesTable_ds)
        {
            salesTable_ds.allowDelete(allowDelete);
        }
    
        // Calculate group controls
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, MultiLnDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, EndDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesTableListPage, SalesCreditNote), salesTableInteractionHelper.parmCanCreditNoteBeCreated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility property on the buttons in the action pane.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when they must hide a button in the action pane at runtime. This
    /// method is only called one time when the list page is opened.
    /// </remarks>
    protected void setButtonVisibility()
    {
        boolean enableLCFeature = BankLCExportFeatureChecker::construct().checkFeatureEnabled();
        boolean enableLGFeature = BankLGFeatureChecker::construct().checkFeatureEnabled();
    
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, buttonCreateBankLCExport), enableLCFeature);
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, bankLGRequestForm), enableLGFeature);
    
        switch (this.getListPageType())
        {
            case SalesTableListPage::ShippedNotInvoiced :
                //Invoice tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, RelatedDocumentsInvoice), false);
    
                //Sell tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, NewGroup), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, Maintain), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, Generate), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, CustInfo), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, Apply), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, CreditNote), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, QuotationConfirmationJournal), false);
                break;
    
            case SalesTableListPage::Open :
                // Sell tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, NewGroup), false);
                break;
    
            case SalesTableListPage::Journal :
                // Sell tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, NewGroup), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, Generate), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, Apply), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, RelatedDocuments), false);
    
                // Invoice tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, IssueInvoice), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, RelatedDocumentsInvoice), false);
    
                // Intercompany tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, Manage), false);
                break;
        }
    
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesTableListPage, ManageQuality), useQualityManagement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the caption on the list page.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when they must change the form caption at runtime. The method is
    /// only called one time when the list page is opened.
    /// </remarks>
    protected void setCaption()
    {
        //SalesTable  salesTable;
        //Name        name;
    
        //salesTable = this.currentSalesTable();
    
        //name = salesTable.isInterCompanyOrder() ? salesTable.DeliveryName : salesTable.SalesName;
    
        //this.listPage().caption(strfmt('%1 %2 %3 %4 %5', "@DNR10", salesTable.SalesId, ',', "@SYS7399", name));
    
        /*switch (this.getListPageType())
        {
            case SalesTableListPage::Main :
                //Don't change caption
                break;
    
            case SalesTableListPage::ShippedNotInvoiced:
                this.listPage().caption("@SYS117042");
                break;
    
            case SalesTableListPage::Open :
                this.listPage().caption("@SYS117040");
                break;
    
            case SalesTableListPage::Journal :
                this.listPage().caption("@SYS117041");
                break;
    
            case SalesTableListPage::CustomersOnHold :
                this.listPage().caption("@SYS120013");
                break;
    
            case SalesTableListPage::MyProject :
                this.listPage().caption("@SYS120772");
                break;
    
            case SalesTableListPage::Project :
                this.listPage().caption("@SYS120771");
                break;
    
    
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility property on the grid fields.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when they must hide a field in the grid at runtime. The method is
    /// only called one time when the list page is opened.
    /// </remarks>
    protected void setGridFieldVisibility()
    {
        switch (this.getListPageType())
        {
            case SalesTableListPage::ShippedNotInvoiced :
                this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, salesTable_SalesType), false);
                this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_SalesStatusGrid), false);
                break;
    
            case SalesTableListPage::Open :
                this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, salesTable_SalesType), false);
                this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_SalesStatusGrid), false);
                break;
    
            case SalesTableListPage::Journal :
                this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_SalesType), false);
                this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_SalesStatusGrid), false);
                break;
        }
    
        this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, qualityOrderStatusDisplayTable), useQualityManagement);
    
        //if (EP::isCustomer())
        {
            this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_CustAccountAdv), false);
            this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_SalesName), false);
            this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_InvoiceAccountAdv), false);
            this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, qualityOrderStatusDisplayTable), false);
            this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_createdDateTime), true);
            this.listPage().listPageFieldVisible(formControlStr(RORSalesTableListPage, SalesTable_WorkerSalesTaker), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the context in which the list page is opened.
    /// </summary>
    /// <param name="_listPageArgs">
    /// A <c>ListPageArgs</c> object.
    /// </param>
    /// <remarks>
    /// This method can be overridden when the list page is used as a secondary list page to store the list
    /// page type a class variable.
    /// </remarks>
    protected void setListPageType(ListPageArgs _listPageArgs)
    {
        if (_listPageArgs && _listPageArgs.enumTypeParameter() == enumNum(SalesTableListPage))
        {
            salesTableListPage = _listPageArgs.enumParameter();
        }
        else
        {
            salesTableListPage = SalesTableListPage::Main;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>