<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLineType_RORProjRental</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationTypeFactoryAttribute(QuotationType::RORProjRental)]
class SalesQuotationLineType_RORProjRental extends SalesQuotationLineType_Proj
{
    boolean checkRORKitRequiredLevel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    public void initFromSalesQuotationLine(SalesQuotationLine _salesQuotationLine, boolean _copyPrecisely, boolean _copyPriceDisc, boolean _copyQty, Qty _qty, PdsCWInventQty _cwQty = 0)
    {
        super(_salesQuotationLine, _copyPrecisely, _copyPriceDisc, _copyQty, _qty, _cwQty);

        this.RORInitFromSalesQuotationLine(salesQuotationLine, _salesQuotationLine);
        this.BOBInitFromSalesQuotationLine(salesQuotationLine, _salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventBeQuotationControlled</Name>
				<Source><![CDATA[
    public boolean mustInventBeQuotationControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDeleteChildren</Name>
				<Source><![CDATA[
    [SysObsolete("Method RORDeleteChildren has been moved to /Classes/DNRSalesQuotationLineType_RORProjRentalStrategy", false)]
    public boolean RORDeleteChildren()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean  validateDelete(boolean _validateOnly = false)
    {
        boolean ret = super(_validateOnly);
        ;
    
        if (ret
        &&  checkRORKitRequiredLevel
        &&  salesQuotationLine.RORSuppItemTableRecid
        &&  salesQuotationLine.RORParentLineRecId
        &&  SalesQuotationLine::findRecId(salesQuotationLine.RORParentLineRecId)
        &&  SuppItemTable::RORfindRecId(salesQuotationLine.RORSuppItemTableRecid).RORKitRequiredLevel == RORKitRequiredLevel::Mandatory)
        {
            if (_validateOnly)
            {
                ret = false;
            }
            else
            {
                ret = checkFailed(strFmt("@DNR8188", salesQuotationLine.LineNum, salesQuotationLine.ItemId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationLineType construct(SalesQuotationLine salesQuotationLine)
    {
        return new SalesQuotationLineType_RORProjRental(salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBInitFromSalesQuotationLine</Name>
				<Source><![CDATA[
    private void BOBInitFromSalesQuotationLine(SalesQuotationLine _salesQuotationLineTo, SalesQuotationLine _salesQuotationLineFrom)
    {
        _salesQuotationLineTo.BOBRentalTypeIdRequested  = _salesQuotationLineFrom.BOBRentalTypeIdRequested;
        _salesQuotationLineTo.BOBRentalTypeIdAssigned   = _salesQuotationLineFrom.BOBRentalTypeIdAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromSalesQuotationLine</Name>
				<Source><![CDATA[
    private void RORInitFromSalesQuotationLine(SalesQuotationLine _salesQuotationLineTo, SalesQuotationLine _salesQuotationLineFrom)
    {
        if (_salesQuotationLineTo.QuotationType == QuotationType::RORProjRental)
        {
            _salesQuotationLineTo.RORProjTransType          = _salesQuotationLineFrom.RORProjTransType;
            _salesQuotationLineTo.BOBRentalTypeIdRequested  = _salesQuotationLineFrom.BOBRentalTypeIdRequested;
            _salesQuotationLineTo.BOBRentalTypeIdAssigned   = _salesQuotationLineFrom.BOBRentalTypeIdAssigned;
            _salesQuotationLineTo.WPPWorkOrderTemplateId    = _salesQuotationLineFrom.WPPWorkOrderTemplateId;
        }
    
        _salesQuotationLineTo.RORRentalLine::initFromLineBuffer(_salesQuotationLineFrom);
    
        if (_salesQuotationLineTo.QuotationType == QuotationType::RORProjRental)
        {
            _salesQuotationLineTo.BOBSellFixedAsset         = _salesQuotationLineFrom.BOBSellFixedAsset;
            _salesQuotationLineTo.RORKitComponentType       = _salesQuotationLineFrom.RORKitComponentType;
            _salesQuotationLineTo.RORRentalGrossAmount      = _salesQuotationLineFrom.RORRentalGrossAmount;
            _salesQuotationLineTo.RORLineType               = _salesQuotationLineFrom.RORLineType;
            _salesQuotationLineTo.RORReturnInventLocationId = _salesQuotationLineFrom.RORReturnInventLocationId;
            _salesQuotationLineTo.RORVenueCode              = _salesQuotationLineFrom.RORVenueCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckRORKitRequiredLevel</Name>
				<Source><![CDATA[
    public boolean parmCheckRORKitRequiredLevel(boolean _checkRORKitRequiredLevel = checkRORKitRequiredLevel)
    {
        checkRORKitRequiredLevel = _checkRORKitRequiredLevel;
        return checkRORKitRequiredLevel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>