<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchFormletterParmDataClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchFormletterParmData))]
public final class DNRPurchFormletterParmDataClass_Extension
{
    private DNRPurchFormletterParmDataStrategy strategy;
    private PurchLine localPurchLine;
    private static FormLetterContract formLetterContractParm;
    private DocumentStatus DNRDocumentStatus;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newReSelect</Name>
				<Source><![CDATA[
    static PurchFormletterParmData newReSelect(container _purchFormletterContractPacked, PurchParmTable _parmTable, boolean _forceUpdate)
    {
        formLetterContractParm = PurchFormLetterContract::newFromPackedVersion(_purchFormletterContractPacked);
        PurchFormletterParmData ret = next newReSelect(_purchFormletterContractPacked, _parmTable, _forceUpdate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReArrange</Name>
				<Source><![CDATA[
    static PurchFormletterParmData newReArrange(container _purchFormletterContractPacked, boolean _isExecutingInBatch)
    {
        formLetterContractParm = PurchFormLetterContract::newFromPackedVersion(_purchFormletterContractPacked);
        PurchFormletterParmData ret = next newReArrange(_purchFormletterContractPacked, _isExecutingInBatch);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newData</Name>
				<Source><![CDATA[
    static FormletterParmData newData(DocumentStatus _documentStatus, VersioningUpdateType _updateType)
    {
        FormletterParmData ret = next newData(_documentStatus, _updateType);

        if (formLetterContractParm)
        {
            ret.INVParmFormLetterContract(formLetterContractParm);

            RORFormLetterSubStatusController formLetterSubStatusController = PurchFormLetter::formLetterSubStatusController;
            ret.INVParmFormLetterContract().RORparmRentalSubStatus(formLetterSubStatusController ?
                                                                   formLetterSubStatusController.parmRentalSubStatus() :
                                                                   FormLetterServiceController::RORdocumentStatus2RentalSubStatus(_documentStatus));

            // immediately reset the value of the static class variable after it has been used
            formLetterContractParm = null;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    protected static PurchFormletterParmData newFromContract(PurchFormLetterContract _purchFormLetterContract)
    {
        formLetterContractParm = _purchFormLetterContract;
        PurchFormletterParmData ret = next newFromContract(_purchFormLetterContract);

        ret.parmDNRDocumentStatus(_purchFormLetterContract.parmDNRDocumentStatus());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common _purchLine, TradeLineRefId _tableRef)
    {
        localPurchLine = _purchLine as PurchLine;  // We need this parameter in the Chain-of-Command wrapper of 'setInterCompanyInventDim()'.

        boolean ret = next createParmLine(_purchLine, _tableRef);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    [SysObsolete("Implementation moved to another model.", false)]
    protected Common createParmUpdate()
    {
        PurchParmUpdate ret = next createParmUpdate();

        FormLetterContract formLetterContract = this.INVParmFormLetterContract();
            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSumBy</Name>
				<Source><![CDATA[
    protected AccountOrder defaultSumBy()
    {
        AccountOrder ret = next defaultSumBy();

        if (purchTable.PurchaseType == PurchaseType::RORSubRental
        && !(this is PurchFormletterParmDataInvoice))
        {
            ret = AccountOrder::None;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        FormLetterContract  formLetterContractLocal = this.INVParmFormLetterContract();

        switch (this.parmDocumentStatus())
        {
            case DocumentStatus::RORSubStatus:
                purchQuantity.RORparmRentalSubStatus(formLetterContractLocal ? formLetterContractLocal.RORparmRentalSubStatus() : this.BOBParmRentalSubStatus());
                break;

            case DocumentStatus::RORReturnNote:
                purchQuantity.RORparmRentalSubStatus(BOBRentalSubStatus::Returned);
                break;

            default:
                if (formLetterContractLocal)
                {
                    formLetterContractLocal.RORparmRentalSubStatus(FormLetterServiceController::RORdocumentStatus2RentalSubStatus(this.documentStatus));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParmTable</Name>
				<Source><![CDATA[
    protected VendDocumentTableMap initializeParmTable(
        VendDocumentTableMap  _parmTable,
        PurchLine             _purchLine,
        PurchTable            _purchTable,
        TradeLineRefId        _tableRefId,
        boolean               _hold,
        boolean               _notApproved,
        Num                   _purchSummaryFormLetterId,
        VendPostingProfile    _postingProfile,
        InventProfileType_RU  _inventProfileType
       )
    {       

        VendDocumentTableMap ret = next initializeParmTable(_parmTable, _purchLine, _purchTable, _tableRefId, _hold,
                                                            _notApproved, _purchSummaryFormLetterId, _postingProfile, _inventProfileType);
        
        this.BOBSetSubStatus(ret, _purchTable);
        this.BOBSetTransDateTime(ret, _purchTable);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyInventDim</Name>
				<Source><![CDATA[
    protected void setInterCompanyInventDim(VendDocumentLineMap _parmLine, SalesParmLine _salesParmLine)
    {
        InventDimId inventDimIdLocal;
        boolean     isBulkRentalItem;
        
        // The class variable 'localPurchLine' is initialized in the Chain of Command wrapper for the method 'createParmLine()'.
        // I have checked the cross-references and the class variable should always be initialized if this code is reached.
        // However, it is checked if the class variable is initialized in order to prevent null pointer exceptions.
        if (localPurchLine)
        {
            isBulkRentalItem = localPurchLine.inventTable().BOBIsBulkRentalItem();
        }

        if (isBulkRentalItem)
        {
            _parmLine.Closed = NoYes::No;
            inventDimIdLocal = _parmLine.InventDimId;
        }

        next setInterCompanyInventDim(_parmLine, _salesParmLine);

        if (isBulkRentalItem)
        {
            _parmLine.InventDimId = inventDimIdLocal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetInvoiceDateTime</Name>
				<Source><![CDATA[
    // extension methods

    public void INVSetInvoiceDateTime(VendDocumentLineMap _parmLine, PurchLine _purchLine = null)
    {
        this.parmPurchFormletterParmDataStrategy().INVSetInvoiceDateTime(_parmLine, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVGetTransDateTime</Name>
				<Source><![CDATA[
    public void INVGetTransDateTime(VendDocumentTableMap _dummyPurchParmTable, PurchTable _purchTable)
    {
        this.BOBSetTransDateTime(_dummyPurchParmTable, _purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBSetTransDateTime</Name>
				<Source><![CDATA[
    public void BOBSetTransDateTime(VendDocumentTableMap _parmTable, PurchTable _purchTable)
    {
        this.parmPurchFormletterParmDataStrategy().BOBSetTransDateTime(_parmTable, _purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBSetSubStatus</Name>
				<Source><![CDATA[
    public void BOBSetSubStatus(VendDocumentTableMap _parmTable, PurchTable _purchTable)
    {
        this.parmPurchFormletterParmDataStrategy().BOBSetSubStatus(_parmTable, _purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORcheckCreateParmLine</Name>
				<Source><![CDATA[
    public boolean RORcheckCreateParmLine(PurchLine  _purchLine)
    {
        return this.parmPurchFormletterParmDataStrategy().RORcheckCreateParmLine(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchFormletterParmDataStrategy</Name>
				<Source><![CDATA[
    private DNRPurchFormletterParmDataStrategy parmPurchFormletterParmDataStrategy()
    {
        if(!strategy)
        {
            strategy = DNRPurchFormletterParmDataStrategy::construct(this);
        }
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDNRDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDNRDocumentStatus(DocumentStatus _DNRDocumentStatus = DNRDocumentStatus)
    {
        DNRDocumentStatus = _DNRDocumentStatus;
        return DNRDocumentStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>