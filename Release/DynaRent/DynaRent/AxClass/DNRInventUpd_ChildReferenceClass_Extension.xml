<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventUpd_ChildReferenceClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpd_ChildReference))]
public final class DNRInventUpd_ChildReferenceClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateLessIssue</Name>
				<Source><![CDATA[
    protected void updateLessIssue()
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            next updateLessIssue();

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLessReceipt</Name>
				<Source><![CDATA[
    protected void updateLessReceipt()
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            next updateLessReceipt();

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoreIssue</Name>
				<Source><![CDATA[
    protected void updateMoreIssue()
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            next updateMoreIssue();

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoreReceipt</Name>
				<Source><![CDATA[
    protected void updateMoreReceipt()
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            BOBInventSplitReason splitReason;
            BOBRentalSubStatus rentalSubStatus;

            if (movement is InventMov_Prod_JournalProd)
            {
                InventMov_Prod_JournalProd inventMov_Prod_JournalProd = movement;
                ProdJournalProd prodJournalProd = inventMov_Prod_JournalProd.childBuffer();
                // When a product is reported as finished it should receive status Delivered.
                if (prodJournalProd.InventTransChildType == InventTransChildType::ProdJournalProd)
                {
                    splitReason = BOBInventSplitReason::ProgressStatus; 
                    rentalSubStatus = BOBRentalSubStatus::Delivered;
                }
            }

            using(DNRInventTransUpdateSplitDisposableContext inventTransUpdateSplitContext =
                    new DNRInventTransUpdateSplitDisposableContext(splitReason, rentalSubStatus))
            {
                next updateMoreReceipt();
            }

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>