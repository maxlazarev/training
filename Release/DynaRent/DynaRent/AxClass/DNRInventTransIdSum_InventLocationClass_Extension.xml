<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventTransIdSum_InventLocationClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventTransIdSum_InventLocation))]
public final class DNRInventTransIdSum_InventLocationClass_Extension
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSumImplementation</Name>
				<Source><![CDATA[
    //*************************** COC Wrappers*******************************
    protected void calcSumImplementation()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventDim       inventDimTest;
        InventLocation  inventLocation;

        if (filterDimensions)
        {
            while select sum(PdsCWQty), sum(Qty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where   inventTrans.InventTransOrigin     == transOriginId
                    && (inventTrans.TransChildType        == childType    || !perChildType)
                    && (inventTrans.TransChildRefId       == childRefId   || !perChildType)
                    &&  inventTrans.BOBIsCompensatingTrans == NoYes::No     // Repeated code except this condition as we dont want to factor in Compensating transactions
                join TableId from inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                join TableId from inventLocation
                    where inventLocation.InventLocationId   == inventDim.InventLocationId   &&
                          inventLocation.InventLocationType == inventLocationType
                #InventDimExistsJoin(inventTrans.inventDimId, inventDimTest, inventDimCriteria, inventDimParmCriteria)
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
        else
        {
            while select sum(PdsCWQty), sum(Qty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where   inventTrans.InventTransOrigin     == transOriginId
                    && (inventTrans.TransChildType        == childType    || !perChildType)
                    && (inventTrans.TransChildRefId       == childRefId   || !perChildType)
                    &&  inventTrans.BOBIsCompensatingTrans == NoYes::No  // Repeated code except this condition as we dont want to factor in Compensating transactions
                join TableId from inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                join TableId from inventLocation
                    where inventLocation.InventLocationId   == inventDim.InventLocationId   &&
                          inventLocation.InventLocationType == inventLocationType
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>