<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPTransportNoteDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportParameterAttribute(classStr(WPPTransportRouteListContract)),
    SRSReportQueryAttribute(queryStr(WPPTransportNote))
]
class WPPTransportNoteDP extends SRSReportDataProviderBase
{
    WPPTmpTransportNote         tmpTransportNote;
    List                        workOrderLineRecIdList;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpTransportNote</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(WPPTmpTransportNote))]
    public WPPTmpTransportNote getTmpTransportNote()
    {
        select tmpTransportNote;
    
        return tmpTransportNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    private void populateTmpTable()
    {
        Query                       query;
        QueryBuildDataSource        qbdsWorkOrderLineResource;
        QueryBuildRange             qbrWorkOrderLineRecId;
        QueryRun                    queryRun;
        LogisticsPostalAddress      postalAddress;
        WPPWorkOrderTable           workOrderTable;
        WPPWorkOrderLine            workOrderLine;
        CustTable                   custTable;
        HcmWorker                   worker;
        WPPWorkOrderLineResource    workOrderLineResource;
        SalesLine                   salesLine;
        SalesTable                  salesTable;
        DirPerson                   person;
        BOBObjectTable              objectTable;
        DNRAdditionalNoteTable      additionalNoteTable;
        WPPParameters               parameters;
        ListEnumerator              enumerator;
    
        parameters = WPPParameters::find();
        enumerator = workOrderLineRecIdList.getEnumerator();
    
        query = new Query(queryStr(WPPTransportNote));
        qbdsWorkOrderLineResource = query.dataSourceTable(tableNum(WPPWorkOrderLineResource));
    
        qbdsWorkOrderLineResource.addOrderByField(fieldNum(WPPWorkOrderLineResource, ResourceId), SortOrder::Ascending);
        qbdsWorkOrderLineResource.addOrderByField(fieldNum(WPPWorkOrderLineResource, PlannedDate), SortOrder::Ascending);
        qbdsWorkOrderLineResource.addOrderByField(fieldNum(WPPWorkOrderLineResource, LineNum), SortOrder::Ascending);
    
        while (enumerator.moveNext())
        {
            qbrWorkOrderLineRecId = qbdsWorkOrderLineResource.addRange(fieldNum(WPPWorkOrderLineResource, RecId));
            qbrWorkOrderLineRecId.value(SysQuery::value(enumerator.current()));
        }
    
        queryRun = new QueryRun(query);
    
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(WPPWorkOrderLine)))
            {
                workOrderLine = queryRun.get(tablenum(WPPWorkOrderLine));
    
                if (workOrderLine.TaskId != parameters.InternalDeliveryTaskId && workOrderLine.TaskId != parameters.InternalLoadTaskId)
                {
                    postalAddress         = queryRun.get(tablenum(LogisticsPostalAddress));
                    workOrderTable        = queryRun.get(tablenum(WPPWorkOrderTable));
                    custTable             = queryRun.get(tablenum(CustTable));
                    worker                = queryRun.get(tablenum(HcmWorker));
                    workOrderLineResource = queryRun.get(tablenum(WPPWorkOrderLineResource));
                    salesLine             = queryRun.get(tablenum(SalesLine));
                    salesTable            = queryRun.get(tableNum(salesTable));
                    person                = queryRun.get(tablenum(DirPerson));
                    objectTable           = queryRun.get(tableNum(BOBObjectTable));
    
                    tmpTransportNote.ResourceId             = workOrderLineResource.ResourceId;
                    tmpTransportNote.ExecutionGroupId       = workOrderLine.ExecutionGroupId;
                    tmpTransportNote.ProjId                 = workOrderLine.ProjId;
                    tmpTransportNote.RequestedStartDateTime = workOrderLine.RequestedStartDateTime;
                    tmpTransportNote.Status                 = workOrderLine.Status;
                    tmpTransportNote.WorkOrderLineRecId     = workOrderLine.RecId;
                    tmpTransportNote.Name                   = workOrderTable.Name;
                    tmpTransportNote.ProjGroupId            = workOrderTable.ProjGroupId;
                    tmpTransportNote.WorkOrderId            = workOrderTable.WorkOrderId;
                    tmpTransportNote.CustAccount            = custTable.AccountNum;
                    tmpTransportNote.CustName               = custTable.name();
                    tmpTransportNote.City                   = postalAddress.City;
                    tmpTransportNote.Street                 = postalAddress.Street;
                    tmpTransportNote.ZipCode                = postalAddress.ZipCode;
                    tmpTransportNote.PersonnelNumber        = worker.PersonnelNumber;
                    tmpTransportNote.PersonnelName          = person.Name;
                    tmpTransportNote.SalesId                = salesLine.SalesId;
    
                    tmpTransportNote.AssetId                = objectTable.assetId();
                    tmpTransportNote.InventSerialId         = objectTable.inventSerialId;
                    tmpTransportNote.ItemId                 = salesLine.ItemId;
                    tmpTransportNote.RentalTypeIdAssigned   = salesLine.BOBRentalTypeIdAssigned;
                    tmpTransportNote.RentalTypeIdRequested  = salesLine.BOBRentalTypeIdRequested;
                    tmpTransportNote.PlannedFromDateTime    = workOrderLineResource.PlannedFromDateTime;
                    tmpTransportNote.SalesReponsible        = HcmWorker::find(salesTable.WorkerSalesResponsible).name();
    
                    additionalNoteTable                     = DNRAdditionalNoteTable::find(tableNum(SalesTable), salesTable.RecId);
                    tmpTransportNote.LocationNote           = additionalNoteTable.LocationNote;
                    tmpTransportNote.RouteNote              = additionalNoteTable.RouteNote;
    
                    additionalNoteTable                     = DNRAdditionalNoteTable::find(tableNum(SalesLine), salesLine.RecId);
                    tmpTransportNote.TerminationNote        = additionalNoteTable.TerminationNote;
                    tmpTransportNote.ObjectNote             = additionalNoteTable.ObjectNote;
    
                    tmpTransportNote.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        WPPTransportRouteListContract   contract;
    
        contract = this.parmDataContract() as WPPTransportRouteListContract;
        workOrderLineRecIdList = contract.parmWorkOrderLineRecIdList();
    
        this.populateTmpTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>