<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LBAUpdateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LBAUpdateContract extends RunBase
{
    LBAContractTable    contractTable;
    LBAContractStatus   contractStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
        ;
    
        dialog = super();
        dialog.caption("@DNR5709");
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractStatus</Name>
				<Source><![CDATA[
    public LBAContractStatus parmContractStatus(LBAContractStatus _contractStatus = _contractStatus)
    {
        if (!prmisDefault(_contractStatus))
        {
            contractStatus = _contractStatus;
        }
    
        return contractStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractTable</Name>
				<Source><![CDATA[
    public LBAContractTable parmContractTable(LBAContractTable _contractTable = contractTable)
    {
        if (!prmisDefault(_contractTable))
        {
            contractTable = _contractTable;
        }
    
        return contractTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ;
    
        if (this.validate())
        {
            try
            {
                ttsBegin;
    
                // Start contract
                if (contractStatus == LBAContractStatus::Created)
                {
                    if (contractTable.ContractStatus == LBAContractStatus::TermsImported)
                    {
                        ttsBegin;
                        contractTable.validateTermAmounts();
                        ttsCommit;
                    }
                }
                // Stop contract
                else
                {
                    if (contractTable.ContractStatus == LBAContractStatus::Running && contractTable.Stopped == NoYes::No)
                    {
                        ttsBegin;
                        contractTable.Stopped = NoYes::Yes;
                        contractTable.update();
                        ttsCommit;
                    }
                }
    
                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
        else
        {
            throw error("@SYS93289");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean         ret = true;
    
        if (contractStatus != LBAContractStatus::Created
        &&  contractStatus != LBAContractStatus::Ended)
        {
            ret = checkFailed(strFmt("@SYS22828", funcName()));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LBAContractTable       callerContractTable;
        LBAUpdateContract      updateContract;
        ;
    
        updateContract = new LBAUpdateContract();
    
        if (_args && _args.dataset() == tableNum(LBAContractTable))
        {
            callerContractTable = _args.record();
            updateContract.parmContractTable(callerContractTable);
        }
    
        if (_args.parmEnumType() == enumNum(LBAContractStatus))
        {
            updateContract.parmContractStatus(_args.parmEnum());
        }
    
        if (callerContractTable && Box::okCancel(updateContract.parmContractStatus() == LBAContractStatus::Created ? "@DNR6899" : "@DNR6875",DialogButton::Cancel) == DialogButton::Ok)//createTrans.prompt())
        {
            updateContract.runOperation();
    
            if (FormDataUtil::isFormDataSource(callerContractTable))
            {
                FormDataUtil::getFormDataSource(callerContractTable).research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>