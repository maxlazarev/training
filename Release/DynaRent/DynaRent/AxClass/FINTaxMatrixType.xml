<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINTaxMatrixType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FINTaxMatrixType
{
    /*
    Abstract class for searching in the TAX (VAT) Matrix.
    Define a sub class for every table this class is called with.
    */

    //These variables are initialized in the 'init' method of every sub class
    FINTaxMatrixModule      taxMatrixModule;
    TaxItemGroup            taxItemGroup;
    FINFiscalUnitNumberId   fiscalUnitNumber;
    TaxGroup                taxGroup;

    AddressCountryRegionId  invoiceCountry;
    AddressCountryRegionId  startCountry;
    AddressCountryRegionId  endCountry;

    MarkupTrans             markupTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public FINTaxMatrix find()
    {
        FINTaxMatrix                taxMatrix;
    
        if (invoiceCountry
        &&  (endCountry || taxMatrixModule == FINTaxMatrixModule::Project))
        {
            if (this.parmMarkupTrans().TaxItemGroup)
            {
                taxItemGroup = markupTrans.TaxItemGroup;
            }
    
            select firstonly taxMatrix
            order by InvoiceCountry     desc,
                     OriginCountry      desc,
                     DestinationCountry desc
            where taxMatrix.Module             == taxMatrixModule
            &&    taxMatrix.TaxItemGroup       == taxItemGroup
            &&    taxMatrix.FiscalUnitId       == fiscalUnitNumber
            &&    taxMatrix.TaxGroupCustVend   == taxGroup
            &&    taxMatrix.CompanyHomeCountry == SysCountryRegionCode::getCountryRegionIdByIsoCode(SysCountryRegionCode::countryInfo())
    
            && ((taxMatrix.InvoiceCountry == invoiceCountry) ||
                (!taxMatrix.InvoiceCountry && taxMatrix.InvoiceCountryType == FINTaxMatrix::countryType(invoiceCountry)))
    
            && ((startCountry &&  taxMatrix.OriginCountry == startCountry) ||
                (startCountry && !taxMatrix.OriginCountry && taxMatrix.OriginCountryType == FINTaxMatrix::countryType(startCountry)) ||
                (taxMatrixModule == FINTaxMatrixModule::Project && !taxMatrix.OriginCountry))
    
            && ((taxMatrix.DestinationCountry == endCountry) ||
                (!taxMatrix.DestinationCountry && taxMatrix.DestinationCountryType == FINTaxMatrix::countryType(endCountry)));
        }
    
        return taxMatrix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    abstract void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupTrans</Name>
				<Source><![CDATA[
    public MarkupTrans parmMarkupTrans(MarkupTrans _markupTrans = markupTrans)
    {
        markupTrans = _markuptrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarning</Name>
				<Source><![CDATA[
    public void showWarning()
    {
        InfologText     infoLogText;
        TaxParameters   taxParameters = TaxParameters::find();
    
        #File
    
        if (taxParameters.FINCheckTaxMatrix == FINCheckTaxMatrix::NoMessage)
        {
            return;
        }
    
        infoLogText  = "@DNR6444" + #delimiterEnter;
        infoLogText += "@DNR6445" + #delimiterEnter;
        infoLogText += "@DNR6446" + #delimiterEnter;
        infoLogText += strFmt("%1: %2%3", fieldPName(FINTaxMatrix, Module)            , taxMatrixModule                    , #delimiterEnter);
        infoLogText += strFmt("%1: %2%3", fieldPName(FINTaxMatrix, TaxItemGroup)      , taxItemGroup                       , #delimiterEnter);
        infoLogText += strFmt("%1: %2%3", fieldPName(FINTaxMatrix, FiscalUnitId)      , fiscalUnitNumber                   , #delimiterEnter);
        infoLogText += strFmt("%1: %2%3", fieldPName(FINTaxMatrix, TaxGroupCustVend)  , taxGroup                           , #delimiterEnter);
        infoLogText += strFmt("%1: %2%3", fieldPName(FINTaxMatrix, CompanyHomeCountry), SysCountryRegionCode::getCountryRegionIdByIsoCode(SysCountryRegionCode::countryInfo()), #delimiterEnter);
        infoLogText += strFmt("%1: %2%3", fieldPName(FINTaxMatrix, InvoiceCountry)    , invoiceCountry                     , #delimiterEnter);
    
        if (invoiceCountry)
        {
            infoLogText += strFmt("%1: %2%3", fieldPName(FINTaxMatrix, InvoiceCountryType), IntrastatCountryRegionParameters::type(invoiceCountry), #delimiterEnter);
        }
    
        infoLogText += strFmt("%1: %2", fieldPName(FINTaxMatrix, OriginCountry), startCountry);
        if (startCountry)
        {
            infoLogText += strFmt("%1%2: %3", #delimiterEnter, fieldPName(FINTaxMatrix, OriginCountryType), IntrastatCountryRegionParameters::type(startCountry));
        }
    
        infoLogText += strFmt("%1%2: %3", #delimiterEnter, fieldPName(FINTaxMatrix, DestinationCountry), endCountry);
        if (endCountry)
        {
            infoLogText += strFmt("%1%2: %3", #delimiterEnter, fieldPName(FINTaxMatrix, DestinationCountryType), IntrastatCountryRegionParameters::type(endCountry));
        }
    
        switch (taxParameters.FINCheckTaxMatrix)
        {
            case FINCheckTaxMatrix::Warning:
                info(infoLogText);
                break;
    
            case FINCheckTaxMatrix::Error:
                error(infoLogText);
                throw error("@DNR4704");
    
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static server FINTaxMatrixType construct(Common  _common,
                                                    boolean _findAsProject = false)
    {
        FINTaxMatrixType    taxMatrixType;
    
        switch (_common.TableId)
        {
            case tableNum(SalesLine):
                taxMatrixType = new FINTaxMatrixType_SalesLine(_common);
                break;
    
            case tableNum(PurchLine):
                if (_findAsProject)
                {
                    taxMatrixType = new FINTaxMatrixType_PurchLineProj(_common);
                }
                else
                {
                    taxMatrixType = new FINTaxMatrixType_PurchLine(_common);
                }
                break;
    
            case tableNum(SalesQuotationLine):
                taxMatrixType = new FINTaxMatrixType_SalesQuotationLine(_common);
                break;
    
            case tableNum(InventJournalTrans):
                taxMatrixType = new FINTaxMatrixType_InventJournalTrans(_common);
                break;
    
            case tableNum(ProjJournalTrans):
                taxMatrixType = new FINTaxMatrixType_ProjJournalTrans(_common);
                break;
    
            case tableNum(Markuptrans):
                taxMatrixType = FINTaxMatrixType::constructFromMarkupTrans(_common);
                break;
    
            case tableNum(VendInvoiceInfoLine):
                taxMatrixType = new FINTaxMatrixType_VendInvoiceInfoLine(_common);
                break;
    
            default:
                throw error(strFmt("@SYS31187", tableId2pname(_common.TableId)));
        }
    
        return taxMatrixType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromMarkupTrans</Name>
				<Source><![CDATA[
    private static server FINTaxMatrixType constructFromMarkupTrans(Common _common)
    {
        FINTaxMatrixType    taxMatrixType;
        SalesTable          salesTable;
        SalesLine           salesLine;
        PurchTable          purchTable;
        PurchLine           purchLine;
        SalesQuotationTable salesQuotationTable;
        SalesQuotationLine  salesQuotationLine;
        MarkupTrans         markupTrans;
    
        markupTrans = _common;
    
        switch (markupTrans.TransTableId)
        {
            case tableNum(SalesTable):
                salesTable          = SalesTable::findRecId(markupTrans.TransRecId);
                taxMatrixType       = new FINTaxMatrixType_SalesTable(salesTable);
                break;
    
            case tableNum(SalesLine):
                salesLine           = SalesLine::findRecId(markupTrans.TransRecId);
                taxMatrixType       = new FINTaxMatrixType_SalesLine(salesLine);
                break;
    
            case tableNum(PurchTable):
                purchTable          = PurchTable::findRecId(markupTrans.TransRecId);
                taxMatrixType       = new FINTaxMatrixType_PurchTable(purchTable);
                break;
    
            case tableNum(PurchLine):
                purchLine           = PurchLine::findRecId(markupTrans.TransRecId);
                taxMatrixType       = new FINTaxMatrixType_PurchLine(purchLine);
                break;
    
            case tableNum(SalesQuotationTable):
                salesQuotationTable = SalesQuotationTable::findRec(markupTrans.TransRecId);
                taxMatrixType       = new FINTaxMatrixType_SalesQuotationTable(salesQuotationTable);
                break;
    
            case tableNum(SalesQuotationLine):
                salesQuotationLine  = SalesQuotationLine::findRecId(markupTrans.TransRecId);
                taxMatrixType       = new FINTaxMatrixType_SalesQuotationLine(salesQuotationLine);
                break;
    
            default:
                throw error(strFmt("@SYS31187", tableId2pname(markupTrans.TransTableId)));
        }
    
        //Add the markuptrans as a parm
        if (taxMatrixType)
        {
            taxMatrixType.parmMarkupTrans(markupTrans);
        }
    
        return taxMatrixType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>