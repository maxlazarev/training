<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchEditLinesForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(PurchEditLines))]
public final class DNRPurchEditLinesForm_Extension
{
    private WPPWorkOrderId  workOrderId;
    private boolean         isSubRental;
    private Map             referenceQtyMap;
    private boolean         receiveNowAdjusted;
    private boolean         parmLineDeleted;
    private NoYes           isAvailable;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void  init()
    {
        next init();

        purchEditLinesForm.RORparmRentalSubStatus(purchFormLetter.RORparmRentalSubStatus());

        // *** Repeated code
        if (pdsFormCtrl)
        {
            pdsFormCtrl.parmFormLetter(purchFormLetter);
            pdsFormCtrl.parmPurchEditLinesForm(purchEditLinesForm);
            pdsFormCtrl.setDatasources(
                            purchParmLine,
                            purchParmUpdate,
                            purchParmTable,
                            null,
                            null);
            pdsFormCtrl.initPost();
        }

        isSubRental = purchFormLetter.RORIsRentalPosting();
        INVCalculationPointGroup.visible(isSubRental && purchEditLinesForm.INVCanShowCalculationPoint());
        this.WPPupdateDesign();
        this.RORInitializeMaps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        next run();
        
        FormStringControl PurchParmSubTable_OrigPurchId = this.design().controlName(formControlStr(PurchEditLines, PurchParmSubTable_OrigPurchId)) as FormStringControl;
        FormStringControl PurchParmLine_OrigPurchId = this.design().controlName(formControlStr(PurchEditLines, PurchParmLine_OrigPurchId)) as FormStringControl;
        FormStringControl PurchParmTable_PurchId = this.design().controlName(formControlStr(PurchEditLines, PurchParmTable_PurchId)) as FormStringControl;

        WPPWorkOrder.enabled(purchEditLinesForm.WPPEnableDuplicateTask(workOrderId, PurchParmUpdate));
        tabPageParmSubTable.caption(isSubRental ? "@DNR3227" : "@SYS54439");
        PurchParmSubTable_OrigPurchId.label(isSubRental ? "@DNR1715" : "@SYS123518");
        PurchParmLine_OrigPurchId.label(isSubRental ? "@DNR1715" : "@SYS123518");
        PurchParmTable_PurchId.label(isSubRental ? "@DNR1715" : "@SYS123518");
        PurchParmTable_BOBTransTime.label(purchEditLinesForm.BOBTimeCaption());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckCloseDialog</Name>
				<Source><![CDATA[
    protected boolean mustCheckCloseDialog()
    {
        boolean ret = next mustCheckCloseDialog();

        if(purchFormLetter.WPPparmChangeObjectAvailability()
        && isAvailable
        && !dlgReasonCode.text())
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS63086"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitializeMaps</Name>
				<Source><![CDATA[
    // extension methods

    public void RORInitializeMaps()
    {
        referenceQtyMap = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPupdateDesign</Name>
				<Source><![CDATA[
    public void WPPupdateDesign()
    {
        boolean     changeAvailabilityChecked;
    
        changeAvailabilityChecked = purchFormLetter.WPPparmChangeObjectAvailability();
        workOrderId = purchFormLetter.WPPparmWorkOrderId();
    
        dlgReasonCode.allowEdit(changeAvailabilityChecked);
    
        if (changeAvailabilityChecked)
        {
            isAvailable = purchEditLinesForm.WPPobjectIsAvailable(workOrderId);
    
            dlgChangeAvailability.checked(true);
            tabPageWPPChangeAvailability.visible(true);
            dlgWorkOrderId.text(workOrderId);
            dlgIsAvailable.selection(!isAvailable);
            dlgReasonCode.mandatory(isAvailable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmWorkOrderId</Name>
				<Source><![CDATA[
    public WPPWorkOrderId DNRParmWorkOrderId(WPPWorkOrderId _workOrderId = workOrderId)
    {
        workOrderId = _workOrderId;
        return workOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmReceiveNowAdjusted</Name>
				<Source><![CDATA[
    public boolean DNRParmReceiveNowAdjusted(boolean _receiveNowAdjusted = receiveNowAdjusted)
    {
        receiveNowAdjusted = _receiveNowAdjusted;
        return receiveNowAdjusted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmParmLineDeleted</Name>
				<Source><![CDATA[
    public boolean DNRParmParmLineDeleted(boolean _parmLineDeleted = parmLineDeleted)
    {
        parmLineDeleted = _parmLineDeleted;
        return parmLineDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmPurchFormLetter</Name>
				<Source><![CDATA[
    public PurchFormLetter DNRParmPurchFormLetter(PurchFormLetter _purchFormLetter = purchFormLetter)
    {
        purchFormLetter = _purchFormLetter;
        return purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_elememt_OnClosing</Name>
				<Source><![CDATA[
    // event handler methods

    [FormEventHandler(formStr(PurchEditLines), FormEventType::Closing)]
    public static void DNREvent_elememt_OnClosing(xFormRun _sender, FormEventArgs _eventArgs)
    {
        Object          formRunObject = _sender as Object;
        PurchFormLetter purchFormLetter = formRunObject.DNRParmPurchFormLetter();
        boolean         receiveNowAdjusted = formRunObject.DNRparmReceiveNowAdjusted();
        boolean         parmLineDeleted = formRunObject.DNRparmParmLineDeleted();

        purchFormLetter.WPPParmMustDuplicateTask(receiveNowAdjusted || parmLineDeleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmLineDS_OnDeleting</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(PurchEditLines, PurchParmLine), FormDataSourceEventType::Deleting)]
    public static void DNREvent_PurchParmLineDS_OnDeleting(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun         formRun         = _sender.formRun() as FormRun;
        Object          formRunObject   = formRun as Object;
        WPPWorkOrderId  workOrderId     = formRunObject.DNRparmWorkOrderId();

        if (workOrderId)
        {
            formRunObject.DNRparmParmLineDeleted(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmLineDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(PurchEditLines, PurchParmLine), FormDataSourceEventType::Initialized)]
    public static void DNREvent_PurchParmLineDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        _sender.cacheAddMethod(tableMethodStr(PurchParmLine, deliveryAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_PurchParmUpdateDS_SpecQty_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(PurchEditLines, PurchParmUpdate, SpecQty), FormDataFieldEventType::Modified)]
    public static void DNREvent_PurchParmUpdateDS_SpecQty_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun     = _sender.datasource().formRun();
        Object  formObject  = formRun as Object;

        formObject.DNRparmReceiveNowAdjusted(false);
        formObject.DNRparmParmLineDeleted(false);
        formObject.RORInitializeMaps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DlgChangeAvailabilityCTRL_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchEditLines, dlgChangeAvailability), FormControlEventType::Modified)]
    public static void DNREvent_DlgChangeAvailabilityCTRL_OnModified(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun             formRun                 = _sender.formRun() as FormRun;
        Object              formRunObject           = formRun as Object;
        PurchFormLetter     purchFormLetter         = formRunObject.DNRparmPurchFormLetter();
        FormCheckBoxControl dlgChangeAvailability   = _sender as FormCheckBoxControl;

        purchFormLetter.WPPparmChangeObjectAvailability(dlgChangeAvailability.checked());
        formRunObject.WPPupdateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DlgReasonCodeCTRL_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchEditLines, dlgReasonCode), FormControlEventType::Modified)]
    public static void DNREvent_DlgReasonCodeCTRL_OnModified(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun             formRun         = _sender.formRun() as FormRun;
        Object              formRunObject   = formRun as Object;
        PurchFormLetter     purchFormLetter = formRunObject.DNRparmPurchFormLetter();
        FormStringControl   dlgReasonCode   = _sender as FormStringControl;

        purchFormLetter.DNRparmReasonCode(dlgReasonCode.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DlgReasonCodeCTRL_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchEditLines, dlgReasonCode), FormControlEventType::Lookup)]
    public static void DNREvent_DlgReasonCodeCTRL_OnLookup(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        DNRReasonTable::lookupType(_sender, DNRReasonType::Availability);

        FormControlCancelableSuperEventArgs ce = _eventArgs as FormControlCancelableSuperEventArgs;
        //cancel super() to prevent error.
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DlgReasonCodeCTRL_OnValidated</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(PurchEditLines, dlgReasonCode), FormControlEventType::Validated)]
    public static void DNREvent_DlgReasonCodeCTRL_OnValidated(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormStringControl sender = _sender as FormStringControl;
        boolean ret = true;

        if (DNRReasonTable::find(sender.text()).Type != DNRReasonType::Availability)
        {
            DictEnum dictEnum = new DictEnum(enumNum(DNRReasonType));
            ret = checkFailed(strFmt("@SYS34253", dictEnum.value2Label(enum2int(DNRReasonType::Availability))));
        }

        FormControlCancelEventArgs ce = _eventArgs as FormControlCancelEventArgs;
        ce.cancel(!ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>