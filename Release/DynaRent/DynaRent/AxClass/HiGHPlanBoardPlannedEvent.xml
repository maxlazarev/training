<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanBoardPlannedEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to marshall data between the server side HiGHPlanBoard control and the browser
/// </summary>
[DataContractAttribute]
class HiGHPlanBoardPlannedEvent
{
    //Member variables
    str         id                  = '';   //PlannedEventId
    str         rowItemId           = '';   //Id per row in chart
    str         eventId             = '';   //Unique label designating an event to be planned
    int         startPeriod         = 0;    //Starting column (That will be rendered)
    int         endPeriod           = 0;    //Ending column (That will be rendered)
    boolean     startPeriodOpen     = false;//Indicates that event starts before the first period it will be rendered for
    boolean     endPeriodOpen       = false;//Indicates that event end after the last period it will be rendered for
    utcdatetime startDateTime;              //Actual start date time
    utcdatetime endDateTime;                //Actual end date time
    int         eventColor          = 0;    //Event color
    int         collisionLevel      = 0;    //Collision level with other plannedEvents on same period
    str         cellContent         = '';   //HTML rich cell content
    str         icons               = '';   //Icons to be added (TODO: This will become a List of HiGHPLanBoardImages WPLO)
    boolean     allowResize         = true;
    boolean     allowDrag           = true;
    boolean     visible             = true;
    int         dateOnlyLineNum     = 0;    //Sequential number for dateonly events
    RefTableId  refTableId          = 0;
    RefRecId    refRecId            = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('PlanningId')]
    public str parmId(str _id = id)
    {
        if (!prmIsDefault(_id))
        {
            id = _id;
        }
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RowItemId')]
    public str parmRowItemId(str _rowItemId = rowItemId)
    {
        if (!prmIsDefault(_rowItemId))
        {
            rowItemId = _rowItemId;
        }
        return rowItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EventId')]
    public str parmEventId(str _eventId = eventId)
    {
        if (!prmIsDefault(_eventId))
        {
            eventId = _eventId;
        }
        return eventId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartPeriod</Name>
				<Source><![CDATA[
    [DataMemberAttribute('StartPeriod')]
    public int parmStartPeriod(int _startPeriod = startPeriod)
    {
        if (!prmIsDefault(_startPeriod))
        {
            startPeriod = _startPeriod;
        }
        return startPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPeriod</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EndPeriod')]
    public int parmEndPeriod(int _endPeriod = endPeriod)
    {
        if (!prmIsDefault(_endPeriod))
        {
            endPeriod = _endPeriod;
        }
        return endPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartPeriodOpen</Name>
				<Source><![CDATA[
    [DataMemberAttribute('StartPeriodOpen')]
    public boolean parmStartPeriodOpen(boolean _startPeriodOpen = startPeriodOpen)
    {
        if (!prmIsDefault(_startPeriodOpen))
        {
            startPeriodOpen = _startPeriodOpen;
        }
        return startPeriodOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    [DataMemberAttribute('StartDateTime')]
    public utcdatetime parmStartDateTime(utcdatetime _startDateTime = startDateTime)
    {
        if (!prmIsDefault(_startDateTime))
        {
            startDateTime = _startDateTime != utcDateTimeNull() ? _startDateTime : DateTimeUtil::minValue();

        }
        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDateTime</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EndDateTime')]
    public utcdatetime parmEndDateTime(utcdatetime _endDateTime = endDateTime)
    {
        if (!prmIsDefault(_endDateTime))
        {
            endDateTime = _endDateTime != utcDateTimeNull() ? _endDateTime : DateTimeUtil::maxValue();
        }
        return endDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPeriodOpen</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EndPeriodOpen')]
    public boolean parmEndPeriodOpen(boolean _endPeriodOpen = endPeriodOpen)
    {
        if (!prmIsDefault(_endPeriodOpen))
        {
            endPeriodOpen = _endPeriodOpen;
        }
        return endPeriodOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventColor</Name>
				<Source><![CDATA[
    [DataMemberAttribute('EventColor')]
    public int parmEventColor(int _eventColor = eventColor)
    {
        if (!prmIsDefault(_eventColor))
        {
            eventColor = _eventColor;
        }
        return eventColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollisionLevel</Name>
				<Source><![CDATA[
    [DataMemberAttribute('CollisionLevel')]
    public int parmCollisionLevel(int _collisionLevel = collisionLevel)
    {
        if (!prmIsDefault(_collisionLevel))
        {
            collisionLevel = _collisionLevel;
        }
        return collisionLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCellContent</Name>
				<Source><![CDATA[
    [DataMemberAttribute('CellContent')]
    public str parmCellContent(str _cellContent = cellContent)
    {
        if (!prmIsDefault(_cellContent))
        {
            cellContent = _cellContent;
        }
        return cellContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIcons</Name>
				<Source><![CDATA[
    [DataMemberAttribute('Icons')]
    public str parmIcons(str _icons = icons)
    {
        if (!prmIsDefault(_icons))
        {
            icons = _icons;
        }
        return icons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowResize</Name>
				<Source><![CDATA[
    [DataMemberAttribute('AllowResize')]
    public boolean parmAllowResize(boolean _allowResize = allowResize)
    {
        if (!prmIsDefault(_allowResize))
        {
            allowResize = _allowResize;
        }
        return allowResize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowDrag</Name>
				<Source><![CDATA[
    [DataMemberAttribute('AllowDrag')]
    public boolean parmAllowDrag(boolean _allowDrag = allowDrag)
    {
        if (!prmIsDefault(_allowDrag))
        {
            allowDrag = _allowDrag;
        }
        return allowDrag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVisible</Name>
				<Source><![CDATA[
    [DataMemberAttribute('Visible')]
    public boolean parmVisible(boolean _visible = visible)
    {
        if (!prmIsDefault(_visible))
        {
            visible = _visible;
        }
        return visible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RefTableId')]
    public int parmRefTableId(int _refTableId = refTableId)
    {
        if (!prmIsDefault(_refTableId))
        {
            refTableId = _refTableId;
        }
        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    [DataMemberAttribute('RefRecId')]
    public int64 parmRefRecId(int64 _refRecId = refRecId)
    {
        if (!prmIsDefault(_refRecId))
        {
            refRecId = _refRecId;
        }
        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateOnlyLineNum</Name>
				<Source><![CDATA[
    [DataMemberAttribute('DateOnlyLineNum')]
    public int parmDateOnlyLineNum(int _dateOnlyLineNum = dateOnlyLineNum)
    {
        if (!prmIsDefault(_dateOnlyLineNum))
        {
            dateOnlyLineNum = _dateOnlyLineNum;
        }
        return dateOnlyLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new object, and fills it with the specified parameters
    /// </summary>
    /// <returns>The created HiGHPlanBoardPlannedEvent object</returns>
    public static HiGHPlanBoardPlannedEvent newParameters(
        str         _rowItemId, 
        str         _eventId, 
        utcdatetime _startDateTime, 
        utcdatetime _endDateTime, 
        List        _periods, 
        RefTableId  _refTableId, 
        RefRecId    _refRecId, 
        int         _eventColor         = 0, 
        str         _cellContent        = '', 
        str         _icons              = '', 
        boolean     _allowResize        = true, 
        boolean     _allowDrag          = true,
        int         _dateOnlyLineNum    = 0)
    {
        int startPeriod;
        int endPeriod;
        boolean startPeriodOpen;
        boolean endPeriodOpen;
        int collisionLevel = -1; //We start with a dummy value, as this should only be calculated once all HiGHPlanBoardPlannedEvents for a specfic HiGHPlanBoardRowItem has been added.
        
        HiGHPlanBoardPlannedEvent plannedEvent = new HiGHPlanBoardPlannedEvent();
        plannedEvent.parmId(strFmt('%1_%2', _refTableId, _refRecId));
        plannedEvent.parmRowItemId(_rowItemId);
        plannedEvent.parmEventId(_eventId);
        plannedEvent.parmStartDateTime(_startDateTime);
        plannedEvent.parmEndDateTime(_endDateTime);

        ListEnumerator  lePeriods = _periods.getEnumerator();
        StartDateTime   controlStartDateTime = utcDateTimeNull();
        StartDateTime   controlEndDateTime = utcDateTimeNull();
        int             startPeriodId = -1;
        int             endPeriodId = 0;

        //do not calculate start- end-periods for planned events falling outside of the control scope
        while (lePeriods.moveNext())
        {
            HiGHPlanBoardPeriod period = lePeriods.current();

            controlStartDateTime    = (controlStartDateTime ? controlStartDateTime : period.parmStartDateTime());
            controlEndDateTime      = period.parmEndDateTime();
            endPeriodId             = period.parmId();
        }

        if ((plannedEvent.parmEndDateTime() < controlStartDateTime) || (plannedEvent.parmStartDateTime() > controlEndDateTime))
        {
            startPeriod = 0;
            endPeriod = 0;
            plannedEvent.parmVisible(false);
        }
        else
        {
            //For the rest, findthe period ids
            [startPeriod, startPeriodOpen]  = HiGHPlanBoardPeriod::calculatePeriodFromDateTime(plannedEvent.parmStartDateTime(),  _periods, true);
            [endPeriod, endPeriodOpen]      = HiGHPlanBoardPeriod::calculatePeriodFromDateTime(plannedEvent.parmEndDateTime(),    _periods);

            if (startPeriod == endPeriod)
            {
                endPeriod++;
            }
        }

        plannedEvent.parmStartPeriod(startPeriod);
        plannedEvent.parmEndPeriod(endPeriod);
        plannedEvent.parmStartPeriodOpen(startPeriodOpen);
        plannedEvent.parmEndPeriodOpen(endPeriodOpen);        
        plannedEvent.parmEventColor(_eventColor);
        plannedEvent.parmCollisionLevel(collisionLevel);
        plannedEvent.parmCellContent(_cellContent);
        plannedEvent.parmIcons(_icons);
        plannedEvent.parmAllowResize(_allowResize);
        plannedEvent.parmAllowDrag(_allowDrag);
        plannedEvent.parmRefTableId(_refTableId);
        plannedEvent.parmRefRecId(_refRecId);
        plannedEvent.parmDateOnlyLineNum(_dateOnlyLineNum);

        return plannedEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    // <summary>
    /// Finds a plannedEvent in the plannedEvents List
    /// </summary>
    /// <param name = "_plannedEventId">Id of the plannedEvent to be searched for</param>
    /// <param name = "_rowItems">RowItems list</param>
    /// <returns>HiGHPlanBoardPlannedEvent object found, or null if not found</returns>
    public static HiGHPlanBoardPlannedEvent find(str _plannedEventId, List _rowItems)
    {
        ListEnumerator leRowItems = _rowItems.getEnumerator();

        while (leRowItems.moveNext())
        {
            HiGHPlanBoardRowItem rowItem = leRowItems.current();
            ListEnumerator lePlannedEvents = rowItem.parmPlannedEvents().getEnumerator();

            while (lePlannedEvents.moveNext())
            {
                HiGHPlanBoardPlannedEvent plannedEvent = lePlannedEvents.current();

                if (plannedEvent.parmId() == _plannedEventId)
                {
                    return plannedEvent;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>