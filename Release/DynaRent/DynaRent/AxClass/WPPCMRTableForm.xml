<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPCMRTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPCMRTableForm extends RunBase
{
    WPPWorkOrderLine            workOrderLine;
    WPPCMRId                    cmrId;

    WPPTransporter              transporter;
    WPPTransportDate            transportDate;
    InventLocationId            inventLocationId;

    SRSPrintDestinationSettings printDestinationSettings;
    container                   printDestinationSettingsPacked;

    #define.CurrentVersion(2)
    #localMacro.CurrentList
        transporter,
        inventLocationId,
        transportDate,
        printDestinationSettingsPacked
    #endMacro

    #define.Version1(1)
    #localMacro.Version1List
        transporter,
        inventLocationId,
        transportDate
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formStr(WPPCMRTable), this);
    
        dialog.caption("@DNR6709");
        dialog = this.dialogInternal(dialog);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParms</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects07_2021, method initParams has been made obsolete. Use initParmeters instead.", false)]
    public void initParms(WPPTransporter    _transporter,
                          WPPTransportDate  _transportDate,
                          InventLocationId  _inventLocationId)
    {
        this.parmTransporter(_transporter);
        this.parmTransportDate(_transportDate);
        this.parmInventLocationId(_inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmeters</Name>
				<Source><![CDATA[
    public void initParmeters(WPPTransporter    _transporter,
                              WPPTransportDate  _transportDate,
                              InventLocationId  _inventLocationId,
                              WPPCMRId          _cmrId)
    {
        this.parmTransporter(_transporter);
        this.parmTransportDate(_transportDate);
        this.parmInventLocationId(_inventLocationId);
        this.parmCMRId(_cmrId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        printDestinationSettingsPacked = printDestinationSettings ? printDestinationSettings.pack() : conNull();

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
    
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransportDate</Name>
				<Source><![CDATA[
    public WPPTransportDate parmTransportDate(WPPTransportDate _transportDate = transportDate)
    {
        transportDate = _transportDate;
    
        return transportDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransporter</Name>
				<Source><![CDATA[
    public WPPTransporter parmTransporter(WPPTransporter _transporter = transporter)
    {
        transporter = _transporter;
    
        return transporter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderLine</Name>
				<Source><![CDATA[
    public WPPWorkOrderLine parmWorkOrderLine(WPPWorkOrderLine _workOrderLine = workOrderLine)
    {
        workOrderLine = _workOrderLine;
    
        return workOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDestinationSettings</Name>
				<Source><![CDATA[
    public SRSPrintDestinationSettings parmPrintDestinationSettings(SRSPrintDestinationSettings _printDestinationSettings = printDestinationSettings)
    {
        printDestinationSettings = _printDestinationSettings;

        return printDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SRSReportRun                    reportRun;
        
        SRSReportRunController          controller;
        SrsReportDataContract           reportContract;
        WPPCMRReportDataContract        dataContract;

        reportRun = new SRSReportRun();
        reportRun.reportName(this.getReportName());
        reportRun.readPrintDestinationSettings();
    
        reportRun.printDestinationSettings(printDestinationSettings);
        reportRun.savePrintDestinationSettings();

        controller = new SrsReportRunController();
        controller.parmReportName(reportRun.reportName());
        controller.parmShowDialog(false);
    
        reportContract = controller.parmReportContract();
        reportContract.parmReportCaption("@DNR2401");
        reportContract.parmPrintSettings(printDestinationSettings);
    
        dataContract = new WPPCMRReportDataContract();
        dataContract.parmCMRId(cmrId);
        reportContract.parmRdpContract(dataContract);

        controller.parmReportContract();
        controller.runReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    protected str getReportName()
    {
        return ssrsReportStr(WPPCMRReport, CMRReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;

                if (printDestinationSettingsPacked != conNull())
                {
                    printDestinationSettings = new SRSPrintDestinationSettings(printDestinationSettingsPacked);
                }

                if (!printDestinationSettings)
                {
                    printDestinationSettings = new SRSPrintDestinationSettings();
                }
                break;

            case #Version1:
                [version, #Version1List] = _packedClass;
                break;

            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPCMRTableForm construct()
    {
        return new WPPCMRTableForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WPPCMRTableForm tableForm;
    
        if (_args.dataset() != tableNum(WPPWorkOrderLine))
        {
            throw error(Error::missingFormActiveBuffer("@DNR4044", tableId2pname(tableNum(WPPWorkOrderLine))));
        }
    
        tableForm = WPPCMRTableForm::construct();
        tableForm.parmWorkOrderLine(_args.record());
    
        if (tableForm.prompt())
        {
            tableForm.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCMRId</Name>
				<Source><![CDATA[
    public WPPCMRId parmCMRId(WPPCMRId _cmrId = cmrId)
    {
        cmrId = _cmrId;
        return cmrId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>