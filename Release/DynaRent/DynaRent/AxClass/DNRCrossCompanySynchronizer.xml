<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCrossCompanySynchronizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class DNRCrossCompanySynchronizer
{
    Common  callerRecord;
    Set     fieldIds2Sync;
    Set     fieldIds2Identify;
    Set     dataAreaIds2Sync;
    str     callerIdentifier;

    static  DataAreaId transDataAreaId;
    static  Common      origRecord;

    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMustSync</Name>
				<Source><![CDATA[
    private boolean checkMustSync()
    {
        FieldId fieldId;
        SetEnumerator enumerator = fieldIds2Sync.getEnumerator();
        while(enumerator.moveNext())
        {
            fieldId = enumerator.current();
            if(callerRecord.(fieldId) != origRecord.(fieldId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setting the dataAreaId before insert calls let the data to be inserted only in the desired company.
    /// This provides an option to create data only in desired company .
    /// However the dataareaId shall be created once single company data creation operation has been perforrmed to let the framework
    /// copy data in other companies on creation of subsequence new data.
    /// </summary>
    /// <param name = "_dataAreaId"></param>
    public static void setTransDataAreaId(DataAreaId _dataAreaId)
    {
        transDataAreaId = _dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common)
    {
        callerRecord      = _common;
        fieldIds2Sync     = this.getFieldIds2Sync();
        fieldIds2Identify = this.getFieldIds2Identify();
        dataAreaIds2Sync  = this.getDataAreaIds2Sync();
        this.initCallerIdentifier();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataAreaIds2Sync</Name>
				<Source><![CDATA[
    private void setDataAreaIds2Sync(Set _dataAreaIds2Sync)
    {
        dataAreaIds2Sync = _dataAreaIds2Sync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIds2Identify</Name>
				<Source><![CDATA[
    abstract protected Set getFieldIds2Identify()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIds2Sync</Name>
				<Source><![CDATA[
    abstract protected Set getFieldIds2Sync()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaIds2Sync</Name>
				<Source><![CDATA[
    protected Set getDataAreaIds2Sync()
    {
        DataArea    dataArea;
        Set         dataAreaSet;
        
        dataAreaSet = new Set(Types::String);

        while select dataArea
        where dataArea.isVirtual == false
        &&    dataArea.id != transDataAreaId
        {
            dataAreaSet.add(dataArea.id);
        }

        return dataAreaSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    protected boolean validateWrite(Common  _common)
    {
        boolean ret;
        if(_common.validateWrite())
        {
            ret = true;
        }
        else
        {
            warning(strFmt('@DNR:RecordCouldNotBeSynced', callerIdentifier, curExt()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerIdentifier</Name>
				<Source><![CDATA[
    protected void initCallerIdentifier()
    {
        
        FieldId         fieldId;
        Set             set;
        SetEnumerator   enumerator;

        set = this.getFieldIds2Identify();
        if(set)
        {
            enumerator = set.getEnumerator();
            while(enumerator.moveNext())
            {
                fieldId = enumerator.current();
                callerIdentifier = callerIdentifier + fieldId2Name(callerRecord.TableId, fieldId);
                callerIdentifier = callerIdentifier + ' - ' + any2Str(callerRecord.(fieldId)) + ' ';
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>eventUpdated</Name>
				<Source><![CDATA[
    protected void eventUpdated()
    {
        DataAreaId      dataAreaId;
        Common          newRecord;
        SetEnumerator   enumerator = dataAreaIds2Sync.getEnumerator();

        if(this.checkMustSync())
        {
            while(enumerator.moveNext())
            {
                dataAreaId = enumerator.current();
                changeCompany(dataAreaId)
                {
                    ttsbegin;
                    newRecord = this.findRecord(true);
                    if(newRecord)
                    {
                        this.copyData(newRecord);
                        if(this.validateWrite(newRecord))
                        {
                            newRecord.update();
                        }
                    }
                    ttscommit;
                }
            }
        }
        DNRCrossCompanySynchronizer::setOrig(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventDeleted</Name>
				<Source><![CDATA[
    protected void eventDeleted()
    {
        DataAreaId      dataAreaId;
        Common          newRecord;
        SetEnumerator   enumerator = dataAreaIds2Sync.getEnumerator();
        
        while(enumerator.moveNext())
        {
            dataAreaId = enumerator.current();
            changeCompany(dataAreaId)
            {
                ttsbegin;
                newRecord = this.findRecord(true);
                if(newRecord)
                {
                    if(newRecord.validateDelete())
                    {
                        newRecord.delete();
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventInserted</Name>
				<Source><![CDATA[
    protected void eventInserted()
    {
        DataAreaId      dataAreaId;
        Common          newRecord = new SysDictTable(callerRecord.TableId).makeRecord();
        SetEnumerator   enumerator = dataAreaIds2Sync.getEnumerator();
        
        while(enumerator.moveNext())
        {
            dataAreaId = enumerator.current();
            changeCompany(dataAreaId)
            {
                newRecord.clear();
                this.copyData(newRecord);
                    
                if(this.validateWrite(newRecord))
                {
                    newRecord.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    protected Common findRecord(boolean _update = false)
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    queryBuildDataSource;
        SetEnumerator           enumerator;

        query = new Query();
        query.firstOnly1(true);
        
        queryBuildDataSource = query.addDataSource(callerRecord.TableId);
        queryBuildDataSource.update(_update);
        
        enumerator = fieldIds2Identify.getEnumerator();
        while(enumerator.moveNext())
        {
            queryBuildDataSource.addRange(enumerator.current()).value(SysQuery::value(callerRecord.(enumerator.current())));
        }

        queryRun = new QueryRun(query);
        queryRun.next();
        return queryRun.get(callerRecord.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyData</Name>
				<Source><![CDATA[
    protected void copyData(Common _newRecord)
    {
        FieldId         fieldId;
        SetEnumerator   enum = fieldIds2Sync.getEnumerator();

        while(enum.moveNext())
        {
            fieldId = enum.current();
            _newRecord.(fieldId) = callerRecord.(fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static DNRCrossCompanySynchronizer construct(Common _caller)
    {
        switch(_caller.TableId)
        {
            case tableNum(InventLocation)                       : return new DNRCrossCompanySynchronizer_InventLocation(_caller);
            case tableNum(InventSite)                           : return new DNRCrossCompanySynchronizer_InventSite(_caller);
            case tableNum(ProjCategory)                         : return new DNRCrossCompanySynchronizer_ProjCategory(_caller);
            case tableNum(ProjGroup)                            : return new DNRCrossCompanySynchronizer_ProjGroup(_caller);
            case tableNum(InventSiteLogisticsLocation)          : return new DNRCrossCompanySynchronizer_InventSiteLogisticsLocation(_caller);
            case tableNum(InventSiteLogisticsLocationRole)      : return new DNRCrossCompanySynchronizer_InventSiteLogisticsLocationRole(_caller);
            case tableNum(InventLocationLogisticsLocation)      : return new DNRCrossCompanySynchronizer_InventLocationLogisticsLocation(_caller);
            case tableNum(InventLocationLogisticsLocationRole)  : return new DNRCrossCompanySynchronizer_InventLocationLogisticsLocationRole(_caller);
            

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                DNRCrossCompanySynchronizer::constructDelegate(_caller, result);
                
                if(result.hasResult())
                {
                    return result.result() as DNRCrossCompanySynchronizer;
                }
                else
                {
                    return null;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDelegate</Name>
				<Source><![CDATA[
    static delegate void constructDelegate(Common _caller, EventHandlerResult _eventHandlerResult) { }

]]></Source>
			</Method>
			<Method>
				<Name>setOrig</Name>
				<Source><![CDATA[
    public static void setOrig(Common _orig)
    {
        origRecord = _orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSync</Name>
				<Source><![CDATA[
    public static void doSync(Common _caller, DataEventType _eventType)
    {
        if(transDataAreaId)
        {
            return;
        }
        else
        {
            //Save the data area id of the originating event
            transDataAreaId = curExt2dataareaid(tableNum(CustTable));
            DNRCrossCompanySynchronizer synchronizer = DNRCrossCompanySynchronizer::construct(_caller);

            if(synchronizer)
            {
                switch(_eventType)
                {
                    case DataEventType::Inserted : 
                        synchronizer.eventInserted();
                        break;

                    case DataEventType::Updated : 
                        synchronizer.eventUpdated();
                        break;

                    case DataEventType::Deleted :  
                        synchronizer.eventDeleted();
                        break;
                }
            
            }
            transDataAreaId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncExisting</Name>
				<Source><![CDATA[
    public static void syncExisting(Common _caller, Set _dataAreaSet)
    {
        if(transDataAreaId)
        {
            return;
        }
        else
        {
            //Save the data area id of the originating event
            transDataAreaId = curExt2dataareaid(tableNum(CustTable));
            DNRCrossCompanySynchronizer synchronizer = DNRCrossCompanySynchronizer::construct(_caller);

            if(synchronizer)
            {
                synchronizer.setDataAreaIds2Sync(_dataAreaSet);
                synchronizer.eventInserted();
            }

            transDataAreaId = '';
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>