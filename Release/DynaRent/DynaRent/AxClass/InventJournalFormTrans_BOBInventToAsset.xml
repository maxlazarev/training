<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalFormTrans_BOBInventToAsset</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalFormTrans_BOBInventToAsset extends InventJournalFormTrans_BOBConversion
{
    boolean isBulkItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>busObjCategoryRange</Name>
				<Source><![CDATA[
    protected Range busObjCategoryRange()
    {
        return SysQuery::value(BOBObjectCategory::Inventory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnableAssetButton</Name>
				<Source><![CDATA[
    protected void checkEnableAssetButton()
    {
        this.BOBParmCtrlCreateAssetButton().enabled(!inventJournalTrans.AssetId &&
                                                    inventJournalTrans.Qty > 0 &&
                                                    inventJournalTrans.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        super();
        isBulkItem = (inventJournalTrans.ItemId && inventJournalTrans.inventTable().BOBIsBulkRentalItem());
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    public void datasourceInitValuePost()
    {
        super();
    
        inventJournalTrans.AssetTransType = AssetTransTypeJournal::Acquisition;
        inventJournalTrans.Qty = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedAssetIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedAssetIdPost()
    {
        InventDim       inventDimNew;
        BOBObjectTable  objectTable;
        ;
    
        super();
    
        if(inventJournalTrans.AssetId != prevAssetId)
        {
            // also fill the item and serial number based on the entered fixed asset number
            objectTable = BOBObjectTable::findByAssetId(inventJournalTrans.AssetId, inventJournalTrans.TransDate);
    
            if(objectTable && !inventJournalTrans.RecId) // item number may only be changed on new records
            {
                inventJournalTrans.ItemId = objectTable.getAcquiredInventTable().ItemId;
                this.fieldModifiedItemIdPost();
            }
    
            if(objectTable && objectTable.InventSerialId != prevSerialNum)
            {
                inventDimNew = inventJournalTrans.inventDim();
                inventDimNew.inventSerialId = objectTable.InventSerialId;
                inventDimNew = InventDim::findOrCreate(inventDimNew);
    
                inventJournalTrans.InventDimId = inventDimNew.inventDimId;
                inventDim.data(inventDimNew);
                inventDim_ds.setCurrent();
                this.fieldModifiedInventDimFieldsPost(inventDim, fieldNum(InventDim, InventSerialId));
            }
        }
    
        prevAssetId = inventJournalTrans.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedItemIdPost()
    {
        super();
        inventJournalTrans.Qty = 1; // inventJournalTrans.initFromInventTable (called by super) resets the qty
        this.checkEnableAssetButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQtyPost()
    {
        super();
        this.checkEnableAssetButton();
        this.BOBSetCostPriceAndAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateAssetId</Name>
				<Source><![CDATA[
    public boolean fieldValidateAssetId()
    {
        boolean ret = super();
    
        if (isBulkItem && inventJournalTrans.AssetId)
        {
            BOBObjectTable objectTable = BOBObjectTable::findByAssetId(inventJournalTrans.AssetId, inventJournalTrans.TransDate);
            
            if (!objectTable || objectTable.getAcquiredInventTable().ItemId != inventJournalTrans.ItemId)
            {
                ret = checkFailed(strFmt("@DNR7287", inventJournalTrans.AssetId, inventJournalTrans.ItemId)); 
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateInventSerialId</Name>
				<Source><![CDATA[
    public boolean fieldValidateInventSerialId()
    {
        boolean ret = super();
    
        if(ret && inventDim.inventSerialId)
        {
            BOBObjectTable objectTable = BOBObjectTable::findInventSerialId(inventDim.inventSerialId);
    
            if(!objectTable)
            {
                ret = checkFailed(strFmt("@DNR6375", inventDim.inventSerialId));
            }
            else if(objectTable.assetId() != inventJournalTrans.AssetId && objectTable.Category != BOBObjectCategory::Inventory)
            {
                ret = checkFailed(strFmt("@DNR6535", objectTable.ObjectId, objectTable.InventSerialId, BOBObjectCategory::Inventory));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateQty</Name>
				<Source><![CDATA[
    public boolean fieldValidateQty()
    {
        boolean ret = true;
    
        if(inventJournalTrans.ItemId && isBulkItem && inventJournalTrans.Qty <= 0)
        {
            ret = checkFailed("@SYS113821");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();
    
        this.BOBParmCtrlCreateAssetButton().visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetId</Name>
				<Source><![CDATA[
    public void lookupAssetId(FormStringControl _ctrl)
    {
        Query query = new Query();
    
        QueryBuildDataSource qbdsAssetTable = query.addDataSource(tableNum(AssetTable));
        qbdsAssetTable.addSelectionField(fieldNum(AssetTable, AssetId));
        qbdsAssetTable.addSelectionField(fieldNum(AssetTable, Name));
        qbdsAssetTable.addSelectionField(fieldNum(AssetTable, AssetGroup));
    
        if(isBulkItem)
        {
            QueryBuildDataSource qbdsObjectTable = qbdsAssetTable.addDataSource(tableNum(BOBObjectTable));
            qbdsObjectTable.relations(true);
            qbdsObjectTable.addRange(fieldNum(BOBObjectTable, RentalTypeId)).value(BOBRentalType::findFromItemId(inventJournalTrans.ItemId).RentalTypeId);
            qbdsObjectTable.addRange(fieldNum(BOBObjectTable, InventSerialId)).value(SysQuery::valueEmptyString());

            QueryBuildDataSource qbdsObjectAssetLog = qbdsObjectTable.addDataSource(tableNum(BOBObjectAssetLog));
            qbdsObjectAssetLog.relations(true);
            qbdsObjectAssetLog.addRange(fieldNum(BOBObjectAssetLog, AssetId)).value(SysQuery::valueNotEmptyString());
            qbdsObjectAssetLog.addRange(fieldNum(BOBObjectAssetLog, AssetCompanyId)).value(inventJournalTrans.DataAreaId);
        }
    
        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(AssetTable), _ctrl);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(AssetTable, AssetId), true);
        lookup.addLookupfield(fieldNum(AssetTable, Name));
        lookup.addLookupfield(fieldNum(AssetTable, AssetGroup));
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>