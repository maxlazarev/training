<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchQuantity_RORReturnNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::RORReturnNote)]
class PurchQuantity_RORReturnNote extends PurchQuantity_RORSubStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(PurchLine     _purchLine,
                                      PurchUpdate   _specQty             = PurchUpdate::All,
                                      InventQty     _qty                 = naReal(),
                                      boolean       _creditRemaining     = false,
                                      boolean       _calcRemaining       = true)
    {
        InventQty           qtyAvailable = this.RORgetSubStatusFromToQty(_purchLine, _qty, _purchLine.inventTable().inventUnitId());
        InventQty           qtyUpdate;
        InventQty           numOfRemainOrig;
        InventQty           qtyRemainNew;
    
        if (!_purchLine.isStocked())
        {
            return [0, 0, 0];
        }
    
        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow :
                    qtyUpdate = _purchLine.InventReceivedNow;
                    break;
    
                default :
                    qtyUpdate = qtyAvailable;
                    break;
            }
        }
    
        if (_calcRemaining)
        {
            numOfRemainOrig = _purchLine.RORRemainInventReturn;
            qtyRemainNew    = _purchLine.RORRemainInventReturn - qtyUpdate;
        }
    
        qtyUpdate       = qtyUpdate       == naReal() ? 0 : qtyUpdate;
        numOfRemainOrig = numOfRemainOrig == naReal() ? 0 : numOfRemainOrig;
        qtyRemainNew    = qtyRemainNew    == naReal() ? 0 : qtyRemainNew;
    
        return [qtyUpdate, numOfRemainOrig, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    protected container calcQtyPurch(PurchLine      _purchLine,
                                     PurchUpdate    _specQty         = PurchUpdate::All,
                                     PurchQty       _qty             = naReal(),
                                     boolean        _creditRemaining = false,
                                     boolean        _calcRemaining   = true)
    {
        PurchQty    qtyAvailable = this.RORgetSubStatusFromToQty(_purchLine, _qty, _purchLine.PurchUnit);
        PurchQty    qtyUpdate;
        PurchQty    numOfRemainOrig;
        PurchQty    qtyRemainNew;
    
        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow :
                    qtyUpdate = _purchLine.PurchReceivedNow;
                    break;
    
                default :
                    qtyUpdate = qtyAvailable;
                    break;
            }
        }
    
        if (_calcRemaining)
        {
            numOfRemainOrig = _purchLine.RORRemainPurchReturn;
            qtyRemainNew    = _purchLine.RORRemainPurchReturn - qtyUpdate;
        }
    
        qtyUpdate       = qtyUpdate       == naReal() ? 0 : qtyUpdate;
        numOfRemainOrig = numOfRemainOrig == naReal() ? 0 : numOfRemainOrig;
        qtyRemainNew    = qtyRemainNew    == naReal() ? 0 : qtyRemainNew;
    
        return [qtyUpdate, numOfRemainOrig, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c> quantities.
    /// </summary>
    /// <param name="_purchLine">
    ///     The <c>PurchLine</c> record used in the calculation.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity qualifier used to determine the quantity; optional.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity update; optional.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be credited; optional.
    /// </param>
    /// <param name="_calcRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be calculated; optional.
    /// </param>
    /// <returns>
    ///     The calculated values for <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c>.
    /// </returns>
    protected container pdsCWCalcQtyInvent(
        PurchLine      _purchLine,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PdsCWInventQty  _qty                = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        return [0];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>