<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchFormLetterClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchFormLetter))]
public final class DNRPurchFormLetterClass_Extension
{
    public static RORFormLetterSubStatusController formLetterSubStatusController;
    private static Args mainArgs;

    private     boolean         canGoBatch = true;
    private     boolean         changeObjectAvailability;
    private     boolean         mustDuplicateTask;
    private     WPPWorkOrderId  workOrderId;
    private     DNRReasonCode   reasonCode;
    private     boolean         forceReselect;

    private VendInvoiceInfoTable pendingVendInvoiceInfoTable;
    private DialogButton button;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // chain-of-command wrapper methods
    static void main(Args _args)
    {
        if(_args.parmObject() && SysDictClass::isEqualOrSuperclass(classIdGet(_args.parmObject()), classNum(RORFormLetterSubStatusController)))
        {
            formLetterSubStatusController = _args.parmObject();
        }

        mainArgs = _args;
        next main(_args);
        mainArgs = null;
        formLetterSubStatusController = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchFormLetter construct(DocumentStatus _document, IdentifierName _className, IdentifierName _methodName, SysOperationExecutionMode _executionMode, MenuItemNameAction _callerMenuItem)
    {
        PurchFormLetter ret = next construct(_document, _className, _methodName, _executionMode, _callerMenuItem);

        if(!_className || !_methodName)
        {
            if(_document == DocumentStatus::RORReturnNote)
            {
                ret = PurchFormLetter_RORReturnNote::newRORReturnNote();
            }
            else if(_document == DocumentStatus::RORSubStatus)
            {
                ret = PurchFormLetter_RORSubStatus::newRORSubStatus();
            } 
        }

        BOBRentalSubStatus rentalSubStatus = formLetterSubStatusController ? formLetterSubStatusController.parmRentalSubStatus() : FormLetterServiceController::RORdocumentStatus2RentalSubStatus(_document);
        ret.RORparmRentalSubStatus(rentalSubStatus);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInitialize</Name>
				<Source><![CDATA[
    protected static PurchFormLetter constructAndInitialize(container _cachedArgs, Common _record, Object _callerForm, container _dataSourceRecordsPacked)
    {
        container dataSourceRecordsPackedLoc = _dataSourceRecordsPacked;

        if(_record && !FormDataUtil::getFormDataSource(_record) && _record.TableId == tableNum(VendInvoiceInfoTable))
        {
            Map mapTradeRecord = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

            mapTradeRecord.insert(_record.RecId, _record);
            dataSourceRecordsPackedLoc = mapTradeRecord.pack();
        }

        PurchFormLetter ret = next constructAndInitialize(_cachedArgs, _record, _callerForm, dataSourceRecordsPackedLoc);

        // RLAM - The contract is only initialized at this point so we parm the substatus into the contract as well
        ret.RORparmRentalSubStatus();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    public void  reSelect(PurchParmUpdate _purchParmUpdate, InventLocationId _inventLocationId)
    {
        next reSelect(_purchParmUpdate, _inventLocationId);

        forceReselect = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperationBody</Name>
				<Source><![CDATA[
    protected void afterOperationBody()
    {
        next afterOperationBody();

        if (this.WPPparmChangeObjectAvailability())
        {
            this.WPPchangeObjectAvailability(workOrderId, reasonCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptInit</Name>
				<Source><![CDATA[
    public void prePromptInit()
    {
        next prePromptInit();

        if ((this.parmCallerTable() && this.parmCallerTable().TableId != tableNum(VendTable))
            || this.purchTable() || this.parmLedgerJournalTrans().Voucher || wmsJournalTable_ds)
        {
            if (this.parmLedgerJournalTrans().Voucher)
            {
                if (purchFormLetterContract.parmCallerMenuItem() == menuitemActionStr(INVPurchFormLetter_ApproveJournal))
                {
                    this.showQueryForm(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurch</Name>
				<Source><![CDATA[
    public container  qtyPurch(PurchLine _purchLine, PurchQty _qty,PurchUpdate _specQty)
    {
        purchQuantity.RORparmRentalSubStatus(purchFormLetterContract.RORparmRentalSubStatus());

        container ret = next qtyPurch(_purchLine, _qty, _specQty);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(IdentifierName _callerFormName, MenuItemNameAction _callerMenuItem, boolean _isProforma)
    {
        next initialize(_callerFormName, _callerMenuItem, _isProforma);

        if (callerFormName == formStr(RORPurchTable) ||
            callerFormName == formStr(WPPWorkOrderLineDetails))
        {
            this.proforma(_isProforma);
            this.enableUpdateNowField(!_isProforma);
        }
        else if (this.INVIsExtendedRentalCredit())
        {
            this.enableUpdateNowField(false);
            this.specQty(PurchUpdate::ReceiveNow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBasedOnDocument</Name>
				<Source><![CDATA[
    protected boolean initializeBasedOnDocument(Common _record, MenuItemNameAction _callerMenuItem, container _dataSourceRecordsPacked)
    {
        boolean ret = next initializeBasedOnDocument(_record, _callerMenuItem, _dataSourceRecordsPacked);

        if (_record.TableId == tableNum(VendInvoiceInfoTable))
        {
            if (_callerMenuItem == menuitemActionStr(INVPurchFormLetter_NewInvoiceAction) || _callerMenuItem == menuitemActionStr(INVVendEditInvoiceFromSubRentalOrder))
            {
                this.parmCallerTable(null);
            }
        }
        else if (_record.TableId == tableNum(VendRORReturnNoteJour))
        {
            this.parmCallerTable(_record);
            this.parmCallerMenuItem(_callerMenuItem);
            this.reArrangeNow(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        next canGoBatch();
        return canGoBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVIsExtendedRentalCredit</Name>
				<Source><![CDATA[
    // extension methods

    private boolean INVIsExtendedRentalCredit()
    {
        return this.parmCallerMenuItem() == 'INVPurchFormLetter_InvoiceCredit';
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORIsRentalPosting</Name>
				<Source><![CDATA[
    public boolean RORIsRentalPosting()
    {
        return purchFormLetterContract.RORIsSubRentalPosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPchangeObjectAvailability</Name>
				<Source><![CDATA[
    private void WPPchangeObjectAvailability(WPPWorkOrderId _workOrderId, DNRReasonCode _reasonCode)
    {
        BOBObjectView       objectView;
        BOBObjectTable      objectTable;
        WPPWorkOrderTable   workOrderTable;
    
        select firstOnly ObjectId, IsAvailable from objectView
            exists join objectTable
            where objectTable.ObjectId == objectView.ObjectId
                join TableId from workOrderTable
                where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                &&    workOrderTable.WorkOrderId         == _workOrderId;
    
        if (objectView.ObjectId)
        {
            BOBObjectManager::changeObjectAvailability(objectView.ObjectId, !objectView.IsAvailable, _reasonCode, _workOrderId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBTransTime</Name>
				<Source><![CDATA[
    public BOBTransTime BOBTransTime(BOBTransTime _transTime = purchFormLetterContract.RORTransTime())
    {
        VendDocumentTableMap localParmTable = this.initParmTable();
    
        if (!prmisDefault(_transTime))
        {
            switch(localParmTable.TableId)
            {
                case tableNum(PurchParmTable):
                    PurchParmTable purchParmTable = localParmTable as PurchParmTable;
                    purchParmTable.BOBTransTime = _transTime;
                    break;

                case tableNum(VendInvoiceInfoTable):
                    VendInvoiceInfoTable vendInvoiceInfoTable = localParmTable as VendInvoiceInfoTable;
                    vendInvoiceInfoTable.BOBTransTime = _transTime;
                    break;
            }
        }
    
        return purchFormLetterContract.RORTransTime(_transTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmReasonCode</Name>
				<Source><![CDATA[
    public DNRReasonCode DNRparmReasonCode(DNRReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVParmButton</Name>
				<Source><![CDATA[
    public DialogButton INVParmButton(DialogButton _button = button)
    {
        button = _button;
        return button;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVparmPendingVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2021. The functionality that determines whether it concerns subrental invoicing has been moved to the contract", false)]
    public VendInvoiceInfoTable INVparmPendingVendInvoiceInfoTable(VendInvoiceInfoTable _pendingVendInvoiceInfoTable = pendingVendInvoiceInfoTable)
    {
        pendingVendInvoiceInfoTable = _pendingVendInvoiceInfoTable;
        return pendingVendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanGoBatch</Name>
				<Source><![CDATA[
    public boolean RORparmCanGoBatch(boolean _canGoBatch = canGoBatch)
    {
        canGoBatch = _canGoBatch;
        return canGoBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmChangeObjectAvailability</Name>
				<Source><![CDATA[
    public boolean WPPparmChangeObjectAvailability(boolean _changeObjectAvailability = changeObjectAvailability)
    {
        changeObjectAvailability = _changeObjectAvailability;
    
        return changeObjectAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmMustDuplicateTask</Name>
				<Source><![CDATA[
    public boolean WPPParmMustDuplicateTask(boolean _mustDuplicateTask = purchFormLetterContract.WPPParmMustDuplicateTask())
    {
        return purchFormLetterContract.WPPParmMustDuplicateTask(_mustDuplicateTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmWorkOrderId</Name>
				<Source><![CDATA[
    public WPPWorkOrderId WPPparmWorkOrderId(WPPWorkOrderId _workOrderId = workOrderId)
    {
        workOrderId = _workOrderId;
        return workOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmWorkOrderLineRecId</Name>
				<Source><![CDATA[
    public WPPWorkOrderLineRecId WPPParmWorkOrderLineRecId(WPPWorkOrderLineRecId _workOrderLineRecId = purchFormLetterContract.WPPParmWorkOrderLineRecId())
    {
        return purchFormLetterContract.WPPParmWorkOrderLineRecId(_workOrderLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmForceReselect</Name>
				<Source><![CDATA[
    public boolean DNRParmForceReselect(boolean _forceReselect = forceReselect)
    {
        forceReselect = _forceReselect;
        return forceReselect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>