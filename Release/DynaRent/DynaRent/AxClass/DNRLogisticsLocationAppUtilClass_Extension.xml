<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLogisticsLocationAppUtilClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LogisticsLocationAppUtil))]
public final class DNRLogisticsLocationAppUtilClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityFieldId</Name>
				<Source><![CDATA[
    static FieldId getEntityFieldId(TableId _callerTableId)
    {
        FieldId ret = next getEntityFieldId(_callerTableId);

        return (_callerTableId == tableNum(RORVenueLocation) ? fieldNum(RORVenueLocation, Venue) : ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFieldIdIsPrimary</Name>
				<Source><![CDATA[
    static FieldId getEntityFieldIdIsPrimary(TableId _callerTableId)
    {
        FieldId ret = next getEntityFieldIdIsPrimary(_callerTableId);

        return (_callerTableId == tableNum(RORVenueLocation) ? fieldNum(RORVenueLocation, IsPrimary) : ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationFieldId</Name>
				<Source><![CDATA[
    static FieldId getEntityLocationFieldId(TableId _callerTableId)
    {
        FieldId ret = next getEntityLocationFieldId(_callerTableId);

        return (_callerTableId == tableNum(RORVenueLocation) ? fieldNum(RORVenueLocationRole, VenueLocation) : ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationRoleTableId</Name>
				<Source><![CDATA[
    public static TableId getEntityLocationRoleTableId(TableId _entityLocationTableId)
    {
        TableId ret = next getEntityLocationRoleTableId(_entityLocationTableId);

        return (_entityLocationTableId == tableNum(RORVenueLocation) ? tableNum(RORVenueLocationRole) : ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationTableId</Name>
				<Source><![CDATA[
    public static TableId getEntityLocationTableId(TableId _entityLocationTableId)
    {
        TableId ret = next getEntityLocationTableId(_entityLocationTableId);

        return (_entityLocationTableId == tableNum(RORVenueTable) ? tableNum(RORVenueLocation) : ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityType2TableId</Name>
				<Source><![CDATA[
    public static TableId entityType2TableId(LogisticsLocationEntityType _entityType)
    {
        TableId ret = next entityType2TableId(_entityType);

        return (_entityType == LogisticsLocationEntityType::RORVenue ? tableNum(RORVenueLocation) : ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public static void updateQuery(Query _query, TableId _tableId, RefRecId _entity, NoYes _isPostalAddress)
    {
        next updateQuery(_query, _tableId, _entity, _isPostalAddress);
        
        if (_tableId == tableNum(RORVenueLocation))
        {
            QueryBuildDataSource qbdsEntityLocation = _query.dataSourceTable(_tableId);

            qbdsEntityLocation.addRange(fieldNum(RORVenueLocation,IsPostalAddress)).value(SysQuery::value(_isPostalAddress));
            qbdsEntityLocation.addRange(fieldNum(RORVenueLocation,Venue)).value(SysQuery::value(_entity));
            qbdsEntityLocation.addSortField(fieldNum(RORVenueLocation,IsPrimary), SortOrder::Descending);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>