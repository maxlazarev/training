<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationLineTypeClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationLineType))]
public final class DNRSalesQuotationLineTypeClass_Extension
{
    private DNRSalesQuotationLineTypeStrategy strategy;

    private boolean             isCompensatingTrans;
    private InventTransOriginId originId;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instantiateInventUpd_DeleteMovement</Name>
				<Source><![CDATA[
    protected InventUpd_DeleteMovement instantiateInventUpd_DeleteMovement(Common _childBuffer, InventMovSubType _inventMovSubType)
    {
        InventUpd_DeleteMovement estimated = next instantiateInventUpd_DeleteMovement(_childBuffer, _inventMovSubType);

        if (isCompensatingTrans)
        {
            estimated.BOBParmIsCompensatingTrans(true);
        }

        if (!originId)
        {
            originId = estimated.movement().inventTransOriginId();
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventUpd_Estimated</Name>
				<Source><![CDATA[
    protected InventUpd_Estimated instantiateInventUpd_Estimated(Common _childBuffer, InventMovSubType _inventMovSubType)
    {
        InventUpd_Estimated estimated = next instantiateInventUpd_Estimated(_childBuffer, _inventMovSubType);

        if (isCompensatingTrans)
        {
            estimated.BOBParmIsCompensatingTrans(true);
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventMovement</Name>
				<Source><![CDATA[
    protected InventMovement instantiateInventMovement(InventMovSubType _inventMovSubType, Common _childBuffer)
    {
        InventMovement movement = next instantiateInventMovement(_inventMovSubType, _childBuffer);

        if (originId)
        {
            // RLAM - We reuse InventTransOriginId, so we don't end up with duplicates in the `InventTransOrigin' table.
            movement.inventTransOriginId(originId);
        }

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnDelete</Name>
				<Source><![CDATA[
    public InventUpd_DeleteMovement updateInventoryOnDelete(Common _childBuffer)
    {
        InventUpd_DeleteMovement ret = next updateInventoryOnDelete(_childBuffer);

        if (salesQuotationLine.RORTradeType == RORTradeType::Rental || salesQuotationLine.RORTradeType == RORTradeType::SubRental)
        {
            isCompensatingTrans = true;

            InventUpd_DeleteMovement deleteMovement = this.instantiateInventUpd_DeleteMovement(_childBuffer, InventMovSubType::BOBCompensatingTrans);

            isCompensatingTrans = false;

            if (deleteMovement)
            {
                deleteMovement.updateNow();
            }
        }

        originId = 0;

        // RLAM - We intentionally return MSFT's instance here, because it is used later on in the code.
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnInsert</Name>
				<Source><![CDATA[
    public InventUpd_Estimated updateInventoryOnInsert(Common _childBuffer)
    {
        InventUpd_Estimated estimated;

        if (salesQuotationLine.RORTradeType == RORTradeType::Rental || salesQuotationLine.RORTradeType == RORTradeType::SubRental)
        {
            isCompensatingTrans = true;

            estimated = this.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::BOBCompensatingTrans);

            isCompensatingTrans = false;

            if (estimated)
            {
                estimated.updateNow();
            }

            if (!originId)
            {
                originId = estimated.movement().inventTransOriginId();
            }
        }

        estimated = next updateInventoryOnInsert(_childBuffer);
        
        originId = 0;

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnUpdate</Name>
				<Source><![CDATA[
    public InventUpd_Estimated updateInventoryOnUpdate(Common _childBuffer)
    {
        InventUpd_Estimated estimated;

        if (salesQuotationLine.RORTradeType == RORTradeType::Rental || salesQuotationLine.RORTradeType == RORTradeType::SubRental)
        {
            isCompensatingTrans = true;

            estimated = this.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::BOBCompensatingTrans);

            isCompensatingTrans = false;

            if (estimated)
            {
                estimated.updateNow();
            }

            if (!originId)
            {
                originId = estimated.movement().inventTransOriginId();
            }
        }

        estimated = next updateInventoryOnUpdate(_childBuffer);

        originId = 0;

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable, boolean _searchPrice)
    {
        this.BOBInitFromInventTable(salesQuotationLine, _inventTable);
        
        using (DNRPrimitiveDisposableContext context = new DNRPrimitiveDisposableContext())
        {
            context.DNRparmBoolean(true);   // We dont want to have the defaulting logic to be trigged from the next call. It will be called in RORInitFromInventTable method
            next initFromInventTable(_inventTable, _searchPrice);
        }

        this.RORInitFromInventTable(salesQuotationLine, _inventTable);
        this.WPPInitFromInventTable(salesQuotationLine, _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void initFromSalesQuotationLine(SalesQuotationLine      _salesQuotationLine,
                                     boolean                _copyPrecisely,
                                     boolean                _copyPriceDisc,
                                     boolean                _copyQty,
                                     Qty                    _qty,
                                     PdsCWInventQty         _cwQty)
    {
        next initFromSalesQuotationLine(_salesQuotationLine, _copyPrecisely, _copyPriceDisc, _copyQty, _qty, _cwQty);

        this.RORInitFromSalesQuotationLine(salesQuotationLine, _salesQuotationLine);
        this.BOBInitFromSalesQuotationLine(salesQuotationLine, _salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    void initFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable, boolean _ignoreInventDim)
    {
        next initFromSalesQuotationTable(_salesQuotationTable, _ignoreInventDim);

        this.RORInitFromSalesQuotationTable(salesQuotationLine, _salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    void  initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        next initFromTmpSuppItem(_tmpSuppItem);

        SalesQuotationLine salesQuotationLineParent = SalesQuotationLine::findInventTransId(_tmpSuppItem.InventTransId);
        salesQuotationLine.RORParentLineRecId = salesQuotationLineParent.RecId;
        salesQuotationLine.RORRentalLine::initFromParent(salesQuotationLineParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetupType</Name>
				<Source><![CDATA[
    protected InventItemOrderSetupType inventItemOrderSetupType()
    {
        InventItemOrderSetupType orderSetupType = next inventItemOrderSetupType();
        
        switch(salesQuotationLine.RORTradeType)
        {
            case RORTradeType::Rental:
                orderSetupType = InventItemOrderSetupType::RORRental;
                break;
            
            case RORTradeType::SubRental:
                orderSetupType = InventItemOrderSetupType::RORSubRental;
                break;
        }

        return orderSetupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        next initValue();

        this.RORInitValue(salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    public void inserting()
    {
        next inserting();

        if ((salesQuotationLine.ItemId || salesQuotationLine.SalesCategory)
        && !salesQuotationLine.LineNum)
        {
            salesQuotationLine.LineNum = SalesQuotationLine::lastLineNum(salesQuotationLine.QuotationId) + 1.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    public void inserted()
    {
        next inserted();

        this.RORCreateRentalDates(salesQuotationLine);

        if (!salesQuotationLine.INVSkipTierMultiplierCalcOnCreation)  //To avoid RAG based recalcluation if its done at the source i.e. RLE
        {
            salesQuotationLine.INVSetTierMultiplierRateOnCreation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        next updating();

        SalesQuotationLine salesQuotationLineOrig = salesQuotationLine.orig();

        if (this.isClearContractDataCacheNeeded(salesQuotationLine, salesQuotationLineOrig))
        {
            RAGContractData::clearContractCacheData(salesQuotationLine.TableId, salesQuotationLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClearContractDataCacheNeeded</Name>
				<Source><![CDATA[
    protected boolean isClearContractDataCacheNeeded(SalesQuotationLine _salesQuotationLine, SalesQuotationLine _salesQuotationLineOrig)
    {
        return  _salesQuotationLine.INVInvoiceProfileId   != _salesQuotationLineOrig.INVInvoiceProfileId
            ||  _salesQuotationLine.DNRCalendarId         != _salesQuotationLineOrig.DNRCalendarId
            ||  _salesQuotationLine.RORPriceTimeUnit      != _salesQuotationLineOrig.RORPriceTimeUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    public void updated(SalesQuotationLine _salesQuotationLineOrig)
    {
        next updated(_salesQuotationLineOrig);
                   
        salesQuotationLine.INVSetTierMultiplierRateOnCreation();
    
        if (_salesQuotationLineOrig.BOBSellFixedAsset != salesQuotationLine.BOBSellFixedAsset)
        {
            this.BOBSynchronizeRentalTrans(salesQuotationLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = next validateField(_fieldId);

        if (ret)
        {
            ret = ret && this.RORValidateField(salesQuotationLine, _fieldId);
            ret = ret && this.BOBValidateField(salesQuotationLine, _fieldId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret = next validateWrite();

        if (ret)
        {
            ret = ret && this.RORValidateWrite(salesQuotationLine);
            ret = ret && this.BOBValidateWrite(salesQuotationLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBInitFromInventTable</Name>
				<Source><![CDATA[
    // extension methods

    

    private void BOBInitFromInventTable(SalesQuotationLine _salesQuotationLine, InventTable _inventTable)
    {
        BOBRentalTypeId rentalTypeId = _inventTable.BOBRentalType().RentalTypeId;

        _salesQuotationLine.BOBRentalTypeIdRequested = rentalTypeId;
        _salesQuotationLine.BOBRentalTypeIdAssigned  = rentalTypeId;

        if (_salesQuotationLine.RORTradeType == RORTradeType::SalesPurch)
        {
            _salesQuotationLine.BOBSellFixedAsset = _inventTable.BOBAutoAssetConvertSales;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBInitFromSalesQuotationLine</Name>
				<Source><![CDATA[
    private void BOBInitFromSalesQuotationLine(SalesQuotationLine _salesQuotationLineTo, SalesQuotationLine _salesQuotationLineFrom)
    {
        _salesQuotationLineTo.BOBRentalTypeIdRequested  = _salesQuotationLineFrom.BOBRentalTypeIdRequested;
        _salesQuotationLineTo.BOBRentalTypeIdAssigned   = _salesQuotationLineFrom.BOBRentalTypeIdAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBSynchronizeRentalTrans</Name>
				<Source><![CDATA[
    private void BOBSynchronizeRentalTrans(SalesQuotationLine _salesQuotationLine)
    {
        InventTrans                             inventTrans;
        InventTransOriginSalesQuotationLine     originSalesQuotationLine;
    
        ttsBegin;
    
        while select TableId from originSalesQuotationLine
        where originSalesQuotationLine.SalesQuotationLineDataAreaId     == _salesQuotationLine.dataAreaId
        &&    originSalesQuotationLine.SalesQuotationLineInventTransId  == _salesQuotationLine.InventTransId
            join  inventTrans
            where inventTrans.InventTransOrigin == originSalesQuotationLine.InventTransOrigin
            &&    !inventTrans.BOBIsCompensatingTrans
        {
            InventMovement inventMovement = InventMovement::construct(_salesQuotationLine);
            BOBRentalTransManager transManager = BOBRentalTransManager::newInventMovement(inventMovement, inventTrans);
            transManager.parmDoUpdateBuffer(true);
            transManager.synchronize();
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBValidateField</Name>
				<Source><![CDATA[
    private boolean BOBValidateField(SalesQuotationLine _salesQuotationLine, FieldId _fieldIdToValidate)
    {
        boolean ret = true;
        SalesQuotationLine  salesQuotationLineOrig = _salesQuotationLine.orig();
    
        if (_fieldIdToValidate == fieldNum(SalesQuotationLine, BOBSellFixedAsset)
        &&   salesQuotationLineOrig.BOBSellFixedAsset == NoYes::No
        &&  _salesQuotationLine.BOBSellFixedAsset == NoYes::Yes)
        {
            SalesShippingDate dlvDate = _salesQuotationLine.dlvDate();

            if (dlvDate)
            {
                InventDim inventDim = _salesQuotationLine.inventDim();
    
                if (inventDim.inventSerialId)
                {
                    BOBObjectTable      objectTable;
                    AssetTable          assetTable;
                    BOBObjectAssetLog   objectAssetLog;

                    select AssetId from assetTable
                        exists join objectAssetLog
                        where objectAssetLog.AssetCompanyId == assetTable.DataAreaId
                        &&    objectAssetLog.AssetId == assetTable.AssetId
                        &&    objectAssetLog.ValidFrom <= dlvDate
                        &&  (!objectAssetLog.ValidTo || objectAssetLog.ValidTo >= dlvDate)
                            join TableId from objectTable
                            where objectTable.ObjectId == objectAssetLog.ObjectId
                            &&    objectTable.InventSerialId == inventDim.inventSerialId;

                    if (!assetTable.AssetId)
                    {
                        ret = checkFailed(strFmt("@DNR8278", "@DNR6177", inventDim.inventSerialId));
                    }
                }
            }
            else
            {
                ret = checkFailed(strFmt("@DNR4370", "@DNR10179"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBValidateWrite</Name>
				<Source><![CDATA[
    private boolean BOBValidateWrite(SalesQuotationLine _salesQuotationLine)
    {
        boolean ret = true;
        
        if (_salesQuotationLine.BOBSellFixedAsset)
        {
            BOBRentalType       rentalType;
            BOBObjectTable      objectTable;
            AssetTable          assetTable;
            BOBObjectAssetLog   objectAssetLog;

            select firstOnly Classification from rentalType
            where rentalType.RentalTypeId == _salesQuotationLine.BOBRentalTypeId()
                outer join RecId from objectTable
                where objectTable.RentalTypeId == rentalType.RentalTypeId
                &&   !objectTable.InventSerialId
                    outer join TableId from objectAssetLog
                    where objectAssetLog.ObjectId == objectTable.ObjectId
                        outer join RecId from assetTable
                        where assetTable.DataAreaId == objectAssetLog.AssetCompanyId
                        &&    assetTable.AssetId == objectAssetLog.AssetId
                        &&    assetTable.BOBIsBulkParent;
    
            if (rentalType.Classification == BOBRentalTypeClassification::Virtual
            || (rentalType.Classification == BOBRentalTypeClassification::Bulk && (!objectTable || !assetTable)))
            {
                ret = checkFailed(strFmt("@DNR8163", _salesQuotationLine.ItemId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateRentalDates</Name>
				<Source><![CDATA[
    private void RORCreateRentalDates(SalesQuotationLine _salesQuotationLine)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes)))
        {
            _salesQuotationLine.RORRentalLine::createRentalDateTimes();
        }            
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromInventTable</Name>
				<Source><![CDATA[
    private void RORInitFromInventTable(SalesQuotationLine _salesQuotationLine, InventTable _inventTable)
    {
        QuotationType quotationType = _salesQuotationLine.salesQuotationTable().QuotationType;

        _salesQuotationLine.RORAllowQtyEdit     = !_inventTable.BOBIsSerializedRentalItem();
        _salesQuotationLine.RORKitComponentType = BOBRentalType::findFromItemId(_inventTable.ItemId).RORKitStandalone == RORKitStandalone::Kit ? RORKitComponentType::Kit : RORKitComponentType::Standalone;
                
        _salesQuotationLine.RORRentalLine::initFromInventTable(
            _inventTable,
            quotationType == quotationType::RORRental || quotationType == quotationType::RORProjRental,
            (_salesQuotationLine.QuotationType == QuotationType::RORRental || _salesQuotationLine.QuotationType == QuotationType::RORProjRental)
            && (_salesQuotationLine || _salesQuotationLine.RORTradeType != RORTradeType::SalesPurch));
    
        _salesQuotationLine.RORRentalLine::initFromRentalType(_inventTable.ItemId);  
        
        this.RORInitFromInventSetup(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromInventSetup</Name>
				<Source><![CDATA[
    private void RORInitFromInventSetup(InventTable _inventTable = salesQuotationLine.InventTable())
    {
        InventDistinctProductDimensionSpecificDefaultingArgsSalesQuotationLine defaultingArgs = InventDistinctProductDimensionSpecificDefaultingArgsSalesQuotationLine::construct(_inventTable, true, true);
        
        defaultingArgs.ItemOrderSetupType = this.inventItemOrderSetupType();

        InventDistinctProductOrderDefaultingController::itemIdModified(this, defaultingArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromSalesQuotationLine</Name>
				<Source><![CDATA[
    private void RORInitFromSalesQuotationLine(SalesQuotationLine _salesQuotationLineTo, SalesQuotationLine _salesQuotationLineFrom)
    {
        if (_salesQuotationLineTo.QuotationType == QuotationType::RORProjRental)
        {
            _salesQuotationLineTo.RORProjTransType          = _salesQuotationLineFrom.RORProjTransType;
            _salesQuotationLineTo.BOBRentalTypeIdRequested  = _salesQuotationLineFrom.BOBRentalTypeIdRequested;
            _salesQuotationLineTo.BOBRentalTypeIdAssigned   = _salesQuotationLineFrom.BOBRentalTypeIdAssigned;
            _salesQuotationLineTo.WPPWorkOrderTemplateId    = _salesQuotationLineFrom.WPPWorkOrderTemplateId;
        }
    
        _salesQuotationLineTo.RORRentalLine::initFromLineBuffer(_salesQuotationLineFrom);
    
        if (_salesQuotationLineTo.QuotationType == QuotationType::RORProjRental)
        {
            _salesQuotationLineTo.BOBSellFixedAsset         = _salesQuotationLineFrom.BOBSellFixedAsset;
            _salesQuotationLineTo.RORKitComponentType       = _salesQuotationLineFrom.RORKitComponentType;
            _salesQuotationLineTo.RORRentalGrossAmount      = _salesQuotationLineFrom.RORRentalGrossAmount;
            _salesQuotationLineTo.RORLineType               = _salesQuotationLineFrom.RORLineType;
            _salesQuotationLineTo.RORReturnInventLocationId = _salesQuotationLineFrom.RORReturnInventLocationId;
            _salesQuotationLineTo.RORVenueCode              = _salesQuotationLineFrom.RORVenueCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromSalesQuotationTable</Name>
				<Source><![CDATA[
    private void RORInitFromSalesQuotationTable(SalesQuotationLine _salesQuotationLineTo, SalesQuotationTable _salesQuotationTableFrom)
    {
        _salesQuotationLineTo.RORRentalLine::initFromHeaderBuffer(_salesQuotationTableFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitValue</Name>
				<Source><![CDATA[
    private void RORInitValue(SalesQuotationLine _salesQuotationLine)
    {
        _salesQuotationLine.RORRentalLine::initValue();
    
        // When creating from this form, make it rental by default when the SalesQuotationTable().QuotationType is RORRentalOrder
        // when item has been chosen then update the RORTradeType from the InventTable
        _salesQuotationLine.RORTradeType = (_salesQuotationLine.salesQuotationTable().QuotationType == QuotationType::RORRental ? RORTradeType::Rental : RORTradeType::SalesPurch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORValidateField</Name>
				<Source><![CDATA[
    private boolean RORValidateField(SalesQuotationLine _salesQuotationLine, FieldId _fieldIdToValidate)
    {
        boolean             ret                     = true;
        SalesQuotationLine  salesQuotationLineOrig  = _salesQuotationLine.orig();
    
        if (_fieldIdToValidate == fieldNum(SalesQuotationLine, RORReturnInventLocationId)
        &&  !_salesQuotationLine.RORReturnInventLocationId
        &&  salesQuotationLineOrig.RORReturnInventLocationId)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldId2pname(tableNum(SalesQuotationLine), _fieldIdToValidate)));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORValidateModifyInventDim</Name>
				<Source><![CDATA[
    public boolean RORValidateModifyInventDim(InventDim _inventDim, FieldId _dimFieldId)
    {
        boolean ret = true;
    
        if (_dimFieldId == fieldNum(InventDim, InventSerialId)
        && (salesQuotationLine.RORTradeType == RORTradeType::Rental || salesQuotationLine.RORTradeType == RORTradeType::SubRental))
        {
            ret = BOBObjectAssignmentEngine::construct(salesQuotationLine, _inventDim.InventSerialId).validate();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORValidateWrite</Name>
				<Source><![CDATA[
    private boolean RORValidateWrite(SalesQuotationLine _salesQuotationLine)
    {
        return _salesQuotationLine.RORRentalLine::validateWrite() && _salesQuotationLine.RORCheckTradeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPInitFromInventTable</Name>
				<Source><![CDATA[
    private void WPPInitFromInventTable(SalesQuotationLine _salesQuotationLine, InventTable _inventTable)
    {
        InventTableModule inventTableModule = InventTableModule::find(_inventTable.ItemId, ModuleInventPurchSales::Sales);
    
        _salesQuotationLine.WPPWorkOrderTemplateId = RORInventItemSetup::getWorkOrderTemplateId(_salesQuotationLine, _inventTable);
        _salesQuotationLine.setTaxItemGroup(RORInventItemSetup::getTaxItemGroup(_salesQuotationLine, inventTableModule));
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVsetPriceMultiplier</Name>
				<Source><![CDATA[
    public void INVsetPriceMultiplier(
        TransDateTime       _fromDateTime = DateTimeUtil::minValue(),
        TransDateTime       _toDateTime = DateTimeUtil::minValue(),
        boolean             _updatePeriods = true,
        SalesQuotationLine  _salesQuotationLineParent = null)
    {
        salesQuotationLine.RORRentalLine::updateCalendarPeriodsMultiplierRate(
            salesQuotationLine.RORRentalDateTimesHost::rentalDateTimes(),
            FINRentalInvoiceProfile::find(salesQuotationLine.INVInvoiceProfileId),
            RAGAgreementType::PriceTier,
            _salesQuotationLineParent,
            _updatePeriods,
            _fromDateTime,
            _toDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDeleteChildren</Name>
				<Source><![CDATA[
    public boolean RORDeleteChildren()
    {
        return this.parmSalesQuotationLineTypeStrategy().RORDeleteChildren();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationLineTypeStrategy</Name>
				<Source><![CDATA[
    public DNRSalesQuotationLineTypeStrategy parmSalesQuotationLineTypeStrategy()
    {
        if(!strategy)
        {
            strategy = DNRSalesQuotationLineTypeStrategy::construct(this);
        }
        return strategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>