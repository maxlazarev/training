<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanBoardMenuItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to marshall data between the server side HiGHPlanBoard control and the browser
/// </summary>
[DataContractAttribute]
class HiGHPlanBoardMenuItem extends FormDataContract
{
    //Member variables
    private int     id          = -1;
    private str     label       = '';
    private str     value       = '';
    private boolean enabled     = true;
    private int     itemType    = 10;
    
    //MenuItemTypes
    private static int MenuItem  = 10;
    private static int Field     = 20;
    private static int FieldValue= 30;
    private static int Header    = 40;
    private static int Icon      = 50;
    private static int Separator = 60;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Holds the id associated with the menu item. This id will be returned to the server when a user clicks on the menu item.
    /// The id is not unique, and a value of -1 (Default) indicates that the menu item is not clickable (isLink() returns false)
    /// </summary>
    /// <param name = "_id">Menu item id</param>
    /// <returns>Menu item id</returns>
    [DataMemberAttribute('Id')]
    public int parmId(int _id = id)
    {
        if (!prmIsDefault(_id))
        {
            id = _id;
        }

        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// The label that would be used for types Header, MenuItem, Field, Field part of FieldValue, and as tooltip of Icon
    /// </summary>
    /// <param name = "_isLink">Text to be used as label</param>
    /// <returns>Text used as label</returns>
    [DataMemberAttribute('Label')]
    public str parmLabel(str _label = label)
    {
        if (!prmIsDefault(_label))
        {
            label = _label;
        }

        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The value that would be used for type FieldValue, and URL to be used for type Icon
    /// </summary>
    /// <param name = "_isLink">Text to be used as value</param>
    /// <returns>Text used as value</returns>
    [DataMemberAttribute('Value')]
    public str parmValue(str _value = value)
    {
        if (!prmIsDefault(_value))
        {
            value = _value;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether or not the menu item is enabled
    /// </summary>
    /// <param name = "_enabled">Boolean specifying if item is enabled</param>
    /// <returns>Boolean specifying if item is enabled</returns>
    [DataMemberAttribute('Enabled')]
    public boolean parmEnabled(boolean _enabled = enabled)
    {
        if (!prmIsDefault(_enabled))
        {
            enabled = _enabled;
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies how the menuitem will be rendered. Types include:
    /// MenuItem  (10) - A typical Ax7 menu item
    /// Field     (20) - Simple text
    /// FieldValue(30) - Text label with a value (Only value can be a link)
    /// Header    (40) - Simple header text
    /// Icon      (50) - Icon
    /// Separator (60) - Horizontal line to seperate items
    /// </summary>
    /// <param name = "_itemType">Specified the item type</param>
    /// <returns>Item type used</returns>
    [DataMemberAttribute('ItemType')]
    public int parmItemType(int _itemType = itemType)
    {
        if (!prmIsDefault(_itemType))
        {
            itemType = _itemType;
        }

        return itemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether or not the user can click on this menu item
    /// </summary>
    /// <param name = "_isLink">The parameter for this method is negated. We only provide it to be able to expose the function thorugh the datacontract</param>
    /// <returns>String name of a field in the data source</returns>
    [DataMemberAttribute('IsLink')]
    public boolean isLink(boolean _isLink = true)
    {
        return (id != -1 && enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMenuItem</Name>
				<Source><![CDATA[
    //Constructors

    /// <summary>
    /// Returns a new menuitem
    /// </summary>
    /// <param name = "_label">Text label associated with this item</param>
    /// <param name = "_enabled">Whether the item will be enabled, or greyed out</param>
    /// <param name = "_id">The id assigned to this item. This would be returned on the click() event of the popup</param>
    /// <returns>HiGHPlanBoardMenuItem object</returns>
    public static HiGHPlanBoardMenuItem newMenuItem(str _label, boolean _enabled = true, int _id = -1)
    {
        HiGHPlanBoardMenuItem planBoardMenuItem = new HiGHPlanBoardMenuItem();
        planBoardMenuItem.parmItemType(HiGHPlanBoardMenuItem::MenuItem);
        planBoardMenuItem.parmId(_id);
        planBoardMenuItem.parmEnabled(_enabled);
        planBoardMenuItem.parmLabel(_label);

        return planBoardMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new field item
    /// </summary>
    /// <param name = "_label">Text label associated with this item</param>
    /// <param name = "_enabled">Whether the item will be enabled, or greyed out</param>
    /// <param name = "_id">The id assigned to this item. This would be returned on the click() event of the popup. If not supplied, or -1, the item will not be clickable</param>
    /// <returns>HiGHPlanBoardMenuItem object</returns>
    public static HiGHPlanBoardMenuItem newField(str _label, boolean _enabled = true, int _id = -1)
    {
        HiGHPlanBoardMenuItem planBoardMenuItem = new HiGHPlanBoardMenuItem();
        planBoardMenuItem.parmItemType(HiGHPlanBoardMenuItem::Field);
        planBoardMenuItem.parmId(_id);
        planBoardMenuItem.parmEnabled(_enabled);
        planBoardMenuItem.parmLabel(_label);

        return planBoardMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new field and value item
    /// </summary>
    /// <param name = "_label">Text label associated with this item</param>
    /// <param name = "_value">The parameter for this method is negated. We only provide it to be able to expose the function thorugh the datacontract</param>
    /// <param name = "_enabled">Whether the item will be enabled, or greyed out</param>
    /// <param name = "_id">The id assigned to this item. This would be returned on the click() event of the popup. If not supplied, or -1, the item will not be clickable</param>
    /// <returns>HiGHPlanBoardMenuItem object</returns>
    public static HiGHPlanBoardMenuItem newFieldValue(str _label, str _value, boolean _enabled = true, int _id = -1)
    {
        HiGHPlanBoardMenuItem planBoardMenuItem = new HiGHPlanBoardMenuItem();
        planBoardMenuItem.parmItemType(HiGHPlanBoardMenuItem::FieldValue);
        planBoardMenuItem.parmId(_id);
        planBoardMenuItem.parmEnabled(_enabled);
        planBoardMenuItem.parmLabel(_label);
        planBoardMenuItem.parmValue(_value);

        return planBoardMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new header item
    /// </summary>
    /// <param name = "_label">Text label associated with this item</param>
    /// <returns>HiGHPlanBoardMenuItem object</returns>
    public static HiGHPlanBoardMenuItem newHeader(str _label)
    {
        HiGHPlanBoardMenuItem planBoardMenuItem = new HiGHPlanBoardMenuItem();
        planBoardMenuItem.parmItemType(HiGHPlanBoardMenuItem::Header);
        planBoardMenuItem.parmLabel(_label);

        return planBoardMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new icon item
    /// </summary>
    /// <param name = "_tooltip">Text tooltip associated with this icon</param>
    /// <param name = "_imageResource">Path to the image resource to be used</param>
    /// <param name = "_id">The id assigned to this item. This would be returned on the click() event of the popup. If not supplied, or -1, the item will not be clickable</param>
    /// <returns>HiGHPlanBoardMenuItem object</returns>
    public static HiGHPlanBoardMenuItem newIcon(str _tooltip, str _imageResource, int _id = -1)
    {
        HiGHPlanBoardMenuItem planBoardMenuItem = new HiGHPlanBoardMenuItem();
        planBoardMenuItem.parmItemType(HiGHPlanBoardMenuItem::Icon);
        planBoardMenuItem.parmId(_id);
        planBoardMenuItem.parmLabel(_tooltip);
        planBoardMenuItem.parmValue(_imageResource);

        return planBoardMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSeperator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new seperator item
    /// </summary>
    /// <returns>HiGHPlanBoardMenuItem object</returns>
    public static HiGHPlanBoardMenuItem newSeperator()
    {
        HiGHPlanBoardMenuItem planBoardMenuItem = new HiGHPlanBoardMenuItem();
        planBoardMenuItem.parmItemType(HiGHPlanBoardMenuItem::Separator);

        return planBoardMenuItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>