<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRDataUpgrade_DNRReasonTableGlobalization</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete("DNRDeletedObjects01_2020. Class has been made obsolete", false)]
class DNRDataUpgrade_DNRReasonTableGlobalization extends RunBaseBatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        
        dialog.addText("@DNR:DataUpgradeDNRReasonTableGlobal");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.updateReasonCodeTableRecords();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DNRDataUpgrade_DNRReasonTableGlobalization dataUpgrade;
        
        dataUpgrade = new DNRDataUpgrade_DNRReasonTableGlobalization();

        if (dataUpgrade.prompt())
        {
            dataUpgrade.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReasonCodeRecord</Name>
				<Source><![CDATA[
    private void updateReasonCodeRecord(DNRReasonCode _reasonCode)
    {
        DNRReasonTable reasonTableUpdate = DNRReasonTable::find(_reasonCode, true);

        if (reasonTableUpdate)
        {
            reasonTableUpdate.ReasonCode = strFmt("%1_%2", reasonTableUpdate.ReasonCode, reasonTableUpdate.DataAreaId);
            reasonTableUpdate.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReasonCodeTableRecords</Name>
				<Source><![CDATA[
    private void updateReasonCodeTableRecords()
    {
        NumberOfRecords updateCounter = 0;
        DNRReasonTable  reasonCode;
        Map             reasonCodeMap = new Map(Types::String, Types::String);
        Set             reasonCodeSet = new Set(Types::String);

        //Step#1: load all reason code records into map
        while select crosscompany reasonCode
        order by reasonCode.DataAreaId
        {
            if (   reasonCodeSet.in(reasonCode.ReasonCode)
                && !reasonCodeMap.exists(reasonCode.ReasonCode))
            {
                //Capture duplicate records in map
                reasonCodeMap.insert(reasonCode.ReasonCode, reasonCode.DataAreaId);
            }
            
            reasonCodeSet.add(reasonCode.ReasonCode);
        }

        //Step#2: Update the reasonCode value with _<DataAreaId>
        if (!reasonCodeMap.empty())
        {
            MapEnumerator reasonCodeEnum = reasonCodeMap.getEnumerator();

            while (reasonCodeEnum.moveNext())
            {
                if (curExt() != reasonCodeEnum.currentValue())
                {
                    changecompany(reasonCodeEnum.currentValue())
                    {
                        this.updateReasonCodeRecord(reasonCodeEnum.currentKey());
                    }
                }
                else
                {
                    this.updateReasonCodeRecord(reasonCodeEnum.currentKey());
                }
                updateCounter++;
            }
        }

        info (strFmt("@DNR:DataUpgradeDNRReasonTableNoOfRecords", updateCounter));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>