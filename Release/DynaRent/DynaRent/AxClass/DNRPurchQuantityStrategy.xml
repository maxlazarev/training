<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchQuantityStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DNRExtensionStrategyFactoryAttribute(classStr(PurchQuantity))]
class DNRPurchQuantityStrategy
{
    private PurchQuantity purchQuantity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPurchQuantity</Name>
				<Source><![CDATA[
    protected final PurchQuantity parmPurchQuantity()
    {
        return purchQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchQuantity</Name>
				<Source><![CDATA[
    private void initializePurchQuantity(PurchQuantity _purchQuantity)
    {
        purchQuantity = _purchQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRPurchQuantityStrategy construct(PurchQuantity _purchQuantity)
    {
        DNRExtensionStrategyFactoryAttribute    attribute   = new DNRExtensionStrategyFactoryAttribute(classId2Name(classIdGet(_purchQuantity)));
        DNRPurchQuantityStrategy                instance    = SysExtensionAppClassFactory::DNRGetClassFromExtensionStrategyFactoryAttribute(classStr(DNRPurchQuantityStrategy), attribute) as DNRPurchQuantityStrategy;

        instance.initializePurchQuantity(_purchQuantity);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORgetSubStatusFromToQty</Name>
				<Source><![CDATA[
    public Qty RORgetSubStatusFromToQty(
        PurchLine       _purchLine,
        InventQty       _requestedQty,
        UnitIdBase      _unitId,
        TransDateTime   _checkTransDateTime = DateTimeUtil::minValue())
    {
        BOBRentalSubStatus      subStatusFrom, subStatusTo;
        BOBRentalTrans          rentalTrans;
        InventTransOrigin       inventTransOrigin;
        Qty                     qtyReturn;
    
        if (_purchLine.RORTradeType != RORTradeType::SalesPurch)
        {
            qtyReturn = _requestedQty;
    
            [subStatusFrom, subStatusTo] = purchQuantity.RORFindSubStatusFromTo(_purchLine);
            if (subStatusTo > BOBRentalSubStatus::None)
            {
                select sum(Qty) from rentalTrans
                where rentalTrans.SubStatus     >= subStatusFrom
                &&    rentalTrans.SubStatus     <= subStatusTo
                    exists join inventTransOrigin
                    where inventTransOrigin.RecId         == rentalTrans.InventTransOrigin
                    &&    inventTransOrigin.InventTransId == _purchLine.InventTransId;
    
                qtyReturn = UnitOfMeasureConverter::convert(rentalTrans.Qty,
                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(_purchLine.inventTable().inventUnitId()),
                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitId),
                                                            NoYes::Yes,
                                                            InventTable::itemProduct(_purchLine.ItemId));
            }
        }
    
        return qtyReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORfindSubStatusFromTo</Name>
				<Source><![CDATA[
    public container RORfindSubStatusFromTo(SalesPurchLine _purchLine)
    {
        return [BOBRentalSubStatus::None, BOBRentalSubStatus::None];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>