<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanboardContextMenuBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class HiGHPlanboardContextMenuBuilder
{
    protected HiGHPlanboardMenuItemCollection menuItemCollection = new HiGHPlanboardMenuItemCollection();
    protected FormRun callerFormRun;
    protected Object sender;

    #HiGHPlanBoard

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HiGHPlanboardContextMenuBuilder construct(FormRun _callerFormRun, FormDataContract _baseArgs)
    {
        HiGHPlanboardContextMenuBuilder contextMenuBuilder = HiGHPlanboardContextMenuBuilder::constructNoThrow(_callerFormRun, _baseArgs);
        
        if(!contextMenuBuilder)
        {
            throw error("@DNR:IncorrectlyInitializedContextMenuBuilder");
        }

        contextMenuBuilder.setCallerFormRun(_callerFormRun);
        contextMenuBuilder.setSender(_baseArgs);

        return contextMenuBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    protected static HiGHPlanboardContextMenuBuilder constructNoThrow(FormRun _callerFormRun, FormDataContract _baseArgs)
    {
        switch(_callerFormRun.name())
        {
            case formStr(WPPServicePlanboard):      return HiGHPlanboardContextMenuBuilder::constructForSPB(_baseArgs);
            case formStr(WPPTransportPlanboard):    return HiGHPlanboardContextMenuBuilder::constructForTPB(_baseArgs);
            case formStr(BOBObjectAvailability):    return HiGHPlanboardContextMenuBuilder::constructForGBOA(_baseArgs);
            default: return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSPB</Name>
				<Source><![CDATA[
    private static HiGHPlanboardContextMenuBuilder constructForSPB(FormDataContract _baseArgs)
    {
        HiGHPlanboardContextMenuBuilder contextMenuBuilder;

        switch(classIdGet(_baseArgs))
        {
            case classNum(HiGHPlanBoardRowItemBaseArgs):
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_SPBRowItem();
                break;

            case classNum(HiGHPlanBoardOnContextPeriodEventArgs):
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_SPBPeriod();
                break;

            case classNum(HiGHPlanBoardPlannedEventBaseArgs):
                HiGHPlanBoardPlannedEventBaseArgs plannedEventBaseArgs = _baseArgs as HiGHPlanBoardPlannedEventBaseArgs;
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_SPBEventSingle(plannedEventBaseArgs.parmRefTableId(), plannedEventBaseArgs.parmRefRecId());
                break;

            case classNum(HiGHPlanBoardOnContextPlannedEventEventArgs):
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_SPBEventMultiple();
                break;

            case classNum(HiGHContextHandleEventArgs):
                HiGHContextHandleEventArgs handleEventArgs = _baseArgs as HiGHContextHandleEventArgs;
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_SPBEventSingle(tableNum(WPPWorkOrderLine), str2Int64(handleEventArgs.parmDataValue()));
                break;
        }

        return contextMenuBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForTPB</Name>
				<Source><![CDATA[
    private static HiGHPlanboardContextMenuBuilder constructForTPB(FormDataContract _baseArgs)
    {
        HiGHPlanboardContextMenuBuilder contextMenuBuilder;

        switch(classIdGet(_baseArgs))
        {
            case classNum(HiGHPlanBoardRowItemBaseArgs),
                 classNum(HiGHPlanBoardOnContextPeriodEventArgs):
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_TPBRowItem();
                break;

            case classNum(HiGHPlanBoardPlannedEventBaseArgs):
                HiGHPlanBoardPlannedEventBaseArgs plannedEventBaseArgs = _baseArgs as HiGHPlanBoardPlannedEventBaseArgs;
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_TPBEventSingle(plannedEventBaseArgs.parmRefTableId(), plannedEventBaseArgs.parmRefRecId());
                break;

            case classNum(HiGHPlanBoardOnContextPlannedEventEventArgs):
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_TPBEventMultiple();
                break;

            case classNum(HiGHContextHandleEventArgs):
                HiGHContextHandleEventArgs handleEventArgs = _baseArgs as HiGHContextHandleEventArgs;
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_TPBEventSingle(tableNum(WPPWorkOrderLine), str2Int64(handleEventArgs.parmDataValue()));
                break;
        }

        return contextMenuBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForGBOA</Name>
				<Source><![CDATA[
    private static HiGHPlanboardContextMenuBuilder constructForGBOA(FormDataContract _baseArgs)
    {
        HiGHPlanboardContextMenuBuilder contextMenuBuilder;

        switch(classIdGet(_baseArgs))
        {
            case classNum(HiGHPlanBoardRowItemBaseArgs):
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_GBOARowItem();
                break;

            case classNum(HiGHPlanBoardOnContextPeriodEventArgs):
                contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_GBOAPeriod();
                break;

            case classNum(HiGHPlanBoardPlannedEventBaseArgs):
                HiGHPlanBoardPlannedEventBaseArgs plannedEventBaseArgs = _baseArgs as HiGHPlanBoardPlannedEventBaseArgs;

                switch (plannedEventBaseArgs.parmRefTableId())
                {
                    case tableNum(BOBRentalTrans):
                        contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_GBOABusinessObject();
                        break;

                    case tableNum(BOBTmpObjectAvailability_Graphical):
                        contextMenuBuilder = new HiGHPlanboardContextMenuBuilder_GBOARentalType();
                        break;
                }
                break;
        }

        return contextMenuBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public abstract void populate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerFormRun</Name>
				<Source><![CDATA[
    private void setCallerFormRun(FormRun _callerFormRun = callerFormRun)
    {
        callerFormRun = _callerFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSender</Name>
				<Source><![CDATA[
    private void setSender(FormDataContract _sender = sender)
    {
        sender = _sender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemList</Name>
				<Source><![CDATA[
    public List getMenuItemList()
    {
        return menuItemCollection.toList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhoneNumber</Name>
				<Source><![CDATA[
    protected Phone getPhoneNumber(DirPartyRecId _partyRecId)
    {
        DirPartyLocation dirPartyLocation;
        LogisticsLocation logisticsLocation;
        LogisticsElectronicAddress logisticsElectronicAddress;

        select firstOnly TableId from dirPartyLocation
        order by dirPartyLocation.IsPrimary desc
        where dirPartyLocation.Party == _partyRecId
            join TableId from logisticsLocation
            where logisticsLocation.RecId == dirPartyLocation.Location
                join Locator from logisticsElectronicAddress
                where logisticsElectronicAddress.Location == logisticsLocation.RecId
                &&    logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;

        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>