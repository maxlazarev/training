<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORDeleteRentalValueTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORDeleteRentalValueTrans extends RunBaseBatch
{
    DialogField     dfDeleteHeaderTrans,
                    dfDeleteLinesTrans;

    boolean         deleteHeaderTrans,
                    deleteLinesTrans;

    SysQueryRun     queryRun;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
    deleteHeaderTrans,
    deleteLinesTrans
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Always returns true.
    /// </summary>
    /// <returns>
    ///    true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDFMValueTrans</Name>
				<Source><![CDATA[
    private void deleteDFMValueTrans(RefTableId _refTableId,
                                     RefRecId   _refRecId)
    {
        DFMValueTrans   valueTrans;
    
        delete_from valueTrans
        where valueTrans.RefTableId == _refTableId
        &&    valueTrans.RefRecId   == _refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog;
    
        dialog = super();
    
        dfDeleteHeaderTrans = dialog.addFieldValue(extendedTypeStr(NoYesId), deleteHeaderTrans, "@SYS4925");
        dfDeleteLinesTrans  = dialog.addFieldValue(extendedTypeStr(NoYesId), deleteHeaderTrans, "@SYS15451");
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        deleteHeaderTrans = dfDeleteHeaderTrans.value();
        deleteLinesTrans  = dfDeleteLinesTrans.value();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when a <c>SysLastValue</c> record cannot be found when the code calls the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        this.initQuery();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbdsSalesTable;
        QueryBuildDataSource    qbdsSalesLine;
        QueryBuildRange         qbrSalesType;
        QueryBuildRange         qbrSalesStatus;
    
        query = new Query();
    
        qbdsSalesTable = query.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.addSelectionField(fieldNum(SalesTable, TableId));
        qbdsSalesTable.addSelectionField(fieldNum(SalesTable, RecId));
        qbrSalesType = qbdsSalesTable.addRange(fieldNum(SalesTable, SalesType));
        qbrSalesType.value(SysQuery::value(SalesType::RORRental));
        qbrSalesType.status(RangeStatus::Locked);
        qbrSalesStatus = qbdsSalesTable.addRange(fieldNum(SalesTable, SalesStatus));
        qbrSalesStatus.value(SysQuery::value(SalesStatus::Invoiced));
        qbrSalesStatus.status(RangeStatus::Locked);
    
        qbdsSalesLine = qbdsSalesTable.addDataSource(tableNum(SalesLine));
        qbdsSalesLine.relations(true);
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, TableId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, RecId));
        qbrSalesType = qbdsSalesLine.addRange(fieldNum(SalesLine, SalesType));
        qbrSalesType.value(SysQuery::value(SalesType::RORRental));
        qbrSalesType.status(RangeStatus::Locked);
        qbrSalesStatus = qbdsSalesLine.addRange(fieldNum(SalesLine, SalesStatus));
        qbrSalesStatus.value(SysQuery::value(SalesStatus::Invoiced));
        qbrSalesStatus.status(RangeStatus::Locked);
    
        queryrun = new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryrun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryrun</Name>
				<Source><![CDATA[
    QueryRun queryrun()
    {
        return queryrun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SalesTable  salesTable;
        SalesLine   salesLine;
    
        super();
    
        if (deleteHeaderTrans || deleteLinesTrans)
        {
            this.updateQuery();
    
            while (queryRun.next())
            {
                if (deleteHeaderTrans
                &&  queryRun.changed(tableNum(SalesTable)))
                {
                    salesTable = queryRun.get(tableNum(SalesTable));
                    this.deleteDFMValueTrans(salesTable.TableId, salesTable.RecId);
                }
    
                if (deleteLinesTrans
                &&  queryRun.changed(tableNum(SalesLine)))
                {
                    salesLine  = queryRun.get(tableNum(SalesLine));
                    this.deleteDFMValueTrans(salesLine.TableId, salesLine.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to add a select button to the dialog box.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version;
        container   queryCon;
    
        version = RunBase::getVersion(_packedClass);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, queryCon] = _packedClass;
                if (SysQuery::isPackedOk(queryCon))
                {
                    queryrun = new SysQueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
    
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        QueryBuildDataSource    qbdsSalesTable;
    
        if (!deleteHeaderTrans)
        {
            // Clear the range so that all DFMValueTrans records are deleted
            // linked to SalesLines that are Invoiced and and not only the once
            // where the SalesTable is also invoiced
            qbdsSalesTable = queryRun.query().dataSourceTable(tableNum(SalesTable));
            qbdsSalesTable.clearRange(fieldNum(SalesTable, SalesStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RORDeleteRentalValueTrans construct()
    {
        return new RORDeleteRentalValueTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@DNR7949";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RORDeleteRentalValueTrans deleteRentalValueTrans;
    
        deleteRentalValueTrans = RORDeleteRentalValueTrans::construct();
    
        if (deleteRentalValueTrans.prompt())
        {
            deleteRentalValueTrans.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>