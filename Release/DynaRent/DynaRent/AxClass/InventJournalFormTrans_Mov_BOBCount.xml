<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalFormTrans_Mov_BOBCount</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalFormTrans_Mov_BOBCount extends InventJournalFormTrans_Mov_Count
{
    FormDateTimeControl ctrlTransDateTime;
    BOBRentalType       rentalType;
    boolean             initInventdimVisibleGrid;
    BOBObjectTable      objectTable;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    // ********************* DataSource level Methods ****************************************//
    public void datasourceInitValuePost()
    {
        #DNRConstants

        super();

        TransDateTime   transDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(inventJournalTrans.TransDate, #INVMidday), DateTimeUtil::getUserPreferredTimeZone());
    
        inventJournalTrans.TransDate = DateTimeUtil::date(transDateTime);
        inventJournalTrans.BOBTransTime = DateTimeUtil::time(transDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPost</Name>
				<Source><![CDATA[
    public void datasourceExecuteQueryPost()
    {
        super();
        this.setJournalTransDeletability();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        super();

        journalTrans_ds.object(fieldnum(InventJournalTrans, BOBRentalTypeId)).allowEdit(inventJournalTrans.ItemId ? false : true);
        rentalType = BOBRentalType::findFromItemId(inventJournalTrans.BOBRentalTypeId);
        this.findBOBObjectTable();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);

        journalTrans_ds.object(fieldNum(InventJournalTrans, PdsCWInventOnHand)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, PdsCWInventQtyCounted)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, PdsCWQty)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, TransDate)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, Voucher)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, CostPrice)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, PriceUnit)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, CostMarkup)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, CostAmount)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, BOBRentalTypeId)).mandatory(true);

        journalTrans_ds.object(fieldNum(InventJournalTrans, Counted)).visible(false);
        journalTrans_ds.object(fieldNum(InventJournalTrans, Qty)).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidatePost</Name>
				<Source><![CDATA[
    public boolean dataSourceValidatePost()
    {
        boolean     ret = true;

        if (rentalType.Classification == BOBRentalTypeClassification::Serialized)
        {
            ret = ret && this.checkCountedQty(); 
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateDeletePost</Name>
				<Source><![CDATA[
    public boolean dataSourceValidateDeletePost()
    {
        boolean ret = true;

        if(journalTableData.journalTable().Posted)
        {
            ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimInitPost</Name>
				<Source><![CDATA[
    public void inventDimInitPost(InventDim _inventDim)
    {
        super(_inventDim);
    
        // Disable the fields 'Site' and 'Warehouse' on the lines.
        inventDim_ds.object(fieldNum(InventDim, InventLocationId)).enabled(false);
        inventDim_ds.object(fieldNum(InventDim, InventSiteId)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTransDateTime</Name>
				<Source><![CDATA[
    public TransDateTime editTransDateTime(boolean _set, InventJournalTrans _inventJournalTrans, TransDateTime _transDateTime)
    {
        if (_set)
        {
            if (_transDateTime)
            {
                _inventJournalTrans.TransDate       = DateTimeUtil::date(_transDateTime);
                _inventJournalTrans.BOBTransTime    = DateTimeUtil::time(_transDateTime);
                this.updateOnHandInventory();
            }
        }
        else
        {
            if (_inventJournalTrans.TransDate)
            {
                _transDateTime = DateTimeUtil::newDateTime(_inventJournalTrans.TransDate, _inventJournalTrans.BOBTransTime);
            }
        }
    
        return _transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidatedInventSerialIdPost</Name>
				<Source><![CDATA[
    // ************************** Field Level Methods **************************
    public boolean fieldValidatedInventSerialIdPost()
    {
        this.findBOBObjectTable();

        if (objectTable)
        {
            // Make sure the Serial Number is already created in the current company
            InventSerial inventSerial = InventSerial::BOBFindOrCreateSerialNumber(inventJournalTrans.BOBRentalTypeId, inventDim.inventSerialId);
            inventDim.inventSerialId = inventSerial.InventSerialId;
        }
        else 
        {
            return checkFailed(strFmt("@DNR:DNRAWMNoBusinessObjectFoundBySerialNumber", inventDim.inventSerialId));
        }

        return (InventSerial::checkExist(inventDim.inventSerialId, InventJournalTrans.ItemId)
        &&     this.checkObjectCategory()
        &&     this.checkDuplicateSerialNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidatedCountedPost</Name>
				<Source><![CDATA[
    public boolean fieldValidatedCountedPost()
    {
        return this.checkCountedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedItemIdPost()
    {
        super();

        inventJournalTrans.InventOnHand = 0; 

        inventDim_ds.object(fieldNum(InventDim, inventSerialId)).mandatory(rentalType.Classification == BOBRentalTypeClassification::Serialized);
        journalTrans_ds.object(fieldnum(InventJournalTrans, BOBRentalTypeId)).allowEdit(inventJournalTrans.ItemId ? false : true);
        
        if(rentalType.Classification == BOBRentalTypeClassification::Bulk)
        {
            this.updateOnHandInventory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventSerialID</Name>
				<Source><![CDATA[
    public void fieldModifiedInventSerialID()
    {
        this.updateOnHandInventory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedRentalTypePost</Name>
				<Source><![CDATA[
    public void fieldModifiedRentalTypePost()
    {
        inventJournalTrans.ItemId = inventJournalTrans.BOBRentalTypeId;
        
        if(this.fieldValidateItemId())
        {
            this.fieldModifiedItemIdPost();
        }
        else
        {
            inventJournalTrans.ItemId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateItemId</Name>
				<Source><![CDATA[
    public boolean fieldValidateItemId()
    {
        boolean ret = super();

        if(ret)
        {
            rentalType = BOBRentalType::findFromItemId(inventJournalTrans.ItemId);
            this.findBOBObjectTable();

            if(!rentalType)
            {
                ret = checkFailed(strFmt("@DNR5945", inventJournalTrans.ItemId));
            }
            else if(rentalType.Classification == BOBRentalTypeClassification::Bulk)
            {
                if(inventJournalTrans.ItemId != rentalType.RentalTypeId)
                {
                    ret = checkFailed(strFmt("@DNR:ItemAndRentalTypeMustBeSame"));
                }

                if(this.existBulkItemLine())
                {
                    ret = checkFailed(strFmt("@DNR:BOBCountingJournalBulkItemLineExists", inventJournalTrans.ItemId));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedBOBQty</Name>
				<Source><![CDATA[
    public void fieldModifiedBOBQty()
    {
        InventJournalTrans.BOBCounted = InventJournalTrans.InventOnHand + InventJournalTrans.BOBQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedBOBCounted</Name>
				<Source><![CDATA[
    public void fieldModifiedBOBCounted()
    {
        InventJournalTrans.BOBQty = InventJournalTrans.BOBCounted - InventJournalTrans.InventOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtons</Name>
				<Source><![CDATA[
    //*********************** Form level methods *************************//

    protected void initButtons()
    {
        FormFunctionButtonControl ctrlPdsResetDispositionStatusLocal;

        super();

        ctrlPdsResetDispositionStatusLocal = this.BOBParmCtrlPdsResetDispositionStatus();
    
        if (ctrlPdsResetDispositionStatusLocal)
        {
            ctrlPdsResetDispositionStatusLocal.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    protected void updateDesign(InventDimFormDesignUpdate _mode)
    {
        super(_mode);
    
        if (_mode == InventDimFormDesignUpdate::Init)
        {
            FormDataSource  inventJournalTableDS    = journalFormTable.journalTable_DS();

            // Disable the fields 'Site' and 'Warehouse' on the header.
            inventJournalTableDS.object(fieldNum(InventJournalTable, InventSiteId)).enabled(false);
            inventJournalTableDS.object(fieldNum(InventJournalTable, InventLocationId)).enabled(false);

            if(!initInventdimVisibleGrid)
            {
                //For Rental Counting Journal Site, Warehouse and Serial number must be visible on the Grid by default
                InventDimParm   dimParmVisibleGrid;
            
                dimParmVisibleGrid.InventSiteIdFlag = NoYes::Yes;
                dimParmVisibleGrid.InventLocationIdFlag = NoYes::Yes;
                dimParmVisibleGrid.InventSerialIdFlag = NoYes::Yes;
            
                inventDimFormSetup.parmDimParmVisibleGrid(dimParmVisibleGrid, true);
                inventDimFormSetup.parmOverRideUserSetup(false);
                initInventdimVisibleGrid = true;
            }
            
            formRun.BOBInitializeCaches();

            FormDesign      formDesign              = formRun.design();
            
            ctrlTransDateTime = formDesign.controlName(formControlStr(InventJournalCount, BOBTransDateTime));
            ctrlTransDateTime.visible(true);
            ctrlTransDateTime.mandatory(true);
    
            formDesign.controlName(formControlStr(InventJournalCount, InventCountCreate)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, InventJournalTrans_BOBRentalTypeId)).visible(true);
            formDesign.controlName(formControlStr(InventJournalCount, InventJournalTrans_PdsCWUnit)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, PdsDispositionCode)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, PdsDispositionStatus)).visible(false);

            // Make certain action pane/ribbon controls invisible.
            formDesign.controlName(formControlStr(InventJournalCount, InventCountCreate)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, InventCountCreate_BatchExpired)).visible(false);

            // Make certain header controls invisible.
            formDesign.controlName(formControlStr(InventJournalCount, Voucher2)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, Posting1)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, Inventory1)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, CountingJournalSetup)).visible(false);

            formDesign.controlName(formControlStr(InventJournalCount, InitTotals)).visible(false);

            // Make certain line actions invisible.
            formDesign.controlName(formControlStr(InventJournalCount, RetailAddItemMenuItem)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, InventoryMenu)).visible(false); 
            formDesign.controlName(formControlStr(InventJournalCount, LineFunctions)).visible(false);

            // Make certain grid controls visible.
            formDesign.controlName(formControlStr(InventJournalCount, BOBDisplayObjectLocationCity)).visible(true);
            formDesign.controlName(formControlStr(InventJournalCount, BOBDisplayIsObjectAvailable)).visible(true);
            formDesign.controlName(formControlStr(InventJournalCount, InventJournalTrans_CountingReasonCode)).visible(true);

            // Make certain line details controls visible/invisible.
            formDesign.controlName(formControlStr(InventJournalCount, InventoryDimensionsTab)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, FinancialDimensionsTab)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, RORRentalTab)).visible(true);
            formDesign.controlName(formControlStr(InventJournalCount, JournalLine_M_pdsCWUnitId)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, ReasonCode)).visible(false);
            formDesign.controlName(formControlStr(InventJournalCount, BOBButtonGroup)).visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBBusinessObjectCtrlClicked</Name>
				<Source><![CDATA[
    public void BOBBusinessObjectCtrlClicked()
    {
        Args args = new Args();

        args.record(objectTable);
        
        new MenuFunction(menuItemDisplayStr(BOBObjectTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainEnd</Name>
				<Source><![CDATA[
    //******************************* Class helper methods **************************************//
    
    public void runbaseMainEnd(JournalRunbaseCallbackable _runBaseBatch, boolean _fromCatchError)
    {
        super(_runBaseBatch, _fromCatchError);

        this.setJournalTransDeletability();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTransDeletability</Name>
				<Source><![CDATA[
    private void setJournalTransDeletability()
    {
        boolean allowDelete = journalTableData && journalTableData.journalTable().Posted == NoYes::No;

        journalTrans_ds.allowDelete(allowDelete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBulkItemLine</Name>
				<Source><![CDATA[
    private boolean existBulkItemLine()
    {
        InventJournalTrans  inventJournalTransLocal;
        boolean             ret;

        select firstonly RecId from inventJournalTransLocal
        where inventJournalTransLocal.JournalId == inventJournalTrans.JournalId
        &&    inventJournalTransLocal.ItemId == inventJournalTrans.ItemId
        &&    inventJournalTransLocal.RecId != inventJournalTrans.RecId;

        if (inventJournalTransLocal.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkObjectCategory</Name>
				<Source><![CDATA[
    protected boolean checkObjectCategory()
    {
        boolean ret = true;

        if (inventDim.inventSerialId)
        {
            BOBObjectCategory objectCategory = this.findBOBObjectTable().Category;
            if (objectCategory != BOBObjectCategory::Rental && objectCategory != BOBObjectCategory::SubRental)
            {
                ret = checkFailed(strFmt("@DNR:OnlyRentalAllowed"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateSerialNum</Name>
				<Source><![CDATA[
    protected boolean checkDuplicateSerialNum()
    {
        boolean ret = true;
        
        if(inventDim.inventSerialId)
        {
            InventJournalTrans  inventJournalTransLoc;
            InventDim           inventDimLoc;

            select firstonly LineNum from inventJournalTransLoc
            where inventJournalTransLoc.JournalId == inventJournalTrans.JournalId
            &&    inventJournalTransLoc.RecId != inventJournalTrans.RecId
                join TableId from inventDimLoc
                where inventDimLoc.InventDimId == inventJournalTransLoc.InventDimId
                &&    inventDimLoc.InventSerialId == inventDim.inventSerialId;

            if(inventJournalTransLoc)
            {
                ret = checkFailed(strFmt("@DNR8561", inventDim.inventSerialId, inventJournalTransLoc.LineNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCountedQty</Name>
				<Source><![CDATA[
    protected boolean checkCountedQty()
    {
        boolean ret = true;

        if (rentalType.Classification == BOBRentalTypeClassification::Serialized )
        {
            if (inventJournalTrans.BOBCounted > 1 || inventJournalTrans.BOBCounted < 0)
            {
                ret = checkFailed(strFmt("@DNR:CountedQtyValidation"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBOBObjectTable</Name>
				<Source><![CDATA[
    protected BOBObjectTable findBOBObjectTable()
    {
        if (rentalType.Classification == BOBRentalTypeClassification::Bulk)
        {
            objectTable = BOBObjectTable::findBulkObject(rentalType.RentalTypeId);
        }
        else if(rentalType.Classification == BOBRentalTypeClassification::Serialized)
        {
            objectTable = BOBObjectTable::findInventSerialId(inventDim.inventSerialId);
        }

        return objectTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemId</Name>
				<Source><![CDATA[
    public void lookupItemId(FormStringControl _ctrl)
    {
        if (inventJournalTrans.BOBRentalTypeId)
        {
            this.lookupItemIdRentalType(_ctrl, inventJournalTrans.BOBRentalTypeId);
        }
        else
        {
            InventTable::BOBLookupRentalItem(_ctrl, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdRentalType</Name>
				<Source><![CDATA[
    private void lookupItemIdRentalType(FormStringControl _callerControl, BOBRentalTypeId _rentalTypeId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventTable = query.addDataSource(tableNum(InventTable));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, ItemId));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, NameAlias));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, ItemType));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, Product));

        QueryBuildDataSource qbdsEcoResProduct = qbdsInventTable.addDataSource(tableNum(EcoResProduct));
        qbdsEcoResProduct.relations(false);
        qbdsEcoResProduct.addLink(fieldNum(EcoResProduct, RecId), fieldNum(InventTable, Product));
        qbdsEcoResProduct.addRange(fieldNum(EcoResProduct, BOBRentalTypeId)).value(_rentalTypeId);
        qbdsEcoResProduct.addSelectionField(fieldNum(EcoResProduct, BOBRentalTypeId));
        
        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(InventTable), _callerControl);
        lookup.addLookupfield(fieldNum(InventTable, ItemId), true);
        lookup.addLookupfield(fieldNum(InventTable, NameAlias));
        lookup.addLookupfield(fieldNum(InventTable, ItemType));
        lookup.addLookupfield(fieldNum(InventTable, Product));
    
        lookup.parmQuery(query);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRentalType</Name>
				<Source><![CDATA[
    public void lookupRentalType(FormStringControl _callerControl)
    {
        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(BOBRentalType), _callerControl);

        lookup.addLookupfield(fieldNum(BOBRentalType, RentalTypeId), true);
        lookup.addLookupfield(fieldNum(BOBRentalType, Description));
    
        lookup.parmQuery(new Query(queryStr(BOBRentalTypeCount)));
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnHandInventory</Name>
				<Source><![CDATA[
    private void updateOnHandInventory()
    {
        inventJournalTrans.InventOnHand = 0;
    
        if (inventJournalTrans.BOBRentalTypeId &&  inventDim.InventLocationId &&  inventJournalTrans.TransDate)
        {
            BOBRentalInventOnHand rentalInventOnHand = new BOBRentalInventOnHand();
            if(rentalType.Classification == BOBRentalTypeClassification::Serialized)
            {
                inventJournalTrans.InventOnHand = rentalInventOnHand.availPhysicalQtySerialized(objectTable.ObjectId,
                                                                                                inventDim.InventLocationId,
                                                                                                DateTimeUtil::newDateTime(inventJournalTrans.TransDate, inventJournalTrans.BOBTransTime),
                                                                                                true);
            }
            else
            {
                inventJournalTrans.InventOnHand = rentalInventOnHand.availPhysicalQty(inventJournalTrans.BOBRentalTypeId,
                                                                                       inventDim.InventLocationId,
                                                                                       DateTimeUtil::newDateTime(inventJournalTrans.TransDate, inventJournalTrans.BOBTransTime));
            }
        }

        inventJournalTrans.Counted = inventJournalTrans.InventOnHand; // This is a hack to avoid standard Ax logic for cration of Inventory Transactions
        inventJournalTrans.Qty = 0;
        inventJournalTrans.BOBCounted = 0;
        inventJournalTrans.BOBQty = 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyNotYetDelivered</Name>
				<Source><![CDATA[
    // The methods 'qtyNotYetReturned()' and 'qtyNotYetDelivered()' have been copied from
    // DynaRent/DynaRent/AxForm/BOBTmpRentalSum (and modified accordingly).
    public BOBRentalQty qtyNotYetDelivered()
    {
        BOBRentalQty        ret;
        BOBRentalTrans      rentalTrans;
        TransDateTime       transDateTime = DateTimeUtil::newDateTime(inventJournalTrans.TransDate, inventJournalTrans.BOBTransTime);
        
        if (inventDim.InventLocationId)
        {
            select sum(Qty) from rentalTrans
                    where rentalTrans.RentalTypeId        == inventJournalTrans.BOBRentalTypeId
                    &&    rentalTrans.InventLocationId    == inventDim.InventLocationId
                    &&    rentalTrans.TransType           == BOBRentalTransType::Rental
                    &&    rentalTrans.SubStatus           <  BOBRentalSubStatus::Delivered
                    &&    rentalTrans.Active              == BOBRentalTransActive::Active
                    &&   (rentalTrans.ToDateTime          > transDateTime || rentalTrans.CertaintyTo == BOBDateTimeCertainty::Tentative)
                    &&    rentalTrans.FromDateTime        <= transDateTime
                    &&   (rentalTrans.ObjectId            == objectTable.ObjectId || rentalType.Classification == BOBRentalTypeClassification::Bulk);
            
            ret = rentalTrans.Qty;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyNotYetReturned</Name>
				<Source><![CDATA[
    public BOBRentalQty qtyNotYetReturned()
    {
        BOBRentalQty        ret;
        BOBRentalTrans      rentalTrans;
        TransDateTime       transDateTime = DateTimeUtil::newDateTime(inventJournalTrans.TransDate, inventJournalTrans.BOBTransTime);
        
        if (inventDim.InventLocationId)
        {
            select sum(Qty) from rentalTrans
            where rentalTrans.RentalTypeId        == inventJournalTrans.BOBRentalTypeId
            &&    rentalTrans.InventLocationId    == inventDim.InventLocationId
            &&    rentalTrans.TransType           == BOBRentalTransType::Rental
            &&    rentalTrans.SubStatus           <  BOBRentalSubStatus::Returned
            &&    rentalTrans.SubStatus           >= BOBRentalSubStatus::Delivered
            &&    rentalTrans.Active              == BOBRentalTransActive::Active
            &&    rentalTrans.ToDateTime          <= transDateTime
            &&    rentalTrans.CertaintyTo         == BOBDateTimeCertainty::Firm
            &&   (rentalTrans.ObjectId            == objectTable.ObjectId || rentalType.Classification == BOBRentalTypeClassification::Bulk);
        
            ret = rentalTrans.Qty;
        }
        
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>