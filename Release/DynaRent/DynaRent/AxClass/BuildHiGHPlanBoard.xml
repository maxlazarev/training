<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BuildHiGHPlanBoard</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FormDesignControlAttribute("HiGH PlanBoard")]
class BuildHiGHPlanBoard extends FormBuildControl
{
    //User interface
    private int         timeScale;
    private int         periodMinWidth;
    private int         dateOnlyColumns;
    private int         periodMinHeight;
    private int         rowItemWidth;
    private int         rowItemMinWidth;
    private boolean     showIcons;
    private boolean     allowMultiSelectPE  = true;
    private boolean     allowDragDrop       = true;
    private boolean     allowResize         = true;
    private boolean     enforceAvailability;
    private int         periodWidth;
    private HiGHPlanBoardSecondaryTimeScaleType secondaryTimeScale;
    private HiGHPlanBoardMode                   mode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTimeScale</Name>
				<Source><![CDATA[
    //User Interface
    /// <summary>
    /// Time column width in minutes (Periods)
    /// </summary>
    /// <param name = "_timeScale">Amount of minutes that one period (Schedule unit) will span</param>
    /// <returns>Integer of the amount of minutes a period spans</returns>
    [FormDesignProperty("Time scale", "User Interface")]
    public int parmTimeScale(int _timeScale = timeScale)
    {
        if(!prmisDefault(_timeScale))
        {
            timeScale = _timeScale;
        }
        return timeScale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateOnlyColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// DateOnly - Column count per day (Periods)
    /// </summary>
    /// <param name = "_dateOnlyColumns">Integer value setting the amount of columns to split a day into</param>
    /// <returns>Integer value representing the amount of columns a day is split into</returns>
    [FormDesignProperty("Columns (Date only mode)", "User Interface")]
    public int parmDateOnlyColumns(int _dateOnlyColumns = dateOnlyColumns)
    {
        if(!prmisDefault(_dateOnlyColumns))
        {
            dateOnlyColumns = _dateOnlyColumns;
        }
        return dateOnlyColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSecondaryTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag to determine if multiselect of plannedEvents will be allowed
    /// </summary>
    /// <param name = "_showcons">Boolean value setting whether multiselect is allowed or not</param>
    /// <returns>Boolean value indicating if multiselect is allowed or not</returns>
    [FormDesignProperty("Secondary timescale", "User Interface")]
    public HiGHPlanBoardSecondaryTimeScaleType parmSecondaryTimeScale(HiGHPlanBoardSecondaryTimeScaleType _secondaryTimeScale = secondaryTimeScale)
    {
        if(!prmisDefault(_secondaryTimeScale))
        {
            secondaryTimeScale = _secondaryTimeScale;
        }
        return secondaryTimeScale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodMinWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Time column minimum width in pixels (Periods)
    /// </summary>
    /// <param name = "_periodMinWidth">Minimum width of a period in pixels</param>
    /// <returns>Integer specifying the minimum width of a period in pixels</returns>
    [FormDesignProperty("Period width (minimum)", "User Interface")]
    public int parmPeriodMinWidth(int _periodMinWidth = periodMinWidth)
    {
        if(!prmisDefault(_periodMinWidth))
        {
            periodMinWidth = _periodMinWidth;
        }
        return periodMinWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowResize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Property indicating if the control elements can be Resized or not
    /// </summary>
    /// <returns></returns>
    [FormDesignProperty("Allow resize", "User Interface")]
    public boolean parmAllowResize(boolean _allowResize = allowResize)
    {
        if(!prmisDefault(_allowResize))
        {
            allowResize = _allowResize;
        }
        
        return allowResize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowDragDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Property indicating if the control elements can be Dragged dropped or not
    /// </summary>
    /// <returns></returns>
    [FormDesignProperty("Allow Drag-drop", "User Interface")]
    public boolean parmAllowDragDrop(boolean _allowDragDrop = allowDragDrop)
    {
        if(!prmisDefault(_allowDragDrop))
        {
            allowDragDrop = _allowDragDrop;
        }
     
        return allowDragDrop;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodMinHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Time column cell minimum height in pixels (Periods)
    /// </summary>
    /// <param name = "_periodWidth">Minimum height of a period cell in pixels</param>
    /// <returns>Integer specifying the Minimum height of a period cell in pixels</returns>
    [FormDesignProperty("Period height (minimum)", "User Interface")]
    public int parmPeriodMinHeight(int _periodMinHeight = periodMinHeight)
    {
        if(!prmisDefault(_periodMinHeight))
        {
            periodMinHeight = _periodMinHeight;
        }
        return periodMinHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemMinWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Row item column minimum width in pixels
    /// </summary>
    /// <param name = "_width">Minimum width of a period in pixels</param>
    /// <returns>Integer specifying the minimum width of a period in pixels</returns>
    [FormDesignProperty("Row label min width", "User Interface")]
    public int parmRowItemMinWidth(int _width = rowItemMinWidth)
    {
        if(!prmisDefault(_width))
        {
            rowItemMinWidth = _width;
        }
        return rowItemMinWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Row item column width in pixels
    /// </summary>
    /// <param name = "_width">Width of a period in pixels</param>
    /// <returns>Integer specifying the width of a period in pixels</returns>
    [FormDesignProperty("Row label width", "User Interface")]
    public int parmRowItemWidth(int _width = rowItemWidth)
    {
        if(!prmisDefault(_width))
        {
            rowItemWidth = _width;
        }
        return rowItemWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowIcons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag to determine if icons will be rendered in the plannedEvent cells
    /// </summary>
    /// <param name = "_showcons">Boolean value determining if icons are shown or not</param>
    /// <returns>Integer specifying the width of a period in pixels</returns>
    [FormDesignProperty("Show icons", "User Interface")]
    public boolean parmShowIcons(boolean _showIcons = showIcons)
    {
        if(!prmisDefault(_showIcons))
        {
            showIcons = _showIcons;
        }
        return showIcons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowMultiSelectPE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag to determine if multiselect of plannedEvents will be allowed
    /// </summary>
    /// <param name = "_showcons">Boolean value setting whether multiselect is allowed or not</param>
    /// <returns>Boolean value indicating if multiselect is allowed or not</returns>
    [FormDesignProperty("MultiSelect planned events", "User Interface")]
    public boolean parmAllowMultiSelectPE(boolean _multiSelect = allowMultiSelectPE)
    {
        if(!prmisDefault(_multiSelect))
        {
            allowMultiSelectPE = _multiSelect;
        }
        return allowMultiSelectPE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnforceAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag to determine if availability will be taken into account with dragging and dropping
    /// </summary>
    /// <param name = "_showcons">Boolean value setting whether availibility is enforced by the control or not</param>
    /// <returns>Boolean value indicating whether availibility is enforced by the control or not</returns>
    [FormDesignProperty("Enforce availability", "User Interface")]
    public boolean parmEnforceAvailability(boolean _enforceAvailability = enforceAvailability)
    {
        if(!prmisDefault(_enforceAvailability))
        {
            enforceAvailability = _enforceAvailability;
        }
        return enforceAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag to determine the operational mode of the planboard
    /// </summary>
    /// <param name = "_mode">HiGHPlanBoardMode value setting the operational mode of the planboard</param>
    /// <returns>HiGHPlanBoardMode value indicating the current operational mode of the planboard</returns>
    [FormDesignProperty("Mode", "User Interface")]
    public HiGHPlanBoardMode parmMode(HiGHPlanBoardMode _mode = mode)
    {
        if(!prmisDefault(_mode))
        {
            mode = _mode;
        }
        return mode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>