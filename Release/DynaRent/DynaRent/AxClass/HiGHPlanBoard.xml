<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanBoard</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FormControlAttribute('HiGHPlanBoard', 'resources/html/HiGHPlanBoard', classstr(BuildHiGHPlanBoard))]
class HiGHPlanBoard extends FormTemplateControl
{
    //Constants
    #define.action_move('move')
    #define.action_left('left')
    #define.action_right('right')

    //Form Properties
    //Calculating
    FormProperty        periodsSecondaryProperty;
    FormProperty        periodsProperty;
    FormProperty        rowItemsProperty;
    FormProperty        contextMenuItemsProperty;

    //User Interface
    StartDateTime       startDateProperty;
    EndDateTime         endDateProperty;
    FormProperty        timeScaleProperty;
    FormProperty        controlWidthProperty;
    FormProperty        controlHeightProperty;
    FormProperty        periodWidthProperty;
    int                 periodMinWidth;
    FormProperty        dateOnlyColumnsProperty;
    FormProperty        periodMinHeightProperty;
    FormProperty        rowItemWidthProperty;
    FormProperty        rowItemMinWidthProperty;
    FormProperty        showIconsProperty;
    FormProperty        allowMultiSelectPEProperty;
    FormProperty        modeProperty;
    FormProperty        allowResize;
    FormProperty        allowDragDrop;

    HiGHPlanBoardSecondaryTimeScaleType secondaryTimeScale;
    FormProperty        scrollPositionHorizontalProperty;
    FormProperty        scrollPositionVerticalProperty;
    int                 scrollPositionHorizontal;
    int                 scrollPositionVertical;
    int                 controlWidth;
    int                 controlHeight;
    boolean             enforceAvailability;

    //List of planned events
    List                rowItems = new List(Types::Class);
    List                periods;
    List                periodsSecondary;
    List                contextMenuItems;
    int                 minPeriod, maxPeriod;
    utcdatetime         minPeriodDateTime, maxPeriodDateTime;
    boolean             mustUpdatePeriods;
    boolean             mustUpdateSecondaryPeriods;
    boolean             dateOnlyColumnsChanged;
    int                 periodMinWidthOriginal;

    //Context
    Object              contextEventArgs;
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build, _formRun);

        this.setTemplateId('HiGHPlanBoard');
        this.setResourceBundleName("Resources/html/HiGHPlanBoard");
        
        //Calculated
        periodsSecondaryProperty            = this.addProperty(methodStr(HiGHPlanBoard, parmPeriodsSecondary),          Types::Class);
        periodsProperty                     = this.addProperty(methodStr(HiGHPlanBoard, parmPeriods),                   Types::Class);
        rowItemsProperty                    = this.addProperty(methodStr(HiGHPlanBoard, parmRowItems),                  Types::Class);
        contextMenuItemsProperty            = this.addProperty(methodStr(HiGHPlanBoard, parmContextMenuItems),          Types::Class);

        //User Interface
        timeScaleProperty                   = this.addProperty(methodStr(HiGHPlanBoard, parmTimeScale),                 Types::Integer);
        dateOnlyColumnsProperty             = this.addProperty(methodStr(HiGHPlanBoard, parmDateOnlyColumns),           Types::Integer);
        periodMinHeightProperty             = this.addProperty(methodStr(HiGHPlanBoard, parmPeriodMinHeight),           Types::Integer);
        controlWidthProperty                = this.addProperty(methodStr(HiGHPlanBoard, parmControlWidth),              Types::Integer);
        controlHeightProperty               = this.addProperty(methodStr(HiGHPlanBoard, parmControlHeight),             Types::Integer);
        rowItemWidthProperty                = this.addProperty(methodStr(HiGHPlanBoard, parmRowItemWidth),              Types::Integer);
        rowItemMinWidthProperty             = this.addProperty(methodStr(HiGHPlanBoard, parmRowItemMinWidth),           Types::Integer);
        showIconsProperty                   = this.addProperty(methodStr(HiGHPlanBoard, parmShowIcons),                 Types::Enum);
        allowMultiSelectPEProperty          = this.addProperty(methodStr(HiGHPlanBoard, parmAllowMultiSelectPE),        Types::Enum);
        modeProperty                        = this.addProperty(methodStr(HiGHPlanBoard, parmMode),                      Types::Integer);
        periodWidthProperty                 = this.addProperty(methodStr(HiGHPlanBoard, parmPeriodWidth),               Types::Integer);
        scrollPositionHorizontalProperty    = this.addProperty(methodStr(HiGHPlanBoard, parmScrollPositionHorizontal),  Types::Integer);
        scrollPositionVerticalProperty      = this.addProperty(methodStr(HiGHPlanBoard, parmScrollPositionVertical),    Types::Integer);
        allowResize                         = this.addProperty(methodStr(HiGHPlanBoard, parmAllowResize),               Types::Enum);
        allowDragDrop                       = this.addProperty(methodStr(HiGHPlanBoard, parmAllowDragDrop),             Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    public void applyBuild()
    {
        BuildHiGHPlanBoard build;
        
        super();

        build = this.build();
        if(build)
        {
            //User Interface
            this.parmMode(enum2int(build.parmMode()));
            
            //Consider plan board modes:
            switch (this.parmMode())
            {
                case HiGHPlanBoardMode::DateOnly:
                    this.parmDateOnlyColumns(build.parmDateOnlyColumns());
                    this.parmSecondaryTimeScale(HiGHPlanBoardSecondaryTimeScaleType::Days);
                    break;

                default:
                    this.parmSecondaryTimeScale(build.parmSecondaryTimeScale());
                    break;
            }

            periodMinWidthOriginal = build.parmPeriodMinWidth();
            
            this.parmPeriodMinWidth(periodMinWidthOriginal);
            this.parmTimeScale(build.parmTimeScale());                                
            this.parmPeriodMinHeight(build.parmPeriodMinHeight());
            this.parmRowItemWidth(build.parmRowItemWidth());
            this.parmRowItemMinWidth(build.parmRowItemMinWidth());
            this.parmShowIcons(build.parmShowIcons());
            this.parmAllowMultiSelectPE(build.parmAllowMultiSelectPE());
            this.parmAllowDragDrop(build.parmAllowDragDrop());
            this.parmAllowResize(build.parmAllowResize());
            this.parmPeriodWidth();
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMode</Name>
				<Source><![CDATA[
    //User Interface
    /// <summary>
    /// Flag to determine the operational mode of the planboard
    /// </summary>
    /// <param name = "_mode">HiGHPlanBoardMode value setting the operational mode of the planboard</param>
    /// <returns>HiGHPlanBoardMode value indicating the current operational mode of the planboard</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "PlanBoardMode", true)]
    public int parmMode(int _mode = modeProperty.parmValue())
    {
        if(!prmisDefault(_mode))
        {
            modeProperty.setValueOrBinding(_mode);
        }

        return modeProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start date that will be used to render time columns (Periods). If default, the value will be set to the lowsest start date in the datasource
    /// </summary>
    /// <param name = "_startDate">Start date that will be used to render time columns (Periods).</param>
    /// <returns>UtcDateTime of the start date</returns>
    [FormCommandAttribute("StartDate")]
    public utcdatetime parmStartDate(utcdatetime _startDate = startDateProperty)
    {
        if (!prmIsDefault(_startDate))
        {
            mustUpdatePeriods = true;
            startDateProperty = _startDate;
        }
        
        return startDateProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// End date that will be used to render time columns (Periods). If default, the value will be set to the highest end date in the datasource
    /// </summary>
    /// <param name = "_endDate">End date that will be used to render time columns (Periods).</param>
    /// <returns>UtcDateTime of the end date</returns>
    [FormCommandAttribute("EndDate")]
    public utcdatetime parmEndDate(utcdatetime _endDate = endDateProperty)
    {
        if (!prmIsDefault(_endDate))
        {
            mustUpdatePeriods = true;
            endDateProperty = _endDate;
        }
        
        return endDateProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Time column width in minutes (Periods)
    /// </summary>
    /// <param name = "_timeScale">Amount of minutes that one period (Schedule unit) will span</param>
    /// <returns>Integer of the amount of minutes a period spans</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "TimeScale", true)]
    public int parmTimeScale(int _timeScale = timeScaleProperty.parmValue())
    {
        #TimeConstants
        if (!prmIsDefault(_timeScale) || dateOnlyColumnsChanged)
        {
            if (this.parmMode() == HiGHPlanBoardMode::DateOnly)
            {
                _timeScale = #minutesPerDay div this.parmDateOnlyColumns();
            }            

            if (_timeScale == 0)
            {
                _timeScale = 60;
            }

            timeScaleProperty.setValueOrBinding(_timeScale);

            mustUpdatePeriods = true;
        }

        return timeScaleProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnforceAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// When true, enforces availability, honouring open/closed periods
    /// </summary>
    /// <param name = "_enforceAvailability"></param>
    /// <returns>enforceAvailability</returns>
    public boolean parmEnforceAvailability(boolean _enforceAvailability)
    {
        enforceAvailability = _enforceAvailability;

        return enforceAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSecondaryTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Secondary period labels
    /// </summary>
    /// <param name = "_timeScale">Type of period labels to use</param>
    /// <returns>Type of period labels to use</returns>
    public HiGHPlanBoardSecondaryTimeScaleType parmSecondaryTimeScale(HiGHPlanBoardSecondaryTimeScaleType _secondaryTimeScale = secondaryTimeScale)
    {
        if (!prmIsDefault(_secondaryTimeScale))
        {
            mustUpdateSecondaryPeriods = true;
            secondaryTimeScale = _secondaryTimeScale;
        }        

        return secondaryTimeScale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodMinWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Time column width in pixels (Periods)
    /// </summary>
    /// <param name = "_periodWidth">Width of a period in pixels</param>
    /// <returns>Integer specifying the width of a period in pixels</returns>
    public int parmPeriodMinWidth(int _periodMinWidth = periodMinWidth)
    {
        if (!prmIsDefault(_periodMinWidth) || dateOnlyColumnsChanged)
        {
            if (this.parmMode() == HiGHPlanBoardMode::DateOnly)
            {
                _periodMinWidth = _periodMinWidth div this.parmDateOnlyColumns();
            }

            if(_periodMinWidth == 0)
            {
                //Using a hardcoded default here, if no value has been supplied by the developer
                _periodMinWidth = 40;
            }

            periodMinWidth =  _periodMinWidth;
        }

        return periodMinWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Time column width in pixels (Periods)
    /// </summary>
    /// <param name = "_periodWidth">Width of a period in pixels</param>
    /// <returns>Integer specifying the width of a period in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "PeriodWidth", true)]
    public int parmPeriodWidth()
    {
        #TimeConstants
        int periodWidth = 0;

        if (this.parmTimeScale())
        {
            //Calculate using start and end date. Since the period list will use this function as well, we cannot use periods.elements
            int periodCount = int642int(DateTimeUtil::getDifference(this.parmEndDate(), this.parmStartDate()) div (this.parmTimeScale() * #secondsPerMinute)) + 1;
            periodWidth = (controlWidth - this.parmRowItemWidth()) div (periodCount > 0 ? periodCount : 1);

            //Enforce minimum period width
            periodWidth = (periodWidth < this.parmPeriodMinWidth() ? this.parmPeriodMinWidth() : periodWidth);
        }
        else
        {
            periodWidth = this.parmPeriodMinWidth();
        }

        //Bind again if the width has changed
        if (periodWidthProperty.parmValue() != periodWidth)
        {
            periodWidthProperty.setValueOrBinding(periodWidth);
        }

        return periodWidthProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number of periods
    /// </summary>
    /// <returns>number of periods (time buckets)</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "PeriodCount", true)]
    public int getPeriodCount()
    {
        #TimeConstants
        int periodCount;

        periodCount = (DateTimeUtil::getDifference(this.parmEndDate(), this.parmStartDate()) div (this.parmTimeScale() * #secondsPerMinute)) + 1;
        return periodCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmControlWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Control width in pixels (Periods)
    /// </summary>
    /// <param name = "_controlWidth">Height of control in pixels</param>
    /// <returns>Integer specifying the width of the control in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "ControlWidth", true)]
    private int parmControlWidth(int _controlWidth = controlWidth)
    {
        if (!prmIsDefault(_controlWidth))
        {
            controlWidth = _controlWidth;
            controlWidthProperty.setValueOrBinding(controlWidth);

            this.resizedWidth();
        }

        return controlWidthProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmControlHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Control width in pixels (Periods)
    /// </summary>
    /// <param name = "_controlHeight">Height of control in pixels</param>
    /// <returns>Integer specifying the width of the control in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "ControlHeight", true)]
    private int parmControlHeight(int _controlHeight = controlHeight)
    {
        if (!prmIsDefault(_controlHeight))
        {
            controlHeight = _controlHeight;
            controlHeightProperty.setValueOrBinding(controlHeight);

            this.resizedHeight();
        }

        return controlHeightProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChangeControlWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for changing control width
    /// </summary>
    /// <param name = "_width">Control width</param>
    [FormCommandAttribute("OnChangeControlWidth")]
    private void onChangeControlWidth(str _width)
    {
        this.parmControlWidth(FormControlUtil::convertStrToValue(Types::String, _width));
        
        //this.resizedWidth();              
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChangeControlHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for changing control height
    /// </summary>
    /// <param name = "_height">Control height</param>
    [FormCommandAttribute("OnChangeControlHeight")]
    private void onChangeControlHeight(str _height)
    {
        this.parmControlHeight(FormControlUtil::convertStrToValue(Types::String, _height));
        
        this.resizedHeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateOnlyColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// DateOnly - Column count per day (Periods)
    /// </summary>
    /// <param name = "_dateOnlyColumns">Integer value setting the amount of columns to split a day into</param>
    /// <returns>Integer value representing the amount of columns a day is split into</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "DateOnlyColumns", true)]
    public int parmDateOnlyColumns(int _dateOnlyColumns = dateOnlyColumnsProperty.parmValue())
    {
        if(_dateOnlyColumns == 0)
        {
            //Using a hardcoded default here, if no value has been supplied by the developer
            _dateOnlyColumns = 1;
        }

        if (!prmIsDefault(_dateOnlyColumns))
        {
            dateOnlyColumnsProperty.setValueOrBinding(_dateOnlyColumns);

            dateOnlyColumnsChanged = true;

            this.parmPeriodMinWidth(periodMinWidthOriginal);
            this.parmTimeScale();
            this.parmPeriodWidth();

            dateOnlyColumnsChanged = false;
        }

        return dateOnlyColumnsProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodMinHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Time column cell minimum height in pixels (Periods)
    /// </summary>
    /// <param name = "_periodMinHeight">Minimum height of a period in pixels</param>
    /// <returns>Integer specifying the minimum height of a period in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "PeriodMinHeight", true)]
    public int parmPeriodMinHeight(int _periodMinHeight = periodMinHeightProperty.parmValue())
    {
        if(_periodMinHeight == 0)
        {
            //Using a hardcoded default here, if no value has been supplied by the developer
            _periodMinHeight = 20;
        }

        if (!prmIsDefault(_periodMinHeight))
        {
            periodMinHeightProperty.setValueOrBinding(_periodMinHeight);
        }

        return periodMinHeightProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// RowItem column width in pixels
    /// </summary>
    /// <param name = "_width">Width of a row item in pixels</param>
    /// <returns>Integer specifying the width of a row item in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "RowItemWidth", true)]
    public int parmRowItemWidth(int _rowItemWidth = rowItemWidthProperty.parmValue())
    {
        if(_rowItemWidth == 0)
        {
            //Using a hardcoded default here, if no value has been supplied by the developer
            _rowItemWidth = 150;
        }

        if (!prmIsDefault(_rowItemWidth))
        {
            rowItemWidthProperty.setValueOrBinding(_rowItemWidth >= this.parmRowItemMinWidth() ? _rowItemWidth : this.parmRowItemMinWidth());

            this.resizedWidth();
        }

        return rowItemWidthProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRowItemWidth</Name>
				<Source><![CDATA[
    [FormCommandAttribute("updateRowItemWidth")]
    public void updateRowItemWidth(str _rowItemWidth)
    {
        int newRowItemWidth = FormControlUtil::convertStrToValue(Types::String, _rowItemWidth);
        this.parmRowItemWidth(newRowItemWidth);
        
        this.resizedWidth();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItemMinWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Row item column minimum width in pixels
    /// </summary>
    /// <param name = "_width">Minimum width of a period in pixels</param>
    /// <returns>Integer specifying the minimum width of a period in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "RowItemMinWidth", true)]
    public int parmRowItemMinWidth(int _width = rowItemMinWidthProperty.parmValue())
    {
        if(!prmisDefault(_width))
        {
            rowItemMinWidthProperty.setValueOrBinding(_width);
        }
        return rowItemMinWidthProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScrollPositionHorizontal</Name>
				<Source><![CDATA[
    /// Horizontal scroll position
    /// </summary>
    /// <param name = "_width">Horizontal scroll location</param>
    /// <returns>Horizontal scroll location</returns>
    [FormCommandAttribute("OnScrollPositionHorizontal")]
    private void onScrollPositionHorizontal(str _scrollPositionHorizontal = int2Str(scrollPositionHorizontal))
    {
        if(!prmisDefault(_scrollPositionHorizontal))
        {
            scrollPositionHorizontal = str2Int(_scrollPositionHorizontal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScrollPositionVertical</Name>
				<Source><![CDATA[
    /// Vertical scroll position
    /// </summary>
    /// <param name = "_width">Vertical scroll location</param>
    /// <returns>Vertical scroll location</returns>
    [FormCommandAttribute("OnScrollPositionVertical")]
    private void onScrollPositionVertical(str _scrollPositionVertical = int2Str(scrollPositionVertical))
    {
        if(!prmisDefault(_scrollPositionVertical))
        {
            scrollPositionVertical = str2Int(_scrollPositionVertical);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScrollPositionHorizontal</Name>
				<Source><![CDATA[
    /// Horizontal scroll position
    /// </summary>
    /// <param name = "_width">Horizontal scroll location</param>
    /// <returns>Horizontal scroll location</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "ScrollPositionHorizontal", true)]
    public int parmScrollPositionHorizontal(int _scrollPositionHorizontal = scrollPositionHorizontalProperty.parmValue())
    {
        if(!prmisDefault(_scrollPositionHorizontal))
        {
            scrollPositionHorizontal = _scrollPositionHorizontal;
            scrollPositionHorizontalProperty.setValueOrBinding(scrollPositionHorizontal);
        }
        return scrollPositionHorizontalProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScrollPositionVertical</Name>
				<Source><![CDATA[
    /// Vertical scroll position
    /// </summary>
    /// <param name = "_width">Vertical scroll location</param>
    /// <returns>Vertical scroll location</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "ScrollPositionVertical", true)]
    public int parmScrollPositionVertical(int _scrollPositionVertical = scrollPositionVerticalProperty.parmValue())
    {
        if(!prmisDefault(_scrollPositionVertical))
        {
            scrollPositionVertical = _scrollPositionVertical;
            scrollPositionVerticalProperty.setValueOrBinding(scrollPositionVertical);
        }
        return scrollPositionVerticalProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowIcons</Name>
				<Source><![CDATA[
    /// <summary>
    /// RowItem column width in pixels
    /// </summary>
    /// <param name = "_width">Width of a row item in pixels</param>
    /// <returns>Integer specifying the width of a row item in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "ShowIcons", true)]
    public boolean parmShowIcons(boolean _showIcons = showIconsProperty.parmValue())
    {
        if (!prmIsDefault(_showIcons))
        {
            showIconsProperty.setValueOrBinding(_showIcons);
        }

        return showIconsProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowMultiSelectPE</Name>
				<Source><![CDATA[
    /// <summary>
    /// RowItem column width in pixels
    /// </summary>
    /// <param name = "_width">Width of a row item in pixels</param>
    /// <returns>Integer specifying the width of a row item in pixels</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "AllowMultiSelectPE", true)]
    public boolean parmAllowMultiSelectPE(boolean _allowMultiSelect = allowMultiSelectPEProperty.parmValue())
    {
        if (!prmIsDefault(_allowMultiSelect))
        {
            allowMultiSelectPEProperty.setValueOrBinding(_allowMultiSelect);
        }

        return allowMultiSelectPEProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowResize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return if the control elemetns are resizable or not
    /// </summary>
    /// <param name = "_allowResize">Sets if the planboard elements are resizable</param>
    /// <returns>boolean specifying if the planboard elements are resizable not</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "AllowResize")]
    public boolean parmAllowResize(boolean _allowResize = allowResize.parmValue())
    {
        if (!prmIsDefault(_allowResize))
        {
            allowResize.setValueOrBinding(_allowResize);
        }

        return allowResize.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowDragDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return if the control elemnts are draggable-droppable
    /// </summary>
    /// <param name = "_allowDragDrop">Sets if the planboard elements are draggable</param>
    /// <returns>boolean specifying if the planboard elements are draggable</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "AllowDragDrop")]
    public boolean parmAllowDragDrop(boolean _allowDragDrop = allowDragDrop.parmValue())
    {
        if (!prmIsDefault(_allowDragDrop))
        {
            allowDragDrop.setValueOrBinding(_allowDragDrop);
        }

        return allowDragDrop.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriods</Name>
				<Source><![CDATA[
    //Calculated
    /// <summary>
    /// Generates a list of all periods that will be rendered on the control
    /// </summary>
    /// <param name = "_value">List of periods</param>
    /// <returns>List of generated periods</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "Periods", true)]
    public List parmPeriods()
    {
        if (periods == null || periods.empty() || mustUpdatePeriods)
        {
            minPeriodDateTime = this.parmStartDate();
            maxPeriodDateTime = DateTimeUtil::addMinutes(this.parmEndDate(), this.parmTimeScale());
            periods = HiGHPlanBoardPeriod::createPeriods(minPeriodDateTime, maxPeriodDateTime, this.parmTimeScale(), this.parmPeriodWidth(), !enforceAvailability);

            periodsProperty.setValueOrBinding(periods);
            
            minPeriod = -1;
            maxPeriod = periods.elements() + 1;

            mustUpdatePeriods = false;

            //Update secondary timescale
            mustUpdateSecondaryPeriods = true;
            this.parmPeriodsSecondary();
        }        

        return periodsProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodsSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a list of secondary periods that will be rendered above the periods
    /// </summary>
    /// <param name = "_value">List of secondary periods</param>
    /// <returns>List of generated secondary periods</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "PeriodsSecondary", true)]
    private List parmPeriodsSecondary()
    {
        if (periodsSecondary == null || periodsSecondary.empty() || mustUpdateSecondaryPeriods)
        {
            periodsSecondary = HiGHPlanBoardPeriodSecondary::createSecondaryPeriods(this.parmPeriods(), this.parmPeriodWidth(), this.parmSecondaryTimeScale(), this.parmMode());

            periodsSecondaryProperty.setValueOrBinding(periodsSecondary);
            mustUpdateSecondaryPeriods = false;
        }                

        return periodsSecondaryProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the main data, a list of all row items with planned events that will be rendered on the control
    /// </summary>
    /// <param name = "_value">List of planning items</param>
    /// <returns>List of loaded planning items</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "RowItems", true)]
    public List parmRowItems(List _rowItems = rowItemsProperty.parmValue())
    {
        if (!prmIsDefault(_rowItems))
        {
            rowItems = _rowItems;

            if (this.parmMode() == HiGHPlanBoardMode::DateOnly)
            {
                rowItems = HiGHPlanBoardRowItem::dateOnlySetTimes(rowItems, this.parmTimeScale());
            }
                
            ListEnumerator le = rowItems.getEnumerator();

            while(le.moveNext())
            {
                HiGHPlanBoardRowItem rowItem = le.current();
                HiGHPlanBoardRowItem::calculateCollisionLevels(rowItem);
            }            

            rowItemsProperty.setValueOrBinding(rowItems);
        }

        return rowItemsProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContextMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a list of all periods that will be rendered on the control
    /// </summary>
    /// <param name = "_value">List of periods</param>
    /// <returns>List of generated periods</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "ContextMenuItems", true)]
    private List parmContextMenuItems(List _contextMenuItems = contextMenuItemsProperty.parmValue())
    {
        if (!prmIsDefault(_contextMenuItems))
        {
            contextMenuItems = _contextMenuItems;
        
            contextMenuItemsProperty.setValueOrBinding(contextMenuItems);
        }

        return contextMenuItemsProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens periods for the specified dates on the specified row item
    /// </summary>
    /// <param name = "_rowItemId">RowItemId context</param>
    /// <param name = "_startDateTime">Start of open period</param>
    /// <param name = "_endDateTime">end of open period</param>
    public void openPeriod(HiGHPlanBoardRowItem _rowItem, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        if (_rowItem != null)
        {
            _rowItem.parmRowPeriods(HiGHPlanBoardPeriod::openPeriod(_startDateTime, _endDateTime, _rowItem.parmRowPeriods()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPlannedEventChanged</Name>
				<Source><![CDATA[
    //Commands
    /// <summary>
    /// Called from client when changes to a planning has been made
    /// </summary>
    /// <param name = "_plannedEvent">Serialized object of HiGHPlanBoardPlanning containing updated values</param>
    /// <param name = "_action">Indicating what action caused the change "LEFT|RIGHT|MOVE|"</param>
    /// <returns>boolean value indiciating if change was allowed</returns>
    [FormCommandAttribute("OnPlannedEventChanged")]
    private List onPlannedEventChanged(str _plannedEvent, str _action)
    {
        Common                    planningTable;
        HiGHPlanBoardPlannedEvent plannedEventNew;
        HiGHPlanBoardPlannedEvent plannedEvent;
        utcdatetime               startDateTime;
        utcdatetime               endDateTime;
        utcdatetime               origStartDateTime;
        utcdatetime               origEndDateTime;
        int                       startPeriod;
        int                       endPeriod;
        boolean                   startPeriodOpen;
        boolean                   endPeriodOpen;
        List                      result = new List(Types::Class);

        plannedEventNew = FormControlUtil::convertStrToObject(classIdGet(plannedEventNew), _plannedEvent);
        
        //Update PlannedEvents List
        if (plannedEventNew.parmId()) //If update
        {
            plannedEvent = HiGHPlanBoardPlannedEvent::find(plannedEventNew.parmId(), rowItems);
            origStartDateTime = plannedEvent.parmStartDateTime();
            origEndDateTime   = plannedEvent.parmEndDateTime();
            
            [startDateTime, endDateTime] = HiGHPlanBoardPeriod::calculateDateTimesFromPeriods(plannedEventNew.parmStartPeriod(), plannedEventNew.parmEndPeriod(), this.parmStartDate(), this.parmTimeScale());
            if (plannedEvent.parmStartPeriodOpen()) //If period was open, it cannot be used to directly calculate the startDateTime during drag and drop actions
            {          
                if (_action == #action_move)
                {
                    plannedEvent.parmStartDateTime(DateTimeUtil::addSeconds(endDateTime,
                        -DateTimeUtil::getDifference(plannedEvent.parmEndDateTime(), plannedEvent.parmStartDateTime())
                        ));
                }
            }
            else
            {
                plannedEvent.parmStartDateTime(startDateTime);
            }

            if (plannedEvent.parmEndPeriodOpen() && _action == #action_move) //If period was open, it cannot be used to directly calculate the endDateTime during drag and drop actions
            {
                if (_action == #action_move)
                {
                    plannedEvent.parmEndDateTime(DateTimeUtil::addSeconds(startDateTime,
                        DateTimeUtil::getDifference(plannedEvent.parmEndDateTime(), plannedEvent.parmStartDateTime())
                        ));
                }
            }
            else
            {
                plannedEvent.parmEndDateTime(endDateTime);
            }

            [startPeriod, startPeriodOpen]  = HiGHPlanBoardPeriod::calculatePeriodFromDateTime(plannedEvent.parmStartDateTime(), periods);
            [endPeriod, endPeriodOpen]      = HiGHPlanBoardPeriod::calculatePeriodFromDateTime(plannedEvent.parmEndDateTime(),   periods);
            
            plannedEvent.parmStartPeriod(startPeriod);
            plannedEvent.parmEndPeriod(endPeriod);
            plannedEvent.parmStartPeriodOpen(startPeriodOpen);
            plannedEvent.parmEndPeriodOpen(endPeriodOpen);
                    
            if (plannedEventNew.parmRowItemId() && (plannedEventNew.parmRowItemId() != plannedEvent.parmRowItemId())) //If changed to new RowItem, move it to the new row in the list
            {
                var originalRowId = plannedEvent.parmRowItemId();
                //The movePlannedEvent() function will take care of recalculating the collisionLevel as well as setting the new rowItemId                
                this.movePlannedEventToNewRow(plannedEvent.parmId(), plannedEventNew.parmRowItemId());
                result.addEnd(HiGHPlanBoardRowItem::find(originalRowId, rowItems));
                result.addEnd(HiGHPlanBoardRowItem::find(plannedEvent.parmRowItemId(), rowItems));
            }
            else //If moved within same RowItem
            {
                //Calculate collisionLevels after change
                HiGHPlanBoardRowItem rowItem = HiGHPlanBoardRowItem::find(plannedEvent.parmRowItemId(), rowItems);
                
                if (!rowItem) { throw error(strFmt("Row item id '%1' not found.", plannedEvent.parmRowItemId())); }

                HiGHPlanBoardRowItem::calculateCollisionLevels(rowItem);
                result.addEnd(rowItem);
            }
        }

        this.onChange(HiGHPlanBoardOnChangePlannedEventEventArgs::newParameters(plannedEvent.parmId(), plannedEvent.parmRowItemId(), plannedEvent.parmEventId(), plannedEvent.parmStartDateTime(), plannedEvent.parmEndDateTime(), origStartDateTime, origEndDateTime, plannedEvent.parmRefTableId(), plannedEvent.parmRefRecId(), plannedEvent.parmEventColor(), plannedEvent.parmCellContent(), plannedEvent.parmIcons(), plannedEvent.parmAllowResize(), plannedEvent.parmAllowDrag()));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDateOnlyPlannedEventDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called form client when an external element has been dropped on a period
    /// </summary>
    /// <param name = "_plannedEvent">Serialized object of HiGHPlanBoardExternalDropEventArgs</param>
    /// <returns>boolean value indiciating if change was allowed</returns>
    [FormCommandAttribute("OnDateOnlyPlannedEventDrop")]
    private void onDateOnlyPlannedEventDrop(str _dateOnlyPlannedEventDropArgs)
    {
        List            dragDropResults = FormControlUtil::convertStrToCollection(classNum(List), _dateOnlyPlannedEventDropArgs, Types::String, 'str');
        ListEnumerator  leDragDropResults = dragDropResults.getEnumerator();

        List            changedPlannedEvents = new List(Types::Class);
        Set             changedPlannedEventIds = new Set(Types::String);
        
        HiGHPlanBoardPlannedEvent   sourcePlannedEvent;
        HiGHPlanBoardRowItem        sourceRowItem;

        if (leDragDropResults.moveNext())
        {
            sourcePlannedEvent  = HiGHPlanBoardPlannedEvent::find(leDragDropResults.current(), rowItems);
            sourceRowItem       = HiGHPlanBoardRowItem::find(sourcePlannedEvent.parmRowItemId(), rowItems);
        }

        //Remove source PlannedEvent        
        ListIterator    liSourceRowItemPlannedEvents = new ListIterator(sourceRowItem.parmPlannedEvents());
        boolean         sourceFound = false;

        while (liSourceRowItemPlannedEvents.more())
        {
            HiGHPlanBoardPlannedEvent current = liSourceRowItemPlannedEvents.value();

            if (current.parmId() == sourcePlannedEvent.parmId())
            {
                sourceFound = true;
                liSourceRowItemPlannedEvents.delete();
            }
            else if (sourceFound)
            {
                current.parmDateOnlyLineNum(current.parmDateOnlyLineNum() - 1);
                changedPlannedEvents.addEnd(HiGHPlanBoardPlannedEventBaseArgs::newParametersFromPlannedEventObject(current));
                changedPlannedEventIds.add(current.parmId());

                liSourceRowItemPlannedEvents.next();
            }
            else
            {
                liSourceRowItemPlannedEvents.next();
            }
            
        }

        //Insert source PlannedEvent
        if (leDragDropResults.moveNext() && leDragDropResults.current() != '0')  //Target is another plannedEvent
        {   
            HiGHPlanBoardPlannedEvent targetPlannedEvent = HiGHPlanBoardPlannedEvent::find(leDragDropResults.current(), rowItems);
            HiGHPlanBoardRowItem      targetRowItem      = HiGHPlanBoardRowItem::find(targetPlannedEvent.parmRowItemId(), rowItems);
            
            //Find correct spot, and insert, then update LineNums
            ListIterator    liTargetRowItemPlannedEvents = new ListIterator(targetRowItem.parmPlannedEvents());
            boolean         targetFound = false;
            while (liTargetRowItemPlannedEvents.more())
            {
                HiGHPlanBoardPlannedEvent current = liTargetRowItemPlannedEvents.value();

                if (current.parmId() == targetPlannedEvent.parmId())
                {
                    targetFound = true;
                    liTargetRowItemPlannedEvents.insert(sourcePlannedEvent);
                    sourcePlannedEvent.parmRowItemId(targetPlannedEvent.parmRowItemId());
                    sourcePlannedEvent.parmStartDateTime(targetPlannedEvent.parmStartDateTime());
                    sourcePlannedEvent.parmDateOnlyLineNum(targetPlannedEvent.parmDateOnlyLineNum());
                    targetPlannedEvent.parmDateOnlyLineNum(targetPlannedEvent.parmDateOnlyLineNum() + 1);

                    //Add to changed plannedEvent list
                    if (!changedPlannedEventIds.in(sourcePlannedEvent.parmId()))
                    {
                        changedPlannedEvents.addEnd(HiGHPlanBoardPlannedEventBaseArgs::newParametersFromPlannedEventObject(sourcePlannedEvent));
                        changedPlannedEventIds.add(sourcePlannedEvent.parmId());
                    }

                    if (!changedPlannedEventIds.in(targetPlannedEvent.parmId()))
                    {
                        changedPlannedEvents.addEnd(HiGHPlanBoardPlannedEventBaseArgs::newParametersFromPlannedEventObject(targetPlannedEvent));
                        changedPlannedEventIds.add(targetPlannedEvent.parmId());
                    }
                }
                else if (targetFound)
                {
                    current.parmDateOnlyLineNum(current.parmDateOnlyLineNum() + 1);

                    if (!changedPlannedEventIds.in(current.parmId()))
                    {
                        changedPlannedEvents.addEnd(HiGHPlanBoardPlannedEventBaseArgs::newParametersFromPlannedEventObject(current));
                        changedPlannedEventIds.add(current.parmId());
                    }
                }

                liTargetRowItemPlannedEvents.next();
            }
        }
        else if (leDragDropResults.moveNext())//Target is period
        {
            HiGHPlanBoardRowItem      targetRowItem      = HiGHPlanBoardRowItem::find(leDragDropResults.current(), rowItems);

            leDragDropResults.moveNext();
            HiGHPlanBoardPeriod       targetPeriod       = HiGHPlanBoardPeriod::findRowItemPeriod(leDragDropResults.current(), rowItems);

            //Find last LineNum, and append
            ListIterator    liTargetRowItemPlannedEvents =  new ListIterator(targetRowItem.parmPlannedEvents());
            int             lastLineNum;
            boolean         correctDate = false;
            while (liTargetRowItemPlannedEvents.more())
            {
                HiGHPlanBoardPlannedEvent current = liTargetRowItemPlannedEvents.value();

                if (DateTimeUtil::date(current.parmStartDateTime()) == DateTimeUtil::date(targetPeriod.parmStartDateTime()))
                {
                    lastLineNum = current.parmDateOnlyLineNum();  
                    correctDate = true;
                }
                else if (correctDate)
                {
                    break;
                }

                liTargetRowItemPlannedEvents.next();
            }            

            //Insert as last item in correct date (Before this new one)
            sourcePlannedEvent.parmRowItemId(targetRowItem.parmId());
            sourcePlannedEvent.parmStartDateTime(targetPeriod.parmStartDateTime());
            sourcePlannedEvent.parmEndDateTime(targetPeriod.parmEndDateTime());
            sourcePlannedEvent.parmDateOnlyLineNum(lastLineNum + 1);
            liTargetRowItemPlannedEvents.insert(sourcePlannedEvent);

            if (!changedPlannedEventIds.in(sourcePlannedEvent.parmId()))
            {
                changedPlannedEvents.addEnd(HiGHPlanBoardPlannedEventBaseArgs::newParametersFromPlannedEventObject(sourcePlannedEvent));
                changedPlannedEventIds.add(sourcePlannedEvent.parmId());
            }
            
        }

        HiGHPlanBoardOnChangeDateOnlyPlannedEventEventArgs args = new HiGHPlanBoardOnChangeDateOnlyPlannedEventEventArgs();
        args.parmPlannedEvents(changedPlannedEvents);
        this.onChangeDateOnly(args);

        this.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExternalDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called form client when an external element has been dropped on a period
    /// </summary>
    /// <param name = "_plannedEvent">Serialized object of HiGHPlanBoardExternalDropEventArgs</param>
    /// <returns>boolean value indiciating if change was allowed</returns>
    [FormCommandAttribute("OnExternalDrop")]
    private void onExternalDrop(str _externalDropEventArgs)
    {
        HiGHPlanBoardExternalDropEventArgs externalDropEventArgs;

        externalDropEventArgs = FormControlUtil::convertStrToObject(classIdGet(externalDropEventArgs), _externalDropEventArgs);

        //Calculate and popuplate targetStartDateTime
        utcdatetime startDateTime;
        utcdatetime endDateTime;

        [startDateTime, endDateTime] = HiGHPlanBoardPeriod::calculateDateTimesFromPeriods(externalDropEventArgs.parmTargetPeriodId(), 0, this.parmStartDate(), this.parmTimeScale());
        externalDropEventArgs.parmTargetStartDateTime(startDateTime);

        this.onExternalDropped(externalDropEventArgs); //TODO: Should this return a list with updates?? (WPLO)
    }

]]></Source>
			</Method>
			<Method>
				<Name>onContextChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called from client when context object has changed
    /// </summary>
    /// <param name = "_contextClass">Class name of new context</param>
    /// <param name = "_contextId">Context object</param>
    [FormCommandAttribute("OnContextChanged")]
    private void onContextChanged(str _contextClassName, str _context)
    {
        utcdatetime startDateTime;
        utcdatetime endDateTime;

        if (_contextClassName == 'HiGHPlanBoardOnContextPeriodEventArgs')
        {
            contextEventArgs = FormControlUtil::convertStrToObject(className2Id(_contextClassName), _context);

            //Convert period ids to utcdatetime
            HiGHPlanBoardOnContextPeriodEventArgs onContextPeriodEventArgs = contextEventArgs as HiGHPlanBoardOnContextPeriodEventArgs;
            [startDateTime, endDateTime] = HiGHPlanBoardPeriod::calculateDateTimesFromPeriods(onContextPeriodEventArgs.parmStartPeriodId(), onContextPeriodEventArgs.parmEndPeriodId(), this.parmStartDate(), this.parmTimeScale());
            onContextPeriodEventArgs.parmStartDateTime(startDateTime);
            onContextPeriodEventArgs.parmEndDateTime(endDateTime);

            HiGHPlanBoardRowItem rowItem = HiGHPlanBoardRowItem::find(onContextPeriodEventArgs.parmRowItemId(), rowItems);
            onContextPeriodEventArgs.parmRowItemRefTableId(rowItem.parmRefTableId());
            onContextPeriodEventArgs.parmRowItemRefRecId(rowItem.parmRefRecId());

            this.onContextPeriod(contextEventArgs, contextMenuItems);
        }
        else if (_contextClassName == 'HiGHPlanBoardPlannedEventBaseArgs')
        {
            List contextPlannedEventFromClient = FormControlUtil::convertStrToCollection(classNum(List), _context, Types::Class, classStr(HiGHPlanBoardPlannedEventBaseArgs));
            List contextPlannedEvents = new List(Types::Class);
            Enumerator leContextPlannedEventsFromClient = contextPlannedEventFromClient.getEnumerator();

            while (leContextPlannedEventsFromClient.moveNext())
            {
                HiGHPlanBoardPlannedEventBaseArgs baseArgs = leContextPlannedEventsFromClient.current();

                HiGHPlanBoardPlannedEvent plannedEvent = HiGHPlanBoardPlannedEvent::find(baseArgs.parmId(), rowItems);
                contextPlannedEvents.addEnd(HiGHPlanBoardPlannedEventBaseArgs::newParametersFromPlannedEventObject(plannedEvent));
            }

            contextEventArgs = new HiGHPlanBoardOnContextPlannedEventEventArgs();
            contextEventArgs.parmPlannedEvents(contextPlannedEvents);

            this.onContextPlannedEvent(contextEventArgs, contextMenuItems);
        }
        else if (_contextClassName == 'HiGHPlanBoardOnContextRowItemEventArgs')
        {
            List contextRowItemsFromClient = FormControlUtil::convertStrToCollection(classNum(List), _context, Types::Class, classStr(HiGHPlanBoardRowItemBaseArgs));
            List contextRowItems = new List(Types::Class);
            Enumerator leContextRowItemsFromClient = contextRowItemsFromClient.getEnumerator();

            while (leContextRowItemsFromClient.moveNext())
            {
                HiGHPlanBoardRowItemBaseArgs baseArgs = leContextRowItemsFromClient.current();

                HiGHPlanBoardRowItem rowItem = HiGHPlanBoardRowItem::find(baseArgs.parmId(), rowItems);
                contextRowItems.addEnd(HiGHPlanBoardRowItemBaseArgs::newParametersFromRowItemObject(rowItem));
            }

            contextEventArgs = new HiGHPlanBoardOnContextRowItemEventArgs();
            contextEventArgs.parmRowItems(contextRowItems);

            this.onContextRowItem(contextEventArgs, contextMenuItems);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a menuitem has been clicked
    /// </summary>
    /// <param name = "_id">Menuitem id</param>
    [FormCommandAttribute("OnMenuItemClicked")]
    public void menuItemClicked(str _menuItemId)
    {
        str menuItemValue;
        ListEnumerator leMenuItems = this.parmContextMenuItems().getEnumerator();

        while (leMenuItems.moveNext())
        {
            HiGHPlanBoardMenuItem menuItem = leMenuItems.current();
            if (menuItem.parmId() == str2Int(_menuItemId))
            {
                menuItemValue = menuItem.parmValue() ? menuItem.parmValue() : menuItem.parmLabel();
                break;
            }
        }

        //Replace menuitems with new empty List
        this.parmContextMenuItems(new List(Types::Class));

        HiGHPlanBoardMenuItemClickedEventArgs::newParameters(str2Int(_menuItemId), menuItemValue, contextEventArgs);

        this.onMenuItemClicked(HiGHPlanBoardMenuItemClickedEventArgs::newParameters(str2Int(_menuItemId), menuItemValue, contextEventArgs));
    }

]]></Source>
			</Method>
			<Method>
				<Name>icons2HTML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts icon string to HTML containing resource strings
    /// </summary>
    /// <param name = "_icons">Symbols to show</param>
    /// <returns>sring contianing HTML with IMG tags to resources</returns>
    // TODO: OBSOLETE - Remove (WPLO)
    [FormCommandAttribute("Icons2HTML")]
    private str icons2HTML(str _icons)
    {
        //TODO: Add possible symbols to be represented as a string (WPLO)
        return '<img width="20px" height="20px" src="resources/Images/1478_Users_32.png" />';
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the max period number
    /// </summary>
    /// <returns>Integer specifying the last period number</returns>
    [FormCommandAttribute("MaxPeriod")]
    private integer maxPeriod()
    {
        return periods.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>movePlannedEventToNewRow</Name>
				<Source><![CDATA[
    //Utility functions
    /// <summary>
    /// Moves a plannedEvent to a new rowItem
    /// </summary>
    /// <param name = "_plannedEventId">Id of the plannedEvent to move</param>
    /// <param name = "_newRowId">Id of the destination row id</param>
    /// <returns>HiGHPlanBoardPlannedEvent object with the updated parameters</returns>
    private HiGHPlanBoardPlannedEvent movePlannedEventToNewRow(str _plannedEventId, str _newRowId)
    {
        ListEnumerator              lePlannedEvents = rowItems.getEnumerator();
        HiGHPlanBoardPlannedEvent   plannedEvent;
        boolean                     found = false;

        //Get plannedEvent, and remove from current row
        while (lePlannedEvents.moveNext())
        {
            HiGHPlanBoardRowItem rowItem = lePlannedEvents.current();

            //Using ListIterator here as we need to delete form the List
            ListIterator liRowItemPlannedEvents = new ListIterator(rowItem.parmPlannedEvents());            
            
            while (liRowItemPlannedEvents.more())
            {
                plannedEvent = liRowItemPlannedEvents.value();

                if (plannedEvent.parmId() == _plannedEventId)
                {
                    liRowItemPlannedEvents.delete();
                    found = true;
                    break;
                }

                liRowItemPlannedEvents.next();
            }

            if (found)
            {
                //Recalculate collisionLevels for row where plannedEvent was removed from
                HiGHPlanBoardRowItem::calculateCollisionLevels(rowItem);
                break;
            }
        }
        
        //Insert plannedEvent in new row
        plannedEvent.parmRowItemId(_newRowId);

        lePlannedEvents.reset();
        int rowMaxCollisionLevel = 0;

        while (lePlannedEvents.moveNext())
        {
            HiGHPlanBoardRowItem rowItem = lePlannedEvents.current();

            if (rowItem.parmId() == _newRowId)
            {
                //Add plannedEvent to new RowItem
                rowItem.parmPlannedEvents().addEnd(plannedEvent);

                //Recalculate collisionLevels for row where plannedEvent was moved to
                HiGHPlanBoardRowItem::calculateCollisionLevels(rowItem);
                
                break;
            }
        }

        return plannedEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChange</Name>
				<Source><![CDATA[
    //Exposed methods
    /// <summary>
    /// Fired when changes to a planning has been made
    /// </summary>
    /// <param name = "_plannedEvent">Object of HiGHPlanBoardOnChangePlannedEventEventArgs containing updated values</param>
    /// <returns></returns>
    public HiGHPlanBoardOnChangePlannedEventEventArgs onChange(HiGHPlanBoardOnChangePlannedEventEventArgs _onChangePlannedEventEventArgs)
    {
        return _onChangePlannedEventEventArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChangeDateOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fired when changes to a planning has been made
    /// </summary>
    /// <param name = "_plannedEvent">Object of HiGHPlanBoardOnChangePlannedEventEventArgs containing updated values</param>
    /// <returns></returns>
    public HiGHPlanBoardOnChangeDateOnlyPlannedEventEventArgs onChangeDateOnly(HiGHPlanBoardOnChangeDateOnlyPlannedEventEventArgs _onChangeDateOnlyPlannedEventEventArgs)
    {
        return _onChangeDateOnlyPlannedEventEventArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExternalDropped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fired when an external element has been dropped on a period
    /// </summary>
    /// <param name = "_plannedEvent">Object of HiGHPlanBoardPlanning containing updated values</param>
    /// <returns></returns>
    public void onExternalDropped(HiGHPlanBoardExternalDropEventArgs _externalDropEventArgs)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>onContextPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fired when context object has been changed
    /// </summary>
    /// <param name = "_plannedEvent">Object of HiGHPlanBoardPlanning containing updated values</param>
    /// <returns></returns>    
    public void onContextPeriod(HiGHPlanBoardOnContextPeriodEventArgs _contextObject, List _contextMenuItems)
    {        
        this.parmContextMenuItems(_contextMenuItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onContextPlannedEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fired when context object has been changed
    /// </summary>
    /// <param name = "_plannedEvent">Object of HiGHPlanBoardPlanning containing updated values</param>
    /// <returns></returns>
    public void onContextPlannedEvent(HiGHPlanBoardOnContextPlannedEventEventArgs _contextObject, List _contextMenuItems)
    {
        this.parmContextMenuItems(_contextMenuItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onContextRowItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fired when context object has been changed
    /// </summary>
    /// <param name = "_plannedEvent">Object of HiGHPlanBoardPlanning containing updated values</param>
    /// <returns></returns>
    public void onContextRowItem(HiGHPlanBoardOnContextRowItemEventArgs _contextObject, List _contextMenuItems)
    {
        this.parmContextMenuItems(_contextMenuItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onMenuItemClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a menuitem has been clicked
    /// </summary>
    /// <param name = "_id">Menuitem id</param>
    public void onMenuItemClicked(HiGHPlanBoardMenuItemClickedEventArgs _menuItemClickedEventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to retrieve current context object
    /// </summary>
    /// <returns>Object containing the current context. (Possible types: HiGHPlanBoardPeriod, HiGHPlanBoardRowItem, HiGHPlanBoardPlannedEvent, HiGHPlanBoardDateRange)</returns>
    public Object getContextObject()
    {
        return contextEventArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called to reload plannings from datasource
    /// </summary>
    /// <param name = "_plannedEvents">List of objects of HiGHPlanBoardPlanning containing updated values.</param>
    /// <returns></returns>
    [FormCommandAttribute("Refresh")]
    public void refresh(List _rowItems = this.parmRowItems())
    {
        rowItems = _rowItems;

        this.parmRowItems(rowItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resizedWidth</Name>
				<Source><![CDATA[
    private void resizedWidth()
    {
        mustUpdateSecondaryPeriods = true;
        mustUpdatePeriods = true;

        this.parmPeriodWidth();
        this.parmPeriodsSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resizedHeight</Name>
				<Source><![CDATA[
    private void resizedHeight()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>