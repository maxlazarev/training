<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchFormletterParmDataRORReturnNoteStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DNRExtensionStrategyFactoryAttribute(classStr(PurchFormletterParmDataRORReturnNote))]
class DNRPurchFormletterParmDataRORReturnNoteStrategy extends DNRPurchFormletterParmDataStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BOBSetTransDateTime</Name>
				<Source><![CDATA[
    public void BOBSetTransDateTime(VendDocumentTableMap _parmTable, PurchTable _purchTable)
    {
        RORRentalDateTimes  rentalDateTimes;
        TransDateTime       offRentWithTimeZone;
    
        if (this.parmPurchFormletterParmData().parmInterCompanyParmId()
        &&  FINRentalInvoiceProfile::find(_purchTable.INVInvoiceProfileId).InvoiceStartEndBasis == INVInvoiceStartEndBasis::DeliveryReturn)
        {
            FormLetterContract formLetterContractLocal = this.parmPurchFormletterParmData().INVParmFormLetterContract();

            switch(_parmTable.TableId)
            {
                case tableNum(PurchParmTable):
                    PurchParmTable purchParmTable = _parmTable as PurchParmTable;
                    purchParmTable.TransDate = formLetterContractLocal.parmTransDate();
                    purchParmTable.BOBTransTime = formLetterContractLocal.RORTransTime();
                    break;

                case tableNum(VendInvoiceInfoTable):
                    VendInvoiceInfoTable vendInvoiceInfoTable = _parmTable as VendInvoiceInfoTable;
                    vendInvoiceInfoTable.TransDate = formLetterContractLocal.parmTransDate();
                    vendInvoiceInfoTable.BOBTransTime = formLetterContractLocal.RORTransTime();
                    break;
            }
        }
        else
        {
            rentalDateTimes = _purchTable.RORRentalDateTimesHost::rentalDateTimes();
    
            if (rentalDateTimes)
            {
                offRentWithTimeZone = DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.getOffRentDateTime(), DateTimeUtil::getUserPreferredTimeZone());
    
                switch(_parmTable.TableId)
                {
                    case tableNum(PurchParmTable):
                        PurchParmTable purchParmTable = _parmTable as PurchParmTable;
                        purchParmTable.TransDate = DateTimeUtil::date(offRentWithTimeZone);
                        purchParmTable.BOBTransTime = DateTimeUtil::time(offRentWithTimeZone);
                        break;

                    case tableNum(VendInvoiceInfoTable):
                        VendInvoiceInfoTable vendInvoiceInfoTable = _parmTable as VendInvoiceInfoTable;
                        vendInvoiceInfoTable.TransDate = DateTimeUtil::date(offRentWithTimeZone);
                        vendInvoiceInfoTable.BOBTransTime = DateTimeUtil::time(offRentWithTimeZone);
                        break;
                }
            }
            else
            {
                super(_parmTable, _purchTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetInvoiceDateTime</Name>
				<Source><![CDATA[
    public void INVSetInvoiceDateTime(VendDocumentLineMap _parmLine, PurchLine _purchLine = null)
    {
        if (_parmLine is PurchParmLine)
        {
            PurchParmLine purchParmLineLoc = _parmLine as PurchParmLine;
            ///purchParmLineLoc.INVSetInvoiceDateTime(this.parmPurchFormletterParmData().INVParmFormLetterContract(), _purchLine, true, DateTimeUtil::minValue(), this.parmPurchFormletterParmData());
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName())); // this should never happen
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>