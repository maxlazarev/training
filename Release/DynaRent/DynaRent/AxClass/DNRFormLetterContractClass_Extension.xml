<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRFormLetterContractClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(FormLetterContract))]
public final class DNRFormLetterContractClass_Extension
{
    private DNRFormLetterContractStrategy strategy;
    private RORRentalDateTime rentalPostingDateTime;
    private TimeOfDay transTime;
    private BOBRentalSubStatus rentalSubStatus;
    private WPPWorkOrderId workOrderIdLoc;
    private WPPWorkOrderLineRecId workOrderLineRecId;
    private boolean forceReturnTransport;
    private boolean postFuelLine;
    private boolean mustDuplicateTaskLoc;
    private boolean mustExcludeRentalOrders;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        transTime,        
        rentalSubStatus,
        workOrderIdLoc,
        postFuelLine,
        mustDuplicateTaskLoc,
        mustExcludeRentalOrders
    #ENDMACRO

    #LOCALMACRO.CurrentListV1
        transTime,
        rentalSubStatus,
        workOrderIdLoc,
        postFuelLine,
        mustDuplicateTaskLoc
    #ENDMACRO

    // extension methods
                       
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DNRUnpack</Name>
				<Source><![CDATA[
    private boolean DNRUnpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        switch(version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            case 1:
                [version, #CurrentListV1] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPack</Name>
				<Source><![CDATA[
    private container DNRPack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORTransTime</Name>
				<Source><![CDATA[
    public TimeOfDay RORTransTime(TimeOfDay  _transTime = transTime)
    {
        if(!_transTime)
        {
            // will be use to create DateTime in data base so keep in GMT time
            _transTime = DateTimeUtil::time(DateTimeUtil::getSystemDateTime());
        }
    
        transTime = _transTime;
    
        return transTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCanResetinvoiceTransDataMap</Name>
				<Source><![CDATA[
    public boolean INVCanResetinvoiceTransDataMap()
    {
        return this.parmFormLetterContractStrategy().INVCanResetinvoiceTransDataMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVAddPreviouslyCalculated</Name>
				<Source><![CDATA[
    public void INVAddPreviouslyCalculated()
    {
        this.parmFormLetterContractStrategy().INVAddPreviouslyCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmWorkOrderId</Name>
				<Source><![CDATA[
    public WPPWorkOrderId WPPparmWorkOrderId(WPPWorkOrderId _workOrderId = workOrderIdLoc)
    {
        workOrderIdLoc = _workOrderId;
        return workOrderIdLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetterContractStrategy</Name>
				<Source><![CDATA[
    private DNRFormLetterContractStrategy parmFormLetterContractStrategy()
    {
        if (!strategy)
        {
            strategy = DNRFormLetterContractStrategy::construct(this);
        }

        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmRentalSubStatus</Name>
				<Source><![CDATA[
    public BOBRentalSubStatus RORparmRentalSubStatus(BOBRentalSubStatus _rentalSubStatus = rentalSubStatus)
    {
        rentalSubStatus = _rentalSubStatus;
    
        return rentalSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmPostFuelLine</Name>
				<Source><![CDATA[
    public boolean RORParmPostFuelLine(boolean _postFuelLine = postFuelLine)
    {
        postFuelLine = _postFuelLine;

        return postFuelLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmCallerMenuItem</Name>
				<Source><![CDATA[
    public MenuItemNameAction DNRParmCallerMenuItem()
    {
        return callerMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmMustExcludeRentalOrders</Name>
				<Source><![CDATA[
    public boolean RORparmMustExcludeRentalOrders(boolean _mustExcludeRentalOrders = mustExcludeRentalOrders)
    {
        mustExcludeRentalOrders = _mustExcludeRentalOrders;
        return mustExcludeRentalOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmWorkOrderLineRecId</Name>
				<Source><![CDATA[
    public WPPWorkOrderLineRecId WPPParmWorkOrderLineRecId(WPPWorkOrderLineRecId _workOrderLineRecId = workOrderLineRecId)
    {
        workOrderLineRecId = _workOrderLineRecId;
        return workOrderLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmRentalSubStatusLowerOrEqual</Name>
				<Source><![CDATA[
    public boolean RORparmRentalSubStatusLowerOrEqual(BOBRentalSubStatus _rentalSubStatus)
    {
        boolean ret = false;
        
        switch (_rentalSubStatus)
        {
            case BOBRentalSubStatus::Delivered :
                if (BOBRentalSubStatus::None
                || BOBRentalSubStatus::Quotation
                || BOBRentalSubStatus::QuotationSent
                || BOBRentalSubStatus::QuotationInspected
                || BOBRentalSubStatus::Ordered
                || BOBRentalSubStatus::Confirmed
                || BOBRentalSubStatus::Picked
                || BOBRentalSubStatus::Prepared
                || BOBRentalSubStatus::Outbound
                || BOBRentalSubStatus::Delivered)
                {
                    ret = true;
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmMustDuplicateTask</Name>
				<Source><![CDATA[
    public boolean WPPParmMustDuplicateTask(boolean _mustDuplicateTask = mustDuplicateTaskLoc)
    {
        mustDuplicateTaskLoc = _mustDuplicateTask;
        return mustDuplicateTaskLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_pack_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(classStr(FormLetterContract), methodStr(FormLetterContract, pack))]
    public static void DNREvent_pack_post(XppPrePostArgs _eventArgs)
    {
        FormLetterContract instance = _eventArgs.getThis() as FormLetterContract;

        // also pack the extension
        SysPackExtensions::pack(_eventArgs, classStr(DNRFormLetterContractClass_Extension), instance.DNRPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_unpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(FormLetterContract), methodStr(FormLetterContract, unpack))]
    public static void DNREvent_unpack_post(XppPrePostArgs _eventArgs)
    {
        FormLetterContract instance = _eventArgs.getThis() as FormLetterContract;

        container myState = SysPackExtensions::unpack(_eventArgs, classStr(DNRFormLetterContractClass_Extension));

        //Also unpack the extension
        if (!instance.DNRUnpack(myState))
        {
            _eventArgs.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>