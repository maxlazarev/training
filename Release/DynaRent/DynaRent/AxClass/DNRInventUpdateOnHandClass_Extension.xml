<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventUpdateOnHandClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpdateOnHand))]
public final class DNRInventUpdateOnHandClass_Extension
{
    private InventTrans DNRInventTrans;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOnHandCheck</Name>
				<Source><![CDATA[
    protected void addOnHandCheck(
        InventTrans         _inventTrans,
        InventSumDelta      _inventSumDelta,
        InventModelGroup    _inventModelGroup)
    {
        DNRinventTrans = _inventTrans;

        next addOnHandCheck(_inventTrans, _inventSumDelta, _inventModelGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckPhysicalOnhand</Name>
				<Source><![CDATA[
    // VERI: The method 'mustCheckPhysicalOnHand()' is only called from the method 'addOnHandCheck()' (at the time of writing).
    // We had added an extra condition to the if-statement in the method 'addOnHandCheck()', because we don't want to check on-hand 
    // level for rental/subrental lines. We have moved that extra condition to the post-event of this method (using Chain of Command).
    protected boolean mustCheckPhysicalOnhand(
        InventSumDelta      _inventSumDelta,
        InventModelGroup    _inventModelGroup)
    {
        boolean ret = next mustCheckPhysicalOnHand(_inventSumDelta, _inventModelGroup);

        return ret && !this.RORIsRentalSubrentalLine(DNRInventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORIsRentalSubrentalLine</Name>
				<Source><![CDATA[
    // extension methods

    private boolean RORIsRentalSubrentalLine(InventTrans _inventTrans)
    {
        boolean                 ret = false;
        PurchLine               purchLine;
        SalesLine               salesLine;
        InventTransOrigin       inventTransOrigin;
        ;
    
        select firstOnly RecId from purchLine
        where purchLine.RORTradeType != RORTradeType::SalesPurch
            exists join inventTransOrigin
            where inventTransOrigin.InventTransId == purchLine.InventTransId
            &&    inventTransOrigin.RecId == _inventTrans.InventTransOrigin;
    
        if (purchLine)
        {
            ret = true;
        }
        else
        {
            select firstOnly RecId from salesLine
            where salesLine.RORTradeType != RORTradeType::SalesPurch
                exists join inventTransOrigin
                where inventTransOrigin.InventTransId == salesLine.InventTransId
                &&    inventTransOrigin.RecId == _inventTrans.InventTransOrigin;
    
            if (salesLine)
            {
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>