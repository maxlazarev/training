<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationEditLinesForm_Sales_ConfirClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationEditLinesForm_Sales_Confir))]
public final class DNRSalesQuotationEditLinesForm_Sales_ConfirClass_Extension
{
    private SalesQuotationLine salesQuotationLineUpdate;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    boolean createSalesTable()
    {
        boolean ret = next createSalesTable();

        if(ret)
        {
            SalesTable salesTableLocal = this.parmSalesTableCreated();

            this.RORCreateRentalDatesForHeader(salesTableLocal, salesQuotationTable);
            DNRAdditionalNoteTable::copyNotes(salesQuotationTable, salesTableLocal);
            WPPTaskRequirements::copyTaskRequirements(salesQuotationTable, salesTableLocal);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    protected SalesType salesType()
    {
        SalesType ret = next SalesType();

        if(this.RORQuotationType() == QuotationType::RORRental)
        {
            ret = SalesType::RORRental;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    public void postUpdate()
    {
        SalesQuotationLine salesQuotationLineLocal;
        InventTrans inventTrans;
        InventTransOriginSalesQuotationLine originSalesQuotationLine;
    
        next postUpdate();
    
        while select salesQuotationLineLocal
        where salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId
        join TableId from originSalesQuotationLine
            where originSalesQuotationLine.SalesQuotationLineInventTransId == salesQuotationLineLocal.InventTransId
            &&    originSalesQuotationLine.SalesQuotationLineDataAreaId == salesQuotationLineLocal.dataAreaId
                join  inventTrans
                where inventTrans.InventTransOrigin == originSalesQuotationLine.InventTransOrigin
        {
            InventMovement inventMovement = InventMovement::construct(salesQuotationLineLocal);
            BOBRentalTransManager::newInventMovement(inventMovement, inventTrans).synchronize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    protected void createSalesLine(SalesLine _salesLine, SalesLineCreateLineParameters _salesLineCreateLineParameters)
    {
        _salesLine.INVSkipTierMultiplierCalcOnCreation = true;

        next createSalesLine(_salesLine, _salesLineCreateLineParameters);

        if(salesQuotationLineUpdate.salesQuotationTable().QuotationType == QuotationType::RORRental)
        {
            if (salesQuotationLineUpdate && _salesLine)
            {
                DNRAdditionalNoteTable::copyNotes(salesQuotationLineUpdate, _salesLine);
                DFMValueTrans::copyValues(salesQuotationLineUpdate, _salesLine, BOBRentalType::find(_salesLine.BOBRentalTypeId()).BusObjAttrFldGrpId, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLines</Name>
				<Source><![CDATA[
    void createSalesLines(SalesQuotationTable _salesQuotationTable, SalesTable _salesTable)
    {
        next createSalesLines(_salesQuotationTable, _salesTable);

        new RORPopulateRentalLineParent(_salesQuotationTable, _salesTable).run();
        new RORRentalDateTimesJournalizer(_salesQuotationTable, _salesTable).run();

        SalesLine salesLineTarget;
        SalesQuotationLine salesQuotationLineSource;

        while select salesLineTarget
        where salesLineTarget.SalesId == _salesTable.SalesId
            join  salesQuotationLineSource
            where salesQuotationLineSource.QuotationId == _salesQuotationTable.QuotationId
            &&    salesQuotationLineSource.InventTransId == salesLineTarget.RORInventTransIdSource
        {
            if(salesQuotationLineSource.LineDeliveryType == LineDeliveryType::DeliveryLine
            && _salesQuotationTable.QuotationType == QuotationType::RORRental)
            {
                DNRAdditionalNoteTable::copyNotes(salesQuotationLineSource, salesLineTarget);
            }

            RAGDuplicateContract::duplicateAll(RAGContractType::RentalOrderLine,
                                               salesQuotationLineSource.InventTransId,
                                               RAGContractRefModule::Quotation,
                                               salesQuotationLineSource.CurrencyCode,
                                               salesLineTarget.InventTransId,
                                               RAGContractRefModule::Sales);
            WPPTaskRequirements::copyTaskRequirements(salesQuotationLineSource, salesLineTarget);
            WPPTransportRouteAddress::copyTransportRoute(salesQuotationLineSource, salesLineTarget);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLine</Name>
				<Source><![CDATA[
    protected SalesLine initSalesLine(SalesTable _salesTable, SalesQuotationLine _salesQuotationLineUpdate)
    {
        SalesLine salesLine = next initSalesLine(_salesTable, _salesQuotationLineUpdate);

        salesQuotationLineUpdate = _salesQuotationLineUpdate;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSales</Name>
				<Source><![CDATA[
    protected boolean checkSales()
    {
        boolean ret = next checkSales();

        return (ret && salesQuotationTable.DNRcheckCustRequisition());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    QueryRun queryBuildSalesQuotationTable()
    {
        QueryRun    ret     = next queryBuildSalesQuotationTable();
        Query       query   = ret.query();

        QueryBuildDataSource salesQuotationTabledataSource = query.dataSourceTable(tableNum(SalesQuotationTable));
        QueryBuildRange queryBuildRangeType = salesQuotationTabledataSource.findRange(fieldNum(SalesQuotationTable, QuotationType));

        if (callerRecordsPackedMap == conNull())
        {
            queryBuildRangeType.value(enum2str(this.RORQuotationType()));
        }
        else
        {
            if (!skipQueryStatusFilter)
            {
                queryBuildRangeType.value(SysQuery::value(this.RORQuotationType()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    boolean updateNow()
    {
        boolean ret = next updateNow();

        SalesQuotationTable          salesQuotationTable        = this.salesQuotationTable();
        CustQuotationConfirmJour     custQuotationConfirmJour   = this.journal();
        
        new RORPopulateRentalLineParent(salesQuotationTable, custQuotationConfirmJour).run();
        new RORRentalDateTimesJournalizer(salesQuotationTable, custQuotationConfirmJour).run();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCopyRentalDateTimes</Name>
				<Source><![CDATA[
    // extension methods

    public void RORCopyRentalDateTimes(RORRentalDateTimes _rentalDateTimeFrom, RORRentalDateTimesHost _hostTo, boolean _createNewClassInstance = false)
    {
        RORRentalDateTimes rentalDateTimes;
        RORRentalDateSynchroniser rentalDateSynchroniser = new RORRentalDateSynchroniser();
    
        rentalDateSynchroniser.copyRentalDateTimes(_rentalDateTimeFrom, rentalDateTimes, _hostTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateRentalDateTimes</Name>
				<Source><![CDATA[
    public void RORUpdateRentalDateTimes(RORRentalDateTimes _rentalDateTimeFrom, RORRentalDateTimes _rentalDateTimeTo)
    {
        _rentalDateTimeTo.initFromRentalDateTimes(_rentalDateTimeFrom);
        _rentalDateTimeTo.update();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateRentalDatesForHeader</Name>
				<Source><![CDATA[
    public void RORCreateRentalDatesForHeader(SalesTable _salesTable, SalesQuotationTable _salesQuotationTable)
    {
        // Synchronise sales rental dates from sales quotation header
        if (_salesTable.SalesType == SalesType::RORRental)
        {
            this.RORCopyRentalDateTimes(_salesQuotationTable.RORRentalDateTimesHost::rentalDateTimes(), _salesTable, true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>