<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventTransWMS_PickClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventTransWMS_Pick))]
public final class DNRInventTransWMS_PickClass_Extension
{
    private Map mapRentalAvailableQty;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateInventoryPicked</Name>
				<Source><![CDATA[
    protected static void updateInventoryPicked(TmpInventTransWMS _tmpInventTransWMSRecord, InventMovement _movement, InventDimParm _inventDimParm)
    {
        next updateInventoryPicked(_tmpInventTransWMSRecord, _movement, _inventDimParm);

        InventDim       inventDim   = InventDim::find(_tmpInventTransWMSRecord.InventDimId);
        BOBRentalType   rentalType  = BOBRentalType::findFromItemId(_tmpInventTransWMSRecord.ItemId);

        if (_tmpInventTransWMSRecord.ReferenceCategory == InventTransType::InventTransaction
            && rentalType 
            && rentalType.Classification == BOBRentalTypeClassification::Serialized)
        {
            BOBObjectManager::registerPickInventJournalTrans(inventDim.inventSerialId, _tmpInventTransWMSRecord, -_tmpInventTransWMSRecord.InventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAvailableQuantity</Name>
				<Source><![CDATA[
    protected void initAvailableQuantity()
    {
        next initAvailableQuantity();

        mapRentalAvailableQty = new Map(Types::String,Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBAvailOrderQuantity</Name>
				<Source><![CDATA[
    // extension methods

    public BOBRentalQtyAvailPhysical BOBAvailOrderQuantity(InventTrans _inventTrans, InventDimId _inventDimId = _inventTrans.InventDimId)
    {
        InventDim                   inventDimLocal;
        BOBRentalQtyAvailPhysical   availableQty;
        Common                      originator;
        RORRentalDateTimesHost      dateTimeHost = originator;
        str                         mapKey = strFmt('%1#%2',_inventTrans.ItemId,_inventDimId);
    
        switch (_inventTrans.StatusIssue)
        {
            case StatusIssue::None:
            case StatusIssue::Picked:
                availableQty = 0;
                break;
    
            case StatusIssue::ReservPhysical:
                availableQty = -_inventTrans.Qty;
                break;
    
            default:
                originator = InventTransOrigin::find(_inventTrans.InventTransOrigin).originator();
    
                if (INVInvoicePeriodHost::canHaveInvoicePeriods(originator.TableId))
                {
                    dateTimeHost = originator;
                    mapKey = strFmt('%1#%2',_inventTrans.ItemId,_inventDimId);
    
                    if (mapRentalAvailableQty.exists(mapKey))
                    {
                        availableQty = mapRentalAvailableQty.lookup(mapKey);
                    }
                    else
                    {
                        inventDimLocal = InventDim::find(_inventDimId);
    
                        availableQty = new BOBRentalInventOnHand().availPhysicalQty(BOBRentalType::findFromItemId(_inventTrans.ItemId).RentalTypeId,
                                                                                    inventDimLocal.InventLocationId,
                                                                                    dateTimeHost.RORRentalDateTimesHost::rentalDateTimes().OnRentDateTime);
                        mapRentalAvailableQty.insert(mapKey,availableQty);
                    }
                }
                else
                {
                    availableQty = 0;
                }
                break;
        }
    
        return availableQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>