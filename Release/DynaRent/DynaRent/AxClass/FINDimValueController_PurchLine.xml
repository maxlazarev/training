<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimValueController_PurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimValueController_PurchLine extends FINDimValueController
{
    PurchLine   callerPurchLine, parentPurchLine;
    PurchTable  purchTable;
    InventDim   inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceptCascadedUpdate</Name>
				<Source><![CDATA[
    protected boolean acceptCascadedUpdate()
    {
        return (callerPurchLine.PurchStatus != PurchStatus::Invoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findSalesId()
    {
        WPPWorkOrderTable       workOrderTable;
        RORSubrentalReference   subRentalReference;
    
        if (callerPurchLine.ProjId)
        {
            workOrderTable = WPPWorkOrderLine::findProjId(callerPurchLine.projId).workOrderTable();
    
            if (workOrderTable.OrderTableId == tableNum(SalesLine))
            {
                return FINDimValueResult::constructValue(SalesTable::findRecId(workOrderTable.OrderRecId).SalesId);
            }
        }
        else
        {
            select firstonly subrentalReference
            where subrentalReference.PurchInventTransId == callerPurchLine.InventTransId;
    
            if (subRentalReference)
            {
                return FINDimValueResult::constructValue(subRentalReference.SalesId);
            }
        }
    
        return FINDimValueResult::constructValue(callerPurchLine.PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    protected Description getDescription()
    {
        return callerPurchLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimensionFieldId()
    {
        return fieldNum(PurchLine, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PurchLine _purchLine)
    {
        super(_purchLine);
        callerPurchLine = _purchLine;
    
        select firstOnly inventDim
        where inventDim.InventDimId == callerPurchLine.InventDimId
            join  purchTable
            where purchTable.PurchId == callerPurchLine.PurchId
                outer join parentPurchLine
                where parentPurchLine.RecId == callerPurchLine.RORParentLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refLot</Name>
				<Source><![CDATA[
    protected FINDimValueResult refLot()
    {
        FINDimValueResult   valueResult;
        InventTable         inventTable;
        SalesLine           refSalesLine;
        BOBObjectTable      objectTable;
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderLine    workOrderLine;
        PurchLine           kitParentPurchLine;
    
        if (purchTable.PurchaseType != PurchaseType::RORSubRental)
        {
            if (purchTable.ProjId)
            {
                select firstOnly objectTable
                    exists join workOrderTable
                    where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                        join TableId from workOrderLine
                        where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                        &&    workOrderLine.ProjId      == purchTable.ProjId;
    
                return FINDimValueResult::constructReference(objectTable);
            }
            else if (inventDim.inventSerialId)
            {
                return FINDimValueResult::constructReference(BOBObjectTable::findInventSerialId(inventDim.inventSerialId));
            }
            else
            {
                return FINDimValueResult::constructReference(callerPurchLine.inventTable());
            }
        }
    
        if (callerPurchLine.ItemRefType == InventRefType::Sales && callerPurchLine.InventRefTransId)
        {
            refSalesLine = SalesLine::findInventTransId(callerPurchLine.InventRefTransId);
    
            if (refSalesLine)
            {
                return FINDimValueResult::constructReference(refSalesLine);
            }
        }
    
        if (callerPurchLine.RORKitComponentType == RORKitComponentType::Kit && !callerPurchLine.RORParentLineRecId)
        {
            kitParentPurchLine = FINDimValueController_Common::getKitMainComponentLine(callerPurchLine) as PurchLine;
            if (kitParentPurchLine)
            {
                valueResult = FINDimValueResult::constructReference(kitParentPurchLine);
            }
            else
            {
                valueResult = FINDimValueResult::constructReference(callerPurchLine.inventTable());
            }
            return valueResult;
        }
        else if (callerPurchLine.RORKitComponentType == RORKitComponentType::KitComponent)
        {
            return FINDimValueResult::constructReference(parentPurchLine);
        }
    
        if (callerPurchLine.ItemId != RAGParameters::find().ItemIdWarranty)        
        {
            valueResult = FINDimValueController_Common::refLot(callerPurchLine.ItemId, callerPurchLine.InventDimId);
    
            if (valueResult
            &&  valueResult.parmRefRecId())
            {
                return valueResult;
            }
    
            select firstonly RecId from inventTable
            where inventTable.ItemId == callerPurchLine.ItemId;
    
            return FINDimValueResult::constructReference(inventTable);
        }
    
        return FINDimValueResult::constructReference(parentPurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refProject</Name>
				<Source><![CDATA[
    protected FINDimValueResult refProject()
    {
        if (callerPurchLine.ProjId)
        {
            return FINDimValueResult::constructReference(ProjTable::find(callerPurchLine.ProjId));
        }
        else
        {
            return FINDimValueResult::constructValue('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refPurchTable</Name>
				<Source><![CDATA[
    protected FINDimValueResult refPurchTable()
    {
        return FINDimValueResult::constructReference(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCleanupQuery</Name>
				<Source><![CDATA[
    public SysDaQueryObject getCleanupQuery()
    {
        SysDaQueryObject cleanupQuery = new SysDaQueryObject(callerPurchline);

        cleanupQuery.WhereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(callerPurchline, fieldStr(PurchLine, PurchStatus)),
            new SysDaValueExpression(PurchStatus::Invoiced))
        .or(new SysDaEqualsExpression(
            new SysDaFieldExpression(callerPurchline, fieldStr(PurchLine, PurchStatus)),
            new SysDaValueExpression(PurchStatus::Canceled))));

        return cleanupQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>