<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRLedgerJournalCheckPostClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerJournalCheckPost))]
public final class DNRLedgerJournalCheckPostClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateTransForFixedAssets</Name>
				<Source><![CDATA[
    public boolean validateTransForFixedAssets(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection)
    {
        boolean ret = next validateTransForFixedAssets(_ledgerJournalTrans, _ledgerPostingMessageCollection);
    
        if(ret
        && _ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets
        && _ledgerJournalTrans.TransactionType == LedgerTransType::FixedAssets)
        {
            LedgerJournalTrans_Asset ledgerJournalTransAsset = LedgerJournalTrans_Asset::find(_ledgerJournalTrans.RecId);
    
            if(ledgerJournalTransAsset.TransType == AssetTransTypeJournal::Acquisition && _ledgerJournalTrans.Qty < 0)
            {
                ret = checkFailed(strFmt("@SYS71086", fieldPName(ledgerJournalTrans, Qty), 0));
            }
            else if(ledgerJournalTransAsset.TransType == AssetTransTypeJournal::AcquisitionAdj)
            {
                if(_ledgerJournalTrans.AmountCurDebit * _ledgerJournalTrans.Qty < 0)
                {
                    ret = checkFailed("@SYS3985");
                }
    
                if(_ledgerJournalTrans.AmountCurCredit * _ledgerJournalTrans.Qty > 0)
                {
                    ret = checkFailed("@SYS3985");
                }
            }
            else if((ledgerJournalTransAsset.TransType == AssetTransTypeJournal::DisposalSale ||
                     ledgerJournalTransAsset.TransType == AssetTransTypeJournal::DisposalScrap)
                 && (_ledgerJournalTrans.Qty > 0))
            {
                ret = checkFailed(strFmt("@SYS71085", fieldPName(ledgerJournalTrans, Qty), 0));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LBAUpdateContract</Name>
				<Source><![CDATA[
    // extension methods

    private void LBAUpdateContract(LedgerJournalTrans _trans)
    {
        LBAContractTerm::updateContract(_trans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_postJournalPostTransStarting</Name>
				<Source><![CDATA[
    // event handler methods

    [SubscribesTo(classStr(LedgerJournalCheckPost), delegateStr(LedgerJournalCheckPost, postJournalPostTransStarting))]
    public static void DNREvent_postJournalPostTransStarting(LedgerJournalCheckPost _ledgerJournalCheckPost, LedgerJournalTrans _ledgerJournalTrans, boolean _ok, boolean _allOK)
    {
        _ledgerJournalCheckPost.LBAUpdateContract(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>