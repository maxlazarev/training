<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSuppItemTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SuppItemTable))]
public final class DNRSuppItemTableTable_Extension
{
    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RORfindRecId</Name>
				<Source><![CDATA[
    public static SuppItemTable  RORfindRecId(RecId _recId, boolean _update = false)
    {
        SuppItemTable   suppItemTable;
    
        if (_recId)
        {
            suppItemTable.selectForUpdate(_update);
    
            select firstonly suppItemTable
            where suppItemTable.RecId == _recId;
        }
    
        return suppItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORcheckCircularReference</Name>
				<Source><![CDATA[
    private boolean RORcheckCircularReference()
    {
        boolean ret = true;
        SuppItemTable otherSuppItemTable;

        select firstonly RecId from otherSuppItemTable
        where otherSuppItemTable.Module == this.Module
        &&    otherSuppItemTable.ItemCode == TableGroupAll::Table
        &&    otherSuppItemTable.ItemRelation == this.SuppItemId
        &&   ((otherSuppItemTable.AccountRelation == this.AccountRelation && otherSuppItemTable.AccountCode == this.AccountCode) ||
              otherSuppItemTable.AccountCode == TableGroupAll::All ||
              this.AccountCode == TableGroupAll::All)
        &&    otherSuppItemTable.RORTradeType == this.RORTradeType
        &&    otherSuppItemTable.SuppItemId == this.ItemRelation;

        if (otherSuppItemTable.RecId)
        {
            ret = checkFailed(strFmt("@DNR:SuppItemCircularRef", this.ItemRelation, this.SuppItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    // chain-of-command methods

    boolean validateWrite()
    {
        boolean ret = next validateWrite();

        if (ret
        && this.ItemCode == TableGroupAll::Table 
        && this.ItemRelation
        && (this.RORTradeType == RORTradeType::Rental ||
            this.RORTradeType == RORTradeType::SubRental))
        {
            // Check circular reference to prevent endless loop when creating (sub)rental line
            ret = this.RORcheckCircularReference();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(SuppItemTable, RORKitRequiredLevel):
                this.SuppItemOptional = (this.RORKitRequiredLevel != RORKitRequiredLevel::Mandatory);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>