<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransMgr_Invent</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransMgr_Invent extends BOBRentalTransManager
{
    InventJournalTrans      inventJournalTrans;
    BOBInventJournalType    conversionJournalType;
    InventJournalType       journalType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>certaintyFrom</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyFrom()
    {
        switch(subStatus)
        {
            case BOBRentalSubStatus::Ordered, BOBRentalSubStatus::Picked:
                return BOBDateTimeCertainty::Firm;
    
            case BOBRentalSubStatus::Delivered, BOBRentalSubStatus::Invoiced:
                return BOBDateTimeCertainty::Fixed;
    
            default:
                throw error("@DNR6063");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyTo</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyTo(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return BOBDateTimeCertainty::Fixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        #DNRConstants
        FromTime fromTime;
        ;

        // For counting journal , we use the date time which is present on the trans line.
        if(conversionJournalType == BOBInventJournalType::Count)
        {
            return DateTimeUtil::newDateTime(inventJournalTrans.TransDate, inventJournalTrans.BOBTransTime);
        }
    
        fromTime = (conversionJournalType == BOBInventJournalType::Standard ? #INVTimeMax : 0);
    
        return DateTimeUtil::newDateTime(inventJournalTrans.TransDate,
                                         fromTime,
                                         DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer()
    {
        inventJournalTrans = buffer as inventJournalTrans;
    
        if(inventMovement is InventMov_Jour_Loss_Asset
        || inventMovement is InventMov_Jour_Loss_SumUp)
        {
            conversionJournalType = inventJournalTrans.inventJournalTable().BOBInventJournalType;
        }

        if(inventMovement is InventMov_Jour_LossProfit)
        {
            journalType = inventJournalTrans.inventJournalTable().JournalType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId inventLocationId()
    {
        return inventJournalTrans.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMaintainRentalTrans</Name>
				<Source><![CDATA[
    protected boolean mustMaintainRentalTrans()
    {
        // Dont create Rental transaction for Inventory Adjustments
        if(journalType == InventJournalType::LossProfit)
        {
            return false;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    protected InventQty qty()
    {
        InventQty ret = super();
        return (conversionJournalType == BOBInventJournalType::Standard ? ret : -ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId rentalTypeId()
    {
        return BOBRentalType::findFromItemId(inventJournalTrans.ItemId).RentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSignForSplit</Name>
				<Source><![CDATA[
    protected Integer transSignForSplit()
    {
        return (conversionJournalType == BOBInventJournalType::Standard || conversionJournalType == BOBInventJournalType::Count ? super() : -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    protected BOBRentalTransType transType()
    {
        return (conversionJournalType == BOBInventJournalType::Standard || conversionJournalType == BOBInventJournalType::Count ?
                BOBRentalTransType::Invent :
                BOBRentalTransType::Asset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    protected void updateBuffer(boolean _doUpdateBuffer)
    {
        // do nothing
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>