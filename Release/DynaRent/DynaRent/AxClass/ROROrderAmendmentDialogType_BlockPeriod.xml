<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ROROrderAmendmentDialogType_BlockPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ROROrderAmendmentDialogType_BlockPeriod extends ROROrderAmendmentDialogType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWarningText</Name>
				<Source><![CDATA[
    public InfologText getWarningText()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    
        rentalStopOneDayActive = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonType</Name>
				<Source><![CDATA[
    public DNRReasonType reasonType()
    {
        return DNRReasonType::BlockedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PurchLine               purchLine;
        SalesLine               salesLine;
        RORRentalDateTimes      rentalDateTimesLocal;
        TimeZone                userTimeZone;
        INVPeriodStartDateTime  startDateTime;
        INVPeriodEndDateTime    endDateTime;
        INVPeriodStatus         periodStatus;
    
        userTimeZone = DateTimeUtil::getUserPreferredTimeZone();
        periodStatus = tmpOrderAmendmentDialogTable.INVBlockUnblock == INVBlockUnblock::Block ? INVPeriodStatus::Blocked : INVPeriodStatus::Uninvoiced;
    
        if (rentalStopOneDayActive)
        {
            // When the rental stop starts on the on rent date or
            // stops at the off rent date then take the time off the on rent/off rent time
            rentalDateTimesLocal = this.findRentalDateTimes();
    
            startDateTime  = DateTimeUtil::applyTimeZoneOffset(rentalDateTimesLocal.OnRentDateTime , DateTimeUtil::getOriginatingTimeZone(rentalDateTimesLocal.OnRentDateTime ));
            endDateTime    = DateTimeUtil::applyTimeZoneOffset(rentalDateTimesLocal.OffRentDateTime, DateTimeUtil::getOriginatingTimeZone(rentalDateTimesLocal.OffRentDateTime));
    
            if (tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(startDateTime))
            {
                startDateTime = rentalDateTimesLocal.OnRentDateTime;
            }
            else
            {
                startDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(tmpOrderAmendmentDialogTable.RentalStopDate, 0), userTimeZone);
            }
    
            if (tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(endDateTime))
            {
                endDateTime = rentalDateTimesLocal.OffRentDateTime;
            }
            else
            {
                endDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(tmpOrderAmendmentDialogTable.RentalStopDate + 1, 0), userTimeZone);
            }
    
            tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom = tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(startDateTime) ? startDateTime : DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(startDateTime, userTimeZone), userTimeZone);
            tmpOrderAmendmentDialogTable.EffectiveDateTimeTo   = tmpOrderAmendmentDialogTable.RentalStopDate == DateTimeUtil::date(endDateTime) ? endDateTime : DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(endDateTime, userTimeZone), userTimeZone);
        }
        else
        {
            startDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom, userTimeZone), userTimeZone);
            endDateTime   = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::applyTimeZoneOffset(tmpOrderAmendmentDialogTable.EffectiveDateTimeTo  , userTimeZone), userTimeZone);
        }
    
        ttsBegin;
            
        super();
        ttsCommit;
    
        if (confirmOrder)
        {
            this.confirmOrder();
        }
        else
        {
            this.WPPSynchronizeWorkOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>