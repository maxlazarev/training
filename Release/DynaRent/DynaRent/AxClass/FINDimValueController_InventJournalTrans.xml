<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimValueController_InventJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimValueController_InventJournalTrans extends FINDimValueController
{
    InventJournalTrans callerInventJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEmplId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findEmplId()
    {
        HcmWorker   worker;
    
        worker = HcmWorker::find(callerInventJournalTrans.Worker);
    
        return FINDimValueResult::constructValue(worker.PersonnelNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemGroupId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findItemGroupId()
    {
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueController_Common::findItemGroupId(callerInventJournalTrans.ProjId);
        }
        else
        {
            return FINDimValueResult::constructValue(InventItemGroupItem::findByItemIdLegalEntity(callerInventJournalTrans.ItemId).ItemGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findItemId()
    {
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueController_Common::findItemId(callerInventJournalTrans.ProjId);
        }
        else
        {
            return FINDimValueResult::constructValue(callerInventJournalTrans.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjSubGroupId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findObjSubGroupId()
    {
        InventTable             inventTable;
        EcoResProduct           ecoResProduct;
        BOBRentalType           rentalType;
    
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueController_Common::findObjSubGroupId(callerInventJournalTrans.ProjId);
        }
        else
        {
            select firstOnly TableId from inventTable
            where inventTable.ItemId == callerInventJournalTrans.ItemId
                join TableId from ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
                    join ObjectSubGroupId from rentalType
                    where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId;
    
            return FINDimValueResult::constructValue(rentalType.ObjectSubGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjGroupId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findObjGroupId()
    {
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueController_Common::findObjGroupId(callerInventJournalTrans.ProjId);
        }
        else
        {
            
            return FINDimValueResult::constructValue(BOBRentalType::findFromItemId(callerInventJournalTrans.ItemId).ObjectGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesPurchId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findSalesPurchId()
    {
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueController_Common::findSalesPurchId(callerInventJournalTrans.ProjId);
        }
        else
        {
            return FinDimValueResult::constructValue('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSerialItemId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findSerialItemId()
    {
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueController_Common::findSerialItemId(callerInventJournalTrans.ProjId);
        }
        else
        {
            return FINDimValueResult::constructValue(callerInventJournalTrans.inventDim().inventSerialId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserDefaultDepartmentId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findUserDefaultDepartmentId()
    {
        return FINDimValueController_Common::findUserDefaultDepartmentId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserDepartmentId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findUserDepartmentId()
    {
        FINDimValueResult           ret;
        OMOperatingUnit             operatingUnit;
        HcmPositionDetail           positionDetail;
        HcmPosition                 position;
        HcmPositionWorkerAssignment positionWorkerAssignment;
        HcmWorker                   worker;
        TransDateTime               transDateTime;
    
        #DNRConstants
    
        transDateTime = DateTimeUtil::newDateTime(callerInventJournalTrans.TransDate, #INVMidday(43200));
    
        select firstOnly OMOperatingUnitNumber from operatingUnit
            exists join positionDetail
            where positionDetail.Department == operatingUnit.RecId
                join TableId from position
                where position.RecId == positionDetail.Position
                    join TableId from positionWorkerAssignment
                    where positionWorkerAssignment.Position == position.RecId
                    &&    positionWorkerAssignment.ValidFrom <= transDateTime
                    &&    positionWorkerAssignment.ValidTo   >= transDateTime
                        join TableId from worker
                        where worker.RecId == positionWorkerAssignment.Worker
                        &&    worker.RecId == callerInventJournalTrans.Worker;
    
        ret = FINDimValueResult::constructValue(operatingUnit.OMOperatingUnitNumber);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkOrderId</Name>
				<Source><![CDATA[
    protected FINDimValueResult findWorkOrderId()
    {
        return FINDimValueController_Common::findWorkOrderId(callerInventJournalTrans.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    protected Description getDescription()
    {
        return callerInventJournalTrans.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimensionFieldId()
    {
        return fieldNum(InventJournalTrans, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(InventJournalTrans _inventJournalTrans)
    {
        super(_inventJournalTrans);
        callerInventJournalTrans = _inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refBusRel</Name>
				<Source><![CDATA[
    protected FINDimValueResult refBusRel()
    {
        FINDimValueResult   ret;
        smmBusRelTable      busRelTable;
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderLine    workOrderLine;
    
        if (callerInventJournalTrans.ProjId)
        {
            select firstonly busRelTable
                exists join workOrderTable
                where workOrderTable.CustVendAccountType == CustVendACType::Cust
                &&    workOrderTable.OrganizationParty == busRelTable.Party
                    join TableId from workOrderLine
                    where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                    &&    workOrderLine.ProjId      == callerInventJournalTrans.ProjId;
        }
    
        if (busRelTable)
        {
            ret = FINDimValueResult::constructReference(busRelTable);
        }
        else
        {
            ret = FINDimValueResult::constructValue('');
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refCustTable</Name>
				<Source><![CDATA[
    protected FINDimValueResult refCustTable()
    {
        FINDimValueResult   ret;
        CustTable           custTable;
        WPPWorkOrderTable   workOrderTable;
        WPPWorkOrderLine    workOrderLine;
    
        if (callerInventJournalTrans.ProjId)
        {
            select firstOnly custTable
                exists join workOrderTable
                where workOrderTable.CustVendAccountType == CustVendACType::Cust
                &&    workOrderTable.OrganizationParty == custTable.Party
                    join TableId from workOrderLine
                    where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                    &&    workOrderLine.ProjId      == callerInventJournalTrans.ProjId;
        }
    
        if (custTable)
        {
            ret = FINDimValueResult::constructReference(custTable);
        }
        else
        {
            ret = FINDimValueResult::constructValue('');
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refDepartmentId</Name>
				<Source><![CDATA[
    protected FINDimValueResult refDepartmentId()
    {
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueController_Common::refDepartmentId(callerInventJournalTrans.ProjId);
        }
        else
        {
            return FinDimValueResult::constructReference(callerInventJournalTrans.inventDim().inventLocation());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refInventTable</Name>
				<Source><![CDATA[
    protected FINDimValueResult refInventTable()
    {
        InventTable inventTable = InventTable::find(callerInventJournalTrans.ItemId);
    
        return FINDimValueResult::constructReference(inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refProject</Name>
				<Source><![CDATA[
    protected FINDimValueResult refProject()
    {
        if (callerInventJournalTrans.ProjId)
        {
            return FINDimValueResult::constructReference(ProjTable::find(callerInventJournalTrans.ProjId));
        }
        else
        {
            return FINDimValueResult::constructValue('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCleanupQuery</Name>
				<Source><![CDATA[
    public SysDaQueryObject getCleanupQuery()
    {
        InventJournalTable  inventJournalTable;
        SysDaQueryObject    inventJournalTransQuery = new SysDaQueryObject(callerInventJournalTrans);
        SysDaQueryObject    inventJournalTableQuery = new SysDaQueryObject(inventJournalTable);

        inventJournalTableQuery.WhereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(inventJournalTable, fieldStr(InventJournalTable, JournalId)),
                                      new SysDaFieldExpression(callerInventJournalTrans, fieldStr(InventJournalTrans, JournalId)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(inventJournalTable, fieldStr(InventJournalTable, Posted)),
                                           new SysDaValueExpression(NoYes::Yes))));

        inventJournalTransQuery.joinClause(SysDaJoinKind::ExistsJoin, inventJournalTableQuery);
        return inventJournalTransQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>