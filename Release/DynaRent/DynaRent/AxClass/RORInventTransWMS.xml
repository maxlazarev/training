<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORInventTransWMS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORInventTransWMS
{
    RORPickRegister pickRegister;

    FormDataSource  formDataSource;
    Common          common;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmFormDataSource(FormDataSource _formDataSource = formDataSource)
    {
        formDataSource = _formDataSource;
    
        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _common = common)
    {
        common = _common;
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPickRegister</Name>
				<Source><![CDATA[
    public RORPickRegister parmPickRegister(RORPickRegister _pickRegister = pickRegister)
    {
        pickRegister = _pickRegister;
    
        return pickRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pick</Name>
				<Source><![CDATA[
    private void pick(Common _common)
    {
        InventMovement          movement;
        InventTransWMS_Pick     inventTransWMS_Pick;
        SalesLine               salesLine;
        InventJournalTrans      inventJournalTrans;
        InventTrans             inventTrans;
        TmpInventTransWMS       tmpInventTransWMS;
        boolean                 performPick;
        StatusIssue             inventTransStatusIssue;
        Query                   query;
        QueryBuildDataSource    qbdsInventTrans;
    
        movement = InventMovement::construct(_common);
    
        switch (_common.TableId)
        {
            case tableNum(SalesLine):
                salesLine   = _common as SalesLine;
                inventTrans = InventTrans::findTransId(salesLine.InventTransId);
                performPick = inventTrans.StatusIssue <= StatusIssue::OnOrder;
                break;
    
            case tableNum(InventJournalTrans):
                inventJournalTrans = _common as InventJournalTrans;
                inventTrans        = InventTrans::findTransId(inventJournalTrans.InventTransId);
                performPick        = inventTrans.StatusIssue <= StatusIssue::OnOrder;
                break;
    
            default:
                throw error(strFmt("@SYS31187", tableId2pname(_common.tableId)));
        }
    
        inventTransStatusIssue = inventTrans.StatusIssue;
    
        if (performPick && inventTrans)
        {
            query = new Query();
            qbdsInventTrans = query.addDataSource(tableNum(InventTrans));
            qbdsInventTrans.addRange(fieldNum(InventTrans, RecId)).value(SysQuery::value(inventTrans.RecId));
    
            inventTransWMS_Pick = InventTransWMS_Pick::newStandard(tmpInventTransWMS, query);
            if (inventTransWMS_Pick.createFromInventTrans(inventTrans))
            {
                inventTransWMS_Pick.updateInvent();
            }
        }
    
        inventTrans.reread();
        if (inventTrans.StatusIssue != inventTransStatusIssue)
        {
            info(strfmt("@DNR4511", inventTrans.StatusIssue)); // Status changed to '%1'
        }
        else
        {
            warning("@DNR4512"); // No lines were updated
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>register</Name>
				<Source><![CDATA[
    private void register(Common _common)
    {
        InventMovement          movement;
        InventTransWMS_Register inventTransWMS_Register;
        PurchLine               purchLine;
        InventJournalTrans      inventJournalTrans;
        InventTrans             inventTrans;
        TmpInventTransWMS       tmpInventTransWMS;
        boolean                 performRegister;
        StatusReceipt           inventTransStatusReceipt;
    
        movement = InventMovement::construct(_common);
    
        switch (_common.TableId)
        {
            case tableNum(PurchLine):
                purchLine       = _common as PurchLine;
                inventTrans     = InventTrans::findTransId(purchLine.InventTransId);
                performRegister = inventTrans.StatusIssue <= StatusIssue::OnOrder;
                break;
    
            case tableNum(InventJournalTrans):
                inventJournalTrans = _common as InventJournalTrans;
                inventTrans        = InventTrans::findTransId(inventJournalTrans.InventTransId);
                performRegister    = inventTrans.StatusIssue <= StatusIssue::OnOrder;
                break;
    
            default:
                throw error(strFmt("@SYS31187", tableId2pname(_common.tableId)));
        }
    
        inventTransStatusReceipt = inventTrans.StatusReceipt;
    
        if (performRegister && inventTrans)
        {
            inventTransWMS_Register = InventTransWMS_Register::newStandard(tmpInventTransWMS);
            if (inventTransWMS_Register.createFromInventTrans(inventTrans, inventTrans.inventDim()))
            {
                inventTransWMS_Register.updateInvent(movement.buffer());
            }
        }
    
        inventTrans.reread();
        if (inventTrans.StatusReceipt != inventTransStatusReceipt)
        {
            info(strfmt("@DNR4511", inventTrans.StatusReceipt)); // Status changed to '%1'
        }
        else
        {
            warning("@DNR4512"); // No lines were updated
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (formDataSource)
        {
            this.runFromDataSource();
        }
        else
        {
            this.runFromCommon(common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromDataSource</Name>
				<Source><![CDATA[
    protected void runFromDataSource()
    {
        Common  commonLocal;
    
        for (commonLocal = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor();
        commonLocal;
        commonLocal = formDataSource.getNext())
        {
            this.runFromCommon(commonLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromCommon</Name>
				<Source><![CDATA[
    protected void runFromCommon(Common _common)
    {
        if (pickRegister == RORPickRegister::Pick)
        {
            this.pick(_common);
        }
        else
        if (pickRegister == RORPickRegister::Register)
        {
            this.register(_common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RORInventTransWMS construct()
    {
        return new RORInventTransWMS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RORInventTransWMS   inventTransWMS;
        FormDataSource      formDataSource;
    
        if (_args.parmEnumType() != enumNum(RORPickRegister))
        {
            throw error(Error::missingParameter(null));
        }
    
        if (_args.dataset() != tableNum(SalesLine)
        &&  _args.dataset() != tableNum(InventJournalTrans)
        &&  _args.dataset() != tableNum(PurchLine))
        {
            throw error(strFmt("@SYS31187", tableId2pname(_args.dataset())));
        }
    
        if (!FormDataUtil::isFormDataSource(_args.record()))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        formDataSource = FormDataUtil::getFormDataSource(_args.record());
    
        inventTransWMS = RORInventTransWMS::construct();
        inventTransWMS.parmPickRegister(_args.parmEnum());
        inventTransWMS.parmFormDataSource(formDataSource);
        inventTransWMS.run();
    
        formDataSource.research(true);
        formDataSource.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>