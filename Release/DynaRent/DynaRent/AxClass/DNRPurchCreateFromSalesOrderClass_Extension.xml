<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchCreateFromSalesOrderClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchCreateFromSalesOrder))]
public final class DNRPurchCreateFromSalesOrderClass_Extension
{
    private static EnumId       mainArgsEnumType;
    private static EnumValue    mainArgsEnum;
    private static Args         argsCaller;

    private boolean   canBeSubRental;
    private boolean   forcePurchTypePurchase;
    private boolean   isRentalCaller;
    private container back2BackRentalDateTimes;

    #define.CurrentVersion(5)
    #localmacro.CurrentListCS
        canBeSubRental,
        forcePurchTypePurchase,
        back2BackRentalDateTimes
    #endmacro

    // chain-of-command wrapper methods
        


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreatePurchOrder</Name>
				<Source><![CDATA[
    protected void autoCreatePurchOrder(TmpPurchLinePrice _tmpPurchLinePrice)
    {
        _tmpPurchLinePrice.RORForcePurchTypePurchase    = forcePurchTypePurchase;
        _tmpPurchLinePrice.RORAddInfoAction             = (salesTable && salesTable.SalesType == SalesType::RORRental);
        // Don't open a form inside of tts transaction
        _tmpPurchLinePrice.ROROpenPurchOrderForm        = false;

        next autoCreatePurchOrder(_tmpPurchLinePrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCallerRecord</Name>
				<Source><![CDATA[
    public void initializeFromCallerRecord(Common _callerRecord)
    {
        canbeSubRental = true;

        if (mainArgsEnumType == enumNum(RORTradeType))
        {
            canBeSubRental = (mainArgsEnum != RORTradeType::SalesPurch);
        }

        if (canBeSubRental
        &&  _callerRecord.TableId == tablenum(SalesTable)
        &&  FormDataUtil::getFormDataSource(_callerRecord))
        {
            SalesTable salesTableLocal = _callerRecord;
            
            if (salesTableLocal && salesTableLocal.WPPIsObjectAssignmentEnabled())
            {
                throw error("@SYS319214");
            }
        }

        next initializeFromCallerRecord(_callerRecord);

        if (_callerRecord.TableId == tableNum(SalesLine))
        {
            SalesLine salesLineLocal = _callerRecord;

            if (salesLineLocal.SalesType != SalesType::ItemReq)
            {
                canBeSubRental = (salesLineLocal.SalesType == SalesType::RORRental);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        mainArgsEnumType    = _args.parmEnumType();
        mainArgsEnum        = _args.parmEnum();
        SalesLine callerSalesLine = _args.record() as SalesLine;
        RecId callerRecId;

        if (callerSalesLine)
        {
            callerRecId = callerSalesLine.RecId;
        }

        next main(_args);

        mainArgsEnumType    = 0;
        mainArgsEnum        = 0;

        if (callerRecId)
        {
            callerSalesLine = SalesLine::findRecId(callerRecId);
        }

        PurchCreateFromSalesOrder::ROROpenPurchOrderForm(callerSalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesLine</Name>
				<Source><![CDATA[
    public Query querySalesLine(Query _querySalesLine, boolean _probePeggingExclusions)
    {
        Query ret = next querySalesLine(_querySalesLine, _probePeggingExclusions);

        if (salesTable && salesTable.SalesType == SalesType::RORRental)
        {
            QueryBuildDataSource qbdsSalesLine  = _querySalesLine.dataSourceTable(tableNum(SalesLine));

            qbdsSalesLine.addRange(fieldNum(SalesLine, RORIsModified)).value(SysQuery::value(NoYes::No));
            
            if(canBeSubRental)
            {
                qbdsSalesLine.addRange(fieldNum(SalesLine, RORTradeType)).value(SysQuery::valueNot(RORTradeType::SalesPurch));
                qbdsSalesLine.addRange(fieldNum(SalesLine, BOBRentalSubStatus)).value(SysQuery::value(BOBRentalSubStatus::Confirmed));    
            }
            else
            {
                qbdsSalesLine.addRange(fieldNum(SalesLine, RORTradeType)).value(SysQuery::valueNot(RORTradeType::SubRental));
            }

            ItemId itemIdWarranty = RAGParameters::find().ItemIdWarranty;
            qbdsSalesLine.addRange(fieldNum(SalesLine, ItemId)).value(SysQuery::valueNot(itemIdWarranty));
                
            QueryBuildDataSource qbdsInventDim = ret.dataSourceTable(tableNum(InventDim));

            if (!qbdsInventDim)
            {
                qbdsInventDim = qbdsSalesLine.addDataSource(tableNum(InventDim));
                qbdsInventDim.joinMode(JoinMode::ExistsJoin);
                qbdsInventDim.relations(true);
            }
            SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSerialId)).value(SysQuery::valueEmptyString());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCurrentListCS</Name>
				<Source><![CDATA[
    public void resetCurrentListCS()
    {
        next resetCurrentListCS();

        canBeSubRental          = false;
        forcePurchTypePurchase  = false;
        isRentalCaller          = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPack</Name>
				<Source><![CDATA[
    // extension methods

    private container DNRPack()
    {
        return [#CurrentVersion, #CurrentListCS];
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmIsRentalCaller</Name>
				<Source><![CDATA[
    public boolean DNRparmIsRentalCaller(boolean _isRentalCaller = isRentalCaller)
    {
        isRentalCaller = _isRentalCaller;
        return isRentalCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUnpack</Name>
				<Source><![CDATA[
    private boolean DNRUnpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        switch(version)
        {
            case #CurrentVersion:
                [version, #CurrentListCS] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmCanBeSubRental</Name>
				<Source><![CDATA[
    public boolean RORParmCanBeSubRental(boolean _canBeSubRental = canBeSubRental)
    {
        if (!prmisDefault(_canBeSubRental))
        {
            canBeSubRental = _canBeSubRental;
        }
        return canBeSubRental;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmForcePurchTypePurchase</Name>
				<Source><![CDATA[
    public boolean RORParmForcePurchTypePurchase(boolean _forcePurchTypePurchase = forcePurchTypePurchase)
    {
        forcePurchTypePurchase = _forcePurchTypePurchase;
        return forcePurchTypePurchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROROpenPurchOrderForm</Name>
				<Source><![CDATA[
    private static void ROROpenPurchOrderForm(SalesLine _callerSalesLine)
    {
        if (_callerSalesLine
        && _callerSalesLine.SalesType == SalesType::RORRental
        && _callerSalesLine.InventRefId)
        {
            PurchTable  purchTable;
            Args        args;

            purchTable = PurchTable::find(_callerSalesLine.InventRefId);
    
            if (purchTable && purchTable.PurchaseType == PurchaseType::RORSubRental)
            {
                args = new Args();
                args.record(purchTable);
    
                new MenuFunction(menuitemDisplayStr(RORPurchTable), MenuItemType::Display).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetPurchTable</Name>
				<Source><![CDATA[
    public PurchTable DNRGetPurchTable()
    {
        return callerRecord as PurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_pack_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(classStr(PurchCreateFromSalesOrder), methodStr(PurchCreateFromSalesOrder, pack))]
    public static void DNREvent_pack_post(XppPrePostArgs _eventArgs)
    {
        PurchCreateFromSalesOrder hostObj = _eventArgs.getThis() as PurchCreateFromSalesOrder;
        hostObj.packExtension(_eventArgs, classStr(DNRPurchCreateFromSalesOrderClass_Extension), hostObj.DNRPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_unpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(PurchCreateFromSalesOrder), methodStr(PurchCreateFromSalesOrder, unpack))]
    public static void DNREvent_unpack_post(XppPrePostArgs _eventArgs)
    {
        PurchCreateFromSalesOrder hostObj = _eventArgs.getThis() as PurchCreateFromSalesOrder;
        container myState = hostObj.unpackExtension(_eventArgs, classStr(DNRPurchCreateFromSalesOrderClass_Extension));

        //Also unpack the extension
        if (!hostObj.DNRUnpack(myState))
        {
            _eventArgs.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromArgs</Name>
				<Source><![CDATA[
    public void initializeFromArgs(Args args)
    {
        next initializeFromArgs(args);

        argsCaller = args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerArgs</Name>
				<Source><![CDATA[
    public Args getCallerArgs()
    {
        return argsCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmBack2BackRentalDateTimes</Name>
				<Source><![CDATA[
    public container DNRParmBack2BackRentalDateTimes(container _back2BackRentalDateTimes = back2BackRentalDateTimes)
    {
        back2BackRentalDateTimes = _back2BackRentalDateTimes;

        return back2BackRentalDateTimes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>