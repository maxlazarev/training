<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPJournalGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WPPJournalGenerator
{
    WPPWorkOrderLine            workOrderLine;
    ProjTable                   projTable;

    SysDictField                dictField;
    FormRun                     callerForm;

    boolean                     openJournalLines;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
    abstract protected void createJournalTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    abstract protected str formName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTableMap</Name>
				<Source><![CDATA[
    abstract protected void getJournalTableMap()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    public ProjTable parmProjTable(ProjTable _projTable = projTable)
    {
        projTable = _projTable;
    
        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    public FormRun parmCallerForm(FormRun _callerForm = callerForm)
    {
        callerForm = _callerForm;
        
        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderLine</Name>
				<Source><![CDATA[
    public WPPWorkOrderLine parmWorkOrderLine(WPPWorkOrderLine _workOrderLine = workOrderLine)
    {
        workOrderLine = _workOrderLine;
    
        return workOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForm</Name>
				<Source><![CDATA[
    protected void runForm()
    {
        Args            args = new Args();
        FormRun         formRun;
    
        args.name(this.formName());
        args.caller(callerForm);
        args.lookupField(dictField.id());
        args.lookupValue(projTable.ProjId);
        args.record(workOrderLine);
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPJournalGenerator construct(ProjCategoryType _projCategoryType)
    {
        WPPJournalGenerator journalGenerator;
    
        switch (_projCategoryType)
        {
            case ProjCategoryType::Hour:
                break;
    
            case ProjCategoryType::Revenue:
                break;
    
            case ProjCategoryType::Item:
                journalGenerator = new WPPJournalGenerator_InventJournalTable();
                break;
    
            default:
                throw error("@DNR1572");
        }
    
        return journalGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WPPJournalGenerator journalGenerator;
        WPPWorkOrderLine    workOrderLine;
        ProjTable           projTable;
    
        if (_args.parmEnumType() != enumNum(ProjCategoryType))
        {
            throw error(Error::missingParameter(null));
        }
    
        if (_args.dataset() != tableNum(WPPWorkOrderLine))
        {
            throw error(Error::missingRecord(classStr(WPPJournalGenerator)));
        }
    
        workOrderLine = _args.record();
    
        if (workOrderLine.ProjId)
        {
            projTable = ProjTable::find(workOrderLine.ProjId);
    
            journalGenerator = WPPJournalGenerator::construct(_args.parmEnum());
            journalGenerator.parmWorkOrderLine(workOrderLine);
            journalGenerator.parmProjTable(projTable);
            journalGenerator.parmCallerForm(_args.caller());
            journalGenerator.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>