<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRsmmActivitiesForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(smmActivities))]
public final class DNRsmmActivitiesForm_Extension
{
    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeCallerRecord</Name>
				<Source><![CDATA[
    public void changeCallerRecord()
    {
        RORRentalHeader rentalHeader;
        RORRentalLine   rentalLine;
        ;

        switch(callerRecord.TableId)
        {
            case tableNum(RORRentalOrderLineView):
                RORRentalOrderLineView rentalOrderLineView = callerRecord as RORRentalOrderLineView;
                rentalLine = SalesLine::findInventTransId(rentalOrderLineView.InventTransId);
                break;

            case tableNum(RORRentalQuotationOrderLineView):
                RORRentalQuotationOrderLineView rentalQuotationOrderLineView = callerRecord as RORRentalQuotationOrderLineView;
                rentalLine = SalesQuotationLine::findInventTransId(rentalQuotationOrderLineView.InventTransId);
                break;

            case tableNum(RORSubRentalOrderLineView):
                RORSubRentalOrderLineView subRentalOrderLineView = callerRecord as RORSubRentalOrderLineView;
                rentalLine = PurchLine::findInventTransId(subRentalOrderLineView.InventTransId);
                break;

            case tableNum(SalesLine):
                rentalLine = callerRecord as SalesLine;
                break;

            case tableNum(SalesQuotationLine):
                rentalLine = callerRecord as SalesQuotationLine;
                break;

            case tableNum(PurchLine):
                rentalLine = callerRecord as PurchLine;
                break;
        }

        if(rentalLine)
        {
            rentalHeader = rentalLine.RORGetHeader();

            if (rentalHeader)
            {
                callerRecord = rentalHeader;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_element_OnInitializing</Name>
				<Source><![CDATA[
    // event handler methods

    [FormEventHandler(formStr(smmActivities), FormEventType::Initializing)]
    public static void DNREvent_element_OnInitializing(xFormRun _sender, FormEventArgs _eventArgs)
    {
        Object formRunObject = _sender as Object;

        formRunObject.changeCallerRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_smmActivitiesDS_OnWritten</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivities), FormDataSourceEventType::Written)]
    public static void DNREvent_smmActivitiesDS_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        Args                    args            = _sender.formRun().args();
        Object                  formRunObject   = _sender.formRun() as Object;
        Common                  callerRecord    = formRunObject.parmCallerRecord();
        SmmActivityParentType   parentType      = formRunObject.parmParentType();
        smmActivities           smmActivities   = _sender.cursor();
        boolean                 newRecord       = smmActivities.RecId == 0;

        if (args.caller())
        {
            formRunObject.parmCallerRecord(args.record());
            formRunObject.changeCallerRecord();
        }

        if (callerRecord && newRecord && parentType)
        {
            if(callerRecord.TableId == tableNum(SalesTable) && parentType == smmActivityParentType::SalesTable)
            {
                SalesTable salesTable = callerRecord as SalesTable;

                if(salesTable.SalesType == SalesType::RORRental)
                {
                    // *** DynaRent 365 update 3 extraction issue -- move enum element to different model
                    // this.parmParentType(smmActivityParentType::RORSalesTable);
                }
            }

            if(callerRecord.TableId == tableNum(PurchTable) && parentType == smmActivityParentType::PurchTable)
            {
                PurchTable purchTable = callerRecord as PurchTable;

                if (purchTable.PurchaseType == PurchaseType::RORSubRental)
                {
                    // *** DynaRent 365 update 3 extraction issue -- move enum element to different model
                    // this.parmParentType(smmActivityParentType::RORPurchTable);
                }
            }

            if(callerRecord.TableId == tableNum(SalesQuotationTable) && parentType == smmActivityParentType::Quotation)
            {
                SalesQuotationTable salesQuotationTable = callerRecord as SalesQuotationTable;

                if(salesQuotationTable.QuotationType == QuotationType::RORRental || salesQuotationTable.QuotationType == QuotationType::RORProjRental)
                {
                    // *** DynaRent 365 update 3 extraction issue -- move enum element to different model
                    // this.parmParentType(smmActivityParentType::RORSalesQuotationTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_openMenuItemName</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(smmActivities), delegateStr(smmActivities, openMenuItemName))]
    public static void smmActivities_openMenuItemName(smmActivityParentRefTableId _refTableId, Common _common, Object _caller, boolean _create, FormDataSource _formDataSource)
    {
        str menuItemName;

        switch(_refTableId)
        {
            case tableNum(RORVenueTable):
                menuItemName = menuItemDisplayStr(RORVenueTable);
                break;
            
            case tableNum(WPPWorkOrderTable):
                menuItemName = menuItemDisplayStr(WPPWorkOrderTable);
                break;
        }

        if(menuItemName)
        {
            smmUtility::openAndRefresh(menuItemName, _common, _caller, _create, _formDataSource);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>