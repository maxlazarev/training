<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWorkCalendarTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(WorkCalendarTable))]
public final class DNRWorkCalendarTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret = next validateField(_fieldIdToCheck);
       
        if (_fieldIdToCheck == fieldNum(WorkCalendarTable, BasicCalendarId))
        {
            if (this.BasicCalendarId)
            {
                ret = ret && this.RORCheckBaseCalendar();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckBaseCalendar</Name>
				<Source><![CDATA[
    // extension methods

    private boolean RORCheckBaseCalendar()
    {
        boolean             ret = true;
        WorkCalendarTable   workCalendarTable;
        CalendarId          baseCalendarId;
        Set                 calendarIdSet;
        ;
    
        if (this.BasicCalendarId)
        {
            calendarIdSet = new Set(Types::String);
            calendarIdSet.add(this.CalendarId);
            baseCalendarId = this.BasicCalendarId;
    
            while (baseCalendarId && ret)
            {
                select firstOnly workCalendarTable
                where workCalendarTable.CalendarId == baseCalendarId;
    
                baseCalendarId = workCalendarTable.BasicCalendarId;
    
                if (calendarIdSet.in(baseCalendarId))
                {
                    ret = checkFailed(strFmt("@DNR8450", this.BasicCalendarId));
                }
                else
                {
                    calendarIdSet.add(workCalendarTable.CalendarId);
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>