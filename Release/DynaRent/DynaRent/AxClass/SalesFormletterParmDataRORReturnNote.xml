<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterParmDataRORReturnNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::RORReturnNote)]
class SalesFormletterParmDataRORReturnNote
    extends SalesFormletterParmData
{
    boolean     setProforma;
    boolean     proformaIsSet;
    SalesType   salesType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order posting parameter table.
    /// </summary>
    /// <returns>
    /// The inserted record.
    /// </returns>
    protected Common createParmUpdate()
    {
        SalesParmUpdate parmUpdate;
    
        parmUpdate = super();
        if (proformaIsSet)
        {
            parmUpdate.Proforma = setProforma;
        }
    
        return parmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common  _salesTable)
    {
        boolean ret = true;
        SalesTable salesTableLocal = SalesTable::findRecId(_salesTable.RecId);
        
        ret = salesTableLocal.type().RORmayReturnNoteBeUpdated();
            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    public boolean mayJournalTransBePosted(Common _salesLine)
    {
        SalesLine salesLine = _salesLine as SalesLine;
        boolean ret = super(_salesLine);
    
        SalesLineType salesLineType = salesLine.type();

        ret = ret && salesLine.type().RORmayReturnNoteBeUpdated();

        if(!this.INVParmFormLetterContract().WPPparmWorkOrderId())
        {
            // Check whether the current line is not linked to a work order
            // and where the task is of type Load
            ret = ret && !WPPWorkOrderTable::excludeOrderLine(salesLine.TableId, salesLine.RecId, WPPTaskType::Load);
    
            if (salesLine.RORParentLineRecId)
            {
                // Find the parent line
                SalesLine parentLine = SalesLine::findRecId(salesLine.RORParentLineRecId);
    
                while (ret && parentLine)
                {
                    // Check whether the parent line is not linked to a work order
                    // and where the task is of type Delivery
                    ret = !WPPWorkOrderTable::excludeOrderLine(parentLine.TableId, parentLine.RecId, WPPTaskType::Load);
    
                    // Saves a db round trip
                    if (ret)
                    {
                        parentLine = SalesLine::findRecId(parentLine.RORParentLineRecId);
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        return DocumentStatus::RORReturnNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static server SalesFormletterParmDataRORReturnNote construct()
    {
        return new SalesFormletterParmDataRORReturnNote();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>