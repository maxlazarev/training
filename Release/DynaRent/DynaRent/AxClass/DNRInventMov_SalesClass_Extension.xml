<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventMov_SalesClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventMov_Sales))]
public final class DNRInventMov_SalesClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation)
    {
        InventUpd_Estimated estimated;
    
        if(salesOrderLine.RORTradeType == RORTradeType::Rental || salesOrderLine.RORTradeType == RORTradeType::SubRental)
        {
            // compensating movement -- use a different constructor for reversing of deliveries
            estimated = ((salesOrderLine.SalesStatus == SalesStatus::Delivered || this.RORParmIsPhysicalUpdateClosed()) && salesOrderLine.SalesDeliverNow <= 0 ?
                         InventUpd_Estimated::newInventMovement(InventMovement::construct(salesOrderLine, InventMovSubType::BOBCompensatingTrans)) :
                         InventUpd_Estimated::newInventMovement(this));
    
            estimated.BOBParmIsCompensatingTrans(true);
            estimated.updateNow();
    
            // reuse InventTransOriginId so we don't end up with duplicates in table InventTransOrigin
            inventTransOriginId = estimated.movement().inventTransOriginId();
        }

        next updateBuffer(_updateReservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean mustBeBookedFinancially()
    {
        boolean ret = next mustBeBookedFinancially();

        DNRInventMovementUpdateLedgerDisposableContext context = DNRInventMovementUpdateLedgerDisposableContext::current();

        if (ret && context && !context.DNRParmMustBeBookedToLedger())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean mustBeBookedPhysically()
    {
        boolean ret = next mustBeBookedPhysically();

        DNRInventMovementUpdateLedgerDisposableContext context = DNRInventMovementUpdateLedgerDisposableContext::current();

        if (ret && context && !context.DNRParmMustBeBookedToLedger())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysicalRevenue</Name>
				<Source><![CDATA[
    protected boolean mustBeBookedPhysicalRevenue()
    {
        boolean ret = next mustBeBookedPhysicalRevenue();

        DNRInventMovementUpdateLedgerDisposableContext context = DNRInventMovementUpdateLedgerDisposableContext::current();

        if (ret && context && !context.DNRParmMustBeBookedToLedger())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPhysicalLedgerUpdate</Name>
				<Source><![CDATA[
    protected boolean performPhysicalLedgerUpdate(LedgerVoucher _ledgerVoucher, InventTrans _inventTrans, InventUpdate _updateNow, InventOnhand _inventOnhand, InventTrans _inventTransUpd_RU)
    {
        boolean ret;

        using(DNRInventMovementUpdateLedgerDisposableContext context = new DNRInventMovementUpdateLedgerDisposableContext())
        {
            SalesLine   salesLine       = buffer as SalesLine;
            boolean     isRentalLine    = (salesLine.RORTradeType != RORTradeType::SalesPurch);
            context.DNRParmMustBeBookedToLedger(!isRentalLine);
  
            ret = next performPhysicalLedgerUpdate(_ledgerVoucher, _inventTrans, _updateNow, _inventOnhand, _inventTransUpd_RU);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(LedgerVoucher _ledgerVoucher, InventUpd_Financial _updateNow, boolean _allowNegative)
    {
        CostAmount ret;

        using(DNRInventMovementUpdateLedgerDisposableContext context = new DNRInventMovementUpdateLedgerDisposableContext())
        {
            SalesLine   salesLine       = buffer as SalesLine;
            boolean     isRentalLine    = (salesLine.RORTradeType != RORTradeType::SalesPurch);
            context.DNRParmMustBeBookedToLedger(!isRentalLine);

            ret = next updateLedgerFinancial(_ledgerVoucher, _updateNow, _allowNegative);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBConstruct</Name>
				<Source><![CDATA[
    // extension methods

    public static InventMovement BOBConstruct(SalesLine _salesLine, InventMovSubType _subType = InventMovSubType::None)
    {
        InventMovement inventMovement;
    
        if(_salesLine.RORTradeType == RORTradeType::Rental
        || _salesLine.RORTradeType == RORTradeType::SubRental)
        {
            if(_subType == InventMovSubType::BOBCompensatingTrans)
            {
                inventMovement = InventMov_RORRentalSales_Receipt::newFromSalesLine(_salesLine);
            }
            else
            {
                inventMovement = InventMov_RORRentalSales_Issue::newFromSalesLine(_salesLine);
            }
    
            inventMovement.inventMovSubType(_subType);
        }
        else
        {
            inventMovement = InventMov_Sales::newFromSalesLine(_salesLine);
        }
    
        return inventMovement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>