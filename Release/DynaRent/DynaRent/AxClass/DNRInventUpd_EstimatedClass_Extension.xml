<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventUpd_EstimatedClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpd_Estimated))]
public final class DNRInventUpd_EstimatedClass_Extension
{
    private boolean forceInventUpdate;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructAndInitializeDeleteMovement</Name>
				<Source><![CDATA[
    protected InventUpd_DeleteMovement constructAndInitializeDeleteMovement()
    {
        InventUpd_DeleteMovement ret = next constructAndInitializeDeleteMovement();

        ret.BOBParmIsCompensatingTrans(this.BOBParmIsCompensatingTrans());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransFromInventMovement</Name>
				<Source><![CDATA[
    protected InventTrans initInventTransFromInventMovement(InventMovement _inventMovement)
    {
        InventTrans ret = next initInventTransFromInventMovement(_inventMovement);

        ret.BOBIsCompensatingTrans = this.BOBParmIsCompensatingTrans();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateFieldsOnChange</Name>
				<Source><![CDATA[
    protected boolean mustUpdateFieldsOnChange()
    {
        boolean ret = next mustUpdateFieldsOnChange();

        ret = (ret || this.BOBParmForceInventUpdate());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventoryTransactionDimension</Name>
				<Source><![CDATA[
    protected boolean mustUpdateInventoryTransactionDimension(InventTrans _inventTransToCheck)
    {
        boolean ret = next mustUpdateInventoryTransActionDimension(_inventTransToCheck);
        return (ret && _inventTransToCheck.BOBIsCompensatingTrans == this.BOBParmIsCompensatingTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDepreciateTransactions</Name>
				<Source><![CDATA[
    protected container updateDepreciateTransactions(
        InventTransEnumerable   _inventTransEnumerable,
        InventQty               _qtyToDelete,
        InventMovement          _counterpartMovement,
        PdsCWInventQty          _cwQtyToDelete)
    {
        container ret;

        using(DNRInventTransUpdateSplitDisposableContext context = new DNRInventTransUpdateSplitDisposableContext(BOBInventSplitReason::ModifyQty, BOBRentalSubStatus::None))
        {
            ret = next updateDepreciateTransactions(_inventTransEnumerable, _qtyToDelete, _counterpartMovement, _cwQtyToDelete);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMergeUsedDim</Name>
				<Source><![CDATA[
    protected boolean mustMergeUsedDim(InventTrans _inventTrans)
    {
        boolean ret = next mustMergeUsedDim(_inventTrans);
        return (ret || this.BOBParmForceInventUpdate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransOriginFromMovement</Name>
				<Source><![CDATA[
    protected void updateInventTransOriginFromMovement(
        InventTransOriginId     _inventTransOriginId,
        InventMovement          _movement)
    {
        next updateInventTransOriginFromMovement(_inventTransOriginId, _movement);

        if (_movement)
        {
            InventTransOrigin inventTransOrigin = InventTransOrigin::find(_inventTransOriginId, true);
            RORRentalLine rentalLine = _movement.buffer() as RORRentalLine;

            if (inventTransOrigin && rentalLine)
            {
                inventTransOrigin.ItemId = rentalLine.ItemId;

                inventTransOrigin.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBParmForceInventUpdate</Name>
				<Source><![CDATA[
    // extension methods

    public boolean BOBParmForceInventUpdate(boolean _force = forceInventUpdate)
    {
        forceInventUpdate = _force;
        return forceInventUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>