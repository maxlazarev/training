<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanBoardPeriodSecondary</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to marshall data between the server side HiGHPlanBoard control and the browser
/// </summary>
[DataContractAttribute]
class HiGHPlanBoardPeriodSecondary extends FormDataContract
{
    //Member variables
    str         label = '';
    int         width = 60;

    utcdatetime startDateTime;
    utcdatetime endDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Text label of the period (Used for period column heading)
    /// </summary>
    /// <param name = "_id">String label of the period</param>
    /// <returns>String label of the period</returns>
    [DataMemberAttribute('Label')]
    public str parmLabel(str _label = label)
    {
        if (!prmIsDefault(_label))
        {
            label = _label;
        }
        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Width in pixels
    /// </summary>
    /// <param name = "_id">Width in pixels</param>
    /// <returns>Width in pixels</returns>
    [DataMemberAttribute('Width')]
    public int parmWidth(int _width = width)
    {
        if (!prmIsDefault(_width))
        {
            width = _width;
        }
        return width;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// ReadOnly flag indicating if the current system date time falls within this period
    /// </summary>
    /// <returns>Boolean indicating if the current system date time falls within this period</returns>
    [DataMemberAttribute('IsCurrent')]
    public boolean parmIsCurrent(boolean _isCurrent = false)
    {
        TransDateTime now = DateTimeUtil::getSystemDateTime();
        return (this.parmStartDateTime() <= now && now <= this.parmEndDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start date time of the period. This is used internally only
    /// </summary>
    /// <returns>Start time of the period</returns>
    private utcdatetime parmStartDateTime(utcdatetime _startDateTime = startDateTime)
    {
        if (!prmIsDefault(_startDateTime))
        {
            startDateTime = _startDateTime;
        }

        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// End date time of the period. This is used internally only
    /// </summary>
    /// <returns>Start time of the period</returns>
    private utcdatetime parmEndDateTime(utcdatetime _endDateTime = endDateTime)
    {
        if (!prmIsDefault(_endDateTime))
        {
            endDateTime = _endDateTime;
        }

        return endDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new object, and fills it with the specified parameters
    /// </summary>
    /// <returns>The created HiGHPlanBoardPeriod object</returns>
    public static HiGHPlanBoardPeriodSecondary newParameters(str _label, int _width, utcDateTime _startDateTime, utcdatetime _endDateTime)
    {
        HiGHPlanBoardPeriodSecondary periodSecondary = new HiGHPlanBoardPeriodSecondary();
        periodSecondary.parmLabel(_label);
        periodSecondary.parmWidth(_width);
        periodSecondary.parmStartDateTime(_startDateTime);
        periodSecondary.parmEndDateTime(_endDateTime);

        return periodSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSecondaryPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a list of periods to be rendered on the control
    /// </summary>
    /// <param name = "_startDate">Start date that will be used to generate time columns (Periods).</param>
    /// <param name = "_endDate">End date that will be used to generate time columns (Periods).</param>
    /// <param name = "_timeScale">Time scale that will be used to generate time columns (Periods).</param>
    /// <returns>List of generated HiGHPlaBoardPeriod objects</returns>
    public static List createSecondaryPeriods(List _periods, int _periodWidth, HiGHPlanBoardSecondaryTimeScaleType _type, HiGHPlanBoardMode _planboardMode)
    {
        #TimeConstants
        List                result              = new List(Types::Class);
        Enumerator          enumerator          = _periods.getEnumerator();
        utcdatetime         currentDate         = DateTimeUtil::minValue();
        utcdatetime         previousDate        = DateTimeUtil::minValue();
        utcdatetime         secondaryStartDate  = DateTimeUtil::minValue();
        utcdatetime         secondaryEndDate    = DateTimeUtil::minValue();
        HiGHPlanBoardPeriod period;
        int                 width               = 0;
        boolean             isFirst             = true;

        utcdatetime calculateSecondaryDate()
        {
            switch (_type)
            {
                case HiGHPlanBoardSecondaryTimeScaleType::Years:
                    //Get start of next year
                    return DateTimeUtil::newDateTime(mkDate(1, 1, DateTimeUtil::year(currentDate) + 1), 0);

                case HiGHPlanBoardSecondaryTimeScaleType::Months:
                    //Get start of next month
                    return DateTimeUtil::newDateTime(endMth(DateTimeUtil::date(currentDate)) + 1, 0);

                case HiGHPlanBoardSecondaryTimeScaleType::Weeks:
                    //Get start of next week
                    return DateTimeUtil::addDays(DateTimeUtil::newDateTime(DateTimeUtil::getStartOfWeekDate('', DateTimeUtil::date(currentDate)), 0), 7);

                case HiGHPlanBoardSecondaryTimeScaleType::Days:
                    //Get start of next day
                    return DateTimeUtil::addDays(DateTimeUtil::newDateTime(DateTimeUtil::date(currentDate), 0), 1);

                case HiGHPlanBoardSecondaryTimeScaleType::Hours:
                    //Get start of next hour
                    return DateTimeUtil::addHours(DateTimeUtil::newDateTime(DateTimeUtil::date(currentDate), 0), DateTimeUtil::hour(currentDate) + 1);
                
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }        

        //Handle "None"
        if (_type == HiGHPlanBoardSecondaryTimeScaleType::None)
        {
            return result;
        }

        while (enumerator.moveNext())
        {
            period = enumerator.current();
            period.parmIsSecondaryPeriodStart(false);

            previousDate = currentDate;
            currentDate = period.parmStartDateTime();

            if (isFirst)
            {
                //Handle "Auto"
                Minutes difference = int642int(DateTimeUtil::getDifference(period.parmEndDateTime(), period.parmStartDateTime()) div #secondsPerMinute);
                _type = (_type == HiGHPlanBoardSecondaryTimeScaleType::Auto ? HiGHPlanBoardPeriodSecondary::autoType(difference) : _type);
                if(_planboardMode == HiGHPlanBoardMode::DateOnly)
                {
                    result.addEnd(HiGHPlanBoardPeriodSecondary::newParameters('', 0, DateTimeUtil::minValue(), DateTimeUtil::minValue()));                    
                }
                else
                {
                    result.addEnd(HiGHPlanBoardPeriodSecondary::newParameters('', _periodWidth div 2, DateTimeUtil::minValue(), DateTimeUtil::minValue()));
                }
                secondaryEndDate = calculateSecondaryDate();
                isFirst = false;
            }
            else
            {
                width += _periodWidth;
            }
            
            if (currentDate >= secondaryEndDate) //New secondary period must be made
            {
                result.addEnd(HiGHPlanBoardPeriodSecondary::newParameters(HiGHPlanBoardPeriodSecondary::getLabelFromTimeScale(previousDate, _type, width), width, secondaryStartDate, secondaryEndDate));
                secondaryStartDate = secondaryEndDate;
                secondaryEndDate = calculateSecondaryDate();
                width = 0;
                period.parmIsSecondaryPeriodStart(true);
            }
        }

        if (width > _periodWidth)
        {
            result.addEnd(HiGHPlanBoardPeriodSecondary::newParameters(HiGHPlanBoardPeriodSecondary::getLabelFromTimeScale(previousDate, _type, width), width, secondaryStartDate, secondaryEndDate));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a the most logical secondary time scale type
    /// </summary>
    /// <param name = "_timeScale">Minutes time scale set on plan board</param>
    /// <returns>Most logical time scale level</returns>
    private static HiGHPlanBoardSecondaryTimeScaleType autoType(Minutes _timeScale)
    {
        if (_timeScale <= 10)       {return HiGHPlanBoardSecondaryTimeScaleType::Hours; }
        if (_timeScale <= 12 * 60)  {return HiGHPlanBoardSecondaryTimeScaleType::Days;  }
        if (_timeScale <= 24 * 60)  {return HiGHPlanBoardSecondaryTimeScaleType::Months;}

        return HiGHPlanBoardSecondaryTimeScaleType::Years;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelFromTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a human readable label represending the datetime value passed
    /// </summary>
    /// <param name = "_datetime">Date time to convert.</param>
    /// <param name = "_timeScale">Time scale (in minutes) to use for formatting.</param>
    /// <returns>UtcDateTime of the start date</returns>
    private static str getLabelFromTimeScale(utcdatetime _datetime, HiGHPlanBoardSecondaryTimeScaleType _timeScale, int _width)
    {
        switch (_timeScale)
        {
            case HiGHPlanBoardSecondaryTimeScaleType::Years:
                return strFmt("%1", DateTimeUtil::year(_dateTime));

            case HiGHPlanBoardSecondaryTimeScaleType::Months:
                return strFmt("%1", mthName(DateTimeUtil::month(_dateTime)));

            case HiGHPlanBoardSecondaryTimeScaleType::Weeks:
                return strFmt("Week %1", wkOfYr(DateTimeUtil::date(_dateTime)));

            case HiGHPlanBoardSecondaryTimeScaleType::Days:
                return (_width > 100 ? date2Str(DateTimeUtil::date(_datetime), 123, DateDay::Digits1or2, DateSeparator::Space, DateMonth::Long, DateSeparator::Space, DateYear::Digits4) : strFmt("%1", DateTimeUtil::date(_dateTime)));

            case HiGHPlanBoardSecondaryTimeScaleType::Hours:
                return strFmt("%1:00", DateTimeUtil::hour(_dateTime));

            default:
                return strFmt("%1", (_dateTime));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>