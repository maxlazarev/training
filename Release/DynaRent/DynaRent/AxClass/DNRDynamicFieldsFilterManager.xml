<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRDynamicFieldsFilterManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Dynamic field filter manager
/// </summary>
class DNRDynamicFieldsFilterManager
{
    TableId             tableId;
    FormGroupControl    rentalTypeGroupControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRDynamicFieldsFilterManager construct(TableId _tableId, FormGroupControl _rentalTypeGroupControl)
    {
        return new DNRDynamicFieldsFilterManager(_tableId, _rentalTypeGroupControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TableId _tableId, FormGroupControl _rentalTypeGroupControl)
    {
        tableId                 = _tableId;
        rentalTypeGroupControl  = _rentalTypeGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds field control
    /// </summary>
    /// <param name="_groupControl">Base group control</param>
    /// <param name="_fieldTable">DFMFieldTable record that contains all the neccessary data</param>
    /// <param name="_relatedTableId">related tableId</param>
    /// <param name="_relatedRecId">related recId</param>
    /// <returns>FormGroupControl that contains new control</returns>
    private void buildFieldControls(DFMFieldTable _fieldTable, TableId _relatedTableId)
    {
        ExtendedDataTypeName    edtName;
        //The control name is extended as FieldId_<LinkedTableId> to allow showing same field multiple times on form.

        String255               fldIdCallerTableIdRecIdId  = strFmt("@DNR:DynamicPropertyStringIdentifier", _fieldTable.FieldId);
        
        
        FormIntControl          intControl;
        FormRealControl         realControl;

        switch(_fieldTable.Type)
        {
            case DFMFieldType::String:
                
                switch(_fieldTable.LookupType)
                {
                    case DFMLookupType::Email:
                        edtName = extendedTypeStr(Email) + fldIdCallerTableIdRecIdId;
                        break;
                        
                    case DFMLookupType::URL:
                        edtName = extendedTypeStr(URL) + fldIdCallerTableIdRecIdId;
                        break;
                        
                    default:
                        edtName = extendedTypeStr(DFMValue) + fldIdCallerTableIdRecIdId;
                        break;
                }

                FormStringControl stringControl;
                stringControl = rentalTypeGroupControl.addControl(FormControlType::String, edtName);
                stringControl.label(_fieldTable.FieldId);
                stringControl.displayLength(_fieldTable.Width ? _fieldTable.Width : DFMFieldTable::standardFieldWidth());
                stringControl.displayHeight(_fieldTable.Height ? _fieldTable.Height : 1);
                stringControl.multiLine(_fieldTable.Height > 1);
                stringControl.lookupButton(_fieldTable.Height == 1 || DFMFieldLookupValue::exist(_fieldTable.FieldId) ? FormLookupButton::Always : FormLookupButton::Never);
                stringControl.performDBLookup(fieldName2Id(_relatedTableId,_fieldTable.FieldId));
                stringControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(DNRDynamicFieldsFilterManager, dynamicCtrlLookup), this);
                stringControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(DNRDynamicFieldsFilterManager, dynamicCtrlModified), this);
                stringControl.cacheDataMethod(NoYes::Yes);
                break;

            case DFMFieldType::Integer:
                intControl = rentalTypeGroupControl.addControl(FormControlType::Integer, literalStr(IntegerControl));
                intControl.displayLength(_fieldTable.Width ? _fieldTable.Width : DFMFieldTable::standardFieldWidth());
                intControl.label(_fieldTable.FieldId);
                intControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(DNRDynamicFieldsFilterManager, dynamicCtrlModified), this);
                break;

            case DFMFieldType::Real:
                realControl = rentalTypeGroupControl.addControl(FormControlType::Real, literalStr(RealControl));
                realControl.displayLength(_fieldTable.Width ? _fieldTable.Width : DFMFieldTable::standardFieldWidth());
                realControl.label(_fieldTable.FieldId);
                realControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(DNRDynamicFieldsFilterManager, dynamicCtrlModified), this);
                break;

            case DFMFieldType::Date:
                FormDateControl dateControl;
                dateControl = rentalTypeGroupControl.addControl(FormControlType::Date, literalStr(DateControl));
                dateControl.label(_fieldTable.FieldId);
                dateControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(DNRDynamicFieldsFilterManager, dynamicCtrlModified), this);
                break;

            case DFMFieldType::DateTime:
                FormDateTimeControl dateTimeControl;
                dateTimeControl = rentalTypeGroupControl.addControl(FormControlType::DateTime, literalStr(DateTimeControl));
                dateTimeControl.label(_fieldTable.FieldId);
                dateTimeControl.registerOverrideMethod(methodStr(FormDateTimeControl, modified), methodStr(DNRDynamicFieldsFilterManager, dynamicCtrlModified), this);
                break;
                
            case DFMFieldType::CheckBox:
                FormCheckBoxControl checkBoxControl;
                checkBoxControl = rentalTypeGroupControl.addControl(FormControlType::CheckBox, literalStr(CheckBoxControl));
                checkBoxControl.label(_fieldTable.FieldId);
                checkBoxControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(DNRDynamicFieldsFilterManager, dynamicCtrlModified), this);
                break;
                
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDynamicControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds dynamic controls
    /// </summary>
    /// <param name="_tableId">Base table id</param>
    /// <param name="_rentalTypeGroupControl">FormGroupControl to create controls on</param>
    /// <returns>FormGroupControl that contains new controls</returns>
    public FormGroupControl buildDynamicControls()
    {
        DFMCollectionId         collectionId;
        DFMTableRelation        tableRelation;
        boolean                 relationFound;     

        while select tableRelation
        where tableRelation.RefTableId == tableId
        {
            if (!relationFound)
            {
                collectionId = this.getCollectionId(tableId);

                relationFound = true;
            }

            // add controls to tab page
            this.addControlsToTabPage(collectionId, tableId);
        }

        return rentalTypeGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlsToTabPage</Name>
				<Source><![CDATA[
    private void addControlsToTabPage(DFMCollectionId _collectionId, TableId _tableId)
    {
        DFMFieldGroupCollection fieldGroupCollection;
        DFMCollectionContents   collectionContents;
        DFMFieldGroup           fieldGroup;
        DFMFieldGroupContents   fieldGroupContents;
        DFMFieldTable           fieldTable;
        Set                     fieldIdSet = new Set(Types::Record);

        while select fieldTable
            join TableId from fieldGroupContents
            where fieldTable.FieldId == fieldGroupContents.FieldId
                join TableId from fieldGroup
                where fieldGroupContents.FieldGroupId == fieldGroup.GroupId
                    exists join collectionContents
                    where  fieldGroup.GroupId == collectionContents.FieldGroupId
                        && collectionContents.CollectionId == _collectionId
        {
            fieldIdSet.add(fieldTable);
        }

        if(fieldIdSet.elements())
        {
            SetEnumerator setEnumfieldTable = fieldIdSet.getEnumerator();

            while(setEnumfieldTable.moveNext())
            {
                fieldTable = setEnumfieldTable.current();
                this.buildFieldControls(fieldTable, _tableId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionId</Name>
				<Source><![CDATA[
    private DFMCollectionId getCollectionId(TableId _tableId)
    {
        DFMCollectionQuery collectionQuery;
        
        select firstonly CollectionId from collectionQuery
        where collectionQuery.RefTableId == _tableId;
            
        return collectionQuery.CollectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicCtrlModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// performs actions when field is modified
    /// </summary>
    /// <param name="_callerControl">Source control</param>
    /// <returns>true if successfully modified</returns>
    private boolean dynamicCtrlModified(FormControl _callerControl)
    {
        DFMValue   dynamicValue;
        FormRun    formRun        = _callerControl.formRun();
        DFMFieldId dynamicFieldId = _callerControl.labelText(); 

        switch(classIdGet(_callerControl))
        {
            case classNum(FormStringControl):
                dynamicValue = _callerControl.valueStr();
                break;

            case classNum(FormIntControl):
                FormIntControl intControl = _callerControl;
                dynamicValue = (intControl.value() == 0 ? '' : int2str(intControl.value()));
                break;

            case classNum(FormRealControl):
                FormRealControl realControl = _callerControl;
                dynamicValue = (realControl.realValue() == 0 ? '' : num2str(realControl.realValue(), 0, 16, 1, 0));
                break;

            case classNum(FormDateControl):
                FormDateControl dateControl = _callerControl;
                dynamicValue = (dateControl.dateValue() == dateNull() ? '' : strReplace(date2strXpp(dateControl.dateValue()), '\\', '-'));
                break;

            case classNum(FormDateTimeControl):
                dynamicValue = '';
                break;

            case classNum(FormCheckBoxControl):
                FormCheckBoxControl boxControl = _callerControl;
                dynamicValue = (boxControl.value() == 0 ? '' : int2str(boxControl.value()));
                break;

            default:
                // do nothing
                break;
        }

        if (dynamicFieldId && formHasMethod(formRun, literalStr(DNRPopulateDynamicFieldValueMap)))
        {
            formRun.DNRPopulateDynamicFieldValueMap(dynamicFieldId, dynamicValue);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicCtrlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup
    /// </summary>
    /// <param name="_callerControl">Source control</param>
    private void dynamicCtrlLookup(FormControl _callerControl)
    {
        switch(classIdGet(_callerControl))
        {
            case classNum(FormStringControl):
                FormStringControl stringControl = _callerControl;
                SysTableLookup  lookup;
                Query           query;
    
                query = new Query();
                query.addDataSource(tableNum(DFMFieldLookupValue)).addRange(fieldNum(DFMFieldLookupValue, FieldId)).value(stringControl.label());
    
                lookup = SysTableLookup::newParameters(tableNum(DFMFieldLookupValue), _callerControl);
                lookup.addLookupfield(fieldNum(DFMFieldLookupValue, Value), true);
                lookup.parmQuery(query);
                lookup.performFormLookup();
                break;

            case classNum(FormDateControl):
                FormDateControl dateControl = _callerControl;
                dateControl.performTypeLookup(extendedTypeNum(TransDate));
                break;

            default:
                // do nothing
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromRental</Name>
				<Source><![CDATA[
    public static boolean isCalledFromRental(Args _args)
    {
        boolean ret = false;

        if (_args && _args.record())
        {
            switch(_args.record().TableId)
            {
                case tableNum(SalesTable):
                    SalesTable salesTable = _args.record() as SalesTable;
                    ret = salesTable.SalesType == SalesType::RORRental;
                    break;

                case tableNum(PurchTable):
                    PurchTable purchTable = _args.record() as PurchTable;
                    ret = purchTable.PurchaseType == PurchaseType::RORSubRental;
                    break;

                case tableNum(SalesQuotationTable):
                    SalesQuotationTable salesQuotationTable = _args.record() as SalesQuotationTable;
                    ret = salesQuotationTable.QuotationType == QuotationType::RORRental || salesQuotationTable.QuotationType == QuotationType::RORProjRental;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>