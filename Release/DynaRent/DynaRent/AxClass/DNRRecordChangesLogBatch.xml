<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRecordChangesLogBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRRecordChangesLogBatch extends RunBaseBatch
{
    FromDateTime    auditFromDateTime;
    ToDateTime      auditToDateTime;

    DialogField     dlgAuditFromDateTime;
    DialogField     dlgAuditToDateTime;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
        auditFromDateTime,
        auditToDateTime
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>auditBOBObjectMaintenancePlan</Name>
				<Source><![CDATA[
    private void auditBOBObjectMaintenancePlan()
    {
        BOBObjectMaintenancePlan bobObjectMaintenancePlan;
    
        setPrefix(tableStr(BOBObjectMaintenancePlan));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from bobObjectMaintenancePlan
        where (bobObjectMaintenancePlan.createdDateTime  >= auditFromDateTime && bobObjectMaintenancePlan.createdDateTime  <= auditToDateTime)
        ||    (bobObjectMaintenancePlan.modifiedDateTime >= auditFromDateTime && bobObjectMaintenancePlan.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5", bobObjectMaintenancePlan.createdBy,
                                          bobObjectMaintenancePlan.modifiedBy,
                                          bobObjectMaintenancePlan.createdDateTime,
                                          bobObjectMaintenancePlan.modifiedDateTime,
                                          bobObjectMaintenancePlan.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditBOBObjectTable</Name>
				<Source><![CDATA[
    private void auditBOBObjectTable()
    {
        BOBObjectTable bobObjectTable;
    
        setPrefix(tableStr(BOBObjectTable));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from bobObjectTable
        where (bobObjectTable.createdDateTime  >= auditFromDateTime && bobObjectTable.createdDateTime  <= auditToDateTime)
        ||    (bobObjectTable.modifiedDateTime >= auditFromDateTime && bobObjectTable.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5", bobObjectTable.createdBy,
                                          bobObjectTable.modifiedBy,
                                          bobObjectTable.createdDateTime,
                                          bobObjectTable.modifiedDateTime,
                                          bobObjectTable.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditBOBRentalTrans</Name>
				<Source><![CDATA[
    private void auditBOBRentalTrans()
    {
        BOBRentalTrans bobRentalTrans;
    
        setPrefix(tableStr(BOBRentalTrans));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from bobRentalTrans
        where (bobRentalTrans.createdDateTime  >= auditFromDateTime && bobRentalTrans.createdDateTime  <= auditToDateTime)
        ||    (bobRentalTrans.modifiedDateTime >= auditFromDateTime && bobRentalTrans.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5", bobRentalTrans.createdBy,
                                          bobRentalTrans.modifiedBy,
                                          bobRentalTrans.createdDateTime,
                                          bobRentalTrans.modifiedDateTime,
                                          bobRentalTrans.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditBSAContractLine</Name>
				<Source><![CDATA[
    private void auditBSAContractLine()
    {
        BSAContractLine bsaContractLine;
    
        setPrefix(tableStr(BSAContractLine));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from bsaContractLine
        where (bsaContractLine.createdDateTime  >= auditFromDateTime && bsaContractLine.createdDateTime  <= auditToDateTime)
        ||    (bsaContractLine.modifiedDateTime >= auditFromDateTime && bsaContractLine.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", bsaContractLine.dataAreaId,
                                             bsaContractLine.createdBy,
                                             bsaContractLine.modifiedBy,
                                             bsaContractLine.createdDateTime,
                                             bsaContractLine.modifiedDateTime,
                                             bsaContractLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditDFMValueTrans</Name>
				<Source><![CDATA[
    private void auditDFMValueTrans()
    {
        DFMValueTrans dfmValueTrans;
    
        setPrefix(tableStr(DFMValueTrans));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from dfmValueTrans
        where (dfmValueTrans.createdDateTime  >= auditFromDateTime && dfmValueTrans.createdDateTime  <= auditToDateTime)
        ||    (dfmValueTrans.modifiedDateTime >= auditFromDateTime && dfmValueTrans.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", dfmValueTrans.dataAreaId,
                                             dfmValueTrans.createdBy,
                                             dfmValueTrans.modifiedBy,
                                             dfmValueTrans.createdDateTime,
                                             dfmValueTrans.modifiedDateTime,
                                             dfmValueTrans.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditFINDimAttributeSetup</Name>
				<Source><![CDATA[
    private void auditFINDimAttributeSetup()
    {
        FINDimAttributeSetup finDimAttributeSetup;
    
        setPrefix(tableStr(FINDimAttributeSetup));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from finDimAttributeSetup
        where (finDimAttributeSetup.createdDateTime  >= auditFromDateTime && finDimAttributeSetup.createdDateTime  <= auditToDateTime)
        ||    (finDimAttributeSetup.modifiedDateTime >= auditFromDateTime && finDimAttributeSetup.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", finDimAttributeSetup.dataAreaId,
                                             finDimAttributeSetup.createdBy,
                                             finDimAttributeSetup.modifiedBy,
                                             finDimAttributeSetup.createdDateTime,
                                             finDimAttributeSetup.modifiedDateTime,
                                             finDimAttributeSetup.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditInventTransferLine</Name>
				<Source><![CDATA[
    private void auditInventTransferLine()
    {
        InventTransferLine inventTransferLine;
    
        setPrefix(tableStr(InventTransferLine));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from inventTransferLine
        where inventTransferLine.RORTradeType != RORTradeType::SalesPurch
        &&  (   (inventTransferLine.createdDateTime  >= auditFromDateTime && inventTransferLine.createdDateTime  <= auditToDateTime)
            ||  (inventTransferLine.modifiedDateTime >= auditFromDateTime && inventTransferLine.modifiedDateTime <= auditToDateTime))
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", inventTransferLine.dataAreaId,
                                             inventTransferLine.createdBy,
                                             inventTransferLine.modifiedBy,
                                             inventTransferLine.createdDateTime,
                                             inventTransferLine.modifiedDateTime,
                                             inventTransferLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditPurchLine</Name>
				<Source><![CDATA[
    private void auditPurchLine()
    {
        PurchLine purchLine;
    
        setPrefix(tableStr(PurchLine));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from purchLine
        where purchLine.RORTradeType != RORTradeType::SalesPurch
        &&  (   (purchLine.createdDateTime  >= auditFromDateTime && purchLine.createdDateTime  <= auditToDateTime)
            ||  (purchLine.modifiedDateTime >= auditFromDateTime && purchLine.modifiedDateTime <= auditToDateTime))
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", purchLine.dataAreaId,
                                             purchLine.createdBy,
                                             purchLine.modifiedBy,
                                             purchLine.createdDateTime,
                                             purchLine.modifiedDateTime,
                                             purchLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditRAGContractLine</Name>
				<Source><![CDATA[
    private void auditRAGContractLine()
    {
        RAGContractLine ragContractLine;
    
        setPrefix(tableStr(RAGContractLine));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from ragContractLine
        where (ragContractLine.createdDateTime  >= auditFromDateTime && ragContractLine.createdDateTime  <= auditToDateTime)
        ||    (ragContractLine.modifiedDateTime >= auditFromDateTime && ragContractLine.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", ragContractLine.dataAreaId,
                                             ragContractLine.createdBy,
                                             ragContractLine.modifiedBy,
                                             ragContractLine.createdDateTime,
                                             ragContractLine.modifiedDateTime,
                                             ragContractLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditRORVenueTable</Name>
				<Source><![CDATA[
    private void auditRORVenueTable()
    {
        RORVenueTable rorVenueTable;
    
        setPrefix(tableStr(RORVenueTable));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from rorVenueTable
        where (rorVenueTable.createdDateTime  >= auditFromDateTime && rorVenueTable.createdDateTime  <= auditToDateTime)
        ||    (rorVenueTable.modifiedDateTime >= auditFromDateTime && rorVenueTable.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", rorVenueTable.dataAreaId,
                                             rorVenueTable.createdBy,
                                             rorVenueTable.modifiedBy,
                                             rorVenueTable.createdDateTime,
                                             rorVenueTable.modifiedDateTime,
                                             rorVenueTable.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditSalesLine</Name>
				<Source><![CDATA[
    private void auditSalesLine()
    {
        SalesLine salesLine;
    
        setPrefix(tableStr(SalesLine));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from salesLine
        where salesLine.RORTradeType != RORTradeType::SalesPurch
        &&  (   (salesLine.createdDateTime  >= auditFromDateTime && salesLine.createdDateTime   <= auditToDateTime)
            ||  (salesLine.modifiedDateTime >= auditFromDateTime && salesLine.modifiedDateTime  <= auditToDateTime))
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", salesLine.dataAreaId, salesLine.createdBy, salesLine.modifiedBy, salesLine.createdDateTime, salesLine.modifiedDateTime, salesLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditSalesQuotationLine</Name>
				<Source><![CDATA[
    private void auditSalesQuotationLine()
    {
        SalesQuotationLine salesQuotationLine;
    
        setPrefix(tableStr(SalesQuotationLine));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from salesQuotationLine
        where salesQuotationLine.RORTradeType != RORTradeType::SalesPurch
        &&  (   (salesQuotationLine.createdDateTime  >= auditFromDateTime && salesQuotationLine.createdDateTime  <= auditToDateTime)
            ||  (salesQuotationLine.modifiedDateTime >= auditFromDateTime && salesQuotationLine.modifiedDateTime <= auditToDateTime))
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", salesQuotationLine.dataAreaId,
                                             salesQuotationLine.createdBy,
                                             salesQuotationLine.modifiedBy,
                                             salesQuotationLine.createdDateTime,
                                             salesQuotationLine.modifiedDateTime,
                                             salesQuotationLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditWPPWorkOrderLine</Name>
				<Source><![CDATA[
    private void auditWPPWorkOrderLine()
    {
        WPPWorkOrderLine wppWorkOrderLine;
    
        setPrefix(tableStr(WPPWorkOrderLine));
    
        while select crossCompany DataAreaId, CreatedBy, ModifiedBy, CreatedDateTime, ModifiedDateTime, RecId from wppWorkOrderLine
        where (wppWorkOrderLine.createdDateTime  >= auditFromDateTime && wppWorkOrderLine.createdDateTime  <= auditToDateTime)
        ||    (wppWorkOrderLine.modifiedDateTime >= auditFromDateTime && wppWorkOrderLine.modifiedDateTime <= auditToDateTime)
        {
            info(strFmt("%1$%2$%3$%4$%5$%6", wppWorkOrderLine.dataAreaId,
                                             wppWorkOrderLine.createdBy,
                                             wppWorkOrderLine.modifiedBy,
                                             wppWorkOrderLine.createdDateTime,
                                             wppWorkOrderLine.modifiedDateTime,
                                             wppWorkOrderLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
    
        dialog.addTabPage("@SYS334072");
    
        dlgAuditFromDateTime = dialog.addFieldValue(extendedTypeStr(FromDateTime), auditFromDateTime);
        dlgAuditFromDateTime.helpText(strFmt("@SYS311966", "@SYS334072", "@SYS177351"));
        dlgAuditFromDateTime.value(2015-01-01T00:00:00);
    
        dlgAuditToDateTime = dialog.addFieldValue(extendedTypeStr(ToDateTime), auditToDateTime);
        dlgAuditToDateTime.helpText(strFmt("@SYS311966", "@SYS334072", "@SYS177352"));
        dlgAuditToDateTime.value(2015-12-31T23:59:59);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        auditFromDateTime   = dlgAuditFromDateTime.value();
        auditToDateTime     = dlgAuditToDateTime.value();
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.validate())
        {
            this.auditSalesQuotationLine();
            this.auditSalesLine();
            this.auditPurchLine();
            this.auditInventTransferLine();
            this.auditWPPWorkOrderLine();
            this.auditFINDimAttributeSetup();
            this.auditBOBObjectTable();
            this.auditBOBRentalTrans();
            this.auditBOBObjectMaintenancePlan();
            this.auditBSAContractLine();
            this.auditDFMValueTrans();
            this.auditRAGContractLine();
            this.auditRORVenueTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (!auditFromDateTime)
            return checkFailed(strFmt("@SYS26332", "@SYS177351"));
    
        if (!auditToDateTime)
            return checkFailed(strFmt("@SYS26332", "@SYS177352"));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static DNRRecordChangesLogBatch construct()
    {
        return new DNRRecordChangesLogBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS127386";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        DNRRecordChangesLogBatch recordChangesLog = DNRRecordChangesLogBatch::construct();
    
        if (recordChangesLog.prompt())
        {
            recordChangesLog.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>