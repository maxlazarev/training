<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWorkCalendarCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRWorkCalendarCreate extends RunBaseBatch
{
    DialogRunbase       dialog;

    DialogField         dialogCalendar;
    DialogField         dialogFromDate;
    DialogField         dialogToDate;
    DialogField         dialogUseBasic;
    DialogField         dialogWorkTime;

    DNRCalendarId       calendarId;

    TransDate           fromDate;
    TransDate           toDate;

    NoYes               useBasic;

    WorkTimeId          workTimeId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
         calendarId,
         fromDate,
         toDate,
         useBasic,
         workTimeId
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        dialog = super();

        dialogCalendar = dialog.addField(extendedtypestr(DNRCalendarId));
        dialogCalendar.value(calendarId);

        dialogFromDate = dialog.addField(extendedtypestr(TransDate),"@SYS5209","@SYS5209");
        dialogFromDate.value(fromDate);

        dialogToDate = dialog.addField(extendedtypestr(TransDate),"@SYS14656","@SYS14656");
        dialogToDate.value(toDate);

        dialogUseBasic = dialog.addField(extendedtypestr(WorkCalendarUseBasic),"@SYS25936");
        dialogUseBasic.value(useBasic);

        dialogWorkTime = dialog.addField(extendedtypestr(WorkTimeId),fieldpname(WorkTimeTable, WorkTimeId));
        dialogWorkTime.value(workTimeId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        calendarId  = dialogCalendar.value();
        fromDate    = dialogFromDate.value();
        toDate      = dialogToDate.value();
        useBasic    = dialogUseBasic.value();
        workTimeId  = dialogWorkTime.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    void initParmDefault()
    {
        fromDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        toDate      = nextyr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendar</Name>
				<Source><![CDATA[
    DNRCalendarId  parmCalendar(DNRCalendarId _calendarId = calendarId)
    {
        calendarId = _calendarId;
        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsebasic</Name>
				<Source><![CDATA[
    NoYes parmUsebasic(NoYes _useBasic = useBasic)
    {
        useBasic = _useBasic;
        return useBasic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTimeId</Name>
				<Source><![CDATA[
    WorkTimeId parmWorkTimeId(WorkTimeId _workTime = workTimeId)
    {
        workTimeId = _workTime;

        return workTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.updateCalender();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalender</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInsertMethodInLoop", "Method was duplicated from standard AX form WorkCalendarCreate class")]
    void updateCalender()
    {
        WorkTimeLine            workTimeLine;
        WorkTimeTable           workTimeTable;
        DNRCalendarDate         workCalendarDate;
        DNRCalendarDateLine     workCalendarDateLine;

        TransDate               transDate = fromDate;

        workCalendarDateLine.disableCache(true);

        while (transDate <= toDate)
        {
            select firstonly forupdate workCalendarDate
            where workCalendarDate.CalendarId       == calendarId    
            &&    workCalendarDate.TransDate        == transDate;

            if (workCalendarDate)
            {
                workCalendarDate.delete();
            }

            workCalendarDate.CalendarId         = calendarId;
            workCalendarDate.TransDate          = transDate;

            if (useBasic)
            {
                workCalendarDate.WorkTimeControl    = WorkTimeControl::UseBasic;
            }
            else
            {
                workCalendarDate.WorkTimeControl    = WorkTimeControl::Closed;

                if (workTimeId)
                {
                    while select workTimeLine
                    index hint TimeDayIdx
                    where workTimeLine.WorkTimeId   == workTimeId 
                    &&    workTimeLine.WeekDay      == dayofwk(transDate)
                    {
                        workCalendarDate.WorkTimeControl    = WorkTimeControl::Open;

                        workCalendarDateLine.clear();
                        workCalendarDateLine.initFromWorkCalendarDate(workCalendarDate);
                        workCalendarDateLine.initFromWorkTimeLine(workTimeLine);
                        workCalendarDateLine.insert();
                    }
                }
            }

            

            workCalendarDate.insert();

            transDate++;
        }
        workCalendarDateLine.disableCache(false);
        Dictionary::dataFlush(tablenum(DNRCalendarDateLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        boolean         ok;

        ok = super();

        if (!calendarId)
        {
            ok = checkFailed("@SYS25956");
        }

        if (! DNRCalendarTable::checkExist(calendarId))
        {
            ok = false;
        }

        if (workTimeId && ! WorkTimeTable::checkExist(workTimeId))
        {
            ok = false;
        }

        if (fromDate > toDate)
        {
            ok = checkFailed("@SYS16982");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS25939";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        DNRWorkCalendarCreate   workCalendarCreate;
        FormRun                 callerForm;

        switch (_args.dataset())
        {
            case tablenum(DNRCalendarTable):
                workCalendarCreate = DNRWorkCalendarCreate::newWorkCalendarTable(_args.record());
                break;
            case tablenum(DNRCalendarDate):
                workCalendarCreate = DNRWorkCalendarCreate::newWorkCalendarDate(_args.record(), _args);
                break;
            default:
                throw error(strfmt("@SYS25516",funcname()));
        }

        if (workCalendarCreate.prompt())
        {
            workCalendarCreate.runOperation();
        }

        if (_args.caller())
        {
            callerForm  = _args.caller();
            callerForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkCalendarDate</Name>
				<Source><![CDATA[
    static DNRWorkCalendarCreate newWorkCalendarDate(DNRCalendarDate    _workCalendarDate, Args    _args)
    {
        DNRWorkCalendarCreate  workCalendarCreate = new DNRWorkCalendarCreate();
        DNRCalendarTable       workCalendarTable = DNRCalendarTable::find(_workCalendarDate.CalendarId);

        workCalendarCreate.getLast();
        workCalendarCreate.parmCalendar(workCalendarTable.CalendarId);

        if (! workCalendarCreate.parmCalendar() && _args.caller())
        {
            workCalendarCreate.parmCalendar(_args.caller().calendarId());
        }

        if (workCalendarTable.BasicCalendarId)
        {
            workCalendarCreate.parmUsebasic(NoYes::Yes);
        }
        else
        {
            workCalendarCreate.parmUsebasic(NoYes::No);
        }

        return workCalendarCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkCalendarTable</Name>
				<Source><![CDATA[
    static DNRWorkCalendarCreate newWorkCalendarTable(DNRCalendarTable _workCalendarTable)
    {
        DNRWorkCalendarCreate  workCalendarCreate = new DNRWorkCalendarCreate();

        workCalendarCreate.getLast();
        workCalendarCreate.parmCalendar(_workCalendarTable.CalendarId);

        if (_workCalendarTable.BasicCalendarId)
        {
            workCalendarCreate.parmUsebasic(NoYes::Yes);
        }
        else
        {
            workCalendarCreate.parmUsebasic(NoYes::No);
        }

        return workCalendarCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>