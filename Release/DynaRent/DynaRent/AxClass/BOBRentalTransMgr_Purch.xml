<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransMgr_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransMgr_Purch extends BOBRentalTransManager
{
    PurchLine purchLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    protected BOBRentalTransActive active()
    {
        BOBRentalTransActive ret;
        ;
    
        if (inventTrans.ValueOpen == InventTransOpen::No
        &&  inventTrans.ReturnInventTransOrigin
        && (inventTrans.StatusReceipt == StatusReceipt::Purchased || inventTrans.StatusIssue == StatusIssue::Sold))
        {
            ret = BOBRentalTransActive::Closed; // packing slip cancellation/correction
        }
        else if((inventTrans.StatusReceipt == StatusReceipt::Ordered && purchLine.CreateFixedAsset)
                || (inventTrans.StatusReceipt == StatusReceipt::Registered && purchLine.CreateFixedAsset) 
                || (inventTrans.StatusReceipt == StatusReceipt::Received && purchLine.AssetId))
        {
            ret = BOBRentalTransActive::Active;
        }
        else
        {
            ret = BOBRentalTransActive::Inactive;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyFrom</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyFrom()
    {
        switch(inventTrans.StatusReceipt)
        {
            case StatusReceipt::Ordered, StatusReceipt::Registered:
                return BOBDateTimeCertainty::Firm;
    
            case StatusReceipt::Received, StatusReceipt::Purchased:
                return BOBDateTimeCertainty::Fixed;
    
            default:
                if(inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.Qty < 0)
                {
                    // purchase credit, correction, or cancellation
                    switch(inventTrans.StatusIssue)
                    {
                        case StatusIssue::OnOrder, StatusIssue::Picked, StatusIssue::ReservPhysical:
                            return BOBDateTimeCertainty::Firm;
    
                        case StatusIssue::Deducted, StatusIssue::Sold:
                            return BOBDateTimeCertainty::Fixed;
                    }
                }
        }
    
        throw error("@DNR6063");
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyTo</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyTo(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return BOBDateTimeCertainty::Fixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        FromDate fromDate;
        ;
    
        switch(inventTrans.StatusReceipt)
        {
            case StatusReceipt::Registered, StatusReceipt::Received, StatusReceipt::Purchased:
                if(inventTrans.DateInvent)
                {
                    fromDate = inventTrans.DateInvent;
                }
                else if(inventTrans.DatePhysical)
                {
                    fromDate = inventTrans.DatePhysical;
                }
                else
                {
                    fromDate = inventTrans.DateFinancial;
                }
    
                fromDate = max(fromDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
    
            default:
                if(purchLine.ConfirmedDlv)
                {
                    fromDate = purchLine.ConfirmedDlv;
                }
                else if(purchLine.DeliveryDate)
                {
                    fromDate = purchLine.DeliveryDate;
                }
                else
                {
                    fromDate = purchLine.purchTable().DeliveryDate;
                }
                break;
        }
    
        return DateTimeUtil::newDateTime(fromDate, 0, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer()
    {
        purchLine = buffer as PurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId inventLocationId()
    {
        return inventTrans.inventLocationId();
        // return purchLine.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId rentalTypeId()
    {
        return purchLine.BOBRentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    protected BOBRentalTransType transType()
    {
        return BOBRentalTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    protected void updateBuffer(boolean _doUpdateBuffer)
    {
        BOBRentalTrans rentalTrans;
        ;
    
        if(purchLine.RecId)
        {
            select firstonly SubStatus, RecId from rentalTrans
            order by SubStatus asc
            where rentalTrans.InventTransOrigin == inventTrans.InventTransOrigin
            &&    rentalTrans.TransType         != BOBRentalTransType::InventCounting;
    
            purchLine.BOBRentalSubStatus = (rentalTrans.RecId ? rentalTrans.SubStatus : subStatus);
    
            if(_doUpdateBuffer)
            {
                purchLine.doUpdate();
            }
        }
        else // record is being inserted
        {
            purchLine.BOBRentalSubStatus = subStatus;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>