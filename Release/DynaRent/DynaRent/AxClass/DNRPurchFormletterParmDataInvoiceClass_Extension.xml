<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchFormletterParmDataInvoiceClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchFormletterParmDataInvoice))]
public final class DNRPurchFormletterParmDataInvoiceClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmLinesAndTable</Name>
				<Source><![CDATA[
    protected void createParmLinesAndTable()
    {
        next createParmLinesAndTable();

        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        PurchLine               purchLine;
        ParmId                  parmId = this.parmParmId();

        vendInvoiceInfoLine.skipDataMethods(true);
        vendInvoiceInfoLine.skipDatabaseLog(true);
        vendInvoiceInfoLine.skipEvents(true);

        ttsbegin;
        while select forupdate vendInvoiceInfoLine
        where vendInvoiceInfoLine.ParmId == parmId
            join purchLine
            where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
            && purchLine.RORTradeType != RORTradeType::SalesPurch
        {
            vendInvoiceInfoLine.selectForUpdate(true);
            vendInvoiceInfoLine.FINIgnoreTaxMatrix = purchLine.FINIgnoreTaxMatrix;
            vendInvoiceInfoLine.FINCountryStartTransport = purchLine.FINCountryStartTransport;
            vendInvoiceInfoLine.FINSetTaxGroup();
            vendInvoiceInfoLine.RORTradeType = purchLine.RORTradeType;
            vendInvoiceInfoLine.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectPackingSlipSubLines</Name>
				<Source><![CDATA[
    protected void collectPackingSlipSubLines(Map _map, VendPackingSlipJourRecId _vendPackingSlipJourRecId, TradeInventTransId _inventTransId)
    {
        NumberOfRecords prevNumOfElementsInMap = _map.elements();

        next collectPackingSlipSubLines(_map, _vendPackingSlipJourRecId, _inventTransId);

        // We only want to perform our extra check if a new element has been added to '_map'.
        if (prevNumOfElementsInMap != _map.elements())
        {
            VendPackingSlipTrans vendPackingSlipTrans;

            // *** Repeated code
            select firstonly RecId, FullyMatched from vendPackingSlipTrans
            where vendPackingSlipTrans.VendPackingSlipJour  == _vendPackingSlipJourRecId
            &&    vendPackingSlipTrans.InventTransId        == _inventTransId;
 
            // We are not checking if a VendPackingSlipTrans record has been found; it has been found, because a new element has been aded to '_map'.
            ///if (!ignorePackingSlipMatching && !vendPackingSlipTrans.FullyMatched == NoYes::No && _map.exists(vendPackingSlipTrans.RecId))
            ///{
            ///    _map.remove(vendPackingSlipTrans.RecId);
            ///}
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildSpecQty</Name>
				<Source><![CDATA[
    protected void updateQueryBuildSpecQty()
    {
        next updateQueryBuildSpecQty();
        // Implementation moved to another model
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroQuantityLines</Name>
				<Source><![CDATA[
    protected void deleteZeroQuantityLines()
    {
        next deleteZeroQuantityLines();

        //this.INVDeleteNotMayJournalTransBePosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVqtySalesPurch</Name>
				<Source><![CDATA[
    // extension methods

    public container INVqtySalesPurch(RORRentalLine _rentalLine, Qty _qty = 0)
    {
        return this.qtyPurch(_rentalLine, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVDeleteNotMayJournalTransBePosted</Name>
				<Source><![CDATA[
    public void INVDeleteNotMayJournalTransBePosted()
    {
        VendInvoiceInfoLine                 vendInvoiceInfoLineUpdate;
        VendInvoiceInfoTable                vendInvoiceInfoTable;
        PurchLine                           purchLine;

        ttsbegin;
        vendInvoiceInfoLineUpdate.skipDataMethods(true);
        vendInvoiceInfoLineUpdate.skipDatabaseLog(true);
        vendInvoiceInfoLineUpdate.skipEvents(true);
        vendInvoiceInfoLineUpdate.skipDeleteActions(true);
        vendInvoiceInfoLineUpdate.skipDeleteMethod(true);
        while select forupdate vendInvoiceInfoLineUpdate
        where vendInvoiceInfoLineUpdate.ParmId == this.parmId()
        &&    vendInvoiceInfoLineUpdate.ReceiveNow != 0
            join purchLine
            where purchLine.InventTransId == vendInvoiceInfoLineUpdate.InventTransId
                notexists join vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == vendInvoiceInfoLineUpdate.ParmId
                &&    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLineUpdate.TableRefId
        {
            if (!this.mayJournalTransBePosted(purchLine))
            {
                vendInvoiceInfoLineUpdate.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>