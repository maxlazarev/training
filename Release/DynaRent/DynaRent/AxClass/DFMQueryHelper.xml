<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DFMQueryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DFMQueryHelper
{
    QueryRun queryRun;

    #define.RecId('RecId')
    #define.TableId('TableId')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(QueryRun _queryRun)
    {
        ;
    
        queryRun = _queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilter</Name>
				<Source><![CDATA[
    private static void createFilter(Args _args)
    {
        FormDataSource          dataSource, topDataSource;
        Common                  common;
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        DFMQueryHelper          queryHelper;
        FormRun                 callerFormRun, queryFormRun;
        Counter                 cnt;
        QueryBuildRange         qbr;
        ;
    
        dataSource = FormDataUtil::getFormDataSource(_args.record());
        topDataSource = dataSource;
        common = _args.record().joinParent();
    
        while(common)
        {
            topDataSource = FormDataUtil::getFormDataSource(common);
            common = common.joinParent();
        }
    
        dataSource = topDataSource;
        query = dataSource.query();
        qbds = dataSource.query().dataSourceTable(tableNum(DFMValueTransView));
    
        if (!qbds)
        {
            qbds = dataSource.query().dataSourceTable(_args.dataset()).addDataSource(tableNum(DFMValueTransView));
            qbds.relations(false);
            // qbds.joinMode(JoinMode::InnerJoin);
            // qbds.addSelectionField(fieldNum(DFMValueTransView, TableId));
            qbds.joinMode(JoinMode::ExistsJoin);
    
            qbds.addLink(fieldName2Id(dataSource.table(), #TableId), fieldNum(DFMValueTransView, RefTableId));
            qbds.addLink(fieldName2Id(dataSource.table(), #RecId), fieldNum(DFMValueTransView, RefRecId));
            qbds.addRange(fieldNum(DFMValueTransView, FieldId));
            qbds.addRange(fieldNum(DFMValueTransView, Value));
            qbds.addRange(fieldNum(DFMValueTransView, ValueReal));
        }
        else
        {
            qbds.joinMode(JoinMode::InnerJoin);
    
            for(cnt = 1; cnt <= qbds.rangeCount(); cnt ++)
            {
                qbr = qbds.range(cnt);
    
                if(qbr.field() != fieldNum(DFMValueTransView, FieldId)
                && qbr.field() != fieldNum(DFMValueTransView, Value)
                && qbr.field() != fieldNum(DFMValueTransView, ValueReal))
                {
                    qbds.clearRange(qbr.field());
                }
            }
        }
    
        queryRun = new QueryRun(query);
        queryHelper = new DFMQueryHelper(queryRun);
    
        queryFormRun = classFactory.createQueryForm(queryHelper);
        queryFormRun.init();
        queryFormRun.run();
        queryFormRun.wait();
    
        if(queryFormRun.closedOk())
        {
            callerFormRun = _args.caller();
            queryRun = queryHelper.queryRun();
    
            dataSource.query(queryRun.query());
            dataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustomDFMFilter</Name>
				<Source><![CDATA[
    public static boolean hasCustomDFMFilter(FormRun _formRun)
    {
        return SysFormRun::hasMethod(_formRun, identifierStr('DFMFilter'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        object callerFormRun = _args.caller();
        ;
    
        if(callerFormRun && DFMQueryHelper::hasCustomDFMFilter(callerFormRun))
        {
            callerFormRun.DFMFilter(_args.parmEnum());
        }
        else if(_args.record() && FormDataUtil::isFormDataSource(_args.record()))
        {
            if(_args.parmEnum() == DFMCreateRemove::Create)
            {
                DFMQueryHelper::createFilter(_args);
            }
            else
            {
                DFMQueryHelper::removeFilter(_args);
            }
        }
        else if(_args.dataset())
        {
            DFMQueryHelper::removeFilter(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFilter</Name>
				<Source><![CDATA[
    private static void removeFilter(Args _args)
    {
        FormDataSource          dataSource, topDataSource;
        Common                  common;
        Query                   query;
        QueryBuildDataSource    qbds;
        ;
    
        dataSource = FormDataUtil::getFormDataSource(_args.record());
        topDataSource = dataSource;
        common = _args.record().joinParent();
    
        if(common)
        {
            do
            {
                topDataSource = FormDataUtil::getFormDataSource(common);
                common = common.joinParent();
            }
            while(common);
    
            dataSource = topDataSource;
        }
    
        query = dataSource.query();
        qbds = dataSource.query().dataSourceTable(tableNum(DFMValueTransView));
    
        if(qbds)
        {
            qbds.joinMode(JoinMode::OuterJoin);
        }
    
        dataSource.query(query);
        dataSource.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>