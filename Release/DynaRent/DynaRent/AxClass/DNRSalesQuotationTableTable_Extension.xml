<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesQuotationTable))]
public final class DNRSalesQuotationTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeSalesQuotationLineOnUpdateSalesQuotationTable</Name>
				<Source><![CDATA[
    protected void initializeSalesQuotationLineOnUpdateSalesQuotationTable(SalesQuotationLine _salesQuotationLine)
    {
        CustAccount tmpCustAccount = _salesQuotationLine.CustAccount;

        next initializeSalesQuotationLineOnUpdateSalesQuotationTable(_salesQuotationLine);

        if (tmpCustAccount != _salesQuotationLine.CustAccount)
        {
            _salesQuotationLine.INVSetTierMultiplierRateOnCreation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldFromQuotationType</Name>
				<Source><![CDATA[
    protected boolean modifiedFieldFromQuotationType(FieldId _fieldId, boolean _userInput)
    {
        boolean ret = next modifiedFieldFromQuotationType(_fieldId, _userInput);
        
        if(this.QuotationType == QuotationType::RORProjRental)
        {
            this.modifiedField_Project(_fieldId);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId  fieldId)
    {
        boolean ret = next validateField(fieldId);

        if(ret)
        {
            if(fieldId == fieldNum(SalesQuotationTable, RORVenueCode) || fieldId == fieldNum(SalesQuotationTable, ProjIdRef))
            {
                ret = this.RORCheckProjId();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccount</Name>
				<Source><![CDATA[
    boolean checkAccount()
    {
        // The order of the statements needs to be like this! This prevents the first check from being executed (in the original method),
        // which is not necessary in DynaRent.
        smmBusRelAccount busRelAccountLocal = this.BusRelAccount;

        this.BusRelAccount = "";

        boolean ret = next checkAccount();

        this.BusRelAccount = busRelAccountLocal;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingJournals</Name>
				<Source><![CDATA[
    container existingJournals()
    {
        container ret = next existingJournals();

        ret = [this.lastQuotation(),
               this.lastConfirm(),
               // To meet the position of the standard positions used
               true,
               true,
               this.RORdisplayLastQuotationInspection()];
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBusinessRelationTable</Name>
				<Source><![CDATA[
    public void initFromBusinessRelationTable()
    {
        next initFromBusinessRelationTable();
        this.RORInitFromSmmBusRelTable(smmBusRelTable::find(this.BusRelAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    public void initFromCustTable(boolean mandatoryFieldsOnly)
    {
        NumberSequenceGroupId tmpNumberSequenceGroupId = this.NumberSequenceGroup;
        ContactPersonId tmpContactPersonId = this.ContactPersonId;

        next initFromCustTable(mandatoryFieldsOnly);

        this.RORInitFromInventLocation();

        this.NumberSequenceGroup = tmpNumberSequenceGroupId ? tmpNumberSequenceGroupId : this.NumberSequenceGroup;
        this.ContactPersonId = tmpContactPersonId ? tmpContactPersonId : this.ContactPersonId;

        this.RORInitFromCustTable(this.custTable_CustAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    public void initFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        next initFromSalesQuotationTable(_salesQuotationTable);

        this.NumberSequenceGroup = "";
        this.RORInitFromInventLocation();

        if (!this.NumberSequenceGroup)
        {
            this.NumberSequenceGroup = _salesQuotationTable.NumberSequenceGroup;
        }

        this.RORinitFromSalesQuotationTable(_salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSmmOpportunityTable</Name>
				<Source><![CDATA[
    public void initFromSmmOpportunityTable(smmOpportunityTable _smmOpportunityTable)
    {
        DirOrgPersonRelations   dirOrgPersonRelations;

        next initFromSmmOpportunityTable(_smmOpportunityTable);

        this.SalesPoolId = DNRWorkerDefaults::findByUserId(curUserId()).SalesPoolId;

        select firstOnly ContactPersonId from dirOrgPersonRelations
        where dirOrgPersonRelations.EntityRefTableId    == _smmOpportunityTable.TableId
        &&    dirOrgPersonRelations.EntityRefRecId      == _smmOpportunityTable.RecId;
    
        this.ContactPersonId = dirOrgPersonRelations.ContactPersonId ? dirOrgPersonRelations.ContactPersonId : this.ContactPersonId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId, boolean _userInput)
    {
        next modifiedField(_fieldId, _userInput);

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable, BusRelAccount):
                this.RORContactPersonIdOperator = '';
                break;
            
            case fieldNum(SalesQuotationTable, CustAccount):
                this.RORContactPersonIdOperator = '';
                break;
        }

        this.RORmodifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkup</Name>
				<Source><![CDATA[
    boolean skipMarkup()
    {
        boolean ret = next skipMarkup();

        if (this.QuotationType == QuotationType::RORRental)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = next validateWrite();

        ret = ret && this.RORvalidateWrite() && this.INVvalidateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_ItemReq</Name>
				<Source><![CDATA[
    public SalesTable salesTable_ItemReq(boolean _update)
    {
        SalesTable  salesTable = next salesTable_ItemReq(_update);

        DNRPrimitiveDisposableContext context = DNRPrimitiveDisposableContext::current();

        if (this.ProjIdRef && this.CustAccount && this.QuotationType == QuotationType::RORProjRental && context && context.DNRparmBoolean())
        {
            SalesTable salesTableRental;
            salesTableRental.selectForUpdate(_update);

            select firstonly salesTableRental
                where salesTableRental.ProjId         == this.ProjIdRef      &&
                      salesTableRental.CustAccount    == this.CustAccount    &&
                      salesTableRental.InvoiceAccount == this.InvoiceAccount &&
                      salesTableRental.CurrencyCode   == this.CurrencyCode   &&
                      salesTableRental.SalesType      == SalesType::RORRental;
            
            if (salesTableRental.RecId)
            {
                salesTable = salesTableRental;
            }
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRcheckCustRequisition</Name>
				<Source><![CDATA[
    // extension methods

    public boolean DNRcheckCustRequisition(boolean _showMsg = true)
    {
        boolean     ret;
    
        CustTable               custTable = this.custTable_CustAccount();
        DNRCustRequisitionLevel custRequisitionLevel;
        ;
        if (this.CustPurchaseOrder || !custTable.DNRCustRequisition)
        {
            ret = true;
        }
        else
        {
            if (this.QuotationType == QuotationType::Sales)
            {
                custRequisitionLevel = custTable.DNRCustRequisition[1];
            }
            else if (this.QuotationType == QuotationType::RORRental)
            {
                custRequisitionLevel = custTable.DNRCustRequisition[2];
            }
            else if (this.QuotationType == QuotationType::RORProjRental)
            {
                custRequisitionLevel = custTable.DNRCustRequisition[4];
            }
            else
            {
                custRequisitionLevel = custTable.DNRCustRequisition[3];
            }
    
            switch (custRequisitionLevel)
            {
                case DNRCustRequisitionLevel::Preferred :
                    if (_showMsg)
                    {
                        warning("@DNR2189");
                    }
                    ret = true;
                    break;
    
                case DNRCustRequisitionLevel::Required :
                    if (_showMsg)
                    {
                        error("@DNR2190");
                    }
                    break;
    
                default:
                    ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVvalidateWrite</Name>
				<Source><![CDATA[
    public boolean INVvalidateWrite()
    {
        boolean ret = true;
    
        //if (this.QuotationType == QuotationType::RORRental
        //&& !this.INVInvoiceProfileId)
        //&& (!RORParameters::find().INVallowBlankInvoiceProfile))
        //{
        //    ret = checkFailed("@DNR6235");
        //}
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckProjId</Name>
				<Source><![CDATA[
    public boolean RORCheckProjId()
    {
        boolean         ret = true;
        RORVenueTable   venueTable;
    
        switch (this.QuotationType)
        {
            case QuotationType::RORProjRental:
                if (this.ProjIdRef)
                {
                    venueTable = RORVenueTable::find(this.RORVenueCode);
    
                    if (venueTable.WPPProjId && venueTable.WPPProjId != this.ProjIdRef)
                    {
                        ret = checkFailed(strFmt("@DNR10074",
                            enum2str(this.QuotationType),
                            this.ProjIdRef,
                            venueTable.WPPProjId));
                    }
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORcontactPersonNameOperator</Name>
				<Source><![CDATA[
    display ContactPersonName RORcontactPersonNameOperator()
    {
        return ContactPerson::name(this.RORContactPersonIdOperator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayLastQuotationInspection</Name>
				<Source><![CDATA[
    display QuotationIdBase RORdisplayLastQuotationInspection()
    {
        return this.type().RORlastQuotationInspection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayLastQuotationInspectionDate</Name>
				<Source><![CDATA[
    display TransDate RORdisplayLastQuotationInspectionDate()
    {
        CustQuotationConfirmSalesLink   custQuotationConfirmSalesLink;
        CustQuotationJour               custQuotationJour;
    
        select maxof(QuotationDate) from custQuotationConfirmSalesLink
        where custQuotationConfirmSalesLink.OrigQuotationId == this.QuotationId
            exists join custQuotationJour
            where custQuotationJour.QuotationId == custQuotationConfirmSalesLink.origQuotationId
            &&    custQuotationJour.BOBRentalSubStatus == BOBRentalSubStatus::QuotationInspected;
    
        return custQuotationConfirmSalesLink.quotationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROReditContactPersonNameOperator</Name>
				<Source><![CDATA[
    static edit ContactPersonName ROReditContactPersonNameOperator(SalesQuotationTable _hostObject, boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        DirPartyTable       partyTable;
        ContactPersonId     contactPersonId;
    
        if (_set)
        {
            if (name)
            {
                contactPersonId = _hostObject.RORContactPersonIdOperator;
                contactPerson   = ContactPerson::find(_name);
    
                _hostObject.RORContactPersonIdOperator = contactPerson.ContactPersonId;
    
                if (_hostObject.RORContactPersonIdOperator)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    select ContactPersonId from contactPerson
                    where contactPerson.CustAccount == _hostObject.CustAccount
                        join Name from partyTable
                        where partyTable.RecId == contactPerson.Party
                        &&    partyTable.Name like name;
    
                    if (contactPerson)
                    {
                        _hostObject.RORContactPersonIdOperator = contactPerson.ContactPersonId;
                        name                            = partyTable.Name;
                    }
                }
                if (contactPersonId != _hostObject.RORContactPersonIdOperator)
                {
                    if (_hostObject.checkContactPerson())
                    {
                        _hostObject.initFromContactInfo();
                        if (FormDataUtil::getFormDataSource(_hostObject))
                        {
                            FormDataUtil::getFormDataSource(_hostObject).refresh();
                        }
                    }
                    else
                    {
                        _hostObject.RORContactPersonIdOperator = contactPersonId;
                    }
    
                }
            }
            else
            {
                _hostObject.RORContactPersonIdOperator = '';
            }
        }
        else
        {
            name = _hostObject.RORcontactPersonNameOperator();
        }
    
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromCustTable</Name>
				<Source><![CDATA[
    private void RORInitFromCustTable(CustTable _custTable)
    {
        RORCalendarId       calendarId;
        DNRWorkerDefaults   workerDefaults = DNRWorkerDefaults::findByUserId();
    
        if (this.QuotationType == QuotationType::RORRental || this.QuotationType == QuotationType::RORProjRental)
        {
            if(workerDefaults.InventLocationId)
            {
                this.InventLocationId = workerDefaults.InventLocationId;
            }
        }
        else if(workerDefaults.RORInventJournalWarehouse)
        {
            this.InventLocationId = workerDefaults.RORInventJournalWarehouse;
        }

        if(workerDefaults.SalesPoolId)
        {
            this.SalesPoolId = workerDefaults.SalesPoolId;
        }
    
        if (this.InventLocationId)
        {
            this.InventSiteId = InventLocation::find(this.InventLocationId).InventSiteId;
        }
    
        this.INVInvoiceProfileId = _custTable.INVInvoiceProfileId;
        this.RORPriceTimeUnit    = _custTable.RORPriceTimeUnit;
    
        calendarId = _custTable.DNRRentalCalendarId;
    
        if (calendarId
        &&  calendarId != this.DNRCalendarId)
        {
            this.DNRCalendarId = calendarId;
            this.RORRentalDateTimesHost::checkUpdateRentalDates(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromInventLocation</Name>
				<Source><![CDATA[
    private void RORInitFromInventLocation(InventLocationId _inventLocationId = this.InventLocationId)
    {
        InventLocation inventLocation;
        InventLocationId origWarehouse = this.orig().InventLocationId;
    
        if (!origWarehouse && _inventLocationId)
        {
            inventLocation = InventLocation::find(_inventLocationId);
    
            if(inventLocation.RORNumberSequenceGroup)
            {
                this.NumberSequenceGroup = inventLocation.RORNumberSequenceGroup;
            }
    
            if(inventLocation.RORVATNum)
            {
                this.VATNum = inventLocation.RORVATNum;
            }
        }
        else if (origWarehouse)
        {
            inventLocation = InventLocation::find(origWareHouse);
    
            if (inventLocation.RORNumberSequenceGroup == this.NumberSequenceGroup)
            {
                this.NumberSequenceGroup = (_inventLocationId ? InventLocation::find(_inventLocationId).RORNumberSequenceGroup : '');
            }
    
            if (inventLocation.RORVATNum == this.VATNum)
            {
                this.VATNum = (_inventLocationId ? InventLocation::find(_inventLocationId).RORVATNum : '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitFromSalesQuotationTable</Name>
				<Source><![CDATA[
    private void RORinitFromSalesQuotationTable(SalesQuotationTable      _salesQuotationTable)
    {
        this.RORVenueCode               = _salesQuotationTable.RORVenueCode;
        this.RORContactPersonIdOperator = _salesQuotationTable.RORContactPersonIdOperator;
        this.INVInvoiceProfileId        = _salesQuotationTable.INVInvoiceProfileId;
        this.RORPriceTimeUnit           = _salesQuotationTable.RORPriceTimeUnit;
        this.DNRCalendarId              = _salesQuotationTable.DNRCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromSmmBusRelTable</Name>
				<Source><![CDATA[
    private void RORInitFromSmmBusRelTable(smmBusRelTable _smmBusRelTable)
    {
        this.INVInvoiceProfileId    = _smmBusRelTable.INVInvoiceProfileId;
        this.DNRCalendarId          = _smmBusRelTable.DNRRentalCalendarId;
        this.RORPriceTimeUnit       = _smmBusRelTable.RORPriceTimeUnit;
    
        if (this.QuotationType == QuotationType::RORRental)
        {
            this.InventLocationId = DNRWorkerDefaults::findByUserId().InventLocationId;
        }
        else
        {
            this.InventLocationId = DNRWorkerDefaults::findByUserId().RORInventJournalWarehouse;
        }
    
        this.RORInitFromInventLocation();
    
        if (this.InventLocationId)
        {
            this.InventSiteId = InventLocation::find(this.InventLocationId).InventSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitFromVenueTable</Name>
				<Source><![CDATA[
    public void RORinitFromVenueTable(RORVenueTable _venueTable)
    {
        LogisticsEntityPostalAddressView    addressView;
    
        select firstonly PostalAddress from addressView
        where addressView.IsPrimary == NoYes::Yes
        &&    addressView.EntityType == LogisticsLocationEntityType::RORVenue
        &&    addressView.Entity     == _venueTable.RecId;
    
        this.DeliveryName          = _venueTable.Name;
        this.DeliveryPostalAddress = addressView.PostalAddress;
        this.AddressRefRecId       = _venueTable.RecId;
        this.AddressRefTableId     = _venueTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORJumpRefContactPersonId</Name>
				<Source><![CDATA[
    public void RORJumpRefContactPersonId()
    {
        Args        args;
        FormRun     formRun;
    
        args = new Args(formStr(smmContactPerson));
    
        args.record(this);
        args.parmEnumType(enumNum(NoYes));
        args.parmEnum(NoYes::Yes); // It's a Go To Main Table call
    
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLineBuffer</Name>
				<Source><![CDATA[
    public SalesQuotationLine RORLineBuffer()
    {
        SalesQuotationLine salesQuotationLine;
        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORmodifiedField</Name>
				<Source><![CDATA[
    private void RORmodifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable, RORVenueCode):
                this.RORinitFromVenueTable(RORVenueTable::find(this.RORVenueCode));
                break;
    
            case fieldNum(SalesQuotationTable, DNRCalendarId):
                // Check dates against calendar.
                // If this is the first time entering a calendar then auto-update dates when blocked
                this.RORRentalDateTimesHost::checkUpdateRentalDates(!this.orig().DNRCalendarId);
                break;
    
            case fieldNum(SalesQuotationTable, InventLocationId):
                this.RORInitFromInventLocation();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSalesTable_RentalFromProj</Name>
				<Source><![CDATA[
    public SalesTable RORSalesTable_RentalFromProj(boolean _update = false)
    {
        SalesTable  salesTable;
        ;
    
        if (this.ProjIdRef && this.CustAccount)
        {
            salesTable.selectForUpdate(_update);
    
            select firstonly salesTable
                where salesTable.ProjId         == this.ProjIdRef      &&
                      salesTable.CustAccount    == this.CustAccount    &&
                      salesTable.InvoiceAccount == this.InvoiceAccount &&
                      salesTable.CurrencyCode   == this.CurrencyCode   &&
                      salesTable.SalesType      == SalesType::RORRental;
        }
    
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORsmmBusRelTable</Name>
				<Source><![CDATA[
    public smmBusRelTable RORsmmBusRelTable()
    {
        return smmBusRelTable::find(this.BusRelAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORvalidateWrite</Name>
				<Source><![CDATA[
    private boolean RORvalidateWrite()
    {
        boolean ret = true;
    
        if (this.QuotationType == QuotationType::RORRental)
        {
            if (!this.DNRCalendarId)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(SalesQuotationTable), fieldNum(SalesQuotationTable, DNRCalendarId))));
            }
    
            if (!this.RORPriceTimeUnit)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(SalesQuotationTable), fieldNum(SalesQuotationTable, RORPriceTimeUnit))));
            }
        }
    
        // Automatically checked
        //if (!this.RORVenueCode
        //&& (this.QuotationType == QuotationType::RORProjRental || this.QuotationType == QuotationType::RORRental)
        //&&  RORParameters::find().isWorkLocationMandatory)
        //{
        //    ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(SalesQuotationTable), fieldNum(SalesQuotationTable, RORVenueCode))));
        //}
    
        if (this.QuotationType != QuotationType::RORRental
         && this.QuotationType != QuotationType::RORProjRental
         && !this.SalesPoolId)
        {
            // SalesPoolId name must be filled in.
            ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(SalesQuotationTable), fieldNum(SalesQuotationTable, SalesPoolId))));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayHeaderOnRentalDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    display ROROnRentDateTime RORdisplayHeaderOnRentalDateTime()
    {
        RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

        return rentalDateTimes.getOnRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayHeaderOffRentalDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    display ROROffRentDateTime RORdisplayHeaderOffRentalDateTime()
    {
        RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

        return rentalDateTimes.getOffRentDateTime(false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayHeaderExpOffRentalDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    display RORExpectedOffRentDateTime RORdisplayHeaderExpOffRentalDateTime()
    {
        RORRentalDateTimes rentalDateTimes = this.RORRentalDateTimesHost::rentalDateTimes();

        return rentalDateTimes.getOffRentDateTime();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>