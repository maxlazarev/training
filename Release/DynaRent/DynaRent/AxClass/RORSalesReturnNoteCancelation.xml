<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSalesReturnNoteCancelation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORSalesReturnNoteCancelation
{
    SysQueryRun             chooseLines;
    CustRORReturnNoteJour   callerTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the chooseLines query.
    /// </summary>
    private void initQueryBuild()
    {
        chooseLines = new SysQueryRun(this.queryName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    public CustRORReturnNoteJour parmCallerTable(CustRORReturnNoteJour _callerTable = callerTable)
    {
        if (!prmisDefault(_callerTable))
        {
            callerTable = _callerTable;
        }
    
        return callerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    private void postInventory()
    {
        // don't do anything
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    private str queryName()
    {
        return queryStr(SalesUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SalesLine               salesLine;
        CustRORReturnNoteTrans  returnNoteTrans;
    
        boolean updateSalesLine;
        boolean updateReturnNoteTrans;
        ;
    
        this.updateQueryBuildOnCancelation();
    
        ttsBegin;
    
        while (chooseLines.next())
        {
            updateSalesLine = false;
            updateReturnNoteTrans = false;
    
            if (chooseLines.changed(tableNum(SalesLine)))
            {
                salesLine = chooseLines.get(tableNum(SalesLine));
                updateSalesLine = true;
            }
    
            if (chooseLines.changed(tableNum(CustRORReturnNoteTrans)))
            {
                returnNoteTrans = chooseLines.get(tableNum(CustRORReturnNoteTrans));
                updateReturnNoteTrans = true;
            }
    
            if (updateSalesLine)
            {
                this.updateSalesLineQuantities(salesLine, returnNoteTrans);
                this.postInventory();
            }
    
            if (updateReturnNoteTrans)
            {
                this.updateCustRORRetirnTransQuantities(returnNoteTrans);
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustRORRetirnTransQuantities</Name>
				<Source><![CDATA[
    public void updateCustRORRetirnTransQuantities(CustRORReturnNoteTrans _returnNoteTrans)
    {
        _returnNoteTrans.selectForUpdate(true);
    
        //_returnNoteTrans.Remain         += _returnNoteTrans.Qty;
        //_returnNoteTrans.RemainInvent   += _returnNoteTrans.InventQty;
    
        _returnNoteTrans.Qty = 0;
        _returnNoteTrans.InventQty = 0;
    
        _returnNoteTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildOnCancelation</Name>
				<Source><![CDATA[
    public void updateQueryBuildOnCancelation()
    {
        #Query
        Query                query;
        QueryBuildDataSource qbds;
        CustRORReturnNoteJour  custRORReturnNoteJour = this.parmCallerTable() as CustRORReturnNoteJour;
    
        this.initQueryBuild();
    
        query = chooseLines.query();
        query.interactive(false);
        chooseLines.literals(#queryForcePlaceholders);
    
        qbds = query.dataSourceTable(tableNum(SalesLine)).addDataSource(tableNum(CustRORReturnNoteTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(SalesLine,InventTransId), fieldNum(CustRORReturnNoteTrans, InventTransId));
        qbds.addRange(fieldNum(CustRORReturnNoteTrans, SalesId)).value(queryValue(custRORReturnNoteJour.SalesId));
        qbds.addRange(fieldNum(CustRORReturnNoteTrans, ReturnNoteId)).value(queryValue(custRORReturnNoteJour.ReturnNoteId));
        qbds.addRange(fieldNum(CustRORReturnNoteTrans, DeliveryDate)).value(queryValue(custRORReturnNoteJour.DeliveryDate));
        qbds.addRange(fieldNum(CustRORReturnNoteTrans, Qty)).value(queryValue('> 0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineQuantities</Name>
				<Source><![CDATA[
    public void updateSalesLineQuantities(SalesLine _salesLine, CustRORReturnNoteTrans _returnNoteTrans)
    {
        _salesLine.selectForUpdate(true);
    
        _salesLine.RORRemainSalesReturn  += _returnNoteTrans.Qty;
        _salesLine.RORRemainInventReturn += _returnNoteTrans.InventQty;
        _salesLine.RORSalesReturned      -= _returnNoteTrans.Qty;
    
        _salesLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static server RORSalesReturnNoteCancelation construct()
    {
        return new RORSalesReturnNoteCancelation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RORSalesReturnNoteCancelation    returnNoteCancelation;
        ;
    
        if (_args.caller() && _args.record() && _args.record().TableId == tableNum(CustRORReturnNoteJour))
        {
            returnNoteCancelation = RORSalesReturnNoteCancelation::construct();
    
            returnNoteCancelation.parmCallerTable(_args.record());
            returnNoteCancelation.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>