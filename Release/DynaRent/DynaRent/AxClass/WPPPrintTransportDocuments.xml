<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPPrintTransportDocuments</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPPrintTransportDocuments extends RunBase
{
    List                        workOrderLineRecIdList;
    Range                       workOrderLineRecId;

    NoYes                       printRouteList;
    NoYes                       printTransportNote;

    SRSPrintDestinationSettings printDestinationSettings;
    SRSPrintDestinationSettings tempPrintDestinationSettings;

    Args                        callerArgs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
    
        dialog = Dialog::newFormnameRunbase(formStr(WPPPrintTransportDocuments), this);
    
        dialog = this.dialogInternal(dialog);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret;
    
        ret = super();
    
        this.readSettings();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerArgs</Name>
				<Source><![CDATA[
    public Args parmCallerArgs(Args _callerArgs = callerArgs)
    {
        callerArgs = _callerArgs;
    
        return callerArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintRouteList</Name>
				<Source><![CDATA[
    public NoYes parmPrintRouteList(NoYes _printRouteList = printRouteList)
    {
        printRouteList = _printRouteList;
    
        return printRouteList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintTransportNote</Name>
				<Source><![CDATA[
    public NoYes parmPrintTransportNote(NoYes _printTransportNote = printTransportNote)
    {
        printTransportNote = _printTransportNote;
    
        return printTransportNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkOrderLineRecIdList</Name>
				<Source><![CDATA[
    public List parmWorkOrderLineRecIdList(List _workOrderLineRecIdList = workOrderLineRecIdList)
    {
        workOrderLineRecIdList = _workOrderLineRecIdList;
    
        return workOrderLineRecIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>printDestinationSettings</c> property.
    /// </summary>
    /// <param name="value">
    ///    The new value of the <c>printDestinationSettings</c> property; optional.
    /// </param>
    /// <returns>
    ///    The current <c>SRSPrintDestinationSettings</c> property.
    /// </returns>
    public SRSPrintDestinationSettings printDestinationSettings(SRSPrintDestinationSettings value = printDestinationSettings)
    {
        printDestinationSettings = value;
    
        if (printDestinationSettings == null)
        {
            // create and initialize the default SRSPrintDestinationSettings object
            printDestinationSettings = new SRSPrintDestinationSettings();
        }
    
        return printDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads saved print destination settings that are used to display the report.
    /// </summary>
    public void readPrintDestinationSettings()
    {
        SRSReportPrintDestinationSettings printDestinationSettingsTable;
        SRSPrintDestinationSettings printDestSettings;
    
        select firstonly printDestinationSettingsTable
        where printDestinationSettingsTable.UserId     == curUserId()
        &&    printDestinationSettingsTable.ReportName == this.name();
    
        if (printDestinationSettingsTable != null
        &&  printDestinationSettingsTable.PrintDestinationSettings != conNull())
        {
            printDestSettings = new SRSPrintDestinationSettings(printDestinationSettingsTable.PrintDestinationSettings);
            if (printDestSettings != null)
            {
                this.printDestinationSettings(printDestSettings);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the settings saved for this report.
    /// </summary>
    public void readSettings()
    {
        this.readPrintDestinationSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        WPPTransportDocumentsController reportRunController;
        WPPTransportRouteListContract   transportRouteListContract;
    
        transportRouteListContract = new WPPTransportRouteListContract();
        transportRouteListContract.parmWorkOrderLineRecIdList(workOrderLineRecIdList);
    
        if (printRouteList)
        {
            reportRunController = new WPPTransportDocumentsController();
            reportRunController.parmShowDialog(false);
            reportRunController.parmLoadFromSysLastValue(false);
            reportRunController.parmReportName('WPPTransportRouteList.RouteList');
            reportRunController.parmReportRun().parmReportContract().parmRdpContract(transportRouteListContract);
            reportRunController.parmReportRun().parmReportContract().parmPrintSettings(printDestinationSettings);
            reportRunController.parmArgs(callerArgs);
            reportRunController.parmDialogCaption("@DNR1536");
            reportRunController.runReport();
        }
    
        if (printTransportNote)
        {
            reportRunController = new WPPTransportDocumentsController();
            reportRunController.parmShowDialog(false);
            reportRunController.parmLoadFromSysLastValue(false);
            reportRunController.parmReportName('WPPTransportNote.TransportNote');
            reportRunController.parmReportRun().parmReportContract().parmRdpContract(transportRouteListContract);
            reportRunController.parmReportRun().parmReportContract().parmPrintSettings(printDestinationSettings);
            reportRunController.parmArgs(callerArgs);
            reportRunController.parmDialogCaption("@DNR260");
            reportRunController.runReport();
        }
    
        this.saveSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves print destination settings that are used to display the report.
    /// </summary>
    public void savePrintDestinationSettings()
    {
        // perform the save on the server to minimize RPC calls
        WPPPrintTransportDocuments::savePrintDestinationSettingsOnServer(this.name(), this.printDestinationSettings());
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the current values that are used to display the report
    /// </summary>
    public void saveSettings()
    {
        this.savePrintDestinationSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tempPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>tempPrintDestinationSettings</c> property. This property is used
    ///    by the <c>SRSReportRunForm</c> form.
    /// </summary>
    /// <param name="value">
    ///    The new value of the <c>tempPrintDestinationSettings</c> property; optional.
    /// </param>
    /// <returns>
    ///    The current value of the <c>tempPrintDestinationSettings</c> property.
    /// </returns>
    public SRSPrintDestinationSettings tempPrintDestinationSettings(SRSPrintDestinationSettings value = tempPrintDestinationSettings)
    {
        container c;
        tempPrintDestinationSettings = value;
    
        if (tempPrintDestinationSettings == null)
        {
            // make a copy of the current printDestinationSettings
            c = this.printDestinationSettings().pack();
            tempPrintDestinationSettings = new SRSPrintDestinationSettings(c);
        }
    
        return tempPrintDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPPrintTransportDocuments construct()
    {
        return new WPPPrintTransportDocuments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WPPPrintTransportDocuments  printTransportDocuments;
        List                        workOrderLineRecIdList;
    
        workOrderLineRecIdList = _args.parmObject();
    
        printTransportDocuments = WPPPrintTransportDocuments::construct();
        printTransportDocuments.init();
        printTransportDocuments.parmWorkOrderLineRecIdList(workOrderLineRecIdList);
        printTransportDocuments.parmCallerArgs(_args);
    
        if (printTransportDocuments.prompt())
        {
            printTransportDocuments.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePrintDestinationSettingsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves print destination settings that are used to display the report.
    /// </summary>
    /// <param name="_className">
    ///    The name of the class.
    /// </param>
    /// <param name="_printDestinationSettings">
    ///    A <c>SRSPrintDestinationSettings</c> object that contains the printer settings.
    /// </param>
    private static server void savePrintDestinationSettingsOnServer(ClassDescription            _className,
                                                                    SRSPrintDestinationSettings _printDestinationSettings)
    {
        SRSReportPrintDestinationSettings printDestinationSettingsTable;
    
        if (strLen(_className) == 0)
        {
            return;
        }
    
        ttsBegin;
        select forupdate printDestinationSettingsTable
        where printDestinationSettingsTable.UserId == curUserId()
        &&    printDestinationSettingsTable.ReportName == _className;
    
        if (printDestinationSettingsTable != null)
        {
            printDestinationSettingsTable.PrintDestinationSettings = _printDestinationSettings.pack();
            printDestinationSettingsTable.update();
        }
        else
        {
            printDestinationSettingsTable.UserId = curUserId();
            printDestinationSettingsTable.ReportName = _className;
            printDestinationSettingsTable.PrintDestinationSettings = _printDestinationSettings.pack();
            printDestinationSettingsTable.insert();
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>