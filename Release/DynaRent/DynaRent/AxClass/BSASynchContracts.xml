<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BSASynchContracts</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BSASynchContracts extends RunBaseBatch
{
    // Packed
    SysQueryRun     queryrun;

    Common          callerRecord;
    FormDataSource  callerFormDataSource;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when a <c>SysLastValue</c> record cannot be found when the code calls the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        this.initQuery();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        BSAContractTable    contractTable;
        BOBObjectTable      objectTable;
    
        Query               query = new Query();
        ;
    
        query.addDataSource(tablenum(BSAContractTable));
        query.dataSourceTable(tablenum(BSAContractTable)).addRange(fieldNum(BSAContractTable, ContractId));
        query.dataSourceTable(tablenum(BSAContractTable)).addRange(fieldNum(BSAContractTable, BusRelType));
        query.dataSourceTable(tablenum(BSAContractTable)).addRange(fieldNum(BSAContractTable, BusRelRelation));
        query.dataSourceTable(tablenum(BSAContractTable)).addRange(fieldNum(BSAContractTable, FromDate));
        query.dataSourceTable(tablenum(BSAContractTable)).addRange(fieldNum(BSAContractTable, ToDate));
        query.dataSourceTable(tablenum(BSAContractTable)).addRange(fieldNum(BSAContractTable, Status));
        query.dataSourceTable(tablenum(BSAContractTable)).addRange(fieldNum(BSAContractTable, CurrencyCode));
    
        switch (callerRecord.TableId)
        {
            case tableNum(BSAContractTable):
                contractTable = callerRecord;
                query.dataSourceTable(tablenum(BSAContractTable)).findRange(fieldNum(BSAContractTable, ContractId)).value(queryValue(contractTable.ContractId));
                break;
    
            case tableNum(BOBObjectTable):
                objectTable     = callerRecord;
                contractTable = objectTable.BSADisplayActiveContract();
                query.dataSourceTable(tablenum(BSAContractTable)).findRange(fieldNum(BSAContractTable, ContractId)).value(queryValue(contractTable.ContractId));
                break;
        }
    
        queryrun = new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,queryrun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerRecord</Name>
				<Source><![CDATA[
    public void parmCallerRecord(Common _common)
    {
        callerRecord            = _common;
        callerFormDataSource    = FormDataUtil::getFormDataSource(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryrun</Name>
				<Source><![CDATA[
    QueryRun queryrun()
    {
        return queryrun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSynchronised</Name>
				<Source><![CDATA[
    private void resetSynchronised(BSAContractId _contractId, BSAContractLineTierType _type)
    {
        BSAContractTable contractTable;
        ;
    
        switch(_type)
        {
            case BSAContractLineTierType::MaintPlans :
                update_recordSet contractTable
                setting IsSynchronized_MaintPlans = NoYes::Yes
                where contractTable.ContractId == _contractId;
                break;
    
            case BSAContractLineTierType::Subscription :
                update_recordSet contractTable
                setting IsSynchronized_Subscription = NoYes::Yes
                where contractTable.ContractId == _contractId;
                break;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
    
        BSAContractTable    contractTable;
    
        try
        {
            while (queryRun.next())
            {
                ttsBegin;
    
                contractTable = queryRun.get(tableNum(BSAContractTable));
    
                if (this.updateMaintPlans(contractTable))
                {
                    this.resetSynchronised(contractTable.ContractId, BSAContractLineTierType::MaintPlans);
                }
    
                if (this.updateSubscriptions(contractTable))
                {
                    this.resetSynchronised(contractTable.ContractId, BSAContractLineTierType::Subscription);
                }
    
                ttsCommit;
            }
    
            if (callerFormDataSource)
            {
                callerFormDataSource.reread();
                callerFormDataSource.refresh();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;
    
        if (callerRecord)
        {
            this.initQuery();
        }
        else
        {
            switch (version)
            {
                case #CurrentVersion:
                    [version,queryCon] = packedClass;
                    if (SysQuery::isPackedOk(queryCon))
                        queryrun = new SysQueryRun(queryCon);
                    else
                        this.initQuery();
                    break;
                default:
                    return false;
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaintPlans</Name>
				<Source><![CDATA[
    private boolean updateMaintPlans(BSAContractTable _contractTable)
    {
        BSATmpContractLineMaintPlan  tmpContractLineMaintPlan;
    
        BOBDefaultMaintenancePlan   defaultMaint;
        BOBObjectMaintenancePlan    busObjMaint;
        BOBMeterTable               meterTable;
        NoYes                       copyMaintenancePlanFromProduct = BSAParameters::find().CopyMaintPlanFromItem;
    
        if (copyMaintenancePlanFromProduct)
        {
            return true;
        }
    
        tmpContractLineMaintPlan = BSAContractData::getApplicableMaintPlans(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), (_contractTable.BusRelType == TableGroupAll::Table ? _contractTable.BusRelRelation : ''));
    
        while select IsOverridden, InheritedSource, AgreementType, IncludePlan, AgreementRelation, BOBMaintenancePlanCode from tmpContractLineMaintPlan
        where (tmpContractLineMaintPlan.IsOverridden == NoYes::Yes || tmpContractLineMaintPlan.InheritedSource)
        &&     tmpContractLineMaintPlan.AgreementType  == BSAAgreementType::ObjectId
        &&     tmpContractLineMaintPlan.IncludePlan    == NoYes::Yes
        {
            select count(RecId) from meterTable
            where meterTable.ObjectId == tmpContractLineMaintPlan.AgreementRelation;
    
            defaultMaint = BOBDefaultMaintenancePlan::find(tmpContractLineMaintPlan.BOBMaintenancePlanCode);
    
            ttsBegin;
    
            busObjMaint = this.findObjectMaintenancePlan(tmpContractLineMaintPlan, true);
    
            busObjMaint.ObjectId = tmpContractLineMaintPlan.AgreementRelation;
            busObjMaint.initFromDefaultMaintenancePlan(defaultMaint);
    
            if ((defaultMaint.PlanType == BOBMaintenancePlanType::ConsumptionBased || defaultMaint.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased) &&  meterTable.RecId == 1)
            {
                busObjMaint.MeterTableRecId = BOBMeterTable::findByObjectId(tmpContractLineMaintPlan.AgreementRelation).RecId;
            }
    
            if (busObjMaint.RecId)
            {
                busObjMaint.update();
            }
            else
            {
                busObjMaint.NextConsumption = defaultMaint.RecurrenceValue;
                busObjMaint.insert();
            }
    
            ttsCommit;
        }
    
        //Deactivate orphaned maintplans
        delete_from busObjMaint
            notexists join tmpContractLineMaintPlan
            where   tmpContractLineMaintPlan.AgreementType  == BSAAgreementType::ObjectId
            &&     (tmpContractLineMaintPlan.IsOverridden   == NoYes::Yes || tmpContractLineMaintPlan.InheritedSource)
            &&      tmpContractLineMaintPlan.IncludePlan    == NoYes::Yes
                join TableId from defaultMaint
                where defaultMaint.PlanCode == tmpContractLineMaintPlan.BOBMaintenancePlanCode
                &&    defaultMaint.RecId    == busObjMaint.DefaultPlanRecId;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjectMaintenancePlan</Name>
				<Source><![CDATA[
    protected BOBObjectMaintenancePlan findObjectMaintenancePlan(BSATmpContractLineMaintPlan    _tmpContractLineMaintPlan, boolean _forupdate = false)
    {
        BOBObjectMaintenancePlan    busObjMaint;
        BOBDefaultMaintenancePlan   defaultMaitenancePlan;

        busObjMaint.selectForUpdate(_forupdate);

        if(_tmpContractLineMaintPlan.AgreementRelation && _tmpContractLineMaintPlan.BOBMaintenancePlanCode)
        {
            select firstOnly busObjMaint
            where busObjMaint.ObjectId          == _tmpContractLineMaintPlan.AgreementRelation
                exists join defaultMaitenancePlan
                where defaultMaitenancePlan.RecId == busObjMaint.DefaultPlanRecId
                &&    defaultMaitenancePlan.PlanCode == _tmpContractLineMaintPlan.BOBMaintenancePlanCode;
        }

        return busObjMaint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubscriptions</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    private boolean updateSubscriptions(BSAContractTable _contractTable)
    {
        SMASubscriptionTable            subscriptionTable;
        SMASalesPriceSubscription       salesPriceSubscription;
        BSATmpContractLineSubscription  tmpContractLineSubscription;
        NumberSeq                       numSeq = NumberSeq::newGetNum(BSAParameters::numRefSMASubscriptionId(), true, true);
        boolean                         create;
    
        #localmacro.InitSubscription
            subscriptionTable.BSAContractId         = _contractTable.ContractId;
            subscriptionTable.BSAContractLine       = tmpContractLineSubscription.ContractLineSourcePhysical;
            subscriptionTable.BSAAgreementType      = tmpContractLineSubscription.AgreementType;
            subscriptionTable.BSAAgreementRelation  = tmpContractLineSubscription.AgreementRelation;
            subscriptionTable.Name                  = tmpContractLineSubscription.Name;
            subscriptionTable.GroupId               = tmpContractLineSubscription.SMASubscriptionGroupId;
            subscriptionTable.ProjId                = _contractTable.ProjId;
            subscriptionTable.ProjCategoryId        = tmpContractLineSubscription.ProjCategoryId;
            subscriptionTable.BasePrice             = tmpContractLineSubscription.SMABasePrice;
            subscriptionTable.StartDate             = tmpContractLineSubscription.SMAStartDate;
            subscriptionTable.LatestEnddate         = tmpContractLineSubscription.SMAEndDate;
            subscriptionTable.CurrencyCode          = _contractTable.CurrencyCode;
            subscriptionTable.BSAInvoiceGroupId     = tmpContractLineSubscription.InvoiceGroupId;
            subscriptionTable.BSAIsAutoCreated      = NoYes::Yes;
        #endmacro
    
        tmpContractLineSubscription = BSAContractData::getApplicableSubscription(_contractTable);
    
        while select tmpContractLineSubscription
        where (tmpContractLineSubscription.IsOverridden == NoYes::Yes && tmpContractLineSubscription.FlatFee)
        ||     tmpContractLineSubscription.InheritedSource
        {
            ttsBegin;
    
            //Update subscription
            select firstonly forUpdate subscriptionTable
            where   subscriptionTable.BSAContractLine       == tmpContractLineSubscription.ContractLineSourcePhysical
            &&      subscriptionTable.BSAAgreementType      == tmpContractLineSubscription.AgreementType
            &&      subscriptionTable.BSAAgreementRelation  == tmpContractLineSubscription.AgreementRelation;
    
            subscriptionTable.initValue();
            #InitSubscription
    
            switch(_contractTable.Status)
            {
                case BSAContractStatus::Confirmed:
                    create = true;
                    subscriptionTable.Active = tmpContractLineSubscription.Active;
                    break;
    
                case BSAContractStatus::Closed:     //Fall through
                case BSAContractStatus::Sent:       //Fall through
                case BSAContractStatus::Canceled:
                    create = false;
                    if (subscriptionTable.RecId)    //Check RecId, as we do not want to create InActive subscriptions
                    {
                        subscriptionTable.Active = NoYes::No;
                    }
                    break;
    
                case BSAContractStatus::Created:    //Fall through
                    create = true;
                    if (subscriptionTable.RecId)    //Check RecId, as we do not want to create InActive subscriptions
                    {
                        subscriptionTable.Active = NoYes::No;
                    }
                    break;
            }
    
            if (subscriptionTable.RecId)
            {
                subscriptionTable.update();
            }
            else
            {
                if (create)
                {
                    subscriptionTable.SubscriptionId    = numSeq.num();
                    subscriptionTable.insert();
                }
            }
    
            //Update subscription sales price
            select forUpdate firstonly salesPriceSubscription
            where salesPriceSubscription.SMASubscriptionId == subscriptionTable.SubscriptionId;
    
            salesPriceSubscription.ProjId            = subscriptionTable.ProjId;
            salesPriceSubscription.ProjPeriodId      = SMASubscriptionGroup::find(SMASubscriptionTable::find(subscriptionTable.SubscriptionId).GroupId).InvoicePeriodcode;
            salesPriceSubscription.CurrencyCode      = subscriptionTable.CurrencyCode;
            salesPriceSubscription.CategoryId        = subscriptionTable.ProjCategoryId;            
            salesPriceSubscription.smaSubscriptionId = subscriptionTable.SubscriptionId;
            salesPriceSubscription.SalesPrice       = subscriptionTable.BasePrice;
            salesPriceSubscription.ValidFrom        = _contractTable.FromDate;
    
            if (salesPriceSubscription.RecId)
            {
                salesPriceSubscription.update();
            }
            else
            {
                if (create)
                {
                    salesPriceSubscription.insert();
                }
            }
    
            ttsCommit;
    
            subscriptionTable.clear();
        }
    
        //Deactivate orphaned subscriptions
        update_recordSet subscriptionTable
        setting Active = NoYes::No
        where subscriptionTable.BSAContractId == _contractTable.ContractId
            notexists join tmpContractLineSubscription
            where   subscriptionTable.BSAContractLine       == tmpContractLineSubscription.ContractLineSourcePhysical
            &&      subscriptionTable.BSAAgreementType      == tmpContractLineSubscription.AgreementType
            &&      subscriptionTable.BSAAgreementRelation  == tmpContractLineSubscription.AgreementRelation;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static BSASynchContracts construct()
    {
        return new BSASynchContracts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    server static void main(Args _args)
    {
        BSASynchContracts   synchContracts = BSASynchContracts::construct();
    
        if (_args && _args.record())
        {
            synchContracts.parmCallerRecord(_args.record());
            synchContracts.initQuery();
        }
    
        //parmEnum contains NoYes on showing dialog, this gets ignored if no record has been passed
        if ((_args && _args.parmEnum() == NoYes::No) || synchContracts.prompt())
        {
            synchContracts.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchForBOBObjectTable</Name>
				<Source><![CDATA[
    public static void synchForBOBObjectTable(BOBObjectTable _objectTable)
    {
        Args args = new Args();
        ;
    
        args.record(_objectTable);
        BSASynchContracts::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>