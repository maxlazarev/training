<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRMarkupTransTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(MarkupTrans))]
public final class DNRMarkupTransTable_Extension
{
    // extension methods



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FINSetTaxGroup</Name>
				<Source><![CDATA[
    public void FINSetTaxGroup()
    {
        if (!this.FINIgnoreTaxMatrix
        &&   TaxParameters::find().FINCheckTaxMatrix != FINCheckTaxMatrix::Disabled
        &&  (this.TransTableId == tableNum(SalesTable)
        ||   this.TransTableId == tableNum(SalesLine)
        ||   this.TransTableId == tableNum(PurchTable)
        ||   this.TransTableId == tableNum(PurchLine)
        ||   this.TransTableId == tableNum(SalesQuotationTable)
        ||   this.TransTableId == tableNum(SalesQuotationLine)))
        {
            this.TaxGroup = FINTaxMatrix::findTaxGroup(this, this.TaxGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRIsFromRentalOrder</Name>
				<Source><![CDATA[
    public boolean DNRIsFromRentalOrder()
    {
        switch (this.TransTableId)
        {
            case tableNum(SalesTable):
                return SalesTable::findRecId(this.TransRecId).SalesType == SalesType::RORRental;

            case tableNum(SalesLine):
                return SalesLine::findRecId(this.TransRecId).salesTable().SalesType == SalesType::RORRental;

            case tableNum(PurchTable):
                return PurchTable::findRecId(this.TransRecId).PurchaseType == PurchaseType::RORSubRental;

            case tableNum(PurchLine):
                return PurchLine::findRecId(this.TransRecId).purchTable().PurchaseType == PurchaseType::RORSubRental;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRGetAmendmentEventType</Name>
				<Source><![CDATA[
    public DNRAmendmentEventType DNRGetAmendmentEventType()
    {
        DNRAmendmentEventType amendmentEventType;

        switch (this.TransTableId)
        {
            case tableNum(SalesLine):
            case tableNum(PurchLine):
                amendmentEventType = DNRAmendmentEventType::MarkupLine;
                break;
            case tableNum(SalesTable):
            case tableNum(PurchTable):
                amendmentEventType = DNRAmendmentEventType::MarkupHeader;
                break;
        }

        return amendmentEventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(MarkupTrans), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        MarkupTrans hostRecord = _sender as MarkupTrans;

        hostRecord.FINSetTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _updateMiscMatching, boolean _isEditingBlockedByVendorInvoice)
    {
        this.FINSetTaxGroup();

        next update(_updateMiscMatching, _isEditingBlockedByVendorInvoice);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>