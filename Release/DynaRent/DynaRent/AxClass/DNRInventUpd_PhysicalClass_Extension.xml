<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventUpd_PhysicalClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpd_Physical))]
public final class DNRInventUpd_PhysicalClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructForPurchPackingSlip</Name>
				<Source><![CDATA[
    protected static InventUpd_Physical constructForPurchPackingSlip(
        InventMovement                  _inventMovement,
        VendPackingSlipTrans            _vendPackingSlipTrans,
        PackingSlipId                   _packingSlipId,
        VendPackingSlipTransHistory     _previousVendPackingSlipTransHistory,
        InventDimId                     _inventDimIdPhysicalMatched)
    {
        InventUpd_Physical physical = next constructForPurchPackingSlip(_inventMovement, _vendPackingSlipTrans, _packingSlipId, _previousVendPackingSlipTransHistory, _inventDimIdPhysicalMatched);

        Integer transSign = _inventMovement.BOBParmTransSign();

        if (transSign)
        {
            if (!_previousVendPackingSlipTransHistory.RecId)
            {
                physical.parmPhysical(_vendPackingSlipTrans.InventQty * transSign);
                physical.parmPhysicalUnit(_vendPackingSlipTrans.Qty * transSign);
                physical.parmPdsCWPhysical(_vendPackingSlipTrans.PdsCWQty * transSign);
            }
            else
            {
                physical.parmPhysical((_vendPackingSlipTrans.InventQty - _previousVendPackingSlipTransHistory.InventQty) * transSign);
                physical.parmPhysicalUnit((_vendPackingSlipTrans.Qty - _previousVendPackingSlipTransHistory.Qty) * transSign);
            }

            physical.parmRemainPhysical(_vendPackingSlipTrans.RemainInvent * transSign);
            physical.parmRemainPhysicalUnit(_vendPackingSlipTrans.Remain * transSign);
            physical.parmPdsCWRemainPhysical(_vendPackingSlipTrans.PdsCWRemain * transSign);
        }

        if (_inventMovement.projId() && _vendPackingSlipTrans.InventQty < 0
        &&  _inventMovement.inventMovSubType() == InventMovSubType::BOBCompensatingTrans)
        {
            physical.parmProjCostAmountMST(0);
        }

        return physical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSalesPackingSlip</Name>
				<Source><![CDATA[
    protected static InventUpd_Physical constructForSalesPackingSlip(
        InventMovement                  _inventMovement,
        CustPackingSlipTrans            _custPackingSlipTrans,
        PackingSlipId                   _packingSlipId,
        InventPhysicalReduction         _physicalReduction,
        CustPackingSlipTransHistory     _previousCustPackingSlipTransHistory,
        Voucher                         _voucherMatched,
        InventDimId                     _inventDimIdPhysicalMatched)
    {
        InventUpd_Physical physical = next constructForSalesPackingSlip(_inventMovement, _custPackingSlipTrans, _packingSlipId, _physicalReduction,
                                                                        _previousCustPackingSlipTransHistory, _voucherMatched, _inventDimIdPhysicalMatched);

        Integer transSign = _inventMovement.BOBParmTransSign();

        if (transSign)
        {
            if (!_previousCustPackingSlipTransHistory.RecId)
            {
                physical.parmPhysical(-_custPackingSlipTrans.InventQty * transSign);
                physical.parmPhysicalUnit(-_custPackingSlipTrans.Qty * transSign);
                physical.parmPdsCWPhysical(-_custPackingSlipTrans.PdsCWQty * transSign);
            }
            else
            {
                physical.parmPhysical((-_custPackingSlipTrans.InventQty + _previousCustPackingSlipTransHistory.InventQty) * transSign);
                physical.parmPhysicalUnit((-_custPackingSlipTrans.Qty + _previousCustPackingSlipTransHistory.Qty) * transSign);
                physical.parmPdsCWPhysical(-_custPackingSlipTrans.PdsCWQty + _previousCustPackingSlipTransHistory.PdsCWQty * transSign);
            }

            physical.parmRemainPhysical(-_custPackingSlipTrans.RemainInvent * transSign);
            physical.parmRemainPhysicalUnit(-_custPackingSlipTrans.Remain * transSign);
            physical.parmPdsCWRemainPhysical(-_custPackingSlipTrans.PdsCWRemain * transSign);
        }

        return physical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatePhysical</Name>
				<Source><![CDATA[
    protected void initDatePhysical(InventTrans _localBuffer, DatePhysical _datePhysical)
    {
        next initDatePhysical(_localBuffer, _datePhysical);

        _localBuffer.BOBPckSlpUpdDateTime = this.BOBParmFormLetterUpdDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipUpdatePhysicalReduction</Name>
				<Source><![CDATA[
    protected boolean mustSkipUpdatePhysicalReduction(InventTrans _inventTrans)
    {
        boolean ret = next mustSkipUpdatePhysicalReduction(_inventTrans);

        ret = (ret || _inventTrans.BOBIsCompensatingTrans);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesPackingSlip</Name>
				<Source><![CDATA[
    public static InventUpd_Physical newSalesPackingSlip(InventMovement                 _inventMovement,
                                                         CustPackingSlipTrans           _custPackingSlipTrans,
                                                         PackingSlipId                  _packingSlipId,
                                                         InventPhysicalReduction        _physicalReduction,
                                                         CustPackingSlipTransHistory    _previousCustPackingSlipTransHistory,
                                                         Voucher                        _voucherMatched,
                                                         InventDimId                    _inventDimIdPhysicalMatched)
    {
        InventUpd_Physical physical = next newSalesPackingSlip(_inventMovement, _custPackingSlipTrans, _packingSlipId,
                                                               _physicalReduction, _previousCustPackingSlipTransHistory,
                                                               _voucherMatched, _inventDimIdPhysicalMatched);

        if(_inventMovement.inventMovSubType() == InventMovSubType::BOBCompensatingTrans)
        {
            // In case we're dealing with a compensating inventory transaction, it will be reversed using the same process
            // so always allow negative physical inventory. This will not affect the on-hand inventory levels.
            physical.BOBParmIsCompensatingTrans(true);
            physical.parmAllowNegativePhysical(true);
        }
    
        physical.BOBParmFormLetterUpdDateTime(_inventMovement.BOBParmTransDate(), _inventMovement.BOBParmTransTime());

        return physical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchPackingSlip</Name>
				<Source><![CDATA[
    public static InventUpd_Physical newPurchPackingSlip(
        InventMovement                  _inventMovement,
        VendPackingSlipTrans            _vendPackingSlipTrans,
        PackingSlipId                   _packingSlipId,
        VendPackingSlipTransHistory     _previousVendPackingSlipTransHistory,
        InventDimId                     _inventDimIdPhysicalMatched)
    {
        InventUpd_Physical physical = next newPurchPackingSlip(_inventMovement, _vendPackingSlipTrans, _packingSlipId,
                                                               _previousVendPackingSlipTransHistory, _inventDimIdPhysicalMatched);

        physical.BOBParmFormLetterUpdDateTime(_inventMovement.BOBParmTransDate(), _inventMovement.BOBParmTransTime());

        return physical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreDatePhysical</Name>
				<Source><![CDATA[
    protected void restoreDatePhysical(InventTrans _localBuffer, DatePhysical _datePhysical)
    {
        if (_localBuffer.DatePhysical != _datePhysical)
        {
            _localBuffer.BOBPckSlpUpdDateTime = this.BOBParmFormLetterUpdDateTime();
        }

        next restoreDatePhysical(_localBuffer, _datePhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdatingTransPhysicalReturnedReceipt</Name>
				<Source><![CDATA[
    protected boolean skipUpdatingTransPhysicalReturnedReceipt(InventTrans _inventTrans)
    {
        boolean ret = next skipUpdatingTransPhysicalReturnedReceipt(_inventTrans);

        if (_inventTrans.BOBIsCompensatingTrans == NoYes::Yes)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMovement</Name>
				<Source><![CDATA[
    protected void updateMovement()
    {
        if (movement.mustBeRemainControlled()
        && !(movement.parmCompanyCountryRegion().isCountryRegionRU()
            && inventDimCriteria.InventOwnerId_RU)
        && (remainPhysical != movement.remainPhysical() || remainPhysicalUnit != movement.remainPhysicalUnit()))
        {
            movement.RORParmIsPhysicalUpdateClosed(true);
        }

        next updateMovement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhysicalIssue</Name>
				<Source><![CDATA[
    protected void updatePhysicalIssue(LedgerVoucher _ledgerVoucher)
    {
        BOBRentalTransSyncDisposableContext rentalTransSyncContext = BOBRentalTransSyncDisposableContext::current();
        boolean contextCreatedHere = false;

        try
        {
            if (!rentalTransSyncContext)
            {
                rentalTransSyncContext  = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere      = true;
            }

            rentalTransSyncContext.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            using(DNRInventMovementInitInventTransPhysicialDisposableContext initInventTransPhysicalContext =
                  new DNRInventMovementInitInventTransPhysicialDisposableContext())
            {
                initInventTransPhysicalContext.DNRParmInventUpd_Physical(this);
                initInventTransPhysicalContext.DNRParmInventTrans(null);
                initInventTransPhysicalContext.DNRParmMustSetCompensatingTrans(false);

                using(DNRInventTransUpdateSplitDisposableContext invenTransUpdateSplitContext =
                      new DNRInventTransUpdateSplitDisposableContext(BOBInventSplitReason::ProgressStatus, BOBRentalSubStatus::Delivered))
                {
                    next updatePhysicalIssue(_ledgerVoucher);
                }
            }

            rentalTransSyncContext.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                rentalTransSyncContext.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhysicalReceiptTrans</Name>
				<Source><![CDATA[
    protected container updatePhysicalReceiptTrans(
            InventTrans         _inventTrans,
            InventQty           _addQty,
            PdsCWInventQty      _cwAddQty,
            LedgerVoucher       _ledgerVoucher,
            boolean             _disableCacheForBufferCheck,
            set                 _setInventDimId)
    {
        BOBRentalTransSyncDisposableContext context = BOBRentalTransSyncDisposableContext::current();
        boolean     contextCreatedHere = false;
        container   ret;

        try
        {
            _inventTrans.BOBPckSlpUpdDateTime = this.BOBParmFormLetterUpdDateTime();

            if (!context)
            {
                context             = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere  = true;
            }

            // Do not add '_inventTrans.RecId' as a filter when creating the 'BOBRentalTransSyncParameters' object!
            // If the relevant inventory transaction must be split (i.e., this might happen when performing a partial delivery), the call to 'updateSplit()' 
            // (in the 'original' method) changes the RecId of '_inventTrans'! If '_inventTrans.RecId' is added as a filter here, the assoicated rental 
            // transaction is not synchronized. 
            context.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            using(DNRInventTransUpdateSplitDisposableContext inventTransUpdateSplitContext =
                    new DNRInventTransUpdateSplitDisposableContext(BOBInventSplitReason::ProgressStatus, BOBRentalSubStatus::Delivered))
            {
                ret = next updatePhysicalReceiptTrans(_inventTrans, _addQty, _cwAddQty, _ledgerVoucher, _disableCacheForBufferCheck, _setInventDimId);
            }

            context.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                context.dispose();
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransPhysicalReturnedReceipt</Name>
				<Source><![CDATA[
    protected container updateTransPhysicalReturnedReceipt(LedgerVoucher _ledgerVoucher, InventTrans _inventTrans, InventQty _addQty, PdsCWInventQty  _cwAddQty)
    {
        BOBRentalTransSyncDisposableContext rentalTransSyncContext = BOBRentalTransSyncDisposableContext::current();
        boolean     contextCreatedHere = false;
        container   ret;

        try
        {

            if (!rentalTransSyncContext)
            {
                rentalTransSyncContext  = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere      = true;
            }

            rentalTransSyncContext.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated, _inventTrans.RecId));

            using(DNRInventMovementInitInventTransPhysicialDisposableContext initInventTransPhysicalContext =
                  new DNRInventMovementInitInventTransPhysicialDisposableContext())
            {
                initInventTransPhysicalContext.DNRParmInventUpd_Physical(this);
                initInventTransPhysicalContext.DNRParmInventTrans(_inventTrans);
                initInventTransPhysicalContext.DNRParmMustSetCompensatingTrans(true);

                ret = next updateTransPhysicalReturnedReceipt(_ledgerVoucher, _inventTrans, _addQty, _cwAddQty);
            }

            rentalTransSyncContext.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                rentalTransSyncContext.dispose();
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransPhysicalReturnedIssue</Name>
				<Source><![CDATA[
    protected container updateTransPhysicalReturnedIssue(LedgerVoucher _ledgerVoucher, InventTrans _inventTrans, InventQty _addQty, PdsCWInventQty _cwAddQty)
    {
        BOBRentalTransSyncDisposableContext rentalTransSyncContext = BOBRentalTransSyncDisposableContext::current();
        boolean     contextCreatedHere = false;
        container   ret;

        try
        {

            if (!rentalTransSyncContext)
            {
                rentalTransSyncContext  = new BOBRentalTransSyncDisposableContext();
                contextCreatedHere      = true;
            }

            rentalTransSyncContext.push(new BOBRentalTransSyncParameters(funcName(), BOBRentalTransSyncEvent::OnUpdated));

            using(DNRInventMovementInitInventTransPhysicialDisposableContext initInventTransPhysicalContext =
                  new DNRInventMovementInitInventTransPhysicialDisposableContext())
            {
                initInventTransPhysicalContext.DNRParmInventUpd_Physical(this);

                boolean countryRegion_RU = movement.parmCompanyCountryRegion().isCountryRegionRU();

                if (!countryRegion_RU
                ||  (countryRegion_RU
                &&  (movement.returnedSpecialCheckUpdate_RU() == UnknownNoYes::Unknown
                ||  movement.returnedSpecialCheckUpdate_RU() == UnknownNoYes::No)))
                {
                    initInventTransPhysicalContext.DNRParmInventTrans(_inventTrans);
                    initInventTransPhysicalContext.DNRParmMustSetCompensatingTrans(true);
                }

                ret = next updateTransPhysicalReturnedIssue(_ledgerVoucher, _inventTrans, _addQty, _cwAddQty);
            }

            rentalTransSyncContext.processInventTransRecIds(funcName(), movement);
        }
        catch
        {
            // do nothing
        }
        finally
        {
            if (contextCreatedHere)
            {
                rentalTransSyncContext.dispose();
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>