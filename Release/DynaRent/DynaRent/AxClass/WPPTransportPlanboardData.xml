<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPTransportPlanboardData</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WPPTransportPlanboardData
{
    #HiGHPlanBoard

    HiGHPlanBoard                   planBoard;
    WPPParameters                   parameters;
    WPPTransportPlanboardSettings   settings;
    WPPTmpTransportPlanboardData    tmpData;
    NumberOfRecords                 entryCount;
    Timezone                        timezone;
    FromDate                        plannedFromDate;
    ToDate                          plannedToDate;

    Map                             imageCacheMap;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected abstract FromDateTime fromDateTime()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateColor</Name>
				<Source><![CDATA[
    protected abstract int getDateColor(WPPTmpTransportPlanboardData _tmpData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImages</Name>
				<Source><![CDATA[
    public container getImages(WPPTmpTransportPlanboardData _tmpData)
    {
        container           ret;
        WMSShipment         shipment;
        WPPWorkOrderTable   workOrderTable;

        select firstOnly RecId from shipment
            exists join workOrderTable
            where workOrderTable.OrderTableId   == shipment.TableId
            &&    workOrderTable.OrderRecId     == shipment.RecId
            &&    workOrderTable.RecId          == _tmpData.WorkOrderTableRecId;

        if (_tmpData.TaskType == WPPTaskType::Delivery)
        {
            ret = [ #TaskTypeDlv ];
        }
        else if (_tmpData.TaskType == WPPTaskType::Load)
        {
            ret = [ #TaskTypeLoad ];
        }
        else if (_tmpData.TaskId == parameters.InternalDeliveryTaskId)
        {
            ret = [ #TaskIdIntDlv ];
        }
        else if (_tmpData.TaskId == parameters.InternalLoadTaskId)
        {
            ret = [ #TaskIdIntLoad ];
        }

        if (!shipment)
        {
            if (_tmpData.IsSubRental)
            {
                ret += [ #SubRental ];
            }
            if (_tmpData.ExchangeType == RORAmendmentExchangeType::Technical)
            {
                ret += [ #TechnicalExch ];
            }
            if (_tmpData.ExchangeType == RORAmendmentExchangeType::Commercial)
            {
                ret += [ #CommercialExch ];
            }

            if (_tmpData.ObjectId && _tmpData.ObjectTableRecId && !_tmpData.IsObjectAvailable)
            {
                ret += [ #ObjNotAvailable ];
            }

            if (_tmpData.IsKit)
            {
                ret += [ #LinkedToKit ];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanningEntryColor</Name>
				<Source><![CDATA[
    protected abstract int getPlanningEntryColor(WPPTmpTransportPlanboardData _tmpData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanningEntryCount</Name>
				<Source><![CDATA[
    public NumberOfRecords getPlanningEntryCount()
    {
        return entryCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    public WPPTmpTransportPlanboardData getTmpData()
    {
        return tmpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        parameters      = WPPParameters::find();
        settings        = WPPTransportPlanboardSettings::findOrCreate();
        timezone        = DateTimeUtil::getUserPreferredTimeZone();
        imageCacheMap   = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanBoard</Name>
				<Source><![CDATA[
    public HiGHPlanBoard parmPlanBoard(HiGHPlanBoard _planBoard = planBoard)
    {
        planBoard = _planBoard;

        return planBoard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePlanboard</Name>
				<Source><![CDATA[
    protected abstract void populatePlanboard()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    protected abstract void populateTmpData(RecId _recIdFilter = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    protected void postRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    protected void preRun()
    {
        delete_from tmpData;
        tmpData = null; // without this AX may throw an 'internal error 25 in script'
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshEntry</Name>
				<Source><![CDATA[
    public void refreshEntry(boolean _reRetrieveContents)
    {
        //TODO: Need to implement
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource2DotNetImage</Name>
				<Source><![CDATA[
    [SysObsolete("This method is no longer used.", false)]
    protected final System.Drawing.Image resource2DotNetImage(int _resNo, System.Drawing.Color _backColor)
    {
        System.Drawing.Image emptyImage;
        return emptyImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(WPPTransportPlanboardSettings _settings = settings)
    {
        System.Exception exception;

        settings = settings ? _settings : settings;

        try
        {
            if (settings)
            {
                this.preRun();

                this.populateTmpData();
                this.populatePlanboard();

                this.postRun();
            }
            else
            {
                warning(strFmt("@DNR7115", "@DNR7169"));
            }
        }
        catch(Exception::CLRError)
        {
            exception = CLRInterop::getLastException();

            while(exception)
            {
                error(exception.get_Message());
                exception = exception.get_InnerException();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemContent</Name>
				<Source><![CDATA[
    protected void setItemContent(HiGHPlanBoardPlannedEvent _plannedEvent, WPPTmpTransportPlanboardData _tmpData)
    {
        #define.empty('&nbsp')

        int                         backgroundColor, dateColor;
        str                         hexBlack, hexRed, cityColor, typeColor;
        WPPRequestedStartDateTime   startDateTime;
        boolean                     isDlvOrLoadTask, isDlvTask, isTaskReleased;
        container                   con;
        int                         idx;
        Num                         fleetNumber;
        str                         textHTML;
        str                         imageHTML;

        // set background color
        backgroundColor = this.getPlanningEntryColor(_tmpData);
        _plannedEvent.parmEventColor(backgroundColor);

        // get icons
        con = this.getImages(_tmpData);        

        for(idx = 1; idx <= conLen(con); idx ++)
        {
            imageHTML += strFmt(@'<img src="%1"/>', conPeek(con, idx));
        }

        // set texts (populate some variables first)
        hexBlack        = int2Hex(#ColorBlack);
        hexRed          = int2Hex(#ColorRed);
        startDateTime   = DateTimeUtil::applyTimeZoneOffset(_tmpData.RequestedStartDateTime, timezone);
        isDlvTask       = (_tmpData.TaskType == WPPTaskType::Delivery);
        isDlvOrLoadTask = (isDlvTask || _tmpData.TaskType == WPPTaskType::Load);
        isTaskReleased  = (_tmpData.WorkOrderLineStatus >= WPPWorkOrderLineStatus::Released);
        cityColor       = (isDlvOrLoadTask && !isTaskReleased && (_tmpData.HasRouteNote || _tmpData.HasLocationNote) ? hexRed : hexBlack);
        typeColor       = (isDlvOrLoadTask && !isTaskReleased && _tmpData.HasObjectNote ? hexRed : hexBlack);
        dateColor       = this.getDateColor(_tmpData);
        fleetNumber     = _tmpData.fleetNumber(parameters.TPBFleetNumber); // TODO: icons
        textHTML        = strFmt(@'<table style="table-layout: fixed; width: 100%; border: 0;">
                                     <tr>
                                       <td width="30%" style="text-align:left; overflow: hidden; white-space: nowrap"><b>%1</b></td>
                                       <td width="5%">&nbsp</td>
                                       <td width="30%" style="text-align:center; overflow: hidden; white-space: nowrap"><font color=%2><b>%3</b></font></td>
                                       <td width="5%">&nbsp</td>
                                       <td width="30%" style="text-align:right; overflow: hidden; white-space: nowrap"><font color=%4><b>%5</b></font></td>
                                     </tr>
                                     <tr>
                                       <td width="30%" style="text-align:left; overflow: hidden; white-space: nowrap"><font color=%6><b>%7</b></font></td>
                                       <td width="5%">&nbsp</td>
                                       <td width="30%" style="text-align:center; overflow: hidden; white-space: nowrap"><b>%8</b></td>
                                       <td width="5%">&nbsp</td>
                                       <td width="30%" style="text-align:right; overflow: hidden; white-space: nowrap"><b>%9</b></td>
                                     </tr>
                                     <tr>
                                       <td colspan="5">%10</td>
                                     </tr>
                                   </table>',
                                 (_tmpData.CustName ? _tmpData.CustName : #empty),
                                  cityColor,
                                 (_tmpData.City ? _tmpData.City : #empty),
                                  dateColor,
                                 (startDateTime ? dateTime2Str(startDateTime) : #empty),
                                  typeColor,
                                 (_tmpData.RentalTypeIdRequested ? _tmpData.RentalTypeIdRequested : #empty),
                                 (_tmpData.RentalTypeIdAssigned ? _tmpData.RentalTypeIdAssigned : #empty),
                                 (fleetNumber ? fleetNumber : #empty),
                                 imageHTML);
        
        _plannedEvent.parmCellContent(textHTML);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanningDates</Name>
				<Source><![CDATA[
    public void setPlanningDates(FromDate _plannedFromDate, ToDate _plannedToDate)
    {
        plannedFromDate = _plannedFromDate;
        plannedToDate = _plannedToDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>