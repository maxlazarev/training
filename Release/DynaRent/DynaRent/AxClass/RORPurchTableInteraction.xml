<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORPurchTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORPurchTableInteraction
extends PageInteraction
{
    Page                        page;
    PurchLine                   purchLine;
    PurchTable                  purchTable;
    InventDim                   inventDim;

    PurchTableForm              purchTableForm;
    PurchTableInteractionHelper purchTableInteractionHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableCreditInvoiceButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the credit invoice menu item.
    /// </summary>
    protected void enableCreditInvoiceButton()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonCustVendCreditInvoicingHeader), purchTableForm.isHeaderCreditInvoiceButtonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    public void enableHeaderActions()
    {
        purchTableInteractionHelper.initHeaderActions();

        this.enableHeaderChangeRequestActions();
        this.enableHeaderSetupActions();
        this.enableHeaderFunctionActions();
        this.enableHeaderInquiryActions();
        this.enableHeaderInterCompanyActions();
        this.enableHeaderAgreementActions();
        this.enableCreditInvoiceButton();
        this.enableHeaderDocumentStateActions();
        this.enableHeaderGeneralActions();
        this.enableHeaderAmendmentActions();
        this.enableHeaderInvoice();
        this.enableHeaderUpdateJournalActions();
        this.WPPEnableHeaderWorkOrderActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderAgreementActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level agreement menu items.
    /// </summary>
    protected void enableHeaderAgreementActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonPurchAgreement), purchTable.MatchingAgreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderAmendmentActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the header level amendment menu items are enabled.
    /// </summary>
    protected void enableHeaderAmendmentActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ROROrderAmendmentDialogType_LostOrder_Header), purchTableInteractionHelper.RORparmEnableAmendmentLostOrder());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ROROrderAmendmentDialogType_ChangeDate_Header), purchTableInteractionHelper.RORparmEnableAmendmentDateChangeHeader());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderChangeRequestActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level change request menu items.
    /// </summary>
    protected void enableHeaderChangeRequestActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonRequestChange), purchTableInteractionHelper.parmcanChangeBeRequested());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderDocumentStateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    protected void enableHeaderDocumentStateActions()
    {
        // Rules related to document state
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchOrderMaintain), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchOrderCopy), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchaseCreate), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, AllocateMarkup), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchaseCalculate), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchasePrepay), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchaseGenerate), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ManageBankDocument), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ReceiveProcess), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InvoiceProcess), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InvoiceSettle), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InvoiceIntroduce), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InvoiceChange), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, GeneralSetup), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, CreateActivity), !purchTableInteractionHelper.parmHeaderIsFinalized());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level function items.
    /// </summary>
    protected void enableHeaderFunctionActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonPurchCancel), purchTableInteractionHelper.parmbuttonPurchCancelEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, CreateCase), purchTableInteractionHelper.parmbuttonCreateCaseEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchCreditNoteHeader), purchTableInteractionHelper.parmbuttonCreditNoteHeaderEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchCreditNoteLines), purchTableInteractionHelper.parmbuttonCreditNoteLinesEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, MultiLineDiscAction), purchTableInteractionHelper.parmbuttonMultiLineDiscEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, EndDiscAction), purchTableInteractionHelper.parmbuttonEndDiscEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, SuppItemTable_Purch), purchTableInteractionHelper.parmbuttonSupplementaryItemsEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonFinalizePurchaseOrder), purchTableInteractionHelper.parmButtonFinalizeEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonPurchTableCompare), purchTableInteractionHelper.parmHistoryExists());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonPurchTableVersion), purchTableInteractionHelper.parmHistoryExists());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderGeneralActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level general tab menu items.
    /// </summary>
    protected void enableHeaderGeneralActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ContactPerson), purchTableInteractionHelper.parmContactDetailsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderInquiryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level inquiry menu items.
    /// </summary>
    protected void enableHeaderInquiryActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonJournalPurchaseOrder), purchTableInteractionHelper.parmbuttonJournalPurchaseOrderEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonJournalPackingSlip), purchTableInteractionHelper.parmbuttonJournalPackingSlipEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonJournalReceiptsList), purchTableInteractionHelper.parmbuttonJournalReceiptsListEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonJournalInvoice), purchTableInteractionHelper.parmbuttonJournalInvoiceEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonJournalPendingInvoice), purchTableInteractionHelper.parmbuttonJournalPendingInvoiceEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, CaseButton), purchTableInteractionHelper.parmbuttonCreateCaseEnabled());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalPreparation), purchTableInteractionHelper.RORparmbuttonJournalPreparationEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalOutbound), purchTableInteractionHelper.RORparmbuttonJournalOutboundEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalBuild), purchTableInteractionHelper.RORparmbuttonJournalBuildEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalEventStart), purchTableInteractionHelper.RORparmbuttonJournalEventStartEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalEventEnd), purchTableInteractionHelper.RORparmbuttonJournalEventEndEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalStrike),  purchTableInteractionHelper.RORparmbuttonJournalStrikeEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalInbound), purchTableInteractionHelper.RORparmbuttonJournalInboundEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalReturnNote), purchTableInteractionHelper.RORparmbuttonJournalReturnNoteEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORVendPurchOrderJournalReturnInspection), purchTableInteractionHelper.RORparmbuttonJournalInspectionEnabled());        
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderInterCompanyActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header level intercompany menu items.
    /// </summary>
    protected void enableHeaderInterCompanyActions()
    {
        if (purchTable.PurchaseType == PurchaseType::RORSubRental
        && purchTable.InterCompanyDirectDelivery
        && purchTable.InterCompanyOrder)
        {
            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonOriginalSalesTable), false);
            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanySalesTable), false);

            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonOriginalRORSalesTable), purchTableInteractionHelper.parmoriginalSalesTableEnabled());
            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanyRORSalesTable), purchTableInteractionHelper.parmintercompanySalesTableEnabled());

            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanySalesFormLetter_Pickinglist), false);
        }
        else
        {
            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonOriginalSalesTable), purchTableInteractionHelper.parmoriginalSalesTableEnabled());
            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanySalesTable), purchTableInteractionHelper.parmintercompanySalesTableEnabled());

            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonOriginalRORSalesTable), false);
            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanyRORSalesTable), false);

            page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanySalesFormLetter_Pickinglist), purchTableInteractionHelper.parmintercompanyPickingListEnabled());
        }

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanyCustPackingSlipJournal), purchTableInteractionHelper.parminterCompanyActionsEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonInterCompanyCustInvoiceJournal), purchTableInteractionHelper.parminterCompanyActionsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named invoice.
    /// </summary>
    private void enableHeaderInvoice()
    {
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonPaymentSchedule), purchTableInteractionHelper.parmbuttonPaymentScheduleEnabled());

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalInvoice), purchTableInteractionHelper.parmbuttonJournalInvoiceEnabled() );
        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonJournalPendingInvoice), purchTableInteractionHelper.parmbuttonJournalPendingInvoiceEnabled() );

        page.actionPaneControlEnabled(formControlStr(PurchTable, buttonCustVendCreditInvoicingHeader), purchTableForm.isHeaderCreditInvoiceButtonEnabled());

        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceProcess), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceSettle), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceIntroduce), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(PurchTable, InvoiceChange), !purchTableInteractionHelper.parmHeaderIsFinalized());
                
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderPurchaseAccountingActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level journal menu items.
    /// </summary>
    protected void enableHeaderPurchaseAccountingActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonSubLedgerJournalLines), purchTableInteractionHelper.parmenablePurchaseOrderButton());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderSetupActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level setup menu items.
    /// </summary>
    protected void enableHeaderSetupActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonPaymentSchedule), purchTableInteractionHelper.parmbuttonPaymentScheduleEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonCreateBankLCImport), purchTableInteractionHelper.parmbuttonCreateBankLCImport());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, BankLGRequestForm), purchTableInteractionHelper.parmbankLGRequestFormEnabled());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PrepayPurchTableHeading), purchTableInteractionHelper.parmbuttonPrepayPurchTableHeading());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonRemovePurchPrepayTable), purchTableInteractionHelper.parmbuttonRemovePurchPrepayTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderUpdateJournalActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level journal menu items.
    /// </summary>
    protected void enableHeaderUpdateJournalActions()
    {
        boolean isRentalDirectDelivery;
        ;

        if (purchTable.InterCompanyDirectDelivery
        && purchTable.PurchaseType == PurchaseType::RORSubRental
        && purchTable.InterCompanyOrder)
        {
            isRentalDirectDelivery = true;
        }

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonUpdatePurchaseOrder), purchTableInteractionHelper.parmenablePurchaseOrderButton());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonConfirm), purchTableInteractionHelper.parmenablePurchaseOrderButton());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonProformaPurchaseOrder), purchTableInteractionHelper.parmenablePurchaseOrderButton());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonUpdateReceiptsList), !isRentalDirectDelivery && purchTableInteractionHelper.parmenableReceiptsListButton());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonProformaReceiptsList), !isRentalDirectDelivery && purchTableInteractionHelper.parmenableReceiptsListButton());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonUpdatePackingSlip), !isRentalDirectDelivery && purchTableInteractionHelper.parmenablePackingSlipButton());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonProformaPackingSlip), !isRentalDirectDelivery && purchTableInteractionHelper.parmenablePackingSlipButton());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonUpdateInvoice), purchTableInteractionHelper.parmenableInvoiceButton());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonProformaInvoice), purchTableInteractionHelper.parmenableInvoiceButton());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, budgetControl), !purchTableInteractionHelper.parmDocumentConfirmedOrFinalized());
        //enables or disables the prepay invoice button
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonUpdatePrepayInvoice), purchTableInteractionHelper.parmButtonUpdatePrepayInvoice());

        // enables the posting buttons that are based on the RORSubStatus
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchFormLetter_RORSubStatusPreparation), !isRentalDirectDelivery && purchTableInteractionHelper.RORParmEnablePreparationButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORSubStatusOutbound), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableOutboundButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORSubStatusBuild), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableBuildButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORSubStatusEventStart), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableEventStartButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORSubStatusEventEnd), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableEventEndButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORSubStatusStrike), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableStrikeButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORSubStatusInbound), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableInboundButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORReturnNote), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableReturnNoteButton());
        page.actionPaneControlEnabled(formControlStr(RORpurchTable, PurchFormLetter_RORSubStatusReturnInspection), !isRentalDirectDelivery && purchTableInteractionHelper.RORparmEnableInspectionButton());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    public void enableLineActions()
    {
        purchTableInteractionHelper.initLineActions(purchLine);

        this.enableRentalMenuButton();
        this.enableLineSetupActions();
        this.enableLineFunctionActions();
        this.enableLineInquiryActions();
        this.enableLineCalculationActions();
        this.enableLineInterCompanyActions();
        this.enableLineInventoryActions();
        this.enableLinePBAActions();
        this.enableLineQuickQuoteActions();
        this.enableLineAgreementActions();
        this.enableLineRenumberingActions();
        this.enableCreditInvoiceButton();
        this.enableLineDocumentStateActions();
        this.enableLineAmendmentActions();
        // Header actions dependent on lines.
        this.enableHeaderAgreementActions();
        this.enableHeaderUpdateJournalActions();
        this.WPPEnableHeaderWorkOrderActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineAgreementActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level agreement menu items.
    /// </summary>
    protected void enableLineAgreementActions()
    {
        boolean agreementLineEnabled, createLinkEnabled, removeLinkEnabled;

        [agreementLineEnabled, createLinkEnabled, removeLinkEnabled] = purchTableForm.getEnabledAgreementButtons(purchTable, purchLine);

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, AgreementLine), agreementLineEnabled);
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, CreateLink), createLinkEnabled);
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RemoveLink), removeLinkEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineAmendmentActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level amendment menu items are enabled.
    /// </summary>
    protected void enableLineAmendmentActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ROROrderAmendmentDialogType_ChangeDate_Line), purchTableInteractionHelper.RORparmEnableAmendmentDateChangeLine());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ROROrderAmendmentDialogType_RentalStop_Line), purchTableInteractionHelper.RORparmEnableAmendmentRentalStopLine());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RORRentalLineEditorFormButton), purchTableInteractionHelper.RORparmEnableRentalLineEditorForm());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ROROrderAmendmentDialogType_ResetValue_Line), purchTableInteractionHelper.RORparmEnableAmendmentResetValueLine());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ROROrderAmendmentDialogType_BlockPeriod), purchTableInteractionHelper.RORparmEnableAmendmentBlockPeriodLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineCalculationActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level calculation menu items.
    /// </summary>
    protected void enableLineCalculationActions()
    {
        boolean suppItemCalcPurchEnabled;

        suppItemCalcPurchEnabled = purchTableForm.isLineCalculationButtonEnabled(purchLine);

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, SuppItemCalc_Purch), suppItemCalcPurchEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineDocumentStateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    protected void enableLineDocumentStateActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, LineOverviewCoreActionButtonGroup), !purchTableInteractionHelper.parmHeaderIsFinalized());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchCopyAllLines), !purchTableInteractionHelper.parmHeaderIsFinalized());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchCopyJournalLines), !purchTableInteractionHelper.parmHeaderIsFinalized());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level function menu items.
    /// </summary>
    protected void enableLineFunctionActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonLineExpandBOM), purchTableInteractionHelper.parmExplodeBOMEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchLineCopy), purchTableInteractionHelper.parmCopyFromLinesEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchCopyAllLines), purchTableInteractionHelper.parmCopyAllLines());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchCopyJournalLines), purchTableInteractionHelper.parmCopyJournalLines());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonDeliverySchedule), purchTableInteractionHelper.parmDeliveryScheduleEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonCustVendCreditInvoicingLines), purchTableInteractionHelper.parmCreditInvoicingEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, PurchUpdateRemain), purchTableInteractionHelper.parmDeliverRemainderEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, DirPartyPostalAddressNewLine), purchTableInteractionHelper.parmAddAddressEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, LogisticsLocationSelectLine), purchTableInteractionHelper.parmAddAlternativeAddressEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, LineFinalize), purchTableInteractionHelper.parmButtonLineFinalizeEnabled());

        // Financials
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, BudgetControlLine), purchTableInteractionHelper.parmLineIsModified());

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, BOBCreateInventSerialFromPurchLine), purchTableInteractionHelper.BOBParmButtonLineCreateSerialNumEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, BOBObjectTable), purchTableInteractionHelper.BOBparmButtonLineBusinessObjectEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, WPPWorkOrderTable_LineView), PurchTableInteractionHelper.WPPParmWorkOrderLineExistsLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInquiryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level inquiry menu items.
    /// </summary>
    protected void enableLineInquiryActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ReqTransNet), purchTableInteractionHelper.parmreqTransNetEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ReqTransExplosion), purchTableInteractionHelper.parmreqTransExplosionEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInterCompanyActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level intercompany menu items.
    /// </summary>
    protected void enableLineInterCompanyActions()
    {
        boolean interCompanyEnabled = purchTableInteractionHelper.parmlineInterCompanyEnabled();

        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ButtonInterCompanyInventTrans), interCompanyEnabled);
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InventOnhandInterCompany), interCompanyEnabled);
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, ButtonInterCompanyInventOnHandReserve), interCompanyEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInventoryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level inventory menu items.
    /// </summary>
    protected void enableLineInventoryActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonLineTransact), purchTableInteractionHelper.parmbuttonTransactionsEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonLineOnHand), purchTableInteractionHelper.parmbuttonOnHandEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonLineLot), purchTableInteractionHelper.parmbuttonLotEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InventDimTracking), purchTableInteractionHelper.parmbuttonTraceEnabled() );
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InventMarking), purchTableInteractionHelper.parmbuttonMarkingEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InventReserve), purchTableInteractionHelper.parmbuttonReservationEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, Register), purchTableInteractionHelper.parmbuttonRegistrationEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, InventTransPick), purchTableInteractionHelper.parmbuttonPickEnabled());
        //page.actionPaneControlEnabled(formControlStr(RORPurchTable, WMSOrderAllowCreate), purchTableInteractionHelper.parmbuttonOutputOrdersEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLinePBAActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level PBA menu items.
    /// </summary>
    public void enableLinePBAActions()
    {
        //page.actionPaneControlEnabled(formControlStr(RORPurchTable, PBAExecute), purchTableInteractionHelper.parmPBAExecuteButtonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineQuickQuoteActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level quick quote menu items.
    /// </summary>
    protected void enableLineQuickQuoteActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonLineQuickQuote), purchTableForm.editHeaderAllowed());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineRenumberingActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level renumber menu items.
    /// </summary>
    protected void enableLineRenumberingActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RenumberLineNumber), purchTableForm.canRenumberLineNumbers());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineSetupActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level setup menu items.
    /// </summary>
    protected void enableLineSetupActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, MarkupTrans_LinePurchTable), purchTableInteractionHelper.parmmarkupTransLinePurchTableEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, LineTaxTransSource), purchTableInteractionHelper.parmlineTaxTransSourceEnabled());
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, buttonSubLedgerDistribution), purchTableInteractionHelper.parmbuttonSubLedgerDistributionEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRentalMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level amendment menu items are enabled.
    /// </summary>
    protected void enableRentalMenuButton()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, RentalMenuButton), purchTableInteractionHelper.RORparmEnableRentalMenuButton());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialises based on the active records for the form.
    /// </summary>
    private void init()
    {
        page                    = this.page();

        purchLine               = page.activeRecord('PurchLine');
        purchTable              = page.activeRecord('PurchTable');
        inventDim               = page.activeRecord('InventDim');

        if (page.pageArgs().enumTypeParameter() == enumNum(PurchTableFormId))
        {
            purchTableForm = PurchTableForm::construct(page.pageArgs().enumParameter(), purchTable);
            purchTableInteractionHelper = PurchTableInteractionHelper::construct(page.pageArgs().enumParameter(), purchTable);
        }
        else
        {
            purchTableForm = PurchTableForm::construct(PurchTableFormId::None, purchTable);
            purchTableInteractionHelper = PurchTableInteractionHelper::construct(PurchTableFormId::None, purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the line action menu item buttons when the active purchase order line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('PurchLine', 'selectionChanged')]
    public void purchLine_DS_selectionChanged()
    {
        this.init();

        this.enableLineActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header action menu item buttons when the active purchase order header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('PurchTable', 'selectionChanged')]
    public void purchTable_DS_selectionChanged()
    {
        this.init();

        this.enableHeaderActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tabChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event fired after an action pane tab is changed on the form.
    /// </summary>
    /// <param name="_activeTabNames">
    /// A container of strings indicating active tab names on a form.
    /// </param>
    /// <remarks>
    /// Note that form can contain multible action pains therefore it can have multiple active tabs.
    /// </remarks>
    public void tabChanged(container _activeTabNames)
    {
        super(_activeTabNames);

        this.init();
        if (purchTable)
        {
            //Tab changed is called on form open before selection changed.
            this.enableHeaderActions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPEnableHeaderWorkOrderActions</Name>
				<Source><![CDATA[
    private void WPPEnableHeaderWorkOrderActions()
    {
        page.actionPaneControlEnabled(formControlStr(RORPurchTable, WPPWorkOrderTable), PurchTableInteractionHelper.WPPParmWorkOrderLineExistsHeader());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>