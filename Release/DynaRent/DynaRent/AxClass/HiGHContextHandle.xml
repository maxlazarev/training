<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHContextHandle</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FormControlAttribute('HiGHContextHandle', 'resources/html/HiGHContextHandle', classstr(BuildHiGHContextHandle))]
class HiGHContextHandle extends FormTemplateControl
{
    //Data
    private FormProperty        dataValueProperty;
    private FormProperty        dataSourceNameProperty;
    private FormProperty        displayValueProperty;
    private FormProperty        contextMenuItemsProperty;

    //Internal
    private List                contextMenuItems;
    HiGHContextHandleEventArgs  contextHandleEventArgs;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    //Constructor
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build, _formRun);

        this.setTemplateId('HiGHContextHandle');
        this.setResourceBundleName('Resources/html/HiGHContextHandle');
     
        //Data
        dataSourceNameProperty  = this.addProperty(methodStr(HiGHContextHandle, parmDataSourceName),    Types::String);
        dataValueProperty       = this.addProperty(methodStr(HiGHContextHandle, parmDataValue),         Types::String);
        displayValueProperty    = this.addProperty(methodStr(HiGHContextHandle, parmDisplayValue),      Types::String);   

        //Internal
        contextMenuItemsProperty= this.addProperty(methodStr(HiGHContextHandle, parmContextMenuItems),  Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    //Apply properties
    public void applyBuild()
    {
        BuildHiGHContextHandle build;
        
        super();

        build = this.build();
        if(build)
        {
            //Data
            this.parmDataValue      (FormBindingUtil::initBinding(build.parmDataSource(), build.parmDataField(),  this.formRun(), build.parmDataMethod()));
            this.parmDataSourceName (build.parmDataSource());
            this.parmDisplayValue   (FormBindingUtil::initBinding(build.parmDataSource(), build.parmDisplayField(),  this.formRun()));          
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceName</Name>
				<Source><![CDATA[
    //Data
    /// <summary>
    /// Sets the datasource name from the control
    /// </summary>
    /// <param name = "_dataValue">Value of the data field/method</param>
    /// <returns>Value of the data field/method as a string</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "DataSourceName", true)]
    public str parmDataSourceName(anytype _dataSourceName = dataSourceNameProperty.parmValue())
    {
        if (!prmIsDefault(_dataSourceName))
        {
            dataSourceNameProperty.setValueOrBinding(_dataSourceName);
        }

        return dataSourceNameProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value from the field specified in the build class
    /// </summary>
    /// <param name = "_dataValue">Value of the data field/method</param>
    /// <returns>Value of the data field/method as a string</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "DataValue", true)]
    public str parmDataValue(anytype _dataValue = dataValueProperty.parmValue())
    {
        if (!prmIsDefault(_dataValue))
        {
            dataValueProperty.setValueOrBinding(_dataValue);
        }

        return dataValueProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value from the field specified in the build class
    /// </summary>
    /// <param name = "_dataValue">Value of the data field/method</param>
    /// <returns>Value of the data field/method as a string</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, "DisplayValue", true)]
    public str parmDisplayValue(anytype _dataValue = displayValueProperty.parmValue())
    {
        if (!prmIsDefault(_dataValue))
        {
            displayValueProperty.setValueOrBinding(_dataValue);
        }

        return displayValueProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onContextChanged</Name>
				<Source><![CDATA[
    //Events
    /// <summary>
    /// Called from client when context menu is called, to stick to the standard pattern and to ensure the latest information is sent to the server
    /// </summary>
    /// <param name = "_contextHandleEventArgs">Contains information about the control</param>
    [FormCommandAttribute("OnContextChanged")]
    private void onContextChanged(str _contextHandleEventArgs)
    {
        contextHandleEventArgs = FormControlUtil::convertStrToObject(classIdGet(contextHandleEventArgs), _contextHandleEventArgs);

        this.onContextHandlePopup(contextHandleEventArgs, contextMenuItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onContextHandlePopup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fired when context object has been changed
    /// </summary>
    /// <param name = "_plannedEvent">Object of HiGHPlanBoardPlanning containing updated values</param>
    /// <returns></returns>
    public void onContextHandlePopup(HiGHContextHandleEventArgs _contextHandleEventArgs, List _contextMenuItems)
    {
        this.parmContextMenuItems(_contextMenuItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContextMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a list of all periods that will be rendered on the control
    /// </summary>
    /// <param name = "_value">List of periods</param>
    /// <returns>List of generated periods</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "ContextMenuItems", true)]
    private List parmContextMenuItems(List _contextMenuItems = contextMenuItemsProperty.parmValue())
    {
        if (!prmIsDefault(_contextMenuItems))
        {
            contextMenuItems = _contextMenuItems;
            contextMenuItemsProperty.setValueOrBinding(contextMenuItems);
        }

        return contextMenuItemsProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a menuitem has been clicked
    /// </summary>
    /// <param name = "_id">Menuitem id</param>
    [FormCommandAttribute("OnMenuItemClicked")]
    public void menuItemClicked(str _menuItemId)
    {
        str menuItemValue;
        ListEnumerator leMenuItems = this.parmContextMenuItems().getEnumerator();

        while (leMenuItems.moveNext())
        {
            HiGHPlanBoardMenuItem menuItem = leMenuItems.current();
            if (menuItem.parmId() == str2Int(_menuItemId))
            {
                menuItemValue = menuItem.parmValue() ? menuItem.parmValue() : menuItem.parmLabel();
                break;
            }
        }

        //Replace menuitems with new empty List
        this.parmContextMenuItems(new List(Types::Class));


        this.onMenuItemClicked(HiGHContextHandleMenuItemClickedEventArgs::newParameters(str2Int(_menuItemId), menuItemValue, contextHandleEventArgs.parmDataValue(), contextHandleEventArgs.parmDataSourceName(), contextHandleEventArgs.parmDisplayValue()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onMenuItemClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a menuitem has been clicked
    /// </summary>
    /// <param name = "_id">Menuitem id</param>
    public void onMenuItemClicked(HiGHContextHandleMenuItemClickedEventArgs _contextHandleMenuItemClickedEventArgs)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>