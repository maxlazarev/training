<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRORSubStatusJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRORSubStatusJournalPost
extends FormletterJournalPost
{
    PurchParmTable          purchParmTable;
    PurchParmLine           purchParmLine;
    VendRORSubStatusJour    subStatusJour;
    VendRORSubStatusTrans   subStatusTrans;
    PurchLine               purchLine;
    PurchTable              purchTable;

    PurchTotals             purchTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _purchLine)
    {
        // Do nothing - not valid for sub-status updates
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::RORSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return subStatusJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
    
        purchTable = purchParmTable.purchTable();
    
        if (this.parmTotals())
        {
            purchTotals = this.parmTotals() as PurchTotals;
        }
        else
        {
            purchTotals = PurchTotals::newParmTable(purchParmTable, this.parmSpecQty(), subStatusJour.ParmId, this.parmSumOrderId(), this.documentStatus());
        }
    
        this.tax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        super();
    
        purchLine = subStatusTrans.purchLine(true);
        this.initRelatedParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>purchParmLine</c> member variable.
    /// </summary>
    protected void initRelatedParmLine()
    {
        select purchParmLine
        where purchParmLine.ParmId                 == subStatusJour.ParmId
        &&    purchParmLine.TableRefId             == purchParmTable.TableRefId
        &&    purchParmLine.PurchaseLineLineNumber == purchLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReportDimHistoryLogType</Name>
				<Source><![CDATA[
    protected InventReportDimHistoryLogType inventReportDimHistoryLogType()
    {
        return InventReportDimHistoryLogType::PurchPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = subStatusTrans)
    {
        subStatusTrans = _journalLine as VendRORSubStatusTrans;
        return subStatusTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected tableId journalLineTableId()
    {
        return tableNum(VendRORSubStatusTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = subStatusJour)
    {
        subStatusJour = _journalTable as VendRORSubStatusJour;
        return subStatusJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;
        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    protected void postInventory()
    {
        InventMovement          inventMovement;
        InventUpd_RORSubStatus  inventUpdate;
        PurchParmLine           purchParmLineLocal;
        ;
    
        purchParmLineLocal = PurchParmLine::findInventTransId(purchParmTable.ParmId, purchLine.InventTransId);
    
        inventMovement = InventMovement::construct(purchLine);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, purchParmLineLocal, subStatusJour.BOBRentalSubStatus, -inventMovement.transSign());
        inventUpdate.BOBParmFormLetterUpdDateTime(purchParmTable.TransDate, purchParmTable.BOBTransTime);
        inventUpdate.updateNow(ledgerVoucher);
    
        inventMovement = InventMovement::construct(purchLine, InventMovSubType::BOBCompensatingTrans);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, purchParmLineLocal, subStatusJour.BOBRentalSubStatus, -inventMovement.transSign());
        inventUpdate.BOBParmIsCompensatingTrans(true);
        inventUpdate.updateNow(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void  postMarkupOnJour(PurchTable  _purchTableMarkup)
    {
        markup.postJournal(1,
                           purchTotals.purchOrderBalance(_purchTableMarkup.TableId, _purchTableMarkup.RecId),
                          _purchTableMarkup,
                          _purchTableMarkup.DefaultDimension,
                           null,
                           ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void postMarkupOnTrans()
    {
        markup.postJournal(subStatusTrans.Qty,
                           subStatusTrans.LineAmount,
                           purchLine,
                           purchLine.DefaultDimension,
                           subStatusTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void  postMarkupTable()
    {
        this.postMarkupOnJour(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
    protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    protected Common sourceLine()
    {
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeCalcTax</Name>
				<Source><![CDATA[
    protected Object tradeCalcTax()
    {
        return PurchCalcTax::construct(subStatusJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt  transactionLogTxt()
    {
        return "@DNR6313";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::RORRentalSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return subStatusJour.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    protected void updateJournalLine()
    {
        if (subStatusJour.PurchId != subStatusTrans.OrigPurchId)
        {
            this.updateSumPurchId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRentalPeriods</Name>
				<Source><![CDATA[
    protected void updateRentalPeriods()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    protected void updateSourceLine()
    {
        PurchLineType purchLineType;
        ;
    
        super();
    
        purchLineType = PurchLineType::construct(purchLine);
        purchLineType.updatePurchLine();
        purchLine.doUpdate();
    
        // Update qty on rental periods, using invoicing date/time from line
        this.updateRentalPeriods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    protected void updateSourceTable()
    {
        SetEnumerator   se = ordersPosted.getEnumerator();
    
        ttsbegin;
        while (se.moveNext())
        {
            purchTable = PurchTable::find(se.current(),true);
            if (purchTable)
            {
                purchTable.updateIsEncumbranceRequired();
                purchTable.updateDocumentStatus(this.documentStatus());
                purchTable.updateBackStatus();
                purchTable.updatePurchaseType();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumPurchId</Name>
				<Source><![CDATA[
    protected void  updateSumPurchId()
    {
        PurchTable  localPurchTable;
    
        if (PurchTable::exist(purchParmLine.OrigPurchId))
        {
            ttsbegin;
            localPurchTable = purchParmLine.purchTable(true);
    
            localPurchTable.updateBackStatus();
            localPurchTable.write();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPMustDuplicateTask</Name>
				<Source><![CDATA[
    public void WPPMustDuplicateTask()
    {
        if (purchParmTable.WPPDuplTaskOnPartialFormLetterPosting
        &&  !this.WPPParmMustDuplicateWorkOrderLine())
        {
            // Check whether the Deliver remainder is 0 or not
            this.WPPParmMustDuplicateWorkOrderLine(real2int(purchParmLine.RemainAfterInvent));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRORSubStatusJournalPost construct()
    {
        return new PurchRORSubStatusJournalPost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>