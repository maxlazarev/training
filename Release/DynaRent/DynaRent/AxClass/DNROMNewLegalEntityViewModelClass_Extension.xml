<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNROMNewLegalEntityViewModelClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(OMNewLegalEntityViewModel))]
public final class DNROMNewLegalEntityViewModelClass_Extension
{
    private static DataAreaId      dataAreaCopyFrom;
    private static DataAreaId      dataAreaCopyTo;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DNREvent_CreatedLegalEntity_handler</Name>
				<Source><![CDATA[
    //*********************************Event Handlers ******************************************//
    [SubscribesTo(classStr(OMNewLegalEntityViewModel), delegateStr(OMNewLegalEntityViewModel, createdLegalEntity))]
    public static void DNREvent_CreatedLegalEntity_handler(selectableDataArea _company)
    {
        OMNewLegalEntityViewModel::DNRCopySharedData(_company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRCopyInventSite</Name>
				<Source><![CDATA[
    //****************************** Extension Methods ********************************************//
    private static void DNRCopyInventSite()
    {
        InventSite      inventSite;
        InventSite      newInventSite;
        ReqSitePolicy   sitePolicy;
        boolean         createSitePolicy;
        
        createSitePolicy = isConfigurationkeyEnabled(new SysDictTable(sitePolicy.TableId).configurationKeyId());

        //Create InventSite Records 
        while select crosscompany : [dataAreaCopyFrom] inventSite
        {
            newInventSite.clear();
            newInventSite.SiteId = inventSite.SiteId;
            newInventSite.Name = inventSite.Name;
            newInventSite.Timezone = inventSite.Timezone;
            newInventSite.IsReceivingWarehouseOverrideAllowed = inventSite.IsReceivingWarehouseOverrideAllowed;
            newInventSite.DefaultDimension = inventSite.DefaultDimension;
            
            if(newInventSite.validateWrite())
            {
                newInventSite.insert();
                if(createSitePolicy)
                {
                    sitePolicy.clear();
                    sitePolicy.InventSiteId = newInventSite.SiteId;
                    if(sitePolicy.validateWrite())
                    {
                        sitePolicy.insert();
                    }
                }

                InventSiteLogisticsLocation siteLogisticsLocation;
                InventSiteLogisticsLocation newSiteLogisticsLocation;
                    
                while select siteLogisticsLocation
                where siteLogisticsLocation.Site == inventSite.RecId
                {
                    newSiteLogisticsLocation.clear();
                    newSiteLogisticsLocation.Site = newInventSite.RecId;
                    newSiteLogisticsLocation.AttentionToAddressLine = siteLogisticsLocation.AttentionToAddressLine;
                    newSiteLogisticsLocation.IsDefault = siteLogisticsLocation.IsDefault;
                    newSiteLogisticsLocation.IsPostalAddress = siteLogisticsLocation.IsPostalAddress;
                    newSiteLogisticsLocation.IsPrimary = siteLogisticsLocation.IsPrimary;
                    newSiteLogisticsLocation.IsPrivate = siteLogisticsLocation.IsPrivate;
                    newSiteLogisticsLocation.Location = siteLogisticsLocation.Location;
                        
                    if(newSiteLogisticsLocation.validateWrite())
                    {
                        newSiteLogisticsLocation.insert();

                        InventSiteLogisticsLocationRole siteLogisticsLocationRole;
                        InventSiteLogisticsLocationRole newSiteLogisticsLocationRole;

                        while select siteLogisticsLocationRole
                        where siteLogisticsLocationRole.SiteLogisticsLocation == siteLogisticsLocation.RecId
                            
                        {
                            newSiteLogisticsLocationRole.clear();
                            newSiteLogisticsLocationRole.SiteLogisticsLocation = newSiteLogisticsLocation.RecId;
                            newSiteLogisticsLocationRole.LocationRole = siteLogisticsLocationRole.LocationRole;

                            if(newSiteLogisticsLocationRole.validateWrite())
                            {
                                newSiteLogisticsLocationRole.insert();
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRCopyInventLocation</Name>
				<Source><![CDATA[
    private static void DNRCopyInventLocation()
    {

        //Create InventLocation
        InventLocation      inventLocation;
        InventLocation      newInventLocation;

        while select crosscompany : [dataAreaCopyFrom] inventLocation
        {
            newInventLocation.clear();
            newInventLocation.WarehouseAutoReleaseReservation = inventLocation.WarehouseAutoReleaseReservation;
            newInventLocation.WMSRackNameActive = inventLocation.WMSRackNameActive;
            newInventLocation.WMSRackFormat = inventLocation.WMSRackFormat;
            newInventLocation.WMSPositionNameActive = inventLocation.WMSPositionNameActive ;
            newInventLocation.WMSPositionFormat = inventLocation.WMSPositionFormat;
            newInventLocation.WMSLevelFormat = inventLocation.WMSLevelFormat;
            newInventLocation.WMSLevelNameActive = inventLocation.WMSLevelNameActive;
            newInventLocation.WMSAisleNameActive = inventLocation.WMSAisleNameActive;
            newInventLocation.WHSRawMaterialPolicy = inventLocation.WHSRawMaterialPolicy;
            newInventLocation.WHSEnabled = inventLocation.WHSEnabled;
            newInventLocation.UniqueCheckDigits = inventLocation.UniqueCheckDigits;
            newInventLocation.RetailWeightEx1 = inventLocation.RetailWeightEx1;
            newInventLocation.RetailInventNegPhysical = inventLocation.RetailInventNegPhysical;
            newInventLocation.RetailInventNegFinancial = inventLocation.RetailInventNegFinancial;
            newInventLocation.ReserveAtLoadPost = inventLocation.ReserveAtLoadPost;
            newInventLocation.ReqRefill = inventLocation.ReqRefill;
            newInventLocation.InventLocationIdReqMain = inventLocation.InventLocationIdReqMain;
            newInventLocation.RemoveInventBlockingOnStatusChange = inventLocation.RemoveInventBlockingOnStatusChange;
            newInventLocation.ProdReserveOnlyWhse = inventLocation.ProdReserveOnlyWhse;
            newInventLocation.PrintBOLBeforeShipConfirm = inventLocation.PrintBOLBeforeShipConfirm;
            newInventLocation.NumberSequenceGroup_RU = inventLocation.NumberSequenceGroup_RU;
            newInventLocation.Name = inventLocation.Name;
            newInventLocation.Manual  = inventLocation.Manual;
            newInventLocation.InventSiteId = inventLocation.InventSiteId;
            newInventLocation.InventProfileType_RU = inventLocation.InventProfileType_RU;
            newInventLocation.InventLocationType = inventLocation.InventLocationType;
            newInventLocation.InventLocationLevel = inventLocation.InventLocationLevel;
            newInventLocation.InventLocationId = inventLocation.InventLocationId;
            newInventLocation.InventCountingGroup_BR = inventLocation.InventCountingGroup_BR;
            newInventLocation.FSHStore = inventLocation.FSHStore;
            newInventLocation.DecrementLoadLine = inventLocation.DecrementLoadLine;
            newInventLocation.CycleCountAllowPalletMove = inventLocation.CycleCountAllowPalletMove;
            newInventLocation.ConsolidateShipAtRTW = inventLocation.ConsolidateShipAtRTW;
            newInventLocation.BranchNumber = inventLocation.BranchNumber;
            newInventLocation.AllowMarkingReservationRemoval = inventLocation.AllowMarkingReservationRemoval;
            newInventLocation.AllowLaborStandards = inventLocation.AllowLaborStandards;
            newInventLocation.ActivityType_RU = inventLocation.ActivityType_RU;
        
            //Extensions Fields
            newInventLocation.RORNumberSequenceGroup = inventLocation.RORNumberSequenceGroup;
            newInventLocation.FINDefaultDimension = inventLocation.FINDefaultDimension;
            newInventLocation.RORVATNum = inventLocation.RORVATNum;
            newInventLocation.DNRSourceEntity = inventLocation.DNRSourceEntity;

            if(newInventLocation.validateWrite())
            {
                newInventLocation.insert();

                InventLocationLogisticsLocation logisticsLocation;
                InventLocationLogisticsLocation newLogisticsLocation;
                
                while select logisticsLocation
                where logisticsLocation.InventLocation == inventLocation.RecId
                {
                    newLogisticsLocation.clear();
                    newLogisticsLocation.InventLocation = newInventLocation.RecId;
                    newLogisticsLocation.AttentionToAddressLine = logisticsLocation.AttentionToAddressLine;
                    newLogisticsLocation.IsDefault = logisticsLocation.IsDefault;
                    newLogisticsLocation.IsPostalAddress = logisticsLocation.IsPostalAddress;
                    newLogisticsLocation.IsPrimary = logisticsLocation.IsPrimary;
                    newLogisticsLocation.IsPrivate = logisticsLocation.IsPrivate;
                    newLogisticsLocation.Location = logisticsLocation.Location;
                    
                    if(newLogisticsLocation.validateWrite())
                    {
                        newLogisticsLocation.insert();

                        InventLocationLogisticsLocationRole newLogisticsLocationRole;
                        InventLocationLogisticsLocationRole logisticsLocationRole;

                        while select logisticsLocationRole
                        where logisticsLocationRole.LocationLogisticsLocation == logisticsLocation.RecId
                        {
                            newLogisticsLocationRole.clear();
                            newLogisticsLocationRole.LocationLogisticsLocation = newLogisticsLocation.RecId;
                            newLogisticsLocationRole.LocationRole = logisticsLocationRole.LocationRole;
                            if(newLogisticsLocationRole.validateWrite())
                            {
                                newLogisticsLocationRole.insert();
                            }
                        }

                    }
                }

            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRCopyProjGroup</Name>
				<Source><![CDATA[
    private static void DNRCopyProjGroup()
    {
        ProjGroup   projGroup;
        ProjGroup   newProjGroup;

        while select crosscompany : [dataAreaCopyFrom] projGroup
        {
            newProjGroup.clear();
            newProjGroup.SalesPriceMatchingPrincip = projGroup.SalesPriceMatchingPrincip;
            newProjGroup.RevenueTransTurnover = projGroup.RevenueTransTurnover;
            newProjGroup.projType = projGroup.projType;
            newProjGroup.ProjLinePropertySearch = projGroup.ProjLinePropertySearch;
            newProjGroup.ProjGroupId = projGroup.ProjGroupId;
            newProjGroup.Name = projGroup.Name;
            newProjGroup.MatchingPrincip = projGroup.MatchingPrincip;
            newProjGroup.LedgerPosting = projGroup.LedgerPosting;
            newProjGroup.ItemTransTurnover = projGroup.ItemTransTurnover;
            newProjGroup.ItemTransCost = projGroup.ItemTransCost;
            newProjGroup.InvoicePosting = projGroup.InvoicePosting;
            newProjGroup.ForeseablesLosses = projGroup.ForeseablesLosses;
            newProjGroup.EmplTransTurnover = projGroup.EmplTransTurnover;
            newProjGroup.EmplTransCost = projGroup.EmplTransCost;
            newProjGroup.CostTransTurnover = projGroup.CostTransTurnover ;
            newProjGroup.costTransCost = projGroup.costTransCost;
            newProjGroup.CompletePrincip = projGroup.CompletePrincip;
            newProjGroup.CheckBudget = projGroup.CheckBudget;

            // Extensions Fields
            newProjGroup.WPPReceivingCompany = projGroup.WPPReceivingCompany;
            newProjGroup.WPPWorkOrderType = projGroup.WPPWorkOrderType;
            newProjGroup.WPPIncludeNotObtainedAsset = projGroup.WPPIncludeNotObtainedAsset;
            newProjGroup.WPPTransferValueType = projGroup.WPPTransferValueType;
            newProjGroup.FINCustCreditCheckType = projGroup.FINCustCreditCheckType;

            if(newProjGroup.validateWrite())
            {
                newProjGroup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRCopySharedData</Name>
				<Source><![CDATA[
    private static void DNRCopySharedData(selectableDataArea _company)
    {
        try
        {
            InventSite  inventSite;
            ProjGroup   projGroup;

            select firstonly crosscompany inventSite
            where inventSite.DataAreaId != _company;

            if(inventSite)
            {
                dataAreaCopyFrom = inventSite.DataAreaId;
            }
            else
            {
                select firstonly crosscompany projGroup
                where projGroup.DataAreaId != _company;
                
                if(projGroup)
                {
                    dataAreaCopyFrom = projGroup.DataAreaId;
                }
                else
                {
                    return;
                }
            }


            dataAreaCopyTo = _company;

            ttsbegin;
            
            changecompany(dataAreaCopyTo)
            {
                DNRCrossCompanySynchronizer::setTransDataAreaId(_company);
                OMNewLegalEntityViewModel::DNRCopyInventSite();
                OMNewLegalEntityViewModel::DNRCopyInventLocation();
                OMNewLegalEntityViewModel::DNRCopyProjGroup();
            }

            ttscommit;
        }

        finally
        {
            DNRCrossCompanySynchronizer::setTransDataAreaId('');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>