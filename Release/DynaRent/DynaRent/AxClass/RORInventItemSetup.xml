<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORInventItemSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORInventItemSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findTaxItemGroupFromRentalLine</Name>
				<Source><![CDATA[
    public static client server TaxItemGroup findTaxItemGroupFromRentalLine(RORRentalLine       _rentalLine,
                                                                            InventTableModule   _inventTableModule,
                                                                            boolean             _forUpdate = false)
    {
        TaxItemGroup        taxItemGroup;
        boolean             throwError = false;
    
        switch (_rentalLine.TradeType)
        {
            case RORTradeType::Rental:
                //taxItemGroup = RORInventItemRentalSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).TaxItemGroup;
                taxItemGroup = RORInventItemRentalSetup::findDefault(_rentalLine.ItemId).TaxItemGroup;
                break;
    
            case RORTradeType::SubRental:
                switch (_rentalLine.TableId)
                {
                    case tableNum(SalesLine), tableNum(SalesQuotationLine):
                        //taxItemGroup = RORInventItemRentalSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).TaxItemGroup;
                        taxItemGroup = RORInventItemRentalSetup::findDefault(_rentalLine.ItemId).TaxItemGroup;
                        break;
    
                    default :
                        //taxItemGroup = RORInventItemSubRentalSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).TaxItemGroup;
                        taxItemGroup = RORInventItemSubRentalSetup::findDefault(_rentalLine.ItemId).TaxItemGroup;
                }
                break;
    
            case RORTradeType::SalesPurch:
                switch (_rentalLine.TableId)
                {
                    case tableNum(SalesLine), tableNum(SalesQuotationLine), tableNum(PurchLine):
                        taxItemGroup = _inventTableModule.TaxItemGroupId;
                        break;
    
                    default:
                        throwError = true;
                        break;
                }
                break;
    
            default:
                throwError = true;
                break;
        }
    
        if (throwError)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkOrderTemplateIdFromRentalLine</Name>
				<Source><![CDATA[
    public static client server WPPWorkOrderTemplateId findWorkOrderTemplateIdFromRentalLine(RORRentalLine  _rentalLine,
                                                                                             InventTable    _inventTable,
                                                                                             boolean        _forUpdate = false)
    {
        WPPWorkOrderTemplateId  workOrderTemplateId;
        boolean                 throwError = false;
    
        switch (_rentalLine.TradeType)
        {
            case RORTradeType::Rental:
                //workOrderTemplateId = RORInventItemRentalSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).WPPWorkOrderTemplateId;
                workOrderTemplateId = RORInventItemRentalSetup::findDefault(_rentalLine.ItemId).WPPWorkOrderTemplateId;
                break;
    
            case RORTradeType::SubRental:
                switch (_rentalLine.TableId)
                {
                    case tableNum(SalesLine), tableNum(SalesQuotationLine):
                        //workOrderTemplateId = RORInventItemRentalSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).WPPWorkOrderTemplateId;
                        workOrderTemplateId = RORInventItemRentalSetup::findDefault(_rentalLine.ItemId).WPPWorkOrderTemplateId;
                        break;
    
                    default :
                        //workOrderTemplateId = RORInventItemSubRentalSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).WPPWorkOrderTemplateId;
                        workOrderTemplateId = RORInventItemSubRentalSetup::findDefault(_rentalLine.ItemId).WPPWorkOrderTemplateId;
                }
                break;
    
            case RORTradeType::SalesPurch:
                switch (_rentalLine.TableId)
                {
                    case tableNum(SalesLine), tableNum(SalesQuotationLine):
                        //workOrderTemplateId = InventItemSalesSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).WPPWorkOrderTemplateId;
                        workOrderTemplateId = InventItemSalesSetup::findDefault(_rentalLine.ItemId).WPPWorkOrderTemplateId;
                        break;
    
                    case tableNum(PurchLine):
                        //workOrderTemplateId = InventItemPurchSetup::find(_rentalLine.ItemId, _rentalLine.InventDimId).WPPWorkOrderTemplateId;
                        workOrderTemplateId = InventItemPurchSetup::findDefault(_rentalLine.ItemId).WPPWorkOrderTemplateId;
                        break;
    
                    default:
                        throwError = true;
                        break;
                }
                break;
    
            default:
                throwError = true;
                break;
        }
    
        if (throwError)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        // When the template is not active then return an empty string
        if (!WPPWorkOrderTemplateTable::find(workOrderTemplateId).Active)
        {
            workOrderTemplateId = '';
        }
    
        return workOrderTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    public static client server TaxItemGroup getTaxItemGroup(RORRentalLine      _rentalLine,
                                                             InventTableModule  _inventTableModule)
    {
        TaxItemGroup ret = RORInventItemSetup::findTaxItemGroupFromRentalLine(_rentalLine, _inventTableModule);
        ;
    
        if (!ret)
        {
            ret = _inventTableModule.TaxItemGroupId;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderTemplateId</Name>
				<Source><![CDATA[
    public static client server WPPWorkOrderTemplateId getWorkOrderTemplateId(RORRentalLine _rentalLine,
                                                                              InventTable   _inventTable)
    {
        WPPWorkOrderTemplateId workOrderTemplateId;
    
        workOrderTemplateId = RORInventItemSetup::findWorkOrderTemplateIdFromRentalLine(_rentalLine, _inventTable);
    
        return workOrderTemplateId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>