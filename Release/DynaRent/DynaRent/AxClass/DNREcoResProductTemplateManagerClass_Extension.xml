<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNREcoResProductTemplateManagerClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(EcoResProductTemplateManager))]
public final class DNREcoResProductTemplateManagerClass_Extension
{
    #DNRConstants

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourcesNameList</Name>
				<Source><![CDATA[
    public List dataSourcesNameList()
    {
        List ret = next dataSourcesNameList();

        ret.addEnd(#InventItemPurchSetup);
        ret.addEnd(#InventItemSalesSetup);
        ret.addEnd(#InventItemInventSetup);
        ret.addEnd(#RORInventItemRentalSetup);
        ret.addEnd(#RORInventItemSubRentalSetup);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourcesRecordList</Name>
				<Source><![CDATA[
    public List dataSourcesRecordList()
    {
        InventTable     inventTable;
        List            ret = next dataSourcesRecordList();

        // *** Repeated code
        Set             dataSourcesNameSet = this.dataSourcesNameSet();

        for (int i = 1; i <= recordTemplateFormRun.dataSourceCount(); i++)
        {
            FormDataSource formDataSource  = recordTemplateFormRun.dataSource(i);
            if (dataSourcesNameSet.in(formDataSource.name()))
            {
                if (formDataSource.table() == tableNum(InventTable))
                {
                    inventTable = formDataSource.cursor() as InventTable;
                }
            }
        }

        if (inventTable)
        {
            ret.addEnd(Global::buf2Con(InventItemPurchSetup::findDefault(inventTable.ItemId)));
            ret.addEnd(Global::buf2Con(InventItemSalesSetup::findDefault(inventTable.ItemId)));
            ret.addEnd(Global::buf2Con(InventItemInventSetup::findDefault(inventTable.ItemId)));
            ret.addEnd(Global::buf2Con(RORInventItemRentalSetup::findDefault(inventTable.ItemId)));
            ret.addEnd(Global::buf2Con(RORInventItemSubRentalSetup::findDefault(inventTable.ItemId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_getBufferByDataSourceNameDelegate</Name>
				<Source><![CDATA[
    // data event handler methods

    [SubscribesTo(classStr(EcoResProductTemplateManager), delegateStr(EcoResProductTemplateManager, getBufferByDataSourceNameDelegate))]
    public static void DNREvent_getBufferByDataSourceNameDelegate(str _formDataSourceName, ItemId _itemId, boolean _forUpdate, EventHandlerResult _result)
    {
        Common                          common;
        InventItemPurchSetup            inventItemPurchSetup;
        InventItemSalesSetup            inventItemSalesSetup;
        InventItemInventSetup           inventItemInventSetup;
        RORInventItemRentalSetup        inventItemRentalSetup;
        RORInventItemSubRentalSetup     inventItemSubRentalSetup;

        switch(_formDataSourceName)
        {
            case #InventItemPurchSetup:
                inventItemPurchSetup        = InventItemPurchSetup::findDefault(_itemId, _forUpdate);
                inventItemPurchSetup.ItemId = _itemId;
                common                      = inventItemPurchSetup;
                break;
    
            case #InventItemSalesSetup:
                inventItemSalesSetup        = InventItemSalesSetup::findDefault(_itemId, _forUpdate);
                inventItemSalesSetup.ItemId = _itemId;
                common                      = inventItemSalesSetup;
                break;

            case #InventItemInventSetup:
                inventItemInventSetup        = InventItemInventSetup::findDefault(_itemId, _forUpdate);
                inventItemInventSetup.ItemId = _itemId;
                common                       = inventItemInventSetup;
                break;
    
            case #RORInventItemRentalSetup:
                inventItemRentalSetup        = RORInventItemRentalSetup::findDefault(_itemId, _forUpdate);
                inventItemRentalSetup.ItemId = _itemId;
                common                       = inventItemRentalSetup;
                break;
    
            case #RORInventItemSubRentalSetup:
                inventItemSubRentalSetup        = RORInventItemSubRentalSetup::findDefault(_itemId, _forUpdate);
                inventItemSubRentalSetup.ItemId = _itemId;
                common                          = inventItemSubRentalSetup;
                break;
        }

        _result.result(common);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>