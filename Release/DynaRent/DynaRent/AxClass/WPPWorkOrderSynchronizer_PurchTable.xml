<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderSynchronizer_PurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPWorkOrderSynchronizer_PurchTable extends WPPWorkOrderSynchronizer
{
    PurchTable  purchTable;
    boolean     workOrderCreated;

    [SysObsolete("Variable orderLineReplacementMap is no longer used", false)]
    Map orderLineReplacementMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun_Line</Name>
				<Source><![CDATA[
    protected QueryRun buildQueryRun_Line()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsPurchLine              = query.addDataSource(tableNum(PurchLine));
        QueryBuildDataSource qbdsWorkOrderTemplateTable = qbdsPurchLine.addDataSource(tableNum(WPPWorkOrderTemplateTable));
        QueryBuildDataSource qbdsWorkOrderTemplateLine  = qbdsWorkOrderTemplateTable.addDataSource(tableNum(WPPWorkOrderTemplateLine));
        QueryBuildDataSource qbdsWorkOrderTaskTable     = qbdsWorkOrderTemplateLine.addDataSource(tableNum(WPPWorkOrderTaskTable));

        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, InventDimId));
        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, RORKitComponentType));
        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, ItemId));
        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, RORRecIdExchanged));
        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, PurchQty));
        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, QtyOrdered));
        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, TableId));
        qbdsPurchLine.addSelectionField(fieldNum(PurchLine, RecId));
        qbdsPurchLine.addOrderByField(fieldNum(PurchLine, RecId));
        qbdsPurchLine.relations(false);
        qbdsPurchLine.addRange(fieldNum(PurchLine, PurchId)).value(purchTable.PurchId);
        qbdsPurchLine.addRange(fieldNum(PurchLine, WPPWorkOrderTemplateId)).value(SysQuery::valueNotEmptyString());

        qbdsWorkOrderTemplateTable.joinMode(JoinMode::InnerJoin);
        qbdsWorkOrderTemplateTable.relations(false);
        qbdsWorkOrderTemplateTable.addLink(fieldNum(PurchLine, WPPWorkOrderTemplateId), fieldNum(WPPWorkOrderTemplateTable, TemplateId));

        // Need to select the whole workOrderTemplateLine, otherwise the update of ParentLineRecId
        // on the work order line will fail
        qbdsWorkOrderTemplateLine.addOrderByField(fieldNum(WPPWorkOrderTemplateLine, LineNumber));
        qbdsWorkOrderTemplateLine.joinMode(JoinMode::InnerJoin);
        qbdsWorkOrderTemplateLine.relations(false);
        qbdsWorkOrderTemplateLine.addLink(fieldNum(WPPWorkOrderTemplateTable, TemplateId), fieldNum(WPPWorkOrderTemplateLine, TemplateId));

        qbdsWorkOrderTaskTable.addSelectionField(fieldNum(WPPWorkOrderTaskTable, WorkOrderStatusGroupId));
        qbdsWorkOrderTaskTable.joinMode(JoinMode::InnerJoin);
        qbdsWorkOrderTaskTable.relations(false);
        qbdsWorkOrderTaskTable.addLink(fieldNum(WPPWorkOrderTemplateLine, TaskId), fieldNum(WPPWorkOrderTaskTable, TaskId));

        QueryRun queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkObjectSubGroup</Name>
				<Source><![CDATA[
    protected boolean checkObjectSubGroup(SalesPurchLine              _purchLine,
                                          WPPWorkOrderTemplateLine    _workOrderTemplateLine)
    {
        boolean ret;
    
        if ((!_workOrderTemplateLine.BOBObjectGroupId && !_workOrderTemplateLine.BOBObjectSubGroupId)
        || ((_workOrderTemplateLine.BOBObjectGroupId || _workOrderTemplateLine.BOBObjectGroupId)
        &&   _purchLine.BOBcheckContainsObjectGroupSubGroup(_workOrderTemplateLine.BOBObjectGroupId, _workOrderTemplateLine.BOBObjectSubGroupId)))
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderLinked_Line</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private void generateWorkOrder_OrderLinked_Line()
    {
        PurchLine                   purchLine;
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        RecId                       purchLineRecIdPrev;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        WPPWorkOrderLine            workOrderLine;
        boolean                     projectCreated;
        boolean                     registrationAllowed;
        boolean                     createWorkOrderLine;
    
        this.initMaps();
    
        QueryRun queryRun = this.buildQueryRun_Line();

        while (queryRun.next())
        {
            purchLine               = queryRun.get(tableNum(PurchLine));
            workOrderTemplateTable  = queryRun.get(tableNum(WPPWorkOrderTemplateTable));
            workOrderTemplateLine   = queryRun.get(tableNum(WPPWorkOrderTemplateLine));
            workOrderTaskTable      = queryRun.get(tableNum(WPPWorkOrderTaskTable));

            createWorkOrderLine = true;
    
            // Check whether a work order already exists, then don't create another one
            if (purchLine.RecId != purchLineRecIdPrev)
            {
                // Update the work order line when another purchline is selected
                if (purchLineRecIdPrev)
                {
                    this.updateWorkOrderLine();
                    this.initMaps();
                }
    
                projGroup = workOrderTemplateTable.projGroup();
                workOrderTable = WPPWorkOrderTable::findFromOrder(purchLine.TableId, purchLine.RecId, true);
    
                if (workOrderTable)
                {
                    if (purchTable)
                    {
                        workOrderTable.initFromPurchTable(purchTable);
                        if (purchLine.RORVenueCode)
                        {
                            workOrderTable.RORVenueCode = purchLine.RORVenueCode;
                        }
                        workOrderTable.update();
                    }
    
                    projectCreated  = false;
                    workOrderCreated = false;
                    purchLineRecIdPrev = purchLine.RecId;
                }
            }
    
            if (workOrderTable
            &&  !workOrderCreated)
            {
                this.findWorkOrderLine(workOrderTemplateLine, purchLine.TableId, purchLine.RecId, purchLine, true);
    
                createWorkOrderLine = !this.checkWorkOrderLineExistence(workOrderTemplateLine, workOrderTable.WorkOrderId);
                lineNumber = createWorkOrderLine ? WPPWorkOrderLine::lastLineNumber(workOrderTable.WorkOrderId) : lineNumber;
            }
    
            if (createWorkOrderLine)
            {
                registrationAllowed = WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId);
    
                if (this.internalProject(projGroup))
                {
                    projGroup = workOrderTemplateTable.projGroup();
    
                    // Create one invoice project for all projects
                    // Create new projects (one per task)
                    projTable = this.createProject(projGroup.projType,
                                                   projGroup.ProjGroupId,
                                                   '',
                                                   false,
                                                   '',
                                                   '',
                                                   '',
                                                   '',
                                                   '',
                                                   true);
                }
    
                if (projTable
                &&  this.checkCreateActivity())
                {
                    // Create activities
                    this.createActivity(projTable, workOrderTemplateLine.TaskId);
                }
    
                // Create one work order per sales line
                if (purchLine.RecId != purchLineRecIdPrev)
                {
                    // Create a new work order header
                    workOrderTable = this.createWorkOrder(purchLine,
                                                          purchTable,
                                                          projTable,
                                                          projGroup,
                                                          workOrderTemplateTable);
                    lineNumber         = 1;
                    purchLineRecIdPrev = purchLine.RecId;
                    workOrderCreated   = true;
                }
                else
                {
                    lineNumber++;
                }
    
                // Create new work order lines
                workOrderLine = this.createWorkOrderLine(registrationAllowed ? projTable : null,
                                                         workOrderTable,
                                                         workOrderTemplateLine,
                                                         this.checkObjectSubGroup(purchLine, workOrderTemplateLine),
                                                         purchLine);
    
                this.copyTaskRequirements(workOrderLine, workOrderTable);
            }
        }
    
        this.updateWorkOrderLine();
    
        if (projectCreated)
        {
            this.updateSourceTable(projTable.ProjId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderLinked_Table</Name>
				<Source><![CDATA[
    private void generateWorkOrder_OrderLinked_Table()
    {
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        WPPWorkOrderLine            workOrderLine;
        boolean                     projectCreated;
        boolean                     registrationAllowed;
        boolean                     checkExistingWorkOrder;
    
        if (purchTable.WPPWorkOrderTemplateId)
        {
            checkExistingWorkOrder = true;
    
            this.initMaps();
    
            // Need to select the whole workOrderTemplateLine, otherwise the update of ParentLineRecId
            // on the work order line will fail
            while select workOrderTemplateTable
            order by workOrderTemplateLine.LineNumber
            where workOrderTemplateTable.TemplateId == purchTable.WPPWorkOrderTemplateId
                join workOrderTemplateLine
                where workOrderTemplateLine.TemplateId == workOrderTemplateTable.TemplateId
                    join WorkOrderStatusGroupId from workOrderTaskTable
                    where workOrderTaskTable.TaskId == workOrderTemplateLine.TaskId
            {
                // Check whether a work order already exists, then don't create another one
                if (checkExistingWorkOrder)
                {
                    projGroup = workOrderTemplateTable.projGroup();
                    workOrderTable = WPPWorkOrderTable::findFromOrder(purchTable.TableId, purchTable.RecId, true);
    
                    if (workOrderTable)
                    {
                        if (purchTable)
                        {
                            workOrderTable.initFromPurchTable(purchTable);
                            workOrderTable.update();
                        }
    
                        projectCreated  = false;
                        workOrderCreated = false;
                    }
    
                    checkExistingWorkOrder = false;
                }
    
                if (workOrderTable
                &&  !workOrderCreated)
                {
                    this.findWorkOrderLine(workOrderTemplateLine, purchTable.TableId, purchTable.RecId, null);
                }
                else
                {
                    registrationAllowed = WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId);
    
                    if (this.internalProject(projGroup))
                    {
                        projGroup = workOrderTemplateTable.projGroup();
    
                        // Create one invoice project for all projects
                        // Create new projects (one per task)
                        projTable = this.createProject(projGroup.projType,
                                                       projGroup.ProjGroupId,
                                                       '',
                                                       false,
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       true);
                    }
    
                    if (projTable
                    &&  this.checkCreateActivity())
                    {
                        // Create activities
                        this.createActivity(projTable, workOrderTemplateLine.TaskId);
                    }
    
                    // Create one work order per sub rental order/purchase order
                    if (!lineNumber)
                    {
                        // Create a new work order header
                        workOrderTable = this.createWorkOrder(null,
                                                              purchTable,
                                                              projTable,
                                                              projGroup,
                                                              workOrderTemplateTable);
                    }
    
                    lineNumber++;
    
                    // Create new work order lines
                    workOrderLine = this.createWorkOrderLine(registrationAllowed ? projTable : null,
                                                             workOrderTable,
                                                             workOrderTemplateLine,
                                                             true);
    
                    this.copyTaskRequirements(workOrderLine, workOrderTable);
    
                    workOrderCreated = true;
                }
            }
    
            this.updateWorkOrderLine();
    
            if (projectCreated)
            {
                this.updateSourceTable(projTable.ProjId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderNotLinked_Line</Name>
				<Source><![CDATA[
    private void generateWorkOrder_OrderNotLinked_Line()
    {
        PurchLine                   purchLine;
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        RecId                       purchLineRecIdPrev;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        WPPWorkOrderLine            workOrderLine;
        boolean                     createWorkOrderLine;
    
        this.initMaps();
    
        QueryRun queryRun = this.buildQueryRun_Line();

        while (queryRun.next())
        {
            purchLine               = queryRun.get(tableNum(PurchLine));
            workOrderTemplateTable  = queryRun.get(tableNum(WPPWorkOrderTemplateTable));
            workOrderTemplateLine   = queryRun.get(tableNum(WPPWorkOrderTemplateLine));
            workOrderTaskTable      = queryRun.get(tableNum(WPPWorkOrderTaskTable));

            createWorkOrderLine = true;
    
            // Check whether a work order already exists, then don't create another one
            if (purchLine.RecId != purchLineRecIdPrev)
            {
                // Update the work order line when another purchline is selected
                if (purchLineRecIdPrev)
                {
                    this.updateWorkOrderLine();
                    this.initMaps();
                }
    
                workOrderTable = WPPWorkOrderTable::findFromOrder(purchLine.TableId, purchLine.RecId, true);
                projGroup = workOrderTemplateTable.projGroup();
    
                if (workOrderTable)
                {
                    if (purchTable)
                    {
                        workOrderTable.initFromPurchTable(purchTable);
                        if (purchLine.RORVenueCode)
                        {
                            workOrderTable.RORVenueCode = purchLine.RORVenueCode;
                        }
                        workOrderTable.update();
                    }
    
                    workOrderCreated = false;
                    purchLineRecIdPrev = purchLine.RecId;
                }
            }
    
            if (workOrderTable
            &&  !workOrderCreated)
            {
                this.findWorkOrderLine(workOrderTemplateLine, purchLine.TableId, purchLine.RecId, purchLine, true);
    
                createWorkOrderLine = !this.checkWorkOrderLineExistence(workOrderTemplateLine, workOrderTable.WorkOrderId);
                lineNumber = createWorkOrderLine ? WPPWorkOrderLine::lastLineNumber(workOrderTable.WorkOrderId) : lineNumber;
            }
    
            if (createWorkOrderLine)
            {
                projTable = null;
    
                // if registrations are allowed then create a new ax project
                if (WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId)
                &&  this.internalProject(projGroup))
                {
                    projGroup = workOrderTemplateTable.projGroup();
    
                    // Create one invoice project for all projects
                    // Create new projects (one per task)
                    projTable = this.createProject(projGroup.projType,
                                                   projGroup.ProjGroupId,
                                                   '',
                                                   false,
                                                   '',
                                                   '',
                                                   '',
                                                   '',
                                                   '',
                                                   true);
                }
    
                if (projTable
                &&  this.checkCreateActivity())
                {
                    // Create activities
                    this.createActivity(projTable, workOrderTemplateLine.TaskId);
                }
    
                // Create one work order per sales line
                if (purchLine.RecId != purchLineRecIdPrev)
                {
                    // Create a new work order header
                    workOrderTable = this.createWorkOrder(purchLine,
                                                          purchTable,
                                                          projTable,
                                                          projGroup,
                                                          workOrderTemplateTable);
                    lineNumber         = 1;
                    purchLineRecIdPrev = purchLine.RecId;
                    workOrderCreated   = true;
                }
                else
                {
                    lineNumber++;
                }
    
                // Create new work order lines
                workOrderLine = this.createWorkOrderLine(projTable,
                                                         workOrderTable,
                                                         workOrderTemplateLine,
                                                         this.checkObjectSubGroup(purchLine, workOrderTemplateLine),
                                                         purchLine);
    
                this.copyTaskRequirements(workOrderLine, workOrderTable);
            }
        }
    
        this.updateWorkOrderLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkOrder_OrderNotLinked_Table</Name>
				<Source><![CDATA[
    private void generateWorkOrder_OrderNotLinked_Table()
    {
        WPPWorkOrderTemplateLine    workOrderTemplateLine;
        WPPWorkOrderTemplateTable   workOrderTemplateTable;
        WPPWorkOrderTaskTable       workOrderTaskTable;
        ProjGroup                   projGroup;
        ProjTable                   projTable;
        WPPWorkOrderTable           workOrderTable;
        WPPWorkOrderLine            workOrderLine;
        boolean                     checkExistingWorkOrder;
    
        if (purchTable.WPPWorkOrderTemplateId)
        {
            checkExistingWorkOrder = true;
    
            this.initMaps();
    
            // Need to select the whole workOrderTemplateLine, otherwise the update of ParentLineRecId
            // on the work order line will fail
            while select workOrderTemplateTable
            order by workOrderTemplateLine.LineNumber
            where workOrderTemplateTable.TemplateId == purchTable.WPPWorkOrderTemplateId
                join workOrderTemplateLine
                where workOrderTemplateLine.TemplateId == workOrderTemplateTable.TemplateId
                    join WorkOrderStatusGroupId from workOrderTaskTable
                    where workOrderTaskTable.TaskId == workOrderTemplateLine.TaskId
            {
                // Check whether a work order already exists, then don't create another one
                if (checkExistingWorkOrder)
                {
                    workOrderTable = WPPWorkOrderTable::findFromOrder(purchTable.TableId, purchTable.RecId, true);
                    projGroup = workOrderTemplateTable.projGroup();
    
                    if (workOrderTable)
                    {
                        if (purchTable)
                        {
                            workOrderTable.initFromPurchTable(purchTable);
                            workOrderTable.update();
                        }
    
                        workOrderCreated = false;
                    }
    
                    checkExistingWorkOrder = false;
                }
    
                if (workOrderTable
                &&  !workOrderCreated)
                {
                    this.findWorkOrderLine(workOrderTemplateLine, purchTable.TableId, purchTable.RecId, null);
                }
                else
                {
                    projTable = null;
    
                    // if registrations are allowed then create a new ax project
                    if (WPPWorkOrderStatusRegistration::registrationAllowed(workOrderTaskTable.WorkOrderStatusGroupId)
                    &&  this.internalProject(projGroup))
                    {
                        projGroup = workOrderTemplateTable.projGroup();
    
                        // Create one invoice project for all projects
                        // Create new projects (one per task)
                        projTable = this.createProject(projGroup.projType,
                                                       projGroup.ProjGroupId,
                                                       '',
                                                       false,
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       true);
                    }
    
                    if (projTable
                    &&  this.checkCreateActivity())
                    {
                        // Create activities
                        this.createActivity(projTable, workOrderTemplateLine.TaskId);
                    }
    
                    // Create one work order per sub rental order/purchase order
                    if (!lineNumber)
                    {
                        // Create a new work order header
                        workOrderTable = this.createWorkOrder(null,
                                                              purchTable,
                                                              projTable,
                                                              projGroup,
                                                              workOrderTemplateTable);
                    }
    
                    lineNumber++;
    
                    // Create new work order lines
                    workOrderLine = this.createWorkOrderLine(projTable,
                                                             workOrderTable,
                                                             workOrderTemplateLine,
                                                             true);
    
                    this.copyTaskRequirements(workOrderLine, workOrderTable);
    
                    workOrderCreated = true;
                }
            }
    
            this.updateWorkOrderLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalProject</Name>
				<Source><![CDATA[
    private boolean internalProject(ProjGroup _projGroup)
    {
        boolean ret;
    
        if (_projGroup.projType == ProjType::Internal
        ||  _projGroup.projType == ProjType::Investment
        ||  _projGroup.projType == ProjType::Cost
        ||  _projGroup.projType == ProjType::Time)
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PurchTable _purchTable)
    {
        super();
    
        purchTable = _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _purchTable = purchTable)
    {
        purchTable = _purchTable as PurchTable;
    
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsBegin;
        if (purchTable.WPPIsRentalProject)
        {
            this.generateWorkOrder_OrderLinked_Table();
            this.generateWorkOrder_OrderLinked_Line();
        }
        else
        {
            this.generateWorkOrder_OrderNotLinked_Table();
            this.generateWorkOrder_OrderNotLinked_Line();
        }
    
        super();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    private void updateSourceTable(ProjId _projId)
    {
        PurchTable  purchTableUpdate;
        PurchLine   purchLineUpdate;
    
        update_recordSet purchTableUpdate
        setting ProjId = _projId
        where purchTableUpdate.RecId == purchTable.RecId;
    
        update_recordSet purchLineUpdate
        setting ProjId = _projId
        where purchLineUpdate.PurchId == purchTable.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkOrderLine</Name>
				<Source><![CDATA[
    protected void updateWorkOrderLine()
    {
        PurchLine                       purchLine;
        MapEnumerator                   workOrderLineMapEnumerator;
        WPPWorkOrderLine                workOrderLine;
        WPPWorkOrderTemplateLine        workOrderTemplateLine;
        WPPWorkOrderDateTimeTemplate    workOrderDateTimeTemplate;
        WPPWorkOrderTable               workOrderTable;
        RORRentalDateTimes              rentalDateTimes;
        boolean                         updateWorkOrderLine;
    
        workOrderLineMapEnumerator = workOrderLineMap.getEnumerator();
    
        while (workOrderLineMapEnumerator.moveNext())
        {
            workOrderLine = WPPWorkOrderLine::findRecId(workOrderLineMapEnumerator.currentKey(), true);
            workOrderTemplateLine = workOrderLineMapEnumerator.currentValue();
            workOrderDateTimeTemplate = WPPWorkOrderDateTimeTemplate::find(workOrderTemplateLine.RecId);
            workOrderTable = workOrderLine.workOrderTable();
    
            if (( workOrderCreated && workOrderDateTimeTemplate.SynchMode != WPPDateTimeSynchMode::None)
            ||  (!workOrderCreated && workOrderDateTimeTemplate.SynchMode == WPPDateTimeSynchMode::KeepSynchronized))
            {
                purchLine = PurchLine::findRecId(workOrderTable.OrderRecId);
                rentalDateTimes = purchLine.RORRentalDateTimesHost::rentalDateTimes();
    
                workOrderLine.updateDate(fieldNum(WPPWorkOrderLine, RequestedStartDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                workOrderLine.updateDate(fieldNum(WPPWorkOrderLine, RequestedEndDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                workOrderLine.updateTime(fieldNum(WPPWorkOrderLine, RequestedStartDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                workOrderLine.updateTime(fieldNum(WPPWorkOrderLine, RequestedEndDateTime),
                                         workOrderTemplateLineMap,
                                         workOrderTemplateLine,
                                         workOrderDateTimeTemplate,
                                         rentalDateTimes);
    
                updateWorkOrderLine = true;
            }
    
            if (workOrderTemplateLine.ParentLineRecId)
            {
                workOrderLine.updateParentLineNumber(workOrderTemplateLine.TemplateId,
                                                        workOrderTemplateLine.ParentLineRecId,
                                                        workOrderTemplateLineMap);
    
                updateWorkOrderLine = true;
            }
    
            this.checkUpdateWorkOrderLine(workOrderLine, updateWorkOrderLine);
        }
    
        // At the very end, because, for example, in the previous loop
        // line 5 can be updated before 3, then the root is not set correctly
        this.updateRootLineRecId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>