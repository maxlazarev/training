<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesEditLinesFormClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesEditLinesForm))]
public final class DNRSalesEditLinesFormClass_Extension
{
    private BOBRentalSubStatus rentalSubStatus;

    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BOBTransTimeCaption</Name>
				<Source><![CDATA[
    public str BOBTransTimeCaption()
    {
        return "@SYS8827";
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCanShowCalculationPoint</Name>
				<Source><![CDATA[
    public boolean INVCanShowCalculationPoint()
    {
        if (this is SalesEditLinesForm_Invoice)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCanShowIncludeLines</Name>
				<Source><![CDATA[
    public boolean INVCanShowIncludeLines()
    {
        if (this is SalesEditLinesForm_Invoice)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREnablePostSubRental</Name>
				<Source><![CDATA[
    public boolean ROREnablePostSubRental(DocumentStatus _documentStatus)
    {
        PurchTable purchTable;

        if((_documentStatus == DocumentStatus::PackingSlip || _documentStatus == DocumentStatus::RORReturnNote)
        &&  salesTable.SalesType == SalesType::RORRental)
        {
            SalesLine salesLine;

            select firstOnly RecId from purchTable
            where purchTable.PurchaseType == PurchaseType::RORSubRental
                exists join salesLine
                where salesLine.InventRefId   == purchTable.PurchId
                &&    salesLine.inventRefType == InventRefType::Purch
                &&    salesLine.SalesId       == salesTable.SalesId;
        }
    
        return purchTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBparmRentalSubStatus</Name>
				<Source><![CDATA[
    public BOBRentalSubStatus BOBparmRentalSubStatus(BOBRentalSubStatus _rentalSubStatus = rentalSubStatus)
    {
        rentalSubStatus = _rentalSubStatus;
        return rentalSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPEnableDuplicateTask</Name>
				<Source><![CDATA[
    public boolean WPPEnableDuplicateTask(WPPWorkOrderId _workOrderId)
    {
        if (_workOrderId
        &&  (salesParmUpdate.DocumentStatus == DocumentStatus::PickingList  ||
             salesParmUpdate.DocumentStatus == DocumentStatus::PackingSlip  ||
             salesParmUpdate.DocumentStatus == DocumentStatus::RORSubStatus ||
             salesParmUpdate.DocumentStatus == DocumentStatus::RORReturnNote))
        {
            return true;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPobjectIsAvailable</Name>
				<Source><![CDATA[
    public NoYes WPPobjectIsAvailable(WPPWorkOrderId _workOrderId)
    {
        BOBObjectView       objectView;
        BOBObjectTable      objectTable;
        WPPWorkOrderTable   workOrderTable;
    
        select firstOnly IsAvailable from objectView
            exists join objectTable
            where objectTable.ObjectId == objectView.ObjectId
                join TableId from workOrderTable
                where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                &&    workOrderTable.WorkOrderId         == _workOrderId;
    
        return objectView.IsAvailable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>