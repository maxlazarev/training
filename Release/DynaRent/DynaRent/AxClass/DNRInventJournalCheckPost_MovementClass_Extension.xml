<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventJournalCheckPost_MovementClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventJournalCheckPost_Movement))]
public final class DNRInventJournalCheckPost_MovementClass_Extension
{
    private DNRInventJournalCheckPost_MovementStrategy strategy;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        InventJournalTrans                  inventJournalTrans;
        InventDim                           inventDim;
        InventLocation                      inventLocation;
        LogisticsEntityPostalAddressView    addressView;
        boolean                             postInventoryJournal;
        JournalTableMap                     journalTableMap;
    
        next postTrans(_journalTransData);
    
        if (this.BOBObjectChangeOrigin() == BOBObjectChangeOrigin::ItemArrivalPost)
        {
            journalTableMap      = JournalStatic::findJournalTableId(journalTableId, journalId);
            inventJournalTrans   = _journalTransData.journalTrans();
            postInventoryJournal = true;
            
            if (journalTableMap.TableId == tableNum(InventJournalTable))
            {
                InventJournalTable inventJournalTableLoc = journalTableMap as InventJournalTable;

                postInventoryJournal = inventJournalTableLoc.JournalType == InventJournalType::Project && inventJournalTrans.Qty < 0;
            }
    
            if (postInventoryJournal)
            {
                select firstOnly InventSerialId from inventDim
                where inventDim.inventDimId == inventJournalTrans.InventDimId
                    join TableId from inventLocation
                    where inventLocation.InventLocationId == inventDim.InventLocationId
                        outer join PostalAddress from addressView
                        where addressView.EntityType == LogisticsLocationEntityType::Warehouse
                        &&    addressView.Entity     == inventLocation.RecId
                        &&    addressView.IsPrimary;
    
                if (inventDim.inventSerialId)
                {
                    BOBObjectManager::postInventoryJournal(inventDim.inventSerialId, addressView.PostalAddress);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    public static InventJournalCheckPost_Movement newJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId)
    {
        InventJournalCheckPost_Movement ret = next newJournalCheckPost(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId);

        InventJournalTable inventJournalTable = InventJournalTable::find(_journalId);
        
        switch(inventJournalTable.BOBInventJournalType)
        {
            case BOBInventJournalType::AssetToInvent, BOBInventJournalType::AssetToScrap:
                ret = new InventJournalCheckPost_BOBAssetToInvent();
                break;
    
            case BOBInventJournalType::InventToAsset:
                ret = new InventJournalCheckPost_BOBInventToAsset();
                break;

            case BOBInventJournalType::Count:
                ret = new InventJournalCheckPost_BOBCounting();
        }

        ret.initializeJournalCheckPost(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBObjectChangeOrigin</Name>
				<Source><![CDATA[
    // extension methods

    public BOBObjectChangeOrigin BOBObjectChangeOrigin()
    {
        return this.parmInventJournalCheckPost_MovementStrategy().BOBObjectChangeOrigin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalCheckPost_MovementStrategy</Name>
				<Source><![CDATA[
    private DNRInventJournalCheckPost_MovementStrategy parmInventJournalCheckPost_MovementStrategy()
    {
        if (!strategy)
        {
            strategy = DNRInventJournalCheckPost_MovementStrategy::construct(this);
        }

        return strategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>