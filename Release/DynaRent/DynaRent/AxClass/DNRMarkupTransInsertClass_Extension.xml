<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRMarkupTransInsertClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(MarkupTransInsert))]
public final class DNRMarkupTransInsertClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findMarkupAutoTable</Name>
				<Source><![CDATA[
    protected MarkupAutoTable findMarkupAutoTable(TableGroupAll _accountCode, TableGroupAll _itemCode, TableGroupAll _dlvModeCode)
    {
        RORSalesRentalBoth salesRentalBoth = RORSalesRentalBoth::Both;
        RORPurchSubRentalBoth purchSubRentalBoth = RORPurchSubRentalBoth::Both;
        Common source = parameters.Source;
    
        switch(source.TableId)
        {
            case tablenum(SalesTable):
                salesRentalBoth = source.(fieldNum(SalesTable, SalesType)) == SalesType::Sales ? RORSalesRentalBoth::SalesOrder : RORSalesRentalBoth::RentalOrder;
                break;
    
            case tablenum(SalesLine):
                salesRentalBoth = source.(fieldNum(SalesLine, SalesType)) == SalesType::Sales ? RORSalesRentalBoth::SalesOrder : RORSalesRentalBoth::RentalOrder;
                break;
    
            case tablenum(PurchTable):
                purchSubRentalBoth = source.(fieldNum(PurchTable, PurchaseType)) == PurchaseType::Purch ? RORPurchSubRentalBoth::PurchaseOrder : RORPurchSubRentalBoth::SubRentalOrder;
                break;
    
            case tablenum(PurchLine):
                purchSubRentalBoth = source.(fieldNum(PurchLine, PurchaseType)) == PurchaseType::Purch ? RORPurchSubRentalBoth::PurchaseOrder : RORPurchSubRentalBoth::SubRentalOrder;
                break;
    
            case tablenum(SalesBasket):
                salesRentalBoth = source.(fieldNum(SalesBasket, SalesType)) == SalesType::Sales ? RORSalesRentalBoth::SalesOrder : RORSalesRentalBoth::RentalOrder;
                break;
    
            case tablenum(SalesBasketLine):
                salesRentalBoth = RORSalesRentalBoth::SalesOrder;
                break;
    
            case tableNum(SalesQuotationTable):
                salesRentalBoth = source.(fieldNum(SalesQuotationTable, QuotationType)) == QuotationType::Sales ? RORSalesRentalBoth::SalesOrder : RORSalesRentalBoth::RentalOrder;
                break;
    
            case tableNum(SalesQuotationLine):
                salesRentalBoth = source.(fieldNum(SalesQuotationLine, QuotationType)) == QuotationType::Sales ? RORSalesRentalBoth::SalesOrder : RORSalesRentalBoth::RentalOrder;
                break;
        }

        using (DNRMarkupAutoTableDisposableContext context = new DNRMarkupAutoTableDisposableContext())
        {
            // The values are used in /Classes/DNRMarkupAutoTableTable_Extension/Methods/find
            context.DNRparmSalesRentalBoth(salesRentalBoth);
            context.DNRparmPurchSubRentalBoth(purchSubRentalBoth);

            MarkupAutoTable ret = next findMarkupAutoTable(_accountCode, _itemCode, _dlvModeCode);

            if(!ret)
            {
                context.DNRparmSalesRentalBoth(RORSalesRentalBoth::Both);
                context.DNRparmPurchSubRentalBoth(RORPurchSubRentalBoth::Both);

                MarkupAutoTable searchMarkupAutoTable;
                searchMarkupAutoTable.ModuleCategory    = parameters.ModuleCategory;
                searchMarkupAutoTable.ModuleType        = parameters.ModuleType;
                searchMarkupAutoTable.AccountCode       = _accountCode;
                searchMarkupAutoTable.AccountRelation   = accountRelation;
                searchMarkupAutoTable.ItemCode          = _itemCode;
                searchMarkupAutoTable.ItemRelation      = itemRelation;
                searchMarkupAutoTable.MarkupReturn      = ReturnCodeType::None;
                searchMarkupAutoTable.DlvModeCode       = _dlvModeCode;
                searchMarkupAutoTable.DlvModeRelation   = dlvModeRelation;
                searchMarkupAutoTable.ReturnRelation    = '';

                ret = MarkupAutoTable::findByNaturalKey(searchMarkupAutoTable);
            }

            return ret;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>