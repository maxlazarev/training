<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRFormLetterParmDataOutputContractClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(FormLetterParmDataOutputContract))]
public final class DNRFormLetterParmDataOutputContractClass_Extension
{
    #define.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        formLetterContractPacked,
        rentalSubStatus
    #ENDMACRO
    
    private container formLetterContractPacked;
    private BOBRentalSubStatus rentalSubStatus;

    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>INVParmFormLetterContractPackedPacked</Name>
				<Source><![CDATA[
    public container INVParmFormLetterContractPackedPacked(container _formLetterContractPacked = formLetterContractPacked)
    {
        formLetterContractPacked = _formLetterContractPacked;
        return formLetterContractPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmRentalSubStatus</Name>
				<Source><![CDATA[
    public BOBRentalSubStatus RORparmRentalSubStatus(BOBRentalSubStatus _rentalSubStatus = rentalSubStatus)
    {
        rentalSubStatus = _rentalSubStatus;
        return rentalSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRUnpack</Name>
				<Source><![CDATA[
    private boolean DNRUnpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch(version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPack</Name>
				<Source><![CDATA[
    private container DNRPack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_pack_post</Name>
				<Source><![CDATA[
    // event handler methods

    [PostHandlerFor(classStr(FormLetterParmDataOutputContract), methodStr(FormLetterParmDataOutputContract, pack))]
    public static void DNREvent_pack_post(XppPrePostArgs _eventArgs)
    {
        FormLetterParmDataOutputContract instance = _eventArgs.getThis() as FormLetterParmDataOutputContract;
        SysPackExtensions::pack(_eventArgs, classStr(DNRFormLetterParmDataOutputContractClass_Extension), instance.DNRPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_unpack_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(FormLetterParmDataOutputContract), methodStr(FormLetterParmDataOutputContract, unpack))]
    public static void DNREvent_unpack_post(XppPrePostArgs _eventArgs)
    {
        FormLetterParmDataOutputContract instance = _eventArgs.getThis() as FormLetterParmDataOutputContract;
        container myState = SysPackExtensions::unpack(_eventArgs, classStr(DNRFormLetterParmDataOutputContractClass_Extension));

        if (!instance.DNRUnpack(myState))
        {
            _eventArgs.setReturnValue(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>