<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSmmProjectCreateClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SmmProjectCreate))]
public final class DNRSmmProjectCreateClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInvoiceProject</Name>
				<Source><![CDATA[
    protected ProjInvoiceTable createInvoiceProject(ProjInvoiceProjId _contractID, CustAccount _custAccount, ProjName _projName)
    {
        ProjInvoiceProjId parmContractId;
        CustAccount parmCustAccount;
        ProjName parmProjName;
          
        // check if a project contract already exists
        ProjInvoiceTable existingContract = ProjInvoiceTable::find(_contractID);
          
        if(existingContract)
        {
            // pass empty values into the call to NEXT, so it won't actually do anything
            parmContractId = '';
            parmCustAccount = '';
            parmProjName = '';
        }
        else
        {
            // pass the actual values into the call to NEXT, so it will create a new contract
            parmContractId = _contractID;
            parmCustAccount = _custAccount;
            parmProjName = _projName;
        }
          
        ProjInvoiceTable newContract = next createInvoiceProject(parmContractId, parmCustAccount, parmProjName);
          
        return (existingContract ? existingContract : newContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjTable</Name>
				<Source><![CDATA[
    protected void initializeProjTable(SmmProjectCreateParameters _parameters, ProjTable _projTable)
    {
        _projTable.initFromProjGroup(ProjGroup::find(_parameters.projGroupId));
        next initializeProjTable(_parameters, _projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjInvoiceTable</Name>
				<Source><![CDATA[
    protected ProjInvoiceTable initializeProjInvoiceTable(ProjInvoiceProjId _contractID, CustAccount _custAccount, ProjName _projName)
    {
        ProjInvoiceTable ret = next initializeProjInvoiceTable(_contractID, _custAccount, _projName);
        CustTable custTable = CustTable::find(_custAccount);

        ret.WPPInvoiceStatus   = WPPInvoiceStatus::NoTransaction;
        ret.TaxGroupId         = custTable.TaxGroup;
        ret.ProjPriceGroup     = custTable.PriceGroup;
        ret.GiroType           = custTable.GiroTypeProjInvoice;
        ret.ListCodeId         = EUSalesList::resolveListCode(custTable.postalAddress().CountryRegionId, ret.payer().postalAddress().CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>