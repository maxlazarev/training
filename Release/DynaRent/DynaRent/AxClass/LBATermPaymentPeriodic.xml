<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LBATermPaymentPeriodic</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LBATermPaymentPeriodic extends RunBaseBatch
{
    QueryRun            queryRun;
    VendTrans           vendTrans;

    LedgerJournalId     ledgerJournalId;
    DialogField         dlgLedgerJournalId;

    LedgerJournalTable  ledgerJournalTable;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        ledgerJournalId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@DNR5702";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean ret;
    
        ret = super(_calledFrom);
    
        if (!ledgerJournalId)
        {
            ret = checkfailed(strFmt("@DNR6907", "@SYS328705"));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    private Voucher createLedgerJournalTrans(LBATermPaymentPeriodicView _termView)
    {
        AmountCur          taxAmount = 0;
        LedgerJournalTrans ledgerJournalTrans;
    
        ledgerJournalTrans.CurrencyCode          = _termView.CurrencyCode;
        ledgerJournalTrans.JournalNum            = ledgerJournalTable.journalNum;
    
        if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.setOffsetLedgerDimension(ledgerJournalTable,
                                                ledgerJournalTable.OffsetAccountType,
                                                ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(ledgerJournalTable.OffsetLedgerDimension, ledgerJournalTrans.getOffsetCompany()));
        }
        else
        {
            ledgerJournalTrans.setOffsetLedgerDimension(ledgerJournalTable,
                                            ledgerJournalTable.OffsetAccountType,
                                            ledgerJournalTable.parmOffsetLedgerDimension());
        }
        //ledgerJournalTrans.OffsetAccountType     = ledgerJournalTable.OffsetAccountType;
        //ledgerJournalTrans.OffsetLedgerDimension = ledgerJournalTable.OffsetLedgerDimension;
    
        ledgerJournalTrans.initValue();
    
        ledgerJournalTrans.AccountType           = LedgerJournalACType::Ledger;
        ledgerJournalTrans.LedgerDimension       = this.getledgerDimension(LBAParameters::find().LedgerDimensionToBePaid, _termView.FinDefaultDimension);
        ledgerJournalTrans.DefaultDimension      = _termView.FINDefaultDimension;
        ledgerJournalTrans.Voucher               = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
        ledgerJournalTrans.TransDate             = (VendTrans ? VendTrans.TransDate : _termView.TransDate);
    
        ledgerJournalTrans.TransactionType       = LedgerTransType::LBAContracts;
        ledgerJournalTrans.LBATermTransid        = _termView.TermTransid;
        ledgerJournalTrans.LBATransType          = LBATransType::Payment;
    
        ledgerJournalTrans.AmountCurDebit        = _termView.TermAmountMST;
        ledgerJournalTrans.Txt                   = _termView.ContractNumExt;
    
        if (VendTrans)
        {
            ledgerJournalTrans.Approved          = NoYes::Yes;
            ledgerJournalTrans.Approver          = vendTrans.Approver;
        }
        else
        {
            ledgerJournalTrans.TaxGroup          = _termView.TaxGroup;
            ledgerJournalTrans.TaxItemGroup      = _termView.TaxItemGroup;
    
            if (ledgerJournalTrans.TaxGroup)
            {
                // At this point the previous version calculated tax with TaxLedgerJournalCalculate. This class no longer exists.
                ledgerJournalTrans.AmountCurDebit += taxAmount;
            }
        }
    
        ledgerJournalTrans.BOBObjectId           = LBAContractTable::find(_termView.ContractNumInt).BOBObjectId;
    
        ledgerJournalTrans.insert();
    
        return ledgerJournalTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();
        dialog.caption(this.caption());
    
        dlgLedgerJournalId = dialog.addField(identifierStr(LBAUnpostedJournalId));
    
        if (vendTrans)
        {
            dlgLedgerJournalId.value(vendTrans.JournalNum);
            dlgLedgerJournalId.allowEdit(false);
        }
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        ledgerJournalId = dlgLedgerJournalId.value();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount getLedgerDimension(LedgerDimensionDefaultAccount _ledgerDimension, DimensionDefault _defaultDimension = 0)
    {
        List dimensionSources;
    
        Debug::assert(_ledgerDimension);
    
        dimensionSources= new List(Types::Class);
    
        if (_defaultDimension)
        {
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension));
            LedgerDimensionDefaultingEngine::addDefaultDimensionForLedgerDimension(dimensionSources, _ledgerDimension);
        }
    
        return(LedgerDimensionDefaultingEngine::createLedgerDimension(_ledgerDimension, dimensionSources));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        queryRun = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendTrans</Name>
				<Source><![CDATA[
    public VendTrans parmVendTrans(vendTrans _vendTrans = vendTrans)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
    
        if (!prmisDefault(_vendTrans))
        {
            vendTrans = _vendTrans;
        }
    
        qbds = this.queryRun().query().dataSourceTable(tableNum(LBATermPaymentPeriodicView));
        qbr = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, DirectDebit));
        qbr.value(SysQuery::value(vendTrans ? NoYes::No : NoYes::Yes));
    
        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private QueryRun queryBuild()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbrContractStatus;
        QueryBuildRange         qbrDirectDebit;
        QueryBuildRange         qbrTermType;
        QueryBuildRange         qbrVoucherPayment;
    
        query = new Query();
    
        qbds = query.addDataSource(tableNum(LBATermPaymentPeriodicView));
    
        qbrContractStatus = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, ContractStatus));
        qbrDirectDebit    = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, DirectDebit   ));
        qbrTermType       = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, TermType      ));
        qbrVoucherPayment = SysQuery::findOrCreateRange(qbds,fieldNum(LBATermPaymentPeriodicView, VoucherPayment));
    
        qbrContractStatus.status(RangeStatus::Locked);
        qbrDirectDebit.status(RangeStatus::Locked);
        qbrTermType.status(RangeStatus::Locked);
        qbrVoucherPayment.status(RangeStatus::Locked);
    
        qbrContractStatus.value(SysQuery::value(LBAContractStatus::Running));
        qbrDirectDebit.value(SysQuery::value(NoYes::Yes));
        qbrTermType.value(strFmt("%1,%2",LBATermType::Standard,LBATermType::EndTerm));
        qbrVoucherPayment.value(SysQuery::valueEmptyString());
    
        return new queryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
    
        LBAContractTerm contractTerm;
        LBATermPaymentPeriodicView termView;
    
        ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);
    
        if (ledgerJournalTable)
        {
            if (ledgerJournalTable.Posted)
            {
                throw error(strfmt("@DNR3069", ledgerJournalId));
            }
    
            ttsbegin;
    
            while (queryRun.next())
            {
                termView = queryRun.get(tablenum(LBATermPaymentPeriodicView));
    
                contractTerm = LBAContractTerm::find(termView.TermTransId, true);
                contractTerm.setVoucherValue(fieldNum(LBAContractTerm, VoucherPayment), this.createLedgerJournalTrans(termView));
                contractTerm.setVoucherValue(fieldNum(LBAContractTerm, VoucherInvoice), vendTrans.Voucher);
                contractTerm.update();
            }
    
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);
        container   packedQueryRun;
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQueryRun] = _packedClass;
                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                break;
            default :
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LBATermPaymentPeriodic termPaymentPeriodic;
    
        termPaymentPeriodic = new LBATermPaymentPeriodic();
    
        if (termPaymentPeriodic.prompt())
        {
            termPaymentPeriodic.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>