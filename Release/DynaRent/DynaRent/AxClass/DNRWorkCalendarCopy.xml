<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRWorkCalendarCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRWorkCalendarCopy extends RunBase
{
    DNRCalendarId      fromCalendarId;
    DNRCalendarId      toCalendarId;
    boolean            copyPropertyId;

    // Dialog fields
    DialogField     fieldFromCalendarId;
    DialogField     fieldToCalendarId;
    DialogField     fieldcopyPropertyId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromCalendarId,
        toCalendarId,
        copyPropertyId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
     [SuppressBPWarningAttribute("BPCheckInsertMethodInLoop","method was duplicated from standard AX form WorkCalendarCopy class"),
     SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method"),
     SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Cannot be refactored without altering functionality of method"),
     SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior") ]
    void copy()
    {
        DNRCalendarTable        workCalendarTable;
        DNRCalendarDate         workCalendarDateFrom;
        DNRCalendarDate         workCalendarDateTo;
        DNRCalendarDateLine     workCalendarDateLineFrom;
        DNRCalendarDateLine     workCalendarDateLineTo;

        setprefix(DNRWorkCalendarCopy::description());

        workCalendarDateLineFrom.disableCache(true);
        workCalendarDateLineTo.disableCache(true);

        if(!DNRCalendarTable::exist(toCalendarId))
        {
            workCalendarTable               = DNRCalendarTable::find(fromCalendarId);
            workCalendarTable.CalendarId    = toCalendarId;
            workCalendarTable.Name          = strfmt("@SYS54296",workCalendarTable.Name);
            workCalendarTable.insert();
        }

        setprefix(fieldLabelValue(tablenum(DNRCalendarDateLine), fieldnum(DNRCalendarDateLine, CalendarId), toCalendarId));

        while select forupdate workCalendarDateFrom
        index CalendarDateIdx
        where workCalendarDateFrom.CalendarId   == fromCalendarId
        {
            setprefix(fieldLabelValue(tablenum(DNRCalendarDate), fieldnum(DNRCalendarDate, TransDate), workCalendarDateFrom.TransDate));

            select firstonly forupdate workCalendarDateTo
            where workCalendarDateTo.CalendarId == toCalendarId  
            &&    workCalendarDateTo.TransDate  == workCalendarDateFrom.TransDate;

            workCalendarDateTo.CalendarId       = toCalendarId;
            workCalendarDateTo.WorkTimeControl  = workCalendarDateFrom.WorkTimeControl;
            workCalendarDateTo.TransDate        = workCalendarDateFrom.TransDate;
            
            workCalendarDateTo.write();

            delete_from workCalendarDateLineTo
            index CalendarDateFromIdx
            where workCalendarDateLineTo.CalendarId   == toCalendarId   
            &&    workCalendarDateLineTo.TransDate    == workCalendarDateFrom.TransDate;

            while select forupdate workCalendarDateLineFrom
            index CalendarDateFromIdx
            where workCalendarDateLineFrom.CalendarId   == fromCalendarId   
            &&    workCalendarDateLineFrom.TransDate    == workCalendarDateFrom.TransDate
            {
                setprefix(strfmt("@SYS54524",
                    time2str(workCalendarDateLineFrom.FromTime,-1,-1),
                    time2str(workCalendarDateLineFrom.ToTime,-1,-1)));

                workCalendarDateLineTo.data(workCalendarDateLineFrom);
                workCalendarDateLineTo.CalendarId = toCalendarId;
                if (! copyPropertyId)
                {
                    workCalendarDateLineTo.PropertyId = '';
                }

                workCalendarDateLineTo.insert();
            }
        }

        workCalendarDateLineFrom.disableCache(false);
        workCalendarDateLineTo.disableCache(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        // Init fields
        fieldFromCalendarId = dialog.addField(extendedTypeStr(DNRCalendarId), "@SYS55232");
        fieldToCalendarId   = dialog.addField(extendedTypeStr(DNRCalendarId), "@SYS55233");
        fieldcopyPropertyId = dialog.addField(enumStr(NoYes), "@SYS54288", "@SYS54289");

        // Init values
        fieldFromCalendarId.value(fromCalendarId);
        fieldToCalendarId.value(toCalendarId);
        fieldcopyPropertyId.value(copyPropertyId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        fromCalendarId  = fieldFromCalendarId.value();
        toCalendarId    = fieldToCalendarId.value();
        copyPropertyId  = fieldcopyPropertyId.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCalendarId</Name>
				<Source><![CDATA[
    DNRCalendarId parmFromCalendarId(DNRCalendarId _id = fromCalendarId)
    {
        fromCalendarId = _id;
        return fromCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToCalendarId</Name>
				<Source><![CDATA[
    DNRCalendarId parmToCalendarId(DNRCalendarId _id = toCalendarId)
    {
        toCalendarId = _id;
        return toCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
        {
            throw error("@SYS18722");
        }

        try
        {
            ttsbegin;

            this.copy();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer         version         = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        if(!fromCalendarId)
        {
            return checkFailed("@SYS55230");
        }

        if(!strLRTrim(toCalendarId))
        {
            return checkFailed("@SYS86248");
        }

        if(!DNRCalendarTable::checkExist(fromCalendarId))
        {
            return false;
        }

        if(fromCalendarId == toCalendarId)
        {
            return checkFailed("@SYS55231");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS55229";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        DNRWorkCalendarCopy        copy;

        switch(args.dataset())
        {
            case tablenum(DNRCalendarTable):
                copy = DNRWOrkCalendarCopy::newWorkCalendarTable(args.record());
                break;
            default:
                throw error(strfmt("@SYS29104",classId2Name(classidget(copy))));
        }

        if(copy.prompt())
        {
            copy.runOperation();
        }

        Object fr = args.caller();
        if(fr != null)
        {
            fr.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkCalendarTable</Name>
				<Source><![CDATA[
    static DNRWorkCalendarCopy newWorkCalendarTable(DNRCalendarTable   _workCalendarTable)
    {
        DNRWorkCalendarCopy    copy     = new DNRWorkCalendarCopy();

        copy.parmFromCalendarId(_workCalendarTable.CalendarId);

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>