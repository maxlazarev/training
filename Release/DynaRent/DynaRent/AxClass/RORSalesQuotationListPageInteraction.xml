<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSalesQuotationListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The interaction class for a model driven <c>RORSalesQuotationTableListPage</c> form.
/// <c>PurchTableListPage</c> form.
/// </summary>
class RORSalesQuotationListPageInteraction
extends SysListPageInteractionBase
{
    SalesQuotationListPage  salesQuotationListPage;

    SalesQuotationTable                     salesQuotationTable;
    SalesQuotationTableInteractionHelper    salesQuotationTableInteractionHelper;

    boolean isSalesQuotationVisible;
    boolean isSalesQuotation;
    boolean isProjectQuotationVisible;
    boolean isSalesOrder;
    boolean isRelAccountValid;

    boolean canConvertToCustomer;
    boolean canTransferToProject;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an active record in the <c>SalesQuotationTable</c> table.
    /// </summary>
    /// <returns>
    /// An active record in the <c>SalesQuotationTable</c> table.
    /// </returns>
    private SalesQuotationTable currentSalesQuotationTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(RORSalesQuotationListPage, SalesQuotationTable)) as SalesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an active record in the <c>SmmBusRelTable</c> table.
    /// </summary>
    /// <returns>
    /// An active record in the <c>SmmBusRelTable</c> table.
    /// </returns>
    private smmBusRelTable currentSmmBusRelTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(RORSalesQuotationListPage, SmmBusRelTable)) as smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListPageType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the list page type.
    /// </summary>
    /// <returns>
    ///    A list page type.
    /// </returns>
    private SalesQuotationListPage getListPageType()
    {
        return salesQuotationListPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the <c>SmmBusRelTable</c> field in the data source provided the table is not a temporary
    /// table and sets the range values for the query.
    /// </summary>
    /// <param name="_query">
    /// The input query.
    /// </param>
    /// <remarks>
    /// This method is called one time by the framework when the data source query is initialized.
    /// </remarks>
    public void initializeQuery(Query _query)
    {
        smmBusRelTable       smmBusRelTable;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      salesResponsibleRange;
        
        super(_query);
        
        _query.dataSourceTable(tableNum(smmBusRelTable)).enabled(!smmBusRelTable.isTmp());
        
        this.linkActive(_query);
        
        if (salesQuotationListPage == SalesQuotationListPage::MyExpiringQuotations      ||
            salesQuotationListPage == SalesQuotationListPage::MyQuotations              ||
            salesQuotationListPage == SalesQuotationListPage::MyExpiringProjQuotations  ||
            salesQuotationListPage == SalesQuotationListPage::MyProjQuotations)
        {
            queryBuildDataSource  = _query.dataSourceTable(tableNum(SalesQuotationTable));
            if (queryBuildDataSource)
            {
                salesResponsibleRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(SalesQuotationTable, WorkerSalesResponsible));
                salesResponsibleRange.value(SysQuery::value(HcmWorkerLookup::currentWorker()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsProjectQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the quotation type is equal to the <c>QuotationType::Project</c> enumeration value
    /// and saves the result in a global variable.
    /// </summary>
    private void initIsProjectQuotation()
    {
        SalesQuotationTableType salesQuotationTableType;
        
        isProjectQuotationVisible = salesQuotationTable && (salesQuotationTable.QuotationType == QuotationType::Project || salesQuotationTable.QuotationType == QuotationType::RORProjRental);
        
        // If quotation type is project, check if it can be transferred.
        if (isProjectQuotationVisible)
        {
            salesQuotationTableType = salesQuotationTable.type();
            canTransferToProject = salesQuotationTableType.mayLinkToProjectBeUpdated();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsRelAccountValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the quotation business account is valid and saves the result in a global variable.
    /// </summary>
    private void initIsRelAccountValid()
    {
        isRelAccountValid = salesQuotationTable && salesQuotationTable.BusRelAccount != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the quotation is a template and has a reference to a sales order and saves the
    ///    result in a global variable.
    /// </summary>
    private void initIsSalesOrder()
    {
        isSalesOrder = salesQuotationTable && salesQuotationTable.SalesIdRef != '' && !salesQuotationTable.isTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsSalesQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the quotation type is equal to the <c>QuotationType::RORRental</c> enumeration value and
    /// saves the result in a global variable.
    /// </summary>
    private void initIsSalesQuotation()
    {
        isSalesQuotationVisible = !salesQuotationTable || salesQuotationTable.QuotationType == QuotationType::RORRental;
        isSalesQuotation = salesQuotationTable && salesQuotationTable.QuotationType == QuotationType::RORRental;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActive</Name>
				<Source><![CDATA[
    private void linkActive(Query _query)
    {
        Common                  callerRecord;
        smmBusRelTable          smmBusRelTable;
        CustTable               custTable;
        DirPartyRecId           party;
        
        callerRecord = this.listPage().listPageArgs().externalRecord();
        
        // Is form called with a record
        if (callerRecord)
        {
            switch (callerRecord.TableId)
            {
                // Is the form called from the Campaign form
                case tableNum(smmCampaignSelection) :
                    party = callerRecord.(fieldNum(smmCampaignSelection,Party));
                    break;
            }
            
            if (party)
            {
                _query.dataSourceTable(tableNum(SalesQuotationTable)).clearDynalinks();
                custTable = CustTable::findByPartyRecId(party);
                if (custTable)
                {
                    _query.dataSourceTable(tableNum(SalesQuotationTable)).addDynalink(fieldNum(SalesQuotationTable,CustAccount),custTable,fieldNum(CustTable,AccountNum));
                }
                else
                {
                    smmBusRelTable = smmBusRelTable::findByParty(party);
                    _query.dataSourceTable(tableNum(SalesQuotationTable)).addDynalink(fieldNum(SalesQuotationTable,BusRelAccount),smmBusRelTable,fieldNum(smmBusRelTable,BusRelAccount));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current record in the <c>SalesQuotationTable</c> table and initializes the record-specific
    /// global variables.
    /// </summary>
    /// <remarks>
    /// This method is called by the framework every time that a record is selected in the grid on the list
    /// page.
    /// </remarks>
    public void selectionChanged()
    {
        salesQuotationTable = this.currentSalesQuotationTable();
        
        salesQuotationTableInteractionHelper = SalesQuotationTableInteractionHelper::construct();
        salesQuotationTableInteractionHelper.initHeaderActions(salesQuotationTable);
        
        this.initIsSalesQuotation();
        this.initIsProjectQuotation();
        this.initIsSalesOrder();
        this.initIsRelAccountValid();
        this.setCaption();
        
        super();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables action pane buttons according to the active record data.
    /// </summary>
    protected void setButtonEnabled()
    {
        this.setButtonGeneral();
        this.setButtonFollowup();
        this.setButtonQuotation();
        this.setButtonQuote();

        xFormRun formRun = FormDataUtil::getFormDataSource(salesQuotationTable).formRun();
        FormDataSource salesQuotationTable_ds = SysFormDataSource::findDataSource(formRun, tablenum(SalesQuotationTable));
        if (salesQuotationTable_ds)
        {
            salesQuotationTable_ds.allowDelete(salesQuotationTable.checkDelete());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonFollowup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables follow-up action pane tab buttons according to the active record data.
    /// </summary>
    private void setButtonFollowup()
    {
        // FollowUpStatus (Generate)

        // Confirmation
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, buttonUpdateConfirmation), isSalesQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonUpdateConfirmation),
            isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateConfirmationEnabled());

        // Confirmation Project
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, buttonUpdateConfirmation_Proj), isProjectQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonUpdateConfirmation_Proj),
            isProjectQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateConfirmationEnabled());
        
        // Cancled
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, buttonUpdateCancelled), isSalesQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonUpdateCancelled),
            isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateCancelledEnabled());

        // Canceled, project
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, buttonUpdateCancelled_Proj), isProjectQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonUpdateCancelled_Proj),
            isProjectQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateCancelledEnabled());
        
        // Lost
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, buttonUpdateLost), isSalesQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonUpdateLost),
            isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateLostEnabled());
        
        // Lost, Project
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, buttonUpdateLost_Proj), isProjectQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonUpdateLost_Proj),
            isProjectQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateLostEnabled());
        
        // Modify
        // Can convert to customer
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonConvert2Customer), salesQuotationTableInteractionHelper.parmCanConvert2Customer());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, changeReasonCode), salesQuotationTableInteractionHelper.parmChangeReasonCodeEnabled());
        // Only enabled when quotationType is project and the project status is confirmed
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, linkAndTransferToProject), (isProjectQuotationVisible && canTransferToProject));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the general action pane tab buttons based on the active record data.
    /// </summary>
    private void setButtonGeneral()
    {
        boolean isCustomer = salesQuotationTable.CustAccount? true : false;
        
        // Trade agreements
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, priceDiscTable_Sales), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, salesPrice), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, salesLineDisc), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, salesMultiLineDisc), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, salesEndDisc), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, priceDiscAdmTable_SalesCreate), isCustomer);
        
        // Activities
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, ServicingViewActivities), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Manage
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, suppItemTable_Sales), isCustomer);
        
        // Related information
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, generalSalesOrders), isSalesQuotation || isSalesOrder);
        // May quotation be linked
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, generalAlternativeQuotations), salesQuotationTable && salesQuotationTable.checkUpdate());
        
        // Setup
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, Btn_PrintMgmt), salesQuotationTableInteractionHelper.parmIsNotTemplate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the Sales quotation action pane tab buttons based on the active record data.
    /// </summary>
    private void setButtonQuotation()
    {
        // Copy
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonCopyAllHeader), salesQuotationTableInteractionHelper.parmMayQuotationBeCopied());

        // View
        // Rental totals from Dynarent Invoicing model is used
        /*this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, totals), salesQuotationTableInteractionHelper.parmQuotationNotConfirmed());
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, totals), isSalesQuotationVisible);
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, totals_Proj), isProjectQuotationVisible);*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonQuote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the quote action pane tab buttons based on the active record data.
    /// </summary>
    private void setButtonQuote()
    {
        // Charges
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, miscCharges), isSalesQuotation);

        // Tax
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, SalesTax), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        
        // Calculate group
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, MultiLnDiscAction), salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTable.CustAccount != "");
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, buttonEndDiscAction), salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTable.CustAccount != "");

        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, SuppItemCalc_QuotationHeader), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        
        // Process (Generate)  - May Quotation be updated
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, updateQuotation), isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateQuotationEnabled());
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, updateQuotation), isSalesQuotationVisible);

        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, updateQuotation_Proj), isProjectQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateQuotationEnabled());
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, updateQuotation_Proj), isProjectQuotationVisible);
        
        // Analysis
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, priceSimulation),
            isSalesQuotation && salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTable.QuotationStatus != SalesQuotationStatus::Confirmed);
        
        // Accounts
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, customer), salesQuotationTable && salesQuotationTable.CustAccount != "");
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, businessRelationship), isRelAccountValid);
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, Prices), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, ContactPerson), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        
        // Bank
        this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, BankLGRequestForm), salesQuotationTableInteractionHelper.parmBankLGRequestFormEnabled());
        
        // Journals group
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, quotationJournals), salesQuotationTableInteractionHelper.parmJournalQuotationEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(RORSalesQuotationListPage, confirmationJournal), salesQuotationTableInteractionHelper.parmJournalConfirmationEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the action pane buttons according to the list page type.
    /// </summary>
    /// <remarks>
    /// The method is only called one time when the list page is opened.
    /// </remarks>
    protected void setButtonVisibility()
    {
        switch (this.getListPageType())
        {
            case SalesQuotationListPage::Main:
                //this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, NewProjectQuotation), isConfigurationkeyEnabled(configurationKeyNum(ProjBasic)));
                break;
            case SalesQuotationListPage::New:
                // Quotation tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, Journals), false);
                
                // Followup tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, FollowupStatus), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, ChangeReasonCode), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, LinkAndTransferToProject), false);
                
                // General tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, GeneralSalesOrders), false);
                break;
            
            case SalesQuotationListPage::Sent:
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, Process), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, Charges), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, PriceSimulation), false);
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, Prices), false);
                
                // Followup tab
                this.listPage().actionPaneControlVisible(formControlStr(RORSalesQuotationListPage, LinkAndTransferToProject), false);
                break;            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form caption according to the list page type.
    /// </summary>
    /// <remarks>
    /// This method is only called one time when the list page is opened.
    /// </remarks>
    protected void setCaption()
    {
        switch (this.getListPageType())
        {           
            case SalesQuotationListPage::ExpiringProjQuotations:
                this.listPage().caption("Expiring rental project quotations");
                break;
            
            case SalesQuotationListPage::MyProjQuotations:
                this.listPage().caption("My rental project quotations");
                break;
            
            case SalesQuotationListPage::MyExpiringProjQuotations:
                this.listPage().caption("My expiring rental project quotations");
                break;
            
            case SalesQuotationListPage::Expiring:
                this.listPage().caption("Expiring rental quotations");
                break;
            
            case SalesQuotationListPage::MyQuotations:
                this.listPage().caption("My rental quotations");
                break;
            
            case SalesQuotationListPage::MyExpiringQuotations:
                this.listPage().caption("My expiring rental quotations");
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the fields in the grid.
    /// </summary>
    /// <remarks>
    /// This method is only called one time when the list page is opened.
    /// </remarks>
    protected void setGridFieldVisibility()
    {
        switch (this.getListPageType())
        {
            case SalesQuotationListPage::New:
            case SalesQuotationListPage::Sent:
                this.listPage().listPageFieldVisible(formControlStr(RORSalesQuotationListPage, SalesQuotationTable_QuotationType), false);
                this.listPage().listPageFieldVisible(formControlStr(RORSalesQuotationListPage, QuotationStatus), false);
                break;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPageType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the list page type.
    /// </summary>
    /// <param name="_listPageArgs">
    ///    The list page type.
    /// </param>
    protected void setListPageType(ListPageArgs _listPageArgs)
    {
        if (_listPageArgs && _listPageArgs.enumTypeParameter() == enumNum(SalesQuotationListPage))
        {
            salesQuotationListPage = _listPageArgs.enumParameter();
        }
        else
        {
            salesQuotationListPage = SalesQuotationListPage::Main;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>