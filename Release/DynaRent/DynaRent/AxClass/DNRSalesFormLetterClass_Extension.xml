<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesFormLetterClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormLetter))]
public final class DNRSalesFormLetterClass_Extension
{
    public static RORFormLetterSubStatusController formLetterSubStatusController;
    private static boolean calledFromMain;
    private static Args mainArgs;

    private boolean                     canGoBatch = true;
    private boolean                     changeObjectAvailability;
    private boolean                     mustDuplicateTask;
    private WPPWorkOrderId              workOrderId;
    private DNRReasonCode               reasonCode;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        if(_args.parmObject() && SysDictClass::isEqualOrSuperclass(classIdGet(_args.parmObject()), classNum(RORFormLetterSubStatusController)))
        {
            formLetterSubStatusController = _args.parmObject();
        }
        
        calledFromMain = true;
        mainArgs = _args;
        next main(_args);
        mainArgs = null;
        calledFromMain = false;
        formLetterSubStatusController = null;
        
        if(_args.menuItemName() == menuitemactionstr(INVSalesFormLetter_InvoiceCredit)
        || _args.menuItemName() == menuitemactionstr(INVSalesFormLetter_ProFormaInvoiceCredit))
        {
            Object callerForm = _args.caller();
            if (callerForm is FormRun && formHasMethod(callerForm, identifierStr(doResearch)))
            {
                callerForm.doResearch();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesFormLetter construct(DocumentStatus _documentStatus, IdentifierName _className, IdentifierName _methodName, SysOperationExecutionMode _executionMode)
    {
        IdentifierName classNameLocal  = _className;
        IdentifierName methodNameLocal = _methodName;

        if (_documentStatus == DocumentStatus::RORSubStatus && !_className && !_methodName)
        {
            Args args = new Args();
            MenuFunction menuFunction = new MenuFunction(menuitemActionStr(SalesFormLetter_RORSubStatus), MenuItemType::Action);
            args.parm(menuFunction.parameters());
            
            SysOperationExecutionMode mode;
            [classNameLocal, methodNameLocal, mode] = FormLetterServiceController::parseServiceInfo(args);
        }

        SalesFormLetter ret = next construct(_documentStatus, classNameLocal, methodNameLocal, _executionMode);

        if(calledFromMain)
        {
            ret.RORparmRentalSubStatus(formLetterSubStatusController ? formLetterSubStatusController.parmRentalSubStatus() : FormLetterServiceController::RORdocumentStatus2RentalSubStatus(_documentStatus));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        BOBRentalSubStatus rentalSubStatus = this.RORparmRentalSubStatus();
        if (calledFromMain)
        {
            Args args = SalesFormLetter::mainArgs;

            salesFormLetterContract.RORparmMustExcludeRentalOrders(args.name() == classStr(SalesFormLetter_InvoiceMainMenuWrapper));

            if (rentalSubStatus == BOBRentalSubStatus::None)
            {
                Common callerRecord = args.record();
                if(callerRecord is SalesTable)
                {
                    var salesTable = callerRecord as SalesTable;
                    if(salesTable.InterCompanyDirectDeliveryOrig)
                    {
                        rentalSubStatus = FormLetterServiceController::RORdocumentStatus2RentalSubStatus(args.parmEnum());
                    }
                }
                else if (!callerRecord)
                {
                    rentalSubStatus = FormLetterServiceController::RORdocumentStatus2RentalSubStatus(args.parmEnum());
                }
                else if (callerRecord is CustInvoiceJour)
                {
                    rentalSubStatus = FormLetterServiceController::RORdocumentStatus2RentalSubStatus(DocumentStatus::Invoice);
                }
            }
        }
        this.RORparmRentalSubStatus(rentalSubStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReSelect</Name>
				<Source><![CDATA[
    protected void prepareReSelect(SalesParmUpdate _salesParmUpdate, InventLocationId _inventLocationId)
    {
        next prepareReSelect(_salesParmUpdate, _inventLocationId);

        // Rental sub status is reset is case of DocumentStatus != RORSubStatus
        if(!this.RORparmRentalSubStatus())
        {
            this.RORparmRentalSubStatus(FormLetterServiceController::RORdocumentStatus2RentalSubStatus(_salesParmUpdate.DocumentStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCallerForm</Name>
				<Source><![CDATA[
    protected boolean initializeFromCallerForm(SalesFormLetterCachedArguments _cachedArgs)
    {
        boolean ret = next initializeFromCallerForm(_cachedArgs);

        if (_cachedArgs.callerFormName == formstr(RORSalesTable) ||
            _cachedArgs.callerFormName == formStr(WPPWorkOrderLineDetails))
        {
            if (_cachedArgs.isProforma)
            {
                this.proforma(true);
                this.enableUpdateNowField(false);
            }
            else
            {
                this.proforma(false);
                this.enableUpdateNowField(true);
            }

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySales</Name>
				<Source><![CDATA[
    public container qtySales(Common _common, SalesQty _qty, boolean _isLoadLine)
    {
        salesQuantity.RORparmRentalSubStatus(salesFormLetterContract.RORparmRentalSubStatus());

        container ret = next qtySales(_common, _qty, _isLoadLine);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperationBody</Name>
				<Source><![CDATA[
    protected void afterOperationBody()
    {
        next afterOperationBody();

        if (this.WPPparmChangeObjectAvailability())
        {
           this.WPPchangeObjectAvailability(this.WPPparmWorkOrderId(), this.DNRparmReasonCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        next canGoBatch();
        return canGoBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    public boolean parmShowDialog(boolean _showDialog)
    {
        boolean ret = next parmShowDialog(_showDialog);

        if (salesFormLetterContract)
        {
            if (this.RORparmCallerMenuItem() == menuItemActionStr(SalesFormLetter_Confirmation))
            {
                ret = true;
            }
            else if (this.RORparmCallerMenuItem() == menuitemActionStr(SalesFormLetter_RORConfirm))
            {
                ret = false;
            }
            
            showDialog = ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPchangeObjectAvailability</Name>
				<Source><![CDATA[
    // extension methods

    private void WPPchangeObjectAvailability(WPPWorkOrderId  _workOrderId,
                                             DNRReasonCode   _reasonCode)
    {
        BOBObjectView       objectView;
        BOBObjectTable      objectTable;
        WPPWorkOrderTable   workOrderTable;
    
        select firstOnly ObjectId, IsAvailable from objectView
            exists join objectTable
            where objectTable.ObjectId == objectView.ObjectId
                join TableId from workOrderTable
                where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                &&    workOrderTable.WorkOrderId         == _workOrderId;
    
        if (objectView.ObjectId)
        {
            BOBObjectManager::changeObjectAvailability(objectView.ObjectId, !objectView.IsAvailable, _reasonCode, _workOrderId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmReasonCode</Name>
				<Source><![CDATA[
    public DNRReasonCode DNRparmReasonCode(DNRReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;
    
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCheckCloseDialog</Name>
				<Source><![CDATA[
    public boolean INVCheckCloseDialog(SalesParmUpdate _salesParmUpdate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCreditCalculationDateTime</Name>
				<Source><![CDATA[
    public INVCalculationDateTime INVCreditCalculationDateTime(INVCalculationDateTime _creditCalculationDateTime)/// = salesFormLetterContract.INVCreditCalculationDateTime())
    {
        INVCalculationDateTime ret;
        return ret;///salesFormLetterContract.INVCreditCalculationDateTime(_creditCalculationDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVCustInvoiceJour</Name>
				<Source><![CDATA[
    public CustInvoiceJour INVCustInvoiceJour(CustInvoiceJour  _custInvoiceJour)/// = salesFormLetterContract.INVParmCustInvoiceJour())
    {
        CustInvoiceJour ret;
        return ret;///salesFormLetterContract.INVParmCustInvoiceJour(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVInitParmCustInvoiceJour</Name>
				<Source><![CDATA[
    public void  INVInitParmCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        this.INVCustInvoiceJour(_custInvoiceJour);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVIsExtendedRentalCredit</Name>
				<Source><![CDATA[
    public boolean INVIsExtendedRentalCredit()
    {
        return this.RORparmCallerMenuItem() == 'INVSalesFormLetter_InvoiceCredit'
        || this.RORparmCallerMenuItem() == 'INVSalesFormLetter_ProFormaInvoiceCredit';
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVParmExternalNote</Name>
				<Source><![CDATA[
    public DNRAdditionalNote INVParmExternalNote(DNRAdditionalNote _externalNote)// = salesFormLetterContract.INVParmExternalNote(_externalNote))
    {
        DNRAdditionalNote ret;
        return ret;///salesFormLetterContract.INVParmExternalNote(_externalNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVParmTransDate</Name>
				<Source><![CDATA[
    public TransDate INVParmTransDate(TransDate _transDate)/// = salesFormLetterContract.parmTransDate())
    {
        TransDate ret;
        return ret;///salesFormLetterContract.parmTransDate(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORIsRentalPosting</Name>
				<Source><![CDATA[
    public boolean RORIsRentalPosting()
    {
        return salesFormLetterContract.RORIsRentalPosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCallerMenuItem</Name>
				<Source><![CDATA[
    public menuItemNameAction RORparmCallerMenuItem(menuItemNameAction _callerMenuItem = salesFormLetterContract.parmCallerMenuItem())
    {
        return salesFormLetterContract.parmCallerMenuItem(_callerMenuItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanGoBatch</Name>
				<Source><![CDATA[
    public boolean RORparmCanGoBatch(boolean _canGoBatch = canGoBatch)
    {
        canGoBatch = _canGoBatch;
        return canGoBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmSalesParmTable</Name>
				<Source><![CDATA[
    public SalesParmTable RORParmSalesParmTable(SalesParmTable _salesParmTable = salesParmTable)
    {
        salesParmTable = _salesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmChangeObjectAvailability</Name>
				<Source><![CDATA[
    public boolean WPPparmChangeObjectAvailability(boolean _changeObjectAvailability = changeObjectAvailability)
    {
        changeObjectAvailability = _changeObjectAvailability;
        return changeObjectAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmMustDuplicateTask</Name>
				<Source><![CDATA[
    public boolean WPPParmMustDuplicateTask(boolean _mustDuplicateTask = salesFormLetterContract.WPPParmMustDuplicateTask())
    {
        return salesFormLetterContract.WPPParmMustDuplicateTask(_mustDuplicateTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmWorkOrderId</Name>
				<Source><![CDATA[
    public WPPWorkOrderId WPPparmWorkOrderId(WPPWorkOrderId _workOrderId = salesFormLetterContract.WPPparmWorkOrderId())
    {
        return salesFormLetterContract.WPPparmWorkOrderId(_workOrderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPParmWorkOrderLineRecId</Name>
				<Source><![CDATA[
    public WPPWorkOrderLineRecId WPPParmWorkOrderLineRecId(WPPWorkOrderLineRecId _workOrderLineRecId = salesFormLetterContract.WPPParmWorkOrderLineRecId())
    {
        return salesFormLetterContract.WPPParmWorkOrderLineRecId(_workOrderLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRParmFormLetterSubStatusController</Name>
				<Source><![CDATA[
    public static RORFormLetterSubStatusController DNRParmFormLetterSubStatusController(RORFormLetterSubStatusController _formLetterSubStatusController = formLetterSubStatusController)
    {
        formLetterSubStatusController = _formLetterSubStatusController;
        return formLetterSubStatusController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>