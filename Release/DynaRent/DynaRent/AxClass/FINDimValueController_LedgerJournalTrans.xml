<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimValueController_LedgerJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINDimValueController_LedgerJournalTrans extends FINDimValueController
{
    LedgerJournalTrans callerLedgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    protected Description getDescription()
    {
        return callerLedgerJournalTrans.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getDimensionFieldId()
    {
        return fieldNum(LedgerJournalTrans, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId getLedgerDimensionFieldId()
    {
        return fieldNum(LedgerJournalTrans, LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);
        callerLedgerJournalTrans = _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refBusRel</Name>
				<Source><![CDATA[
    protected FINDimValueResult refBusRel()
    {
        Common      reference;
        ProjTable   projTable;
    
        switch(callerLedgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust:
                reference = smmBusRelTable::FINFindByLedgerDimensionCust(callerLedgerJournalTrans.LedgerDimension);
                break;
    
            case LedgerJournalACType::Vend:
                reference = smmBusRelTable::FINFindByLedgerDimensionVend(callerLedgerJournalTrans.LedgerDimension);
                break;
    
            case LedgerJournalACType::Project:
                projTable = ProjTable::findByLedgerDimension(callerLedgerJournalTrans.LedgerDimension);
                if (projTable.CustAccount)
                {
                    reference = smmBusRelTable::findCust(projTable.CustAccount);
                }
                break;
    
            default:
                return FINDimValueResult::constructValue('');
        }
    
        return FINDimValueResult::constructReference(reference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refCustVend</Name>
				<Source><![CDATA[
    protected FINDimValueResult refCustVend()
    {
        Common      reference;
        VendTrans   vendTrans;
    
        switch (callerLedgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust:
                reference = CustTable::findByLedgerDimension(callerLedgerJournalTrans.LedgerDimension);
                break;
    
            case LedgerJournalACType::Vend:
                reference = VendTable::findByLedgerDimension(callerLedgerJournalTrans.LedgerDimension);
                break;
    
            case LedgerJournalACType::Project:
                reference = CustTable::find(ProjTable::findByLedgerDimension(callerLedgerJournalTrans.LedgerDimension).CustAccount);
                break;
    
            case LedgerJournalACType::Ledger:
                if (callerLedgerJournalTrans.VendTransId)
                {
                    vendTrans = VendTrans::find(callerLedgerJournalTrans.VendTransId);
                    reference = VendTable::find(vendTrans.AccountNum);
                }
                break;
    
            default:
                return FINDimValueResult::constructValue('');
        }
    
        return FINDimValueResult::constructReference(reference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refItemRelation</Name>
				<Source><![CDATA[
    protected FINDimValueResult refItemRelation()
    {
        FINDimValueResult                   ret;
        WPPWorkOrderTable                   workOrderTable;
        WPPWorkOrderLine                    workOrderLine;
        ProjTable                           projTable;
        BOBObjectTable                      objectTable;
        AssetTable                          assetTable;
        DimensionAttributeValueCombination  ledgerDimension;
        LedgerJournalTrans_Project          ledgerJournalTrans_Project;
        SalesLine                           salesLine;
    
        switch (callerLedgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Project:
                select firstOnly INVRefRecId from ledgerJournalTrans_Project
                where ledgerJournalTrans_Project.RefRecId == callerLedgerJournalTrans.RecId
                &&    ledgerJournalTrans_Project.INVRefRecId;
                if (ledgerJournalTrans_Project.INVRefRecId)
                {
                    select firstOnly objectTable
                        exists join workOrderTable
                        where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                        &&    workOrderTable.OrderTableId == SalesLine.TableId
                        &&    workOrderTable.OrderRecId   == ledgerJournalTrans_Project.INVRefRecId
                            join TableId from workOrderLine
                            where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                                join TableId from projTable
                                where projTable.ProjId == workOrderLine.ProjId
                                    join RecId from ledgerDimension
                                    where ledgerDimension.DisplayValue == projTable.ProjId
                                    &&    ledgerDimension.RecId == callerLedgerJournalTrans.LedgerDimension;
                }
                else
                {
                    select firstOnly objectTable
                        exists join workOrderTable
                        where workOrderTable.BOBObjectTableRecId == objectTable.RecId
                            join TableId from workOrderLine
                            where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                            &&    workOrderLine.ProjId      == projTable.ProjId
                                join TableId from projTable
                                where projTable.ProjId == workOrderLine.ProjId
                                    join RecId from ledgerDimension
                                    where ledgerDimension.DisplayValue == projTable.ProjId
                                    &&    ledgerDimension.RecId == callerLedgerJournalTrans.LedgerDimension;
                }
    
                ret = FINDimValueResult::constructReference(objectTable);
                break;
    
            case LedgerJournalACType::FixedAssets:
                assetTable  = AssetTable::findByLedgerDimension(callerLedgerJournalTrans.LedgerDimension);
                objectTable = BOBObjectTable::findByAssetId(assetTable.AssetId, callerLedgerJournalTrans.TransDate);
                ret         = FINDimValueResult::constructReference(objectTable);
                break;
    
            case LedgerJournalACType::Ledger:
                objectTable = BOBObjectTable::findObjectId(callerLedgerJournalTrans.BOBObjectId);
                ret         = FINDimValueResult::constructReference(objectTable);
                break;
    
            default:
                ret         = FINDimValueResult::constructValue('');
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refProject</Name>
				<Source><![CDATA[
    protected FINDimValueResult refProject()
    {
        FINDimValueResult ret;
    
        if (callerLedgerJournalTrans.AccountType == LedgerJournalACType::Project)
        {
            ret = FINDimValueResult::constructReference(ProjTable::findByLedgerDimension(callerLedgerJournalTrans.LedgerDimension));
        }
        else
        {
            ret = FINDimValueResult::constructValue('');
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDimension</Name>
				<Source><![CDATA[
    protected void updateLedgerDimension()
    {
        LedgerDimensionDefaultAccount   defaultAccount;
    
        if (callerLedgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            defaultAccount = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(callerRecord.(this.getLedgerDimensionFieldId()));
            defaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountRecId(defaultAccount);
    
            callerRecord.(this.getLedgerDimensionFieldId()) = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, callerRecord.(this.getDimensionFieldId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCleanupQuery</Name>
				<Source><![CDATA[
    public SysDaQueryObject getCleanupQuery()
    {
        LedgerJournalTable  ledgerJournalTable;
        SysDaQueryObject    ledgerJournalTransQuery = new SysDaQueryObject(callerLedgerJournaltrans);
        SysDaQueryObject    ledgerJournalTableQuery = new SysDaQueryObject(ledgerJournalTable);
        
        ledgerJournalTableQuery.WhereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, JournalNum)),
                                      new SysDaFieldExpression(callerLedgerJournaltrans, fieldStr(LedgerJournalTrans, JournalNum)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, Posted)),
                                           new SysDaValueExpression(NoYes::Yes))));

        ledgerJournalTransQuery.joinClause(SysDaJoinKind::ExistsJoin, ledgerJournalTableQuery);
        return ledgerJournalTransQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>