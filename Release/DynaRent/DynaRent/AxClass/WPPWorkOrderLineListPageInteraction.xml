<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderLineListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPWorkOrderLineListPageInteraction
extends WPPWorkOrderTableListPageInteraction
{
    WPPWorkOrderLineListPage           workOrderLineListPage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentWorkOrderLine</Name>
				<Source><![CDATA[
    protected WPPWorkOrderLine currentWorkOrderLine()
    {
        WPPWorkOrderLineListPageView    workOrderLineListPageView;
    
        workOrderLineListPageView = this.listPage().activeRecord(queryDataSourceStr(WPPAllWorkOrderLinesListPage, WorkOrderLineListPageView)) as WPPWorkOrderLineListPageView;
    
        return WPPWorkOrderLine::findRecId(workOrderLineListPageView.WorkOrderLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentWorkOrderTable</Name>
				<Source><![CDATA[
    protected WPPWorkOrderView currentWorkOrderTable()
    {
        WPPWorkOrderLineListPageView    workOrderLineListPageView;
        WPPWorkOrderView                workOrderView;
    
        workOrderLineListPageView = this.listPage().activeRecord(queryDataSourceStr(WPPAllWorkOrderLinesListPage, WorkOrderLineListPageView)) as WPPWorkOrderLineListPageView;
    
        select firstOnly workOrderView
        where workOrderView.WorkOrderId == workOrderLineListPageView.WorkOrderId;
    
        return workOrderView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        TransDateTime           nullDateTime;
        QueryBuildDataSource    qbdsWorkOrderLineListPageView;
        QueryBuildDataSource    qbdsPerson;
        QueryBuildDataSource    qbdsWorker;
        QueryBuildRange         qbr;
    
        super(_query);
    
        if (workOrderLineListPage == WPPWorkOrderLineListPage::Open
        ||  workOrderLineListPage == WPPWorkOrderLineListPage::OwnedOpen
        ||  workOrderLineListPage == WPPWorkOrderLineListPage::Overdue)
        {
            _query.dataSourceTable(tableNum(WPPWorkOrderLineListPageView)).addRange(fieldNum(WPPWorkOrderLineListPageView, Status)).value(SysQuery::range(WPPWorkOrderLineStatus::Created, WPPWorkOrderLineStatus::InProgress));
        }
    
        if (workOrderLineListPage == WPPWorkOrderLineListPage::OwnedOpen
        ||  workOrderLineListPage == WPPWorkOrderLineListPage::OwnedOverdue)
        {
            qbdsWorkOrderLineListPageView = _query.dataSourceTable(tableNum(WPPWorkOrderLineListPageView));
    
            qbdsPerson = qbdsWorkOrderLineListPageView.addDataSource(tableNum(DirPerson));
            qbdsPerson.addLink(fieldNum(WPPWorkOrderLineListPageView, BSAResponsible), fieldNum(DirPerson, Name));
            qbdsPerson.joinMode(JoinMode::ExistsJoin);
    
            qbdsWorker = qbdsPerson.addDataSource(tableNum(HcmWorker));
            qbdsWorker.addLink(fieldNum(DirPerson, RecId), fieldNum(HcmWorker, Person));
            qbr = qbdsWorker.addRange(fieldNum(HcmWorker, RecId));
            qbr.value(SysQuery::value(HcmWorkerLookup::currentWorker()));
            qbr.status(RangeStatus::Hidden);
        }
    
        if (workOrderLineListPage == WPPWorkOrderLineListPage::Overdue
        ||  workOrderLineListPage == WPPWorkOrderLineListPage::OwnedOverdue)
        {
            // We want to exclude work orders that only have a time filled in the DueDateTime field
            nullDateTime = DateTimeUtil::addDays(utcDateTimeNull(), 1);
            _query.dataSourceTable(tableNum(WPPWorkOrderLineListPageView)).addRange(fieldNum(WPPWorkOrderLineListPageView, BSADueDateTime)).value(SysQuery::range(nullDateTime, DateTimeUtil::getSystemDateTime()));
        }
    
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableQuery</Name>
				<Source><![CDATA[
    protected boolean isTableQuery()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonBill</Name>
				<Source><![CDATA[
    protected void setButtonBill()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, CtrlProposal), workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceProjId());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, CtrlInvoices), workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceProjId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    protected void setButtonEnabled()
    {
        WPPWorkOrderLine                workOrderline;
        WPPWorkOrderStatusGroup         workOrderStatusGroup;
        WPPWorkOrderTaskTable           workOrderTaskTable;
        WPPWorkOrderStatusRegistration  workOrderStatusRegistration;
    
        workOrderline = this.currentWorkOrderLine();
    
        select firstOnly workOrderStatusRegistration
        where workOrderStatusRegistration.Status == workOrderLine.Status
            exists join workOrderStatusGroup
            where workOrderStatusGroup.WorkOrderStatusGroupId == workOrderStatusRegistration.WorkOrderStatusGroupId
                join TableId from workOrderTaskTable
                where workOrderTaskTable.WorkOrderStatusGroupId == workOrderStatusGroup.WorkOrderStatusGroupId
                &&    workOrderTaskTable.TaskId                 == workOrderLine.TaskId;
    
        workOrderTableInteractionHelper.initLineActions(workOrderLine, workOrderStatusRegistration);
    
        super();
    
        this.setButtonItemTaskActions();
        this.setButtonJournalActions();
        this.setButtonStatusActions();
        this.setButtonRelatedInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonItemTaskActions</Name>
				<Source><![CDATA[
    private void setButtonItemTaskActions()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, mbLinesItemTasks), workOrderTableInteractionHelper.parmMenuButtonItemTasksEnabled());
    
        if (workOrderTableInteractionHelper.parmMenuButtonItemTasksEnabled())
        {
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlProjItemReq), workOrderTableInteractionHelper.parmButtonProjItemReqEnabled());
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlSalesOrderTable), workOrderTableInteractionHelper.parmButtonSalesOrderTableEnabled());
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchOrderTable), workOrderTableInteractionHelper.parmButtonPurchOrderTableEnabled());
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlProdTable), workOrderTableInteractionHelper.parmButtonProdTableEnabled());
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchReqTable), workOrderTableInteractionHelper.parmButtonPurchReqTableEnabled());
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchRFQCaseTable), workOrderTableInteractionHelper.parmButtonPurchRFQCaseTableEnabled());
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlSalesAgreementDetails), workOrderTableInteractionHelper.parmButtonSalesAgreementDetailsEnabled());
            this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchAgreementDetails), workOrderTableInteractionHelper.parmButtonPurchAgreementDetailsEnabled());
        }
    
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlProjItemReqEdit), workOrderTableInteractionHelper.parmButtonProjItemReqEditEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlSalesOrderTableEdit), workOrderTableInteractionHelper.parmButtonSalesOrderTableEditEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchOrderTableEdit), workOrderTableInteractionHelper.parmButtonPurchOrderTableEditEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlProdTableEdit), workOrderTableInteractionHelper.parmButtonProdTableEditEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchReqTableEdit), workOrderTableInteractionHelper.parmButtonPurchReqTableEditEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchRFQCaseTableEdit), workOrderTableInteractionHelper.parmButtonPurchRFQCaseTableEditEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlSalesAgreementDetailsEdit), workOrderTableInteractionHelper.parmButtonSalesAgreementDetEditEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ctrlPurchAgreementDetailsEdit), workOrderTableInteractionHelper.parmButtonPurchAgreementDetEditEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonJournalActions</Name>
				<Source><![CDATA[
    private void setButtonJournalActions()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, mbLinesJournals), workOrderTableInteractionHelper.parmButtonJournalsEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, HourEntry), workOrderTableInteractionHelper.parmButtonHourEntryEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ExpenseEntry), workOrderTableInteractionHelper.parmButtonExpenseEntryEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, ItemJournalEntry), workOrderTableInteractionHelper.parmButtonItemJournalEntryEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, FeeEntry), workOrderTableInteractionHelper.parmButtonFeeEntryEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonOtherPlaces</Name>
				<Source><![CDATA[
    protected void setButtonOtherPlaces()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPViewDetails), workOrderTableInteractionHelper.parmConnectedToOrigin());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, BOBObjectTableForm), workOrderTableInteractionHelper.parmButtonBusinessObjectEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, BOBMaintenanceHistory), workOrderTableInteractionHelper.parmButtonBusinessObjectEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonRelatedInfo</Name>
				<Source><![CDATA[
    protected void setButtonRelatedInfo()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, UnpostedTransactions), workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceProjId());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, PostedTransactions), workOrderTableInteractionHelper.parmWorkOrderHasProjInvoiceProjId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonStatusActions</Name>
				<Source><![CDATA[
    private void setButtonStatusActions()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_Created), workOrderTableInteractionHelper.parmButtonStatusCreatedEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_Confirmed), workOrderTableInteractionHelper.parmButtonStatusConfirmedEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_Planned), workOrderTableInteractionHelper.parmButtonStatusPlannedEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_Released), workOrderTableInteractionHelper.parmButtonStatusReleasedEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_InProgress), workOrderTableInteractionHelper.parmButtonStatusInProgressEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_Completed), workOrderTableInteractionHelper.parmButtonStatusCompletedEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_CheckedWorkshop), workOrderTableInteractionHelper.parmButtonStatusCheckedWorkshopEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_CheckedAdmin), workOrderTableInteractionHelper.parmButtonStatusCheckedAdminEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_Invoiced), workOrderTableInteractionHelper.parmButtonStatusInvoicedEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(WPPWorkOrderLineListPage, WPPWorkOrderStatusUpdate_Closed), workOrderTableInteractionHelper.parmButtonStatusClosedEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPageType</Name>
				<Source><![CDATA[
    protected void setListPageType(ListPageArgs _listPageArgs)
    {
        if (_listPageArgs
        &&  _listPageArgs.enumTypeParameter() == enumNum(WPPWorkOrderLineListPage))
        {
            workOrderLineListPage = _listPageArgs.enumParameter();
        }
        else
        {
            workOrderLineListPage = WPPWorkOrderLineListPage::All;
        }
    
         workOrderTableListPage = WPPWorkOrderTableListPage::Main;
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>