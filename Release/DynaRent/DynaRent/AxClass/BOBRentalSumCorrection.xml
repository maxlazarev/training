<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalSumCorrection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalSumCorrection extends RunBaseBatch
{
    // dialog
    DialogGroup                 dgAdjust;
    DialogGroup                 dgTransfer;

    DialogField                 dfRentalTypeIdTransfer;
    DialogField                 dfRentalTypeIdAdjust;
    DialogField                 dfWarehouseAdjust;
    DialogField                 dfAdjustDateTime;
    DialogField                 dfMethod;
    DialogField                 dfQtyAdjust;
    DialogField                 dfQtyTransfer;
    DialogField                 dfWarehouseFrom;
    DialogField                 dfWarehouseTo;
    DialogField                 dfTransferDateTime;

    // variables
    BOBRentalTypeId             rentalTypeId;
    InventLocationId            warehouse;
    InventLocationId            warehouseFrom;
    InventLocationId            warehouseTo;
    BOBTransDateTime            dateTime;
    BOBExactDifference          method;
    BOBRentalQty                qty;
    BOBRentalSumCorrectionType  correctionType;
    boolean                     copyRentalTransLink;

    // table buffers
    BOBRentalTrans              callerRentalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAdjustment</Name>
				<Source><![CDATA[
    private void doAdjustment()
    {
        BOBObjectTable  objectTable = BOBObjectTable::findBulkObject(rentalTypeId); // only bulk can be adjusted
        BOBRentalTrans  rentalTrans;

        rentalTrans.ObjectId            = objectTable.ObjectId;
        rentalTrans.RentalTypeId        = rentalTypeId;
        rentalTrans.TransType           = BOBRentalTransType::InventCounting;
        rentalTrans.ToDateTime          = DateTimeUtil::maxValue();
        rentalTrans.FromDateTime        = dateTime;
        rentalTrans.CertaintyTo         = BOBDateTimeCertainty::Fixed;
        rentalTrans.CertaintyFrom       = BOBDateTimeCertainty::Fixed;
        rentalTrans.Active              = BOBRentalTransActive::Active;
        rentalTrans.InventLocationId    = warehouse;
        rentalTrans.SubStatus           = BOBRentalSubStatus::Delivered;

        // translate qty into a delta quantity, as BOBRentalTrans doesn't like absolute quantities
        rentalTrans.Qty                 = (method == BOBExactDifference::Difference ? qty : qty - callerRentalTrans.Qty);
    
        rentalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        TransDateTime   dateTimeNow = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
    
        switch(correctionType)
        {
            case BOBRentalSumCorrectionType::Adjustment:
                dialog.caption("@DNR6713");
                dfRentalTypeIdAdjust    = dialog.addField(extendedTypeStr(BOBRentalTypeId));
                dfWarehouseAdjust       = dialog.addField(extendedTypeStr(InventLocationId));
                dfAdjustDateTime        = dialog.addFieldValue(extendedTypeStr(DateTimeExecuted), dateTimeNow, "@SYS8449");
                dfMethod                = dialog.addField(enumStr(BOBExactDifference));
                dfMethod.allowEdit(callerRentalTrans.RecId != 0);
                dfQtyAdjust             = dialog.addField(extendedTypeStr(BOBRentalQty));
                break;
    
            case BOBRentalSumCorrectionType::Transfer:
                dialog.caption("@DNR6714");
                dfRentalTypeIdTransfer  = dialog.addFieldValue(extendedTypeStr(BOBRentalTypeId), rentalTypeId);
                dfQtyTransfer           = dialog.addFieldValue(extendedTypeStr(BOBRentalQty), qty);
                dfQtyTransfer.allowEdit(!callerRentalTrans || BOBRentalType::find(rentalTypeId).Classification != BOBRentalTypeClassification::Serialized);
                dfWarehouseFrom         = dialog.addFieldValue(extendedTypeStr(InventLocationId), warehouseFrom, "@SYS25253");
                dfWarehouseTo           = dialog.addField(extendedTypeStr(InventLocationId), "@SYS8519");
                dfTransferDateTime      = dialog.addFieldValue(extendedTypeStr(DateTimeExecuted), dateTimeNow, "@SYS34422");
                break;
        }
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        switch(correctionType)
        {
            case BOBRentalSumCorrectionType::Adjustment:
                rentalTypeId    = dfRentalTypeIdAdjust.value();
                dateTime        = DateTimeUtil::removeTimeZoneOffset(dfAdjustDateTime.value(), DateTimeUtil::getUserPreferredTimeZone());
                warehouse       = dfWarehouseAdjust.value();
                method          = dfMethod.value();
                qty             = dfQtyAdjust.value();
                break;

            case BOBRentalSumCorrectionType::Transfer:
                rentalTypeId    = dfRentalTypeIdTransfer.value();
                dateTime        = DateTimeUtil::removeTimeZoneOffset(dfTransferDateTime.value(), DateTimeUtil::getUserPreferredTimeZone());
                qty             = dfQtyTransfer.value();
                warehouseFrom   = dfWarehouseFrom.value();
                warehouseTo     = dfWarehouseTo.value();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForTransfer</Name>
				<Source><![CDATA[
    private void initForTransfer(BOBRentalTrans     _callerRentalTrans,
                                 BOBRentalTypeId    _rentalTypeId,
                                 InventQty          _qty,
                                 InventLocationId   _inventLocationIdFrom,
                                 InventLocationId   _inventLocationIdTo,
                                 TransDateTime      _transDateTime)
    {
        correctionType      = BOBRentalSumCorrectionType::Transfer;
        callerRentalTrans   = _callerRentalTrans;
        copyRentalTransLink = true;
        rentalTypeId        = _rentalTypeId;
        qty                 = _qty;
        warehouseFrom       = _inventLocationIdFrom;
        warehouseTo         = _inventLocationIdTo;
        dateTime            = _transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForAdjustment</Name>
				<Source><![CDATA[
    private void initForAdjustment(BOBRentalTypeId      _rentalTypeId,
                                   InventLocationId     _inventLocationId,
                                   TransDateTime        _transDateTime,
                                   BOBExactDifference   _adjustmentMethod,
                                   InventQty            _qty)
    {
        correctionType  = BOBRentalSumCorrectionType::Adjustment;
        dateTime        = _transDateTime;
        warehouse       = _inventLocationId;
        rentalTypeId    = _rentalTypeId;
        method          = _adjustmentMethod;
        qty             = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if(this.validate())
        {
            ttsBegin;
    
            switch(correctionType)
            {
                case BOBRentalSumCorrectionType::Adjustment:
                    this.doAdjustment();
                    break;

                case BOBRentalSumCorrectionType::Transfer:
                    this.doTransfer();
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
    
            ttsCommit;

            if(FormDataUtil::isFormDataSource(callerRentalTrans))
            {
                FormDataUtil::getFormDataSource(callerRentalTrans).research(true);
            }
        }
        else
        {
            throw error("@DNR1977");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCorrectionType</Name>
				<Source><![CDATA[
    private void setCorrectionType(BOBRentalSumCorrectionType _correctionType)
    {
        correctionType = _correctionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRentalTrans</Name>
				<Source><![CDATA[
    private void setRentalTrans(BOBRentalTrans _rentalTrans)
    {
        if(correctionType == BOBRentalSumCorrectionType::Adjustment)
        {
            callerRentalTrans   = _rentalTrans;
            rentalTypeId        = _rentalTrans.RentalTypeId;
            warehouse           = _rentalTrans.InventLocationId;
            warehouseFrom       = warehouse;
            qty                 = _rentalTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransfer</Name>
				<Source><![CDATA[
    private void doTransfer()
    {
        BOBRentalTrans  newTrans1, newTrans2;
        InventTable     inventTable;
        EcoResProduct   ecoResProduct;
        BOBObjectTable  objectTable;
        BOBObjectId     objectId;
        ;
      
        select objectId from objectTable
        where objectTable.RentalTypeId == rentalTypeId
            join TableId from ecoResProduct
            where ecoResProduct.DisplayProductNumber == ecoResProduct.BOBRentalTypeId
            &&    ecoResProduct.BOBRentalTypeId == objectTable.RentalTypeId
                join  inventTable
                where inventTable.Product == ecoResProduct.RecId;
    
        objectId = inventTable.BOBIsBulkRentalItem() ? objectTable.ObjectId : callerRentalTrans.ObjectId;
    
        // create 'from' transaction
        newTrans1.RentalTypeId          = rentalTypeId;
        newTrans1.Qty                   = -qty;
        newTrans1.CompanyId             = callerRentalTrans.CompanyId;
        newTrans1.ToDateTime            = DateTimeUtil::maxValue();
        newTrans1.FromDateTime          = dateTime;
        newTrans1.ObjectId              = objectId;
        newTrans1.AssetId               = callerRentalTrans.AssetId;
    
        newTrans1.SubStatus             = BOBRentalSubStatus::Delivered;
    
        newTrans1.TransType             = BOBRentalTransType::InventCounting;
        newTrans1.CertaintyTo           = BOBDateTimeCertainty::Firm;
        newTrans1.CertaintyFrom         = BOBDateTimeCertainty::Firm;
        newTrans1.Active                = BOBRentalTransActive::Active;
        newTrans1.InventLocationId      = warehouseFrom;
    
        if (copyRentalTransLink)
        {
            newTrans1.InventTransOrigin = callerRentalTrans.InventTransOrigin;
        }
    
        newTrans1.insert();
    
        // create 'to' transaction
        newTrans2.data(newTrans1);
        newTrans2.TransferLink          = newTrans1.RecId;
        newTrans2.Qty                   = qty;
        newTrans2.InventLocationId      = warehouseTo;
    
        newTrans2.insert();
    
        // now that all IDs are known, stamp reference to 'to' transaction on 'from' transaction
        newTrans1.TransferLink          = newTrans2.RecId;
        newTrans1.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;
        BOBRentalType rentalType;
        ;

        if(rentalTypeId)
        {
            rentalType = BOBRentalType::find(rentalTypeId);

            if(!rentalType)
            {
                ret = checkFailed(strFmt("@SYS24602", "@DNR4420", rentalTypeId));
            }
            else if(correctionType == BOBRentalSumCorrectionType::Adjustment && rentalType.Classification != BOBRentalTypeClassification::Bulk)
            {
                ret = checkFailed("@DNR:OnlyBulkCanBeAdjusted");
            }
        }
        else
        {
            ret = checkFailed(strFmt("@DNR4370", "@DNR4420"));
        }
    
        if(ret && correctionType == BOBRentalSumCorrectionType::Adjustment)
        {
            if(!warehouse)
            {
                ret = checkFailed(strFmt("@DNR4370", "@SYS6437"));
            }
            else if(!InventLocation::exist(warehouse))
            {
                ret = checkFailed(strFmt("@SYS24602", "@SYS6437", warehouse));
            }
    
            if(method == BOBExactDifference::Difference && !qty)
            {
                ret = checkFailed(strFmt("@DNR4370", "@SYS59970"));
            }
    
            if(!dateTime)
            {
                ret = checkFailed(strFmt("@DNR4370", "@SYS8449"));
            }
        }
    
        if(ret && correctionType == BOBRentalSumCorrectionType::Transfer)
        {
            if(!warehouseFrom)
            {
                ret = checkFailed(strFmt("@DNR4370", "@SYS25253"));
            }
            else if(!InventLocation::exist(warehouseFrom))
            {
                ret = checkFailed(strFmt("@SYS24602", "@SYS6437", warehouseFrom));
            }
    
            if(!warehouseTo)
            {
                ret = checkFailed(strFmt("@DNR4370", "@SYS8519"));
            }
            else if(!InventLocation::exist(warehouseTo))
            {
                ret = checkFailed(strFmt("@SYS24602", "@SYS6437", warehouseTo));
            }
    
            if(!dateTime)
            {
                ret = checkFailed(strFmt("@DNR4370", "@SYS34422"));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOBRentalSumCorrection correction = new BOBRentalSumCorrection();
    
        if(_args && _args.parmEnumType() == enumNum(BOBRentalSumCorrectionType))
        {
            correction.setCorrectionType(_args.parmEnum());
        }
    
        if(_args && _args.dataset() == tableNum(BOBRentalTrans))
        {
            correction.setRentalTrans(_args.record());
        }
    
        if(correction.prompt())
        {
            correction.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAdjustment</Name>
				<Source><![CDATA[
    public static void runAdjustment(BOBRentalTypeId    _rentalTypeId,
                                     InventLocationId   _inventLocationId,
                                     TransDateTime      _transDateTime,
                                     BOBExactDifference _adjustmentMethod,
                                     InventQty          _qty)
    {
        InventQty adjustQty;

        switch(_adjustmentMethod)
        {
            case BOBExactDifference::Difference:
                adjustQty = _qty - new BOBRentalInventOnHand().availPhysicalQty(_rentalTypeId, _inventLocationId, _transDateTime);
                break;

            case BOBExactDifference::Exact:
                adjustQty = _qty;
                break;
        }

        BOBRentalSumCorrection correction = new BOBRentalSumCorrection();
        correction.initForAdjustment(_rentalTypeId, _inventLocationId, _transDateTime, _adjustmentMethod, adjustQty);
        correction.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransfer</Name>
				<Source><![CDATA[
    public static void runTransfer(BOBRentalTrans   _callerRentalTrans,
                                   BOBRentalTypeId  _rentalTypeId,
                                   InventQty        _qty,
                                   InventLocationId _inventLocationIdFrom,
                                   InventLocationId _inventLocationIdTo,
                                   TransDateTime    _transDateTime)
    {
        BOBRentalSumCorrection correction = new BOBRentalSumCorrection();
        correction.initForTransfer(_callerRentalTrans, _rentalTypeId, _qty, _inventLocationIdFrom, _inventLocationIdTo, _transDateTime);
        correction.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>