<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRMarkupClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(Markup))]
public final class DNRMarkupClass_Extension
{
    private InvoiceId invInvoiceId;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertReturnMarkupTrans</Name>
				<Source><![CDATA[
    static void insertReturnMarkupTrans(
        HeadingLine moduleCategory,
        MarkupModule moduleType,
        Common source,
        CustVendAC account,
        MarkupGroupId accountGroup,
        LanguageId languageId)
    {
        using (DNRMarkupAutoTableDisposableContext context = new DNRMarkupAutoTableDisposableContext())
        {
            if(source.TableId == tableNum(SalesTable))
            {
                context.DNRParmSalesTable(source as SalesTable);
            }
            else if(source.TableId == tableNum(SalesLine))
            {
                context.DNRParmSalesLine(source as SalesLine);
            }

            next insertReturnMarkupTrans(moduleCategory, moduleType, source, account, accountGroup, languageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkupAutoTableOnInsertReturnMarkupTrans</Name>
				<Source><![CDATA[
    static MarkupAutoTable findMarkupAutoTableOnInsertReturnMarkupTrans(
        HeadingLine         _moduleCategory,
        MarkupModule        _moduleType,
        TableGroupAll       _accountCode,
        TableGroupAll       _itemCode,
        ItemRelation        _itemRelation,
        MarkupReturnType    _markupReturn,
        ReturnCode          _returnRelation)
    {
        MarkupAutoTable ret = next findMarkupAutoTableOnInsertReturnMarkupTrans(_moduleCategory,
                                                                                _moduleType,
                                                                                _accountCode,
                                                                                _itemCode,
                                                                                _itemRelation,
                                                                                _markupReturn,
                                                                                _returnRelation);

        DNRMarkupAutoTableDisposableContext context = DNRMarkupAutoTableDisposableContext::current();
        if(context)
        {
            SalesTable salesTable = context.DNRParmSalesTable();
            SalesLine salesline = context.DNRParmSalesLine();

            if(salesTable)
            {
                ret = Markup::DNRFindMarkupAutoTableOnInsertReturnMarkupTransSalesTableSource(_moduleCategory, _moduleType, _accountCode, _itemCode, _itemRelation, _markupReturn, _returnRelation);
            }
            if(salesline)
            {
                ret = Markup::DNRFindMarkupAutoTableOnInsertReturnMarkupTransSalesLineSource(_moduleCategory, _moduleType, _accountCode, _itemCode, _itemRelation, _markupReturn, _returnRelation);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmINVInvoiceId</Name>
				<Source><![CDATA[
    // extension methods

    public InvoiceId parmINVInvoiceId(InvoiceId _invInvoiceId = invInvoiceId)
    {
        invInvoiceId = _invInvoiceId;
        return invInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRFindMarkupAutoTableOnInsertReturnMarkupTransSalesTableSource</Name>
				<Source><![CDATA[
    private static MarkupAutoTable DNRFindMarkupAutoTableOnInsertReturnMarkupTransSalesTableSource(
        HeadingLine         _moduleCategory,
        MarkupModule        _moduleType,
        TableGroupAll       _accountCode,
        TableGroupAll       _itemCode,
        ItemRelation        _itemRelation,
        MarkupReturnType    _markupReturn,
        ReturnCode          _returnRelation)
    {
        MarkupAutoTable markupAutoTable;
        DNRMarkupAutoTableDisposableContext context = DNRMarkupAutoTableDisposableContext::current();

        if(context)
        {
            MarkupAutoTable searchMarkupAutoTable;
            searchMarkupAutoTable.ModuleCategory    = _moduleCategory;
            searchMarkupAutoTable.ModuleType        = _moduleType;
            searchMarkupAutoTable.AccountCode       = _accountCode;
            searchMarkupAutoTable.AccountRelation   = '';
            searchMarkupAutoTable.ItemCode          = _itemCode;
            searchMarkupAutoTable.ItemRelation      = _itemRelation;
            searchMarkupAutoTable.MarkupReturn      = _markupReturn;
            searchMarkupAutoTable.DlvModeCode       = TableGroupAll::All;
            searchMarkupAutoTable.DlvModeRelation   = '';
            searchMarkupAutoTable.ReturnRelation    = _returnRelation;
             
            context.DNRparmSalesRentalBoth(RORSalesRentalBoth::SalesOrder);
            context.DNRparmPurchSubRentalBoth(RORPurchSubRentalBoth::Both);
            markupAutoTable = MarkupAutoTable::findByNaturalKey(searchMarkupAutoTable);

            if (!markupAutoTable)
            {
                context.DNRparmSalesRentalBoth(RORSalesRentalBoth::Both);
                context.DNRparmPurchSubRentalBoth(RORPurchSubRentalBoth::Both);
                markupAutoTable = MarkupAutoTable::findByNaturalKey(searchMarkupAutoTable);
            }
        }

        return markupAutoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRFindMarkupAutoTableOnInsertReturnMarkupTransSalesLineSource</Name>
				<Source><![CDATA[
    private static MarkupAutoTable DNRFindMarkupAutoTableOnInsertReturnMarkupTransSalesLineSource(
        HeadingLine         _moduleCategory,
        MarkupModule        _moduleType,
        TableGroupAll       _accountCode,
        TableGroupAll       _itemCode,
        ItemRelation        _itemRelation,
        MarkupReturnType    _markupReturn,
        ReturnCode          _returnRelation)
    {
        MarkupAutoTable markupAutoTable;

        DNRMarkupAutoTableDisposableContext context = DNRMarkupAutoTableDisposableContext::current();
        if(context)
        {
            MarkupAutoTable searchMarkupAutoTable;
            searchMarkupAutoTable.ModuleCategory    = _moduleCategory;
            searchMarkupAutoTable.ModuleType        = _moduleType;
            searchMarkupAutoTable.AccountCode       = _accountCode;
            searchMarkupAutoTable.AccountRelation   = '';
            searchMarkupAutoTable.ItemCode          = _itemCode;
            searchMarkupAutoTable.ItemRelation      = _itemRelation;
            searchMarkupAutoTable.MarkupReturn      = ReturnCodeType::Disposition;
            searchMarkupAutoTable.DlvModeCode       = TableGroupAll::All;
            searchMarkupAutoTable.DlvModeRelation   = '';
            searchMarkupAutoTable.ReturnRelation    = _returnRelation;
            
            context.DNRparmSalesRentalBoth(RORSalesRentalBoth::Both);
            context.DNRparmPurchSubRentalBoth(RORPurchSubRentalBoth::PurchaseOrder);
            markupAutoTable = MarkupAutoTable::findByNaturalKey(searchMarkupAutoTable);

            if (!markupAutoTable)
            {
                context.DNRparmSalesRentalBoth(RORSalesRentalBoth::Both);
                context.DNRparmPurchSubRentalBoth(RORPurchSubRentalBoth::Both);
                markupAutoTable = MarkupAutoTable::findByNaturalKey(searchMarkupAutoTable);
            }
        }

        return markupAutoTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>