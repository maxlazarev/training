<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPSubTaskGroupAdd</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPSubTaskGroupAdd extends RunBase
{
    Common              callerCommon;

    WPPSubTaskGroupId   subTaskGroupId;
    WPPWorkOrderTaskId  workOrderTaskId;

    DialogField         dfSubTaskGroupId;
    DialogField         dfTaskId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSubTaskDefault</Name>
				<Source><![CDATA[
    private void createSubTaskDefault()
    {
        WPPSubTaskDefault   subTaskDefault;
        WPPSubTaskTable     subTaskTable;
        RecordInsertList    recordInsertList;
    
        recordInsertList = new RecordInsertList(tableNum(WPPSubTaskDefault));
    
        while select SubTaskId from subTaskTable
        where subTaskTable.GroupId == subTaskGroupId
        {
            subTaskDefault.GroupId    = subTaskGroupId;
            subTaskDefault.SubTaskId  = subTaskTable.SubTaskId;
            subTaskDefault.RefTableId = callerCommon.TableId;
            subTaskDefault.RefRecId   = callerCommon.RecId;
    
            if (callerCommon.TableId == tableNum(WPPWorkOrderTaskTable))
            {
                subTaskDefault.TaskId = callerCommon.(fieldNum(WPPWorkOrderTaskTable, TaskId));
            }
            else
            {
                subTaskDefault.TaskId = workOrderTaskId;
            }
    
            recordInsertList.add(subTaskDefault);
        }
    
        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog;
    
        dialog = super();
    
        dfTaskId = dialog.addField(extendedTypeStr(WPPWorkOrderTaskId));
    
        // When called from Work order task table then the task ID
        // is already available, otherwise, the user needs to select one
        if (callerCommon
        &&  callerCommon.TableId == tableNum(WPPWorkOrderTaskTable))
        {
            dfTaskId.visible(false);
        }
    
        dfSubTaskGroupId = dialog.addField(extendedTypeStr(WPPSubTaskGroupId));
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        subTaskGroupId = dfSubTaskGroupId.value();
        workOrderTaskId = dfTaskId.value();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerCommon</Name>
				<Source><![CDATA[
    public Common parmCallerCommon(Common _callerCommon = callerCommon)
    {
        callerCommon = _callerCommon;
    
        return callerCommon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
    
        try
        {
            ttsBegin;
            this.createSubTaskDefault();
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;
    
        ret = super(_calledFrom);
    
        if ((!callerCommon
        ||    callerCommon.TableId != tableNum(WPPWorkOrderTaskTable))
        &&  !dfTaskId.value())
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS121658"));
        }
    
        if (!dfSubTaskGroupId.value())
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS39022"));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WPPSubTaskGroupAdd construct()
    {
        return new WPPSubTaskGroupAdd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@DNR7592";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WPPSubTaskGroupAdd  subTaskGroupAdd;
        Common              callerCommon;
        BOBObjectTable      objectTableFind;
        FormDataSource      formDataSource;
        Args                argsCaller;
        Common              argsCommon;
    
        if (!_args || _args.dataset() != tableNum(WPPSubTaskDefault))
        {
            throw error(Error::missingParameter(null));
        }
    
        if (_args.caller() && _args.caller().name() == formStr(WPPSubTaskDefault))
        {
            argsCaller = _args.caller().args();
    
            if (argsCaller)
            {
                callerCommon = argsCaller.record();
            }
        }
    
        subTaskGroupAdd = WPPSubTaskGroupAdd::construct();
        subTaskGroupAdd.parmCallerCommon(callerCommon);
    
        if (subTaskGroupAdd.prompt())
        {
            subTaskGroupAdd.runOperation();
    
            argsCommon = _args.record();
    
            if (FormDataUtil::isFormDataSource(argsCommon))
            {
                formDataSource = FormDataUtil::getFormDataSource(argsCommon);
                formDataSource.research(true);
            }
    
            if (FormDataUtil::isFormDataSource(callerCommon))
            {
                if (callerCommon.TableId == tableNum(BOBObjectTable))
                {
                    objectTableFind.data(callerCommon);
                }
    
                formDataSource = FormDataUtil::getFormDataSource(callerCommon);
                formDataSource.research(true);
                formDataSource.refresh();
    
                if (objectTableFind)
                {
                    formDataSource.positionToRecord(objectTableFind);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>