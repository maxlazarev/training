<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRVendDocumentLineTypePhysical_PurchParmClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(VendDocumentLineTypePhysical_PurchParm))]
public final class DNRVendDocumentLineTypePhysical_PurchParmClass_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineDefaultInventQtys</Name>
				<Source><![CDATA[
    public container determineDefaultInventQtys(InventQty _inventQty)
    {
        // *** Repeated code
        container ret = next determineDefaultInventQtys(_inventQty);

        // Workaround for the "Common Language Runtime detected an invalid program.", resulting from the update to 10.0.13 PEAP
        VendDocumentLineMap vendDocumentLineMapLoc = this.vendDocumentLineMap();

        if(!vendDocumentLineMapLoc.VendDocumentLineMap::isNonPO())
        {
            PurchQuantity purchQuantity = PurchQuantity::construct(vendDocumentLineMapLoc.Ordering);

            Debug::assert(purchQuantity != null);

            if (this.mainStrategy().vendDocumentLineMap().Ordering == DocumentStatus::RORReturnNote)
            {
                purchQuantity.RORparmRentalSubStatus(BOBRentalSubStatus::Returned);
            }
            
            VendDocumentLineType defaultingStrategy = this.mainStrategy();
            ret = purchQuantity.qtyInvent(defaultingStrategy.purchLine(), defaultingStrategy.parmSpecQty(), _inventQty, defaultingStrategy.purchParmUpdate().CreditRemaining);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchQtys</Name>
				<Source><![CDATA[
    public container determineDefaultPurchQtys(PurchQty _purchQty)
    {
        // *** Repeated code
        container ret = next determineDefaultPurchQtys(_purchQty);
        
        // Workaround for the "Common Language Runtime detected an invalid program.", resulting from the update to 10.0.13 PEAP
        VendDocumentLineMap vendDocumentLineMapLoc = this.vendDocumentLineMap();

        if(!vendDocumentLineMapLoc.VendDocumentLineMap::isNonPO())
        {
            PurchQuantity purchQuantity = PurchQuantity::construct(vendDocumentLineMapLoc.Ordering);

            Debug::assert(purchQuantity != null);

            if (this.mainStrategy().vendDocumentLineMap().Ordering == DocumentStatus::RORReturnNote)
            {
                purchQuantity.RORparmRentalSubStatus(BOBRentalSubStatus::Returned);
            }
        
            VendDocumentLineType defaultingStrategy = this.mainStrategy();
            ret = purchQuantity.qtyPurch(defaultingStrategy.purchLine(), defaultingStrategy.parmSpecQty(), _purchQty, defaultingStrategy.purchParmUpdate().CreditRemaining);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>