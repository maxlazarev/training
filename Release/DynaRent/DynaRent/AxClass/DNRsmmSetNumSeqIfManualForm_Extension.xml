<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRsmmSetNumSeqIfManualForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(smmSetNumSeqIfManual))]
public final class DNRsmmSetNumSeqIfManualForm_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccountNum</Name>
				<Source><![CDATA[
    public boolean checkAccountNum()
    {
        NumberSequenceTable numberSequenceTable;
        
        boolean ret = next checkAccountNum();

        if (newAccountNum.text())
        {
            if (numtoCreate == smmAccountNumToCreate::IRMCustVendAccount)
            {
                // Extension of the first check in this method
                if (!IRMNewAccountNum.text())
                {
                    return false;
                }
    
                boolean checkOk = true;

                // Make sure limits are OK, and also the format is right
                numberSequenceTable = smmParameters::findNumberSequence(extendedTypeNum(CustAccount));
                if (!(NumberSeq::numCheckFormat(IRMNewAccountNum.text(), numberSequenceTable)
                &&   NumberSeq::numCheckFormat(newAccountNum.text(), numberSequenceTable)))
                {
                    return false;
                }
                
                CustTable custTableLoc = CustTable::find(newAccountNum.text());

                if (custTableLoc)
                {
                    // The account number is already used
                    error(strFmt("@SYS59639", newAccountNum.text()));
                    checkOk = false;
                }
    
                numberSequenceTable = smmParameters::findNumberSequence(extendedTypeNum(VendAccount));
                if (!(NumberSeq::numCheckFormat(IRMNewAccountNum.text(), numberSequenceTable)
                &&   NumberSeq::numCheckFormat(newAccountNum.text(), numberSequenceTable)))
                {
                    return false;
                }

                VendTable vendTableLoc = VendTable::find(IRMNewAccountNum.text());
                
                if (vendTableLoc)
                {
                    error(strFmt("@SYS81254", IRMNewAccountNum.text()));
                    checkOk = false;
                }
    
                if (!checkOk)
                {
                    return false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceType</Name>
				<Source><![CDATA[
    protected ExtendedTypeId getNumberSequenceType(SmmAccountNumToCreate _smmAccountNumToCreate)
    {
        ExtendedTypeId ret = next getNumberSequenceType(_smmAccountNumToCreate);

        if(_smmAccountNumToCreate == smmAccountNumToCreate::IRMCustVendAccount)
        {
            ret = extendedTypeNum(CustAccount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewAccountNumFromNumberSeq</Name>
				<Source><![CDATA[
    public void setNewAccountNumFromNumberSeq(NumberSequenceType _numberSequenceType)
    {
        next setNewAccountNumFromNumberSeq(_numberSequenceType);

        if (numtoCreate == smmAccountNumToCreate::IRMCustVendAccount)
        {
            NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(VendAccount));
            NumberSequenceTable     numberSequenceTable     = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);
    
            if (!numberSequenceTable.Manual && (numberSequenceTable.AllowChangeDown || numberSequenceTable.AllowChangeUp))
            {
                NumberSeq   numberSeq   = NumberSeq::newGetNum(numberSequenceReference, true, true);
                Num         num         = numberSeq.num();
    
                newAccountNum.text(num);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAccountNum</Name>
				<Source><![CDATA[
    str newAccountNum()
    {
        str ret = next newAccountNum();

        if (this.closedOk() && this.checkAccountNum())
        {
            if (numtoCreate == smmAccountNumToCreate::IRMCustVendAccount)
            {
                ret = newAccountNum.text() + ',' + IRMNewAccountNum.text();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_initCaptionAndNewAccountNumDelegate</Name>
				<Source><![CDATA[
    // event handler methods

    [SubscribesTo(formStr(smmSetNumSeqIfManual), delegateStr(smmSetNumSeqIfManual, initCaptionAndNewAccountNumDelegate))]
    public static void DNREvent_initCaptionAndNewAccountNumDelegate(smmAccountNumToCreate _numtoCreate, FormDesign _formDesign, FormStringControl _newAccountNum, EventHandlerResult _result)
    {
        if(_numtoCreate == smmAccountNumToCreate::IRMCustVendAccount)
        {
            // Customer account
            FormStringControl newAccountNum = _formDesign.controlName(formControlStr(smmSetNumSeqIfManual, newAccountNum));
            // Vendor account
            FormStringControl IRMNewAccountNum = _formDesign.controlName(formControlStr(smmSetNumSeqIfManual, IRMNewAccountNum));

            newAccountNum.limitText(new SysDictType(extendedTypeNum(CustAccount)).stringLen());
            IRMNewAccountNum.limitText(new SysDictType(extendedTypeNum(VendAccount)).stringLen());

            newAccountNum.label("@SYS7149");
            IRMNewAccountNum.label("@SYS14048");

            _formDesign.caption("@GLS1040");

            IRMNewAccountNum.visible(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>