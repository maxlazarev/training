<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORFuelDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORFuelDelete
{
    ItemId      itemIdFuel;
    SalesLine   salesLineFuelHost;
    SalesLine   salesLineFuel;
    Common      callerRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRefreshCaller</Name>
				<Source><![CDATA[
    private void checkRefreshCaller()
    {
        FormDataSource dataSource;
        ;
    
        if(FormDataUtil::isFormDataSource(callerRecord))
        {
            dataSource = FormDataUtil::getFormDataSource(callerRecord);
            dataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFuelLine</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    private void deleteFuelLine()
    {
        SalesLine salesLineDelete;
        ;
    
        delete_from salesLineDelete
        where salesLineDelete.RecId == salesLineFuel.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SalesLine _salesLineFuelHost, Common _callerRecord)
    {
        itemIdFuel          = RORParameters::find().ItemIdFuel;
        callerRecord        = _callerRecord;
        salesLineFuelHost   = _salesLineFuelHost;
    
        if(_callerRecord.TableId == tableNum(RORRentalFuelMgtView))
        {
            RORRentalFuelMgtView    callerRentalFuelMgt;
            callerRentalFuelMgt = _callerRecord;
            salesLineFuel = SalesLine::findRecId(callerRentalFuelMgt.RecIdFuelLine);
        }
        else
        {
            container   con = [SalesStatus::Backorder, SalesStatus::None];
            
            select firstOnly salesLineFuel
            where salesLineFuel.RORParentLineRecId == salesLineFuelHost.RecId
            &&    salesLineFuel.ItemId == itemIdFuel
            &&    salesLineFuel.SalesStatus  in  con ;
                
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean         ret;
        DialogButton    dialogResult;
        ;
    
        dialogResult = Box::yesNo(strFmt("@SYS302359", tablePName(SalesLine)), DialogButton::No, "@SYS24848");
        ret = (dialogResult == DialogButton::Yes);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if(this.validate())
        {
            this.deleteFuelLine();
            this.checkRefreshCaller();
    
            info("@DNR6653");
        }
        else
        {
            throw error("@SYS93289");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;
        ;
    
        if(!itemIdFuel)
        {
            ret = checkFailed(strFmt("@DNR6654", "@DNR2433"));
        }
    
        if(!salesLineFuelHost)
        {
            ret = checkFailed(strFmt("@DNR6655", tablePName(SalesLine)));
        }
    
        if(!salesLineFuel)
        {
            ret = checkFailed(strFmt("@DNR6652", salesLineFuelHost.InventTransId));
        }
    
        ret = ret && salesLineFuel.validateDelete();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RORFuelDelete construct(Common _callerRecord)
    {
        RORRentalOrderLineView  callerRentalOrderLine;
        RORRentalFuelMgtView    callerRentalFuelMgt;
        SalesLine               callerSalesLine;
        ;
    
        switch(_callerRecord.TableId)
        {
            case tableNum(RORRentalOrderLineView):
                callerRentalOrderLine = _callerRecord;
                callerSalesLine = callerRentalOrderLine.salesLine();
                return new RORFuelDelete(callerSalesLine, callerRentalOrderLine);
    
            case tableNum(RORRentalFuelMgtView):
                callerRentalFuelMgt = _callerRecord;
                callerSalesLine = callerRentalFuelMgt.salesLine();
                return new RORFuelDelete(callerSalesLine, callerRentalFuelMgt);
    
            case tableNum(SalesLine):
                return new RORFuelDelete(_callerRecord, _callerRecord);
    
            default:
                throw error(strFmt("@SYS31187", tableId2name(_callerRecord.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RORFuelDelete fuelDelete;
        ;
    
        if(_args && _args.record())
        {
            fuelDelete = RORFuelDelete::construct(_args.record());
    
            if(fuelDelete.prompt())
            {
                fuelDelete.run();
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(classStr(RORFuelDelete)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>