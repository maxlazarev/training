<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPTransportPlanboardData_Dlv</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPTransportPlanboardData_Dlv extends WPPTransportPlanboardData_Unplanned
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        return DateTimeUtil::newDateTime(settings.FromDateDlv, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateColor</Name>
				<Source><![CDATA[
    protected int getDateColor(WPPTmpTransportPlanboardData _tmpData)
    {
        int rowItemColor = #ColorBlack;

        if (_tmpData.WorkOrderLineStatus <= WPPWorkOrderLineStatus::Planned && _tmpData.RequestedStartDateTime < DateTimeUtil::getSystemDateTime())
        {
            rowItemColor = #ColorRed;
        }
        
        return rowItemColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayMode</Name>
				<Source><![CDATA[
    protected WPPPlanboardDisplayMode getDisplayMode()
    {
        return settings.DisplayModeDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImages</Name>
				<Source><![CDATA[
    public container getImages(WPPTmpTransportPlanboardData _tmpData)
    {
        container ret;

        ret = super(_tmpData);

        // show this icon on all tasks that have a parent that hasn't yet been completed
        if (parameters.ShowParentNotCompletedIcon
        &&  _tmpData.WorkOrderParentLineRecId
        &&  _tmpData.WorkOrderParentLineStatus < WPPWorkOrderLineStatus::Completed)
        {
            ret += [ #ParentLineNotCompleted ];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalTaskType</Name>
				<Source><![CDATA[
    protected WPPTaskType internalTaskType()
    {
        return WPPTaskType::InternalDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePlanboard</Name>
				<Source><![CDATA[
    protected void populatePlanboard()
    {
        /*HiGHPlanboard.TablePlanningItem[]   itemArray;
        HiGHPlanboard.TablePlanningItem     planningItem;

        WPPTmpTransportPlanboardData        tmpDataLocal;
        StartDateTime                       itemStartDateTime;
        EndDateTime                         itemEndDateTime;
        Counter                             idx;
        Query                               query;
        QueryRun                            queryRun;

        if (settings.DisplayModeDlv == WPPPlanboardDisplayMode::Graphical)
        {
        select firstOnly count(RecId) from tmpData;
        entryCount = tmpData.RecId;
        itemArray = new HiGHPlanboard.TablePlanningItem[entryCount]();

        // we need to use a Query object because of the dynamic sort fields
        query = settings.getTmpDataQuery(this.taskType());
        queryRun = new QueryRun(query);
        queryRun.setCursor(tmpData);

        while(queryRun.next())
        {
        tmpDataLocal = queryRun.get(tableNum(WPPTmpTransportPlanboardData));
        itemStartDateTime = DateTimeUtil::applyTimeZoneOffset(tmpDataLocal.RequestedStartDateTime, DateTimeUtil::getUserPreferredTimeZone());
        itemEndDateTime = DateTimeUtil::applyTimeZoneOffset(tmpDataLocal.RequestedEndDateTime, DateTimeUtil::getUserPreferredTimeZone());

        planningItem = new HiGHPlanboard.TablePlanningItem();
        planningItem.set_StartDateTime(itemStartDateTime);
        planningItem.set_EndDateTime(itemEndDateTime);
        planningItem.set_RefTableId(tableNum(WPPWorkOrderLine));
        planningItem.set_RefRecId(tmpDataLocal.WorkOrderLineRecId);

        this.setItemContent(planningItem, tmpDataLocal);
        itemArray.SetValue(planningItem, idx);
        idx ++;
        }

        entryCollection.AddRange(itemArray);
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    protected void populateTmpData(RecId _recIdFilter = 0)
    {
        SalesLine           salesLine, salesLineExch;
        WPPWorkOrderLine    workOrderLineParent;
        WPPWorkOrderTable   workOrderTable;
        WMSShipment         wmsShipment;
        WMSOrderTrans       wmsOrderTrans;
        InventTransferLine  inventTransferLine;

        super(_recIdFilter);

        // populate ExchangeType
        update_recordSet tmpData
        setting ExchangeType = salesLine.RORAmendmentExchangeType
        where tmpData.SalesLineRecId
            join TableId from salesLineExch
            where salesLineExch.RecId == tmpData.SalesLineRecId
                join RORAmendmentExchangeType from salesLine
                where salesLine.RORRecIdExchanged == salesLineExch.RecId
                &&    salesLine.RORAmendmentExchangeType != RORAmendmentExchangeType::None;

        // populate the status of the parent line
        update_recordSet tmpData
        setting WorkOrderParentLineStatus = workOrderLineParent.Status
        where tmpData.WorkOrderParentLineRecId
            join Status from workOrderLineParent
            where workOrderLineParent.RecId == tmpData.WorkOrderParentLineRecId;

        if (settings.InventLocationId)
        {
            delete_from tmpData
            where tmpData.WorkOrderTableWarehouse != settings.InventLocationId;
        }

        // populate "Internal" customer name for if related shipment is linked to a transfer order
        update_recordSet tmpData
        setting CustName = "@SYS15017"
        where tmpData.WorkOrderTableRecId
            exists join workOrderTable
            where workOrderTable.RecId == tmpData.WorkOrderTableRecId
            &&    workOrderTable.OrderTableId == tableNum(WMSShipment)
            &&    workOrderTable.OrderRecId
                join RecId from wmsShipment
                where wmsShipment.RecId == workOrderTable.OrderRecId
                    join RecId from wmsOrderTrans
                    where wmsOrderTrans.shipmentId == wmsShipment.shipmentId
                    &&    wmsOrderTrans.inventTransType == InventTransType::TransferOrderShip
                        join RecId from inventTransferLine
                        where inventTransferLine.InventTransId == wmsOrderTrans.inventTransId
                        &&    inventTransferLine.TransferId == wmsOrderTrans.inventTransRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    protected void postRun()
    {
        super();
        //planningItemList.set_Columns(settings.ColumnsDlv);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskType</Name>
				<Source><![CDATA[
    protected WPPTaskType taskType()
    {
        return WPPTaskType::Delivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime()
    {
        #DNRConstants
        ToDateTime ret;

        if (settings.ToDateDlv)
        {
            ret = DateTimeUtil::newDateTime(settings.ToDateDlv, #INVTimeMax);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>