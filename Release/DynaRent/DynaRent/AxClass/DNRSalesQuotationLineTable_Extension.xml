<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesQuotationLine))]
public final class DNRSalesQuotationLineTable_Extension
{
    // Chain-of-Command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPriceDiscPriceAgreementParameterInstance</Name>
				<Source><![CDATA[
    protected PriceDiscPriceAgreementParameters createPriceDiscPriceAgreementParameterInstance()
    {
        PriceDiscPriceAgreementParameters ret = next createPriceDiscPriceAgreementParameterInstance();
        ret.DNRParmSkipPriceDisc(this.DNRSkipSetPriceDisc);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceForProjTransType</Name>
				<Source><![CDATA[
    protected void setPriceForProjTransType(QuotationProjTransType _quotationProjTransType)
    {
        if(_quotationProjTransType == QuotationProjTransType::Item
        && this.RORProjTransType == RORProjTransType::Rental)
        {
            this.DNRSkipSetPriceDisc = NoYes::Yes;
        }

        next setPriceForProjTransType(_quotationProjTransType);

        this.DNRSkipSetPriceDisc = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId, boolean _userInput)
    {
        next modifiedField(_fieldId, _userInput);

        this.RORModifiedField(_fieldId);
        this.BOBModifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_QuotationTypeExtension</Name>
				<Source><![CDATA[
    protected void modifiedField_QuotationTypeExtension(FieldId _fieldId)
    {
        // We do not need to call 'next'; the method is decorated with the '[Replacable]' attribute.

        if (this.QuotationType == QuotationType::RORProjRental)
        {
            this.modifiedField_Project(_fieldId);
        }
        else if (this.QuotationType == QuotationType::RORRental)
        {
            next modifiedField_QuotationTypeExtension(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_Sales</Name>
				<Source><![CDATA[
    public void modifiedField_Sales(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(SalesQuotationLine, SalesPrice))
        {
            this.RORPriceModified();
        }

        next modifiedField_Sales(_fieldId);

        if (_fieldId == fieldNum(SalesQuotationLine, SalesQty))
        {
            if (this.RORTradeType != RORTradeType::SalesPurch && !this.RORIsPriceFixed)
            {
                this.RORRentalGrossAmount = (this.SalesPrice * this.SalesQty);
                this.RORRentalLine::rentalPricesModified();

                this.RORInsurancePctModified();
                
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    public boolean modifyInventDim(InventDim _inventDim, FieldId _dimFieldId)
    {
        if (_dimFieldId == fieldNum(InventDim, InventSerialId))
        {
            if (this.RORTradeType == RORTradeType::Rental || this.RORTradeType == RORTradeType::SubRental)
            {
                BOBObjectAssignmentEngine::construct(this, _inventDim.InventSerialId).runOperation();
            }

            if(this.BOBSellFixedAsset && _inventDim.inventSerialId)
            {
                BOBObjectTable objectTableLoc = BOBObjectTable::findInventSerialId(_inventDim.inventSerialId);

                if(objectTableLoc && !objectTableLoc.assetId())
                {
                    this.BOBSellFixedAsset = NoYes::No;
                }
            }
        }
        
        boolean ret = next modifyInventDim(_inventDim, _dimFieldId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromSalesQuotationTable</Name>
				<Source><![CDATA[
    void setAddressFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        next setAddressFromSalesQuotationTable(_salesQuotationTable);

        if (this.RORVenueCode != _salesQuotationTable.RORVenueCode)
        {
            this.RORVenueCode = _salesQuotationTable.RORVenueCode;
            this.RORUpdateSalesQtyFromVenueTable(RORVenueTable::find(this.RORVenueCode), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete(boolean validateOnly)
    {
        SalesQuotationLineType  salesQuotationLineType;
        SalesQuotationLine      childrenLines;

        boolean ret = next validateDelete(validateOnly);

        if (ret)
        {
            // Allow delete parent only if all children can be deleted as well.
            while select childrenLines
            where childrenLines.RORParentLineRecId == this.RecId
            {
                salesQuotationLineType = childrenLines.type();
                ret = salesQuotationLineType.validateDelete();
    
                if (!ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    public void itemIdChanged()
    {
        this.RORInitFromVenueTable(RORVenueTable::find(this.salesQuotationTable().RORVenueCode));

        next itemIdChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_Project</Name>
				<Source><![CDATA[
    public void modifiedField_Project(FieldId _fieldId)
    {
        next modifiedField_Project(_fieldId);

        SalesQuotationTable salesQuotationTable = this.salesQuotationTable();
        QuotationType       quotationType       = salesQuotationTable.QuotationType;

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine, SalesQty) :
                if (this.RORTradeType != RORTradeType::SalesPurch && !this.RORIsPriceFixed)
                {
                    this.RORRentalGrossAmount = (this.SalesPrice * this.SalesQty);
                    this.RORRentalLine::rentalPricesModified();

                    this.RORInsurancePctModified();                
                }
                break;

            case fieldNum(SalesQuotationLine, ProjTransType) :
                if (this.ProjTransType == QuotationProjTransType::Item)
                {
                    if (this.RORProjTransType == RORProjTransType::None)
                    {
                        this.RORProjTransType = RORProjTransType::Rental;
                        this.modifiedField(fieldNum(SalesQuotationLine, RORProjTransType));
                    }
                }
                else
                {
                    this.RORProjTransType = RORProjTransType::None;
                    this.RORTradeType = RORTradeType::SalesPurch;
                }
                break;
    
            case fieldNum(SalesQuotationLine, RORProjTransType),
                fieldNum(SalesQuotationLine, ItemId):
                if (this.ProjTransType == QuotationProjTransType::Item
                &&  this.RORProjTransType == RORProjTransType::Rental
                &&  this.ItemId)
                {
                    this.RORRentalLine::initFromInventTable(
                        this.inventTable(),
                        quotationType == quotationType::RORProjRental,
                        this.QuotationType == QuotationType::RORProjRental);
                    this.DNRCalendarId = this.DNRCalendarId ? this.DNRCalendarId : salesQuotationTable.DNRCalendarId;
                    this.INVInvoiceProfileId = this.INVInvoiceProfileId ? this.INVInvoiceProfileId : salesQuotationTable.INVInvoiceProfileId;
                    this.RORPriceTimeUnit = this.RORPriceTimeUnit ? this.RORPriceTimeUnit : salesQuotationTable.RORPriceTimeUnit;
                }
                else
                {
                    this.RORTradeType = RORTradeType::SalesPurch;
                }    
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId _fieldId)
    {
        boolean ret = next validateField(_fieldId);

        if (ret && this.QuotationType == QuotationType::RORProjRental)
        {
            ret = this.RORValidateField(_fieldId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnsubmittedProject</Name>
				<Source><![CDATA[
    public boolean isUnsubmittedProject()
    {
        boolean ret = next isUnsubmittedProject();

        if (!ret)
        {
            ret = (this.QuotationType == QuotationType::RORProjRental
            && (this.QuotationStatus == SalesQuotationStatus::Revised ||
                this.QuotationStatus == SalesQuotationStatus::Modified ||
                this.QuotationStatus == SalesQuotationStatus::Approved));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesQuotationLineOverride</Name>
				<Source><![CDATA[
    public MCRSalesQuotationLineOverride mcrSalesQuotationLineOverride(boolean _packedNewExtensionTable)
    {
        MCRSalesQuotationLineOverride ret = next mcrSalesQuotationLineOverride(_packedNewExtensionTable);
        ret.PriceOverride = (this.RORTradeType != RORTradeType::SalesPurch);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcPriceDiscOnInventDimChange</Name>
				<Source><![CDATA[
    protected void recalcPriceDiscOnInventDimChange(InventDim _inventDim, FieldId _dimFieldId)
    {
        next recalcPriceDiscOnInventDimChange(_inventDim, _dimFieldId);
        
        //Get rental agreement prices on warehouse change
        if (_dimFieldId == fieldNum(InventDim, InventLocationId)             
        &&  (this.RORTradeType == RORTradeType::Rental || this.RORTradeType == RORTradeType::SubRental)
        &&  this.RecId && this.orig().inventDim().InventLocationId != _inventDim.InventLocationId
        &&  FormDataUtil::isFormDataSource(this) &&  this.RORRentalLine::promptChangeInventLocationResetPrice())               
        {
            PriceDiscPriceAgreementParameters parameters = PriceDiscPriceAgreementParameters::createInstance(this);
            parameters.DNRparmForceRentalAgreement(true);
            this.setPriceDisc(_inventDim, parameters);     
        }           
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        next shouldThrowExceptionOnZeroDelete();

        // Do not throw an error message in case of concurrent deletes.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREditProjActivity</Name>
				<Source><![CDATA[
    // Extension methods

    edit smmActivityNumber DNREditProjActivity(boolean _set, smmActivityNumber _projActivity)
    {
        if(_set)
        {
            this.ProjActivity = _projActivity;
        }

        return this.ProjActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBCreateCompensatingMovement</Name>
				<Source><![CDATA[
    public void BOBCreateCompensatingMovement(Common _childBuffer, EventHandlerResult _result)
    {
        // compensating movement
        InventMovement movement = InventMovement::construct(this, InventMovSubType::BOBCompensatingTrans, _childBuffer);
        InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(movement);
        estimated.BOBParmIsCompensatingTrans(true);
        estimated.updateNow();
        InventTransOriginId originId = movement.inventTransOriginId();
    
        // normal movement -- reuse InventTransOriginId so we don't end up with duplicates in table InventTransOrigin
        movement = InventMovement::construct(this, InventMovSubType::None, _childBuffer);
        movement.inventTransOriginId(originId);
    
        estimated = InventUpd_Estimated::newInventMovement(movement);
        estimated.updateNow();

        _result.result(estimated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBModifiedField</Name>
				<Source><![CDATA[
    private void BOBModifiedField(FieldId _fieldId)
    {
        if((_fieldId == fieldNum(SalesQuotationLine, ReceiptDateRequested)  &&  this.ReceiptDateRequested)
        || (_fieldId == fieldNum(SalesQuotationLine, ShippingDateRequested) && !this.ReceiptDateRequested))
        {
            this.RORRentalLine::BOBSynchRentalTransDateTimes();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBRentalTypeId</Name>
				<Source><![CDATA[
    public BOBRentalTypeId BOBRentalTypeId()
    {
        return (this.BOBRentalTypeIdAssigned ?
                this.BOBRentalTypeIdAssigned :
                this.BOBRentalTypeIdRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCanCascadeProjActivityToLines</Name>
				<Source><![CDATA[
    public boolean RORCanCascadeProjActivityToLines(SalesQuotationLine _this_orig = this.orig())
    {
        SalesQuotationLine  salesQuotationLineChild;
        boolean             ret;
        ;
    
        if (this.ProjActivity != _this_orig.ProjActivity)
        {
            select firstOnly RecId from salesQuotationLineChild
            where salesQuotationLineChild.QuotationId       == this.QuotationId
            && salesQuotationLineChild.RORParentLineRecId   == this.RecId
            && salesQuotationLineChild.ProjActivity         != this.ProjActivity;
    
            if (salesQuotationLineChild)
            {
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCanUnassignObject</Name>
				<Source><![CDATA[
    public boolean RORCanUnassignObject()
    {
        boolean         ret;
        InventSerialId  inventSerialId;
        ProjId          projId;
        SalesLine       salesLine;
        InventDim       inventDim;
        ;
    
        if (this.RORProjTransType == RORProjTransType::Rental
        && this.inventDim().inventSerialId)
        {
            inventSerialId = this.inventDim().inventSerialId;
            projId = this.projId();
    
            select firstOnly RecId from salesLine
            where salesLine.ProjId == projId
                exists join inventDim
                where inventDim.inventDimId == salesLine.InventDimId
                && inventDim.inventSerialId == inventSerialId;
    
            if (!salesLine)
            {
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCascadeProjActivityToLines</Name>
				<Source><![CDATA[
    public void RORCascadeProjActivityToLines(SalesQuotationLine _this_orig = this.orig())
    {
        SalesQuotationLine  salesQuotationLineChild;
        ;
    
        while select forupdate salesQuotationLineChild
        where salesQuotationLineChild.QuotationId       == this.QuotationId
        && salesQuotationLineChild.RORParentLineRecId   == this.RecId
        && salesQuotationLineChild.ProjActivity         != this.ProjActivity
        && salesQuotationLineChild.ProjActivity         == _this_orig.ProjActivity
        {
            salesQuotationLineChild.ProjActivity = this.ProjActivity;
            salesQuotationLineChild.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckTradeType</Name>
				<Source><![CDATA[
    public boolean RORCheckTradeType(InventTable _inventTable = this.inventTable())
    {
        boolean             ret = true;
        RORTradeType        tradeType;
        SalesQuotationTable salesQuotationTable = this.salesQuotationTable();
        ;
    
        if (_inventTable)
        {
            switch (_inventTable.RORItemTradeType)
            {
                case RORItemTradeType::SalesPurch :
                    if (this.RORTradeType != RORTradeType::SalesPurch)
                    {
                        ret = false;
                        tradeType = RORTradeType::SalesPurch;
                    }
                    break;
    
                case RORItemTradeType::RentalSubRental :
                    if (this.RORTradeType == RORTradeType::SalesPurch)
                    {
                        ret = false;
                        tradeType = RORTradeType::Rental;
                    }
                    break;
    
                default:
                    // Do nothing
                    break;
            }
        }
    
        if (!ret)
        {
            ret = checkFailed(strFmt("@DNR6337", tradeType));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCopyProjActivityFromTemplate</Name>
				<Source><![CDATA[
    public void RORCopyProjActivityFromTemplate(QuotationId _quotationIdTemplate, smmActivityNumber _activityNumberFromTemplate, HierarchyIdBase _hierarchyId)
    {
        HierarchyTreeTable      /*hierarchyTreeTable,*/ hierarchyTreeTableTemplate, hierarchyTreeTableChild, hierarchyTreeTableChildFromTemplate;
        smmActivities           smmActivities;
        int                     position, positionTemplate;
        smmActivityNumber       smmActivityNumber;
    
        if (isConfigurationkeyEnabled(configurationKeyNum(Project3)))
        {
            //select HierarchyId, RecId from hierarchyTreeTable
            //    exists join smmActivities
            //    where smmActivities.ActivityNumber == this.ProjActivity
            //    && smmActivities.RecId == hierarchyTreeTable.RefRecId;
            select HierarchyId, Level, RecId from hierarchyTreeTableTemplate
                exists join smmActivities
                where smmActivities.ActivityNumber == _activityNumberFromTemplate
                && smmActivities.RecId == hierarchyTreeTableTemplate.RefRecId;
    
            while select RecId from hierarchyTreeTableChildFromTemplate
            order by RecId
            where hierarchyTreeTableChildFromTemplate.HierarchyId == hierarchyTreeTableTemplate.HierarchyId
            &&    hierarchyTreeTableChildFromTemplate.Level == hierarchyTreeTableTemplate.Level
            {
                positionTemplate++;
                if (hierarchyTreeTableChildFromTemplate.RecId == hierarchyTreeTableTemplate.RecId)
                {
                    break;
                }
            }
            while select RefRecId from hierarchyTreeTableChild
            order by RecId
            where hierarchyTreeTableChild.HierarchyId == _hierarchyId
            &&    hierarchyTreeTableChild.Level == hierarchyTreeTableTemplate.Level
            {
                position++;
                if (position == positionTemplate)
                {
                    smmActivityNumber = smmActivities::findWithRecId(hierarchyTreeTableChild.RefRecId).ActivityNumber;
                    break;
                }
            }
    
            this.ProjActivity = smmActivityNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateExtraLine</Name>
				<Source><![CDATA[
    public RORRentalLine RORCreateExtraLine(RORTradeType _tradeType, RORKitComponentType _kitComponentType, ItemId _itemId, LineNum _highestLineNum)
    {
        SalesQuotationLine      salesQuotationLine;
        SalesQuotationLine      salesQuotationLineNextLineNum;
        LineNum                 lineNum;
        SalesUnit               salesUnit;
        SalesQty                salesQty;
        ;
    
        select firstonly LineNum from salesQuotationLineNextLineNum
        order by LineNum
        where salesQuotationLineNextLineNum.QuotationId == this.QuotationId
        &&    salesQuotationLineNextLineNum.LineNum     > _highestLineNum;
    
        if (salesQuotationLineNextLineNum.LineNum)
        {
            lineNum = _highestLineNum + ((salesQuotationLineNextLineNum.LineNum - _highestLineNum) / 2);
        }
        else
        {
            lineNum = _highestLineNum + 1.00;
        }
    
    
        salesQuotationLine.initValue();
        salesQuotationLine.initFromSalesQuotationTable(this.salesQuotationTable());
        salesQuotationLine.QuotationType           = this.QuotationType;
    
        if (salesQuotationLine.QuotationType == QuotationType::RORProjRental)
        {
            salesQuotationLine.ProjTransType           = this.ProjTransType;
            salesQuotationLine.RORProjTransType        = this.RORProjTransType;
        }
    
        salesQuotationLine.QuotationId             = this.QuotationId;
        salesQuotationLine.RORTradeType            = this.RORTradeType;
        salesQuotationLine.RORmodifiedRORTradeType();
        salesQuotationLine.ItemId                  = _itemId;
        salesQuotationLine.itemIdChanged();
    
        // Create rental dates and periods here as elements be used when setting item to default pricing
        //salesQuotationLine.type().RORinitRentalDates();
        //salesQuotationLine.type().RORinitRentalSpecifications();
    
        salesUnit = this.RORDetermineSalesUnit(_itemId);
        salesQty = this.RORDetermineSalesQty(_itemId);
    
        salesQuotationLine.RORParentLineRecId       = this.RecId;
        salesQuotationLine.SalesQty                 = salesQty ? salesQty : 1;
        salesQuotationLine.SalesUnit                = salesUnit ? salesUnit : this.SalesUnit;
        salesQuotationLine.RORTradeType             = _tradeType;
        salesQuotationLine.RORKitComponentType      = _kitComponentType;
    
        salesQuotationLine.setPriceDisc(salesQuotationLine.inventDim());
        salesQuotationLine.RORRentalLine::initFromParent(this);
    
        if(salesQuotationLine.RORTradeType != RORTradeType::SalesPurch)
        {
            salesQuotationLine.RORRentalPricesModified();
        }
    
        salesQuotationLine.LineNum                  = lineNum;
                
        if (_tradeType != RORTradeType::SalesPurch)
        {
            // for rental line like Insurance - copy from parent
            salesQuotationLine.InventDimId = this.InventDimId;
        }
    
        salesQuotationLine.RORReturnInventLocationId = this.RORReturnInventLocationId ? this.RORReturnInventLocationId : this.inventDim().InventLocationId;
    
        salesQuotationLine.createLine(true, false, false, true, false, true);
    
        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDetermineSalesQty</Name>
				<Source><![CDATA[
    private SalesQty RORDetermineSalesQty(ItemId _itemId)
    {
        RORVenueTable           venueTable;
        SalesQuotationTable     salesQuotationTable;
    
        if (InventTable::find(_itemId).RORBasePriceOnDistance)
        {
            select firstOnly TransportDistanceQty from venueTable
                join TableId from salesQuotationTable
                where salesQuotationTable.RORVenueCode == venueTable.VenueCode
                &&    salesQuotationTable.QuotationId == this.QuotationId;
        }
    
        return venueTable.TransportDistanceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDetermineSalesUnit</Name>
				<Source><![CDATA[
    private SalesUnit RORDetermineSalesUnit(ItemId _itemId)
    {
        UnitOfMeasure           unitOfMeasure;
        RORVenueTable           venueTable;
        SalesQuotationTable     salesQuotationTable;
    
        if (InventTable::find(_itemId).RORBasePriceOnDistance)
        {
            select firstOnly Symbol from unitOfMeasure
                exists join venueTable
                where venueTable.TransportDistanceUnit == unitOfMeasure.RecId
                    join TableId from salesQuotationTable
                    where salesQuotationTable.RORVenueCode == venueTable.VenueCode
                    &&    salesQuotationTable.QuotationId == this.QuotationId;
        }
    
        return unitOfMeasure.Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayCurrentNetAmount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display RORCurrentNetAmount RORDisplayCurrentNetAmount()
    {
        RORCurrentNetAmount    netAmount;
    
        if (hasFieldAccess(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, RORRentalGrossAmount)))
        {
            netAmount = this.INVInvoicePeriodHost::displayCurrentNetAmount();
        }
    
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayItemName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display Description1000 RORDisplayItemName()
    {
        return this.Name;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayExpectedOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORExpectedOffRentDateTime RORDisplayExpectedOffRentDateTime()
    {
        return this.RORRentalLine::displayExpectedOffRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayInventSerialId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display InventSerialId RORDisplayInventSerialId()
    {
        return this.inventDim().inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayLineStatus</Name>
				<Source><![CDATA[
    display ROROrderLineStatus RORdisplayLineStatus()
    {
        return (this.RORTradeType == RORTradeType::SalesPurch ?
                strFmt("%1", this.QuotationStatus) :
                strFmt("%1", this.BOBRentalSubStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROffRentDateTime RORDisplayOffRentDateTime()
    {
        return this.RORRentalLine::displayOffRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayOnRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROnRentDateTime RORDisplayOnRentDateTime()
    {
        return this.RORRentalLine::displayOnRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayVenueCode</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORVenueCode RORDisplayVenueCode()
    {
        RORVenueCode    venueCode;
    
        if (hasFieldAccess(tableNum(SalesQuotationTable), fieldNum(SalesQuotationTable, RORVenueCode)))
        {
            venueCode = this.salesQuotationTable().RORVenueCode;
        }
    
        return venueCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditDiscPercent</Name>
				<Source><![CDATA[
    public static edit RORRentalDiscPercent ROREditDiscPercent(SalesQuotationLine _salesQuotationLine, boolean _set, RORRentalDiscPercent _discPercent)
    {
        RORRentalDiscPercent    discPercent;
    
        if (hasFieldAccess(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LinePercent)))
        {
            switch (_salesQuotationLine.RORTradeType)
            {
                case RORTradeType::Rental,
                    RORTradeType::SubRental:
                    discPercent = _salesQuotationLine.RORRentalLine::editDiscPercent(_set, _discPercent);
                    break;
    
                default:
    
                    if (_set)
                    {
                        _salesQuotationLine.LinePercent = _discPercent;
                        _salesQuotationLine.LineAmount = _salesQuotationLine.calcLineAmountForced();
                    }
    
                    discPercent = _salesQuotationLine.LinePercent;
            }
        }
    
        return discPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditLineAmount</Name>
				<Source><![CDATA[
    public static edit LineAmount ROREditLineAmount(SalesQuotationLine _salesQuotationLine, boolean _set, LineAmount _lineAmount)
    {
        LineAmount    lineAmount;
    
        if (hasFieldAccess(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LineAmount)))
        {
            lineAmount = _salesQuotationLine.RORRentalLine::editLineAmount(_set, _lineAmount);
        }
    
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditNetAmount</Name>
				<Source><![CDATA[
    public edit RORRentalNetAmount ROREditNetAmount(boolean _set, RORRentalNetAmount _netAmount)
    {
        RORRentalNetAmount netAmount;
    
        if (hasFieldAccess(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, RORRentalGrossAmount)))
        {
            netAmount = this.RORRentalLine::editNetAmount(_set, _netAmount);
        }
    
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetHeader</Name>
				<Source><![CDATA[
    public RORRentalHeader RORGetHeader(boolean _forUpdate = false)
    {
        return this.salesQuotationTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetParentLine</Name>
				<Source><![CDATA[
    public RORRentalLine RORGetParentLine(boolean _forUpdate = false)
    {
        return this.RORParentLineRecId ? SalesQuotationLine::findRecId(this.RORParentLineRecId, _forUpdate) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORHasChildren</Name>
				<Source><![CDATA[
    public boolean RORHasChildren(boolean _componentsOnly, boolean _filterTradeType = true)
    {
        return this.RORRentalLine::hasChildren(_componentsOnly, _filterTradeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitAddressFromVenueTable</Name>
				<Source><![CDATA[
    private void RORinitAddressFromVenueTable(RORVenueTable _venueTable)
    {
        LogisticsEntityPostalAddressView    addressView;
    
        select firstonly PostalAddress from addressView
        where addressView.IsPrimary == NoYes::Yes
        &&    addressView.EntityType == LogisticsLocationEntityType::RORVenue
        &&    addressView.Entity     == _venueTable.RecId;
    
        this.DeliveryName          = _venueTable.Name;
        this.DeliveryPostalAddress = addressView.PostalAddress;
        this.AddressRefRecId       = _venueTable.RecId;
        this.AddressRefTableId     = _venueTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromOrderLine</Name>
				<Source><![CDATA[
    private void RORInitFromOrderLine(RORRentalLine _rentalLine)
    {
        this.initFromSalesQuotationLine(_rentalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromVenueTable</Name>
				<Source><![CDATA[
    public void RORInitFromVenueTable(RORVenueTable _venueTable)
    {
        if (InventTable::find(this.ItemId).RORBasePriceOnDistance)
        {
            this.SalesQty = _venueTable.TransportDistanceQty;
            this.SalesUnit = UnitOfMeasure::find(_venueTable.TransportDistanceUnit).Symbol;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateSalesQtyFromVenueTable</Name>
				<Source><![CDATA[
    private void RORUpdateSalesQtyFromVenueTable(RORVenueTable _venueTable, boolean _skipPrompt = false)
    {
        if (InventTable::find(this.ItemId).RORBasePriceOnDistance
            && (_skipPrompt || Box::yesNo("@DNR:UpdateTransportDistance", DialogButton::Yes) == DialogButton::Yes))
        {
            SalesQty  newSalesQty = _venueTable.TransportDistanceQty;
            SalesUnit newSalesUnit = UnitOfMeasure::find(_venueTable.TransportDistanceUnit).Symbol;

            if (this.SalesQty != newSalesQty)
            {
                this.SalesQty = newSalesQty;
                this.modifiedField(fieldNum(SalesQuotationLine, SalesQty));
                this.RORPriceModified();
            }

            if (this.SalesUnit != newSalesUnit)
            {
                this.SalesUnit = newSalesUnit;
                this.modifiedField(fieldNum(SalesQuotationLine, SalesUnit));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLineBuffer</Name>
				<Source><![CDATA[
    public SalesQuotationLine RORLineBuffer()
    {
        SalesQuotationLine salesQuotationLine;
    
        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedCalendarId</Name>
				<Source><![CDATA[
    private void RORModifiedCalendarId()
    {
        this.RORRentalLine::RORModifiedCalendarId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedField</Name>
				<Source><![CDATA[
    private void RORModifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine, RORRentalGrossAmount):
                this.RORModifiedGrossAmount();                
                break;
    
            case fieldNum(SalesQuotationLine, ItemId),
                fieldNum(SalesQuotationLine, CurrencyCode),
                fieldNum(SalesQuotationLine, RORPriceTimeUnit),
                fieldNum(SalesQuotationLine, RORProjTransType):
                this.setPriceDisc(this.inventDim());
                break;
    
            case fieldNum(SalesQuotationLine, INVInvoiceProfileId):
                this.RORmodifiedInvoiceProfileId();
                break;
    
            case fieldNum(SalesQuotationLine, DNRCalendarId):
                this.RORModifiedCalendarId();
                break;
    
            case fieldnum(SalesQuotationLine, RORTradeType):
                this.RORmodifiedRORTradeType();
                break;
    
            case fieldNum(SalesQuotationLine, RORVenueCode):
                RORVenueTable venueTable = RORVenueTable::find(this.RORVenueCode);
                this.RORinitAddressFromVenueTable(venueTable);
                this.RORUpdateSalesQtyFromVenueTable(venueTable);
                break;

            case fieldNum(SalesQuotationLine, LinePercent):
                this.RORInsurancePctModified();
                this.RORRentalLine::rentalPricesModified();
                break;
            
            case fieldNum(SalesQuotationLine, RORInsuranceNetPercentage),
                fieldNum(SalesQuotationLine, RORInsuranceGrossPercentage) :
                this.RORInsurancePctModified();
                break;

            case fieldNum(SalesQuotationLine, RORInsuranceNetAmount),
                fieldNum(SalesQuotationLine, RORInsuranceGrossAmount) :
                this.RORInsuranceAmountModified();
                break;

            case fieldNum(SalesQuotationLine, RORDeliveryGrossAmount),
                fieldNum(SalesQuotationLine, RORDeliveryPercentage) :
                 this.RORRecalculateDeliveryAmount();
                break;  

            case fieldNum(SalesQuotationLine, RORReturnGrossAmount),
                 fieldNum(SalesQuotationLine, RORReturnPercentage) :
                this.RORRecalculateReturnAmount();
                  break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRecalculateDeliveryAmount</Name>
				<Source><![CDATA[
    public void RORRecalculateDeliveryAmount()
    {
        this.RORDeliveryNetAmount = this.RORDeliveryGrossAmount - (this.RORDeliveryGrossAmount * this.RORDeliveryPercentage / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRecalculateReturnAmount</Name>
				<Source><![CDATA[
    public void RORRecalculateReturnAmount()
    {
        this.RORReturnNetAmount = this.RORReturnGrossAmount - (this.RORReturnGrossAmount * this.RORReturnPercentage / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedGrossAmount</Name>
				<Source><![CDATA[
    private void RORModifiedGrossAmount()
    {
        this.RORRentalLine::modifiedGrossAmount();
        this.RORInsurancePctModified();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedInvoiceProfileId</Name>
				<Source><![CDATA[
    private void RORModifiedInvoiceProfileId()
    {
        this.RORRentalLine::RORModifiedInvoiceProfileId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedPriceTimeUnit</Name>
				<Source><![CDATA[
    public void RORModifiedPriceTimeUnit()
    {
        Factor  factor = UnitOfMeasureConverter::convert(1, this.RORPriceTimeUnit, this.orig().RORPriceTimeUnit, NoYes::No);
        ;
    
        this.SalesPrice = this.SalesPrice * factor;
        this.RORRentalGrossAmount = this.RORRentalGrossAmount * factor;
        this.RORModifiedGrossAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedRORTradeType</Name>
				<Source><![CDATA[
    public void RORModifiedRORTradeType()
    {
        if (this.RORTradeType == RORTradeType::SalesPurch)
        {
            this.BOBSellFixedAsset = this.inventTable().BOBAutoAssetConvertSales;
        }
        else
        {
            this.BOBSellFixedAsset = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPriceModified</Name>
				<Source><![CDATA[
    private void RORPriceModified()
    {
        this.RORRentalLine::priceModified();
    
        if (this.QuotationType == QuotationType::RORProjRental
        && this.RORProjTransType != RORProjTransType::Rental)
        {
            this.RORRentalGrossAmount = 0;
            this.RORInsurancePctModified();
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRentalDateTimes</Name>
				<Source><![CDATA[
    public RORRentalDateTimes RORRentalDateTimes(boolean _forUpdate = false)
    {
        return RORRentalDateTimes::findReference(this.TableId, this.RecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRentalPricesModified</Name>
				<Source><![CDATA[
    public void RORRentalPricesModified()
    {
        this.RORRentalLine::rentalPricesModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORTimeZoneSite</Name>
				<Source><![CDATA[
    public display Timezone RORTimeZoneSite()
    {
        return this.timeZoneSite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORgetLineNumContainer</Name>
				<Source><![CDATA[
    public container RORgetLineNumContainer(LineNum _lineNumCurrent, boolean _lineTypeNormal = true)
    {
        SalesQuotationLine salesQuotationLine, salesQuotationLineParent, salesQuotationLineAgmt;
        ItemId itemIdWarranty = RAGParameters::find().ItemIdWarranty;

        select firstonly LineNum from salesQuotationLine
        order by LineNum asc
        where salesQuotationLine.QuotationId == this.QuotationId
        &&   (!_lineTypeNormal || salesQuotationLine.ItemId != itemIdWarranty)
        &&    salesQuotationLine.LineNum > _lineNumCurrent
            outer join LineNum from salesQuotationLineParent
            where salesQuotationLineParent.QuotationId == salesQuotationLine.QuotationId
            &&    salesQuotationLineParent.RecId == salesQuotationLine.RORParentLineRecId;
        
        select firstonly maxOf(LineNum) from salesQuotationLineAgmt
        where salesQuotationLineAgmt.QuotationId == this.QuotationId
        &&    salesQuotationLineAgmt.ItemId == itemIdWarranty;

        return [ salesQuotationLine.LineNum, salesQuotationLineParent.LineNum, salesQuotationLineAgmt.LineNum ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetTierMultiplierRateOnCreation</Name>
				<Source><![CDATA[
    public void INVSetTierMultiplierRateOnCreation(boolean _manualRecalculation = false)
    {
        // Code implemented in model DynarentInvoicing
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetTierMultiplierOnCreation</Name>
				<Source><![CDATA[
    public void INVSetTierMultiplierOnCreation(boolean _manualRecalculation = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSetDeliveryContractInfo</Name>
				<Source><![CDATA[
    public void RORSetDeliveryContractInfo(RAGTmpContractLine _tmpContractLine)
    {
        Qty transportQty = this.SalesQty;

        this.RORDeliveryGrossAmount = (_tmpContractLine.Transport_UseRentalTypePrice? _tmpContractLine.GrossPrice_Price : _tmpContractLine.Transport_Price) * transportQty;
        this.RORRecalculateDeliveryAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSetReturnContractInfo</Name>
				<Source><![CDATA[
    public void RORSetReturnContractInfo(RAGTmpContractLine _tmpContractLine)
    {
        Qty transportQty = this.SalesQty;

        this.RORReturnGrossAmount = (_tmpContractLine.Transport_UseRentalTypePrice? _tmpContractLine.GrossPrice_Price : _tmpContractLine.ReturnTransport_Price) * transportQty;
        this.RORRecalculateReturnAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSetInsuranceContractInfo</Name>
				<Source><![CDATA[
    public void RORSetInsuranceContractInfo(RAGTmpContractLine _tmpContractLine)
    {
        this.RORInsuranceGrossPercentage = _tmpContractLine.InsurancePct_Percentage;
        this.RORInsuranceGrossAmount = this.RORRentalGrossAmount * this.RORInsuranceGrossPercentage/100;

        this.RORInsuranceCalcBasis = _tmpContractLine.Insurance_CalcBasis;
        this.RORInsuranceInsureHireStops = _tmpContractLine.Insurance_InsureHireStops;

        if (_tmpContractLine.Insurance_CalcBasis == RORInsuranceCalcBasis::Gross)
        {
            this.RORInsuranceNetPercentage = this.RORInsuranceGrossPercentage;
            this.RORInsuranceNetAmount = this.RORInsuranceGrossAmount;
        }
        else
        {
            this.RORInsuranceNetPercentage = _tmpContractLine.InsurancePct_Percentage;
            this.RORInsuranceNetAmount = this.RORRentalLine::editNetAmount(false, 0) * this.RORInsuranceNetPercentage/100;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInsurancePctModified</Name>
				<Source><![CDATA[
    public void RORInsurancePctModified()
    {
        this.RORInsuranceGrossAmount = this.RORRentalGrossAmount * this.RORInsuranceGrossPercentage/100;
        this.RORInsuranceNetAmount = this.RORRentalLine::editNetAmount(false, 0) * this.RORInsuranceNetPercentage/100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInsuranceAmountModified</Name>
				<Source><![CDATA[
    public void RORInsuranceAmountModified()
    {
        if (this.RORRentalGrossAmount)
        {
            this.RORInsuranceGrossPercentage = this.RORInsuranceGrossAmount / this.RORRentalGrossAmount * 100;
        }
        else
        {
            this.RORInsuranceGrossPercentage = 0;
        }

        if (this.RORRentalLine::editNetAmount(false, 0))
        {
            this.RORInsuranceNetPercentage = this.RORInsuranceNetAmount / this.RORRentalLine::editNetAmount(false, 0) * 100;
        }
        else
        {
            this.RORInsuranceNetPercentage = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRecalculateDeliveryReturnAmount</Name>
				<Source><![CDATA[
    public void RORRecalculateDeliveryReturnAmount()
    {
        Qty qty = this.orig().SalesQty;
        real modificationFactor = 1;
        
        if (qty && qty != this.SalesQty)
        {
            modificationFactor = (qty != 0 ? this.SalesQty / qty : 0);
        }

        this.RORDeliveryGrossAmount = this.RORDeliveryGrossAmount * modificationFactor;
        this.RORRecalculateDeliveryAmount();

        this.RORReturnGrossAmount = this.RORReturnGrossAmount * modificationFactor;
        this.RORRecalculateDeliveryAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSetTaxGroup</Name>
				<Source><![CDATA[
    public void FINSetTaxGroup()
    {
        if (!this.FINIgnoreTaxMatrix
        &&   TaxParameters::find().FINCheckTaxMatrix != FINCheckTaxMatrix::Disabled)
        {
            this.TaxGroup = FINTaxMatrix::findTaxGroup(this, this.TaxGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORValidateField</Name>
				<Source><![CDATA[
    private boolean RORValidateField(FieldId _fieldIdToValidate)
    {
        boolean                 ret = true;
        SalesQuotationTable     salesQuotationTable;
    
        switch (_fieldIdToValidate)
        {
            case fieldNum(SalesQuotationLine, RORProjTransType) :
                if (this.RORProjTransType == RORProjTransType::None
                &&  this.ProjTransType == QuotationProjTransType::Item)
                {
                    ret = checkFailed(strFmt("Rental transaction type cannot be empty if transaction type is %1.", QuotationProjTransType::Item));
                }
                if (this.RORProjTransType == RORProjTransType::Rental
                &&  this.ProjTransType == QuotationProjTransType::Item)
                {
                    salesQuotationTable = this.salesQuotationTable();
    
                    if (salesQuotationTable.ProjInvoiceProjId && ProjFundingSource::numberOfFundingSources(salesQuotationTable.ProjInvoiceProjId) != 1)
                    {
                        ret = checkFailed("Rental line may not be created for a project associated to a contract with multiple funding sources");
                    }
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayLineTypeImage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display container RORDisplayLineTypeImage()
    {
        container imageContainer;
                              
        imageContainer = this.RORRentalLine::displayLineTypeImage();
                      
        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserted</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(SalesQuotationLine), DataEventType::Inserted)]
    public static void DNREvent_OnInserted(Common _sender, DataEventArgs _eventArgs)
    {
        SalesQuotationLine hostObject = _sender as SalesQuotationLine;

        if (hostObject.RORTradeType != RORTradeType::SalesPurch)
        {
            DFMValueTrans::initBusObjAttrs(hostObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(SalesQuotationLine), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        SalesQuotationLine   salesQuotationLine = _sender as SalesQuotationLine;
        salesQuotationLine.FINSetTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdating</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(SalesQuotationLine), DataEventType::Updating)]
    public static void DNREvent_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        SalesQuotationLine   salesQuotationLine = _sender as SalesQuotationLine;
        salesQuotationLine.FINSetTaxGroup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>