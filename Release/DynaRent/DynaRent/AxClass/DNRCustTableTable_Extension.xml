<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCustTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(CustTable))]
public final class DNRCustTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(DirPartyType _partyType, Name _name, boolean _updateCRM)
    {
        ttsbegin;

        next insert(_partyType, _name, _updateCRM);
        this.IRMCreateOrUpdateProspect();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        next initValue();

        this.FINInitFromCustParameters();
        this.INVInitFromCustParameters();
        this.RORInitFromCustParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quickCreateSaveAndOpenLinks</Name>
				<Source><![CDATA[
    public static container quickCreateSaveAndOpenLinks()
    {
        container localSaveAndOpenLinks = next quickCreateSaveAndOpenLinks();

        localSaveAndOpenLinks += [menuitemActionStr(RORSalesCreateQuotation), MenuItemType::Action];
        localSaveAndOpenLinks += [menuitemActionStr(RORSalesCreateOrderFromCustomer), MenuItemType::Action];
        localSaveAndOpenLinks += [menuitemActionStr(WPPWorkOrderCreateFromCustomer), MenuItemType::Action];

        return localSaveAndOpenLinks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmAndSaveCustGroupChange</Name>
				<Source><![CDATA[
    public static boolean confirmAndSaveCustGroupChange(CustTable _custTable, boolean _isCustGroupSetOnce)
    {
        boolean ret;
        
        //Dont execute the chain if Dimension framework is used for deriving Dimension on Customers
        if(FINDimAttributeSetup::existTableId(tableNum(CustTable)))
        {
            ret = true;
        }
        else
        {
            ret = next confirmAndSaveCustGroupChange(_custTable, _isCustGroupSetOnce);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustGroup</Name>
				<Source><![CDATA[
    void initFromCustGroup(CustGroup _custGroup)
    {
        LedgerDefaultDimensionValueSet localDefaultDimensionOrig = this.DefaultDimension;
        
        next initFromCustGroup(_custGroup);
        
        if (FINDimAttributeSetup::existTableId(tableNum(CustTable)))
        {
            this.DefaultDimension = localDefaultDimensionOrig;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromCustParameters</Name>
				<Source><![CDATA[
    // extension methods

    private void FINInitFromCustParameters(CustParameters _parameters = CustParameters::find())
    {
        this.FINCreditCheckStatus = _parameters.FINCreditCheckStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINMayUseCreditCheckStatus</Name>
				<Source><![CDATA[
    public boolean FINMayUseCreditCheckStatus()
    {
        FINCustCreditCheckType creditCheckType = CustParameters::find().FINCustCreditCheckType;
    
        return (creditCheckType == FINCustCreditCheckType::CreditStatus ||
               (creditCheckType == FINCustCreditCheckType::Balance));
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVInitFromCustParameters</Name>
				<Source><![CDATA[
    private void INVInitFromCustParameters(CustParameters _parameters = CustParameters::find())
    {
        this.INVInvoiceProfileId = _parameters.INVInvoiceProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromCustParameters</Name>
				<Source><![CDATA[
    private void RORInitFromCustParameters(CustParameters _parameters = CustParameters::find())
    {
        this.DNRRentalCalendarId = _parameters.DNRRentalCalendarId;
        this.RORPriceTimeUnit    = _parameters.RORPriceTimeUnit;
        this.DlvMode             = _parameters.RORCustDlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromSmmBusRelTable</Name>
				<Source><![CDATA[
    public void RORInitFromSmmBusRelTable(smmBusRelTable _smmBusRelTable)
    {
        this.INVInvoiceProfileId    = _smmBusRelTable.INVInvoiceProfileId;
        this.DNRRentalCalendarId    = _smmBusRelTable.DNRRentalCalendarId;
        this.RORPriceTimeUnit       = _smmBusRelTable.RORPriceTimeUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRIsCustRequisitionMandatory</Name>
				<Source><![CDATA[
    public static boolean DNRIsCustRequisitionMandatory(CustAccount _custAccount, CustPurchaseOrder _purchOrderFormNum, int _custReqIdx)
    {
        boolean     ret;
        CustTable   custTable = CustTable::find(_custAccount);
        ;
    
        if (_purchOrderFormNum || !custTable.DNRCustRequisition)
        {
            ret = false;
        }
        else
        {
            switch (custTable.DNRCustRequisition[_custReqIdx])
            {
                case DNRCustRequisitionLevel::Preferred :
                    ret = false;
                    break;
    
                case DNRCustRequisitionLevel::Required :
                    ret = true;
                    break;
    
                default:
                    ret = false;
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IRMCreateOrUpdateProspect</Name>
				<Source><![CDATA[
    private void IRMCreateOrUpdateProspect()
    {
        if (smmBusRelTable::IRMExistByParty(this.Party))
        {
            smmBusRelTable::IRMUpdateProspect(this);
        }
        else
        {
            smmBusRelTable::IRMCreateProspect(this);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>