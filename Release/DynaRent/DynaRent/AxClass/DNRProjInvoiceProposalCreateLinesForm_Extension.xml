<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjInvoiceProposalCreateLinesForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(ProjInvoiceProposalCreateLines))]
public final class DNRProjInvoiceProposalCreateLinesForm_Extension
{
    private WPPWorkOrderId workOrderId;

    private INVCalculationDateTime  calculationDateTime;
    private INVIncludeUninvoiced    includeUninvoiced;
    private INVIncludeCredits       includeCredits;
    private BSAInvoiceGroupId       invoiceGroupId;

    // chain-of-command wrapper methods    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedClass = next pack();

        packedClass = conIns(packedClass, 1, identifierStr(OverriddeFlag));
        packedClass = conIns(packedClass, 2, calculationDateTime);
        packedClass = conIns(packedClass, 3, includeUninvoiced);
        packedClass = conIns(packedClass, 4, includeCredits);
        packedClass = conIns(packedClass, 5, invoiceGroupId);

        return packedClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int overrideStartIndex = conFind(_packedClass, identifierStr(OverriddeFlag));

        if (overrideStartIndex > 0)  // override identifier
        {
            this.calculationDateTime    = conPeek(_packedClass, overrideStartIndex + 1);
            this.includeUninvoiced      = conPeek(_packedClass, overrideStartIndex + 2);
            this.includeCredits         = conPeek(_packedClass, overrideStartIndex + 3);
            this.invoiceGroupId         = conPeek(_packedClass, overrideStartIndex + 4);

            _packedClass                = conDel(_packedClass, overrideStartIndex, 5);
        }

        boolean ret = next unpack(_packedClass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();
    
        includeUninvoicedCheckBox   .value(includeUninvoiced);
        includeCreditsCheckBox      .value(includeCredits);
        BSAInvoiceGroupId           .text(invoiceGroupId);

        INVFilters                  .enabled(isQuerySalesLine);
        calculationDateTimeControl  .dateTimeValue(DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 0));
        
        if (this.args().dataset())
        {
            switch (this.args().dataset())
            {
                case tableNum(WPPWorkOrderTable) :
                    WPPWorkOrderTable workOrderTable = this.args().record() as WPPWorkOrderTable;

                    workOrderId = workOrderTable.WorkOrderId;

                    if (workOrderTable.CompanyId == curExt())
                    {
                        this.initFromProjInvoiceTable(ProjInvoiceTable::find(workOrderTable.ProjInvoiceProjId));
                    }
                    else
                    {
                        this.initFromProjInvoiceTable(this.getLocalProjContract(workOrderTable.WorkOrderId));
                    }

                    break;
    
                case tableNum(WPPWorkOrderView) :
                    WPPWorkOrderView workOrderView = this.args().record() as WPPWorkOrderView;

                    workOrderId = workOrderView.WorkOrderId;

                    if (workOrderView.CompanyId == curExt())
                    {
                        this.initFromProjInvoiceTable(ProjInvoiceTable::find(workOrderView.ProjInvoiceProjId));
                    }
                    else
                    {
                        this.initFromProjInvoiceTable(this.getLocalProjContract(workOrderView.WorkOrderId));
                    }
                    break;
    
                case tableNum(WPPWorkOrderLineListPageView) :
                    WPPWorkOrderLineListPageView workOrderLineListPageView = this.args().record() as WPPWorkOrderLineListPageView;

                    if (workOrderLineListPageView.CompanyId == curExt())
                    {
                        this.initFromProjInvoiceTable(ProjInvoiceTable::find(workOrderLineListPageView.ProjInvoiceProjId));
                    }
                    else
                    {
                        this.initFromProjInvoiceTable(this.getLocalProjContract(workOrderLineListPageView.WorkOrderId));
                    }
                    break;
    
                case tableNum(SalesTable) :
                    SalesTable salesTable = this.args().record() as SalesTable;
                    this.initFromProjTable(ProjTable::find(salesTable.ProjId));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceProposalCreateLinesParams</Name>
				<Source><![CDATA[
    protected void initProjInvoiceProposalCreateLinesParams()
    {
        next initProjInvoiceProposalCreateLinesParams();

        ProjInvoiceProposalCreateLinesParams proposalCreateLinesParams = this.parmProposalParams();
        calculationDateTime = calculationDateTimeControl.dateTimeValue();
        includeUninvoiced = includeUninvoicedCheckBox.value();
        includeCredits = includeCreditsCheckBox.value();
        invoiceGroupId = BSAInvoiceGroupId.text();

        proposalCreateLinesParams.INVparmCalculationDateTime(calculationDateTime);
        proposalCreateLinesParams.INVparmIncludeUninvoiced(includeUninvoiced);
        proposalCreateLinesParams.INVparmIncludeCredits(includeCredits);
        proposalCreateLinesParams.BSAparmInvoiceGroupId(invoiceGroupId);
        proposalCreateLinesParams.BSAparmWorkOrderId(workOrderId);
        
        // *** Repeated code
        proposalCreateLines = ProjInvoiceProposalCreateLines::newStandard(proposalCreateLinesParams.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalProjContract</Name>
				<Source><![CDATA[
    // extension methods

    public ProjInvoiceTable getLocalProjContract(WPPWorkOrderId _workOrderId)
    {
        ProjInvoiceTable    projInvoiceTable;
        ProjTable           projTable;
        WPPWorkOrderLine    workOrderLine;

        select firstonly projInvoiceTable
            exists join projTable
            where projTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId
                join TableId from workOrderLine
                where workOrderLine.WorkOrderId == _workOrderId
                &&    workOrderLine.ProjId == projTable.ProjId;

        return projInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmIsQuerySalesLine</Name>
				<Source><![CDATA[
    public boolean DNRparmIsQuerySalesLine(boolean _isQuerySalesLine = isQuerySalesLine)
    {
        isQuerySalesLine = _isQuerySalesLine;
        return isQuerySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_BSAInvoiceGroupIdCTRL_OnLookup</Name>
				<Source><![CDATA[
    // event handler methods

    [FormControlEventHandler(formControlStr(ProjInvoiceProposalCreateLines, BSAInvoiceGroupId), FormControlEventType::Lookup)]
    public static void DNREvent_BSAInvoiceGroupIdCTRL_OnLookup(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormControlCancelableSuperEventArgs     args                = _eventArgs as FormControlCancelableSuperEventArgs;
        FormStringControl                       BSAInvoiceGroupId   = _sender as FormStringControl;

        BSAInvoiceGroup::lookupInvoiceGroupId(BSAInvoiceGroupId);

        // Cancel the call to 'super()' to prevent the error 'More than one form was opened at once for the lookup control'
        // from being thrown.
        args.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_calculationDateTimeControl_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(ProjInvoiceProposalCreateLines, calculationDateTimeControl), FormControlEventType::Modified)]
    public static void DNREvent_calculationDateTimeControl_OnModified(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormDateTimeControl calculationDateTimeControl = _sender as FormDateTimeControl;        
        FormDateControl selectEndDateControl = _sender.formRun().design().controlName(formControlStr(ProjInvoiceProposalCreateLines, SelectEndDate));

        if (selectEndDateControl && calculationDateTimeControl && calculationDateTimeControl.dateTimeValue() != DateTimeUtil::minValue())
        {
            selectEndDateControl.dateValue(DateTimeUtil::date(calculationDateTimeControl.dateTimeValue()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>