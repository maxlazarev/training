<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderOverviewExpensesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(querystr(WPPWorkOrderOverviewExpenses)),
    SRSReportParameterAttribute(classstr(WPPWorkOrderReportsContract))
]
public class WPPWorkOrderOverviewExpensesDP extends SRSReportDataProviderBase
{
    WPPWorkOrderTable       workOrderTable;
    WPPWorkOrderOverviewTmp workOrderOverviewTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkOrderExpenses</Name>
				<Source><![CDATA[
    private void getWorkOrderExpenses()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource qbds;
    
        WPPWorkOrderLine            workOrderLine;
        LedgerJournalTable          journalTable;
        LedgerJournalTrans          journalTrans;
        LedgerJournalTrans_Project  journalTransProject;
    
        query = this.parmQuery();
        qbds = query.dataSourceTable(tableNum(WPPWorkOrderLine));
        qbds.addDynalink(fieldNum(WPPWorkOrderLine, WorkOrderId), workOrderTable, fieldNum(WPPWorkOrderTable, WorkOrderId));
        qbds.addRange(fieldNum(WPPWorkOrderLine, ProjId)).value(SysQuery::valueNotEmptyString());
    
        queryRun = new QueryRun(query);
    
        while (queryRun.next())
        {
            workOrderLine       = queryRun.get(tablenum(WPPWorkOrderLine));
            journalTable        = queryRun.get(tableNum(LedgerJournalTable));
            journalTrans        = queryRun.get(tableNum(LedgerJournalTrans));
            journalTransProject = queryRun.get(tableNum(LedgerJournalTrans_Project));
    
            workOrderOverviewTmp.WorkOrderId        = workOrderLine.WorkOrderId;
            workOrderOverviewTmp.WorkOrderLine      = workOrderLine.LineNumber;
            workOrderOverviewTmp.TaskId             = workOrderLine.TaskId;
            workOrderOverviewTmp.Description        = HcmWorker::find(journalTransProject.Resource).name();
            workOrderOverviewTmp.TransDate          = journalTrans.TransDate;
            workOrderOverviewTmp.CategoryId         = journalTransProject.CategoryId;
            workOrderOverviewTmp.Qty                = journalTransProject.Qty;
            workOrderOverviewTmp.CostPrice          = journalTransProject.CostPrice;
            workOrderOverviewTmp.CostAmount         = journalTransProject.CostPrice * journalTransProject.Qty;
            workOrderOverviewTmp.SalesPrice         = journalTransProject.SalesPrice;
            workOrderOverviewTmp.SalesAmount        = journalTransProject.SalesPrice * journalTransProject.Qty;
            workOrderOverviewTmp.LinePropertyId     = journalTransProject.LinePropertyId;
            workOrderOverviewTmp.Posted             = journalTable.Posted;
            workOrderOverviewTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkOrderExpensesTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute(tablestr(WPPWorkOrderOverviewTmp))
    ]
    public WPPWorkOrderOverviewTmp getWorkOrderExpensesTmp()
    {
        select workOrderOverviewTmp;
        return workOrderOverviewTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        WPPWorkOrderReportsContract contract;
    
        contract = this.parmDataContract() as WPPWorkOrderReportsContract;
        workOrderTable = WPPWorkOrderTable::find(contract.parmWorkOrderId());
        info(workOrderTable.WorkOrderId);
    
        this.getWorkOrderExpenses();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>