<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAssetBookTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(AssetBook))]
public final class DNRAssetBookTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromAssetGroupBookSetup</Name>
				<Source><![CDATA[
    public void initFromAssetGroupBookSetup(AssetGroupId _assetGroup)
    {
        next initFromAssetGroupBookSetup(_assetGroup);

        this.FINInitFromAssetGroupBookSetup(AssetGroupBookSetup::find(_assetGroup, this.BookId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.FINCalcScrap = NoYes::Yes;

        next initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.AssetGroup = this.assetGroup().GroupId;
        this.FINCalcScrapValue();

        next update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBCalcMonthDifference</Name>
				<Source><![CDATA[
    // extension methods

    public AssetLifeTimeRest BOBCalcMonthDifference(BOBManufacturingDate _manufacturingDate, AssetDepreciationStartDate _depreciationDate)
    {
        AssetLifeTimeRest ret;
        Yr                buildYear  = year(_manufacturingDate);
        Days              buildDay   = DayOfMth(_manufacturingDate);
        Months            buildMonth = MthOfYr(_manufacturingDate);
    
        Yr                deprYear   = year(_depreciationDate);
        Days              deprDay    = DayOfMth(_depreciationDate);
        Months            deprMonth  = MthOfYr(_depreciationDate);
    
        Days              daysInBuildMonth,
                          daysInDeprMonth,
                          daysInMonth,
                          stdDaysInMonth,
                          stdDaysInMonthBuild,
                          stdDaysInMonthDepr;
    
        Months            tmpMonths;
        Yr                tmpYears;
        date              startMonthDate,
                          endMonthDate,
                          startBuildDate,
                          endBuildDate,
                          startDeprDate,
                          endDeprDate;
    
        real              buildDays,
                          deprDays;
        ;
    
        if (_manufacturingDate && _depreciationDate)
        {
            if (buildYear == deprYear)
            {
                if (buildDay == deprDay && buildMonth == deprMonth)
                {
                    ret = 0;
                }
                else if (buildMonth == deprMonth)
                {
                    daysInMonth         = (deprDay + 1) - buildDay;
                    startMonthDate      = mkdate(1, buildMonth, buildYear);
                    endMonthDate        = endMth(_manufacturingDate);
                    stdDaysInMonth      = (endMonthDate - startMonthDate) + 1;
                    ret                 = daysInMonth / stdDaysInMonth;
                }
                else
                {
                    tmpMonths           = deprMonth - buildMonth;
    
                    startBuildDate      = mkDate(1, buildMonth, buildYear);
                    endBuildDate        = endMth(_manufacturingDate);
                    daysInBuildMonth    = (dayOfMth(endBuildDate) - buildDay) +1;
    
                    startDeprDate       = mkDate(1, deprMonth, deprYear);
                    endDeprDate         = endMth(_depreciationDate);
                    daysInDeprMonth     = (dayOfMth(startDeprDate) + deprDay) -1;
    
                    stdDaysInMonthBuild = (endBuildDate - startBuildDate) + 1;
                    stdDaysInMonthDepr  = (endDeprDate  - startDeprDate)  + 1;
    
                    buildDays           = daysInBuildMonth / stdDaysInMonthBuild;
                    deprDays            = daysInDeprMonth  / stdDaysInMonthDepr;
    
                    if (tmpMonths > 1)
                    {
                        ret = (buildDays + deprDays + (tmpMonths-1)) - 0.05;
                    }
                    else
                    {
                        ret = (buildDays + deprDays) - 0.05;
                    }
                }
            }
            else //buildYear != deprYear
            {
                tmpYears = deprYear - buildYear;
    
                if (buildDay == deprDay && buildMonth == deprMonth)
                {
                    ret = tmpYears * 12;
                }
                else
                {
                    if (deprMonth <= buildMonth) //Will not be a whole year
                    {
                        tmpYears -= 1;
                    }
    
                    tmpMonths = (12 - buildMonth) + (deprMonth -1);
    
                    if (tmpMonths >= 12)
                    {
                        tmpMonths -= 12;
                    }
    
                    startBuildDate      = mkDate(1, buildMonth, buildYear);
                    endBuildDate        = endMth(_manufacturingDate);
                    daysInBuildMonth    = (dayOfMth(endBuildDate) - buildDay) + 1;
    
                    startDeprDate       = mkDate(1, deprMonth, deprYear);
                    endDeprDate         = endMth(_depreciationDate);
                    daysInDeprMonth     = (dayOfMth(startDeprDate) + deprDay) - 1;
    
                    stdDaysInMonthBuild = (endBuildDate - startBuildDate) + 1;
                    stdDaysInMonthDepr  = (endDeprDate  - startDeprDate)  + 1;
    
                    buildDays           = daysInBuildMonth / stdDaysInMonthBuild;
                    deprDays            = daysinDeprMonth  / stdDaysInMonthDepr;
    
                    ret = (buildDays + deprDays + (tmpYears * 12) + tmpMonths) - 0.05;
                }
    
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCalcScrapValue</Name>
				<Source><![CDATA[
    private void FINCalcScrapValue()
    {
        AssetGroupBookSetup assetSetup;

        assetSetup = AssetGroupBookSetup::find(this.AssetGroup, this.BookId);

        if(this.AcquisitionPrice && assetSetup.FINScrapValuePct && this.FINCalcScrap)
        {
            this.ScrapValue = (AssetSumCalc_Trans::newAssetYear(this.AssetId, this.BookId).FINBaseForDepreciation() * assetSetup.FINScrapValuePct) / 100;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINInitFromAssetGroupBookSetup</Name>
				<Source><![CDATA[
    private void FINInitFromAssetGroupBookSetup(AssetGroupBookSetup _assetGroupBookSetup)
    {
        this.FINAssetsInterestPct = _assetGroupBookSetup.FINAssetsInterestPct;
        this.FINAssetsMinAmount   = _assetGroupBookSetup.FINAssetsMinAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>