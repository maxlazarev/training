<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesRORSubStatusJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::RORSubStatus)]
class SalesRORSubStatusJournalPost
extends FormLetterJournalPost
{
    SalesParmTable          salesParmTable;
    SalesParmLine           salesParmLine;
    CustRORSubStatusJour    subStatusJour;
    CustRORSubStatusTrans   subStatusTrans;
    SalesLine               salesLine;
    SalesTable              salesTable;

    SalesTotals             salesTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _custConfirmTrans)
    {
        // Do nothing - not valid for sub-status updates
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforePostingLine</Name>
				<Source><![CDATA[
    protected void checkBeforePostingLine()
    {
        SalesParmLine           salesParmLineLocal;
        BOBRentalInventOnHand   onHand;
        ;
    
        super();
    
        if(chainFormLetterContract.RORparmRentalSubStatusLowerOrEqual(BOBRentalSubStatus::Delivered))        {
            salesParmLineLocal = salesParmLine::findInventTransId(salesParmTable.ParmId, salesLine.InventTransId);
            onHand = new BOBRentalInventOnHand();
    
            if(!onHand.validateStatusUpdate(salesLine, salesParmLineLocal.InventNow, chainFormletterContract.RORparmRentalSubStatus()))
            {
                throw error(strFmt("@DNR7097", salesParmLineLocal.DeliverNow, salesLine.ItemId));
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::RORSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return subStatusJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
    
        salesTable = salesParmTable.salesTable();
    
        if (this.parmTotals())
        {
            salesTotals = this.parmTotals() as SalesTotals;
        }
        else
        {
            salesTotals = SalesTotals::construct(salesParmTable, this.parmSpecQty(), this.parmSumBy(), subStatusJour.ParmId, this.parmSumOrderId(), this.documentStatus());
        }
    
        this.tax(salesTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        super();
    
        salesLine = subStatusTrans.salesLine(true);
        salesParmLine.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReportDimHistoryLogType</Name>
				<Source><![CDATA[
    protected InventReportDimHistoryLogType inventReportDimHistoryLogType()
    {
        return InventReportDimHistoryLogType::SalesConfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = subStatusTrans)
    {
        subStatusTrans = _journalLine as CustRORSubStatusTrans;
        return subStatusTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected tableId journalLineTableId()
    {
        return tableNum(CustRORSubStatusTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = subStatusJour)
    {
        subStatusJour = _journalTable as CustRORSubStatusJour;
        return subStatusJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    protected void postInventory()
    {
        InventMovement          inventMovement;
        InventUpd_RORSubStatus  inventUpdate;
        SalesParmLine           salesParmLineLocal;
        ;
    
        salesParmLineLocal = SalesParmLine::findInventTransId(salesParmTable.ParmId, salesLine.InventTransId);
    
        inventMovement = InventMovement::construct(salesLine, InventMovSubType::BOBCompensatingTrans);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, salesParmLineLocal, subStatusJour.BOBRentalSubStatus, -inventMovement.transSign());
        inventUpdate.BOBParmIsCompensatingTrans(true);
        inventUpdate.updateNow(ledgerVoucher);
    
        inventMovement = InventMovement::construct(salesLine);
    
        inventUpdate = InventUpd_RORSubStatus::construct(inventMovement, salesParmLineLocal, subStatusJour.BOBRentalSubStatus, -inventMovement.transSign());
        inventUpdate.BOBParmFormLetterUpdDateTime(salesParmTable.Transdate, salesParmTable.BOBTransTime);
        inventUpdate.updateNow(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void postMarkupOnJour(SalesTable _salesTableMarkup)
    {
        markup.postJournal(1,
                           salesTotals.totalOrderBalance(_salesTableMarkup.RecId),
                           _salesTableMarkup,
                           _salesTableMarkup.DefaultDimension,
                           subStatusJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void postMarkupOnTrans()
    {
        markup.postJournal(subStatusTrans.Qty,
                           subStatusTrans.LineAmount,
                           salesLine,
                           salesLine.DefaultDimension,
                           subStatusTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void postMarkupTable()
    {
        QueryRun        queryRun;
        SalesTable      salesTableMarkup;
    
        queryRun = new QueryRun(salesParmTable.querySalesTable());
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(SalesTable)))
            {
                salesTableMarkup = queryRun.get(tableNum(SalesTable));
                this.postMarkupOnJour(salesTableMarkup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
    protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    protected Common sourceLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeCalcTax</Name>
				<Source><![CDATA[
    protected Object tradeCalcTax()
    {
        return SalesCalcTax::construct(subStatusJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt  transactionLogTxt()
    {
        return "@SYS9032";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::RORRentalSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return subStatusJour.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    protected void updateJournalLine()
    {
        if (subStatusJour.SalesId != subStatusTrans.OrigSalesId)
        {
            this.updateSumSalesId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    protected void updateSourceLine()
    {
        SalesLineType salesLineType;
        ;
    
        super();
    
        salesLineType = SalesLineType::construct(salesLine);
        salesLineType.updateSalesLine();
        salesLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    protected void updateSourceTable()
    {
        SetEnumerator   se = ordersPosted.getEnumerator();
    
        ttsBegin;
        while (se.moveNext())
        {
            salesTable = SalesTable::find(se.current(), true);
            if (salesTable)
            {
                salesTable.updateDocumentStatus(this.documentStatus());
                salesTable.updateBackStatus();
                salesTable.updateSalesType();
                salesTable.updateDeadline(subStatusJour.Deadline);
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumSalesId</Name>
				<Source><![CDATA[
    protected void  updateSumSalesId()
    {
        SalesTable  localSalesTable;
    
        if (SalesTable::exist(salesParmLine.OrigSalesId))
        {
            ttsbegin;
            localSalesTable = salesParmLine.salesTable(true);
    
            localSalesTable.updateBackStatus();
            localSalesTable.write();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPMustDuplicateTask</Name>
				<Source><![CDATA[
    public void WPPMustDuplicateTask()
    {
        if (!this.WPPParmMustDuplicateWorkOrderLine()
        &&   salesParmTable.WPPDuplTaskOnPartialFormLetterPosting
        &&   chainFormletterContract.WPPParmMustDuplicateTask())
        {
            this.WPPParmMustDuplicateWorkOrderLine(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesRORSubStatusJournalPost construct()
    {
        return new SalesRORSubStatusJournalPost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>