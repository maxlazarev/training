<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRetailAddItemsForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(RetailAddItems))]
public final class DNRRetailAddItemsForm_Extension
{
    public Map DNRDynamicFieldValueFilterMap = new Map(Types::String, Types::AnyType);
    
    /********************* COC Wrappers *****************************/

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();
        
        if (DNRDynamicFieldsFilterManager::IsCalledFromRental(this.args()))
        {
            this.DNRPostInit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCallerTableRecords</Name>
				<Source><![CDATA[
    public void createCallerTableRecords(TableId _callerTableId, TmpRetailProductsToAdd _tmpInventTable)
    {
        next createCallerTableRecords(_callerTableId, _tmpInventTable);

        if (_callerTableId == tableNum(SalesQuotationTable))
        {
            this.createOrderLine(FormDataUtil::getFormDataSource(this.args().record()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_InventTableDS_OnQueryExecuting</Name>
				<Source><![CDATA[
    /**************************** Event Handlers*******************************************/

    [FormDataSourceEventHandler(formDataSourceStr(RetailAddItems, InventTable), FormDataSourceEventType::QueryExecuting)]
    public static void DNREvent_InventTableDS_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.RORApplyTradeTypeRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RORTradeTypeCTRL_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(RetailAddItems, DNRBOBRentalTypeId), FormControlEventType::Modified),
     FormControlEventHandler(formControlStr(RetailAddItems, RORTradeType), FormControlEventType::SelectionChanged)]
    public static void DNREvent_RORTradeTypeCTRL_OnSelectionChanged(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.formRun();

        hostForm.DNRRefreshForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_EcoResProductDS_OnQueryExecuting</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(RetailAddItems, EcoResProduct), FormDataSourceEventType::QueryExecuting)]
    public static void DNREvent_EcoResProductDS_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun             formRunLoc       = _sender.formRun() as FormRun;
        FormComboBoxControl tradeTypeIdCtrl  = formRunLoc.design().controlName(formControlStr(RetailAddItems, RORTradeType)) as FormComboBoxControl;
        FormStringControl   rentalTypeIdCtrl = formRunLoc.design().controlName(formControlStr(RetailAddItems, DNRBOBRentalTypeId)) as FormStringControl;

        if (tradeTypeIdCtrl.selection() == RORSalesRentalNone::Rental && rentalTypeIdCtrl.valueStr())
        {
            _sender.filter(fieldNum(EcoResProduct, BOBRentalTypeId), rentalTypeIdCtrl.valueStr());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ApplyFilterCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(RetailAddItems, ApplyFilter), FormControlEventType::Clicked)]
    public static void DNREvent_ApplyFilterCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun hostForm = _sender.formRun();

        hostForm.DNRApplyDynamicFieldFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNRRemoveFilterCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(RetailAddItems, DNRRemoveFilter), FormControlEventType::Clicked)]
    public static void DNREvent_DNRRemoveFilterCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun formRunLoc = _sender.formRun() as FormRun;
        FormDataSource tmpIdValueDS = formRunLoc.dataSource(formDataSourceStr(RetailAddItems, DNRTmpIdValue));
        tmpIdValueDS.queryBuildDataSource().joinMode(JoinMode::OuterJoin);

        formRunLoc.DNRRefreshForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_DNRTmpIdValueDS_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(RetailAddItems, DNRTmpIdValue), FormDataSourceEventType::Initialized)]
    public static void DNREvent_DNRTmpIdValueDS_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.query().dataSourceTable(tableNum(DNRTmpIdValue)).addLink(fieldNum(EcoResProduct, BOBRentalTypeId),fieldNum(DNRTmpIdValue, strValue));

        FormRun formRunLoc = _sender.formRun() as FormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORApplyTradeTypeRange</Name>
				<Source><![CDATA[
    /******************************* Extension Methods ************************/
    private void RORApplyTradeTypeRange()
    {
        switch(RORTradeType.selection())
        {
            case RORSalesRentalNone::Rental :
                InventTable_q.dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, RORItemTradeType)).value(SysQuery::valueNot(RORItemTradeType::SalesPurch));
                break;
            
            case RORSalesRentalNone::Sales :
                InventTable_q.dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, RORItemTradeType)).value(SysQuery::valueNot(RORItemTradeType::RentalSubRental));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPopulateDynamicFieldValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates values for Dynamic field
    /// </summary>
    /// <param name = "_fieldName">Field name</param>
    /// <param name = "_value">Value</param>
    public void DNRPopulateDynamicFieldValueMap(Description _fieldName, DFMValue _value)
    {
        if (_value)
        {
            DNRDynamicFieldValueFilterMap.insert(_fieldName, _value);
        }
        else
        {
            DNRDynamicFieldValueFilterMap.remove(_fieldName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRRefreshForm</Name>
				<Source><![CDATA[
    protected void DNRRefreshForm()
    {
        InventTable_DS.executeQuery();
        EcoResProduct_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRPostInit</Name>
				<Source><![CDATA[
    protected void DNRPostInit()
    {
        RORTradeType.selection(RORSalesRentalNone::Sales);
        
        DNRDynamicFieldsFilterManager::construct(tableNum(BOBRentalType), DNRDynamicFieldFilterGroup).buildDynamicControls();
        
        RORTradeType.visible(true);
        DNRBOBRentalTypeId.visible(true);
        DNRDynamicFieldGroup.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRApplyDynamicFieldFilter</Name>
				<Source><![CDATA[
    protected void DNRApplyDynamicFieldFilter()
    {
        MapEnumerator           dynamicFieldIdValueFilterMapEnum;
        DFMValueTrans           valueTrans;
        QueryBuildDataSource    qbdsRentalTypeId;
        DNRTmpIdValue           tmpIdValueTable;
        BOBRentalType           rentalTypeSelect;
        
        //If field value map is empty then do not apply the filter
        if (!DNRDynamicFieldValueFilterMap || DNRDynamicFieldValueFilterMap.empty())
        {
            DNRTmpIdValue_DS.queryBuildDataSource().joinMode(JoinMode::OuterJoin);

            this.DNRRefreshForm();

            return;
        }

        dynamicFieldIdValueFilterMapEnum = DNRDynamicFieldValueFilterMap.getEnumerator();

        tmpIdValueTable = DNRTmpIdValue_DS.cursor();

        delete_from tmpIdValueTable;
        
        insert_recordset tmpIdValueTable(StrValue)
        select RentalTypeId from rentalTypeSelect;

        while (dynamicFieldIdValueFilterMapEnum.moveNext())
        {
            delete_from tmpIdValueTable
                exists join rentalTypeSelect
                where rentalTypeSelect.RentalTypeId == tmpIdValueTable.StrValue
                    notExists join valueTrans
                    where valueTrans.RefTableId     == tableNum(BOBRentalType)
                    &&    valueTrans.FieldId        == dynamicFieldIdValueFilterMapEnum.currentKey()
                    &&    valueTrans.Value          == dynamicFieldIdValueFilterMapEnum.currentValue()
                    &&    rentalTypeSelect.RecId    == valueTrans.RefRecId;
        }

        DNRTmpIdValue_DS.executeQuery();

        qbdsRentalTypeId = DNRTmpIdValue_DS.query().dataSourceTable(tableNum(DNRTmpIdValue));

        qbdsRentalTypeId.joinMode(JoinMode::InnerJoin);
        qbdsRentalTypeId.addLink(fieldNum(EcoResProduct, BOBRentalTypeId),fieldNum(DNRTmpIdValue, strValue));

        this.DNRRefreshForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>