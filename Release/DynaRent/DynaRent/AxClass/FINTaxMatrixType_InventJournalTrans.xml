<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINTaxMatrixType_InventJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FINTaxMatrixType_InventJournalTrans extends FINTaxMatrixType
{
    InventJournalTrans inventJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        //Init all the global variables for the search in the Tax Matrix here
        WPPWorkOrderTable       workOrderTable;
        WPPWorkOrderLine        workOrderLine;
        ProjTable               projTable;
        ProjInvoiceTable        projInvoiceTable;
        ProjFundingSource       projFundingSource;
        CustTable               custTable;
        AddressCountryRegionId  projTableInvoiceCountryRegionId;
    
        // Work order doesn't have to exist, so 2 select statements
        select firstonly workOrderTable
            exists join workOrderLine
            where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
            &&    workOrderLine.ProjId == inventJournalTrans.ProjId;
    
        select firstOnly Type from projTable
        where projTable.ProjId == inventJournalTrans.ProjId
            outer join TaxGroupId from projInvoiceTable
            where projInvoiceTable.ProjInvoiceProjId == projTable.ProjInvoiceProjId
                outer join projFundingSource
                where projFundingSource.ContractId == projInvoiceTable.ProjInvoiceProjId
                    outer join custTable
                    where custTable.AccountNum == projFundingSource.CustAccount;
    
        taxMatrixModule     = FINTaxMatrixModule::Project;
        taxItemGroup        = inventJournalTrans.ProjTaxItemGroupId;
        fiscalUnitNumber    = custTable.FINFiscalUnitId;
        taxGroup            = projInvoiceTable.TaxGroupId;
    
        if (projTable.Type == ProjType::Internal
        ||  projTable.Type == ProjType::Investment
        ||  projTable.Type == ProjType::Cost
        ||  projTable.Type == ProjType::Time)
        {
            invoiceCountry  = CompanyInfo::find().postalAddress().CountryRegionId;
        }
        else
        if (projFundingSource && custTable)
        {
            invoiceCountry  = custTable.postalAddress().CountryRegionId;
        }
        else
        {
            projTableInvoiceCountryRegionId = workOrderTable ? workOrderTable.deliveryAddress().CountryRegionId : projTable.postalAddress().CountryRegionId;
            invoiceCountry  = projTableInvoiceCountryRegionId;
        }
    
        startCountry        = InventLocation::find(InventDim::find(inventJournalTrans.InventDimId).InventLocationId).logisticsPostalAddress().CountryRegionId;
        endCountry          = workOrderTable ? workOrderTable.deliveryAddress().CountryRegionId : projTable.postalAddress().CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common)
    {
        inventJournalTrans = _common;
    
        // Only projects are allowed
        if (inventJournaltrans.JournalType != InventJournalType::project)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        this.init();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>