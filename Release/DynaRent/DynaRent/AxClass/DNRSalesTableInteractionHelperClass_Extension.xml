<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesTableInteractionHelperClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesTableInteractionHelper))]
public final class DNRSalesTableInteractionHelperClass_Extension
{
    private RORParameters                   parameters = RORParameters::find();

    private UnknownNoYes                    enablePreparationButton;
    private UnknownNoYes                    enableOutboundButton;
    private UnknownNoYes                    enableBuildButton;
    private UnknownNoYes                    enableEventStartButton;
    private UnknownNoYes                    enableEventEndButton;
    private UnknownNoYes                    enableStrikeButton;
    private UnknownNoYes                    enableInboundButton;
    private UnknownNoYes                    enableReturnNoteButton;
    private UnknownNoYes                    enableInspectionButton;
    private UnknownNoYes                    enableBulkReturnNoteButton;

    private UnknownNoYes                    existsPreparation;
    private UnknownNoYes                    existsOutbound;
    private UnknownNoYes                    existsBuild;
    private UnknownNoYes                    existsEventStart;
    private UnknownNoYes                    existsEventEnd;
    private UnknownNoYes                    existsStrike;
    private UnknownNoYes                    existsInbound;
    private UnknownNoYes                    existsReturnNote;
    private UnknownNoYes                    existsInspection;

    private UnknownNoYes                    enableRentalMenuButton;
    private UnknownNoYes                    enableAmendmentLostOrder;
    private UnknownNoYes                    enableAmendmentDateChangeHeader;
    private UnknownNoYes                    enableAmendmentDateChangeLine;
    private UnknownNoYes                    enableCreateReturnHeader;
    private UnknownNoYes                    enableCreateReturnLine;
    private UnknownNoYes                    enableAmendmentExchangeLine;
    private UnknownNoYes                    enableAmendmentRentalStopLine;
    private UnknownNoYes                    enableAmendmentCreditLine;
    private UnknownNoYes                    enableAmendmentResetValueLine;
    private UnknownNoYes                    enableRentalLineEditorForm;
    private UnknownNoYes                    enableAmendmentBlockPeriodLine;

    private UnknownNoYes                    relatedSubRentalOrderEnabled;

    private UnknownNoYes                    existsWorkOrderHeader;
    private UnknownNoYes                    existsWorkOrderLine;

    private UnknownNoYes                    existsPurchaseOrder;
    private UnknownNoYes                    existsSubRentalOrder;

    private UnknownNoYes                    existsShipmentHeader;

    private UnknownNoYes                    canInvoiceToProjBeUpdated;

    private SalesTableCanBeUpdatedContract  canBeUpdatedContract;

    //*** Repeated code
    #localmacro.GetCached
        if (%1 == UnknownNoYes::Unknown)
        {
            %1 = (
                %2
                ) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }
        return %1 == UnknownNoYes::Yes;
    #endmacro

    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RORGetEnableChangeDateHeader</Name>
				<Source><![CDATA[
    private boolean RORGetEnableChangeDateHeader()
    {
        SalesLine salesLineCheck;

        select firstonly RecId from salesLineCheck
        where (salesLineCheck.salesStatus != salesStatus::Invoiced || salesLineCheck.salesStatus != salesStatus::Canceled)
        &&    salesLineCheck.salesId == salesTable.salesId;
    
        return salesLineCheck.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetEnableCreateReturnHeader</Name>
				<Source><![CDATA[
    private boolean RORGetEnableCreateReturnHeader()
    {
        SalesLine salesLineCheck;

        select firstonly RecId from salesLineCheck
        where (salesLineCheck.salesStatus == salesStatus::Delivered || salesLineCheck.salesStatus == salesStatus::Invoiced)
        &&    salesLineCheck.salesId == salesTable.salesId;
    
        return salesLineCheck.RecId && salesTable.SalesStatus != SalesStatus::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitCanBeUpdated</Name>
				<Source><![CDATA[
    public void RORinitCanBeUpdated()
    {
        SalesTableCheckIfUpdateContract checkIfContract = SalesTableCheckIfUpdateContract::construct();
        checkIfContract.parmCheckConfirmation(true);
        checkIfContract.parmCheckPickingList(true);
        checkIfContract.parmCheckPickingListRegistration(true);
        checkIfContract.parmCheckPackingSlip(true);
        checkIfContract.parmCheckInvoice(true);
        checkIfContract.RORparmCheckPreparation(true);
        checkIfContract.RORparmCheckOutbound(true);
        checkIfContract.RORparmCheckBuild(true);
        checkIfContract.RORparmCheckEventStart(true);
        checkIfContract.RORparmCheckEventEnd(true);
        checkIfContract.RORparmCheckStrike(true);
        checkIfContract.RORparmCheckInbound(true);
        checkIfContract.RORparmCheckReturnNote(true);
        checkIfContract.RORparmCheckInspection(true);
    
        salesTable.DNRIgnoreCustCreditCheck = NoYes::Yes;
        container canBeUpdated = salesTable.checkIfUpdate(checkIfContract.pack());
        canBeUpdatedContract = SalesTableCanBeUpdatedContract::create(canBeUpdated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanConfirmationBeUpdated</Name>
				<Source><![CDATA[
    public boolean RORparmCanConfirmationBeUpdated()
    {
        #GetCached(canConfirmationBeUpdated, canBeUpdatedContract.parmCanConfirmationBeUpdated() && salesTableType.canConfirmationBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanInvoiceBeUpdated</Name>
				<Source><![CDATA[
    public boolean RORparmCanInvoiceBeUpdated()
    {
        #GetCached(canInvoiceBeUpdated, canBeUpdatedContract.parmCanInvoiceBeUpdated() && salesTableType.canInvoiceBeUpdated() && !salesTable.projId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanInvoiceToProjBeUpdated</Name>
				<Source><![CDATA[
    public boolean RORparmCanInvoiceToProjBeUpdated()
    {
        #GetCached(canInvoiceToProjBeUpdated, canBeUpdatedContract.parmCanInvoiceBeUpdated() &&
        salesTableType.canInvoiceBeUpdated() &&
        salesTable.FINRentalProjectInvoicing())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanPackingslipBeUpdated</Name>
				<Source><![CDATA[
    public boolean RORparmCanPackingslipBeUpdated()
    {
        #GetCached(canPackingslipBeUpdated, canBeUpdatedContract.parmCanPackingSlipBeUpdated() && salesTableType.canPackingslipBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanPickingListBeRegistrated</Name>
				<Source><![CDATA[
    public boolean RORparmCanPickingListBeRegistrated()
    {
        // OR between the checks, because either one must be true
        #GetCached(canPickingListBeRegistrated, canBeUpdatedContract.parmCanPickingListBeRegistrated() || salesTableType.canPickingListBeRegistrated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmCanPickingListBeUpdated</Name>
				<Source><![CDATA[
    public boolean RORparmCanPickingListBeUpdated()
    {
        #GetCached(canPickingListBeUpdated, canBeUpdatedContract.parmCanPickingListBeUpdated() && salesTableType.canPickingListBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentBlockPeriodLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentBlockPeriodLine()
    {
        #GetCached(enableAmendmentBlockPeriodLine, SalesLine.RORTradeType != RORTradeType::SalesPurch && (salesLine.SalesStatus != SalesStatus::Canceled))
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentCreditLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentCreditLine()
    {
        #GetCached(enableAmendmentCreditLine, SalesLine.RORTradeType != RORTradeType::SalesPurch)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentDateChangeHeader</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentDateChangeHeader()
    {
        #GetCached(enableAmendmentDateChangeHeader, this.RORGetEnableChangeDateHeader())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentDateChangeLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentDateChangeLine()
    {
        #GetCached(enableAmendmentDateChangeLine, SalesLine.RORTradeType != RORTradeType::SalesPurch && (salesLine.SalesStatus != SalesStatus::Invoiced && salesLine.SalesStatus != SalesStatus::Canceled))
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentExchangeLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentExchangeLine()
    {
        #GetCached(enableAmendmentExchangeLine, SalesLine.RORTradeType != RORTradeType::SalesPurch && salesLine.BOBRentalSubStatus == BOBRentalSubStatus::Delivered && !salesLine.RORRecIdExchanged)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentLostOrder</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentLostOrder()
    {
        SalesLine salesLineCheck;

        // Disable the button when the status of one line is equal to delivered or higher
        select firstonly RecId from salesLineCheck
        where (salesLineCheck.SalesStatus == SalesStatus::Delivered || salesLineCheck.SalesStatus == SalesStatus::Invoiced)
        &&    salesLineCheck.SalesId == salesTable.SalesId;
    
        if (!salesLineCheck.RecId)
        {
            InventDim inventDim;

            // No serial number can be assigned to any line of the current order
            select firstOnly RecId from salesLineCheck
            where salesLineCheck.SalesId == salesTable.SalesId
                join TableId from inventDim
                where inventDim.inventDimId == salesLineCheck.InventDimId
                &&    inventDim.inventSerialId;
        }

        WPPWorkOrderTable workOrderTableCheck;

        select firstonly RecId from workOrderTableCheck
        where workOrderTableCheck.OrderTableId == salesTable.TableId
        &&    workOrderTableCheck.OrderRecId == salesTable.RecId;

        if (!salesLineCheck.RecId && !workOrderTableCheck.RecId)
        {
            select firstonly RecId from workOrderTableCheck
                join RecId from salesLineCheck 
                where salesLineCheck.TableId == workOrderTableCheck.OrderTableId
                &&    salesLineCheck.RecId == workOrderTableCheck.OrderRecId
                &&    salesLineCheck.SalesId == salesTable.SalesId;
        }
    
        #GetCached(enableAmendmentLostOrder, !salesLineCheck.RecId && !workOrderTableCheck.Recid)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentRentalStopLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentRentalStopLine()
    {
        #GetCached(enableAmendmentRentalStopLine, salesLine.RORTradeType != RORTradeType::SalesPurch)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableAmendmentResetValueLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableAmendmentResetValueLine()
    {
        #GetCached(enableAmendmentResetValueLine, salesLine.RORTradeType != RORTradeType::SalesPurch)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableBuildButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableBuildButton()
    {
        #GetCached(enableBuildButton, canBeUpdatedContract.RORparmCanBuildBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableBulkReturnNoteButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableBulkReturnNoteButton()
    {
        BOBRentalType   rentalType;
        salesLine       salesLineLocal;
    
        select firstOnly RecId from rentalType
        where rentalType.Classification == BOBRentalTypeClassification::Bulk
        exists join salesLineLocal
        where salesLineLocal.BOBRentalTypeIdRequested == rentalType.RentalTypeId
        &&    salesLineLocal.SalesId                  == salesTable.SalesId;
    
        #GetCached(enableBulkReturnNoteButton, canBeUpdatedContract.RORparmCanReturnNoteBeUpdated() && rentalType.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableCreateReturnHeader</Name>
				<Source><![CDATA[
    public boolean RORparmEnableCreateReturnHeader()
    {
        #GetCached(enableCreateReturnHeader, this.RORGetEnableCreateReturnHeader())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableCreateReturnLine</Name>
				<Source><![CDATA[
    public boolean RORparmEnableCreateReturnLine()
    {
        #GetCached(enableCreateReturnLine, SalesLine.RORTradeType != RORTradeType::SalesPurch && (SalesLine.SalesStatus == SalesStatus::Delivered || SalesLine.SalesStatus == SalesStatus::Invoiced))
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableEventEndButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableEventEndButton()
    {
        #GetCached(enableEventEndButton, canBeUpdatedContract.RORparmCanEventEndBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableEventStartButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableEventStartButton()
    {
        #GetCached(enableEventStartButton, canBeUpdatedContract.RORparmCanEventStartBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableInboundButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableInboundButton()
    {
        #GetCached(enableInboundButton, canBeUpdatedContract.RORparmCanInboundBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableInspectionButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableInspectionButton()
    {
        #GetCached(enableInspectionButton, canBeUpdatedContract.RORparmCanInspectionBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableOutboundButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableOutboundButton()
    {
        #GetCached(enableOutboundButton, canBeUpdatedContract.RORparmCanOutboundBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnablePreparationButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnablePreparationButton()
    {
        #GetCached(enablePreparationButton, canBeUpdatedContract.RORparmCanPreparationBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableRentalLineEditorForm</Name>
				<Source><![CDATA[
    public boolean RORparmEnableRentalLineEditorForm()
    {
        // Workaround for the "Common Language Runtime detected an invalid program.", resulting from the update to 10.0.13 PEAP
        SalesLine salesLineLoc = salesLine;
        #GetCached(enableRentalLineEditorForm, salesLineLoc.RORRentalLine::canOpenRentalEditorForm())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableRentalMenuButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableRentalMenuButton()
    {
        #GetCached(enableRentalMenuButton, salesTable.SalesStatus != SalesStatus::Canceled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableReturnNoteButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableReturnNoteButton()
    {
        #GetCached(enableReturnNoteButton, canBeUpdatedContract.RORparmCanReturnNoteBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmEnableStrikeButton</Name>
				<Source><![CDATA[
    public boolean RORparmEnableStrikeButton()
    {
        #GetCached(enableStrikeButton, canBeUpdatedContract.RORparmCanStrikeBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsBuild</Name>
				<Source><![CDATA[
    public boolean RORparmExistsBuild()
    {
        #GetCached(existsBuild, salesTable.RORLastBuild() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsEventEnd</Name>
				<Source><![CDATA[
    public boolean RORparmExistsEventEnd()
    {
        #GetCached(existsEventEnd, salesTable.RORLastEventEnd() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsEventStart</Name>
				<Source><![CDATA[
    public boolean RORparmExistsEventStart()
    {
        #GetCached(existsEventStart, salesTable.RORLastEventStart() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsInbound</Name>
				<Source><![CDATA[
    public boolean RORparmExistsInbound()
    {
        #GetCached(existsInbound, salesTable.RORLastInbound() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsOutbound</Name>
				<Source><![CDATA[
    public boolean RORparmExistsOutbound()
    {
        #GetCached(existsOutbound, salesTable.RORLastOutbound() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsPreparation</Name>
				<Source><![CDATA[
    public boolean RORparmExistsPreparation()
    {
        #GetCached(existsPreparation, salesTable.RORLastPreparation() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsReturned</Name>
				<Source><![CDATA[
    public boolean RORparmExistsReturned()
    {
        #GetCached(existsReturnNote, salesTable.RORLastReturned() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsReturnInspection</Name>
				<Source><![CDATA[
    public boolean RORparmExistsReturnInspection()
    {
        #GetCached(existsInspection, salesTable.RORLastReturnInspection() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmExistsStrike</Name>
				<Source><![CDATA[
    public boolean RORparmExistsStrike()
    {
        #GetCached(existsStrike, salesTable.RORLastStrike() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmPurchaseOrderExists</Name>
				<Source><![CDATA[
    public boolean RORparmPurchaseOrderExists()
    {
        InterCompanyPurchSalesReference interCompanyPurchSalesReference;
        PurchTable purchTable;
    
        select firstOnly RecId from interCompanyPurchSalesReference
        where interCompanyPurchSalesReference.SalesId == salesTable.SalesId
        join RecId from purchTable
        where purchTable.PurchId == interCompanyPurchSalesReference.PurchId
        &&    purchTable.PurchaseType != PurchaseType::RORSubRental;
    
        #GetCached(existsPurchaseOrder, interCompanyPurchSalesReference.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmRelatedSubRentalOrderEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmRelatedSubRentalOrderEnabled()
    {
        #GetCached(relatedSubRentalOrderEnabled, !isReturnItem
        && salesLine.RORexistSubRental())
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmSubRentalOrderExists</Name>
				<Source><![CDATA[
    public boolean RORparmSubRentalOrderExists()
    {
        InterCompanyPurchSalesReference interCompanyPurchSalesReference;
        PurchTable purchTable;
    
        select firstOnly RecId from interCompanyPurchSalesReference
        where interCompanyPurchSalesReference.SalesId == salesTable.SalesId
        join RecId from purchTable
        where purchTable.PurchId == interCompanyPurchSalesReference.PurchId
        &&    purchTable.PurchaseType == PurchaseType::RORSubRental;
    
        #GetCached(existsSubRentalOrder, interCompanyPurchSalesReference.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmWorkOrderLineExistsHeader</Name>
				<Source><![CDATA[
    public boolean WPPparmWorkOrderLineExistsHeader()
    {
        WPPWorkOrderTable workOrderTable;
        SalesLine salesLineLocal;
    
        select firstOnly RecId from workOrderTable
        exists join salesLineLocal
        where salesLineLocal.TableId == workOrderTable.OrderTableId
        &&    salesLineLocal.RecId   == workOrderTable.OrderRecId
        &&    salesLineLocal.SalesId == salesTable.SalesId;
    
        if (!workOrderTable.RecId)
        {
            select firstOnly RecId from workOrderTable
            where workOrderTable.OrderTableId == salesTable.TableId
            &&    workOrderTable.OrderRecId   == salesTable.RecId;
        }
    
        #GetCached(existsWorkOrderHeader, workOrderTable.RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPparmWorkOrderLineExistsLine</Name>
				<Source><![CDATA[
    public boolean WPPparmWorkOrderLineExistsLine()
    {
        #GetCached(existsWorkOrderLine, WPPWorkOrderTable::existFromOrder(salesLine.TableId, salesLine.RecId))
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmRetailAddItemMenuItemEnabled</Name>
				<Source><![CDATA[
    public boolean RORparmRetailAddItemMenuItemEnabled()
    {
        #GetCached(enableHeaderDiscountButtons, salesTableForm.editHeaderAllowed() && salesTable.salesStatus != SalesStatus::Canceled)
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>