<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRPurchLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(PurchLine))]
public final class DNRPurchLineTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustCreateItemRequirement</Name>
				<Source><![CDATA[
    protected boolean mustCreateItemRequirement()
    {
        boolean ret = next mustCreateItemRequirement();
        
        // Create Item requirements only for SalesPurch Line 
        ret = ret && this.RORTradeType == RORTradeType::SalesPurch;
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    void initFromSalesLine(SalesLine _salesLine)
    {
        ProjId tmpProjId = this.ProjId;

        next initFromSalesLine(_salesLine);

        // This condition should be in line with the condition in 
        // AxClass/DNRPurchAutoCreate_SalesClass_Extension/Methods/setPurchTable.
        if (this.purchTable().PurchaseType == PurchaseType::RORSubRental
        &&  RORVenueTable::find(this.purchTable().RORVenueCode).WPPProjId)
        {
            this.ProjId = tmpProjId;
        }

        this.RORInitFromSalesLine(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId, boolean _userInput)
    {
        next modifiedField(_fieldId, _userInput);

        this.RORModifiedField(_fieldId);
        this.BOBModifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    public void setDefaultDimension()
    {
        DimensionDefault origDimensionDefault = this.DefaultDimension;

        next setDefaultDimension();
        
        if(FINDimAttributeSetup::existTableId(tablenum(PurchLine)))
        {
            this.DefaultDimension = origDimensionDefault;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    protected void setProjSalesPrice()
    {
        next setProjSalesPrice();
        
        if (this.RORTradeType != RORTradeType::SalesPurch)
        {
            this.ProjSalesPrice = 0;
            this.modifiedField(fieldNum(PurchLine, ProjSalesPrice));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    public boolean modifyInventDim(InventDim   _inventDim,FieldId     _dimFieldId,boolean     _resetPrice)
    {
        boolean ret = next modifyInventDim(_inventDim, _dimFieldId, _resetPrice);

        if(_dimFieldId == fieldNum(InventDim, InventSerialId))
        {
            BOBObjectTable objectTable = BOBOBjectTable::findInventSerialId(_inventDim.InventSerialId);
            purchLineDlvDate dlvDate = this.deliveryDate();
            PurchLine::WPPupdateWorkOrder(objectTable, this, objectTable.AssetId(dlvDate ? dlvDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpPurchLinePrice</Name>
				<Source><![CDATA[
    void initFromTmpPurchLinePrice(TmpPurchLinePrice _tmpPurchLinePrice)
    {
        next initFromTmpPurchLinePrice(_tmpPurchLinePrice);

        this.PurchPrice = UnitOfMeasureConverter::convert(this.PurchPrice,
                                                          this.RORPriceTimeUnit,
                                                          SalesLine::findRecId(_tmpPurchLinePrice.SalesLineRefRecId).RORPriceTimeUnit,
                                                          NoYes::No);

        this.RORRentalGrossAmount = this.PurchPrice * this.PurchQty;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    void initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        PurchLine purchLineParent = PurchLine::findInventTransId(_tmpSuppItem.InventTransId);
        this.RORParentLineRecId = purchLineParent.RecId;

        next initFromTmpSuppItem(_tmpSuppItem);

        this.RORRentalLine::initFromParent(purchLineParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyModifiedInteraction</Name>
				<Source><![CDATA[
    public void purchQtyModifiedInteraction(InventDim _inventDim)
    {
        // Store purchPrice because std code may delete it if there is no price agreement set.
        PurchPrice origPurchPrice = this.PurchPrice;
        PurchTable purchTable = this.purchTable();

        next purchQtyModifiedInteraction(_inventDim);

        // For subrental order we can completely ignore standard price agreements
        if (purchTable.PurchaseType == PurchaseType::RORSubRental)
        {
            this.PurchPrice = origPurchPrice;
  
            PurchLine::modifyPurchQty(this, _inventDim, false);
            this.RORRentalGrossAmount = (this.PurchPrice * this.PurchQty);
                
            if (this.RORTradeType == RORTradeType::SubRental)
            {
                this.RORRentalLine::rentalPricesModified();
                this.RORInsurancePctModified();    
            }                    
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInvent</Name>
				<Source><![CDATA[
    void resetInvent(boolean update)
    {
        next resetInvent(update);
        this.RORRemainPurchReturn  = 0;
        this.RORRemainInventReturn = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchTable</Name>
				<Source><![CDATA[
    public void setAddressFromPurchTable(PurchTable  _purchTable)
    {
        next setAddressFromPurchTable(_purchTable);
        this.RORVenueCode               = _purchTable.RORVenueCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    public boolean checkItemId()
    {
        boolean ok = next checkItemId();

        if (this.purchTable().ProjId)
        {
            if (WPPParameters::find().OnlyAllowServiceItems
            &&  InventTable::find(this.ItemId).ItemType != ItemType::Service)
            {
                ok = checkFailed(strfmt("@DNR2247", this.ItemId));
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    void initFromVendTable (VendTable _vendTable)
    {
        next initFromVendTable(_vendTable);

        VendTable vendTable = VendTable::find(this.VendAccount);

        this.FINCountryStartTransport = vendTable.postalAddress().CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINSetTaxGroup</Name>
				<Source><![CDATA[
    public void FINSetTaxGroup()
    {
        if (!this.FINIgnoreTaxMatrix
        &&   TaxParameters::find().FINCheckTaxMatrix != FINCheckTaxMatrix::Disabled)
        {
            this.TaxGroup = FINTaxMatrix::findTaxGroup(this, this.TaxGroup);
    
            if (this.ProjId
            && (!this.InventRefId || SalesTable::find(this.InventRefId).SalesType != SalesType::ItemReq))
            {
                this.ProjTaxGroupId = FINTaxMatrix::findTaxGroup(this, this.ProjTaxGroupId, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    public boolean modifyInventDimSet(
        InventDim   _inventDim,
        Set         _dimFieldIdSet,
        boolean     _resetPrice)
    {
        
        boolean ret = next modifyInventDimSet(_inventDim, _dimFieldIdSet, _resetPrice);

        if (_dimFieldIdSet.in(fieldNum(InventDim, InventLocationId)) && this.RORTradeType == RORTradeType::SubRental
        &&  this.RecId && this.orig().inventDim().InventLocationId != _inventDim.InventLocationId
        &&  FormDataUtil::isFormDataSource(this) && this.RORRentalLine::promptChangeInventLocationResetPrice())
        {
            PriceDiscPriceAgreementParameters parameters = PriceDiscPriceAgreementParameters::createInstance(this);
            parameters.DNRparmForceRentalAgreement(true);
            this.setPriceDisc(_inventDim, true, parameters);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnActionChanged</Name>
				<Source><![CDATA[
    //This is exact copy of standard returnActionChanged without calling inventDim.mergeUsedDim, 
    //because returnActionDefaults.InventDimId is not used anywhere but clearing InventSerialId due to a customization related to BO unassignment
    void returnActionChanged(InventDim inventDim)
    {
        ReturnActionDefaults  returnActionDefaults = ReturnActionDefaults::find(this.moduleType(), this.ReturnActionId);

        PurchReturnActionId returnActionId;

        if (returnActionDefaults.RecId && !returnActionDefaults.inventDim().inventSerialId)
        {
            returnActionId = this.ReturnActionId;
            this.ReturnActionId = "";
        }

        next returnActionChanged(inventDim);

        if (returnActionId)
        {
            this.ReturnActionId = returnActionId;

            if (!inventDim)
            {
                inventDim = this.inventDim();
            }

            this.setInventDimIdFromInventDim(inventDim);

            if (this.ProjId && !this.purchTable().isProjectSalesItemReqPO()
            && !this.getProjCreditNoteSource().purchTable().isProjectSalesItemReqPO())
            {
                this.Scrap          = returnActionDefaults.Scrap;

                if (this.ItemRefType != InventRefType::Sales &&
                this.ItemRefType != InventRefType::InventJournal)
                {
                    this.Scrap  = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateExtraLine</Name>
				<Source><![CDATA[
    // extension methods

    public RORRentalLine RORCreateExtraLine(RORLineType         _lineType,
                                            RORTradeType        _tradeType,
                                            RORKitComponentType _kitComponentType,
                                            ItemId              _itemId,
                                            LineNum             _highestLineNum)
    {
        PurchLine       purchLine;
        PurchLine       purchLineNextLineNum;
        PurchTable      purchTable = this.purchTable();
        SalesLine       salesLine;
        SalesLine       salesLineParent;
        RORVenueTable   venueTable;
        TradeLineNumber lineNum;
        TradeLineNumber highestLineNum = any2int64(_highestLineNum);
        PurchUnit       purchUnit;
        PurchQty        purchQty;
        ;
    
        select firstonly LineNumber from purchLineNextLineNum
        order by LineNumber
        where purchLineNextLineNum.PurchId == this.PurchId
        &&    purchLineNextLineNum.LineNumber >  _highestLineNum;
    
        if (purchLineNextLineNum.LineNumber)
        {
            lineNum = highestLineNum + any2Int64((purchLineNextLineNum.LineNumber - highestLineNum) / 2);
    
            //If there is no space between numbers then add line at the end
            if (lineNum == _highestLineNum)
            {
                select firstonly maxOf(LineNumber) from purchLineNextLineNum
                where purchLineNextLineNum.PurchId == this.PurchId;
    
                lineNum = purchLineNextLineNum.LineNumber + SystemParameters::find().SystemLineNumberIncrement;
            }
        }
        else
        {
            lineNum = highestLineNum + SystemParameters::find().SystemLineNumberIncrement;
        }
    
    
        purchLine.initValue();
        purchLine.initFromPurchTable(purchTable);
        purchLine.PurchaseType             = purchLine.PurchaseType;
        purchLine.PurchId                  = purchLine.PurchId;
        purchLine.RORTradeType             = purchLine.RORTradeType;
        purchLine.ItemId                   = _itemId;
        purchLine.itemIdChanged();
    
        purchUnit = this.RORDeterminePurchUnit(_itemId);
        purchQty = this.RORDeterminePurchQty(_itemId);
    
        purchLine.RORParentLineRecId       = this.RecId;
        purchLine.PurchQty                 = (purchQty ? purchQty : 1);
        purchLine.PurchUnit                = (purchUnit ? purchUnit : this.PurchUnit);
        purchLine.RORTradeType             = _tradeType;
        purchLine.RORmodifiedRORTradeType();
        purchLine.RORLineType              = _lineType;
        purchLine.RORKitComponentType      = _kitComponentType;
        purchLine.INVRateMultiplierTier    = 1;
    
        if (purchTable.InterCompanyDirectDelivery
        &&  purchTable.InterCompanyOrder
        &&  purchTable.PurchaseType == PurchaseType::RORSubRental)
        {
            select firstOnly salesLine
            where salesLine.SalesId == this.InventRefId
            &&    salesLine.ItemId == purchLine.ItemId
            &&    salesLine.RORLineType == purchLine.RORLineType
                exists join salesLineParent
                where salesLineParent.InventRefTransId == this.InventTransId
                &&    salesLineParent.RecId == salesLine.RORParentLineRecId;
    
            if (salesLine)
            {
                purchLine.InventDimId = salesLine.InventDimId;
            }
            else
            {
                purchLine.InventDimId = this.InventDimId;
            }
        }
        else if (_tradeType != RORTradeType::SalesPurch)
        {
            // for rental line like Insurance - copy from parent
            purchLine.InventDimId = this.InventDimId;
        }
        else if (InventTable::find(_itemId).RORBasePriceOnDistance)
        {
            venueTable = RORVenueTable::find(purchTable.RORVenueCode);
    
            if (venueTable.TransportDistanceQty)
            {
                purchLine.PurchQty  = venueTable.TransportDistanceQty;
                purchLine.PurchUnit = UnitOfMeasure::find(venueTable.TransportDistanceUnit).Symbol;
            }
        }
    
        purchLine.setPriceDisc(purchLine.inventDim());
        // Can reset some pricing elements
        purchLine.RORRentalLine::initFromParent(this);
    
        if (purchLine.RORTradeType != RORTradeType::SalesPurch)
        {
            purchLine.RORRentalPricesModified();
        }
    
        purchLine.LineNumber = lineNum;
    
        if (_lineType == RORLineType::Insurance)
        {
            purchLine.type().INVsetPriceMultiplier(DateTimeUtil::minValue(), DateTimeUtil::minValue(), false, this);
        }
    
        purchLine.createLine(true, false, false, true, false, false);
    
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDeterminePurchQty</Name>
				<Source><![CDATA[
    private PurchQty RORDeterminePurchQty(ItemId _itemId)
    {
        RORVenueTable   venueTable;
        PurchTable      purchTable;
    
        if (InventTable::find(_itemId).RORBasePriceOnDistance)
        {
            select firstOnly TransportDistanceQty from venueTable
                join TableId from purchTable
                where purchTable.RORVenueCode == venueTable.VenueCode
                &&    purchTable.PurchId == this.PurchId;
        }
    
        return venueTable.TransportDistanceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDeterminePurchUnit</Name>
				<Source><![CDATA[
    private PurchUnit RORDeterminePurchUnit(ItemId _itemId)
    {
        UnitOfMeasure   unitOfMeasure;
        RORVenueTable   venueTable;
        PurchTable      purchTable;
    
        if (InventTable::find(_itemId).RORBasePriceOnDistance)
        {
            select firstOnly Symbol from unitOfMeasure
                exists join venueTable
                where venueTable.TransportDistanceUnit == unitOfMeasure.RecId
                    join TableId from purchTable
                    where purchTable.RORVenueCode == venueTable.VenueCode
                    &&    purchTable.PurchId == this.PurchId;
        }
    
        return unitOfMeasure.Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayCurrentNetAmount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORCurrentNetAmount RORDisplayCurrentNetAmount()
    {
        RORCurrentNetAmount    netAmount;
    
        if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, RORRentalGrossAmount)))
        {
            netAmount = this.INVInvoicePeriodHost::displayCurrentNetAmount();
        }
    
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayExpectedOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORExpectedOffRentDateTime RORDisplayExpectedOffRentDateTime()
    {
        return this.RORRentalLine::displayExpectedOffRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayInventSerialId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display InventSerialId RORDisplayInventSerialId()
    {
        return this.inventDim().inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayLineStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROrderLineStatus RORdisplayLineStatus()
    {
        ROROrderLineStatus          lineStatus;
        BOBRentalTrans              rentalTrans;
        InventTransOriginPurchLine  inventTransOriginPurchLine;
    
        if (this.RORTradeType == RORTradeType::SalesPurch
        ||  this.PurchStatus  == PurchStatus::Canceled)
        {
            lineStatus = strFmt("%1", this.PurchStatus);
        }
        else
        if (this.RecId)
        {
            select minOf(SubStatus), RecId from rentalTrans
            where rentalTrans.TransType != BOBRentalTransType::InventCounting
                exists join inventTransOriginPurchLine
                where inventTransOriginPurchLine.InventTransOrigin == rentalTrans.InventTransOrigin
                &&    inventTransOriginPurchLine.PurchLineDataAreaId == this.dataAreaId
                &&    inventTransOriginPurchLine.PurchLineInventTransId == this.InventTransId;
    
            lineStatus = strFmt("%1", rentalTrans.RecId ? rentalTrans.SubStatus : this.BOBRentalSubStatus);
        }
        else
        {
            lineStatus = strFmt("%1", this.BOBRentalSubStatus);
        }
    
        return lineStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROffRentDateTime RORDisplayOffRentDateTime()
    {
        return this.RORRentalLine::displayOffRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayOnRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROnRentDateTime RORDisplayOnRentDateTime()
    {
        return this.RORRentalLine::displayOnRentDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayVenueCode</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORVenueCode RORDisplayVenueCode()
    {
        RORVenueCode    venueCode;
    
        if (hasFieldAccess(tableNum(PurchTable), fieldNum(PurchTable, RORVenueCode)))
        {
            venueCode = this.purchTable().RORVenueCode;
        }
    
        return venueCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditDiscPercent</Name>
				<Source><![CDATA[
    public static edit RORRentalDiscPercent ROREditDiscPercent(PurchLine _this,
                                                               boolean _set,
                                                               RORRentalDiscPercent _discPercent)
    {
        RORRentalDiscPercent    discPercent;
    
        if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, LinePercent)))
        {
            switch (_this.RORTradeType)
            {
                case RORTradeType::SubRental:
                    discPercent = _this.RORRentalLine::editDiscPercent(_set, _discPercent);
                    break;
    
                default:
                    if (_set)
                    {
                        _this.LinePercent = _discPercent;
                        _this.LineAmount = _this.calcLineAmountForced();
                    }
    
                    discPercent = _this.LinePercent;
                    break;
            }
        }
    
        return discPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditLineAmount</Name>
				<Source><![CDATA[
    public static edit LineAmount ROREditLineAmount(Purchline _this, boolean _set, LineAmount _lineAmount)
    {
        LineAmount    lineAmount;
    
        if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, LineAmount)))
        {
            lineAmount = _this.RORRentalLine::editLineAmount(_set, _lineAmount);
        }
    
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditNetAmount</Name>
				<Source><![CDATA[
    static edit RORRentalNetAmount ROREditNetAmount(PurchLine _hostObj, boolean _set, RORRentalNetAmount _netAmount)
    {
        RORRentalNetAmount netAmount;
    
        if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, RORRentalGrossAmount)))
        {
            netAmount = _hostObj.RORRentalLine::editNetAmount(_set, _netAmount);
        }
    
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROREditLineNetAmount</Name>
				<Source><![CDATA[
    edit RORRentalNetAmount ROREditLineNetAmount(boolean _set, RORRentalNetAmount _netAmount)
    {
        RORRentalNetAmount netAmount;
    
        if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, RORRentalGrossAmount)))
        {
            netAmount = this.RORRentalLine::editNetAmount(_set, _netAmount);
        }
    
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetHeader</Name>
				<Source><![CDATA[
    public RORRentalHeader RORGetHeader(boolean _forUpdate = false)
    {
        return this.purchTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetParentLine</Name>
				<Source><![CDATA[
    public RORRentalLine RORGetParentLine(boolean _forUpdate = false)
    {
        PurchLine emptyPurchLine;

        return (this.RORParentLineRecId ? PurchLine::findRecId(this.RORParentLineRecId, _forUpdate) : emptyPurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetReplacementLine</Name>
				<Source><![CDATA[
    public SalesLine RORGetReplacementLine(boolean _forUpdate = false)
    {
        SalesLine   replacementLine;
    
        if (this.RecId)
        {
            replacementLine.selectForUpdate(_forUpdate);
    
            select firstOnly replacementLine
            where replacementLine.RORRecIdExchanged == this.RecId;
    
            return replacementLine;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORHasChildren</Name>
				<Source><![CDATA[
    public boolean RORHasChildren(boolean _componentsOnly, boolean _filterTradeType = true)
    {
        return this.RORRentalLine::hasChildren(_componentsOnly, _filterTradeType);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORinitAddressFromVenueTable</Name>
				<Source><![CDATA[
    public void RORinitAddressFromVenueTable(RORVenueTable _venueTable = RORVenueTable::find(this.RORVenueCode))
    {
        LogisticsEntityPostalAddressView    addressView;
    
        select firstonly PostalAddress from addressView
        where addressView.IsPrimary == NoYes::Yes
        &&    addressView.EntityType == LogisticsLocationEntityType::RORVenue
        &&    addressView.Entity     == _venueTable.RecId;
    
        this.DeliveryName          = _venueTable.Name;
        this.DeliveryPostalAddress = addressView.PostalAddress;
        this.AddressRefRecId       = _venueTable.RecId;
        this.AddressRefTableId     = _venueTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromOrderLine</Name>
				<Source><![CDATA[
    public void RORInitFromOrderLine(RORRentalLine _rentalLine)
    {
        this.initFromPurchLine(_rentalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromSalesLine</Name>
				<Source><![CDATA[
    private void RORInitFromSalesLine(SalesLine _salesLine)
    {
        if (!this.INVRateMultiplierTier)
        {
            this.INVRateMultiplierTier  = _salesLine.INVRateMultiplierTier;
        }

        if (!this.INVRentalModeId)
        {
            this.INVRentalModeId = _salesLine.INVRentalModeId;
        }

        if (!this.RORPriceTimeUnit)
        {
            this.RORPriceTimeUnit = _salesLine.RORPriceTimeUnit;
        }

        if (!this.INVInvoiceProfileId)
        {
            this.INVInvoiceProfileId = _salesLine.INVInvoiceProfileId;
        }

        if (!this.DNRCalendarId)
        {
            this.DNRCalendarId = _salesLine.DNRCalendarId;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLineBuffer</Name>
				<Source><![CDATA[
    public PurchLine RORLineBuffer()
    {
        PurchLine purchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORMaySubStatusBeUpdated</Name>
				<Source><![CDATA[
    public boolean RORMaySubStatusBeUpdated(BOBRentalSubStatus _rentalSubStatus)
    {
        BOBRentalType               rentalType;
        BOBRentalTrans              rentalTrans;
        InventTransOriginPurchLine  inventTransOriginPurchLine;
        Set                         setPotentialStatus = new Set(Types::Enum);
        Set                         setAvailableStatus = new Set(Types::Enum);
        RefRecId                    postingPolicyRecIdPrev;
        boolean                     ret = true;
    
        if (this.RORTradeType != RORTradeType::SalesPurch)
        {
            while select PostingPolicyRecId from rentalType
            group by PostingPolicyRecId
                join SubStatus from rentalTrans
                group by SubStatus
                where rentalTrans.RentalTypeId == rentalType.RentalTypeId
                    join TableId from inventTransOriginPurchLine
                    where inventTransOriginPurchLine.InventTransOrigin      == rentalTrans.InventTransOrigin
                    &&    inventTransOriginPurchLine.PurchLineDataAreaId    == this.dataAreaId
                    &&    inventTransOriginPurchLine.PurchLineInventTransId == this.InventTransId
            {
                if (rentalType.PostingPolicyRecId != postingPolicyRecIdPrev)
                {
                    if (postingPolicyRecIdPrev)
                    {
                        // Union existing set with that from this status group
                        setPotentialStatus = Set::union(setPotentialStatus, BOBPostingPolicyRule::getPossibleStatuses(InventDirection::Receipt, setAvailableStatus, postingPolicyRecIdPrev));
                    }
    
                    postingPolicyRecIdPrev = rentalType.PostingPolicyRecId;
                    setAvailableStatus = new Set(Types::Enum);
                }
    
                setAvailableStatus.add(rentalTrans.SubStatus);
                // Also add to the Potential status, because the current status is the status that we're going to update to
                setPotentialStatus.add(rentalTrans.SubStatus);
            }
    
            if (postingPolicyRecIdPrev)
            {
                // Union existing set with that from this status group
                setPotentialStatus = Set::union(setPotentialStatus, BOBPostingPolicyRule::getPossibleStatuses(InventDirection::Receipt, setAvailableStatus, postingPolicyRecIdPrev));
            }
    
            ret = setPotentialStatus.in(_rentalSubStatus);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedCalendarId</Name>
				<Source><![CDATA[
    public void RORModifiedCalendarId()
    {
        this.RORRentalLine::RORModifiedCalendarId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedField</Name>
				<Source><![CDATA[
    public void RORModifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchLine, RORRentalGrossAmount):
                this.RORModifiedGrossAmount();
                break;
    
            case fieldNum(PurchLine, ItemId),
                 fieldNum(PurchLine, CurrencyCode),
                 fieldNum(PurchLine, RORPriceTimeUnit):
                this.setPriceDisc(this.inventDim());
                break;
    
            case fieldnum(PurchLine, RORTradeType):
                this.RORModifiedRORTradeType();
                break;
    
            case fieldNum(PurchLine, INVInvoiceProfileId):
                this.RORModifiedInvoiceProfileId();
                break;
    
            case fieldNum(PurchLine, DNRCalendarId):
                this.RORModifiedCalendarId();
                break;
    
            case fieldNum(PurchLine, RORVenueCode):
                this.RORinitAddressFromVenueTable(RORVenueTable::find(this.RORVenueCode));
                break;

            case fieldNum(PurchLine, QtyOrdered):
                this.PurchQty = this.QtyOrdered;
                PurchLine::modifyPurchQty(this, this.inventDim());
                break;

            case fieldNum(PurchLine, LinePercent):
                this.RORInsurancePctModified();
                break;

            case fieldNum(PurchLine, RORInsuranceNetPercentage),
                fieldNum(PurchLine, RORInsuranceGrossPercentage) :
                this.RORInsurancePctModified();
                break;

            case fieldNum(PurchLine, RORInsuranceNetAmount),
                fieldNum(PurchLine, RORInsuranceGrossAmount) :
                this.RORInsuranceAmountModified();
                break;

            case fieldNum(PurchLine, RORDeliveryGrossAmount),
                 fieldNum(PurchLine, RORDeliveryPercentage) :
                 this.RORRecalculateDeliveryAmount();
                break;

            case fieldNum(SalesLine, RORReturnGrossAmount),
                 fieldNum(SalesLine, RORReturnPercentage) :
                 this.RORRecalculateReturnAmount();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedGrossAmount</Name>
				<Source><![CDATA[
    public void RORModifiedGrossAmount()
    {
        this.RORRentalLine::modifiedGrossAmount();
        this.RORInsurancePctModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedInvoiceProfileId</Name>
				<Source><![CDATA[
    public void RORModifiedInvoiceProfileId()
    {
        this.RORRentalLine::RORModifiedInvoiceProfileId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedPriceTimeUnit</Name>
				<Source><![CDATA[
    public void RORModifiedPriceTimeUnit()
    {
        Factor  factor = UnitOfMeasureConverter::convert(1, this.RORPriceTimeUnit, this.orig().RORPriceTimeUnit, NoYes::No);
        ;
    
        this.PurchPrice = this.PurchPrice * factor;
        this.RORRentalGrossAmount = this.RORRentalGrossAmount * factor;
        this.RORModifiedGrossAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedRORTradeType</Name>
				<Source><![CDATA[
    public void RORModifiedRORTradeType()
    {
        this.RORRentalStatus = (this.RORTradeType == RORTradeType::SalesPurch ? RORRentalStatus::NotApplicable : RORRentalStatus::OnOrder);

        if (this.RORTradeType == RORTradeType::SalesPurch)
        {
            VendTable vendTable = this.vendTable_OrderAccount();

            if (this.isCategoryBased())
            {
                this.MatchingPolicy = PurchMatchingPolicyManager::findMatchingPolicy(null, vendTable, this.ProcurementCategory);
            }
            else
            {
                this.MatchingPolicy = PurchMatchingPolicyManager::findMatchingPolicy(this.inventTable(), vendTable);
            }
        }
        else if (this.RORTradeType == RORTradeType::SubRental)
        {
            this.MatchingPolicy = PurchMatchingPolicyOption::NoMatch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ROROrderMustBeReConfirmed</Name>
				<Source><![CDATA[
    public boolean ROROrderMustBeReConfirmed(Common _lineOrig = this.orig())
    {
        boolean     ret;
        PurchLine   lineOrig = _lineOrig as PurchLine;
        InventDim   inventDim = this.inventDim();
        InventDim   inventDimOrig = lineOrig.inventDim();
        ;
    
        if (lineOrig
        && (lineOrig.WPPWorkOrderTemplateId != this.WPPWorkOrderTemplateId ||
            inventDimOrig.InventLocationId != inventDim.InventLocationId ||
            inventDimOrig.InventSiteId != inventDim.InventSiteId ||
            inventDimOrig.inventSerialId != inventDim.inventSerialId))
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORPriceModified</Name>
				<Source><![CDATA[
    public void RORPriceModified()
    {
        this.RORRentalLine::priceModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRentalDateTimes</Name>
				<Source><![CDATA[
    public RORRentalDateTimes RORRentalDateTimes(boolean _forUpdate = false)
    {
        return RORRentalDateTimes::findReference(this.TableId, this.RecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRentalPricesModified</Name>
				<Source><![CDATA[
    public void RORRentalPricesModified()
    {
        this.RORRentalLine::rentalPricesModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORTimeZoneSite</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Timezone RORTimeZoneSite()
    {
        return InventSite::timeZoneSite(InventDim::find(this.InventDimId).InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPupdateWorkOrder</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public static void WPPupdateWorkOrder(BOBObjectTable _objectTable, PurchLine _purchLine, AssetId _assetId = '')
    {
        WPPWorkOrderTable       workOrderTable;
        WPPWorkOrderLine        workOrderLine;
        PurchLine               purchLine;
        InventTable             inventTable;
        RefRecId                orderRecId;
        LogisticsLocationRecId  logistiscLocationRecId;
        PurchQty                purchQty;
        EcoResProduct           ecoResProduct;
        BOBRentalType           rentalType;
        //RecordInsertList        list;
        //List = new RecordInsertList(tableNum(xxx));
        if (_purchLine.RecId)
        {
            orderRecId = _purchLine.RecId;
    
            if (WPPWorkOrderTable::existFromOrder(_purchLine.TableId, _purchLine.RecId))
            {
                // Synchronize the assigned object to the related work order
                logistiscLocationRecId = _purchLine.DeliveryPostalAddress;
                purchQty = _purchLine.PurchQty;
            }
            else
            {
                // Object might be assigned to the main component,
                // update the work order linked to the kit
                select firstOnly RecId, RORParentLineRecId from purchLine
                where purchLine.RecId == _purchLine.RecId
                    join TableId from inventTable
                    where inventTable.ItemId == purchLine.ItemId
                        join TableId from ecoResProduct
                        where ecoResProduct.Recid == inventTable.Product
                            join RORIsMainComponent from rentalType
                            where rentalType.RentalTypeId == ecoResProduct.BOBRentalTypeId;
    
                if (rentalType.RORIsMainComponent)
                {
                    while (purchLine)
                    {
                        logistiscLocationRecId = purchLine.DeliveryPostalAddress;
    
                        orderRecId = purchLine.RecId;
                        purchQty = purchLine.PurchQty;
                        purchLine = PurchLine::findRecId(purchLine.RORParentLineRecId);
                    }
                }
            }
    
            // Synchronize the assigned object to the related work order
            if (orderRecId)
            {
                ttsbegin;

                update_recordSet workOrderTable
                setting BOBObjectTableRecId = _objectTable.RecId,
                        AssetId = _assetId,
                        LogisticsLocationRecId = logistiscLocationRecId,
                        ObjectQty = purchQty
                where workOrderTable.OrderTableId == _purchLine.TableId
                &&    workOrderTable.OrderRecId   == orderRecId;
    
                while select forupdate workOrderLine
                where workOrderLine.ObjectQty != purchQty
                    exists join workOrderTable
                    where workOrderTable.WorkOrderId  == workOrderLine.WorkOrderId
                    &&    workOrderTable.OrderTableId == _purchLine.TableId
                    &&    workOrderTable.OrderRecId   == orderRecId
                {
                    // round up ResourceQty to nearest integer number
                    workOrderLine.ResourceQty = any2Int(roundUp(workOrderLine.ObjectQty * purchQty, 1));
                    workOrderLine.ObjectQty = purchQty;
                    workOrderLine.update();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBcheckContainsObjectGroupSubGroup</Name>
				<Source><![CDATA[
    public boolean BOBcheckContainsObjectGroupSubGroup(BOBObjectGroupId    _objectGroupId, BOBObjectSubGroupId _objectSubGroupId)
    {
        SalesLine           salesLineCheck;
        BOBRentalType       rentalType;
        boolean             containsGroup = false;
    
        if (_objectGroupId || _objectSubGroupId)
        {
            if (this.RORKitComponentType == RORKitComponentType::Kit
            ||  this.RORKitComponentType == RORKitComponentType::KitComponent)
            {
                select firstonly RecId from salesLineCheck
                where salesLineCheck.RORParentLineRecId == this.RecId
                    exists join rentalType
                    where ((salesLineCheck.BOBRentalTypeIdAssigned  && rentalType.RentalTypeId   == salesLineCheck.BOBRentalTypeIdAssigned)
                    ||     (!salesLineCheck.BOBRentalTypeIdAssigned && rentalType.RentalTypeId   == salesLineCheck.BOBRentalTypeIdRequested))
                    &&   (!_objectGroupId       || (rentalType.ObjectGroupId    == _objectGroupId))
                    &&   (!_objectSubGroupId    || (rentalType.ObjectSubGroupId == _objectSubGroupId));
    
                containsGroup = salesLineCheck.RecId;
            }
            else
            {
                containsGroup = BOBRentalType::checkContainsObjGroupSubGroup(this.BOBRentalTypeId, _objectGroupId, _objectSubGroupId);
            }
        }
    
        return containsGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayAutoAssetConvert</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBAutoAssetConvertPurch BOBDisplayAutoAssetConvert()
    {
        return this.inventTable().BOBAutoAssetConvertPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBModifiedField</Name>
				<Source><![CDATA[
    public void BOBModifiedField(FieldId _fieldId)
    {
        if((_fieldId == fieldNum(PurchLine, DeliveryDate) &&  this.DeliveryDate)
        || (_fieldId == fieldNum(PurchLine, ConfirmedDlv) && !this.DeliveryDate))
        {
            this.RORRentalLine::BOBSynchRentalTransDateTimes();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetTierMultiplierRateOnCreation</Name>
				<Source><![CDATA[
    public void INVSetTierMultiplierRateOnCreation(boolean _manualRecalculation = false)
    {
        // Code implemented in model DynarentInvoicing
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckOffRentDateTimeChange</Name>
				<Source><![CDATA[
    public boolean RORCheckOffRentDateTimeChange(boolean _showWarning = true)
    {
        boolean retVal = true;
    
        // If fully returned, then can't change off-hire date
        if (this.RORPurchReturned && !this.RORRemainPurchReturn)
        {
            retVal = (_showWarning ? checkFailed(strFmt("@DNR1283")) : false);
        }
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckTradeType</Name>
				<Source><![CDATA[
    public boolean RORCheckTradeType(InventTable _inventTable = this.inventTable())
    {
        boolean         ret = true;
        RORTradeType    tradeType;
        PurchTable      purchTable = this.purchTable();
    
        if (_inventTable)
        {
            switch (_inventTable.RORItemTradeType)
            {
                case RORItemTradeType::SalesPurch :
                    if (this.RORTradeType != RORTradeType::SalesPurch)
                    {
                        ret = false;
                        tradeType = RORTradeType::SalesPurch;
                    }
                    break;
    
                case RORItemTradeType::RentalSubRental :
                    if (this.RORTradeType == RORTradeType::SalesPurch)
                    {
                        ret = false;
                        tradeType = RORTradeType::SubRental;
                    }
                    break;
    
                default:
                // RORItemTradeType::FromOrder allows you to set it both ways on suberntal line
                // Do nothing                
            }
        }
    
        if (!ret)
        {
            ret = checkFailed(strFmt("@DNR6337", tradeType));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORgetLineNumContainer</Name>
				<Source><![CDATA[
    public container RORgetLineNumContainer(LineNum _lineNumCurrent, boolean _lineTypeNormal = true)
    {
        PurchLine purchLine, purchLineParent, purchLineAgmt;

        select firstonly LineNumber from purchLine
        order by LineNumber asc
        where purchLine.PurchId == this.PurchId
        &&   (!_lineTypeNormal || purchLine.RORLineType == RORLineType::Normal)
        &&    purchLine.LineNumber > _lineNumCurrent
            outer join LineNumber from purchLineParent
            where purchLineParent.PurchId == purchLine.PurchId
            &&    purchLineParent.RecId == purchLine.RORParentLineRecId;
        
        select firstonly maxOf(LineNumber) from purchLineAgmt
        where purchLineAgmt.PurchId == this.PurchId
        &&    purchLineAgmt.RORLineType != RORLineType::Normal;

        return [ purchLine.LineNumber, purchLineParent.LineNumber, purchLineAgmt.LineNumber ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCanInvoiceProjHoursForRentalType</Name>
				<Source><![CDATA[
    [SysObsolete("This method is no longer used", false)]
    public boolean WPPCanInvoiceProjHoursForRentalType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCanInvoiceOrderLineForRentalType</Name>
				<Source><![CDATA[
    [SysObsolete("This method is no longer used", false)]
    public boolean WPPCanInvoiceOrderLineForRentalType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPGetAmountFromProjHour</Name>
				<Source><![CDATA[
    [SysObsolete("This method is no longer used", false)]
    public AmountCur WPPGetAmountFromProjHour(TransDateTime _startDateTimeCharging, TransDateTime _endDateTimeCharging, Set _projEmplTransSet)
    {
        AmountCur                       amount;
        AmountCur                       purchAmount;
        ProjEmplTrans                   projEmplTrans;
        WPPWorkOrderTable               workOrderTable;
        WPPWorkOrderLine                workOrderLine;
        WPPWorkOrderLineHourTransLink   workOrderLineHourTransLink;
        SalesLine                       salesLine;
        TransDate                       startDate;
        TransDate                       endDate;
        Qty                             minQty, maxQty, adjustedQty;
        SalesLine                       salesLineLinked2WorkOrder;
        WPPWorkOrderTable               machineWorkOrderTable;
        ProjJournalTrans                projJournalTrans;
        RORSubrentalReference           reference;
    
        if (this.WPPCanInvoiceProjHoursForRentalType())
        {
            startDate = DateTimeUtil::date(_startDateTimeCharging);
            endDate = DateTimeUtil::date(_endDateTimeCharging);
            reference = RORSubrentalReference::findSales(this.InventTransId,
                                                         this.RORRentalDateTimes(),
                                                         RORParameters::dateTimeTypeInvoicingStart());

            salesLine = SalesLine::findInventTransId(reference.SalesInventTransId);
            purchAmount = this.ROREditLineNetAmount(false, 0);
            machineWorkOrderTable = WPPWorkOrderTable::findFromOrder(salesLine.TableId, salesLine.RecId);

            if (machineWorkOrderTable || !salesLine.RORParentLineRecId)
            {
                salesLineLinked2WorkOrder = salesLine;
            }
            else
            {
                salesLineLinked2WorkOrder = SalesLine::findRecId(salesLine.RORParentLineRecId);
            }

            while select sum(Qty), sum(TotalSalesAmountCur), AdjRefTransId, CategoryId, CurrencyId from projEmplTrans
            group by AdjRefTransId, CategoryId, CurrencyId
            where projEmplTrans.TransDate >= startDate
            &&    projEmplTrans.TransDate <= endDate
            &&   !projEmplTrans.WPPInvoiceId
            &&    projEmplTrans.RORBothRentalSubRental != RORBothRentalSubRental::Rental
            &&    projEmplTrans.INVRefRecId == salesLineLinked2WorkOrder.RecId
            &&    projEmplTrans.INVRefTableId == salesLineLinked2WorkOrder.TableId
            {
                // Adjustments do not need be checked against the contract
                if (projEmplTrans.AdjRefTransId)
                {
                    adjustedQty = projEmplTrans.Qty;
                }
                else
                {
                    [minQty, maxQty] = this.WPPGetMinMaxQty(projEmplTrans.CategoryId);
                    adjustedQty = max(minQty, projEmplTrans.Qty);
                    adjustedQty = min(adjustedQty, maxQty);
                }

                amount += CurrencyExchangeHelper::curAmount2CurAmount(purchAmount * adjustedQty, projEmplTrans.CurrencyId, this.CurrencyCode);
            }
        
            while select sum(Qty), sum(TotalSalesAmountCur), AdjRefTransId, CategoryId, CurrencyId from projEmplTrans
            group by AdjRefTransId, CategoryId, CurrencyId
            where projEmplTrans.TransDate >= startDate
            &&    projEmplTrans.TransDate <= endDate
            &&   !projEmplTrans.WPPInvoiceId
            &&    projEmplTrans.RORBothRentalSubRental != RORBothRentalSubRental::Rental
                exists join workOrderLineHourTransLink
                where workOrderLineHourTransLink.RefTableId == projEmplTrans.TableId
                &&    workOrderLineHourTransLink.RefRecId   == projEmplTrans.RecId
                    join TableId from workOrderLine
                    where workOrderLine.RecId == workOrderLineHourTransLink.WorkOrderLineRecId
                        join TableId from workOrderTable
                        where workOrderTable.WorkOrderId  == workOrderLine.WorkOrderId
                        &&    (workOrderTable.OrderTableId == this.TableId && workOrderTable.OrderRecId == this.RecId)
            {
                // Adjustments do not need be checked against the contract
                if (projEmplTrans.AdjRefTransId)
                {
                    adjustedQty = projEmplTrans.Qty;
                }
                else
                {
                    [minQty, maxQty] = this.WPPGetMinMaxQty(projEmplTrans.CategoryId);
                    adjustedQty = max(minQty, projEmplTrans.Qty);
                    adjustedQty = min(adjustedQty, maxQty);
                }

                purchAmount = this.ROREditLineNetAmount(false, 0);
                amount += CurrencyExchangeHelper::curAmount2CurAmount(purchAmount * adjustedQty, projEmplTrans.CurrencyId, this.CurrencyCode);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBRentalTypeId</Name>
				<Source><![CDATA[
    public BOBRentalTypeId BOBRentalTypeId()
    {
        return this.BOBRentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPGetMinMaxQty</Name>
				<Source><![CDATA[
    public container WPPGetMinMaxQty(ProjCategoryId _projCategoryId)
    {
        RAGTmpContractLine      tmpContractLine;
        WPPWorkType             workType = ProjCategory::find(_projCategoryId ? _projCategoryId : this.ProjCategoryId).WPPWorkType;
        Qty                     minQty = 0, maxQty = realMax();
        ;

        // if no workType then use std ax sales price
        if (workType)
        {
            tmpContractLine = RAGContractData::getTmpContractLineFromRentalLine(this);

            switch (workType)
            {
                case WPPWorkType::Transport:
                    minQty = tmpContractLine.Transport_MinQty;
                    maxQty = (tmpContractLine.Transport_MustApplyMaxQty || tmpContractLine.Transport_MaxQty ?
                              tmpContractLine.Transport_MaxQty :
                              maxQty);
                    break;

                case WPPWorkType::ReturnTransport:
                    minQty = tmpContractLine.ReturnTransport_MinQty;
                    maxQty = (tmpContractLine.ReturnTransport_MustApplyMaxQty || tmpContractLine.ReturnTransport_MaxQty ?
                              tmpContractLine.ReturnTransport_MaxQty :
                              maxQty);
                    break;

                case WPPWorkType::Rigging:
                    minQty = tmpContractLine.Rigging_MinQty;
                    maxQty = (tmpContractLine.Rigging_MustApplyMaxQty || tmpContractLine.Rigging_MaxQty ?
                              tmpContractLine.Rigging_MaxQty :
                              maxQty);
                    break;

                case WPPWorkType::Hoisting:
                    minQty = tmpContractLine.MinQty_Qty;
                    maxQty = (tmpContractLine.MaxQty_MustApplyMaxQty ||tmpContractLine.MaxQty_Qty ?
                              tmpContractLine.MaxQty_Qty :
                              maxQty);
                    break;

                case WPPWorkType::Derigging:
                    warning("@DNR8686");
                    break;
            }
        }

        return [minQty, maxQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetTierMultiplierOnCreation</Name>
				<Source><![CDATA[
    public void INVSetTierMultiplierOnCreation(boolean _manualRecalculation = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSetDeliveryContractInfo</Name>
				<Source><![CDATA[
    public void RORSetDeliveryContractInfo(RAGTmpContractLine _tmpContractLine)
    {
        Qty transportQty = this.PurchQty;

        this.RORDeliveryGrossAmount = (_tmpContractLine.Transport_UseRentalTypePrice? _tmpContractLine.GrossPrice_Price : _tmpContractLine.Transport_Price) * transportQty;
        this.RORRecalculateDeliveryAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSetReturnContractInfo</Name>
				<Source><![CDATA[
    public void RORSetReturnContractInfo(RAGTmpContractLine _tmpContractLine)
    {
        Qty transportQty = this.PurchQty;

        this.RORReturnGrossAmount = (_tmpContractLine.Transport_UseRentalTypePrice? _tmpContractLine.GrossPrice_Price : _tmpContractLine.ReturnTransport_Price) * transportQty;
        this.RORRecalculateReturnAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSetInsuranceContractInfo</Name>
				<Source><![CDATA[
    public void RORSetInsuranceContractInfo(RAGTmpContractLine _tmpContractLine)
    {
        this.RORInsuranceGrossPercentage = _tmpContractLine.InsurancePct_Percentage;
        this.RORInsuranceGrossAmount = this.RORRentalGrossAmount * this.RORInsuranceGrossPercentage/100;

        this.RORInsuranceCalcBasis = _tmpContractLine.Insurance_CalcBasis;
        this.RORInsuranceInsureHireStops = _tmpContractLine.Insurance_InsureHireStops;

        if (_tmpContractLine.Insurance_CalcBasis == RORInsuranceCalcBasis::Gross)
        {
            this.RORInsuranceNetPercentage = this.RORInsuranceGrossPercentage;
            this.RORInsuranceNetAmount = this.RORInsuranceGrossAmount;
        }
        else
        {
            this.RORInsuranceNetPercentage = _tmpContractLine.InsurancePct_Percentage;
            this.RORInsuranceNetAmount = this.RORRentalLine::editNetAmount(false, 0) * this.RORInsuranceNetPercentage/100;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInsurancePctModified</Name>
				<Source><![CDATA[
    public void RORInsurancePctModified()
    {
        this.RORInsuranceGrossAmount = this.RORRentalGrossAmount * this.RORInsuranceGrossPercentage/100;
        this.RORInsuranceNetAmount = this.RORRentalLine::editNetAmount(false, 0) * this.RORInsuranceNetPercentage/100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInsuranceAmountModified</Name>
				<Source><![CDATA[
    public void RORInsuranceAmountModified()
    {
        if (this.RORRentalGrossAmount)
        {
            this.RORInsuranceGrossPercentage = this.RORInsuranceGrossAmount / this.RORRentalGrossAmount * 100;
        }
        else
        {
            this.RORInsuranceGrossPercentage = 0;
        }

        if (this.RORRentalLine::editNetAmount(false, 0))
        {
            this.RORInsuranceNetPercentage = this.RORInsuranceNetAmount / this.RORRentalLine::editNetAmount(false, 0) * 100;
        }
        else
        {
            this.RORInsuranceNetPercentage = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRecalculateDeliveryReturnAmount</Name>
				<Source><![CDATA[
    public void RORRecalculateDeliveryReturnAmount()
    {
        Qty qty = this.orig().PurchQty;
        real modificationFactor = 1;
        
        if (qty && qty != this.PurchQty)
        {
            modificationFactor = (qty != 0 ? this.PurchQty / qty : 0);
        }

        this.RORDeliveryGrossAmount = this.RORDeliveryGrossAmount * modificationFactor;
        this.RORRecalculateDeliveryAmount();

        this.RORReturnGrossAmount = this.RORReturnGrossAmount * modificationFactor;
        this.RORRecalculateReturnAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRecalculateDeliveryAmount</Name>
				<Source><![CDATA[
    public void RORRecalculateDeliveryAmount()
    {
        this.RORDeliveryNetAmount = this.RORDeliveryGrossAmount - (this.RORDeliveryGrossAmount * this.RORDeliveryPercentage / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRecalculateReturnAmount</Name>
				<Source><![CDATA[
    public void RORRecalculateReturnAmount()
    {
        this.RORReturnNetAmount = this.RORReturnGrossAmount - (this.RORReturnGrossAmount * this.RORReturnPercentage / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PurchLine_onUpdating</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(PurchLine), DataEventType::Updating)]
    public static void PurchLine_onUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        PurchLine hostObj = _sender as PurchLine;
        PurchLine purchLineOrig = hostObj.extensionOrig();

        if(!hostObj.RORIsModified && !purchLineOrig.RORIsModified && hostObj.RORRentalLine::orderMustBeReConfirmed(purchLineOrig))
        {
            hostObj.RORIsModified = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPurchQty_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(PurchLine), tablestaticMethodStr(PurchLine, modifyPurchQty))]
    public static void modifyPurchQty_post(XppPrePostArgs _eventArgs)
    {
        PurchLine purchLine = _eventArgs.getThis();
        Qty qty = purchLine.orig().PurchQty;
        real modificationFactor = 1;

        if (qty && qty != purchLine.PurchQty)
        {
            modificationFactor = (qty != 0 ? purchLine.PurchQty / qty : 0);
        }

        purchLine.RORDeliveryGrossAmount = purchLine.RORDeliveryGrossAmount * modificationFactor;
        purchLine.RORRecalculateDeliveryAmount();

        purchLine.RORReturnGrossAmount = purchLine.RORReturnGrossAmount * modificationFactor;
        purchLine.RORRecalculateReturnAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(PurchLine), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        PurchLine purchLine = _sender as PurchLine;
        purchLine.FINSetTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdating</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(PurchLine), DataEventType::Updating)]
    public static void DNREvent_OnUpdating(Common _sender, DataEventArgs _eventArgs)
    {
        PurchLine purchLine = _sender as PurchLine;
        PurchLine purchLineOrig = purchLine.orig();

        purchLine.FINSetTaxGroup();

        if (purchLine.purchTable().PurchaseType == PurchaseType::RORSubRental)
        {
            if (purchLine.TaxGroup != purchLineOrig.TaxGroup)
            {
                ROROrderAmendmentLog::createAmendmentLog(DNRAmendmentAction::Updated, purchLine, DNRAmendmentEventType::SalesTaxGroupLine);
            }

            if (purchLine.TaxItemGroup != purchLineOrig.TaxItemGroup)
            {
                ROROrderAmendmentLog::createAmendmentLog(DNRAmendmentAction::Updated, purchLine, DNRAmendmentEventType::SalesTaxItemGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORDisplayLineTypeImage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display container RORDisplayLineTypeImage()
    {
        container imageContainer;
        
        imageContainer = this.RORRentalLine::displayLineTypeImage();
        
        return imageContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>