<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanboardContextMenuBuilder_GBOABusinessObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HiGHPlanboardContextMenuBuilder_GBOABusinessObject extends HiGHPlanboardContextMenuBuilder
{
    HiGHPlanboardContextMenuData contextMenuData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    // main extension point for customizing the contents of the context menu.
    public void populate()
    {
        contextMenuData = new HiGHPlanboardContextMenuData();
                
        BOBObjectTable objectTable;
        BOBRentalTrans rentalTrans;

        select firstOnly ObjectId, FleetNumber, InventSerialId, RentalTypeId from objectTable
            join  TransType, SubStatus, RentalTypeId, FromDateTime, ToDateTime, CertaintyFrom, CertaintyTo, Active, CompanyId,
                  AssetId, InventTransOrigin, WPPWorkOrderLineRecId from rentalTrans
            where rentalTrans.RecId == sender.parmRefRecId()
            &&    rentalTrans.ObjectId == objectTable.ObjectId;
        
        contextMenuData.objectId = objectTable.ObjectId;
        contextMenuData.fleetNumber = objectTable.FleetNumber;
        contextMenuData.inventSerialId = objectTable.InventSerialId;
        contextMenuData.rentalTypeId = objectTable.RentalTypeId;

        contextMenuData.transType = rentalTrans.TransType;
        contextMenuData.subStatus = rentalTrans.SubStatus;
        contextMenuData.rentalTypeId = rentalTrans.RentalTypeId;

        contextMenuData.fromDate = rentalTrans.FromDateTime;
        contextMenuData.toDate = rentalTrans.ToDateTime;
        contextMenuData.certaintyFrom = rentalTrans.CertaintyFrom;
        contextMenuData.certaintyTo = rentalTrans.CertaintyTo;
        contextMenuData.transActive = rentalTrans.Active;
        contextMenuData.companyId = rentalTrans.CompanyId;
        contextMenuData.assetId = rentalTrans.AssetId;
        contextMenuData.inventTransOrigin = rentalTrans.InventTransOrigin;
        contextMenuData.workOrderLineRecid = rentalTrans.WPPWorkOrderLineRecId;

        this.populateFunctionsGroup();
        this.populateRentalTransactionsGroup();
        this.populateBusinessObjectGroup();
        this.populateOriginGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFunctionsGroup</Name>
				<Source><![CDATA[
    private void populateFunctionsGroup()
    {
        boolean enableChangeRentalDates = (contextMenuData.transType == BOBRentalTransType::Rental);

        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS81103"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS340024", true, #JumpRefRentalTrans));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR8472", enableChangeRentalDates, #ChangeRentalDates));

        switch(contextMenuData.transType)
        {
            case BOBRentalTransType::Rental:
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7184", true, #JumpRefRentalOrder));
                break;

            case BOBRentalTransType::SubRental:
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR8293", true, #JumpRefSubRentalOrder));
                break;

            case BOBRentalTransType::Sales:
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS317422", true, #JumpRefSalesOrder));
                break;

            case BOBRentalTransType::Purch:
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS319249", true, #JumpRefPurchOrder));
                break;

            case BOBRentalTransType::SalesQuotation:
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS316709", true, #JumpRefSalesQuote));
                break;

            case BOBRentalTransType::RentalQuotation:
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR8295", true, #JumpRefRentalQuote));
                break;

            case BOBRentalTransType::WPPWorkOrder:
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7201", true, #JumpRefWorkOrder));
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRentalTransactionsGroup</Name>
				<Source><![CDATA[
    private void populateRentalTransactionsGroup()
    {
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR1178"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS480", strFmt("%1", contextMenuData.transType)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS36398", strFmt("%1", contextMenuData.subStatus)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4420", contextMenuData.rentalTypeId, true, #JumpRefRentalTypeAssigned));

        Timezone userTimezone = DateTimeUtil::getUserPreferredTimeZone();
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS109394", strFmt("%1", DateTimeUtil::applyTimeZoneOffset(contextMenuData.fromDate, userTimezone))));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR1691", strFmt("%1", contextMenuData.certaintyFrom)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS106057", strFmt("%1", DateTimeUtil::applyTimeZoneOffset(contextMenuData.toDate, userTimezone))));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR1692", strFmt("%1", contextMenuData.certaintyTo)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS39462", strFmt("%1", contextMenuData.transActive)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS13342", contextMenuData.companyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBusinessObjectGroup</Name>
				<Source><![CDATA[
    private void populateBusinessObjectGroup()
    {
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR5863"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR5875", contextMenuData.objectId, true, #JumpRefBusinessObject));

        if(isConfigurationkeyEnabled(configurationKeyNum(BOBFleetNumber)))
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR8214", contextMenuData.fleetNumber));
        }

        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS477", contextMenuData.inventSerialId, true, #JumpRefSerialNumber));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS25653", contextMenuData.assetId, true, #JumpRefFixedAsset));
        //menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS12836", objectTable.inventTable().ItemId, true, #JumpRefItem));
        
        InventTable inventTable = InventTable::BOBFindFromRentalType(contextMenuData.rentalTypeId);
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS12836", inventTable.ItemId, true, #JumpRefItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOriginGroup</Name>
				<Source><![CDATA[
    private void populateOriginGroup()
    {
        switch (contextMenuData.transType)
        {
            case BOBRentalTransType::Rental:
                this.selectForRental();

                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR1539"));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", contextMenuData.salesId, true, #JumpRefRentalOrder));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS35826", contextMenuData.dirPersonName, true, #JumpRefResponsible));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10229", contextMenuData.orderItemId, true, #JumpRefItem));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6215", contextMenuData.rentalTypeIdRequested, true, #JumpRefRentalTypeRequested));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6214", contextMenuData.rentalTypeIdAssigned, true, #JumpRefRentalTypeAssigned));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS325541", contextMenuData.partyContactName, true, #JumpRefContactPerson));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS83745", this.getPhoneNumber(contextMenuData.contactPersonParty)));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS9679", contextMenuData.partyOperatorName, true, #JumpRefOperator));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10219", this.getPhoneNumber(contextMenuData.operatorParty)));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6160", contextMenuData.venueCode, true, #JumpRefWorkLocation));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS92116", contextMenuData.venueName));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS7924", contextMenuData.address, true));
                break;

            case BOBRentalTransType::WPPWorkOrder:
                this.selectForWorkOrder();

                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR6492"));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6461", contextMenuData.workOrderId, true, #JumpRefWorkOrder));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS38948", contextMenuData.workOrderName));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS302", contextMenuData.custVendAccountType, true, #JumpRefCustomer));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS6437", contextMenuData.inventLocationId, true, #JumpRefInventLocationId));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS325541", contextMenuData.dirPersonName, true, #JumpRefContactPerson));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS121658", contextMenuData.taskId, true, #JumpRefTaskId));

                Timezone userTimezone = DateTimeUtil::getUserPreferredTimeZone();
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS109394", strFmt("%1", DateTimeUtil::applyTimeZoneOffset(contextMenuData.fromDate, userTimezone))));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS106057", strFmt("%1", DateTimeUtil::applyTimeZoneOffset(contextMenuData.toDate, userTimezone))));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR3696", contextMenuData.executionGroupId, true, #JumpRefExecutionGroup));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS36398", strFmt("%1", contextMenuData.lineStatus)));

                if(contextMenuData.resourcePlanningRecId && contextMenuData.resourceTableRecid)
                {
                    WPPWorkOrderLineResource resourcePlanning;

                    select count(RecId) from resourcePlanning
                    where resourcePlanning.WorkOrderLineRecId == contextMenuData.workOrderLineRecid;

                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS121188", strFmt("%1 - %2", contextMenuData.resourceId, contextMenuData.resourceName), true, #JumpRefResourcePlanning));

                    if(resourcePlanning.RecId > 1)
                    {
                        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("", strFmt("@DNR8497", resourcePlanning.RecId - 1), true, #JumpRefResourcePlanning));
                    }
                }
                else
                {
                    menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS121188", "@DNR8498"));
                }
                break;

            case BOBRentalTransType::RentalQuotation:
                this.selectForQuotation();

                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR5855"));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", contextMenuData.quotationId, true, #JumpRefRentalQuote));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS35826", contextMenuData.dirPersonName, true, #JumpRefResponsible));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10230", contextMenuData.orderItemId, true, #JumpRefItem));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6215", contextMenuData.rentalTypeIdRequested, true, #JumpRefRentalTypeRequested));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS325541", contextMenuData.partyContactName, true, #JumpRefContactPerson));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS83745", this.getPhoneNumber(contextMenuData.contactPersonParty)));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS9679", contextMenuData.partyOperatorName, true, #JumpRefOperator));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10219", this.getPhoneNumber(contextMenuData.operatorParty)));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6160", contextMenuData.venueCode, true, #JumpRefWorkLocation));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS92116", contextMenuData.venueName));
                menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS7924", contextMenuData.address));
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForRental</Name>
				<Source><![CDATA[
    private void selectForRental()
    {
        InventTransOriginSalesLine inventTransOriginSalesLine;
        SalesLine salesLine;
        SalesTable salesTable;
        HcmWorker responsible;
        DirPerson dirPerson, partyContact, partyOperator;
        ContactPerson contactPerson, operator;
        RORVenueTable venueTable;
        LogisticsPostalAddress address;
        
        container conCompany = [contextMenuData.companyId];

        select firstonly crosscompany : conCompany TableId from inventTransOriginSalesLine
        where inventTransOriginSalesLine.InventTransOrigin == contextMenuData.inventTransOrigin
            join ItemId, BOBRentalTypeIdRequested, BOBRentalTypeIdAssigned from salesLine
            where salesLine.dataAreaId == inventTransOriginSalesLine.SalesLineDataAreaId
            &&    salesLine.InventTransId == inventTransOriginSalesLine.SalesLineInventTransId
                join SalesId from salesTable
                where salesTable.SalesId == salesLine.SalesId
                    outer join TableId from responsible
                    where responsible.RecId == salesTable.WorkerSalesResponsible
                        outer join Name from dirPerson
                        where dirPerson.RecId == responsible.Person
                            outer join Party from contactPerson
                            where contactPerson.ContactPersonId == salesTable.ContactPersonId
                                outer join Name from partyContact
                                where partyContact.RecId == contactPerson.Party
                                    outer join Party from operator
                                    where operator.ContactPersonId == salesTable.RORContactPersonIdOperator
                                        outer join Name from partyOperator
                                        where partyOperator.RecId == operator.Party
                                            outer join VenueCode, Name from venueTable
                                            where venueTable.VenueCode == salesTable.RORVenueCode
                                                outer join Address from address
                                                where address.RecId == venueTable.PostalAddress;

        contextMenuData.orderItemId = salesLine.ItemId;
        contextMenuData.rentalTypeIdRequested = salesLine.BOBRentalTypeIdRequested;
        contextMenuData.rentalTypeIdAssigned = salesLine.BOBRentalTypeIdAssigned;

        contextMenuData.salesId = salesTable.SalesId;

        contextMenuData.dirPersonName = dirPerson.Name;
        contextMenuData.contactPersonParty = contactPerson.Party;
        contextMenuData.partyContactName = partyContact.Name;
        contextMenuData.operatorParty = operator.Party;
        contextMenuData.partyOperatorName = partyOperator.Name;

        contextMenuData.venueCode = venueTable.VenueCode;
        contextMenuData.venueName = venueTable.Name;

        contextMenuData.address = address.Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForWorkOrder</Name>
				<Source><![CDATA[
    private void selectForWorkOrder()
    {
        WPPWorkOrderLine workOrderLine;
        WPPWorkOrderTable workOrderTable;
        ContactPerson contactPerson;
        DirPerson partyContact;
        WPPWorkOrderLineResource resourcePlanning;
        WPPResourceTable resourceTable;
        
        container conCompany = [contextMenuData.companyId];

        select firstonly crosscompany : conCompany WorkOrderId, TaskId, ExecutionGroupId, Status from workOrderLine
        where workOrderLine.RecId == contextMenuData.workOrderLineRecId
            join workOrderTable
            where workOrderLine.WorkOrderId == workOrderTable.WorkOrderId
                outer join TableId from contactPerson
                where contactPerson.ContactPersonId == workOrderTable.ContactPersonId
                    outer join Name from partyContact
                    where partyContact.RecId == contactPerson.Party
                        outer join RecId, WorkOrderLineRecId from resourcePlanning
                        where resourcePlanning.WorkOrderLineRecId == workOrderLine.RecId
                            outer join ResourceId, Name from resourceTable
                            where resourceTable.ResourceId == resourcePlanning.ResourceId;

        contextMenuData.workorderId = workOrderLine.WorkOrderId;
        contextMenuData.taskId = workOrderLine.TaskId;
        contextMenuData.executionGroupId = workOrderLine.ExecutionGroupId;
        contextMenuData.lineStatus = workOrderLine.Status;

        contextMenuData.workOrderName = workOrderTable.Name;
        contextMenuData.custVendAccountType = workOrderTable.custVendAccount();
        contextMenuData.inventLocationId = workOrderTable.InventLocationId;

        contextMenuData.partyContactName = partyContact.Name;

        contextMenuData.resourcePlanningRecId = resourcePlanning.RecId;
        contextMenuData.resourceLineRecId = resourcePlanning.WorkOrderLineRecId;

        contextMenuData.resourceId = resourceTable.ResourceId;
        contextMenuData.resourceName = resourceTable.Name;
        contextMenuData.resourceTableRecid = resourceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForQuotation</Name>
				<Source><![CDATA[
    private void selectForQuotation()
    {
        InventTransOriginSalesQuotationLine inventTransOriginSalesQuotationLine;
        SalesQuotationLine salesQuotationLine;
        SalesQuotationTable salesQuotationTable;
        HcmWorker responsible;
        DirPerson dirPerson, partyContact, partyOperator;
        ContactPerson contactPerson, operator;
        RORVenueTable venueTable;
        LogisticsPostalAddress address;
        
        container conCompany = [contextMenuData.companyId];

        select firstonly crosscompany : conCompany TableId from inventTransOriginSalesQuotationLine
        where inventTransOriginSalesQuotationLine.InventTransOrigin == contextMenuData.inventTransOrigin
            join ItemId, BOBRentalTypeIdRequested from salesQuotationLine
            where salesQuotationLine.dataAreaId == inventTransOriginSalesQuotationLine.SalesQuotationLineDataAreaId
            &&    salesQuotationLine.InventTransId == inventTransOriginSalesQuotationLine.SalesQuotationLineInventTransId
                join QuotationId from salesQuotationTable
                where salesQuotationTable.QuotationId == salesQuotationLine.QuotationId
                    outer join TableId from responsible
                    where responsible.RecId == salesQuotationTable.WorkerSalesResponsible
                        outer join Name from dirPerson
                        where dirPerson.RecId == responsible.Person
                            outer join Party from contactPerson
                            where contactPerson.ContactPersonId == salesQuotationTable.ContactPersonId
                                outer join Name from partyContact
                                where partyContact.RecId == contactPerson.Party
                                    outer join Party from operator
                                    where operator.ContactPersonId == salesQuotationTable.RORContactPersonIdOperator
                                        outer join Name from partyOperator
                                        where partyOperator.RecId == operator.Party
                                            outer join VenueCode, Name from venueTable
                                            where venueTable.VenueCode == salesQuotationTable.RORVenueCode
                                                outer join Address from address
                                                where address.RecId == venueTable.PostalAddress;

        contextMenuData.orderItemId = salesQuotationLine.ItemId;
        contextMenuData.rentalTypeIdRequested = salesQuotationLine.BOBRentalTypeIdRequested;

        contextMenuData.quotationId = salesQuotationLine.QuotationId;

        contextMenuData.dirPersonName = dirPerson.Name;
        contextMenuData.contactPersonParty = contactPerson.Party;
        contextMenuData.partyContactName = partyContact.Name;
        contextMenuData.operatorParty = operator.Party;
        contextMenuData.partyOperatorName = partyOperator.Name;

        contextMenuData.venueCode = venueTable.VenueCode;
        contextMenuData.venueName = venueTable.Name;

        contextMenuData.address = address.Address;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>