<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPDuplicateLayoutManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPDuplicateLayoutManager extends RunBase
{
    WPPLayoutManager        layoutManagerOrig;
    WPPLayoutManagerCode    newLayoutManagerCode;
    WPPNormalAbsence        normalAbsence;
    Description             description;
    NoYes                   mustCopyDataElements;
    NoYes                   mustCopyBackgroundColors;
    NoYes                   mustCopyIcons;

    DialogField             dfLayoutManagerCode,
                            dfNormalAbsence,
                            dfDescription,
                            dfCopyDataElements,
                            dfCopyBackgroundColors,
                            dfCopyIcons;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyBackgroundColors</Name>
				<Source><![CDATA[
    private void copyBackgroundColors()
    {
        WPPCellBackgroundColor newColor, origColor;
        ;
    
        insert_recordset newColor (LayoutManagerCode, TaskId, Status, Color)
        select newLayoutManagerCode, TaskId, Status, Color from origColor
        where origColor.LayoutManagerCode == layoutManagerOrig.Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDataElements</Name>
				<Source><![CDATA[
    private void copyDataElements()
    {
        WPPCellDataElement newElement, origElement;
        ;
    
        insert_recordset newElement (AddNewLine, LayoutManagerCode, Color, LineNum, RefFieldId, Category, Name)
        select AddNewLine, newLayoutManagerCode, Color, LineNum, RefFieldId, Category, Name from origElement
        where origElement.LayoutManagerCode == layoutManagerOrig.Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyIcons</Name>
				<Source><![CDATA[
    private void copyIcons()
    {
        WPPCellIcon newCellIcon, origCellIcon;
    
        insert_recordset newCellIcon (LayoutManagerCode, Criterion, ResourceId)
        select newLayoutManagerCode, Criterion, ResourceId from origCellIcon
        where origCellIcon.LayoutManagerCode == layoutManagerOrig.Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLayoutManager</Name>
				<Source><![CDATA[
    private void createLayoutManager()
    {
        WPPLayoutManager manager;
        ;
    
        manager.Code = newLayoutManagerCode;
        manager.Description = description;
        manager.NormalAbsence = normalAbsence;
        manager.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
    
        dialog = super();
        dialog.caption("@DNR7154");
        dialog.allowUpdateOnSelectCtrl(true);
    
        dialog.addGroup("@SYS68297");
    
        dialog.addFieldValue(extendedTypeStr(WPPLayoutManagerCode), layoutManagerOrig.Code).allowEdit(false);
    
        dialog.addGroup("@SYS59059");
    
        dfLayoutManagerCode = dialog.addField(extendedTypeStr(WPPLayoutManagerCodeBase));
        dfLayoutManagerCode.lookupButton(FormLookupButton::Never);
        FormBuildStringControl strCtrl = dfLayoutManagerCode.control();
        strCtrl.mandatory(true);
    
        dfDescription = dialog.addField(extendedTypeStr(Description));
        dfNormalAbsence = dialog.addFieldValue(enumStr(WPPNormalAbsence), layoutManagerOrig.NormalAbsence);
    
        dialog.addGroup("@SYS22622");
    
        dfCopyDataElements = dialog.addFieldValue(enumStr(NoYes), NoYes::Yes, strFmt("@SYS40266" + " " +  "@DNR6775"));
        dfCopyBackgroundColors = dialog.addFieldValue(enumStr(NoYes), NoYes::Yes, strFmt("@SYS40266" + " " + "@DNR6776"));
        dfCopyIcons = dialog.addFieldValue(enumStr(NoYes), NoYes::Yes, strFmt("@SYS40266" + " " +  "@DNR2917"));
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    public void dialogSelectCtrl()
    {
        super();
    
        if (layoutManagerOrig.NormalAbsence == dfNormalAbsence.value())
        {
            dfCopyBackgroundColors.allowEdit(true);
        }
        else
        {
            dfCopyBackgroundColors.value(NoYes::No);
            dfCopyBackgroundColors.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        newLayoutManagerCode        = dfLayoutManagerCode.value();
        description                 = dfDescription.value();
        normalAbsence               = dfNormalAbsence.value();
        mustCopyDataElements        = dfCopyDataElements.value();
        mustCopyBackgroundColors    = dfCopyBackgroundColors.value();
        mustCopyIcons               = dfCopyIcons.value();
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>highlightNewRecord</Name>
				<Source><![CDATA[
    private void highlightNewRecord()
    {
        FormDataSource dataSource = FormDataUtil::getFormDataSource(layoutManagerOrig);
    
        dataSource.research();
        dataSource.positionToRecordByValue(fieldNum(WPPLayoutManager, Code), newLayoutManagerCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if(this.validate())
        {
            ttsBegin;
    
            this.createLayoutManager();
    
            if(mustCopyDataElements)
            {
                this.copyDataElements();
            }
            if(mustCopyBackgroundColors)
            {
                this.copyBackgroundColors();
            }
            if(mustCopyIcons)
            {
                this.copyIcons();
            }
    
            if(FormDataUtil::isFormDataSource(layoutManagerOrig))
            {
                this.highlightNewRecord();
            }
    
            ttsCommit;
        }
        else
        {
            throw error("@SYS93289");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLayoutManagerOrig</Name>
				<Source><![CDATA[
    private void setLayoutManagerOrig(WPPLayoutManager _managerOrig)
    {
        layoutManagerOrig = _managerOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;
        ;
    
        if(!layoutManagerOrig || !layoutManagerOrig.Code)
        {
            ret = checkFailed(strFmt("@SYS25516", classStr(WPPDuplicateLayoutManager)));
        }
    
        if(!newLayoutManagerCode)
        {
            ret = checkFailed(strFmt("@DNR4370", "@DNR6767"));
        }
    
        if(WPPLayoutManager::exist(newLayoutManagerCode))
        {
            ret = checkFailed(strFmt("@SYS104705", newLayoutManagerCode));
        }
    
        if(layoutManagerOrig.NormalAbsence != normalAbsence && mustCopyBackgroundColors)
        {
            ret = checkFailed("@DNR8276", fieldId2pname(tableNum(WPPLayoutManager), fieldNum(WPPLayoutManager, NormalAbsence)));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if(_args && _args.dataset() == tableNum(WPPLayoutManager))
        {
            WPPDuplicateLayoutManager duplicator = new WPPDuplicateLayoutManager();
            duplicator.setLayoutManagerOrig(_args.record());
    
            if(duplicator.prompt())
            {
                duplicator.runOperation();
            }
        }
        else
        {
            throw error(strFmt("@SYS25516", "@SYS109270"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>