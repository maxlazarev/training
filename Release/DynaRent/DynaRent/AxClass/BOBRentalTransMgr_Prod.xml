<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransMgr_Prod</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransMgr_Prod extends BOBRentalTransManager
{
    ProdTable prodTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    protected BOBRentalTransActive active()
    {
        return BOBRentalTransActive::Inactive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyFrom</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyFrom()
    {
        switch(inventTrans.StatusReceipt)
        {
            case StatusReceipt::Ordered, StatusReceipt::Registered, StatusReceipt::None:
                return BOBDateTimeCertainty::Firm;
    
            case StatusReceipt::Received, StatusReceipt::Purchased:
                return BOBDateTimeCertainty::Fixed;
    
            default:
                throw error("@DNR6063");
        }
    
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyTo</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyTo(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return BOBDateTimeCertainty::Fixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        FromDate fromDate;
                
        switch(inventTrans.StatusReceipt)
        {
            case StatusReceipt::Registered, StatusReceipt::Received, StatusReceipt::Purchased:
                if(inventTrans.DateInvent)
                {
                    fromDate = inventTrans.DateInvent;
                }
                else if(inventTrans.DatePhysical)
                {
                    fromDate = inventTrans.DatePhysical;
                }
                else
                {
                    fromDate = inventTrans.DateFinancial;
                }
    
                fromDate = max(fromDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
    
            default:
                fromDate = prodTable.DlvDate;
                break;                
        }
        
    
        return DateTimeUtil::newDateTime(fromDate, 0, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer()
    {
        prodTable = buffer as ProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId inventLocationId()
    {
        return inventTrans.inventLocationId();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId rentalTypeId()
    {        
        return BOBRentalType::findFromItemId(prodTable.ItemId).RentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    protected BOBRentalTransType transType()
    {
        return BOBRentalTransType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    protected void updateBuffer(boolean _doUpdateBuffer)
    {
        // Do nothing to ProdTable record.
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMaintainRentalTrans</Name>
				<Source><![CDATA[
    protected boolean mustMaintainRentalTrans()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>