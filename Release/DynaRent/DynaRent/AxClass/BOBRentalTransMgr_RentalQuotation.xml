<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTransMgr_RentalQuotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOBRentalTransMgr_RentalQuotation extends BOBRentalTransManager
{
    SalesQuotationTable salesQuotationTable;
    SalesQuotationLine  salesQuotationLine;
    RORRentalDateTimes  rentalDateTimes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    protected BOBRentalTransActive active()
    {
        BOBRentalTransActive ret;

        switch(salesQuotationTable.QuotationStatus)
        {
            case SalesQuotationStatus::Cancelled,
                 SalesQuotationStatus::Confirmed,
                 SalesQuotationStatus::Lost:

                if (SalesQuotationStatus::Confirmed 
                && salesQuotationTable.QuotationType == QuotationType::RORProjRental
                && salesQuotationLine.Transferred2ItemReq == NoYes::No)
                {
                    // Rental trans will be closed after using "Transfer to project" function that creates rental order.
                    ret = BOBRentalTransActive::Active;
                }
                else
                {
                    ret = BOBRentalTransActive::Closed;
                }
                break;

            default:
                ret = BOBRentalTransActive::Active;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDisabledSubStatus</Name>
				<Source><![CDATA[
    protected boolean allowDisabledSubStatus()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyFrom</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyFrom()
    {
        return BOBDateTimeCertainty::Tentative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certaintyTo</Name>
				<Source><![CDATA[
    protected BOBDateTimeCertainty certaintyTo(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        return (DateTimeUtil::date(rentalDateTimes.OffRentDateTime) ?
            BOBDateTimeCertainty::Firm :
            BOBDateTimeCertainty::Tentative);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateTime</Name>
				<Source><![CDATA[
    protected FromDateTime fromDateTime()
    {
        return rentalDateTimes.OnRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer()
    {
        salesQuotationLine  = buffer as SalesQuotationLine;
        salesQuotationTable = salesQuotationLine.salesQuotationTable();
        rentalDateTimes     = (salesQuotationLine.RecId ?
                               salesQuotationLine.RORRentalDateTimesHost::rentalDateTimes() :
                               salesQuotationTable.RORRentalDateTimesHost::rentalDateTimes());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId inventLocationId()
    {
        return inventTrans.inventLocationId();
        // return salesQuotationLine.inventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalTypeId</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId rentalTypeId()
    {
        return (salesQuotationLine.BOBRentalTypeIdAssigned ?
                salesQuotationLine.BOBRentalTypeIdAssigned :
                salesQuotationLine.BOBRentalTypeIdRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    protected ToDateTime toDateTime(BOBRentalSubStatus _newSubStatus = subStatus)
    {
        TransDate offRentDate = DateTimeUtil::date(rentalDateTimes.OffRentDateTime);
        return (offRentDate ? rentalDateTimes.OffRentDateTime : rentalDateTimes.ExpectedOffRentDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    protected BOBRentalTransType transType()
    {
        return (salesQuotationLine.RORTradeType == RORTradeType::SalesPurch ?
                BOBRentalTransType::SalesQuotation :
                BOBRentalTransType::RentalQuotation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    protected void updateBuffer(boolean _doUpdateBuffer)
    {
        BOBRentalTrans rentalTrans;
        ;
    
        if(salesQuotationLine.RecId)
        {
            select firstonly SubStatus, RecId from rentalTrans
            order by SubStatus asc
            where rentalTrans.InventTransOrigin == inventTrans.InventTransOrigin
            &&    rentalTrans.TransType         != BOBRentalTransType::InventCounting;
    
            salesQuotationLine.selectForUpdate(true);
            salesQuotationLine.BOBRentalSubStatus = (rentalTrans.RecId ? rentalTrans.SubStatus : subStatus);
    
            if(_doUpdateBuffer)
            {
                SalesQuotationLine.doUpdate();
            }
        }
        else // record is being inserted
        {
            salesQuotationLine.BOBRentalSubStatus = subStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans</Name>
				<Source><![CDATA[
    public void deleteInventTrans()
    {
        if(this.mustMaintainRentalTrans())
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>