<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCrossCompanySyncData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRCrossCompanySyncData extends RunBaseBatch
{
    DialogField dlgSyncInventSite;
    DialogField dlgSyncInventLocation;
    DialogField dlgSyncProjGroup;

    boolean syncInventSite;
    boolean syncInventLocation;
    boolean syncProjGroup;

    Set     allDataAreaIdSet;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        syncInventSite,
        syncInventLocation,
        syncProjGroup
    #endMacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DNRCrossCompanySyncData obj = new DNRCrossCompanySyncData();
        
        if(obj.prompt())
        {
            obj.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase ret;
    
        ret = super();

        dlgSyncInventSite = ret.addFieldValue(extendedTypeStr(NoYesId), syncInventSite, '@SYS122446');
        dlgSyncInventLocation = ret.addFieldValue(extendedTypeStr(NoYesId), syncInventLocation, '@SYS6437');
        dlgSyncProjGroup = ret.addFieldValue(extendedTypeStr(NoYesId), syncProjGroup, '@SYS3895');
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();

        syncInventSite = dlgSyncInventSite.value();
        syncInventLocation = dlgSyncInventLocation.value();
        syncProjGroup = dlgSyncProjGroup.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;

        this.initDataAreaSet();
        if(syncInventSite)
        {
            this.syncInventSiteData();
        }

        if(syncInventLocation)
        {
            this.syncInventLocationData();
        }

        if(syncProjGroup)
        {
            this.syncProjGroupData();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaMap2Sync</Name>
				<Source><![CDATA[
    private Map getDataAreaMap2Sync(Map _map)
    {
        String20 key;
        Set existingDataAreaSet;
        Set dataAreaId2Sync;
        Map map2Sync = new Map(Types::String, Types::Class);
        MapEnumerator enumerator = _map.getEnumerator();

        while(enumerator.moveNext())
        {
            key = enumerator.currentKey();
            existingDataAreaSet = enumerator.currentValue();
            dataAreaId2Sync = Set::difference(allDataAreaIdSet, existingDataAreaSet);
            map2Sync.insert(key, dataAreaId2Sync);
        }

        return map2Sync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataAreaSet</Name>
				<Source><![CDATA[
    protected void initDataAreaSet()
    {
        allDataAreaIdSet = new Set(Types::String);
            
        DataArea    dataArea;

        while select id from dataArea
        where dataArea.isVirtual == false
        {
            allDataAreaIdSet.add(dataArea.id);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSiteMap2Sync</Name>
				<Source><![CDATA[
    private Map getInventSiteMap2Sync()
    {
        InventSite  inventSite;
        Map         siteMap = new Map(Types::String, Types::Class);
        Set         dataAreaSet = new Set(Types::String);
        
        while select crosscompany inventSite
        {
            if(siteMap.exists(inventSite.SiteId))
            {
                dataAreaSet = siteMap.lookup(inventSite.SiteId);
                dataAreaSet.add(inventSite.DataAreaId);
                siteMap.insert(inventSite.SiteId, dataAreaSet);
            }
            else
            {
                dataAreaSet = new Set(Types::String);
                dataAreaSet.add(inventSite.DataAreaId);
                siteMap.insert(inventSite.SiteId, dataAreaSet);
            }
        }

        return this.getDataAreaMap2Sync(siteMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLocationMap2Sync</Name>
				<Source><![CDATA[
    private Map getInventLocationMap2Sync()
    {
        InventLocation  inventLocation;
        Map             locationMap = new Map(Types::String, Types::Class);
        Set             dataAreaSet = new Set(Types::String);
        
        while select crosscompany inventLocation
        {
            if(locationMap.exists(inventLocation.InventLocationId))
            {
                dataAreaSet = locationMap.lookup(inventLocation.InventLocationId);
                dataAreaSet.add(inventLocation.DataAreaId);
                locationMap.insert(inventLocation.InventLocationId, dataAreaSet);
            }
            else
            {
                dataAreaSet = new Set(Types::String);
                dataAreaSet.add(inventLocation.DataAreaId);
                locationMap.insert(inventLocation.InventLocationId, dataAreaSet);
            }
        }

        return this.getDataAreaMap2Sync(locationMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjGroupMap2Sync</Name>
				<Source><![CDATA[
    private Map getProjGroupMap2Sync()
    {
        ProjGroup   projGroup;
        Map         projGroupMap = new Map(Types::String, Types::Class);
        Set         dataAreaSet = new Set(Types::String);
        
        while select crosscompany projGroup
        {
            if(projGroupMap.exists(projGroup.ProjGroupId))
            {
                dataAreaSet = projGroupMap.lookup(projGroup.ProjGroupId);
                dataAreaSet.add(projGroup.DataAreaId);
                projGroupMap.insert(projGroup.ProjGroupId, dataAreaSet);
            }
            else
            {
                dataAreaSet = new Set(Types::String);
                dataAreaSet.add(projGroup.DataAreaId);
                projGroupMap.insert(projGroup.ProjGroupId, dataAreaSet);
            }
        }

        return this.getDataAreaMap2Sync(projGroupMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncProjGroupData</Name>
				<Source><![CDATA[
    protected void syncProjGroupData()
    {
        ProjGroupId     projGroupId;
        ProjGroup       projGroup;
        Set             dataAreaIds2Sync;
        Map             projGroupMap2Sync = this.getProjGroupMap2Sync();
        MapEnumerator   enumerator = projGroupMap2Sync.getEnumerator();

  
        while(enumerator.moveNext())
        {
            projGroupId = enumerator.currentKey();
            dataAreaIds2Sync = enumerator.currentValue();

            select firstonly crosscompany projGroup
            where projGroup.ProjGroupId == projGroupId;

            changecompany(projGroup.DataAreaId)
            {
                DNRCrossCompanySynchronizer::syncExisting(projGroup, dataAreaIds2Sync);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncInventSiteData</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method")]
    protected void syncInventSiteData()
    {
        InventSiteId    siteId ; 
        InventSite      inventSite;
        Set             dataAreaIds2Sync;
        Map             siteMap2Sync = this.getInventSiteMap2Sync(); 
        MapEnumerator   enumerator = siteMap2Sync.getEnumerator();

  
        while(enumerator.moveNext())
        {
            siteId = enumerator.currentKey();
            dataAreaIds2Sync = enumerator.currentValue();


            select firstonly crosscompany inventSite
            where inventSite.SiteId == siteId;

            changecompany(inventSite.DataAreaId)
            {
                InventSiteLogisticsLocation     logisticsLocation;
                InventSiteLogisticsLocationRole logisticsLocationRole; 
  
                DNRCrossCompanySynchronizer::syncExisting(inventSite, dataAreaIds2Sync);

                while select logisticsLocation
                where logisticsLocation.Site == inventSite.RecId
                {
                    DNRCrossCompanySynchronizer::syncExisting(logisticsLocation, dataAreaIds2Sync);

                    while select logisticsLocationRole
                    where logisticsLocationRole.SiteLogisticsLocation == logisticsLocation.RecId
                    {
                        DNRCrossCompanySynchronizer::syncExisting(logisticsLocationRole, dataAreaIds2Sync);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncInventLocationData</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method")]
    protected void syncInventLocationData()
    {
        InventLocationId    locationId;
        InventLocation      inventLocation;
        Set                 dataAreaIds2Sync;
        Map                 locationMap2Sync = this.getInventLocationMap2Sync();
        MapEnumerator       enumerator = locationMap2Sync.getEnumerator();

  
        while(enumerator.moveNext())
        {
            locationId = enumerator.currentKey();
            dataAreaIds2Sync = enumerator.currentValue();

            select firstonly crosscompany inventLocation
            where inventLocation.InventLocationId == locationId;

            changecompany(inventLocation.DataAreaId)
            {
                InventLocationLogisticsLocation     logisticsLocation;
                InventLocationLogisticsLocationRole logisticsLocationRole;
  
                DNRCrossCompanySynchronizer::syncExisting(inventLocation, dataAreaIds2Sync);

                while select logisticsLocation
                where logisticsLocation.InventLocation == inventLocation.RecId
                {
                    DNRCrossCompanySynchronizer::syncExisting(logisticsLocation, dataAreaIds2Sync);

                    while select logisticsLocationRole
                    where logisticsLocationRole.LocationLogisticsLocation == logisticsLocation.RecId
                    {
                        DNRCrossCompanySynchronizer::syncExisting(logisticsLocationRole, dataAreaIds2Sync);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@DNR:SyncCrossCompanyData";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>