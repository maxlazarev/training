<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesFormletterProviderClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormletterProvider))]
public final class DNRSalesFormletterProviderClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    public boolean checkJournal()
    {
        boolean ret = next checkJournal();

        if(!CustConfirmJour::exist(salesTable.SalesId))
        {
            ret = this.FINCheckCreditLimit(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    protected boolean checkLines()
    {
        SalesParmLine       salesParmLineCheck;
        SalesLine           salesLineCheck;
        RecordSortedList    recordListSalesParmLine;

        boolean ok = next checkLines();

        if (ok && !salesTable.ProjId)
        {
            recordListSalesParmLine = salesTotals.recordSortedListLine();
            salesParmLineCheck.clear();
            recordListSalesParmLine.first(salesParmLineCheck);

            while (salesParmLineCheck)
            {
                salesLineCheck = salesParmLineCheck.salesLine();

                if (ok && documentStatus == DocumentStatus::PackingSlip && !this.BOBCheckObjectAvailability(salesLineCheck))
                {
                    ok = false;
                }
    
                if (ok && (documentStatus == DocumentStatus::PackingSlip || documentStatus == DocumentStatus::Invoice))
                {
                    SalesParmUpdate salesParmUpdate = this.parmParmUpdate() as SalesParmUpdate;
    
                    if (!salesParmUpdate.Proforma && !salesLineCheck.RORCheckFormLetterUpdate(documentStatus))
                    {
                        ok = false;
                    }
                }

                if (!recordListSalesParmLine.next(salesParmLineCheck))
                {
                    break;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInitializeSalesFormletterParmData</Name>
				<Source><![CDATA[
    protected SalesFormletterParmData constructAndInitializeSalesFormletterParmData(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        using(DNRSalesFormLetterParmDataNewDataDisposableContext context = new DNRSalesFormLetterParmDataNewDataDisposableContext())
        {
            if (this.parmParmTable().TableId == tableNum(SalesParmTable))
            {
                SalesParmTable salesParmTable = this.parmParmTable() as SalesParmTable;
                context.DNRParmRentalSubStatus(salesParmTable.BOBRentalSubStatus);
            }
            SalesFormletterParmData ret = next constructAndInitializeSalesFormletterParmData(_salesLine, _salesParmLine);
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMaxExceededLimit</Name>
				<Source><![CDATA[
    protected boolean creditMaxExceededLimit()
    {
        boolean ret = next creditMaxExceededLimit();

        ret = (ret && documentStatus != DocumentStatus::RORReturnNote);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMaxOk</Name>
				<Source><![CDATA[
    protected boolean creditMaxOk(SalesTotals  _salesTotals)
    {
        boolean ret = next creditMaxOk(_salesTotals);

        if (CustParameters::find().FINCustCreditCheckType == FINCustCreditCheckType::Balance)
        {
            ret = salesTable.SalesType == SalesType::ItemReq
                  || FINCheckCreditLimit::creditMaxOk(ret, salesTable, this.parmParmTable());
        }
        else if (CustParameters::find().FINCustCreditCheckType != FINCustCreditCheckType::None)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailSummary</Name>
				<Source><![CDATA[
    public DetailSummary detailSummary()
    {
        DetailSummary ret = next detailSummary();

        if (RORParameters::find().FINDistributionMethod != FINDistributionMethod::None)
        {
            ret = DetailSummary::Detail;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBCheckObjectAvailability</Name>
				<Source><![CDATA[
    // extension methods

    private boolean BOBCheckObjectAvailability(SalesLine _salesLineCheck)
    {
        boolean         ret = true;
        BOBObjectView   objectView;
        InventDim       inventDim;
    
        // only check serialized business objects
        select firstOnly ObjectId, IsAvailable from objectView
            exists join inventDim
            where inventDim.inventSerialId
            &&    inventDim.inventSerialId == objectView.InventSerialId
            &&    inventDim.inventDimId    == _salesLineCheck.InventDimId;
    
        if(objectView.ObjectId && !objectView.IsAvailable)
        {
            ret = checkFailed(strFmt("@DNR7362", objectView.ObjectId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINCheckCreditLimit</Name>
				<Source><![CDATA[
    private boolean FINCheckCreditLimit(boolean _ret)
    {
        boolean         ret = _ret;
        CustParameters  custParameters = CustParameters::find();
    
        if(ret
        && this.parmDocumentStatus() == DocumentStatus::Confirmation
        && custParameters.FINCustCreditCheckType != FINCustCreditCheckType::None)
        {
            ret = FINCheckCreditLimit::checkCreditLimit_Sales(salesTable, false, true);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>