<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSortingFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRSortingFormHelper
{
    TableId tableId;
    FieldId fieldId;
    SysDictTable dictTable;
    FormButtonControl   buttonUp;
    FormButtonControl   buttonDown;
    FormDataSource      primaryDS;
    FormDataSource      parentDS;




}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DNRSortingFormHelper construct(FormDataSource      _primaryDS,
                                                 FieldId             _counterFieldId,
                                                 FormButtonControl   _buttonUp,
                                                 FormButtonControl   _buttonDown)
    {
        DNRSortingFormHelper obj;

        obj = new DNRSortingFormHelper(_primaryDS, _counterFieldId, _buttonUp, _buttonDown);

        return obj;

    }

]]></Source>
			</Method>
			<Method>
				<Name>enableMoveButtons</Name>
				<Source><![CDATA[
    public void enableMoveButtons()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsParent;
        Common                  c;
        container               con;
        Common                  parentRecord;
        Common                  activeRecord;
        ;
    
        query = new Query();
        qbds = query.addDataSource(tableId);
        
        con = SysQuery::packRangeAndSortorder(primaryDS.query());
        SysQuery::unpackRangeAndSortorder(query, con);
        qbds.addSelectionField(fieldId, SelectionField::Min);

        if(parentDS)
        {
            parentRecord = parentDS.cursor();
            qbdsParent = qbds.addDataSource(parentDS.table());
            qbdsParent.relations(true);
            qbdsParent.joinMode(JoinMode::ExistsJoin);
            qbdsParent.addRange(fieldName2id(parentDS.table(), fieldStr(Common, RecId))).value(SysQuery::value(parentRecord.RecId));
        }

        activeRecord = primaryDS.cursor();
    
        queryRun = new QueryRun(query);
        queryRun.next();
        c = queryRun.get(tableId);
        buttonUp.enabled(activeRecord.(fieldId) != c.(fieldId) && activeRecord.RecId);
    
        query = new Query();
        qbds = query.addDataSource(tableId);
        con = SysQuery::packRangeAndSortorder(primaryDS.query());
        SysQuery::unpackRangeAndSortorder(query, con);
        qbds.addSelectionField(fieldId, SelectionField::Max);

        if(parentDS)
        {
            parentRecord = parentDS.cursor();
            qbdsParent = qbds.addDataSource(parentDS.table());
            qbdsParent.relations(true);
            qbdsParent.joinMode(JoinMode::ExistsJoin);
            qbdsParent.addRange(fieldName2id(parentDS.table(), fieldStr(Common, RecId))).value(SysQuery::value(parentRecord.RecId));
        }
    
        queryRun = new QueryRun(query);
        queryRun.next();
        c = queryRun.get(tableId);
        buttonDown.enabled(activeRecord.(fieldId) != c.(fieldId) && activeRecord.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRecord</Name>
				<Source><![CDATA[
    private Common makeRecord()
    {
        return dictTable.makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveLineDown</Name>
				<Source><![CDATA[
    public void moveLineDown(LineNum _tmpLineNum = 0)
    {
        LineNum         currentLineNum, nextLineNum;
        Common          currentRecord = this.makeRecord(),
                        nextRecord = this.makeRecord();
        ;
    
        select forupdate firstonly currentRecord
        where currentRecord.RecId == primaryDS.cursor().RecId;
    
        currentLineNum = currentRecord.(fieldId);
    
        primaryDS.next();

        select forupdate firstonly nextRecord
        where nextRecord.RecId == primaryDS.cursor().RecId;
    
        if (nextRecord)
        {
            ttsbegin;

            nextLineNum = nextRecord.(fieldId);
    
            currentRecord.(fieldId) = _tmpLineNum ? _tmpLineNum : nextLineNum;
            currentRecord.update();
    
            nextRecord.(fieldId) = currentLineNum;
            nextRecord.update();
    
            currentRecord.(fieldId) = nextLineNum;
            currentRecord.update();
    
            ttscommit;
        }
    
        primaryDS.research();
        primaryDS.positionToRecord(currentRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveLineUp</Name>
				<Source><![CDATA[
    public void moveLineUp(LineNum _tmpLineNum = 0)
    {
        LineNum         currentLineNum, previousLineNum;
        Common          currentRecord = this.makeRecord(),
                        previousRecord = this.makeRecord();
        ;
    
        select forupdate firstonly currentRecord
        where currentRecord.RecId == primaryDS.cursor().RecId;
    
        currentLineNum = currentRecord.(fieldId);
    
        primaryDS.prev();
    
        select forupdate firstonly previousRecord
        where previousRecord.RecId == primaryDS.cursor().RecId;
    
        if (previousRecord)
        {
            ttsbegin;

            previousLineNum = previousRecord.(fieldId);
    
            currentRecord.(fieldId) = _tmpLineNum ? _tmpLineNum : previousLineNum;
            currentRecord.update();
    
            previousRecord.(fieldId) = currentLineNum;
            previousRecord.update();
    
            currentRecord.(fieldId) = previousLineNum;
            currentRecord.update();
    
            ttscommit;
        }
    
        primaryDS.research();
        primaryDS.positionToRecord(currentRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormDataSource      _primaryDS,
                    FieldId             _counterFieldId,
                    FormButtonControl   _buttonUp,
                    FormButtonControl   _buttonDown)
    {
        primaryDS   = _primaryDS;
        tableId     = primaryDS.table();
        fieldId     = _counterFieldId;
        buttonUP    = _buttonUp;
        buttonDown  = _buttonDown;
        
        if(primaryDS.joinSource())
        {
            parentDS = primaryDS.joinSourceDataSource();
        }
    
        if(new SysDictField(tableId, fieldId).baseType() != Types::Real
        && new SysDictField(tableId, fieldId).baseType() != Types::Integer)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        dictTable = new SysDictTable(tableId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>