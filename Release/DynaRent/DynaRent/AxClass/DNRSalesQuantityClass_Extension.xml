<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuantityClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuantity))]
public final class DNRSalesQuantityClass_Extension
{
    private DNRSalesQuantityStrategy strategy;

    private TransDateTime       transDateTime;
    private BOBRentalSubStatus  rentalSubStatus;

    // extension methods


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RORgetSubStatusFromToQty</Name>
				<Source><![CDATA[
    public Qty RORgetSubStatusFromToQty(SalesLine    _salesLine,
                                        InventQty    _requestedQty,
                                        UnitIdBase   _unitId,
                                        // parameter use only in RORReturnNote for now
                                        TransDateTime _checkTransDateTime = DateTimeUtil::minValue())
    {
        BOBRentalSubStatus      subStatusFrom, subStatusTo;
        BOBRentalTrans          rentalTrans;
        InventTransOrigin       inventTransOrigin;
        Qty                     qtyReturn;
    
        if (_salesLine.RORTradeType != RORTradeType::SalesPurch)
        {
            qtyReturn = _requestedQty;
    
            [subStatusFrom, subStatusTo] = this.RORFindSubStatusFromTo(_salesLine);
            if (subStatusTo > BOBRentalSubStatus::None)
            {
                select sum(Qty) from rentalTrans
                where rentalTrans.SubStatus     >= subStatusFrom
                &&    rentalTrans.SubStatus     <= subStatusTo
                    exists join inventTransOrigin
                        where inventTransOrigin.RecId         == rentalTrans.InventTransOrigin
                        &&    inventTransOrigin.InventTransId == _salesLine.InventTransId;
    
                qtyReturn = -1 * UnitOfMeasureConverter::convert(rentalTrans.Qty,
                                                                 UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.inventTable().inventUnitId()),
                                                                 UnitOfMeasure::unitOfMeasureIdBySymbol(_unitId),
                                                                 NoYes::Yes,
                                                                 InventTable::itemProduct(_salesLine.ItemId));
            }
        }
    
        return qtyReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmRentalSubStatus</Name>
				<Source><![CDATA[
    public BOBRentalSubStatus RORparmRentalSubStatus(BOBRentalSubStatus _rentalSubStatus = rentalSubStatus)
    {
        rentalSubStatus = _rentalSubStatus;
        return rentalSubStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORparmTransDateTime</Name>
				<Source><![CDATA[
    public TransDateTime RORparmTransDateTime(TransDateTime _transDateTime = transDateTime)
    {
        transDateTime = _transDateTime;
        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORfindSubStatusFromTo</Name>
				<Source><![CDATA[
    public container RORfindSubStatusFromTo(SalesPurchLine _salesPurchLine)
    {
        return this.parmSalesQuantityStrategy().RORfindSubStatusFromTo(_salesPurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuantityStrategy</Name>
				<Source><![CDATA[
    public DNRSalesQuantityStrategy parmSalesQuantityStrategy()
    {
        if(!strategy)
        {
            strategy = DNRSalesQuantityStrategy::construct(this);
        }
        return strategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>