<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRProjTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProjTable))]
public final class DNRProjTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        DimensionDefault dimensionDefault;

        if (_fieldId == fieldNum(ProjTable, CustAccount) || _fieldId == fieldNum(ProjTable, ProjInvoiceProjId))
        {
            dimensionDefault = this.DefaultDimension;
        }

        next modifiedField(_fieldId);

        if (dimensionDefault && (_fieldId == fieldNum(ProjTable, CustAccount) || _fieldId == fieldNum(ProjTable, ProjInvoiceProjId)))
        {
            this.DefaultDimension = dimensionDefault;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    // Below Chain-of-Command wrapper results in the following compiler warning: 'The statement is unreachable'.
    // The compiler warning is valid: the 'next' statement is never reached, because an error is thrown before the
    // 'next' statement. 
    // We do not want to allow the primary key of this table to be renamed. One solution is to move the 'throw error' 
    // statement to a pre-event handler. There are two reasons why we do not want to do this: 1) this results in a
    // pre-event handler that only contains a 'throw error' statement, and 2) we favour the use of Chain-of-Command
    // over the use of pre-/post-event handlers. 
    public void renamePrimaryKey(boolean _psaIncludeSubProjects)
    {
        throw error(strFmt("@DNR11000", "@SYS36368"));

        next renamePrimaryKey(_psaIncludeSubProjects);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trxExists</Name>
				<Source><![CDATA[
    public boolean trxExists()
    {
        boolean ret     = next trxExists();
        ProjId  projId  = this.ProjId;

        if(this.Header == NoYes::No)
        {
            ret = this.WPPCheckPostedTrxExists(projId);
    
            if(this.DNRTrxExists == NoYes::No && !ret)
            {
                // *** Repeated code
                if(((select firstonly projJournalTrans              where projJournalTrans.ProjId        == projId).RecId == 0) &&
                   ((select firstonly ledgerJournalTrans_project    where ledgerJournalTrans_project.ProjId      == projId).RecId == 0) &&
                   ((select firstonly inventJournalTrans            where inventJournalTrans.ProjId      == projId).RecId == 0) &&
                   ((select firstonly projTransPosting              where projTransPosting.ProjId        == projId).RecId == 0) &&
                   ((select firstonly salesLine                     where salesLine.ProjId               == projId).RecId == 0) &&
                   ((select firstonly purchLine                     where purchLine.ProjId               == projId
                                                                        && !purchLine.IsDeleted                    ).RecId == 0) &&
                   ((select firstonly smaAgreementTable             where smaAgreementTable.ProjId       == projId).RecId == 0) &&
                   ((select firstonly smaSubscriptionTable          where smaSubscriptionTable.ProjId    == projId).RecId == 0) &&
                   ((select firstonly projRevenueTrans              where projRevenueTrans.ProjId        == projId).RecId == 0) &&
                   ((select firstonly projOnAccTrans                where projOnAccTrans.ProjID          == projId).RecId == 0) &&
                   ((select firstonly smaServiceOrderLine           where smaServiceOrderLine.ProjId     == projId).RecId == 0) &&
                   ((select firstonly purchReqTable                 where purchReqTable.ProjId           == projId).RecId == 0) &&
                   ((select firstonly purchRFQCaseTable             where purchRFQCaseTable.ProjId       == projId).RecId == 0) &&
                   (!this.AssetId))
                {
                    ret = false;
                }
            }
        }

        this.DNRTrxExists = NoYes::No;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FINRentalProjectInvoicing</Name>
				<Source><![CDATA[
    // extension methods

    [SysObsolete('Obsolete', false)]
    public boolean FINRentalProjectInvoicing()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateRentalDatesForHeader</Name>
				<Source><![CDATA[
    public void RORCreateRentalDatesForHeader(SalesTable _salesTable, SalesQuotationTable _salesQuotationTable)
    {
        RORRentalDateTimes          rentalDateTimes;
        RORRentalDateSynchroniser   rentalDateSynchroniser;
    
        // Synchronise sales rental dates from sales quotation header
        if (_salesTable.SalesType == SalesType::RORRental)
        {
            rentalDateTimes = _salesTable.RORRentalDateTimesHost::rentalDateTimes();
    
            rentalDateSynchroniser = new RORRentalDateSynchroniser();
    
            rentalDateSynchroniser.copyRentalDateTimes(_salesQuotationTable.RORRentalDateTimesHost::rentalDateTimes(), rentalDateTimes, _salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateSalesTable_RentalFromSQ</Name>
				<Source><![CDATA[
    public server SalesTable RORCreateSalesTable_RentalFromSQ(SalesQuotationLine _salesQuotationLine)
    {
        SalesTable          salesTable = null;
        SalesQuotationTable salesQuotationTable = _salesQuotationLine.salesQuotationTable();
    
        ttsbegin;
    
        salesTable.clear();
    
        salesTable.ProjId       = this.ProjId;
        salesTable.initValue(SalesType::RORRental);
    
        salesTable.initFromSalesQuotationTable(salesQuotationTable);
        salesTable.SalesId      = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
    
        salesTable.CurrencyCode = _salesQuotationLine.CurrencyCode;
        salesTable.FixedExchRate = ProjInvoiceCurrency::find(this.projInvoice().ProjInvoiceProjId,salesTable.CurrencyCode).ExchRate;
    
        if (!salesTable.validateWrite())
        {
            throw Exception::Error;
        }
    
        //To find the related quote header and line records from the salesLine/salesTable records
        salesTable.DNRSourceQuotationId = _salesQuotationLine.QuotationId;

        salesTable.insert();

        this.RORCreateRentalDatesForHeader(salesTable, salesQuotationTable);
        DNRAdditionalNoteTable::copyNotes(salesQuotationTable, salesTable);
        WPPTaskRequirements::copyTaskRequirements(salesQuotationTable, salesTable);
    
        ttscommit;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCheckPostedTrxExists</Name>
				<Source><![CDATA[
    private boolean WPPCheckPostedTrxExists(ProjId _projId)
    {
        boolean                     ret;
        ProjJournalTrans            projJournalTrans;
        InventJournalTrans          inventJournalTrans;
        LedgerJournalTrans_project  ledgerJournalTrans_project;
        LedgerJournalTrans          ledgerJournalTrans;
        ProjJournalTable            projJournalTable;
        LedgerJournalTable          ledgerJournalTable;
        InventJournalTable          inventJournalTable;
        SalesLine                   salesLine;
    
        // Check for posted transactions
        select firstonly RecId from projJournalTrans
        where projJournalTrans.ProjId == _projId
            exists join projJournalTable
            where projJournalTable.JournalId == projJournalTrans.JournalId
            &&    projJournalTable.Posted;
    
        ret = projJournalTrans.RecId;
    
        if (!ret)
        {
            select firstonly RecId from ledgerJournalTrans_project
            where ledgerJournalTrans_project.ProjId == _projId
                exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTrans_project.RefRecId
                    join TableId from ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    &&    ledgerJournalTable.Posted;
    
            ret = ledgerJournalTrans_project.RecId;
        }
    
        if (!ret)
        {
            select firstonly RecId from inventJournalTrans
            where inventJournalTrans.ProjId == _projId
                exists join inventJournalTable
                where inventJournalTable.JournalId == inventJournalTrans.JournalId
                &&    inventJournalTable.Posted;
    
            ret = inventJournalTrans.RecId;
        }
    
        if (!ret)
        {
            select firstonly RecId from salesLine
            where salesLine.ProjId == _projId
            && (salesLine.SalesStatus ==  SalesStatus::Delivered || salesLine.SalesStatus == SalesStatus::Invoiced)
            && salesLine.SalesType  == SalesType::ItemReq;
    
            ret = salesLine.RecId;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPCopyAddressFromWorkOrder</Name>
				<Source><![CDATA[
    public void WPPCopyAddressFromWorkOrder(WPPWorkOrderTable _workOrderTable)
    {
        this.DeliveryLocation = _workOrderTable.deliveryAddress().Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLookupWithCustAccount</Name>
				<Source><![CDATA[
    public static void RORLookupWithCustAccount(FormStringControl _ctrl, CustAccount _custAccount)
    {
        SysTableLookup          lookup;
        Query                   query;
        QueryBuildDataSource    qbdsProjTable;
        QueryBuildDataSource    qbdsProjFundingSource;
    
        query = new Query();
    
        qbdsProjTable = query.addDataSource(tableNum(ProjTable));
        qbdsProjFundingSource = qbdsProjTable.addDataSource(tableNum(ProjFundingSource));
        qbdsProjFundingSource.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));
        qbdsProjFundingSource.addRange(fieldNum(ProjFundingSource, CustAccount)).value(SysQuery::value(_custAccount));
    
        lookup = SysTableLookup::newParameters(tableNum(ProjTable), _ctrl);
        lookup.addLookupfield(fieldNum(ProjTable, ProjId), true);
        lookup.addLookupfield(fieldNum(ProjTable, Name));
        lookup.addLookupfield(fieldNum(ProjTable, Type));
        lookup.addLookupfield(fieldNum(ProjTable, Status));
        lookup.parmQuery(query);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>