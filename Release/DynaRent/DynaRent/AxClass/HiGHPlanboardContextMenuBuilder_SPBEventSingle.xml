<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HiGHPlanboardContextMenuBuilder_SPBEventSingle</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HiGHPlanboardContextMenuBuilder_SPBEventSingle extends HiGHPlanboardContextMenuBuilder
{
    RefTableId recordTableId;
    RefRecId recordReference;
    boolean isPlannedtask;
    HiGHPlanboardContextMenuData contextMenuData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RefTableId _entryTableId, RefRecId _entryRecId)
    {
        switch(_entryTableId)
        {
            case tableNum(WPPWorkOrderLine):
                recordReference = _entryRecId;
                break;

            case tableNum(WPPWorkOrderLineResource):
                isPlannedTask = true;
                recordReference = WPPWorkOrderLineResource::findRecId(_entryRecId).WorkOrderLineRecId;
                break;

            case tableNum(BOBRentalTrans):
                isPlannedTask = true;
                recordReference = _entryRecId;
                break;

            default:
                break;
        }

        recordTableId = _entryTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    // main extension point for customizing the contents of the context menu.
    public void populate()
    {
        contextMenuData = (recordTableId == tableNum(BOBRentalTrans) ? this.selectForRentalTrans() : this.selectForResourcePlanning());

        this.populateFunctionsGroup();

        if(contextMenuData.workOrderTable)
        {
            this.populateStatusUpdateGroup();
            this.populateWorkOrderGroup();
        }

        this.populateCustVendGroup();
        this.populateBusinessObjectGroup();
        this.populateSalesPurchGroup();
        this.populateWarningsGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFunctionsGroup</Name>
				<Source><![CDATA[
    private void populateFunctionsGroup()
    {
        if(contextMenuData.workOrderTable)
        {
            WPPParameters parameters = WPPParameters::find();
            boolean isInternalTask = (contextMenuData.workOrderLine.WorkOrderId == parameters.InternalWorkOrderId);

            boolean allowUnassignTask = (isPlannedTask && contextMenuData.workOrderLine.Status == WPPWorkOrderLineStatus::Planned) || isInternalTask;

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS81103"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR815", allowUnassignTask, #UnassignTask));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7301", true, #DuplicateWorkOrderLine));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7283", true, #PrintWorkOrderConfirmation));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR7284", true, #PrintWorkOrderLineConfirmation));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR6791", true, #JumpRefWorkOrderLineRecId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR4044", true, #JumpRefCMRReport));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR4132", true, #AssignTask));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR8233", true, #JumpRefTaskRequirements));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR8279", true, #FilterOnCapabilities));
        }
        else
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS81103"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1178", true, #JumpRefRentalTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStatusUpdateGroup</Name>
				<Source><![CDATA[
    private void populateStatusUpdateGroup()
    {
        WPPParameters parameters = WPPParameters::find();
        boolean isInternalTask = (contextMenuData.workOrderLine.WorkOrderId == parameters.InternalWorkOrderId);

        if(isPlannedTask && !isInternalTask)
        {
            Map allowedStatusUpdateMap = WPPWorkOrderStatusSetup::getPossibleWorkOrderStatus(contextMenuData.workOrderStatusGroupId, contextMenuData.workOrderLine.Status);
            boolean allowStatusUpdPlanned = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Planned);
            boolean allowStatusUpdReleased = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Released);
            boolean allowStatusUpdInProgress = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::InProgress);
            boolean allowStatusUpdCompleted = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Completed);
            boolean allowStatusUpdCheckedWorkshop = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::CheckedWorkshop);
            boolean allowStatusUpdCheckedAdmin = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::CheckedAdmin);
            boolean allowStatusUpdInvoiced = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Invoiced);
            boolean allowStatusUpdClosed = allowedStatusUpdateMap.lookup(WPPWorkOrderLineStatus::Closed);

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS32754"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS32845", allowStatusUpdPlanned, #UpdateStatusPlanned));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS6966", allowStatusUpdReleased, #UpdateStatusReleased));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS137068", allowStatusUpdInProgress, #UpdateStatusInProgress));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS54623", allowStatusUpdCompleted, #UpdateStatusCompleted));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1378", allowStatusUpdCheckedWorkshop, #UpdateStatusCheckedWorkshop));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@DNR1377", allowStatusUpdCheckedAdmin, #UpdateStatusCheckedAdmin));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS14205", allowStatusUpdInvoiced, #UpdateStatusInvoiced));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newField("@SYS14403", allowStatusUpdClosed, #UpdateStatusClosed));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkOrderGroup</Name>
				<Source><![CDATA[
    private void populateWorkOrderGroup()
    {
        WPPWorkOrderTable workOrderTable = contextMenuData.workOrderTable;

        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR6492"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6461", workOrderTable.WorkOrderId, true, #JumpRefWorkOrderId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6575", workOrderTable.Name));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS341812", workOrderTable.CompanyId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR2443", strFmt("%1", workOrderTable.ActualPostingDate)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS2168", strFmt("%1", workOrderTable.StartDate)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS22882", strFmt("%1", workOrderTable.EndDate)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS50275", strFmt("%1", workOrderTable.displayInvoiceStatus())));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS3895", workOrderTable.ProjGroupId, true, #JumpRefProjGroupId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS330288", workOrderTable.ProjInvoiceProjId, true, #JumpRefProjInvoiceProjId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6008", workOrderTable.RORVenueCode, true, #JumpRefVenueCode));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS3794", strFmt("%1", LogisticsLocation::find(contextMenuData.location).LocationId)));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS7924", strFmt("%1\n%2", contextMenuData.street, contextMenuData.city)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendGroup</Name>
				<Source><![CDATA[
    private void populateCustVendGroup()
    {
        WPPWorkOrderTable workOrderTable = contextMenuData.workOrderTable;

        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader(contextMenuData.dirPartyTableRecId ? "@SYS8079" : "@SYS302"));

        if(workOrderTable)
        {
            CustVendAC accountNum = workOrderTable.CustVendAccountType == CustVendACType::Cust ? contextMenuData.custAccountNum : contextMenuData.vendAccountNum;

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS1996", accountNum, true, #JumpRefCustVendAccount));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS14142", workOrderTable.ContactPersonId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS60248", workOrderTable.editContactPersonName(false, '')));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS23010", workOrderTable.CustVendRef));

            // work order _popup group
            WPPWorkOrderLine workOrderLine = contextMenuData.workOrderLine;

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR6467"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS110827", workOrderLine.ProjId, true, #JumpRefProjId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS121658", workOrderLine.TaskId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR3696", workOrderLine.ExecutionGroupId, true, #JumpRefExecutionGroupId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR7304", strFmt("%1", DateTimeUtil::applyTimeZoneOffset(workOrderLine.RequestedStartDateTime, DateTimeUtil::getUserPreferredTimeZone()))));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR7303", strFmt("%1", DateTimeUtil::applyTimeZoneOffset(workOrderLine.RequestedEndDateTime, DateTimeUtil::getUserPreferredTimeZone()))));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS36398", strFmt("%1", workOrderLine.Status)));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR4443", contextMenuData.internalNote));
        }
        else
        {
            SalesQuotationTable salesQuotationTable = contextMenuData.salesQuotationTable;

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS1996", salesQuotationTable.CustAccount, true, #JumpRefCustVendAccount));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS14142", salesQuotationTable.ContactPersonId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS60248", salesQuotationTable.editContactPersonName(false, '')));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS23010", salesQuotationTable.CustomerRef));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBusinessObjectGroup</Name>
				<Source><![CDATA[
    private void populateBusinessObjectGroup()
    {
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR5863"));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR5875", contextMenuData.objectId, true, #JumpRefObjectId));

        if(isConfigurationkeyEnabled(configurationKeyNum(BOBFleetNumber)))
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR8214", contextMenuData.fleetNumber));
        }
        
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS477", contextMenuData.inventSerialId, true, #JumpRefInventSerialId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS25653", contextMenuData.assetId, true, #JumpRefAssetId));
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR3773", strFmt("%1", contextMenuData.WarrantyTo)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesPurchGroup</Name>
				<Source><![CDATA[
    private void populateSalesPurchGroup()
    {
        Phone contactPhone, operatorPhone;

        if(contextMenuData.salesLineRecId)
        {
            if(contextMenuData.contactPersonParty)
            {
                contactPhone = this.getPhoneNumber(contextMenuData.contactPersonParty);
            }

            if(contextMenuData.operatorParty)
            {
                operatorPhone = this.getPhoneNumber(contextMenuData.operatorParty);
            }

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader(contextMenuData.salesType == SalesType::RORRental ? "@DNR1539" : "@SYS80119"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", contextMenuData.salesId, true, #JumpRefSalesPurchQuotationId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS35826", contextMenuData.dirPersonName, true, #JumpRefSalesResponsible));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS12836", contextMenuData.orderItemId, true, #JumpRefItemId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6215", contextMenuData.rentalTypeIdRequested, true, #JumpRefRentalTypeId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6214", contextMenuData.rentalTypeIdAssigned, true, #JumpRefRentalTypeId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS124695", contextMenuData.partyContactName, true, #JumpRefSalesContactPerson));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS340691", contactPhone));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS9679", contextMenuData.partyOperatorName, true, #JumpRefSalesOperator));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10219", operatorPhone));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6160", contextMenuData.venueCode, true, #JumpRefVenueCode));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS34979", RORVenueTable::find(contextMenuData.venueCode).Name));
        }
        else if(contextMenuData.purchLineRecId)
        {
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader(contextMenuData.purchType == PurchaseType::RORSubRental ? "@DNR1715" : "@SYS25545"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", contextMenuData.purchId, true, #JumpRefSalesPurchQuotationId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS21867", contextMenuData.dirPersonName, true, #JumpRefPurchPlacer));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS12836", contextMenuData.orderItemId, true, #JumpRefItemId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6215", contextMenuData.rentalTypeId, true, #JumpRefRentalTypeId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6160", contextMenuData.venueCode, true, #JumpRefVenueCode));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS34979", RORVenueTable::find(contextMenuData.venueCode).Name));
        }
        else if(contextMenuData.salesQuotationLineRecId)
        {
            if(contextMenuData.contactPersonParty)
            {
                contactPhone = this.getPhoneNumber(contextMenuData.contactPersonParty);
            }

            if(contextMenuData.operatorParty)
            {
                operatorPhone = this.getPhoneNumber(contextMenuData.operatorParty);
            }

            SalesQuotationTable salesQuotationTable = contextMenuData.salesQuotationTable;

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@DNR6280"));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS15098", salesQuotationTable.QuotationId, true, #JumpRefSalesPurchQuotationId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS35826", contextMenuData.dirPersonName, true, #JumpRefQuotationResponsible));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS12836", contextMenuData.orderItemId, true, #JumpRefItemId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6215", contextMenuData.rentalTypeIdRequested, true, #JumpRefRentalTypeId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6214", contextMenuData.rentalTypeIdAssigned, true, #JumpRefRentalTypeId));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS124695", contextMenuData.partyContactName, true, #JumpRefQuotationContactPerson));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS340691", contactPhone));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS9679", contextMenuData.partyOperatorName, true, #JumpRefQuotationOperator));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR10219", operatorPhone));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@DNR6160", salesQuotationTable.RORVenueCode, true, #JumpRefVenueCode));
            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newFieldValue("@SYS34979", RORVenueTable::find(salesQuotationTable.RORVenueCode).Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWarningsGroup</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    protected void populateWarningsGroup()
    {
        menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newHeader("@SYS59278"));
        Map iconMap = new Map(Types::String, Types::String);
        WPPServicePlanboardSettings settings = callerFormRun.getSettings();

        WPPLayoutManagerCode layoutManagerCode;
        WPPParameters parameters = WPPParameters::find();

        WPPWorkOrderLine workOrderLine = contextMenuData.workOrderLine;

        if(isPlannedTask)
        {
            layoutManagerCode = workOrderLine.WorkOrderId == parameters.InternalWorkOrderId ? settings.LayoutMgrCodePlannedAbsence : settings.LayoutMgrCodePlanned;
        }
        else
        {
            layoutManagerCode = settings.LayoutMgrCodeUnplanned;
        }
        
        WPPCellIcon cellIcon;

        while select ResourceId, Criterion from cellIcon
        where cellIcon.LayoutManagerCode == layoutManagerCode
        {
            if(workOrderLine.meetsCriterion(cellIcon.Criterion))
            {
                iconMap.insert(enum2Str(cellIcon.Criterion), cellIcon.ResourceId);
            }
        }

        MapEnumerator iconMapEnumerator = iconMap.getEnumerator();

        while(iconMapEnumerator.moveNext())
        {
            SysElementName resName = iconMapEnumerator.currentValue();
            ResourceNode resNode = new resourceNode(resName);
            Filename filename = resNode.filename();

            menuItemCollection.addEnd(HiGHPlanBoardMenuItem::newIcon(iconMapEnumerator.currentKey(),
                                                                        strFmt("resources/Images/%1", filename),
                                                                        WPPServicePlanboardForm::workOrderLineCriterion2Int(iconMapEnumerator.currentKey())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForRentalTrans</Name>
				<Source><![CDATA[
    private HiGHPlanboardContextMenuData selectForRentalTrans()
    {
        BOBObjectTable objectTable;
        BOBObjectView objectView;
        BOBObjectAvailabilityLog availabilityLog;
        CustTable custTable;
        VendTable vendTable;
        DirPartyTable partyCust;
        LogisticsPostalAddress postalAddress;

        WPPParameters parameters = WPPParameters::find();
        BOBRentalTrans rentalTrans = BOBRentalTrans::findRecId(recordReference);
        container conCompany = [rentalTrans.CompanyId];
        HiGHPlanboardContextMenuData ret = new HiGHPlanboardContextMenuData();

        ret.workOrderStatusGroupId = WPPWorkOrderTaskTable::find(parameters.ReservationTaskId).WorkOrderStatusGroupId;

        if(rentalTrans.TransType == BOBRentalTransType::RentalQuotation)
        {
            SalesQuotationTable salesQuotationTable;
            SalesQuotationLine salesQuotationLine;
            InventDim inventDim;
            InventTransOrigin inventTransOrigin;
            InventTable inventTable;
            HcmWorker worker;
            DirPerson dirPerson;
            ContactPerson contactPerson, operator;
            DirPartyTable partyContact, partyOperator;

            // RLAM - test whether these can be merged into one select
            select firstonly crossCompany : conCompany TableId from inventTransOrigin
            where inventTransOrigin.RecId == rentalTrans.InventTransOrigin
                outer join ItemId, BOBRentalTypeIdRequested, BOBRentalTypeIdAssigned from salesQuotationLine
                where salesQuotationLine.InventTransId == inventTransOrigin.InventTransId
                    outer join salesQuotationTable
                    where salesQuotationTable.QuotationId == salesQuotationLine.QuotationId
                        outer join TableId from inventDim
                        where inventDim.inventDimId == salesQuotationLine.InventDimId
                            outer join objectTable
                            where objectTable.InventSerialId == inventDim.inventSerialId
                                outer join TableId from objectView
                                where objectView.ObjectId == objectTable.ObjectId
                                    outer join TableId from availabilityLog
                                    where availabilityLog.RecId == objectView.AvailabilityRecId
                                        outer join TableId from custTable
                                        where custTable.AccountNum == salesQuotationTable.CustAccount
                                            outer join Name from partyCust
                                            where partyCust.RecId == custTable.Party
                                                outer join Location, Street, City from postalAddress
                                                where postalAddress.RecId == salesQuotationTable.AddressRefRecId;

            // Two select statements because otherwise it exceeds the maximum buffer size
            select firstonly crossCompany : conCompany TableId from worker
            where worker.RecId == salesQuotationTable.WorkerSalesResponsible
                join Name from dirPerson 
                where dirPerson.RecId == worker.Person
                    outer join Party from contactPerson
                    where contactPerson.DataAreaId == salesQuotationTable.DataAreaId
                    &&    contactPerson.ContactPersonId == salesQuotationTable.ContactPersonId
                        outer join Name from partyContact
                        where partyContact.RecId == contactPerson.Party
                            outer join Party from operator
                            where operator.ContactPersonId == salesQuotationTable.RORContactPersonIdOperator
                                outer join Name from partyOperator
                                where partyOperator.RecId == operator.Party;

            ret.orderItemId = salesQuotationLine.ItemId;
            ret.rentalTypeIdRequested = salesQuotationLine.BOBRentalTypeIdRequested;
            ret.rentalTypeIdAssigned = salesQuotationLine.BOBRentalTypeIdAssigned;

            ret.salesQuotationTable = salesQuotationTable;

            ret.objectId = objectTable.ObjectId;
            ret.fleetNumber = objectTable.FleetNumber;
            ret.inventSerialId = objectTable.InventSerialId;
            ret.warrantyTo = objectTable.WarrantyToDate;
            ret.assetId = objectTable.assetId();

            ret.partyCustName = partyCust.Name;

            ret.location = postalAddress.Location;
            ret.street = postalAddress.Street;
            ret.city = postalAddress.City;

            ret.dirPersonName = dirPerson.Name; 

            ret.contactPersonParty = contactPerson.Party;
            ret.partyContactName = partyContact.Name;
            ret.operatorParty = operator.Party;
            ret.partyOperatorName = partyOperator.Name;
        }
        else if(rentalTrans.TransType == BOBRentalTransType::WPPWorkOrder)
        {
            WPPWorkOrderLine workOrderLine, workOrderLineParent;
            WPPWorkOrderTable workOrderTable;
            WPPWorkOrderTaskTable taskTable;
            DirPartyTable partyVend;
            DNRAdditionalNoteTable additionalNotes;

            select firstonly crossCompany : conCompany workOrderLine
            where workOrderLine.RecId == rentalTrans.WPPWorkOrderLineRecId
                join WorkOrderStatusGroupId from taskTable
                where taskTable.TaskId == workOrderLine.TaskId
                    join workOrderTable
                    where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                        outer join objectTable
                        where objectTable.RecId == workOrderTable.BOBObjectTableRecId
                            outer join TableId from objectView
                            where objectView.ObjectId == objectTable.ObjectId
                                outer join TableId from availabilityLog
                                where availabilityLog.RecId == objectView.AvailabilityRecId
                                    outer join AccountNum from custTable
                                    where CustVendACType::Cust == workOrderTable.CustVendAccountType
                                    &&    custTable.Party == workOrderTable.OrganizationParty
                                        outer join TableId from partyCust
                                        where partyCust.RecId == custTable.Party
                                            outer join AccountNum from vendTable
                                            where CustVendACType::Vend == workOrderTable.CustVendAccountType
                                            &&    vendTable.Party == workOrderTable.OrganizationParty
                                                outer join RecId from partyVend
                                                where partyVend.RecId == vendTable.Party
                                                    outer join TableId from workOrderLineParent
                                                    where workOrderLineParent.RecId == workOrderLine.ParentLineRecId
                                                        outer join Location, Street, City from postalAddress
                                                        where postalAddress.RecId == workOrderTable.LogisticsLocationRecId
                                                            outer join InternalNote from additionalNotes 
                                                            where additionalNotes.RefRecId == workOrderLine.RecId
                                                            &&    additionalNotes.RefTableId == workOrderLine.TableId;
            
            ret.workOrderLine = workOrderLine;

            ret.workOrderStatusGroupId = taskTable.WorkOrderStatusGroupId;

            ret.workOrderTable = workOrderTable;

            ret.objectId = objectTable.ObjectId;
            ret.fleetNumber = objectTable.FleetNumber;
            ret.inventSerialId = objectTable.InventSerialId;
            ret.warrantyTo = objecttable.WarrantyToDate;
            ret.assetId = objectTable.assetId();

            ret.custAccountNum = custTable.AccountNum;
            ret.vendAccountNum = vendTable.AccountNum;

            ret.dirPartyTableRecId = partyVend.RecId;

            ret.location = postalAddress.Location;
            ret.street = postalAddress.Street;
            ret.city = postalAddress.City;

            ret.internalNote = additionalNotes.InternalNote;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectForResourcePlanning</Name>
				<Source><![CDATA[
    private HiGHPlanboardContextMenuData selectForResourcePlanning()
    {
        WPPWorkOrderLine workOrderLine, workOrderLineParent;
        WPPWorkOrderTable workOrderTable;
        WPPWorkOrderTaskTable taskTable;
        BOBObjectTable objectTable;
        BOBObjectView objectView;
        BOBObjectAvailabilityLog availabilityLog;
        CustTable custTable;
        VendTable vendTable;
        ContactPerson contactPerson, operator;
        DirPartyTable partyCust, partyVend;
        LogisticsPostalAddress postalAddress;
        DNRAdditionalNoteTable additionalNotes;

        HiGHPlanboardContextMenuData ret = new HiGHPlanboardContextMenuData();

        select firstonly crossCompany workOrderLine
        where workOrderLine.RecId == recordReference
            join WorkOrderStatusGroupId from taskTable
            where taskTable.TaskId == workOrderLine.TaskId
                join workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                    outer join objectTable
                    where objectTable.RecId == workOrderTable.BOBObjectTableRecId
                        outer join TableId from objectView
                        where objectView.ObjectId == objectTable.ObjectId
                            outer join TableId from availabilityLog
                            where availabilityLog.RecId == objectView.AvailabilityRecId
                                outer join AccountNum from custTable
                                where CustVendACType::Cust == workOrderTable.CustVendAccountType
                                &&    custTable.Party == workOrderTable.OrganizationParty
                                    outer join TableId from partyCust
                                    where partyCust.RecId == custTable.Party
                                        outer join AccountNum from vendTable
                                        where CustVendACType::Vend == workOrderTable.CustVendAccountType
                                        &&    vendTable.Party == workOrderTable.OrganizationParty
                                            outer join RecId from partyVend
                                            where partyVend.RecId == vendTable.Party
                                                outer join TableId from workOrderLineParent
                                                where workOrderLineParent.RecId == workOrderLine.ParentLineRecId
                                                    outer join Location, Street, City from postalAddress
                                                    where postalAddress.RecId == workOrderTable.LogisticsLocationRecId
                                                        outer join InternalNote from additionalNotes
                                                        where additionalNotes.RefRecId == workOrderLine.RecId
                                                        &&    additionalNotes.RefTableId == workOrderLine.TableId;
        
        ret.workOrderLine = workOrderLine;

        ret.workOrderStatusGroupId = taskTable.WorkOrderStatusGroupId;

        ret.workOrderTable = workOrderTable;

        ret.objectId = objectTable.ObjectId;
        ret.fleetNumber = objectTable.FleetNumber;
        ret.inventSerialId = objectTable.InventSerialId;
        ret.warrantyTo = objecttable.WarrantyToDate;
        ret.assetId = objectTable.assetId();

        ret.custAccountNum = custTable.AccountNum;
        ret.vendAccountNum = vendTable.AccountNum;

        ret.dirPartyTableRecId = partyVend.RecId;

        ret.location = postalAddress.Location;
        ret.street = postalAddress.Street;
        ret.city = postalAddress.City;

        ret.internalNote = additionalNotes.InternalNote;

        if(workOrderTable.OrderTableId && workOrderTable.OrderRecId)
        {
            container conCompany = [workOrderTable.CompanyId];
            HcmWorker worker;
            DirPerson dirPerson;

            if(workOrderTable.OrderTableId == tableNum(SalesLine))
            {
                SalesTable salesTable;
                SalesLine salesLine;
                DirPartyTable partyContact, partyOperator;

                select firstonly crossCompany : conCompany SalesId, SalesType, RORVenueCode from salesTable
                    join ItemId, BOBRentalTypeIdRequested, BOBRentalTypeIdAssigned, RecId from salesLine
                    where salesLine.RecId == workOrderTable.OrderRecId
                    &&    salesLine.SalesId == salesTable.SalesId
                        outer join TableId from worker
                        where worker.RecId == salesTable.WorkerSalesResponsible
                            outer join Name from dirPerson
                            where dirPerson.RecId == worker.Person
                                outer join Party from contactPerson
                                where contactPerson.ContactPersonId == salesTable.ContactPersonId
                                    outer join Name from partyContact
                                    where partyContact.RecId == contactPerson.Party
                                        outer join Party from operator
                                        where operator.ContactPersonId == salesTable.RORContactPersonIdOperator
                                            outer join Name from partyOperator
                                            where partyOperator.RecId == operator.Party;

                ret.salesType = salesTable.SalesType;
                ret.salesId = salesTable.SalesId;
                ret.venueCode = salesTable.RORVenueCode;

                ret.salesLineRecId = salesLine.RecId;
                ret.orderItemId = salesLine.ItemId;
                ret.rentalTypeIdRequested = salesLine.BOBRentalTypeIdRequested;
                ret.rentalTypeIdAssigned = salesLine.BOBRentalTypeIdAssigned;

                ret.dirPersonName = dirPerson.Name;

                ret.contactPersonParty = contactPerson.Party;
                ret.partyContactName = partyContact.Name;
                ret.operatorParty = operator.Party;
                ret.partyOperatorName = partyOperator.Name;
            }
            else // PurchLine
            {
                PurchTable purchTable;
                PurchLine purchLine;

                select firstonly crosscompany : conCompany PurchId, PurchaseType, RORVenueCode from purchTable
                    join ItemId, BOBRentalTypeId from purchLine
                    where purchLine.RecId == workOrderTable.OrderRecId
                    &&    purchLine.PurchId == purchTable.PurchId
                        outer join TableId from worker
                        where worker.RecId == purchTable.WorkerPurchPlacer
                            outer join Name from dirPerson
                            where dirPerson.RecId == worker.Person;

                ret.purchId = purchTable.PurchId;
                ret.purchType = purchTable.PurchaseType;
                ret.venueCode = purchTable.RORVenueCode;

                ret.orderItemId = purchLine.ItemId;
                ret.rentalTypeId = purchLine.BOBRentalTypeId;

                ret.dirPersonName = dirPerson.Name;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>