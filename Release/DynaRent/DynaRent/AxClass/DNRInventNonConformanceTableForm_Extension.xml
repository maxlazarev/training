<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRInventNonConformanceTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventNonConformanceTable))]
public final class DNRInventNonConformanceTableForm_Extension
{
    // extension methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DNRparmTraceFilter</Name>
				<Source><![CDATA[
    public InventTrackingNonConformSummaryFilter DNRparmTraceFilter(InventTrackingNonConformSummaryFilter _traceFilter = traceFilter)
    {
        traceFilter = _traceFilter;
        return traceFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_element_OnInitialized</Name>
				<Source><![CDATA[
    // event handler methods

    [FormEventHandler(formStr(InventNonConformanceTable), FormEventType::Initialized)]
    public static void DNREvent_element_OnInitialized(xFormRun _sender, FormEventArgs _eventArgs)
    {
        Object                                  formRunObject   = _sender as Object;
        InventTrackingNonConformSummaryFilter   traceFilter     = formRunObject.DNRparmTraceFilter();
        QueryBuildDataSource                    qbdsLink;

        if(!traceFilter && _sender.args())
        {
            if(_sender.args().dataset() == tableNum(smmBusRelTable))
            {
                FormDataSource          inventNonConformanceTable_ds    = _sender.dataSource(formDataSourceStr(InventNonConformanceTable, InventNonConformanceTable));
                QueryBuildDataSource    qbds                            = inventNonConformanceTable_ds.query().dataSourceTable(tableNum(InventNonConformanceTable));
                qbds.clearRanges();
                qbds.clearDynalinks();
                if (_sender.args().parmEnumType())
                {
                    if (_sender.args().parmEnum() == ModuleCustVend::Vend)
                    {
                        qbdsLink = qbds.addDataSource(tableNum(VendTable));
                        qbdsLink.joinMode(JoinMode::ExistsJoin);
                        qbdsLink.relations(true);
                        qbdsLink.addDynalink(fieldNum(VendTable, Party), _sender.args().record(), fieldNum(smmBusRelTable, Party));
                    }
                    else
                    {
                        qbdsLink = qbds.addDataSource(tableNum(CustTable));
                        qbdsLink.joinMode(JoinMode::ExistsJoin);
                        qbdsLink.relations(true);
                        qbdsLink.addDynalink(fieldNum(CustTable, Party), _sender.args().record(), fieldNum(smmBusRelTable, Party));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>