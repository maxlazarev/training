<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRRORSalesTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DNRRORSalesTableInteraction</c> class is the interaction class for the rental order details form.
/// </summary>
public class DNRRORSalesTableInteraction extends PageInteraction
{
    Page                        page;
    SalesLine                   salesLine;
    SalesTable                  salesTable;

    SalesTableInteractionHelper salesTableInteractionHelper;

    SecurityRights              rights;

    // The following variable is only here to decrease compile time as the formControlStr intrinsic method will be executed many times.
    str macroFormControlStr;
    #localmacro.SetEnabled
        macroFormControlStr = %1;
        if (page.actionPaneControlVisible(macroFormControlStr))
        {
            page.actionPaneControlEnabled(macroFormControlStr, %2);
        }
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    public void enableHeaderActions()
    {
        salesTableInteractionHelper.initHeaderActions(salesTable);
    
        this.enableHeaderPaymentScheduleAction();
        this.enableHeaderFunctionActions();
        this.enableHeaderInquiryActions();
        this.enableHeaderInterCompanyActions();
        this.enableHeaderCreditCardMenuItems();
        this.enableHeaderBankDocumentMenuItems();
        this.enableHeaderAmendmentActions();
        #SetEnabled(formcontrolstr(DNRRORSalesTable, ButtonMarkupTransHeading), salesTableInteractionHelper.parmMarkupAllowed())
        #SetEnabled(formcontrolstr(DNRRORSalesTable, buttonSalesAgreement), salesTableInteractionHelper.parmMatchingAgreement())
        #SetEnabled(formControlStr(DNRRORSalesTable, ContactPerson), salesTableInteractionHelper.parmContactPersonExists())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderAmendmentActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the header level amendment menu items are enabled.
    /// </summary>
    protected void enableHeaderAmendmentActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_LostOrder_Header), salesTableInteractionHelper.RORparmEnableAmendmentLostOrder())
        #SetEnabled(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_ChangeDate_Header), salesTableInteractionHelper.RORparmEnableAmendmentDateChangeHeader())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderBankDocumentMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the bank document menu items.
    /// </summary>
    protected void enableHeaderBankDocumentMenuItems()
    {
        #SetEnabled(formcontrolstr(DNRRORSalesTable, ButtonCreateBankLCExport), salesTableInteractionHelper.parmButtonCreateBankLCExport())
        #SetEnabled(formcontrolstr(DNRRORSalesTable, BankLGRequestForm), salesTableInteractionHelper.parmButtonBankLGRequestForm())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderCreditCardMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level credit card menu items.
    /// </summary>
    protected void enableHeaderCreditCardMenuItems()
    {
        #SetEnabled(formcontrolstr(DNRRORSalesTable, CreditCardPreauthorize), salesTableInteractionHelper.parmCanCreditCardPreAuthorizeEnabled())
        #SetEnabled(formcontrolstr(DNRRORSalesTable, CreditCardWizard), salesTableInteractionHelper.parmCreditCardWizardEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderCreditInvoiceButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the credit invoice menu item in the header action panel.
    /// </summary>
    protected void enableHeaderCreditInvoiceButton()
    {
        #SetEnabled(formcontrolstr(DNRRORSalesTable, buttonCustVendCreditInvoicingHeader), salesTableInteractionHelper.parmButtonCustVendCreditInvoicingHeader())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level function menu items.
    /// </summary>
    protected void enableHeaderFunctionActions()
    {
        #ISOCountryRegionCodes
    
        // Control Service buttons
        #SetEnabled(formcontrolstr(DNRRORSalesTable, SMAAgreementWizard), salesTableInteractionHelper.parmRegularOrder())
        #SetEnabled(formcontrolstr(DNRRORSalesTable, SMAServiceOrderWizard), salesTableInteractionHelper.parmRegularOrder())
    
        // Buttons for return orders
            #SetEnabled(formcontrolstr(DNRRORSalesTable, SalesCopyAllHeader), !salesTableInteractionHelper.parmReturnItem())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, SalesCopyJournalHeader), !salesTableInteractionHelper.parmReturnItem())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, TradeBLWIChangeCode), !salesTableInteractionHelper.parmReturnItem())
    
            //#SetEnabled(formcontrolstr(DNRRORSalesTable, RORButtonCreatePurchOrder), salesTableInteractionHelper.parmCanCreatePurchOrder())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, buttonCreateDropShipment), salesTableInteractionHelper.parmCanCreateDropShipment())
    
            #SetEnabled(formcontrolstr(DNRRORSalesTable, buttonCalculateConfirmDates), salesTableInteractionHelper.parmButtonCalculateConfirmDates())
    
            #SetEnabled(formcontrolstr(DNRRORSalesTable, SalesCreditNoteHeader), salesTableInteractionHelper.parmCanCreditNoteBeCreated())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, SalesCreditNoteLines), salesTableInteractionHelper.parmCanCreditNoteBeCreated())
    
            #SetEnabled(formcontrolstr(DNRRORSalesTable, MultiLnDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, EndDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, SuppItemTable_Sales), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, SalesMultiLineDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched())
            #SetEnabled(formcontrolstr(DNRRORSalesTable, SalesEndDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched())

            #SetEnabled(formcontrolstr(SalesTable, mcrCreateCustHeaderCredit), salesTableInteractionHelper.parmMCRCanCreditHeader())
            #SetEnabled(formcontrolstr(SalesTable, mcrOrderHolds), salesTableInteractionHelper.parmMCROrderHoldsEnabled())
            #SetEnabled(formcontrolstr(SalesTable, mcrRecap), salesTableInteractionHelper.parmMCROrderCompletionEnabled() && salesTableInteractionHelper.parmMCRAllowPaymentAccess())
            #SetEnabled(formcontrolstr(SalesTable, mcrCustPaymTableButton), salesTableInteractionHelper.parmMCROrderCompletionEnabled() && salesTableInteractionHelper.parmMCRAllowPaymentAccess())
        }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderInquiryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level inquiry menu items.
    /// </summary>
    protected void enableHeaderInquiryActions()
    {
        ProjTable       projTable;
        ProjStatusType  projStatusType;
        boolean         canCreateInvoiceProposal;
    
        if (salesTable.ProjId)
        {
            projTable = salesTable.projTable();
            projStatusType = projTable.status();
            canCreateInvoiceProposal = ProjStatusTypeRule::exist(projTable.Status, projTable.Type, ProjStatusRule::CreateInvoiceProposal)
                                       && !salesTable.FINRentalProjectInvoicing();
        }
    
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonJournalQuotationConfirmation), salesTableInteractionHelper.parmExistsQuotation())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonJournalConfirmation), salesTableInteractionHelper.parmExistsConfirmation())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonJournalPickingList), salesTableInteractionHelper.parmExistsPickingList())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonJournalPackingSlip), salesTableInteractionHelper.parmExistsPackingSlip())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonJournalInvoice), salesTableInteractionHelper.parmExistsInvoice())
    
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonPurchTable), salesTableInteractionHelper.RORparmPurchaseOrderExists())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonSubRental), salesTableInteractionHelper.RORparmSubRentalOrderExists())
            #SetEnabled(formControlStr(DNRRORSalesTable, CheckCreditLimit), !salesTableInteractionHelper.parmReturnItem())
            #SetEnabled(formControlStr(DNRRORSalesTable, priceDiscActual), !salesTableInteractionHelper.parmReturnItem())
    
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalPreparation), salesTableInteractionHelper.RORparmExistsPreparation())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalOutbound), salesTableInteractionHelper.RORparmExistsOutbound())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalBuild), salesTableInteractionHelper.RORparmExistsBuild())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalEventStart), salesTableInteractionHelper.RORparmExistsEventStart())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalEventEnd), salesTableInteractionHelper.RORparmExistsEventEnd())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalStrike),  salesTableInteractionHelper.RORparmExistsStrike())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalInbound), salesTableInteractionHelper.RORparmExistsInbound())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalReturnNote), salesTableInteractionHelper.RORparmExistsReturned())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORCustConfirmJournalReturnInspection), salesTableInteractionHelper.RORparmExistsReturnInspection())
            
            #SetEnabled(formControlStr(DNRRORSalesTable, ProjProposalSelection), salesTable.ProjId != '' && canCreateInvoiceProposal)
            #SetEnabled(formControlStr(DNRRORSalesTable, ProjInvoiceProposalListPage), salesTable.ProjId != '' && projStatusType.ctrlProposal())
            #SetEnabled(formControlStr(DNRRORSalesTable, ProjInvoiceJournal), salesTable.ProjId != '' && projStatusType.ctrlInvoices())
        }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderInterCompanyActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level intercompany menu items.
    /// </summary>
    protected void enableHeaderInterCompanyActions()
    {
        boolean isRentalDirectDelivery;
    
        if (salesTable.InterCompanyDirectDelivery
        && salesTable.SalesType == SalesType::RORRental
        && salesTable.referencePurchTable().interCompanySalesTable())
        {
            isRentalDirectDelivery = true;
        }
    
        if (salesTable.SalesType == SalesType::RORRental
        && (salesTable.InterCompanyDirectDelivery || salesTable.InterCompanyAllowIndirectCreationOrig))
        {
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonPurchTableThisCompany), false)
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyPurchTable), false)
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyOriginalSalesTable), false)
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanySalesTable), false)
    
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonRORPurchTableThisCompany), salesTableInteractionHelper.parmIntercompanySalesId())
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyRORPurchTable), salesTableInteractionHelper.parmIntercompanyPurchId())
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyOriginalRORSalesTable), salesTableInteractionHelper.parmIntercompanyOriginalSalesId())
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyRORSalesTable), salesTableInteractionHelper.parmIntercompanySalesId())
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanySalesFormLetter_Pickinglist), false)
            }
        else
        {
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonPurchTableThisCompany), salesTableInteractionHelper.parmIntercompanySalesId())
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyPurchTable), salesTableInteractionHelper.parmIntercompanyPurchId())
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyOriginalSalesTable), salesTableInteractionHelper.parmIntercompanyOriginalSalesId())
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanySalesTable), salesTableInteractionHelper.parmIntercompanySalesId())
    
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonRORPurchTableThisCompany), false)
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyRORPurchTable), false)
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyOriginalRORSalesTable), false)
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanyRORSalesTable), false)
                #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanySalesFormLetter_Pickinglist), salesTableInteractionHelper.parmEnableICPickingListButton())
            }
    
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonReferences), salesTableInteractionHelper.parmReferencesEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderPaymentScheduleAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level payment schedule menu items.
    /// </summary>
    protected void enableHeaderPaymentScheduleAction()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonPaymentSchedule), salesTableInteractionHelper.parmPaymentScheduleEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderUpdateJournalActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level journal menu items.
    /// </summary>
    protected void enableHeaderUpdateJournalActions()
    {
        boolean isRentalDirectDelivery;
    
        if (salesTable.InterCompanyDirectDelivery
        &&  salesTable.SalesType == SalesType::RORRental
        &&  salesTable.referencePurchTable().interCompanySalesTable())
        {
            isRentalDirectDelivery = true;
        }
    
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonUpdateConfirmation), salesTableInteractionHelper.RORparmCanConfirmationBeUpdated())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonProformaConfirmation), salesTableInteractionHelper.RORparmCanConfirmationBeUpdated())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonQuickConfirmation), salesTableInteractionHelper.RORparmCanConfirmationBeUpdated())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonUpdatePickingList), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmCanPickingListBeUpdated())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonUpdatePickingListRegistrate), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmCanPickingListBeRegistrated())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonUpdatePackingSlip), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmCanPackingslipBeUpdated())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonProformaPackingSlip), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmCanPackingslipBeUpdated())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonUpdateInvoice), salesTableInteractionHelper.RORparmCanInvoiceBeUpdated())
            #SetEnabled(formControlStr(DNRRORSalesTable, RORbuttonUpdateInvoiceProj), salesTableInteractionHelper.RORparmCanInvoiceToProjBeUpdated())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonProformaInvoice), salesTableInteractionHelper.RORparmCanInvoiceBeUpdated())
    
            // enables the posting buttons that are based on the RORSubStatus
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusPreparation), !isRentalDirectDelivery && salesTableInteractionHelper.RORParmEnablePreparationButton())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusOutbound), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableOutboundButton())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusBuild), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableBuildButton())
        #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusEventStart), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableEventStartButton())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusEventEnd), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableEventEndButton())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusStrike), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableStrikeButton())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusInbound), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableInboundButton())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORReturnNote), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableReturnNoteButton())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesFormLetter_RORSubStatusReturnInsp), !isRentalDirectDelivery && salesTableInteractionHelper.RORparmEnableInspectionButton())
    
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonInterCompanySalesFormLetter_Pickinglist), !isRentalDirectDelivery && salesTableInteractionHelper.parmEnableICPickingListButton())
        }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    protected void enableLineActions()
    {
        salesTableInteractionHelper.initLineActions(salesTable, salesLine);
        salesTableInteractionHelper.RORinitCanBeUpdated();
    
        this.enableRentalMenuButton();
        this.enableLineSetupActions();
        this.enableLineFunctionActions();
        this.enableLineInquiryActions();
        this.enableLineCalculationActions();
        this.enableLineInterCompanyActions();
        this.enableLineAgreementActions();
        //this.enableLinePBAActions();
        this.enableLineUpdateActions();
        this.enableLineAmendmentActions();
        this.WPPenableLineWorkOrderActions();
        this.enableLineAssignmentActions();
        //Header actions dependent on line
        this.enableHeaderCreditInvoiceButton();
        this.enableHeaderUpdateJournalActions();
        this.WPPenableHeaderWorkOrderActions();
        this.enableHeaderAmendmentActions();
        
        this.enableLineRetailActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineAgreementActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level agreement menu items.
    /// </summary>
    protected void enableLineAgreementActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, SalesAgreementLine), salesTableInteractionHelper.parmAgreementLineEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, RemoveLink), salesTableInteractionHelper.parmAgreementRemoveLinkEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, CreateLink), salesTableInteractionHelper.parmAgreementCreateLinkEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineAmendmentActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level amendment menu items are enabled.
    /// </summary>
    protected void enableLineAmendmentActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_ChangeDate_Line), salesTableInteractionHelper.RORparmEnableAmendmentDateChangeLine())
        #SetEnabled(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_Exchange_Line), salesTableInteractionHelper.RORparmEnableAmendmentExchangeLine())
        #SetEnabled(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_RentalStop_Line), salesTableInteractionHelper.RORparmEnableAmendmentRentalStopLine())
        #SetEnabled(formControlStr(DNRRORSalesTable, RORRentalLineEditorFormButton), salesTableInteractionHelper.RORparmEnableRentalLineEditorForm())
            #SetEnabled(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_ResetValue_Line), salesTableInteractionHelper.RORparmEnableAmendmentRentalStopLine())
            #SetEnabled(formControlStr(DNRRORSalesTable, ROROrderAmendmentDialogType_BlockPeriod), salesTableInteractionHelper.RORparmEnableAmendmentBlockPeriodLine())
        
        }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineAssignmentActions</Name>
				<Source><![CDATA[
    protected void enableLineAssignmentActions()
    {
        boolean isRental = (salesLine.RORTradeType == RORTradeType::Rental || salesLine.RORTradeType == RORTradeType::SubRental);
        boolean canAssignObject = false;
        boolean canShowObject = isRental;

        if (isRental && salesLine.BOBRentalSubStatus <= BOBRentalSubStatus::Confirmed)
        {
            BOBRentalType rentalType = BOBRentalType::findFromItemId(salesLine.ItemId);

            canAssignObject = (rentalType && rentalType.Classification == BOBRentalTypeClassification::Serialized);
        }

        if (!isRental)
        {
            // For sales order line show Business Object button only if a serial number is assigned.
            canShowObject = (salesLine.inventDim().inventSerialId != '');
        }

        #SetEnabled(formControlStr(DNRRORSalesTable, BOBObjectAssignmentEngine), canAssignObject)
        #SetEnabled(formControlStr(DNRRORSalesTable, BOBObjectTable), canShowObject)
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineCalculationActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level calculation menu items.
    /// </summary>
    protected void enableLineCalculationActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, SuppItemCalc_Sales), salesTableInteractionHelper.parmSuppItemCalcEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, BOMPriceCalc), salesTableInteractionHelper.parmBomPriceCalcEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level function menu items are enabled.
    /// </summary>
    protected void enableLineFunctionActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineExpandBOM),  salesTableInteractionHelper.parmButtonLineExpandBOMEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonDeliverySchedule), salesTableInteractionHelper.parmDeliveryScheduleEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, CopyLine), salesTableInteractionHelper.parmLineExists())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonCustVendCreditInvoicingLines), salesTableInteractionHelper.parmLineExists())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesUpdateRemain), salesTableInteractionHelper.parmSalesUpdateRemainEnabled())
            #SetEnabled(formControlStr(DNRRORSalesTable, ButtonSalesDropShipmentCancel), salesTableInteractionHelper.parmSalesDropShipmentCancelEnabled())
            #SetEnabled(formControlStr(DNRRORSalesTable, DirPartyPostalAddressNewLine), salesTableInteractionHelper.parmAddressButtonsEnabled())
        }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInquiryActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level inquiry menu items are enabled
    /// </summary>
    protected void enableLineInquiryActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineProduction), salesTableInteractionHelper.parmButtonProductionEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineExplosion), salesTableInteractionHelper.parmButtonExplosionEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, BOMConsistOfTree), salesTableInteractionHelper.parmCanHaveBOMNotReturn())
        #SetEnabled(formControlStr(DNRRORSalesTable, ReqTransNet), salesTableInteractionHelper.parmStockedNotReturn())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonInventSupply), salesTableInteractionHelper.parmStockedNotReturn())
            #SetEnabled(formControlStr(DNRRORSalesTable, SalesATP), salesTableInteractionHelper.parmStockedNotReturn())
    
            #SetEnabled(formControlStr(DNRRORSalesTable, linePriceDiscActual), salesTableInteractionHelper.parmProductBasedNotReturn())
            #SetEnabled(formControlStr(DNRRORSalesTable, inventNonConformanceTableLine), salesTableInteractionHelper.parmProductBasedNotReturn())
            #SetEnabled(formControlStr(DNRRORSalesTable, InventQualityOrderTableLine), salesTableInteractionHelper.parmProductBasedNotReturn())
            #SetEnabled(formControlStr(DNRRORSalesTable, InventTestCertOfAnalysisTable), salesTableInteractionHelper.parmProductBasedNotReturn())
    
            // Must set visibility before enabling/disabling
            this.page().actionPaneControlVisible(formControlStr(DNRRORSalesTable, LineStripProductQualitySeparator), salesTableInteractionHelper.parmProductBasedNotReturn());
            #SetEnabled(formControlStr(DNRRORSalesTable, LineStripProductQualitySeparator), salesTableInteractionHelper.parmProductBasedNotReturn())
    
        // DynaRent
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonRORPurchTable), salesTableInteractionHelper.RORparmRelatedSubRentalOrderEnabled())
            #SetEnabled(formControlStr(DNRRORSalesTable, BOBTmpOnHandRentalInventory), salesLine.RORTradeType != RORTradeType::SalesPurch)
        }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInterCompanyActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level intercompany menu items.
    /// </summary>
    protected void enableLineInterCompanyActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, InventOnhandInterCompany), salesTableInteractionHelper.parmInterCompanyActionsEnabled())
        #SetEnabled(formControlStr(DNRRORSalesTable, InterCompanyRemoveMarking), salesTableInteractionHelper.parmInterCompanyRemoveEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineRetailActions</Name>
				<Source><![CDATA[
    protected void enableLineRetailActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, retailAddItemMenuItem), salesTableInteractionHelper.RORparmRetailAddItemMenuItemEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineSetupActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level setup menu items are enabled.
    /// </summary>
    protected void enableLineSetupActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, ButtonMarkupTransLine), salesTableInteractionHelper.parmLineMarkupAllowed())
        #SetEnabled(formControlStr(DNRRORSalesTable, LineTaxTransSource), !salesTableInteractionHelper.parmHasMultipleDeliveries())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineUpdateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level update menu items are enabled.
    /// </summary>
    protected void enableLineUpdateActions()
    {
        boolean isRentalDirectDelivery;
    
        if (salesTable.InterCompanyDirectDelivery
        && salesTable.SalesType == SalesType::RORRental
        && salesTable.referencePurchTable().interCompanySalesTable())
        {
            isRentalDirectDelivery = true;
        }
    
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineInventTrans), salesTableInteractionHelper.parmButtonLineInventTrans())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineInventOnHand), salesTableInteractionHelper.parmButtonLineInventOnHand())
        #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineInventLot), salesTableInteractionHelper.parmButtonLineInventLot())
        #SetEnabled(formControlStr(DNRRORSalesTable, InventDimTracking), salesTableInteractionHelper.parmStockedNotCanceledNotMultipleDlv())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineInventReservation), salesTableInteractionHelper.parmButtonLineInventReservation())
            #SetEnabled(formControlStr(DNRRORSalesTable, buttonLineInventMarking), salesTableInteractionHelper.parmStockedNotReturnNotMultipleDlv())
            #SetEnabled(formControlStr(DNRRORSalesTable, InventTransRegister), /*salesTableInteractionHelper.parmInventTransRegisterEnabled() && */!isRentalDirectDelivery && salesTableInteractionHelper.RORparmCanPickingListBeRegistrated())
            #SetEnabled(formControlStr(DNRRORSalesTable, InventTransPick), /*salesTableInteractionHelper.parmInventTransPickEnabled() && */!isRentalDirectDelivery && salesTableInteractionHelper.RORparmCanPickingListBeUpdated())
            //#SetEnabled(formControlStr(DNRRORSalesTable, WMSOrderAllowCreate), salesTableInteractionHelper.parmWMSOrderAllowCreate())
        }

]]></Source>
			</Method>
			<Method>
				<Name>enableRentalMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level amendment menu items are enabled.
    /// </summary>
    protected void enableRentalMenuButton()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, RentalMenuButton), salesTableInteractionHelper.RORparmEnableRentalMenuButton())
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesTableInteraction</c> class by using the active records
    /// for the form.
    /// </summary>
    private void init()
    {
        page = this.page();
    
        salesLine               = page.activeRecord('SalesLine');
        salesTable              = page.activeRecord('SalesTable');
    
        rights = SecurityRights::construct();
    
        salesTableInteractionHelper = SalesTableInteractionHelper::construct();
    
        if (page.pageArgs().enumTypeParameter() == enumNum(SalesTableFormId))
        {
            salesTableInteractionHelper.setSalesTableForm(SalesTableForm::construct(page.pageArgs().enumParameter(), salesTable));
        }
        else
        {
            salesTableInteractionHelper.setSalesTableForm(SalesTableForm::construct(SalesTableFormId::None, salesTable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the line action menu item buttons when the active sales order line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesLine', 'selectionChanged')]
    public void salesLine_DS_selectionChanged()
    {
        this.init();
    
        this.enableLineActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header action menu item buttons when the active sales order header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesTable', 'selectionChanged')]
    public void salesTable_DS_selectionChanged()
    {
        this.init();
    
        this.enableHeaderActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPenableHeaderWorkOrderActions</Name>
				<Source><![CDATA[
    private void WPPenableHeaderWorkOrderActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, WPPWorkOrderTable), salesTableInteractionHelper.WPPparmWorkOrderLineExistsHeader())
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPenableLineWorkOrderActions</Name>
				<Source><![CDATA[
    private void WPPenableLineWorkOrderActions()
    {
        #SetEnabled(formControlStr(DNRRORSalesTable, WPPWorkOrderTable_LineView), salesTableInteractionHelper.WPPparmWorkOrderLineExistsLine())
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>