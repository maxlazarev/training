<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DFMMenuButtonAuto</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DFMMenuButtonAuto
{
    Form    form;
    FormRun formRun;
    Set     tableIdSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canFilter</Name>
				<Source><![CDATA[
    private boolean canFilter(FormBuildDataSource _dataSource)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMustCreateButton</Name>
				<Source><![CDATA[
    public boolean checkMustCreateButton()
    {
        return (form && tableIdSet.elements() > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createButtons</Name>
				<Source><![CDATA[
    private void createButtons(FormBuildDataSource _dataSource)
    {
        FormActionPaneControl       actionPaneCtrl;
        Object                      parentCtrl;
    
        FormButtonGroupControl      buttonGroupCtrl;
        FormMenuButtonControl       menuButtonCtrl;
        FormFunctionButtonControl   editButtonCtrl, queryButtonCtrl;
        FormFunctionButtonControl   unQueryButtonCtrl;
    
        TableCaption                tableCaption;

        #define.menuButton('DFMMenuButton')
        #define.editButton('DFMEditButton')
        #define.queryButton('DFMQueryButton')
        #define.unQueryButton('DFMUnQueryButton')
        ;
    
        buttonGroupCtrl = this.findOrCreateButtonGroup(_dataSource);
        parentCtrl = buttonGroupCtrl.parentControl();
        tableCaption = new SysDictTable(_dataSource.table()).label();
    
        if(parentCtrl && parentCtrl is FormActionPaneTabControl)
        {
            actionPaneCtrl = parentCtrl.parentControl();
        }
    
        if(!actionPaneCtrl || actionPaneCtrl.style() == ActionPaneStyle::Strip)
        {
            menuButtonCtrl = buttonGroupCtrl.addControl(FormControlType::MenuButton, strFmt('%1_%2', #menuButton, _dataSource.name()));
            menuButtonCtrl.text("@DFM13");
            menuButtonCtrl.helpText(strFmt("@DFM46", tableCaption));
    
            editButtonCtrl = menuButtonCtrl.addControl(FormControlType::MenuFunctionButton, strFmt('%1_%2', #editButton, _dataSource.name()));
            editButtonCtrl.normalImage('7696');
    
            parentCtrl = menuButtonCtrl;
        }
    
        if(!editButtonCtrl)
        {
            editButtonCtrl = buttonGroupCtrl.addControl(FormControlType::MenuFunctionButton, strFmt('%1_%2', #editButton, _dataSource.name()));
            editButtonCtrl.normalImage('12559');
    
            parentCtrl = buttonGroupCtrl;
        }
    
        editButtonCtrl.big(true);
        editButtonCtrl.imageLocation(2);
        editButtonCtrl.text("@SYS36173");
        editButtonCtrl.helpText(strFmt("@DFM14", tableCaption));
        editButtonCtrl.menuItemType(MenuItemType::Display);
        editButtonCtrl.menuItemName(menuItemDisplayStr(DFMDialog));
        editButtonCtrl.dataSource(_dataSource.name());
    
        queryButtonCtrl = parentCtrl.addControl(FormControlType::MenuFunctionButton, strFmt('%1_%2', #queryButton, _dataSource.name()));
        queryButtonCtrl.text("@DFM64");
        queryButtonCtrl.helpText(strFmt("@DFM15", tableCaption));
        queryButtonCtrl.normalImage('1040');
        queryButtonCtrl.imageLocation(2);
    
        unQueryButtonCtrl = parentCtrl.addControl(FormControlType::MenuFunctionButton, strFmt('%1_%2', #unQueryButton, _dataSource.name()));
        unQueryButtonCtrl.text("@DFM85");
        unQueryButtonCtrl.helpText(strFmt("@DFM61", tableCaption));
        unQueryButtonCtrl.normalImage('1089');
        unQueryButtonCtrl.imageLocation(2);
    
        if(this.canFilter(_dataSource))
        {
            queryButtonCtrl.menuItemType(MenuItemType::Action);
            queryButtonCtrl.menuItemName(menuItemActionStr(DFMCreateFilter));
            queryButtonCtrl.dataSource(_dataSource.name());
    
            unQueryButtonCtrl.menuItemType(MenuItemType::Action);
            unQueryButtonCtrl.menuItemName(menuItemActionStr(DFMRemoveFilter));
            unQueryButtonCtrl.dataSource(_dataSource.name());
        }
        else
        {
            queryButtonCtrl.enabled(false);
            unQueryButtonCtrl.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingButtonGroup</Name>
				<Source><![CDATA[
    private FormButtonGroupControl findExistingButtonGroup(Object _ctrl, str _dataSourceName)
    {
        Object                  childCtrl;
        Counter                 counter;
        FormBuildDataSource     dataSource;
        SysDictClass            sysDictClass;

        #define.dataSource('DataSource')
        ;
    
        if(_ctrl is FormDesign || _ctrl.isContainer())
        {
            if(_ctrl.dataSource())
            {
                dataSource = form.dataSource(_ctrl.dataSource());
    
                if(dataSource && dataSource.name() == _dataSourceName)
                {
                    for(counter = 1; counter <= _ctrl.controlCount(); counter ++)
                    {
                        childCtrl = _ctrl.controlNum(counter);
    
                        if(childCtrl is FormButtonGroupControl)
                        {
                            return childCtrl;
                        }
                    }
                }
            }
    
            for(counter = 1; counter <= _ctrl.controlCount(); counter ++)
            {
                childCtrl = _ctrl.controlNum(counter);
                sysDictClass = new SysDictClass(classIdGet(childCtrl));
    
                if(childCtrl.isContainer() && sysDictClass && sysDictClass.hasObjectMethod(#dataSource) && childCtrl.dataSource())
                {
                    dataSource = form.dataSource(childCtrl.dataSource());
    
                    if(dataSource.name() == _dataSourceName)
                    {
                        return this.findExistingButtonGroup(childCtrl, _dataSourceName); // recursive call
                    }
                }
            }
        }
    
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstControlWithDS</Name>
				<Source><![CDATA[
    private Object findFirstControlWithDS(Object _ctrl, FormBuildDataSource _dataSource)
    {
        FormControl         childCtrl;
        Object              returnCtrl;
        Counter             counter;
        FormBuildDataSource dataSource;
        SysDictClass        sysDictClass;

        #define.dataSource('DataSource')
        #define.controlCount('ControlCount')
        ;
    
        sysDictClass = new SysDictClass(classIdGet(_ctrl));
    
        if(sysDictClass && sysDictClass.hasObjectMethod(#dataSource) && _ctrl.dataSource())
        {
            dataSource = form.dataSource(_ctrl.dataSource());
    
            if(dataSource && dataSource.name() == _dataSource.name())
            {
                return _ctrl;
            }
        }
    
        if(sysDictClass && sysDictClass.hasObjectMethod(#controlCount))
        {
            for(counter = 1; counter <= _ctrl.controlCount(); counter ++)
            {
                childCtrl = _ctrl.controlNum(counter);
                returnCtrl = this.findFirstControlWithDS(childCtrl, _dataSource);
    
                if(returnCtrl)
                {
                    return returnCtrl;
                }
            }
        }
    
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateActionPaneTab</Name>
				<Source><![CDATA[
    private FormActionPaneTabControl findOrCreateActionPaneTab()
    {
        #define.actionPaneTabName('DFMActionPaneTab')
    
        FormControl                 formCtrl;
        FormActionPaneControl       actionPaneCtrl;
        FormActionPaneTabControl    ret;
        Counter                     cnt;
        int                         lastPageIdx;
        ;
    
        ret = null;
        actionPaneCtrl = this.findRibbon(formRun.design());
    
        if(actionPaneCtrl)
        {
            for(cnt = 1; cnt <= actionPaneCtrl.controlCount(); cnt ++)
            {
                formCtrl = actionPaneCtrl.controlNum(cnt);

                if(formCtrl is FormActionPaneTabControl && formCtrl.name() == #actionPaneTabName)
                {
                    ret = formCtrl as FormActionPaneTabControl;
                    break;
                }
                else
                {
                    ret = null;
                }
            }
    
            if(!ret)
            {
                ret = actionPaneCtrl.addControl(FormControlType::ActionPaneTab, #actionPaneTabName);
                ret.caption("@DFM13");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateButtonGroup</Name>
				<Source><![CDATA[
    private FormButtonGroupControl findOrCreateButtonGroup(FormBuildDataSource _dataSource)
    {
        #define.buttonGroupName('DFMButtonGroup')
    
        FormButtonGroupControl      buttonGroupCtrl;
        FormControl                 control;
        Object                      containerCtrl;
        FormActionPaneTabControl    actionPaneTabCtrl;
        ;
    
        actionPaneTabCtrl = this.findOrCreateActionPaneTab();
    
        if(actionPaneTabCtrl)
        {
            buttonGroupCtrl = actionPaneTabCtrl.addControl(FormControlType::ButtonGroup, strFmt('%1_%2', #buttonGroupName, _dataSource.name()));
            buttonGroupCtrl.caption(new SysDictTable(_dataSource.table()).label());
        }
        else
        {
            buttonGroupCtrl = this.findExistingButtonGroup(formRun.design(), _dataSource.name());
    
            if(!buttonGroupCtrl)
            {
                // locate the first control that has the relevant data source set
                control = this.findFirstControlWithDS(formRun.design(), _dataSource);
    
                if(control
                && classIdGet(control) != classNum(FormDesign))
                {
                    containerCtrl = formRun.design().control(control.containerId());
    
                    // keep on browsing back up until we reach a spot where a button group can be created
                    while(!buttonGroupCtrl && containerCtrl)
                    {
                        buttonGroupCtrl = containerCtrl.addControl(FormControlType::ButtonGroup, #buttonGroupName);
    
                        if(buttonGroupCtrl)
                        {
                            buttonGroupCtrl.dataSource(_dataSource.id());
                        }
    
                        containerCtrl = formRun.design().control(containerCtrl.containerId());
                    }
                }
            }
    
            if(!buttonGroupCtrl)
            {
                // if for some reason the creation of a new button group failed, just make one on the top level
                buttonGroupCtrl = formRun.design().addControl(FormControlType::ButtonGroup, #buttonGroupName);
            }
        }
    
        return buttonGroupCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRibbon</Name>
				<Source><![CDATA[
    private FormActionPaneControl findRibbon(Object _ctrl)
    {
        Object  childCtrl;
        Counter counter;
        ;
    
        if(_ctrl is FormDesign || _ctrl.isContainer())
        {
            for(counter = 1; counter <= _ctrl.controlCount(); counter ++)
            {
                childCtrl = _ctrl.controlNum(counter);
    
                if(childCtrl is FormActionPaneControl && childCtrl.style() == ActionPaneStyle::Standard)
                {
                    return childCtrl;
                }
            }
    
            for(counter = 1; counter <= _ctrl.controlCount(); counter ++)
            {
                childCtrl = _ctrl.controlNum(counter);
    
                if(childCtrl.isContainer())
                {
                    return this.findRibbon(childCtrl); // recursive call
                }
            }
        }
    
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIds</Name>
				<Source><![CDATA[
    private Set getTableIds()
    {
        Set             set = new Set(Types::Integer);
        DFMButtonSetup  buttonSetup;
        ;
    
        while select RefTableID from buttonSetup
        where buttonSetup.FormName == form.name()
        {
            set.add(buttonSetup.RefTableId);
        }
    
        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        formRun     = _formRun;
        form        = formRun.form();
        tableIdSet  = this.getTableIds();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Counter             dataSourceCounter;
        FormBuildDataSource dataSource;
        ;
    
        for(dataSourceCounter = 1; dataSourceCounter <= form.dataSourceCount(); dataSourceCounter ++)
        {
            dataSource = form.dataSource(dataSourceCounter);
    
            if(tableIdSet.in(dataSource.table()))
            {
                this.createButtons(dataSource);
                tableIdSet.remove(dataSource.table());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>