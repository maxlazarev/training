<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesLineCopyFromSalesLineClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(ClassStr(SalesLineCopyFromSalesLine))]
public final class DNRSalesLineCopyFromSalesLineClass_Extension
{
    public boolean copyForRental;
    public CustInvoiceTrans fromCustInvoiceTrans;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    protected void copyFromSource()
    {
        next copyFromSource();

        this.RORInitFromSalesLine(salesLine, sourceSalesLine);
        InventDim inventDim = salesLine.inventDim();
        inventDim.inventSerialId = '';
        inventDim = InventDim::findOrCreate(inventDim);
        salesLine.InventDimId = inventDim.inventDimId;
        this.RORSetParentReference(sourceSalesLine, salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDropShipmentRelatedData</Name>
				<Source><![CDATA[
    protected void copyDropShipmentRelatedData()
    {
        next copyDropShipmentRelatedData();

        salesCopying.RORCopyParentReference(fromCustInvoiceTrans, salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitFromSalesLine</Name>
				<Source><![CDATA[
    // extension methods

    private void RORInitFromSalesLine(SalesLine _toLine, SalesLine _fromLine)
    {
        _toLine.RORAllowQtyEdit          = _fromLine.RORAllowQtyEdit;
        _toLine.DNRCalendarId            = _fromLine.DNRCalendarId;
        _toLine.RORInventReturned        = _fromLine.RORInventReturned;
        _toLine.RORIsPriceFixed          = _fromLine.RORIsPriceFixed;
        _toLine.RORIsPriceNet            = _fromLine.RORIsPriceNet;
        _toLine.RORKitComponentType      = _fromLine.RORKitComponentType;
        _toLine.RORLineType              = _fromLine.RORLineType;
        _toLine.RORPriceTimeUnit         = _fromLine.RORPriceTimeUnit;
        _toLine.RORRentalGrossAmount     = _fromLine.RORRentalGrossAmount;
        _toLine.RORRentalStatus          = _fromLine.RORRentalStatus;
        _toLine.RORSalesReturned         = _fromLine.RORSalesReturned;
        _toLine.RORTradeType             = _fromLine.RORTradeType;
        _toLine.RORReturnInventLocationId= _fromLine.RORReturnInventLocationId;
        
        // Return quantities will be recalculated upon posting the packing slip.
        _toLine.RORRemainInventReturn    = 0;
        _toLine.RORRemainSalesReturn     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORSetParentReference</Name>
				<Source><![CDATA[
    private void RORSetParentReference(SalesLine _fromLine, SalesLine _toLine)
    {
        ItemId      parentItemId;
        SalesLine   parentSalesLine;
    
        if (_fromLine.RORParentLineRecId
        && copyForRental
        //&&  _toLine.RORLineType != RORLineType::Normal
        &&  !_toLine.RORParentLineRecId)
        {
            parentItemId = SalesLine::findRecId(_fromLine.RORParentLineRecId).ItemId;
    
            select firstOnly RecId from parentSalesLine
            order by RecId desc
            where parentSalesLine.SalesId   == _toLine.SalesId
            &&    parentSalesLine.ItemId    == parentItemId;
    
            _toLine.RORParentLineRecId = parentSalesLine.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>