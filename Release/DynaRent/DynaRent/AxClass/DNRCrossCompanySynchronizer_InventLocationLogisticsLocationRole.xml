<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCrossCompanySynchronizer_InventLocationLogisticsLocationRole</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DNRCrossCompanySynchronizer_InventLocationLogisticsLocationRole extends DNRCrossCompanySynchronizer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldIds2Identify</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Identify()
    {
        return null; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIds2Sync</Name>
				<Source><![CDATA[
    protected Set getFieldIds2Sync()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventInserted</Name>
				<Source><![CDATA[
    protected void eventInserted()
    {
        DataAreaId                          dataAreaId;
        InventLocationId                    origLocationId;
        RefRecId                            origLocation;
        InventLocationLogisticsLocationRole locationRole = callerRecord;
        SetEnumerator                       enumerator = dataAreaIds2Sync.getEnumerator();

        changecompany(transDataAreaId)
        {
            InventLocation                      inventLocationOrig;
            InventLocationLogisticsLocation     origLogisticsLocation;
            
            select origLogisticsLocation
            where origLogisticsLocation.RecId == locationRole.LocationLogisticsLocation
                join inventLocationOrig
                where inventLocationOrig.RecId == origLogisticsLocation.InventLocation;

            origLocationId  = inventLocationOrig.InventLocationId;
            origLocation    = origLogisticsLocation.Location;

        }
        
        while(enumerator.moveNext())
        {
            dataAreaId = enumerator.current();
            changecompany(dataAreaId)
            {
                InventLocation                      inventLocation;
                InventLocationLogisticsLocation     logisticsLocation;
                InventLocationLogisticsLocationRole newRecord;
                InventLocationLogisticsLocationRole locationRoleNotExists;

                inventLocation = InventLocation::find(origLocationId);
                
                select logisticsLocation
                where logisticsLocation.Location == origLocation
                &&    logisticsLocation.InventLocation == inventLocation.RecId
                    notexists join locationRoleNotExists            //Find Location only if the related Role is already not available
                    where locationRoleNotExists.LocationRole == locationRole.LocationRole
                    &&    locationRoleNotExists.LocationLogisticsLocation == logisticsLocation.RecId;

                newRecord.clear();
                newRecord.LocationRole              = locationRole.LocationRole;
                newRecord.LocationLogisticsLocation = logisticsLocation.RecId;
                
                if(logisticsLocation && this.validateWrite(newRecord))
                {
                    newRecord.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventDeleted</Name>
				<Source><![CDATA[
    protected void eventDeleted()
    {
        DataAreaId                          dataAreaId;
        InventLocationId                    origLocationId;
        RefRecId                            origLocation;
        InventLocationLogisticsLocationRole locationRole = callerRecord;
        SetEnumerator                       enumerator = dataAreaIds2Sync.getEnumerator();

        changecompany(transDataAreaId)
        {
            InventLocation                      inventLocationOrig;
            InventLocationLogisticsLocation     origLogisticsLocation;
            
            select origLogisticsLocation
            where origLogisticsLocation.RecId == locationRole.LocationLogisticsLocation
                join inventLocationOrig
                where inventLocationOrig.RecId == origLogisticsLocation.InventLocation;

            origLocationId  = inventLocationOrig.InventLocationId;
            origLocation    = origLogisticsLocation.Location;

        }
        
        ttsbegin;
        while(enumerator.moveNext())
        {
            dataAreaId = enumerator.current();
            changecompany(dataAreaId)
            {
                InventLocationLogisticsLocation logisticsLocation;
                InventLocation                  inventLocation = InventLocation::find(origLocationId);
                
                if(inventLocation)
                {
                    select logisticsLocation
                    where logisticsLocation.Location == origLocation
                    &&    logisticsLocation.InventLocation == inventLocation.RecId;

                    if(logisticsLocation)
                    {
                        InventLocationLogisticsLocationRole locationRoleDel;
                        
                        select forupdate locationRoleDel
                        where locationRoleDel.LocationRole == locationRole.LocationRole
                        &&    locationRoleDel.LocationLogisticsLocation == logisticsLocation.RecId;
                
                        if(locationRoleDel && locationRoleDel.validateDelete())
                        {
                            locationRoleDel.delete();
                        }
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>