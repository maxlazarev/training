<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesEditLinesForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(SalesEditLines))]
public final class DNRSalesEditLinesForm_Extension
{
    private WPPWorkOrderId  workOrderId;
    private NoYes           isAvailable;
    private boolean         isRental;
    private Set             periodsCreatedSet;
    private Map             referenceQtyMap;
    private boolean         deliverNowAdjusted, parmLineDeleted;

    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void  run()
    {
        next run();

        salesParmTable_BOBTransTime.label(salesEditLinesForm.BOBTransTimeCaption());

        SalesParmLine_BOBDisplayQtyToPickInSalesUnit.visible(qtyToPickInSalesUnit.visible());
        SalesParmLine_BOBDisplayAvailRentalQtyImage.visible(qtyToPickInSalesUnit.visible());

        salesParmTable_ds.object(fieldNum(SalesParmTable, RORAutomaticallyPostSubRental)).allowEdit(salesEditLinesForm.ROREnablePostSubRental(documentStatus));
        salesParmTable_ds.object(fieldNum(SalesParmTable, WPPDuplTaskOnPartialFormLetterPosting)).allowEdit(salesEditLinesForm.WPPEnableDuplicateTask(workOrderId));
        
        tabSalesParmSubTable.caption(isRental ? "@DNR1087" : "@SYS4363");
        SalesParmSubTable_OrigSalesId.label(isRental ? "@DNR10" : "@SYS9694");
        SalesParmLine_OrigSalesId.label(isRental ? "@DNR10" : "@SYS9694");
        SalesParmTable_SalesId.label(isRental ? "@DNR10" : "@SYS9694");
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void  init()
    {
        next init();

        salesEditLinesForm.BOBparmRentalSubStatus(salesFormLetter.RORparmRentalSubStatus());
        
        if (salesFormLetter.RORparmCallerMenuItem() == menuitemactionstr(RORSalesFormLetter_InvoiceProj_Action))
        {
            printFormLetter.value(false);
            printGroup.visible(false);
        }

        isRental = salesFormLetter.RORIsRentalPosting();
    
        // visible during packing slip and invoicing
        INVCalculationPointGroup.visible(isRental && salesEditLinesForm.INVCanShowCalculationPoint());
    
        FormDataSource salesParmUpdate_ds = this.dataSource(formDataSourceStr(SalesEditLines, SalesParmUpdate));
        salesParmUpdate_ds.object(fieldNum(SalesParmUpdate, INVCalculationDateTime)).mandatory(INVCalculationPointGroup.visible());
        salesParmUpdate_ds.object(fieldNum(SalesParmUpdate, INVTransdate)).mandatory(INVCalculationPointGroup.visible());

        // visible only during invoicing
        INVIncludeLinesGroup.visible(isRental && salesEditLinesForm.INVCanShowIncludeLines());
        
        FormDataSource salesParmLine_ds = this.dataSource(formDataSourceStr(SalesEditLines, SalesParmLine));
        salesParmLine_ds.object(fieldNum(SalesParmLine, INVInvoicePeriods)).visible(INVIncludeLinesGroup.visible());

        this.WPPupdateDesign();
        this.RORInitializeMaps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        int ret = next task(_taskId);

        #task

        if (_taskId == #taskDeleteRecord)
        {
            salesParmLine_ds.research();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInitializeMaps</Name>
				<Source><![CDATA[
    // extension methods

    public void RORInitializeMaps()
    {
        referenceQtyMap = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPupdateDesign</Name>
				<Source><![CDATA[
    public void WPPupdateDesign()
    {
        boolean     changeAvailabilityChecked;
    
        changeAvailabilityChecked = salesFormLetter.WPPparmChangeObjectAvailability();
        workOrderId               = salesFormLetter.WPPparmWorkOrderId();
    
        ///dlgReasonCode.allowEdit(changeAvailabilityChecked);
    
        if (changeAvailabilityChecked)
        {
            isAvailable = salesEditLinesForm.WPPobjectIsAvailable(workOrderId);
    
            //dlgChangeAvailability.checked(true);
            //TabPageWPPChangeAvailability.visible(true);
            //dlgWorkOrderId.text(workOrderId);
           // dlgIsAvailable.selection(!isAvailable);
            //dlgReasonCode.mandatory(isAvailable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRgetSalesEditLinesForm</Name>
				<Source><![CDATA[
    public SalesEditLinesForm DNRgetSalesEditLinesForm()
    {
        return salesEditLinesForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRgetSalesFormLetter</Name>
				<Source><![CDATA[
    public SalesFormLetter DNRgetSalesFormLetter()
    {
        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRgetSalesParmUpdate</Name>
				<Source><![CDATA[
    public SalesParmUpdate DNRgetSalesParmUpdate()
    {
        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmDeliverNowAdjusted</Name>
				<Source><![CDATA[
    public boolean DNRparmDeliverNowAdjusted(boolean _deliverNowAdjusted = deliverNowAdjusted)
    {
        deliverNowAdjusted = _deliverNowAdjusted;
        return deliverNowAdjusted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus DNRparmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmIsAvailable</Name>
				<Source><![CDATA[
    public NoYes DNRparmIsAvailable(NoYes _isAvailable = isAvailable)
    {
        isAvailable = _isAvailable;
        return isAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmIsRental</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false)]
    public boolean DNRparmIsRental(boolean _isRental = isRental)
    {
        isRental = _isRental;
        return isRental;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmParmLineDeleted</Name>
				<Source><![CDATA[
    public boolean DNRparmParmLineDeleted(boolean _parmLineDeleted = parmLineDeleted)
    {
        parmLineDeleted = _parmLineDeleted;
        return parmLineDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRparmWorkOrderId</Name>
				<Source><![CDATA[
    public WPPWorkOrderId DNRparmWorkOrderId(WPPWorkOrderId _workOrderId = workOrderId)
    {
        workOrderId = _workOrderId;
        return workOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_element_OnClosing</Name>
				<Source><![CDATA[
    // event handler methods

    [FormEventHandler(formStr(SalesEditLines), FormEventType::Closing)]
    public static void DNREvent_element_OnClosing(xFormRun _sender, FormEventArgs _eventArgs)
    {
        FormRun         formRun         = _sender as FormRun;
        Object          hostObj         = formRun as Object;
        SalesFormLetter salesFormLetter = hostObj.DNRgetSalesFormLetter();
        SalesParmUpdate salesParmUpdate = formRun.dataSource(formDataSourceStr(SalesEditLines, SalesParmUpdate)).cursor() as SalesParmUpdate;
                  
        salesFormLetter.WPPParmMustDuplicateTask(hostObj.DNRparmDeliverNowAdjusted() || hostObj.DNRparmParmLineDeleted());
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmLineDS_OnDeleted</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(SalesEditLines, SalesParmLine), FormDataSourceEventType::Deleted)]
    public static void DNREvent_SalesParmLineDS_OnDeleted(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        Object  hostObj = formRun as Object;

        if (hostObj.DNRparmWorkOrderId())
        {
            hostObj.DNRparmParmLineDeleted(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmLineDS_OnActivated</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
    FormDataSourceEventHandler(formDataSourceStr(SalesEditLines, SalesParmLine), FormDataSourceEventType::Activated)]
    public static void DNREvent_SalesParmLineDS_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmTableDS_SalesId_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmTable, SalesId), FormDataFieldEventType::Validated)]
    public static void DNREvent_SalesParmTableDS_SalesId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun formRun                                 = _sender.datasource().formRun() as FormRun;
        SalesFormLetterParmData::formLetterContractParm = formRun.DNRgetSalesFormLetter().getContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdateDS_INVCalculationDateTime_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmUpdate, INVCalculationDateTime), FormDataFieldEventType::Modified)]
    public static void DNREvent_SalesParmUpdateDS_INVCalculationDateTime_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        Object hostObj = _sender.datasource().formRun() as Object;
        hostObj.reSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdateDS_INVCalculationDateTime_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmUpdate, INVCalculationDateTime), FormDataFieldEventType::Validated)]
    public static void DNREvent_SalesParmUpdateDS_INVCalculationDateTime_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormDataSource formDataSource = _sender.datasource();
        SalesParmUpdate salesParmUpdate = formDataSource.cursor();
        
        if(!salesParmUpdate.INVCalculationDateTime)
        {
            checkFailed(strFmt("@DNR4370", fieldId2PName(salesParmUpdate.TableId, fieldNum(SalesParmUpdate, INVCalculationDateTime))));

            FormDataFieldCancelEventArgs eventArgs = _eventArgs as FormDataFieldCancelEventArgs;
            eventArgs.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdateDS_INVIncludeCredits_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmUpdate, INVIncludeCredits), FormDataFieldEventType::Modified)]
    public static void DNREvent_SalesParmUpdateDS_INVIncludeCredits_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        Object hostObj = _sender.datasource().formRun() as Object;
        hostObj.reSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdateDS_INVIncludeUninvoiced_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmUpdate, INVIncludeUninvoiced), FormDataFieldEventType::Modified)]
    public static void DNREvent_SalesParmUpdateDS_INVIncludeUninvoiced_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        Object hostObj = _sender.datasource().formRun() as Object;
        hostObj.reSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdateDS_INVTransdate_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmUpdate, INVTransdate), FormDataFieldEventType::Modified)]
    public static void DNREvent_SalesParmUpdateDS_INVTransdate_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormRun             formRun             = _sender.datasource().formRun() as FormRun;
        Object              hostObj             = formRun as Object;
        SalesFormLetter     salesFormLetter     = hostObj.DNRgetSalesFormLetter();
        SalesParmUpdate     salesParmUpdate     = _sender.datasource().cursor() as SalesParmUpdate;
        FormDataSource      SalesParmTable_ds   = _sender.datasource().formRun().dataSource(formDataSourceStr(SalesEditLines, SalesParmTable)) as FormDataSource;

        salesFormLetter.INVParmTransDate(salesParmUpdate.INVTransdate);
            
        SalesParmTable_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_SalesParmUpdateDS_INVTransdate_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesEditLines, SalesParmUpdate, INVTransdate), FormDataFieldEventType::Validated)]
    public static void DNREvent_SalesParmUpdateDS_INVTransdate_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormDataSource formDataSource = _sender.datasource();
        SalesParmUpdate salesParmUpdate = formDataSource.cursor();
        
        if(!salesParmUpdate.INVTransdate)
        {
            checkFailed(strFmt("@DNR4370", fieldId2PName(salesParmUpdate.TableId, fieldNum(SalesParmUpdate, INVTransdate))));

            FormDataFieldCancelEventArgs eventArgs = _eventArgs as FormDataFieldCancelEventArgs;
            eventArgs.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_BOBDisplayAvailRentalQtyImageCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(SalesEditLines, SalesParmLine_BOBDisplayAvailRentalQtyImage), FormControlEventType::Clicked)]
    public static void DNREvent_BOBDisplayAvailRentalQtyImageCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        SalesParmLine   salesParmLine   = _sender.formRun().dataSource(formDataSourceStr(SalesEditLines, SalesParmLine)).cursor() as SalesParmLine;
        Args            args            = new Args();
        FormRun         formRun;
        
        args.name(formStr(BOBTmpRentalSum));
        args.record(salesParmLine);
        
        formRun = ClassFactory::formRunClassOnClient(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>