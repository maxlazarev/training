<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRAssetTableTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(AssetTable))]
public final class DNRAssetTableTable_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromAssetGroupId</Name>
				<Source><![CDATA[
    public void initFromAssetGroupId(AssetGroupId _assetGroupId)
    {
        next initFromAssetGroupId(_assetGroupId);

        AssetGroup assetGroup;

        assetGroup = AssetGroup::find(_assetGroupId);
        this.AssetType = assetGroup.AssetType;
        this.MajorType = assetGroup.MajorType;
        this.PropertyType = assetGroup.PropertyType;
        this.Location = assetGroup.Location;
        this.LBALeaseBackContract = assetGroup.LBALeaseBackContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        Common originalRecord = this.orig();

        next renamePrimaryKey();

        BOBObjectManager::renameFixedAsset(originalRecord.(fieldNum(AssetTable, AssetId)), this.AssetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = next validateField(_fieldid);

        switch (_fieldId)
        {
            case fieldNum(AssetTable, MainAssetId):
                ret = ret && this.BOBCheckMainAssetId();
                break;

            case fieldNum(AssetTable, BOBDepreciateUntil):
                ret = ret && this.BOBCheckLastOnRentDate();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBCheckLastOnRentDate</Name>
				<Source><![CDATA[
    // extension methods

    private boolean BOBCheckLastOnRentDate()
    {
        boolean ret = true;
        
        if(!AssetParameters::find().BOBAutoFillPostingDates)
        {
            BOBObjectTable          objectTable;
            BOBObjectAssetLog       objectAssetLog;
            BOBObjectOwnershipLog   ownershipParm;

            select firstonly LastOnRentDate from ownershipParm
            order by CreatedDateTime desc
                join ObjectId from objectAssetLog
                where objectAssetLog.AssetCompanyId == this.DataAreaId
                &&    objectAssetLog.ObjectId == ownershipParm.ObjectId
                &&    objectAssetLog.AssetId == this.AssetId
                    exists join objectTable
                    where objectTable.ObjectId == objectAssetLog.ObjectId
                    &&    objectTable.Category == BOBObjectCategory::Rental
                    &&  (!objectTable.InventSerialId || (objectAssetLog.ValidFrom <= this.BOBDepreciateUntil &&
                                                        (!objectAssetLog.ValidTo || objectAssetLog.ValidTo >= this.BOBDepreciateUntil)));
            
            if (objectAssetLog.ObjectId && !ownershipParm.LastOnRentDate)
            {
                ret = checkFailed(strFmt("@DNR7654", objectAssetLog.ObjectId));
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBCheckMainAssetId</Name>
				<Source><![CDATA[
    private boolean BOBCheckMainAssetId()
    {
        boolean ret = true;
        AssetTable orig;

        if(this.RecId)
        {
            orig = this.orig();
        }
        
        if(orig && this.MainAssetId != orig.MainAssetId && orig.BOBIsBulkChild()) // validate whether it is allowed to move it out of its current parent
        {
            ret = checkFailed(strFmt("@DNR6685", this.AssetId));
        }
        else if(this.MainAssetId && AssetTable::find(this.MainAssetId).BOBIsBulkParent) // validate whether it is allowed to move it into the new target parent
        {
            ret = checkFailed(strFmt("@DNR6685", this.MainAssetId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayFleetNumber</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBFleetNumber BOBDisplayFleetNumber()
    {
        return ((this.RecId && !this.BOBIsBulkChild()) ? BOBObjectTable::findByAssetId(this.AssetId).FleetNumber : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayInventSerialId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display InventSerialId BOBDisplayInventSerialId()
    {
        return ((this.RecId && !this.BOBIsBulkChild()) ? BOBObjectTable::findByAssetId(this.AssetId).InventSerialId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayItemId</Name>
				<Source><![CDATA[
    [SysObsolete('Obsolete', false),
     SysClientCacheDataMethodAttribute(true)]
    display ItemId BOBDisplayItemId()
    {
        InventTable inventTable;
        
        if (this.RecId)
        {
            BOBObjectTable objectTable = BOBObjectTable::findByAssetId(this.AssetId);

            if (objectTable)
            {
                inventTable = objectTable.inventTable();
            }
        }
        
        return inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayProductId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display EcoResProductDisplayProductNumber BOBDisplayProductId()
    {
        return  BOBObjectTable::findByAssetId(this.AssetId).AcqProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayObjectId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBObjectId BOBDisplayObjectId()
    {
        BOBObjectTable objectTable;

        if (this.RecId)
        {
            objectTable = BOBObjectTable::findByAssetId(this.AssetId);
        }
        
        return objectTable.ObjectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBIsBulkChild</Name>
				<Source><![CDATA[
    public boolean BOBIsBulkChild()
    {
        return this.MainAssetId && (select firstOnly RecId from AssetTable
                                    where AssetTable.AssetId == this.MainAssetId
                                    &&    AssetTable.BOBIsBulkParent).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBUpdateAssetBook</Name>
				<Source><![CDATA[
    public void BOBUpdateAssetBook(AssetTable _assetTableOrig)
    {
        AssetBook               assetBook;
        AssetTable              this_Orig = this.orig();
        AssetGroupBookSetup     assetGroupBookSetup;
        AssetServiceLifeMonths  serviceLifeMonths;
        
        #TimeConstants
        ;
        
        if (    (this.SortingId             != _assetTableOrig.SortingId)            ||
                (this.BOBDepreciateUntil    != _assetTableOrig.BOBDepreciateUntil)   ||
                (this.BOBManufacturingDate  != _assetTableOrig.BOBManufacturingDate)
           )
        {
            while select forupdate assetBook
            where assetBook.AssetId == this.AssetId
            {
                // LifeTime
                if (this.BOBManufacturingDate != _assetTableOrig.BOBManufacturingDate) //skip lifeTime code if field not changed
                {
                    assetGroupBookSetup   = AssetGroupBookSetup::find(assetBook.AssetGroup, assetBook.BookId);
                    serviceLifeMonths     = assetGroupBookSetup.LifeTime;
                    if (serviceLifeMonths)
                    {
                        assetBook.ServiceLife = serviceLifeMonths / #MonthsPerYear;
                    }
                    
                    if (!this.BOBManufacturingDate || !assetBook.DepreciationStartDate || this.BOBManufacturingDate > assetBook.DepreciationStartDate)
                    {
                        assetBook.LifeTime = serviceLifeMonths;
                    }
                    else
                    {
                        assetBook.LifeTime = serviceLifeMonths - real2int(assetBook.BOBCalcMonthDifference(this.BOBManufacturingDate, assetBook.DepreciationStartDate));
                    }
                    
                    if (assetBook.DepreciationStartDate && assetBook.LastDepreciationDate && assetBook.DepreciationStartDate != assetBook.LastDepreciationDate)
                    {
                        assetBook.LifeTimeRest = assetBook.LifeTime - assetBook.BOBCalcMonthDifference(assetBook.DepreciationStartDate, assetBook.LastDepreciationDate);
                    }
                    else
                    {
                        assetBook.LifeTimeRest = assetBook.LifeTime;
                    }
                }
                
                assetBook.SortingId  = this.SortingId;
                assetBook.SortingId2 = this.SortingId2;
                assetBook.SortingId3 = this.SortingId3;
                assetBook.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LBADisplayContractNumInt</Name>
				<Source><![CDATA[
    display LBAContractNumInt LBADisplayContractNumInt()
    {
        LBAContractNumInt ret = '';
        
        if (this.RecId)
        {
            LBAContractObject   contractObject;
            BOBObjectAssetLog   objectAssetLog;
            BOBObjectTable      objectTable;

            select firstOnly contractObject
                exists join objectAssetLog
                where objectAssetLog.AssetCompanyId == this.DataAreaId
                &&    objectAssetLog.ObjectId == contractObject.BOBObjectId
                &&    objectAssetLog.AssetId == this.AssetId
                    join TableId from objectTable
                    where objectTable.ObjectId == objectAssetLog.ObjectId
                    &&  (!objectTable.InventSerialId 
                     || (objectAssetLog.ValidFrom <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) 
                        && (!objectAssetLog.ValidTo || objectAssetLog.ValidTo >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));

            ret = contractObject.ContractNumInt;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBBulkParentExistsForItem</Name>
				<Source><![CDATA[
    public static boolean BOBBulkParentExistsForItem(ItemId _itemId)
    {
        AssetTable          assetTable;
        BOBObjectTable      objectTable;
        BOBObjectAssetLog   objectAssetLog;
        EcoResProduct       ecoResProduct;
        InventTable         inventTable;
        ;
        
        select firstOnly RecId from assetTable
        where assetTable.BOBIsBulkParent
            exists join objectAssetLog
            where objectAssetLog.AssetCompanyId == assetTable.DataAreaId
            &&    objectAssetLog.AssetId == assetTable.AssetId
                join TableId from objectTable
                where !objectTable.InventSerialId
                &&     objectTable.ObjectId == objectAssetLog.ObjectId
                    join TableId from ecoResProduct
                    where ecoResProduct.BOBRentalTypeId == objectTable.RentalTypeId
                        join TableId from inventTable
                        where inventTable.ItemId == _itemId
                        &&    inventTable.Product == ecoResProduct.RecId;
        
        return (assetTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBLookupAssetTable</Name>
				<Source><![CDATA[
    public static void BOBLookupAssetTable(FormStringControl _ctrl, Common _callerRecord, FormRun _callerFormRun)
    {
        Args args = new Args();
        args.name(formStr(BOBAssetTableLookup));
        args.caller(_callerFormRun);
        args.record(_callerRecord);
        
        FormRun formRun = classFactory.formRunClass(args);
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBNewBulkParentAssetId</Name>
				<Source><![CDATA[
    public static AssetId BOBNewBulkParentAssetId(AssetGroupId _assetGroupId)
    {
        AssetTable              dummyAssetTable;
        AssetGroup              assetGroup;
        AssetId                 ret;
        
        NumberSeq               assetIdNumberSeq;
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceReference numberSequenceReference;
        ;
        
        // It is only possible create fixed assets when the number sequence is marked as continuous
        select firstonly Continuous from numberSequenceTable
            join AutoNumberSequenceTable from assetGroup
            where assetGroup.GroupId == _assetGroupId
            &&    numberSequenceTable.RecId == assetGroup.AutoNumberSequenceTable;
        
        if(numberSequenceTable.Continuous == NoYes::No)
        {
            if(assetGroup.AutoNumberSequenceTable)
            {
                throw error("@SYS116327");
            }
            else
            {
                if(AssetParameters::find().AutoNumber)
                {
                    numberSequenceReference = AssetParameters::numRefAssetId();
                    
                    select firstOnly Continuous from numberSequenceTable
                    where numberSequenceTable.RecId == numberSequenceReference.NumberSequenceId;
                    
                    if(numberSequenceTable.Continuous == NoYes::No)
                    {
                        throw error("@SYS116327");
                    }
                }
                else
                {
                    throw error("@SYS122736");
                }
            }
        }
        
        assetIdNumberSeq = dummyAssetTable.initAssetNumberSeq(_assetGroupId);
        
        if(assetIdNumberSeq)
        {
            ret = assetIdNumberSeq.num();
            assetIdNumberSeq.used();
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnInserting</Name>
				<Source><![CDATA[
    // event handler methods

    [DataEventHandler(tableStr(AssetTable), DataEventType::Inserting)]
    public static void DNREvent_OnInserting(Common _sender, DataEventArgs _eventArgs)
    {
        AssetTable assetTable = _sender as AssetTable;

        if (assetTable.LBALeaseBackContract)
        {
            BOBObjectTable objectTable = BOBObjectTable::findByAssetId(assetTable.AssetId);

            if (objectTable.ObjectId)
            {
                LBACreateContract createContract = LBACreateContract::construct(objectTable.ObjectId);
                createContract.createContractTable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(AssetTable), DataEventType::Updated)]
    public static void DNREvent_OnUpdated(Common _sender, DataEventArgs _eventArgs)
    {
        AssetTable assetTable   = _sender as AssetTable;
        AssetTable this_Orig    = assetTable.orig();

        assetTable.BOBUpdateAssetBook(this_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_OnDeleting</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(AssetTable), DataEventType::Deleting)]
    public static void DNREvent_OnDeleting(Common _sender, DataEventArgs _eventArgs)
    {
        AssetTable assetTable = _sender as AssetTable;

        BOBObjectManager::unlinkFixedAsset(assetTable.AssetId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>