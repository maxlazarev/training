<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRSalesQuotationTableTypeClass_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationTableType))]
public final class DNRSalesQuotationTableTypeClass_Extension
{
    // chain-of-command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    public void updated(SalesQuotationTable _salesQuotationTableOrig)
    {
        next updated(_salesQuotationTableOrig);

        smmBusRelTable      busRelTable;
    
        if(salesQuotationTable.CustAccount && salesQuotationTable.CustAccount != _salesQuotationTableOrig.CustAccount)
        {
            busRelTable = smmBusRelTable::findCust(salesQuotationTable.CustAccount);
            DNRAdditionalNoteTable::copyNotes(busRelTable, salesQuotationTable);
        }
        else if(salesQuotationTable.BusRelAccount && salesQuotationTable.BusRelAccount != _salesQuotationTableOrig.BusRelAccount)
        {
            busRelTable = salesQuotationTable.smmBusRelTable();
            DNRAdditionalNoteTable::copyNotes(busRelTable, salesQuotationTable);
        }
    
        if(salesQuotationTable.RORVenueCode && salesQuotationTable.RORVenueCode != _salesQuotationTableOrig.RORVenueCode)
        {
            RORVenueTable venueTable = RORVenueTable::find(salesQuotationTable.RORVenueCode);
            DNRAdditionalNoteTable::copyNotes(venueTable, salesQuotationTable);
            WPPTaskRequirements::copyTaskRequirements(venueTable, salesQuotationTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    public void inserted()
    {
        next inserted();

        smmBusRelTable busRelTable = (salesQuotationTable.CustAccount ?
                                        smmBusRelTable::findCust(salesQuotationTable.CustAccount) :
                                        salesQuotationTable.smmBusRelTable());
    
        if(busRelTable)
        {
            DNRAdditionalNoteTable::copyNotes(busRelTable, salesQuotationTable);
        }

        if(salesQuotationTable.RORVenueCode)
        {
            RORVenueTable venueTable = RORVenueTable::find(salesQuotationTable.RORVenueCode);
            DNRAdditionalNoteTable::copyNotes(venueTable, salesQuotationTable);
            WPPTaskRequirements::copyTaskRequirements(venueTable, salesQuotationTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        next initValue();

        SalesParameters salesParameters = SalesParameters::find();
        salesQuotationTable.SalesPoolId = DNRWorkerDefaults::SalesPoolId(salesParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayConfirmationBeUpdated()
    {
        next mayConfirmationBeUpdated();

        return (!salesQuotationTable.isTemplate() 
            && (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent
                && salesQuotationTable.CustAccount
                && smmOpportunityTable::find(salesQuotationTable.OpportunityId).Status != smmOpportunityStatus::Postponed
                ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayQuotationBeUpdated()
    {
        boolean ret = next mayQuotationBeUpdated();

        //only if workflow is approved enable send button
        if (!ret && isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ret = (!salesQuotationTable.isTemplate()
                    && ((salesQuotationTable.QuotationStatus == SalesQuotationStatus::Approved || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent)
                    || (salesQuotationTable.QuotationStatus != SalesQuotationStatus::Confirmed
                    &&  (salesQuotationTable.QuotationType == QuotationType::Sales      ||
                         salesQuotationTable.QuotationType == QuotationType::RORRental  ||
                         salesQuotationTable.QuotationType == QuotationType::Project    ||
                         salesQuotationTable.QuotationType == QuotationType::RORProjRental)))
                    && this.linesExist());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = next validateField(_fieldId);

        if (_fieldId == fieldNum(SalesQuotationTable, QuotationType))
        {
            ret = SalesQuotationTableType::construct(salesQuotationTable.orig()).RORCanTypeBeChanged(salesQuotationTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCanTypeBeChanged</Name>
				<Source><![CDATA[
    // extension methods

    public boolean RORCanTypeBeChanged(SalesQuotationTable _salesQuotationTable)
    {
        boolean     ret = true;
        DictEnum    dictEnum;
    
        if ((_salesQuotationTable.QuotationType == QuotationType::RORRental
        &&   salesQuotationTable.QuotationType != QuotationType::RORRental)
        ||  (_salesQuotationTable.QuotationType == QuotationType::RORProjRental
        &&   salesQuotationTable.QuotationType != QuotationType::RORProjRental))
        {
            dictEnum = new DictEnum(enumNum(QuotationType));
            ret = checkFailed(strFmt("@DNR6715", dictEnum.value2Label(enum2int(_salesQuotationTable.QuotationType)), "@DNR5855", "@DNR5976"));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORlastQuotationInspection</Name>
				<Source><![CDATA[
    display QuotationIdBase RORlastQuotationInspection()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>