<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRDNRRORPurchTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(DNRRORPurchTable))]
public final class DNRDNRRORPurchTableForm_Extension
{
    private PurchLine purchLinePreDelete;
    private RecId purchLineRecIdParent;
    private PurchLine purchLine_orig;
    private boolean rereadLines;
    private boolean showRentalLineEditor;
    private boolean updateKitPricing;
    private boolean purchLineInserted;
    private boolean lineAmountModified;

    // Chain-of-Command wrapper methods

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>intercompanySalesTableFormStr</Name>
				<Source><![CDATA[
    protected str intercompanySalesTableFormStr()
    {
        str ret = next intercompanySalesTableFormStr();

        ret = formStr(RORSalesTable);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void  init()
    {
        next init();

        FINDimValueController::setEditableDimensionSet(tableNum(PurchTable), DimensionEntryControlHeader);
        FINDimValueController::setEditableDimensionSet(tableNum(PurchLine), DimensionEntryControlLine);

        this.RORUpdateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceMatchingAccess</Name>
				<Source><![CDATA[
    public void invoiceMatchingAccess()
    {
        next invoiceMatchingAccess();

        invoiceMatching.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORItemId_onLookup</Name>
				<Source><![CDATA[
    // Extension methods

    public void RORItemId_onLookup(FormControl _callingControl)
    {
        FormDataObject itemIdField = PurchLine_ds.object(fieldNum(PurchLine, ItemId));
        Args args = new Args(formStr(RORRentalInventItemIdLookup));
        args.caller(this);
        args.record(purchLine);
        args.parm(_callingControl.valueStr());
        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        itemIdField.performFormLookup(formRun, _callingControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateDesign</Name>
				<Source><![CDATA[
    public void RORUpdateDesign()
    {
        boolean showRentalDateTimes = isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes));

        TabLineRentalDates.visible(showRentalDateTimes);
        TabHeaderRentalDates.visible(showRentalDateTimes);

        this.RORUpdateAmendmentLogLineActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateAmendmentLogLineActions</Name>
				<Source><![CDATA[
    public void RORUpdateAmendmentLogLineActions()
    {
        boolean showLineActions = (PurchLine.RecId && LineView.isActivePage() && !TabPageGrid.isActivePage());

        ROROrderAmendmentLog_Line.enabled(showLineActions);
        ROROrderAmendmentLog_LineLevel.enabled(showLineActions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORUpdateDesign_PurchLineDS</Name>
				<Source><![CDATA[
    public void RORUpdateDesign_PurchLineDS(boolean   _allowEditRentalPricing,
                                            boolean   _allowEditSalesPricing,
                                            boolean   _allowEditQty)
    {
        ItemId itemIdWarranty = RAGParameters::find().ItemIdWarranty;
        boolean canEditCalendarProfile = purchLine.RORTradeType != RORTradeType::SalesPurch 
                                         && (_allowEditRentalPricing 
                                            || purchLine.ItemId == itemIdWarranty 
                                            || purchLine.RORKitComponentType == RORKitComponentType::Kit 
                                            || purchLine.RORKitComponentType == RORKitComponentType::KitComponent);

        purchLine_ds.object(fieldNum(PurchLine, RORRentalGrossAmount)).allowEdit(_allowEditRentalPricing);
        purchLine_ds.object(fieldNum(PurchLine, PurchPrice)).enabled(_allowEditSalesPricing);

        // Only allow calendar changes for parent lines (will then cascade)
        purchLine_ds.object(fieldNum(PurchLine, DNRCalendarId)).allowEdit(canEditCalendarProfile);
        purchLine_ds.object(fieldNum(PurchLine, INVInvoiceProfileId)).allowEdit(canEditCalendarProfile);
        purchLine_ds.object(fieldNum(PurchLine, RORPriceTimeUnit)).allowEdit(canEditCalendarProfile);
        purchLine_ds.object(fieldNum(PurchLine, INVRentalModeId)).allowEdit(canEditCalendarProfile);
        purchLine_ds.object(fieldNum(PurchLine, INVRateMultiplierTier)).allowEdit(_allowEditRentalPricing || _allowEditSalesPricing);

        purchLine_ds.object(fieldnum(PurchLine, PurchQty)).allowEdit(_allowEditQty);
        purchLine_ds.object(fieldnum(PurchLine, PurchUnit)).allowEdit(_allowEditQty);
        purchLine_ds.object(fieldnum(PurchLine, QtyOrdered)).allowEdit(_allowEditQty);
        purchLine_ds.object(fieldnum(PurchLine, PurchPrice)).allowEdit(_allowEditSalesPricing);
        purchLine_ds.object(fieldnum(PurchLine, PriceUnit)).allowEdit(_allowEditSalesPricing);
        purchLine_ds.object(fieldnum(PurchLine, LineAmount)).allowEdit(_allowEditSalesPricing);
        purchLine_ds.object(fieldnum(PurchLine, PurchMarkup)).allowEdit(_allowEditSalesPricing);
        purchLine_ds.object(fieldnum(PurchLine, LineDisc)).allowEdit(_allowEditSalesPricing);
        purchLine_ds.object(fieldnum(PurchLine, LinePercent)).allowEdit(_allowEditSalesPricing);
        purchLine_ds.object(fieldnum(PurchLine, MultiLnDisc)).allowEdit(_allowEditSalesPricing);
        purchLine_ds.object(fieldnum(PurchLine, MultiLnPercent)).allowEdit(_allowEditSalesPricing);

        ROReditNetAmount.allowEdit(_allowEditRentalPricing || _allowEditSalesPricing);
        ROReditLineAmount.allowEdit(_allowEditRentalPricing || _allowEditSalesPricing);
        RORPricing_DNRPurchLineTable_Extension_ROREditNetAmount.allowEdit(_allowEditRentalPricing || _allowEditSalesPricing);

        purchLine_ds.allowDelete(PurchLine.RORLineType == RORLineType::Normal);

        RORTogglePriceType_Fixed::updateButtonDesign(RORTogglePriceType_Fixed, purchLine);
        RORTogglePriceType_Net::updateButtonDesign(RORTogglePriceType_Net, purchLine);

        RAGContractTable_PurchLine.enabled(/*LineView.isActivePage()
        && */!TabPageGrid.isActivePage()
                                            && purchLine.RORRentalDateTimesHost::rentalDateTimes().RecId != 0
                                            && RAGUtil::mustApplyRentalAgreements(purchLine.BOBRentalTypeId));

        BOBRentalTrans.enabled(purchLine.BOBRentalTypeId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmPurchLinePreDelete</Name>
				<Source><![CDATA[
    public PurchLine RORParmPurchLinePreDelete(PurchLine _purchLinePreDelete = purchLinePreDelete)
    {
        purchLinePreDelete = _purchLinePreDelete;
        return purchLinePreDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmPurchLineRecIdParent</Name>
				<Source><![CDATA[
    public RecId RORParmPurchLineRecIdParent(RecId _purchLineRecIdParent = purchLineRecIdParent)
    {
        purchLineRecIdParent = _purchLineRecIdParent;
        return purchLineRecIdParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmPurchLine_Orig</Name>
				<Source><![CDATA[
    public PurchLine RORParmPurchLine_Orig(PurchLine _purchLine_orig = purchLine_orig)
    {
        purchLine_orig = _purchLine_orig;
        return purchLine_orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmReReadLines</Name>
				<Source><![CDATA[
    public boolean RORParmReReadLines(boolean _rereadLines = rereadLines)
    {
        rereadLines = _rereadLines;
        return rereadLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmShowRentalLineEditor</Name>
				<Source><![CDATA[
    public boolean RORParmShowRentalLineEditor(boolean _showRentalLineEditor = showRentalLineEditor)
    {
        showRentalLineEditor = _showRentalLineEditor;
        return showRentalLineEditor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmUpdateKitPricing</Name>
				<Source><![CDATA[
    public boolean RORParmUpdateKitPricing(boolean _updateKitPricing = updateKitPricing)
    {
        updateKitPricing = _updateKitPricing;
        return updateKitPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmPurchLineInserted</Name>
				<Source><![CDATA[
    public boolean RORParmPurchLineInserted(boolean _purchLineInserted = purchLineInserted)
    {
        purchLineInserted = _purchLineInserted;
        return purchLineInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORParmLineAmountModified</Name>
				<Source><![CDATA[
    public boolean RORParmLineAmountModified(boolean _lineAmountModified = lineAmountModified)
    {
        lineAmountModified = _lineAmountModified;
        return lineAmountModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_MainTab_OnTabChanged</Name>
				<Source><![CDATA[
    // Event-handler methods
  
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, MainTab), FormControlEventType::TabChanged)]
    public static void DNREvent_MainTab_OnTabChanged(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.RORUpdateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ButtonInterCompanyRORSalesTable_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, ButtonInterCompanyRORSalesTable), FormControlEventType::Clicked)]
    public static void DNREvent_ButtonInterCompanyRORSalesTable_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun();
        PurchTable purchTable = formRun.dataSource(formDataSourceStr(DNRRORPurchTable, PurchTable)).cursor() as PurchTable;

        TradeInterCompany::construct(purchTable).formRun(formStr(DNRRORSalesTable), formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ButtonOriginalRORSalesTableCTRL_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, ButtonOriginalRORSalesTable), FormControlEventType::Clicked)]
    public static void DNREvent_ButtonOriginalRORSalesTableCTRL_OnClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        PurchTable purchTable = _sender.formRun().dataSource(formDataSourceStr(DNRRORPurchTable, PurchTable)).cursor() as PurchTable;

        TradeInterCompany::construct(purchTable).referenceForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RORContactPerson_M_editContactPersonNameCTRL_OnJumpRef</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, RORContactPerson_M_editContactPersonName), FormControlEventType::JumpRef)]
    public static void DNREvent_RORContactPerson_M_editContactPersonNameCTRL_OnJumpRef(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormStringControl RORContactPerson_ContactPersonId = _sender.formRun().design().controlName(formControlStr(DNRRORPurchTable, RORContactPerson_ContactPersonId)) as FormStringControl;
        RORContactPerson_ContactPersonId.jumpRef();

        FormControlCancelableSuperEventArgs ce = _eventArgs as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RORContactPerson_M_editContactPersonNameCTRL_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, RORContactPerson_M_editContactPersonName), FormControlEventType::Lookup)]
    public static void DNREvent_RORContactPerson_M_editContactPersonNameCTRL_OnLookup(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        FormStringControl RORContactPerson_ContactPersonId = formRun.design().controlName(formControlStr(DNRRORPurchTable, RORContactPerson_ContactPersonId)) as FormStringControl;
        PurchTable purchTable = formRun.dataSource(formDataSourceStr(DNRRORPurchTable, PurchTable)).cursor() as PurchTable;

        ContactPerson::lookupVendContactPerson(RORContactPerson_ContactPersonId,
                                               purchTable.OrderAccount,
                                               _sender,
                                               purchTable.ContactPersonId);

        FormControlCancelableSuperEventArgs ce = _eventArgs as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_BOBObjectTable_ObjectIdCTRL_OnJumpRef</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, BOBObjectTable_ObjectId), FormControlEventType::JumpRef)]
    public static void DNREvent_BOBObjectTable_ObjectIdCTRL_OnJumpRef(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        FormStringControl callingControl = _sender as FormStringControl;

        Args args = new Args();
        args.caller(formRun);
        
        if(callingControl.text())
        {
            args.lookupField(fieldNum(BOBObjectTable, ObjectId));
            args.lookupValue(callingControl.text());
        }
        else
        {
            args.formViewOption(FormViewOption::Grid);
        }
        
        new MenuFunction(menuitemDisplayStr(BOBObjectTable), MenuItemType::Display).run(args);

        FormControlCancelableSuperEventArgs ce = _eventArgs as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_BOBObjectTable_FleetNumberCTRL_OnJumpRef</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, BOBObjectTable_FleetNumber), FormControlEventType::JumpRef)]
    public static void DNREvent_BOBObjectTable_FleetNumberCTRL_OnJumpRef(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        FormStringControl callingControl = _sender as FormStringControl;

        Args args = new Args();
        args.caller(formRun);
        
        if(callingControl.text())
        {
            args.lookupField(fieldNum(BOBObjectTable, ObjectId));
            args.lookupValue(callingControl.text());
        }
        else
        {
            args.formViewOption(FormViewOption::Grid);
        }
        
        new MenuFunction(menuitemDisplayStr(BOBObjectTable), MenuItemType::Display).run(args);

        FormControlCancelableSuperEventArgs ce = _eventArgs as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_BOBObjectTable_AssetIdCTRL_OnJumpRef</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, BOBObjectTable_AssetId), FormControlEventType::JumpRef)]
    public static void DNREvent_BOBObjectTable_AssetIdCTRL_OnJumpRef(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        FormStringControl callingControl = _sender as FormStringControl;

        Args args = new Args();
        args.caller(formRun);
        
        if(callingControl.text())
        {
            args.lookupField(fieldNum(BOBObjectTable, AssetId));
            args.lookupValue(callingControl.text());
        }
        else
        {
            args.formViewOption(FormViewOption::Grid);
        }
        
        new MenuFunction(menuitemDisplayStr(AssetTable), MenuItemType::Display).run(args);

        FormControlCancelableSuperEventArgs ce = _eventArgs as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_ROReditLineAmountCTRL_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DNRRORPurchTable, ROReditLineAmount), FormControlEventType::Modified)]
    public static void DNREvent_ROReditLineAmountCTRL_OnModified(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        Object formRunObj = _sender.formRun() as Object;
        formRunObj.RORParmLineAmountModified(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_RORRentalDateTimesHeaderDS_OnWritten</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(DNRRORPurchTable, RORRentalDateTimesHeader), FormDataSourceEventType::Written)]
    public static void DNREvent_RORRentalDateTimesHeaderDS_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        _sender.formRun().dataSource(formDataSourceStr(DNRRORPurchTable, PurchTable)).research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNREvent_TMSPurchTableDS_ModeCode_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(DNRRORPurchTable, TMSPurchTable, ModeCode), FormDataFieldEventType::Modified)]
    public static void DNREvent_TMSPurchTableDS_ModeCode_OnModified(FormDataObject _sender, FormDataFieldEventArgs _eventArgs)
    {
        FormDataSource purchTable_ds = _sender.dataSource().formRun().dataSource(formDataSourceStr(DNRRORPurchTable, PurchTable)) as FormDataSource;
        
        purchTable_ds.reread();
        purchTable_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>