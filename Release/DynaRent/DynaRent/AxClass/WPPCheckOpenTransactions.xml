<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPCheckOpenTransactions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WPPCheckOpenTransactions
{
    // Variables
    boolean     skipMessage;
    ProjTable   projTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check(boolean    _checkMaterial      = true,
                         boolean    _checkHours         = true,
                         boolean    _checkFee           = true,
                         boolean    _checkPurchaseOrder = true,
                         boolean    _checkItemRequirements = false)
    {
        boolean allowTaskStatusUpdate = true;
    
        if (!projTable)
        {
            return allowTaskStatusUpdate;
        }
    
        if (_checkMaterial)
        {
            allowTaskStatusUpdate = this.checkMaterial();
        }
    
        if (_checkHours && allowTaskStatusUpdate)
        {
            allowTaskStatusUpdate = this.checkHours();
        }
    
        if (_checkFee && allowTaskStatusUpdate)
        {
            allowTaskStatusUpdate = this.checkFee();
        }
    
        if (_checkPurchaseOrder && allowTaskStatusUpdate)
        {
            allowTaskStatusUpdate = this.checkPurchTable();
        }
    
        if (_checkItemRequirements && allowTaskStatusUpdate)
        {
            allowTaskStatusUpdate = this.checkItemRequirements();
        }
    
        return allowTaskStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFee</Name>
				<Source><![CDATA[
    private boolean checkFee()
    {
        ProjJournalTrans    projJournalTrans;
        ProjJournalTable    projJournalTable;
        boolean             ret;
    
        ret = true;
    
        if (projTable.ProjId)
        {
            select firstonly RecId from projJournalTrans
            where projJournalTrans.ProjId like projTable.ProjId + '*'
                exists join projJournalTable
                where projJournalTable.JournalId     == projJournalTrans.JournalId
                &&   !projJournalTable.Posted;
    
            if (projJournalTrans.RecId)
            {
                ret = (skipMessage ? false : checkFailed(strFmt("@DNR2622", projTable.ProjId, "@SYS335737")));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHours</Name>
				<Source><![CDATA[
    private boolean checkHours()
    {
        ProjJournalTrans    projJournalTrans;
        ProjJournalTable    projJournalTable;
        boolean             ret;
    
        ret = true;
    
        if (projTable.ProjId)
        {
            select firstonly RecId from projJournalTrans
            where projJournalTrans.ProjId like projTable.ProjId + '*'
                exists join projJournalTable
                where projJournalTable.JournalId     == projJournalTrans.JournalId
                &&   !projJournalTable.Posted;
    
            if (projJournalTrans.RecId)
            {
                ret = (skipMessage ? false : checkFailed(strFmt("@DNR2622", projTable.ProjId, "@SYS75774")));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemRequirements</Name>
				<Source><![CDATA[
    private boolean checkItemRequirements()
    {
        SalesLine       salesLine;
        boolean         ret;
    
        ret = true;
    
        if (projTable.ProjId)
        {
            select firstonly RecId from salesLine
            where salesLine.SalesType == SalesType::ItemReq
            &&    salesLine.ProjId like projTable.ProjId + '*'
            &&   (salesLine.SalesStatus == SalesStatus::None || salesLine.SalesStatus == SalesStatus::Backorder);
    
            if (salesLine.RecId)
            {
                ret = (skipMessage ? false : checkFailed(strFmt("@DNR2622", projTable.ProjId, "@SYS55122")));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaterial</Name>
				<Source><![CDATA[
    private boolean checkMaterial()
    {
        InventJournalTrans  inventJournalTrans;
        InventJournalTable  inventJournalTable;
        boolean             ret;
    
        ret = true;
    
        if (projTable.ProjId)
        {
            select firstonly RecId from inventJournalTrans
            where inventJournalTrans.ProjId like projTable.ProjId + '*'
                exists join inventJournalTable
                where inventJournalTable.JournalId     == inventJournalTrans.JournalId
                &&   !inventJournalTable.Posted;
    
            if (inventJournalTrans.RecId)
            {
                ret = (skipMessage ? false : checkFailed(strFmt("@DNR2622", projTable.ProjId, "@SYS91516")));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchTable</Name>
				<Source><![CDATA[
    private boolean checkPurchTable()
    {
        boolean         ret;
        PurchTable      purchTable;
        ProjParameters  projParameters;
        WPPParameters   parameters;
    
        ret = true;
    
        if (projTable.ProjId)
        {
            projParameters = ProjParameters::find();
    
            if (!projParameters.CreateItemReqForPO
            &&  !projParameters.AutomaticItemConsumption)
            {
                parameters = WPPParameters::find();
    
                // Don't check anything when the status is None
                if (parameters.ProjectPurchaseOrderValidationStatus)
                {
                    switch (parameters.ProjectPurchaseOrderValidationStatus)
                    {
                        case WPPProjectPurchaseOrderValidationStatus::None:
                            select firstonly RecId from purchTable
                            where purchTable.ProjId like projTable.ProjId + '*'
                            &&    purchTable.PurchStatus == PurchStatus::None;
                            break;
    
                        case WPPProjectPurchaseOrderValidationStatus::Open:
                            select firstonly RecId from purchTable
                            where purchTable.ProjId like projTable.ProjId + '*'
                            &&    purchTable.PurchStatus == PurchStatus::None
                            &&    purchTable.PurchStatus == PurchStatus::Backorder;
                            break;
    
                        case WPPProjectPurchaseOrderValidationStatus::Received:
                            select firstonly RecId from purchTable
                            where purchTable.ProjId like projTable.ProjId + '*'
                            &&    purchTable.PurchStatus == PurchStatus::None
                            &&    purchTable.PurchStatus == PurchStatus::Backorder
                            &&    purchTable.PurchStatus == PurchStatus::Received;
                            break;

                        default:
                        // Do nothing
                    }

                    if (purchTable)
                    {
                        ret = (skipMessage ? false : checkFailed(strFmt("@DNR2622", projTable.ProjId, "@SYS115660")));
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    public ProjTable parmProjTable(ProjTable _projTable = projTable)
    {
        projTable = _projTable;
    
        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipMessage</Name>
				<Source><![CDATA[
    public boolean parmSkipMessage(boolean _skipMessage = skipMessage)
    {
        skipMessage = _skipMessage;
    
        return skipMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static server WPPCheckOpenTransactions construct(ProjTable _projTable, boolean _skipMessage)
    {
        WPPCheckOpenTransactions checkOpenTransactions = new WPPCheckOpenTransactions();
    
        checkOpenTransactions.parmProjTable(_projTable);
        checkOpenTransactions.parmSkipMessage(_skipMessage);
    
        return checkOpenTransactions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>