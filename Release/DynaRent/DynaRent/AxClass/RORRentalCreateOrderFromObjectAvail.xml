<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalCreateOrderFromObjectAvail</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RORRentalCreateOrderFromObjectAvail
{
    SalesTable                  salesTable;
    BOBTmpObjectAvailability    tmpObjectAvailability;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates rental order.
    /// </summary>
    /// <returns>
    ///   The record of the new sales order if the order was created; otherwise, null.
    /// </returns>
    public SalesTable create()
    {
        this.createTable();
    
        if (salesTable)
        {
            this.createLine();
        }
    
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    private void createLine()
    {
        SalesLine salesLine;
           
        salesLine.initValue();
        salesLine.initFromSalesTable(salesTable);
        salesLine.RORTradeType = RORTradeType::Rental;
    
        if (tmpObjectAvailability.RentalTypeId)
        {
            InventTable     inventTable;
            EcoResProduct   product;

            select firstonly TableId from product
            where product.DisplayProductNumber == tmpObjectAvailability.ProductDisplayNumber
                join inventTable
                where inventTable.Product == product.RecId;

            if (!inventTable)
            {
                throw error ("@DNR:ReleasedProductNotFound");
            }
            
            salesLine.ItemId = inventTable.ItemId;
            salesLine.itemIdChanged();
            salesLine.initFromInventTable(inventTable);
        
            salesLine.SalesQty     = 1;
            salesLine.SalesUnit    = inventTable.salesUnitId();
            salesLine.SalesPrice   = inventTable.salesPcsPrice();
        }

        salesLine.setPriceDisc(salesLine.inventDim());
        salesLine.createLine();

        RORRentalLineEditorForm::createSupplementaryItemsLines(salesLine);
    
        //Assign serial number
        if (salesLine)
        {
            ttsBegin;
            BOBObjectAssignmentEngine objectAssignmentEngine = BOBObjectAssignmentEngine::construct(salesLine, tmpObjectAvailability.InventSerialId);
            objectAssignmentEngine.runOperation();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    private void createTable()
    {
        SalesTableForm  salesTableForm;
    
        salesTableForm = SalesTableForm::construct(SalesTableFormId::RORRentalOrder, null);
    
        if (salesTableForm.create())
        {
            salesTable = salesTableForm.salesTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpObjectAvailability</Name>
				<Source><![CDATA[
    public BOBTmpObjectAvailability parmTmpObjectAvailability(BOBTmpObjectAvailability _tmpObjectAvailability = tmpObjectAvailability)
    {
        tmpObjectAvailability = _tmpObjectAvailability;
    
        return tmpObjectAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RORRentalCreateOrderFromObjectAvail construct()
    {
        return new RORRentalCreateOrderFromObjectAvail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Args                                salesOrderCreateArgs;
        SalesTable                          salesTable;
        RORRentalCreateOrderFromObjectAvail rentalCreateOrder;
    
        salesOrderCreateArgs = new Args();
        rentalCreateOrder = RORRentalCreateOrderFromObjectAvail::construct();
    
        if (!_args || !_args.record() || _args.dataset() != tableNum(BOBTmpObjectAvailability))
        {
            throw error(strFmt("@SYS29104", classStr(RORRentalCreateOrderFromObjectAvail)));
        }
    
        rentalCreateOrder.parmTmpObjectAvailability(_args.record());
    
        salesTable = rentalCreateOrder.create();
    
        if (!salesTable)
        {
            return; // Sales order creation was canceled
        }
    
        salesOrderCreateArgs.record(salesTable);
        salesOrderCreateArgs.caller(_args.caller());
        salesOrderCreateArgs.parmObject(_args.caller());
        salesOrderCreateArgs.openMode(OpenMode::Edit);
    
        new MenuFunction(menuitemDisplayStr(RORSalesTableForEdit), MenuItemType::Display).run(salesOrderCreateArgs);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>