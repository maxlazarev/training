<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WPPDuplicateWorkOrderLine</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WPPDuplicateWorkOrderLine extends FormRun
{
    WPPWorkOrderLine            workOrderLine;
    WPPServicePlanboardSettings servicePlanboardSettings;
    Object                      spbFormRun;

    WPPDuplicateWorkOrderLine   duplicateWorkOrderLine;
}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean     ret;
        utcDateTime fromDateTime;
        utcDateTime toDateTime;
    
        ret = super();
    
        if (ret && element.closedOk())
        {
            if (ChangeResource.checked()
            &&  !NewResource.text())
            {
                ret = checkFailed(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(WrkCtrId))));
            }
    
            if (ChangeDate.checked())
            {
                fromDateTime = NewFromDateTime.dateTimeValue();
                toDateTime   = NewToDateTime.dateTimeValue();
    
                if (!fromDateTime || !toDateTime)
                {
                    ret = checkFailed(strFmt("@DNR7264", extendedTypeId2pname(extendedTypeNum(FromDateTime)), extendedTypeId2pname(extendedTypeNum(ToDateTime))));
                }
                else
                if (fromDateTime > toDateTime)
                {
                    ret = checkFailed("@SYS91020");
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {    
        if (element.closedOk())
        {
            duplicateWorkOrderLine.parmDuplicateAdditionalNotes(DuplicateAdditionalNotes.checked());
            duplicateWorkOrderLine.parmDuplicateResourcePlanning(DuplicateResourcePlanning.checked());
            duplicateWorkOrderLine.parmChangeResource(ChangeResource.checked());
            duplicateWorkOrderLine.parmNewResourceType(NewResourceType.selection());
            duplicateWorkOrderLine.parmNewResource(NewResource.text());
            duplicateWorkOrderLine.parmChangeDate(ChangeDate.checked());
            duplicateWorkOrderLine.parmNewFromDateTime(NewFromDateTime.dateTimeValue());
            duplicateWorkOrderLine.parmNewToDateTime(NewToDateTime.dateTimeValue());
            duplicateWorkOrderLine.run();
    
            if (spbFormRun)
            {
                spbFormRun.refreshApply(false, true);
            }
            else
            if (FormDataUtil::isFormDataSource(workOrderLine))
            {
                FormDataSource formDataSource = FormDataUtil::getFormDataSource(workOrderLine);
                formDataSource.research(true);
            }
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        WPPWorkOrderLineListPageView    workOrderLineListPageView;
    
        if (element.args().dataset() != tableNum(WPPWorkOrderLine)
        && element.args().dataset() != tableNum(WPPWorkOrderLineListPageView))
        {
            throw error(Error::missingFormActiveBuffer("@DNR6913", tableId2pname(tableNum(WPPWorkOrderLine))));
        }
    
        if (element.args().dataset() == tableNum(WPPWorkOrderLineListPageView))
        {
            workOrderLineListPageView = element.args().record();
            workOrderLine = WPPWorkOrderLine::find(workOrderLineListPageView.WorkOrderId, workOrderLineListPageView.LineNumber);
        }
        else
        {
            workOrderLine = element.args().record();
        }
    
        duplicateWorkOrderLine = new WPPDuplicateWorkOrderLine(workOrderLine);
    
        super();
    
        element.updateDesign();
    
        //if (element.args().caller().name() == formStr(WPPServicePlanBoard))
        //{
            //spbFormRun = element.args().caller();
            //servicePlanboardSettings = spbFormRun.getSettings();
            //element.setDefaults();
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaults</Name>
				<Source><![CDATA[
    private void setDefaults()
    {
        NewResourceType.selection(enum2int(servicePlanboardSettings.PlanBy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        boolean mandatoryResource;
        boolean mandatoryDates;
        boolean copyResourcePlanning;
    
        mandatoryResource    = ChangeResource.checked();
        mandatoryDates       = ChangeDate.checked();
        copyResourcePlanning = DuplicateResourcePlanning.checked();
    
        if (!copyResourcePlanning)
        {
            ChangeResource.checked(false);
        }
    
        ChangeResource.allowEdit(copyResourcePlanning);
        NewResourceType.allowEdit(mandatoryResource);
        NewResource.allowEdit(mandatoryResource);
        NewResource.mandatory(mandatoryResource);
    
        NewFromDateTime.allowEdit(mandatoryDates);
        NewFromDateTime.mandatory(mandatoryDates);
        NewToDateTime.allowEdit(mandatoryDates);
        NewToDateTime.mandatory(mandatoryDates);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>DuplicateResourcePlanning</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            element.updateDesign();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ChangeResource</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            element.updateDesign();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewResourceType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            NewResource.text('');
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewResource</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args argsLoc = new Args();
            
            argsLoc.lookupField(fieldNum(WPPResourceTable, ResourceId));
            argsLoc.lookupValue(this.text());

            WPPResourceTableMainTable::main(argsLoc);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query;
            QueryBuildDataSource    qbdsResourceTable;
            SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(WPPResourceTable), this);

            sysTableLookup.addLookupfield(fieldNum(WPPResourceTable, ResourceId));
            sysTableLookup.addLookupfield(fieldNum(WPPResourceTable, IsIndividualResource));
            sysTableLookup.addLookupfield(fieldNum(WPPResourceTable, Name));
            sysTableLookup.addLookupfield(fieldNum(WPPResourceTable, ResourceCategory));
            sysTableLookup.addLookupfield(fieldNum(WPPResourceTable, RelationAccount));

            query =new Query();
            qbdsResourceTable = query.addDataSource(tableNum(WPPResourceTable));

            if(servicePlanboardSettings.ResourceTypeId)
            {
                qbdsResourceTable.addRange(fieldNum(WPPResourceTable, ResourceTypeId)).value(servicePlanboardSettings.ResourceTypeId);
            }
            
            if (NewResourceType.selection() == WrkCtrGroupWrkCtr::WrkCtrGroup)
            {
                qbdsResourceTable.addRange(fieldNum(WPPResourceTable, IsIndividualResource)).value(SysQuery::value(NoYes::No));

            }
            else
            {
                qbdsResourceTable.addRange(fieldNum(WPPResourceTable, IsIndividualResource)).value(SysQuery::value(NoYes::Yes));
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();

        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean             ret;
            WPPResourceTable    resourceTable;
            WPPResourceId       selectedResource;
        
            ret = true;
            selectedResource = NewResource.text();
        
            if (selectedResource)
            {
                resourceTable = WPPResourceTable::find(selectedResource);
            }
        
            switch (NewResourceType.selection())
            {
                case enum2int(WrkCtrGroupWrkCtr::WrkCtrGroup):
                    if (selectedResource
                    &&  (!resourceTable || resourceTable.IsIndividualResource))
                    {
                        ret = checkFailed(strFmt("@DNR2944", selectedResource, extendedTypeId2pname(extendedTypeNum(WPPResourceId)), tableId2pname(tableNum(WPPResourceTable))));
                    }
                    break;
        
                case enum2int(WrkCtrGroupWrkCtr::WrkCtr):
                    if (selectedResource
                    &&  (!resourceTable || !resourceTable.IsIndividualResource))
                    {
                        ret = checkFailed(strFmt("@DNR2944", selectedResource, extendedTypeId2pname(extendedTypeNum(WPPResourceId)), tableId2pname(tableNum(WPPResourceTable))));
                    }
                    break;
        
                default:
                    throw error("@SYS105428");
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ChangeDate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            element.updateDesign();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DNR6913</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SaveSize xmlns="">No</SaveSize>
		<Style xmlns="">Dialog</Style>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DuplicateAdditionalNotes</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS94241</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DuplicateResourcePlanning</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1324281580</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@DNR362</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ChangeResource</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1527099479</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@DNR827</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ChangeResourceGroup</Name>
						<ElementPosition>1729917378</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>NewResourceType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS309732</HelpText>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>WrkCtrGroupWrkCtr</EnumType>
								<Label>@SYS81228</Label>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>NewResource</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Num</ExtendedDataType>
								<Label>@SYS115965</Label>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ChangeDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1932735279</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS68704</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ChangeDateGroup</Name>
						<ElementPosition>2040109461</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>NewFromDateTime</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>FromDateTime</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>NewToDateTime</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ToDateTime</ExtendedDataType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>