<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DNRAdditionalNoteTable</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DNRAdditionalNoteTable extends FormRun
{
    boolean wereNotesChanged;

}
]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineFromShipment</Name>
				<Source><![CDATA[
    public SalesLine getSalesLineFromShipment(WHSShipmentTable _shipment)
    {
        SalesLine salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWereNotesChanged</Name>
				<Source><![CDATA[
    public boolean getWereNotesChanged()
    {
        return wereNotesChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #Task
        int ret;
    
        // Don't allow the user to create new records. We cannot set the AllowCreate
        // property on the data source to FALSE, because we need the InsertIfEmpty behavior.
        if (_taskId != #taskNew)
        {
            ret = super(_taskId);
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>AdditionalNoteTable</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            BOBMaintenanceHistoryView       callerMaintenanceHistoryView;
            WPPTmpServicePlanboardData      tmpServicePlanboardData;
            WPPTmpTransportPlanboardData    tmpTransportPlanboardData;
            WPPWorkOrderLine                workOrderLine;
            WPPWorkOrderTable               workOrderTable;
            WHSShipmentTable                shipment;
            SalesLine                       salesLine;
            SalesTable                      salesTable;
            InventJournalTable              inventJournalTable;
        
            super();
        
            switch (element.args().dataset())
            {
                case tableNum(BOBMaintenanceHistoryView):
                    callerMaintenanceHistoryView = element.args().record();
        
                    if (element.args().parmEnumType() == enumNum(HeadingLine)
                    &&  element.args().parmEnum()     == HeadingLine::Line)
                    {
                        workOrderLine = WPPWorkOrderLine::findRecId(callerMaintenanceHistoryView.WorkOrderLineRecId);
        
                        AdditionalNoteTable.RefTableId = workOrderLine.TableId;
                        AdditionalNoteTable.RefRecId   = workOrderLine.RecId;
                    }
                    else
                    {
                        workOrderTable = WPPWorkOrderTable::find(callerMaintenanceHistoryView.WorkOrderId);
        
                        AdditionalNoteTable.RefTableId = workOrderTable.TableId;
                        AdditionalNoteTable.RefRecId   = workOrderTable.RecId;
                    }
                    break;
        
                case tableNum(WPPTmpServicePlanboardData):
                    tmpServicePlanboardData = element.args().record();
        
                    if (element.args().parmEnumType() == enumNum(HeadingLine)
                    &&  element.args().parmEnum()     == HeadingLine::Line)
                    {
                        workOrderLine = WPPWorkOrderLine::findRecId(tmpServicePlanboardData.WPPWorkOrderLineRecId);
        
                        AdditionalNoteTable.RefTableId = workOrderLine.TableId;
                        AdditionalNoteTable.RefRecId   = workOrderLine.RecId;
                    }
                    else
                    {
                        workOrderTable = WPPWorkOrderTable::find(tmpServicePlanboardData.WPPWorkOrderId);
        
                        AdditionalNoteTable.RefTableId = workOrderTable.TableId;
                        AdditionalNoteTable.RefRecId   = workOrderTable.RecId;
                    }
                    break;
        
                case tableNum(WPPTmpTransportPlanboardData):
                    tmpTransportPlanboardData = element.args().record();
        
                    if (element.args().parmEnumType() == enumNum(HeadingLine)
                    &&  element.args().parmEnum()     == HeadingLine::Line)
                    {
                        if (tmpTransportPlanboardData.SalesLineRecId)
                        {
                            AdditionalNoteTable.RefTableId = tableNum(SalesLine);
                            AdditionalNoteTable.RefRecId   = tmpTransportPlanboardData.SalesLineRecId;
                        }
                        else
                        {
                            workOrderLine = WPPWorkOrderLine::findRecId(tmpTransportPlanboardData.WorkOrderLineRecId);
        
                            AdditionalNoteTable.RefTableId = workOrderLine.TableId;
                            AdditionalNoteTable.RefRecId   = workOrderLine.RecId;
                        }
                    }
                    else
                    {
                        if (tmpTransportPlanboardData.SalesTableRecId)
                        {
                            AdditionalNoteTable.RefTableId = tableNum(SalesTable);
                            AdditionalNoteTable.RefRecId   = tmpTransportPlanboardData.SalesTableRecId;
                        }
                        else
                        {
                            workOrderTable = WPPWorkOrderTable::findRecId(tmpTransportPlanboardData.WorkOrderTableRecId);
        
                            AdditionalNoteTable.RefTableId = workOrderTable.TableId;
                            AdditionalNoteTable.RefRecId   = workOrderTable.RecId;
                        }
                    }
                    break;

                case tableNum(WHSShipmentTable):
                    shipment = element.args().record();
        
                    salesLine = element.getSalesLineFromShipment(shipment) as salesLine;
        
                    if (salesLine)
                    {
                        salesTable = salesLine.salesTable();
                        AdditionalNoteTable.RefTableId = salesTable.TableId;
                        AdditionalNoteTable.RefRecId   = salesTable.RecId;
                    }
                    break;
        
                case tableNum(InventJournalTable):
                    inventJournalTable = element.args().record();
        
                    if (inventJournalTable)
                    {
                        AdditionalNoteTable.RefTableId = inventJournalTable.TableId;
                        AdditionalNoteTable.RefRecId   = inventJournalTable.RecId;
                    }
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            WPPWorkOrderLine callerWorkOrderLine;
            WPPWorkOrderLine workOrderLine;
        
            super();
        
            switch (element.args().dataset())
            {
                case tableNum(WPPWorkOrderLine):
                    callerWorkOrderLine = element.args().record();
                    if (callerWorkOrderLine.isTmp())
                    {
                        workOrderLine = WPPWorkOrderLine::find(callerWorkOrderLine.WorkOrderId, callerWorkOrderLine.LineNumber);
        
                        AdditionalNoteTable_ds.positionToRecord(DNRAdditionalNoteTable::find(workOrderLine.TableId, workOrderLine.RecId));
                    }
                    break;
        
                default:
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
        
            wereNotesChanged = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initDesignFromCaller</Name>
						<Source><![CDATA[
        private void initDesignFromCaller()
        {
            Args                            args;
            FormDataObject                  fldInternalNote,
                                            fldLocationNote,
                                            fldObjectNote,
                                            fldOrderNote,
                                            fldRouteNote,
                                            fldTerminationNote,
                                            fldInvoiceNote;
        
            SalesTable                      salesTable;
            SalesLine                       salesLine;
            salesQuotationLine              salesQuotationLine;
            SalesQuotationTable             salesQuotationTable;
            WHSShipmentTable                shipment;
            WPPTmpTransportPlanboardData    tmpTransportPlanboardData;
        
            args                = element.args();
            fldInternalNote     = this.object(fieldNum(DNRAdditionalNoteTable, InternalNote));
            fldLocationNote     = this.object(fieldNum(DNRAdditionalNoteTable, LocationNote));
            fldObjectNote       = this.object(fieldNum(DNRAdditionalNoteTable, ObjectNote));
            fldOrderNote        = this.object(fieldNum(DNRAdditionalNoteTable, OrderNote));
            fldRouteNote        = this.object(fieldNum(DNRAdditionalNoteTable, RouteNote));
            fldTerminationNote  = this.object(fieldNum(DNRAdditionalNoteTable, TerminationNote));
            fldInvoiceNote      = this.object(fieldNum(DNRAdditionalNoteTable, InvoiceNote));
        
            switch(args.dataset())
            {
                case tableNum(SalesTable),
                     tableNum(WHSShipmentTable):
        
                    fldInternalNote.visible(false);
                    fldObjectNote.visible(false);
                    fldTerminationNote.visible(false);
                    fldInvoiceNote.visible(false);
                    
                    if (args.dataset() == tableNum(WHSShipmentTable))
                    {
                        shipment    = args.record();
                        salesLine   = element.getSalesLineFromShipment(shipment) as salesLine;
        
                        if (salesLine)
                        {
                            salesTable = salesLine.salesTable();
                        }
                    }
                    else
                    {
                        salesTable = args.record();
                    }
        
                    if (salesTable.SalesType == SalesType::RORRental)
                    {
                        fldOrderNote.allowEdit(false);
                    }
                    else
                    {
                        fldOrderNote.visible(false);
                    }
                    break;
        
                case tableNum(SalesLine),
                     tableNum(RORRentalEditorLine) :
                    fldLocationNote.visible(false);
                    fldOrderNote.visible(false);
                    fldRouteNote.visible(false);
                    fldInvoiceNote.visible(false);
                    break;
        
                case tableNum(SalesQuotationTable):
                    salesQuotationTable = args.record();
        
                    this.allowEdit(salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created);
        
                    fldInternalNote.visible(false);
                    fldObjectNote.visible(false);
                    fldTerminationNote.visible(false);
                    fldInvoiceNote.visible(false);
        
                    if (salesQuotationTable.QuotationType == QuotationType::RORRental)
                    {
                        fldOrderNote.allowEdit(false);
                    }
                    else
                    {
                        fldOrderNote.visible(false);
                    }
                    break;
        
                case tableNum(SalesQuotationLine):
                    salesQuotationLine = args.record();
        
                    this.allowEdit(salesQuotationLine.salesQuotationTable().QuotationStatus == SalesQuotationStatus::Sent || salesQuotationLine.salesQuotationTable().QuotationStatus == SalesQuotationStatus::Created);
        
                    fldLocationNote.visible(false);
                    fldOrderNote.visible(false);
                    fldRouteNote.visible(false);
                    fldInvoiceNote.visible(false);
                    break;
        
                case tableNum(smmBusRelTable):
                    fldInternalNote.visible(false);
                    fldLocationNote.visible(false);
                    fldObjectNote.visible(false);
                    fldRouteNote.visible(false);
                    fldTerminationNote.visible(false);
                    fldInvoiceNote.visible(false);
                    break;
        
                case tableNum(RORVenueTable):
                    fldInternalNote.visible(false);
                    fldObjectNote.visible(false);
                    fldOrderNote.visible(false);
                    fldTerminationNote.visible(false);
                    fldInvoiceNote.visible(false);
                    break;
        
                case tableNum(BOBMaintenanceHistoryView),
                     tableNum(WPPWorkOrderLine),
                     tableNum(WPPWorkOrderTable),
                     tableNum(WPPWorkOrderView),
                     tableNum(WPPTmpServicePlanboardData),
                     tableNum(WPPWorkOrderLineListPageView):
                    fldLocationNote.visible(false);
                    fldObjectNote.visible(false);
                    fldRouteNote.visible(false);
                    fldTerminationNote.visible(false);
                    break;
        
                case tableNum(CustInvoiceJour),
                     tableNum(VendInvoiceJour):
                    fldInternalNote.visible(false);
                    fldLocationNote.visible(false);
                    fldObjectNote.visible(false);
                    fldOrderNote.visible(false);
                    fldRouteNote.visible(false);
                    fldTerminationNote.visible(false);
                    fldInvoiceNote.allowEdit(false);
                    break;
        
                case tableNum(InventJournalTable) :
                    fldObjectNote.visible(false);
                    fldOrderNote.visible(false);
                    fldTerminationNote.visible(false);
                    fldInvoiceNote.visible(false);
                    break;
        
                case tableNum(WPPTmpTransportPlanboardData):
                    tmpTransportPlanboardData = args.record();
        
                    if (args.parmEnumType() == enumNum(HeadingLine)
                    &&  args.parmEnum()     == HeadingLine::Line)
                    {
                        if (tmpTransportPlanboardData.SalesLineRecId)
                        {
                            fldLocationNote.visible(false);
                            fldOrderNote.visible(false);
                            fldRouteNote.visible(false);
                            fldInvoiceNote.visible(false);
                        }
                        else
                        {
                            fldLocationNote.visible(false);
                            fldObjectNote.visible(false);
                            fldRouteNote.visible(false);
                            fldTerminationNote.visible(false);
        
                        }
                    }
                    else
                    {
                        if (tmpTransportPlanboardData.SalesTableRecId)
                        {
                            fldInternalNote.visible(false);
                            fldObjectNote.visible(false);
                            fldTerminationNote.visible(false);
                            fldInvoiceNote.visible(false);
                        }
                        else
                        {
                            fldLocationNote.visible(false);
                            fldObjectNote.visible(false);
                            fldRouteNote.visible(false);
                            fldTerminationNote.visible(false);
                        }
                    }
                    break;
        
                default:
                    // do nothing
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            BOBMaintenanceHistoryView       callerMaintenanceHistoryView;
            WPPTmpServicePlanboardData      tmpServicePlanboardData;
            WPPTmpTransportPlanboardData    tmpTransportPlanboardData;
            QueryBuildDataSource            qbdsAdditionalNotes;
            QueryBuildDataSource            qbdsWorkOrderTable;
            QueryBuildDataSource            qbdsWorkOrderLine;
            QueryBuildDataSource            qbdsSalesLine;
            QueryBuildDataSource            qbdsSalesTable;
        
            WHSShipmentTable                shipment;
            SalesLine                       salesLine;
            SalesTable                      salesTable;
            InventJournalTable              inventJournalTable;
        
            super();
        
            this.initDesignFromCaller();
        
            switch (element.args().dataset())
            {
                case tableNum(BOBMaintenanceHistoryView):
                    callerMaintenanceHistoryView = element.args().record();
        
                    if (element.args().parmEnumType() != enumNum(HeadingLine)
                    ||  element.args().parmEnum() != HeadingLine::Line)
                    {
                        qbdsAdditionalNotes = this.query().dataSourceTable(tableNum(DNRAdditionalNoteTable));
                        qbdsAdditionalNotes.clearDynalinks();
                        qbdsAdditionalNotes.clearRange(fieldNum(DNRAdditionalNoteTable, RefTableId));
        
                        qbdsWorkOrderTable = qbdsAdditionalNotes.addDataSource(tableNum(WPPWorkOrderTable));
                        qbdsWorkOrderTable.relations(true);
                        qbdsWorkOrderTable.joinMode(JoinMode::ExistsJoin);
                        qbdsWorkOrderTable.addDynalink(fieldNum(WPPWorkOrderTable, WorkOrderId), callerMaintenanceHistoryView, fieldNum(BOBMaintenanceHistoryView, WorkOrderId));
                    }
                    break;
        
                case tableNum(WPPTmpServicePlanboardData):
                    tmpServicePlanboardData = element.args().record();
        
                    qbdsAdditionalNotes = this.query().dataSourceTable(tableNum(DNRAdditionalNoteTable));
        
                    if (element.args().parmEnumType() == enumNum(HeadingLine)
                    &&  element.args().parmEnum()     == HeadingLine::Line)
                    {
                        qbdsWorkOrderLine = qbdsAdditionalNotes.addDataSource(tableNum(WPPWorkOrderLine));
                        qbdsWorkOrderLine.relations(true);
                        qbdsWorkOrderLine.joinMode(JoinMode::ExistsJoin);
                        qbdsWorkOrderLine.addDynalink(fieldNum(WPPWorkOrderLine, RecId), tmpServicePlanboardData, fieldNum(WPPTmpServicePlanboardData, WPPWorkOrderLineRecId));
                    }
                    else
                    {
                        qbdsWorkOrderTable = qbdsAdditionalNotes.addDataSource(tableNum(WPPWorkOrderTable));
                        qbdsWorkOrderTable.relations(true);
                        qbdsWorkOrderTable.joinMode(JoinMode::ExistsJoin);
                        qbdsWorkOrderTable.addDynalink(fieldNum(WPPWorkOrderTable, WorkOrderId), tmpServicePlanboardData, fieldNum(WPPTmpServicePlanboardData, WPPWorkOrderId));
                    }
                    break;
        
                case tableNum(WPPTmpTransportPlanboardData):
                    tmpTransportPlanboardData = element.args().record();
        
                    qbdsAdditionalNotes = this.query().dataSourceTable(tableNum(DNRAdditionalNoteTable));
        
                    if (element.args().parmEnumType() == enumNum(HeadingLine)
                    &&  element.args().parmEnum()     == HeadingLine::Line)
                    {
                        if (tmpTransportPlanboardData.SalesLineRecId)
                        {
                            qbdsSalesLine = qbdsAdditionalNotes.addDataSource(tableNum(SalesLine));
                            qbdsSalesLine.relations(true);
                            qbdsSalesLine.joinMode(JoinMode::ExistsJoin);
                            qbdsSalesLine.addDynalink(fieldNum(SalesLine, RecId), tmpTransportPlanboardData, fieldNum(WPPTmpTransportPlanboardData, SalesLineRecId));
                        }
                        else
                        {
                            qbdsWorkOrderLine = qbdsAdditionalNotes.addDataSource(tableNum(WPPWorkOrderLine));
                            qbdsWorkOrderLine.relations(true);
                            qbdsWorkOrderLine.joinMode(JoinMode::ExistsJoin);
                            qbdsWorkOrderLine.addDynalink(fieldNum(WPPWorkOrderLine, RecId), tmpTransportPlanboardData, fieldNum(WPPTmpTransportPlanboardData, WorkOrderLineRecId));
                        }
                    }
                    else
                    {
                        if (tmpTransportPlanboardData.SalesTableRecId)
                        {
                            qbdsSalesTable = qbdsAdditionalNotes.addDataSource(tableNum(SalesTable));
                            qbdsSalesTable.relations(true);
                            qbdsSalesTable.joinMode(JoinMode::ExistsJoin);
                            qbdsSalesTable.addDynalink(fieldNum(SalesTable, RecId), tmpTransportPlanboardData, fieldNum(WPPTmpTransportPlanboardData, SalesTableRecId));
                        }
                        else
                        {
                            qbdsWorkOrderTable = qbdsAdditionalNotes.addDataSource(tableNum(WPPWorkOrderTable));
                            qbdsWorkOrderTable.relations(true);
                            qbdsWorkOrderTable.joinMode(JoinMode::ExistsJoin);
                            qbdsWorkOrderTable.addDynalink(fieldNum(WPPWorkOrderTable, RecId), tmpTransportPlanboardData, fieldNum(WPPTmpTransportPlanboardData, WorkOrderTableRecId));
                        }
                    }
                    break;
        
                case tableNum(WHSShipmentTable):
                    shipment = element.args().record();
        
                    salesLine = element.getSalesLineFromShipment(shipment) as salesLine;
        
                    if (salesLine)
                    {
                        salesTable = salesLine.salesTable();
                        qbdsAdditionalNotes = this.query().dataSourceTable(tableNum(DNRAdditionalNoteTable));
                        qbdsAdditionalNotes.clearDynalinks();
                        qbdsAdditionalNotes.clearRange(fieldNum(DNRAdditionalNoteTable, RefTableId));
                        qbdsAdditionalNotes.clearRange(fieldNum(DNRAdditionalNoteTable, RefRecId));
                        qbdsAdditionalNotes.addRange(fieldNum(DNRAdditionalNoteTable, RefTableId)).value(SysQuery::value(salesTable.TableId));
                        qbdsAdditionalNotes.addRange(fieldNum(DNRAdditionalNoteTable, RefRecId)).value(SysQuery::value(salesTable.RecId));
                    }
                    // otherwise dynalink to shipment directly
                    break;        
                
                case tableNum(InventJournalTable):
                    inventJournalTable = element.args().record();
        
                    if (inventJournalTable)
                    {
                        qbdsAdditionalNotes = this.query().dataSourceTable(tableNum(DNRAdditionalNoteTable));
                        qbdsAdditionalNotes.clearDynalinks();
                        qbdsAdditionalNotes.clearRange(fieldNum(DNRAdditionalNoteTable, RefTableId));
                        qbdsAdditionalNotes.clearRange(fieldNum(DNRAdditionalNoteTable, RefRecId));
                        qbdsAdditionalNotes.addRange(fieldNum(DNRAdditionalNoteTable, RefTableId)).value(SysQuery::value(inventJournalTable.TableId));
                        qbdsAdditionalNotes.addRange(fieldNum(DNRAdditionalNoteTable, RefRecId)).value(SysQuery::value(inventJournalTable.RecId));
                    }
        
                    if (inventJournalTable.Posted)
                    {
                        AdditionalNoteTable_ds.allowEdit(false);
                    }
                    break;
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>AdditionalNoteTable</Name>
			<Table>DNRAdditionalNoteTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InternalNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocationNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ObjectNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RouteNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TerminationNote</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS94241</Caption>
		<DataSource xmlns="">AdditionalNoteTable</DataSource>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Notes</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes_LocationNote</Name>
						<ElementPosition>536870910</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>LocationNote</DataField>
						<DataSource>AdditionalNoteTable</DataSource>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes_OrderNote</Name>
						<ElementPosition>805306365</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>OrderNote</DataField>
						<DataSource>AdditionalNoteTable</DataSource>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes_InternalNote</Name>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>InternalNote</DataField>
						<DataSource>AdditionalNoteTable</DataSource>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes_TerminationNote</Name>
						<ElementPosition>1342177275</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>TerminationNote</DataField>
						<DataSource>AdditionalNoteTable</DataSource>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes_ObjectNote</Name>
						<ElementPosition>1610612730</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>ObjectNote</DataField>
						<DataSource>AdditionalNoteTable</DataSource>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes_RouteNote</Name>
						<ElementPosition>1789569702</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>RouteNote</DataField>
						<DataSource>AdditionalNoteTable</DataSource>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes_InvoiceNote</Name>
						<ElementPosition>1968526674</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>InvoiceNote</DataField>
						<DataSource>AdditionalNoteTable</DataSource>
						<MultiLine>Yes</MultiLine>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<DataGroup>Notes</DataGroup>
				<DataSource>AdditionalNoteTable</DataSource>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>BottomButtonGrp</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>