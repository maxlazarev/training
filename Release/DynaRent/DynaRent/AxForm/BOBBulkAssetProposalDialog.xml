<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BOBBulkAssetProposalDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BOBBulkAssetProposalDialog extends FormRun
{
    InventJournalFormTrans_BOBAssetToInvent formClass;
    
}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        InventDim               inventDim;
        InventJournalTable      callerInventJournalTable;
        AssetTransTypeJournal   journalTransType;
    
        super();
    
        inventDim.InventSiteId = dlgInventSiteId.text();
        inventDim.InventLocationId = dlgInventLocationId.text();
    
        callerInventJournalTable = formClass.journalTable();

        switch(callerInventJournalTable.BOBInventJournalType)
        {
            case BOBInventJournalType::AssetToInvent:
                journalTransType = AssetTransTypeJournal::DisposalSale;
                break;

            case BOBInventJournalType::AssetToScrap:
                journalTransType = AssetTransTypeJournal::DisposalScrap;
                break;

            default:
                warning(strFmt("@SYS88512", callerInventJournalTable.BOBInventJournalType));
                throw error("@SYS88512");
        }
        
        BOBConversionJournalEngine::createBulkProposal(dlgAssetId.text(),
                                                       inventDim::findOrCreate(inventDim).inventDimId,
                                                       dlgQty.value(),
                                                       formClass.journalTable().JournalId,
                                                       DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                       journalTransType);
        formClass.journalTrans_DS().research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Object callerFormRun = element.args().caller();
        ;
    
        if(callerFormRun
        && callerFormRun.name() == formStr(InventJournalAsset)
        && formHasMethod(callerFormRun, 'BOBGetFormClass'))
        {
            formClass = callerFormRun.BOBGetFormClass();
        }
    
        if(formClass)
        {
            super();
        }
        else
        {
            throw error(Error::missingParameter(element));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetId</Name>
				<Source><![CDATA[
    public void lookupAssetId(FormStringControl _ctrl)
    {
        Query                   query;
        QueryBuildDataSource    qbdsAssetTable, qbdsObjectTable;
        SysTableLookup          lookup;
        ;
    
        query = new Query();
    
        qbdsAssetTable = query.addDataSource(tableNum(AssetTable));
        qbdsAssetTable.addRange(fieldNum(AssetTable, BOBIsBulkParent)).value(SysQuery::value(NoYes::Yes));
        qbdsAssetTable.addRange(fieldNum(AssetTable, MainAssetId)).value(SysQuery::valueEmptyString());
    
        qbdsObjectTable = qbdsAssetTable.addDataSource(tableNum(BOBObjectTable));
        qbdsObjectTable.relations(true);
        qbdsObjectTable.joinMode(JoinMode::ExistsJoin);
        qbdsObjectTable.addRange(fieldNum(BOBObjectTable, InventSerialId)).value(SysQuery::valueEmptyString());
    
        lookup = SysTableLookup::newParameters(tableNum(AssetTable), _ctrl);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(AssetTable, AssetId), true);
        lookup.addLookupfield(fieldNum(AssetTable, Name));
        lookup.addLookupfield(fieldNum(AssetTable, AssetGroup));
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventLocationId</Name>
				<Source><![CDATA[
    public void lookupInventLocationId(FormStringControl _ctrl)
    {
        Query                   query;
        QueryBuildDataSource    qbdsWarehouse;
        SysTableLookup          lookup;
        ;
    
        query = new Query();
    
        qbdsWarehouse = query.addDataSource(tableNum(InventLocation));
        qbdsWarehouse.addSelectionField(fieldNum(InventLocation, InventLocationId));
        qbdsWarehouse.addSelectionField(fieldNum(InventLocation, Name));
    
        if(dlgInventSiteId.text())
        {
            qbdsWarehouse.addRange(fieldNum(InventLocation, InventSiteId)).value(dlgInventSiteId.text());
        }
    
        lookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(InventLocation, InventLocationId), true);
        lookup.addLookupfield(fieldNum(InventLocation, Name));
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemId</Name>
				<Source><![CDATA[
    public void lookupItemId(FormStringControl _ctrl)
    {
        Query query = new Query();
    
        QueryBuildDataSource qbdsInventTable = query.addDataSource(tableNum(InventTable));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, ItemId));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, NameAlias));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, ItemType));
    
        QueryBuildDataSource qbdsProduct = qbdsInventTable.addDataSource(tableNum(EcoResProduct));
        qbdsProduct.relations(false);
        qbdsProduct.joinMode(JoinMode::ExistsJoin);
        qbdsProduct.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProduct, RecId));
        qbdsProduct.addRange(fieldNum(EcoResProduct, BOBRentalTypeId)).value(SysQuery::valueNotEmptyString());
        qbdsProduct.addSelectionField(fieldNum(EcoResProduct, BOBRentalTypeId));

        // The following statement causes problems:
        // qbdsProduct.addLink(fieldNum(EcoResProduct, DisplayProductNumber), fieldNum(EcoResProduct, BOBRentalTypeId));
        // Instead of creating the where clause 'EcoResProduct.DisplayProductNumber == EcoResProduct.BOBRentalTypeId',
        // it creates the where clause 'EcoResProduct.DisplayProductNumber == InventTable.AssetId_RU' (both fields have the
        // same field id, but the table id is different). Below fix seems to solve the problem:
        QueryBuildDataSource qbdsProduct2 = qbdsProduct.addDataSource(tableNum(EcoResProduct));
        qbdsProduct2.relations(false);
        qbdsProduct2.joinMode(JoinMode::ExistsJoin);
        qbdsProduct2.addLink(fieldNum(EcoResProduct, DisplayProductNumber), fieldNum(EcoResProduct, BOBRentalTypeId));
        qbdsProduct2.addSelectionField(fieldNum(EcoResProduct, BOBRentalTypeId));

        QueryBuildDataSource qbdsRentalType = qbdsProduct2.addDataSource(tableNum(BOBRentalType));
        qbdsRentalType.relations(false);
        qbdsRentalType.joinMode(JoinMode::ExistsJoin);
        qbdsRentalType.addLink(fieldNum(EcoResProduct, BOBRentalTypeId), fieldNum(BOBRentalType, RentalTypeId));
        qbdsRentalType.addRange(fieldNum(BOBRentalType, Classification)).value(SysQuery::value(BOBRentalTypeClassification::Bulk));
        qbdsRentalType.addSelectionField(fieldNum(BOBRentalType, TableId));
    
        QueryBuildDataSource qbdsObjectTable = qbdsRentalType.addDataSource(tableNum(BOBObjectTable));
        qbdsObjectTable.relations(true);
        qbdsObjectTable.addLink(fieldNum(BOBRentalType, RentalTypeId), fieldNum(BOBObjectTable, RentalTypeId));
        qbdsObjectTable.addRange(fieldNum(BOBObjectTable, InventSerialId)).value(SysQuery::valueEmptyString());
        qbdsObjectTable.addSelectionField(fieldNum(BOBObjectTable, TableId));
    
        QueryBuildDataSource qbdsObjectAssetLog = qbdsObjectTable.addDataSource(tableNum(BOBObjectAssetLog));
        qbdsObjectAssetLog.relations(true);
        qbdsObjectAssetLog.addRange(fieldNum(BOBObjectAssetLog, AssetId)).value(SysQuery::valueNotEmptyString());
        qbdsObjectAssetLog.addRange(fieldNum(BOBObjectAssetLog, AssetCompanyId)).value(SysQueryRangeUtil::currentCompany());
        qbdsObjectAssetLog.addSelectionField(fieldNum(BOBObjectAssetLog, TableId));

        //info(query.toString());

        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(InventTable, ItemId), true);
        lookup.addLookupfield(fieldNum(InventTable, NameAlias));
        lookup.addLookupfield(fieldNum(InventTable, ItemType));
        lookup.addLookupfield(fieldNum(EcoResProduct, BOBRentalTypeId));
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRentalTypeId</Name>
				<Source><![CDATA[
    public void lookupRentalTypeId(FormStringControl _ctrl)
    {
        Query query = new Query();
    
        QueryBuildDataSource qbdsRentalType = query.addDataSource(tableNum(BOBRentalType));
        qbdsRentalType.addRange(fieldNum(BOBRentalType, Classification)).value(SysQuery::value(BOBRentalTypeClassification::Bulk));
        qbdsRentalType.addSelectionField(fieldNum(BOBRentalType, RentalTypeId));
        qbdsRentalType.addSelectionField(fieldNum(BOBRentalType, Description));
    
        QueryBuildDataSource qbdsObjectTable = qbdsRentalType.addDataSource(tableNum(BOBObjectTable));
        qbdsObjectTable.relations(true);
        qbdsObjectTable.joinMode(JoinMode::ExistsJoin);
        qbdsObjectTable.addRange(fieldNum(BOBObjectTable, InventSerialId)).value(SysQuery::valueEmptyString());

        QueryBuildDataSource qbdsObjectAssetLog = qbdsObjectTable.addDataSource(tableNum(BOBObjectAssetLog));
        qbdsObjectAssetLog.relations(true);
        qbdsObjectAssetLog.addRange(fieldNum(BOBObjectAssetLog, AssetId)).value(SysQuery::valueNotEmptyString());
        qbdsObjectAssetLog.addRange(fieldNum(BOBObjectAssetLog, AssetCompanyId)).value(SysQueryRangeUtil::currentCompany());
        qbdsObjectAssetLog.addSelectionField(fieldNum(BOBObjectAssetLog, TableId));
    
        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(BOBRentalType), _ctrl);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(BOBRentalType, RentalTypeId), true);
        lookup.addLookupfield(fieldNum(BOBRentalType, Description));
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedAssetId</Name>
				<Source><![CDATA[
    public void modifiedAssetId()
    {
        AssetTable          assetTable;
        BOBObjectTable      objectTable;
        BOBObjectAssetLog   objectAssetLog;
        EcoResProduct       ecoResProduct;
        InventTable         inventTable;
        InventTableModule   module;
    
        if(dlgAssetId.text())
        {
            select firstOnly Quantity from assetTable
            where assetTable.AssetId == dlgAssetId.text()
                join TableId from objectAssetLog
                where objectAssetLog.AssetCompanyId == assetTable.DataAreaId
                &&    objectAssetLog.AssetId == assetTable.AssetId
                    join RentalTypeId from objectTable
                    where !objectTable.InventSerialId
                    &&     objectTable.ObjectId == objectAssetLog.ObjectId
                        join TableId from ecoResProduct
                        where ecoResProduct.DisplayProductNumber == ecoResProduct.BOBRentalTypeId
                        &&    ecoResProduct.BOBRentalTypeId == objectTable.RentalTypeId
                            join ItemId from inventTable
                            where inventTable.Product == ecoResProduct.RecId
                                join UnitId from module
                                where module.ItemId == inventTable.ItemId
                                &&    module.ModuleType == ModuleInventPurchSales::Invent;
        }
    
        // in case the AssetId dialog field was cleared, also clear the other dialog fields
        dlgItemId.text(inventTable.ItemId);
        dlgRentalTypeId.text(objectTable.RentalTypeId);
        dlgUnitId.text(module.UnitId);
        dlgQty.value(real2int(assetTable.Quantity)); // we only want to use whole numbers for now
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedItemId</Name>
				<Source><![CDATA[
    public void modifiedItemId()
    {
        
        InventTable inventTable = InventTable::find(dlgItemId.text());
        dlgUnitId.text(dlgItemId.text() ? dlgUnitId.text(inventTable.inventUnitId()) : '');
        dlgRentalTypeId.text(EcoResProduct::find(inventTable.Product).BOBRentalTypeId);
        element.setAssetId(dlgItemId.text(), dlgRentalTypeId.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedRentalTypeId</Name>
				<Source><![CDATA[
    public void modifiedRentalTypeId()
    {
        element.setAssetId(dlgItemId.text(), dlgRentalTypeId.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetId</Name>
				<Source><![CDATA[
    public void setAssetId(ItemId _itemId, BOBRentalTypeId _rentalTypeId)
    {
        AssetTable          assetTable;
        BOBObjectTable      objectTable;
        BOBObjectAssetLog   objectAssetLog;
        ;
    
        if(_itemId && _rentalTypeId)
        {
            select firstOnly AssetId, Quantity from assetTable
            where assetTable.AssetId
                exists join objectAssetLog
                where objectAssetLog.AssetCompanyId == assetTable.DataAreaId
                &&    objectAssetLog.AssetId == assetTable.AssetId
                    join TableId from objectTable
                    where !objectTable.InventSerialId
                    &&     objectTable.ObjectId == objectAssetLog.ObjectId
                    &&     objectTable.RentalTypeId == _rentalTypeId;
        }
    
        // in case either the ItemId dialog field or the RentalTypeId dialog field was cleared,
        // or no assetTable record was found, also clear the other dialog fields
        dlgAssetId.text(assetTable.AssetId);
        dlgQty.value(real2int(assetTable.Quantity)); // we only want to use whole numbers for now
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        BOBObjectAssetLog   objectAssetLog;
        BOBObjectTable      objectTable;
        BOBRentalType       rentalType;
        AssetTable          assetTable;
        AssetQuantity       qty;
        boolean             ret = true;
        ;
    
        if(!dlgItemId.text())
        {
            ret = checkFailed(strFmt("@DNR4370", "@SYS129737"));
        }
        
        if(ret && !dlgRentalTypeId.text())
        {            
            ret = checkFailed(strFmt("@DNR4370", "@DNR4420"));
        }
        
        if(ret && !dlgAssetId.text())
        {
            ret = checkFailed(strFmt("@DNR4370", "@DNR8117"));
        }

        if(ret && !dlgInventSiteId.text())
        {
            ret = checkFailed(strFmt("@DNR4370", "@SYS122446"));
        }

        if(ret && !dlgInventLocationId.text())
        {
            ret = checkFailed(strFmt("@DNR4370", "@SYS6437"));
        }

        if(ret
        && dlgInventLocationId.text()
        && dlgInventSiteId.text()
        && InventLocation::find(dlgInventLocationId.text()).InventSiteId != dlgInventSiteId.text())
        {
            ret = checkFailed(strFmt("@SYS104861", dlgInventLocationId.text(), dlgInventSiteId.text()));
        }
    
        qty = dlgQty.value();
    
        if(ret && qty <= 0)
        {
            ret = checkFailed(strFmt("@SYS78465", "@SYS102891"));
        }
    
        if(ret)
        {
            select firstOnly RecId from objectTable
            where !objectTable.InventSerialId
            &&     objectTable.RentalTypeId == dlgRentalTypeId.text()
                exists join objectAssetLog
                where objectAssetLog.ObjectId == objectTable.ObjectId
                &&    objectAssetLog.AssetId == dlgAssetId.text()
                    join TableId from assetTable
                    where assetTable.DataAreaId == objectAssetLog.AssetCompanyId
                    &&    assetTable.AssetId == objectAssetLog.AssetId
                    &&    assetTable.BOBIsBulkParent
                        join TableId from rentalType
                        where rentalType.RentalTypeId == objectTable.RentalTypeId
                        &&    rentalType.Classification == BOBRentalTypeClassification::Bulk;
            
            if(!objectTable)
            {
                ret = checkFailed("@DNR8134");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetId</Name>
				<Source><![CDATA[
    public boolean validateAssetId(AssetId _assetId)
    {
        AssetTable          assetTable;
        BOBObjectTable      objectTable;
        BOBObjectAssetLog   objectAssetLog;
        boolean             ret = true;
        ;
    
        if(_assetId)
        {
            select firstOnly RecId from assetTable
            where assetTable.AssetId == _assetId
            &&    assetTable.BOBIsBulkParent
            &&    !assetTable.MainAssetId
                exists join objectAssetLog
                where objectAssetLog.AssetCompanyId == assetTable.DataAreaId
                &&    objectAssetLog.AssetId == assetTable.AssetId
                    join TableId from objectTable
                    where objectTable.ObjectId == objectAssetLog.ObjectId
                    &&   !objectTable.InventSerialId;
    
            if(!assetTable)
            {
                ret = checkFailed(strFmt("@DNR8133", _assetId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDim</Name>
				<Source><![CDATA[
    public boolean validateInventDim(InventSiteId _inventSiteId, InventLocationId _inventLocationId)
    {
        boolean ret = true;
        ;
    
        if(!_inventSiteId)
        {
            ret = checkFailed(strFmt("@DNR7115", "@SYS122446"));
        }
    
        if(!_inventLocationId)
        {
            ret = checkFailed(strFmt("@DNR7115", "@SYS6437"));
        }
    
        if(_inventLocationId && _inventSiteId && InventLocation::find(_inventLocationId).InventSiteId != _inventSiteId)
        {
            ret = checkFailed(strFmt("@SYS104861", _inventLocationId, _inventSiteId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemId</Name>
				<Source><![CDATA[
    public boolean validateItemId(ItemId _itemId)
    {
        boolean ret = true;
    
        if(_itemId)
        {
            if(!InventTable::find(_itemId).BOBIsBulkRentalItem())
            {
                ret = checkFailed(strFmt("@DNR8118", _itemId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRentalTypeId</Name>
				<Source><![CDATA[
    public boolean validateRentalTypeId(BOBRentalTypeId _rentalTypeId)
    {
        boolean ret = true;

        if(_rentalTypeId && !BOBObjectTable::findBulkObject(_rentalTypeId).assetId())
        {
            ret = checkFailed(strFmt("@DNR8132", _rentalTypeId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>dlgItemId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupItemId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.modifiedItemId();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return (super() && element.validateItemId(this.text()));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>dlgRentalTypeId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupRentalTypeId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.modifiedRentalTypeId();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return (super() && element.validateRentalTypeId(this.text()));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>dlgAssetId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupAssetId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.modifiedAssetId();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            return (super() && element.validateAssetId(this.text()));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>dlgInventLocationId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupInventLocationId(this);
            //asd
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            InventLocationId newWarehouse;
            ;
        
            if(ret)
            {
                newWarehouse = this.text();
                dlgInventSiteId.text(newWarehouse ? InventLocation::find(newWarehouse).InventSiteId : '');
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if(element.validate())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@DNR8116</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">DropDialog</Style>
		<Width xmlns="">300</Width>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SuppInstruction</Name>
						<ExtendedStyle>informationalField</ExtendedStyle>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<MultiLine>Yes</MultiLine>
						<ShowLabel>No</ShowLabel>
						<Text>Create a bulk asset conversion proposal for the selected parent fixed asset. This will generate a journal transaction for each of the child fixed assets until the specified quantity is reached. Bulk child fixed assets are selected in a FIFO fashion</Text>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>dlgItemId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ItemId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>dlgRentalTypeId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1342177275</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>BOBRentalTypeId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>dlgAssetId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612730</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AssetId</ExtendedDataType>
						<Label>@DNR8117</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>dlgInventSiteId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1700091215</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>InventSiteId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>dlgInventLocationId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569700</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>InventLocationId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupQty</Name>
						<ElementPosition>1879048185</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>dlgQty</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS114811</HelpText>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Integer</ExtendedDataType>
								<Label>@SYS114810</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>dlgUnitId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS112171</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>