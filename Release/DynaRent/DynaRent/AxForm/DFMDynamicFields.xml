<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DFMDynamicFields</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DFMDynamicFields extends FormRun
{
    /*
    DFMManager          formClass;
    FormStringControl   fileNameCtrl;
    boolean             enforceMandatoryFields;
    public boolean canClose()
    {
        boolean ret = super();
        ;
    
        if(ret && enforceMandatoryFields)
        {
            ret = formClass.checkMandatoryFields(element.design());
        }
    
        return ret;
    }

    public void dynamicButton_Clicked()
    {
        FormButtonControl   buttonCtrl;
        FormGroupControl    groupCtrl;
        FormStringControl   stringCtrl;
        Filename            fileName;
        ;
    
        buttonCtrl  = this.controlCallingMethod();
        groupCtrl   = element.design().control(buttonCtrl.containerId());
        stringCtrl  = groupCtrl.controlNum(1);
        fileName    = stringCtrl.text();
    
        if(fileName)
        {
            if(WinAPI::fileExists(fileName))
            {
                WinAPI::shellExecute(fileName);
            }
            else
            {
                error(strFmt("@SYS19312", fileName));
            }
        }
    }

    public void dynamicControl_GotFocus()
    {
        fileNameCtrl = element.controlCallingMethod();
    }

    public void dynamicControl_Lookup()
    {
        FormControl         formControl = element.controlCallingMethod();
        FormStringControl   stringControl;
        FormDateControl     dateControl;
        FileNameOpen        fileName;
        ;
    
        switch(classIdGet(formControl))
        {
            case classNum(FormStringControl):
                stringControl = formControl;
    
                if(stringControl.extendedDataType() == extendedTypeNum(FileNameOpen))
                {
                    fileName = stringControl.text();
    
                    if(!WinAPI::pathExists(fileName))
                    {
                        fileName = conPeek(fileNameSplit(fileName), 1);
                    }
    
                    fileName = WinAPI::getOpenFileName(element.hWnd(),
                                                       element.filenameLookupFilter(),
                                                       fileName,
                                                       element.filenameLookupTitle(),
                                                       '',
                                                       element.filenameLookupFileName());
                    if(fileName)
                    {
                        stringControl.text(fileName);
                        formClass.modifiedField(stringControl);
                    }
                }
                else
                {
                    stringControl.performTypeLookup(stringControl.extendedDataType());
                }
                break;
    
            case classNum(FormDateControl):
                dateControl = formControl;
                dateControl.performTypeLookup(extendedTypeNum(TransDate));
                break;
        }
    }

    public boolean dynamicControl_Modified()
    {
        FormControl formControl = element.controlCallingMethod();
        boolean     ok = formClass.modified(formControl);
        ;
    
        if (ok)
        {
            if(classIdGet(formControl) == classNum(FormDateControl))
            {
                formControl.update();
            }
    
            if(classIdGet(formControl) == classNum(FormStringControl))
            {
                // not all FormControl subclasses have a validate method
                // that's why we need to call it manually here
                ok = formClass.validateField(formControl);
            }
    
            if(ok)
            {
                formClass.modifiedField(formControl);
            }
        }
    
        return ok;
    }

    public Filename fileNameLookupFileName()
    {
        Filename    filepath;
        Filename    filename;
        Filename    fileType;
        ;
    
        [ filepath, fileName, fileType ] = fileNameSplit(fileNameCtrl.text());
    
        return fileName + fileType;
    }

    public container fileNameLookupFilter()
    {
        #File
    
        Filename    filepath;
        Filename    filename;
        Filename    fileExtention;
        ;
    
        [ filepath, fileName, fileExtention ] = Global::fileNameSplit(fileNameCtrl.text());
    
        fileExtention = #AllFilesExt;
    
        return [WinAPI::fileType(fileExtention),#AllFilesName+fileExtention, #AllFilesExt, #AllFilesType];
    }

    public FilePath fileNameLookupInitialPath()
    {
        #WinAPI
    
        Filename    filepath;
        Filename    filename;
        Filename    fileType;
        ;
    
        [ filepath, fileName, fileType ] = Global::fileNameSplit(fileNameCtrl.text());
    
        if(!filePath)
        {
            filePath = WinAPI::getFolderPath(#CSIDL_Personal);
        }
    
        return filepath;
    }

    public Caption fileNameLookupTitle()
    {
        return  '';
    }

    public void init()
    {
        Args args = element.args();
        ;
    
        if(!args.dataset())
        {
            throw error(Error::missingRecord(element.name()));
        }
        if(!args.record().RecId)
        {
            throw error("@DFM20");
        }
    
        super();
    
        this.controlMethodOverload(true);
        enforceMandatoryFields = (args.parm() != '');
        formClass = DFMManager::construct(args.record());
        formClass.buildDynamicControls(Tab);
    }

    [DataSource]
    class DynaLinkHelper
    {
        public void linkActive()
        {
            element.nextField(); // triggers dynamicControl_Modified if necessary
        
            super();
        
            formClass.removeDynamicControls(element.design(), Tab);
            formClass = DFMManager::construct(element.args().record()); // new record
            formClass.buildDynamicControls(Tab);
        
            element.design().caption("@DFM13"); // triggers refresh of title field values
            element.setActive(); // replaces element.formOnTop()
        }

    }
    */
}
]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DynaLinkHelper</Name>
			<Table>DFMValueTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DFM13</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<HeightMode xmlns="">Column</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>EmptyTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<HideIfEmpty>No</HideIfEmpty>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AllowUserSetup>No</AllowUserSetup>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<HideIfEmpty>No</HideIfEmpty>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroupCommit</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>