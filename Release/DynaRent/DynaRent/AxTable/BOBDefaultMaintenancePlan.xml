<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBDefaultMaintenancePlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOBDefaultMaintenancePlan extends common
{
    #define.unknownEnumValue(255)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowChangePlanType</Name>
				<Source><![CDATA[
    public boolean allowChangePlanType()
    {
        boolean ret = true;
    
        if(this.RecId)
        {
            BOBObjectMaintenancePlan busObjMaint;

            select firstOnly RecId from busObjMaint
            where busObjMaint.DefaultPlanRecId == this.RecId;
    
            if(busObjMaint.RecId)
            {
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public server void buildQuery()
    {
        SysQueryRun                 queryRun;
        Query                       query;
        QueryBuildDataSource        qbds;
        BOBDefaultMaintenancePlan   defaultPlan;
    
        if(this.RecId)
        {
            // for some reason the Query field is not always populated
            // in the 'this' variable, so we need to select it manually
            select firstonly RecallQuery from defaultPlan
            where defaultPlan.RecId == this.RecId;
    
            if(defaultPlan.RecallQuery)
            {
                queryRun = new SysQueryRun(defaultPlan.RecallQuery);
            }
            else
            {
                query = new Query();
                qbds = query.addDataSource(tableNum(BOBObjectTable));
                queryRun = new SysQueryRun(query);
                queryRun.promptLoadLastUsedQuery(false);
            }
    
            if(queryRun.prompt())
            {
                if(this.ConfirmedDateTime)
                {
                    // this recall has already been confirmed
                    // don't save the new query, but restore the original one
                    this.reread();
                }
                else
                {
                    this.RecallQuery = queryRun.pack();
                    this.update();
                }
    
                if(FormDataUtil::isFormDataSource(this))
                {
                    FormDataSource dataSource = FormDataUtil::getFormDataSource(this);
                    dataSource.refresh();
                    dataSource.active();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClearFields</Name>
				<Source><![CDATA[
    private void checkClearFields()
    {
        switch(this.PlanType)
        {
            case BOBMaintenancePlanType::ConsumptionBased:
                this.RecurrenceData     = conNull();
                this.ReasonCode         = '';
                this.RecallQuery        = conNull();
                this.IsCritical         = NoYes::No;
                this.StartDate          = dateNull();
                break;
    
            case BOBMaintenancePlanType::TimeBased:
                this.RecurrenceUnit     = 0;
                this.RecurrenceValue    = 0;
                this.ReasonCode         = '';
                this.RecallQuery        = conNull();
                this.IsCritical         = NoYes::No;
                this.StartDate          = dateNull();
                break;
    
            case BOBMaintenancePlanType::Recall:
                this.RecurrenceData     = conNull();
                this.RecurrenceUnit     = 0;
                this.RecurrenceValue    = 0;
                break;

            case BOBMaintenancePlanType::TimeAndConsumptionBased:
                this.ReasonCode         = '';
                this.RecallQuery        = conNull();
                this.IsCritical         = NoYes::No;
                this.StartDate          = dateNull();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAdvanceMarginUnit</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Num displayAdvanceMarginUnit()
    {
        Num displayUnit;
    
        if (this.CreationMethod == BOBObjectMaintenanceCreationMethod::AdvanceNextMaintenance)
        {
            switch (this.PlanType)
            {
                case BOBMaintenancePlanType::TimeBased:
                case BOBMaintenancePlanType::TimeAndConsumptionBased:
                    displayUnit = "@SYS7425";
                    break;
    
                case BOBMaintenancePlanType::ConsumptionBased:
                    displayUnit = UnitOfMeasure::find(this.RecurrenceUnit).Symbol;
                    break;
            }
        }
    
        return displayUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHasQuery</Name>
				<Source><![CDATA[
    display NoYes displayHasQuery()
    {
        return (this.RecallQuery != conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRecurrenceText</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SysRecurrenceText displayRecurrenceText()
    {
        return (this.RecurrenceData && (this.PlanType == BOBMaintenancePlanType::TimeBased ||this.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased) ? SysRecurrenceRun::toText(this.RecurrenceData) : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInternalNote</Name>
				<Source><![CDATA[
    edit DNRAdditionalNote editInternalNote(boolean             _set,
                                            DNRAdditionalNote   _internalNote)
    {
        return DNRAdditionalNoteTable::editNote(this, fieldNum(DNRAdditionalNoteTable, InternalNote), _set, _internalNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReset_ConsumptionBased</Name>
				<Source><![CDATA[
    edit BOBResetMaintenance editReset_ConsumptionBased(boolean _set, BOBResetMaintenance _value)
    {
        if(_set && (this.PlanType == BOBMaintenancePlanType::ConsumptionBased || this.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased))
        {
            this.Reset = _value;
        }
    
        return ((this.PlanType == BOBMaintenancePlanType::ConsumptionBased || this.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased) ? this.Reset : any2Enum(#unknownEnumValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReset_TimeBased</Name>
				<Source><![CDATA[
    edit BOBResetMaintenance editReset_TimeBased(boolean _set, BOBResetMaintenance _value)
    {
        if(_set && (this.PlanType == BOBMaintenancePlanType::TimeBased || this.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased))
        {
            this.Reset = _value;
            
        }
    
        return ((this.PlanType == BOBMaintenancePlanType::TimeBased || this.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased) ? this.Reset : any2Enum(#unknownEnumValue));
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.CreationMethod = BOBDefaultMaintenancePlan::determineCreationMethod(0, '', 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.checkClearFields();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(BOBDefaultMaintenancePlan, WPPTemplateId):
                if (this.WPPTemplateId != this.orig().WPPTemplateId)
                {
                    this.WPPMainTaskId = '';
                }
    
                this.CreationMethod = BOBDefaultMaintenancePlan::determineCreationMethod(this.RecId, this.WPPTemplateId, this.AdvanceMargin);
                break;
    
            case fieldNum(BOBDefaultMaintenancePlan, CreationMethod):
                if (this.CreationMethod == BOBObjectMaintenanceCreationMethod::Never)
                {
                    this.WPPTemplateId = '';
                    this.WPPMainTaskId = '';
                    this.AdvanceMargin = 0;
                }
                if (this.CreationMethod == BOBObjectMaintenanceCreationMethod::NextMaintenance)
                {
                    this.AdvanceMargin = 0;
                }
                break;
    
            case fieldNum(BOBDefaultMaintenancePlan, PlanType):
                if (this.PlanType == BOBMaintenancePlanType::Recall)
                {
                    this.CreationMethod = BOBObjectMaintenanceCreationMethod::Never;
                    this.AdvanceMargin = 0;
                    this.WPPTemplateId = '';
                    this.WPPMainTaskId = '';
                    this.WPPExternalTaskId = '';
                    this.EnableWarning = NoYes::No;
                }
                break;
    
            case fieldNum(BOBDefaultMaintenancePlan, AdvanceMargin):
                this.CreationMethod = BOBDefaultMaintenancePlan::determineCreationMethod(this.RecId, this.WPPTemplateId, this.AdvanceMargin);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.checkClearFields();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
        ;
    
        if(_fieldIdToCheck == fieldNum(BOBDefaultMaintenancePlan, PlanType)
        && this.PlanType != this.orig().PlanType
        && !this.allowChangePlanType())
        {
            ret = checkFailed(strFmt("@DNR7035", "@DNR6958", "@DNR6981"));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecall</Name>
				<Source><![CDATA[
    public boolean validateRecall()
    {
        boolean ret = true;
        ;
    
        if(this.RecallQuery)
        {
            if(SysQuery::countTotal(new QueryRun(this.RecallQuery)) == 0)
            {
                ret = checkFailed("@DNR6972");
            }
        }
        else
        {
            ret = checkFailed("@DNR6974");
        }
    
        if(!this.StartDate)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS35856"));
        }
    
        if(this.ConfirmedDateTime)
        {
            ret = checkFailed("@DNR6975");
        }
    
        if(!this.ReasonCode)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS63086"));
        }
           
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        WPPWorkOrderTaskTable       taskTable;
        WPPWorkOrderTemplateLine    templateLine;
        boolean                     ret = super();
    
        if(this.WPPMainTaskId)
        {
            select firstonly RecId from taskTable
            where taskTable.TaskId == this.WPPMainTaskId
                exists join templateLine
                where templateLine.TaskId == taskTable.TaskId
                &&    templateLine.TemplateId == this.WPPTemplateId;
    
            if(!taskTable)
            {
                ret = checkFailed(strFmt("@DNR6979", this.WPPMainTaskId, this.WPPTemplateId));
            }
        }

        if(this.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased && this.Reset != BOBResetMaintenance::OnCompletion)
        {
            ret = checkFailed("@DNR:OnlyOnCompletionResetTypeSupported");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCreationMethod</Name>
				<Source><![CDATA[
    public static BOBObjectMaintenanceCreationMethod determineCreationMethod(RecId                              _recId,
                                                                             WPPWorkOrderTemplateId             _templateId,
                                                                             BOBObjectMaintenanceAdvanceMargin  _advanceMargin)
    {
        BOBObjectMaintenanceCreationMethod  creationMethod;
    
        if (_recId)
        {
            if (_templateId)
            {
                creationMethod = _advanceMargin ?
                                    BOBObjectMaintenanceCreationMethod::AdvanceNextMaintenance :
                                    BOBObjectMaintenanceCreationMethod::NextMaintenance;
            }
            else
            {
                creationMethod = BOBObjectMaintenanceCreationMethod::Never;
            }
        }
        else
        {
            creationMethod = _advanceMargin ?
                                    BOBObjectMaintenanceCreationMethod::AdvanceNextMaintenance :
                                    BOBObjectMaintenanceCreationMethod::NextMaintenance;
        }
    
        return creationMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BOBDefaultMaintenancePlan find(BOBMaintenancePlanCode _code, boolean _forUpdate = false)
    {
        BOBDefaultMaintenancePlan ret;
        ;
    
        if(_code)
        {
            if(_forUpdate)
            {
                ret.selectForUpdate(true);
            }
    
            select firstonly ret
            where ret.PlanCode == _code;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static BOBDefaultMaintenancePlan findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        BOBDefaultMaintenancePlan ret;
        ;
    
        if(_recId)
        {
            if(_forUpdate)
            {
                ret.selectForUpdate(true);
            }
    
            select firstonly ret
            where ret.RecId == _recId;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFromObjectMaintenance</Name>
				<Source><![CDATA[
    public static BOBDefaultMaintenancePlan lookupFromObjectMaintenance(FormReferenceControl _ctrl)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        SysReferenceTableLookup lookup;
        ;
    
        query = new Query();
        qbds = query.addDataSource(tableNum(BOBDefaultMaintenancePlan));
        qbds.addRange(fieldNum(BOBDefaultMaintenancePlan, PlanType)).value(SysQuery::valueNot(BOBMaintenancePlanType::Recall));
    
        lookup = SysReferenceTableLookup::newParameters(tableNum(BOBDefaultMaintenancePlan), _ctrl);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(BOBDefaultMaintenancePlan, PlanCode));
        lookup.addLookupfield(fieldNum(BOBDefaultMaintenancePlan, Description));
        lookup.addLookupfield(fieldNum(BOBDefaultMaintenancePlan, PlanType));
    
        return lookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR6971</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PlanCodeIdx</ClusteredIndex>
	<PrimaryIndex>PlanCodeIdx</PrimaryIndex>
	<ReplacementKey>PlanCodeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableWarning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCritical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecallQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPMainTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPTemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionBased</Name>
			<Label>@DNR6962</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReset_ConsumptionBased</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptEvery</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Recall</Name>
			<Label>@DNR6963</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayHasQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCritical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS112248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reset</Name>
			<Label>@SYS3073</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeBased</Name>
			<Label>@DNR6961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReset_TimeBased</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Warnings</Name>
			<Label>@SYS59278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EnableWarning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editInternalNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WPPWorkOrder</Name>
			<Label>@DNR6492</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvanceMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAdvanceMarginUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPMainTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPExternalTaskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AdvanceMargin</Name>
			<ExtendedDataType>BOBObjectMaintenanceAdvanceMargin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfirmedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysUserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ConfirmedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DateTimeAccepted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreationMethod</Name>
			<EnumType>BOBObjectMaintenanceCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableWarning</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7444</HelpText>
			<Label>@DNR7443</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ExceptEvery</Name>
			<ExtendedDataType>BOBMeterValueException</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCritical</Name>
			<HelpText>@DNR6969</HelpText>
			<Label>@DNR6968</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanCode</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>BOBMaintenancePlanCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PlanType</Name>
			<EnumType>BOBMaintenancePlanType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonCode</Name>
			<ExtendedDataType>DNRReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RecallQuery</Name>
			<ExtendedDataType>SysContainer</ExtendedDataType>
			<HelpText>@SYS93369</HelpText>
			<Label>@SYS25531</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RecurrenceData</Name>
			<ExtendedDataType>SysRecurrenceData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RecurrenceUnit</Name>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RecurrenceValue</Name>
			<ExtendedDataType>BOBMeterValue</ExtendedDataType>
			<Label>@SYS70583</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reset</Name>
			<EnumType>BOBResetMaintenance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<ExtendedDataType>StartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPExternalTaskId</Name>
			<ExtendedDataType>WPPWorkOrderTaskId</ExtendedDataType>
			<Label>@DNR6983</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPMainTaskId</Name>
			<ExtendedDataType>WPPWorkOrderTaskId</ExtendedDataType>
			<HelpText>@DNR6967</HelpText>
			<Label>@DNR6966</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPTemplateId</Name>
			<ExtendedDataType>WPPWorkOrderTemplateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DNRReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DNRReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>DNRReasonType::Maintenance</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonCode</Name>
					<Field>ReasonCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecurrenceUnit</Name>
					<Field>RecurrenceUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfirmedBy</Name>
					<SourceEDT>SysUserId</SourceEDT>
					<Field>ConfirmedBy</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderTaskTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPWorkOrderTaskTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WPPWorkOrderTaskTable_Main</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPMainTaskId</Name>
					<Field>WPPMainTaskId</Field>
					<RelatedField>TaskId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaskIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderTaskTable_External</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPWorkOrderTaskTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WPPWorkOrderTaskTable_External</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPExternalTaskId</Name>
					<Field>WPPExternalTaskId</Field>
					<RelatedField>TaskId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaskIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderTemplateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPWorkOrderTemplateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPTemplateId</Name>
					<Field>WPPTemplateId</Field>
					<RelatedField>TemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TemplateIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>