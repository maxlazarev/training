<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAGContractDataParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAGContractDataParm extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildContractHierarchy</Name>
				<Source><![CDATA[
    private server void buildContractHierarchy()
    {
        RAGContractTable        contractTable;
        RAGContractTypePriority typePriority;
        RAGContractSubscription subscription;
        Map                     contractHierarchyMap;
    
        contractHierarchyMap = new Map(Types::Enum, Types::String); // [ContractType, ContractId] not ordered by priority!
    
        while select TableId from typePriority
        order by Priority desc
        where typePriority.Priority <= this.ContractPriority
            join  ContractId, ContractType from contractTable
            where contractTable.ContractType    == typePriority.ContractType
            &&    contractTable.CurrencyCode    == this.CurrencyCode
            &&    contractTable.FromDate        <= this.TransDate
            &&    contractTable.ToDate          >= this.TransDate
            &&    contractTable.Status          == RAGContractStatus::Confirmed
            &&  ((contractTable.ContractType == RAGContractType::RentalOrderLine && contractTable.RelationAccount == this.RentalLineId && contractTable.ReferenceModule == this.ContractRefModule) ||
                 (contractTable.ContractType == RAGContractType::RentalOrder && contractTable.RelationAccount == this.RentalHeaderId && contractTable.ReferenceModule == this.ContractRefModule) ||
                 (contractTable.ContractType == RAGContractType::Venue && contractTable.RelationAccount == this.VenueCode && contractTable.RentalSubRental == this.RentalSubRental) ||
                 (contractTable.ContractType == RAGContractType::VenueGroup && contractTable.RelationAccount == this.VenueGroupId && contractTable.RentalSubRental == this.RentalSubRental) ||
                 (contractTable.ContractType == RAGContractType::BusinessRelation && contractTable.RelationAccount == this.BusRelAccount && contractTable.RentalSubRental == this.RentalSubRental) ||
                 (contractTable.ContractType == RAGContractType::BusRelContractGroup && contractTable.RelationAccount == this.BusRelGroupId && contractTable.RentalSubRental == this.RentalSubRental) ||
                 (contractTable.ContractType == RAGContractType::Project && contractTable.RelationAccount == this.ProjId && contractTable.RentalSubRental == this.RentalSubRental) ||
                 (contractTable.ContractType == RAGContractType::WarehouseGroup && contractTable.RelationAccount == this.WarehouseGroupId && contractTable.RentalSubRental == this.RentalSubRental) ||
                 (contractTable.ContractType == RAGContractType::Warehouse && contractTable.RelationAccount == this.InventLocationId && contractTable.RentalSubRental == this.RentalSubRental) ||
                 (contractTable.ContractType == RAGContractType::Default && contractTable.RentalSubRental == this.RentalSubRental))
                outer join RecId from subscription
                where subscription.ContractId == contractTable.ContractId
                &&    subscription.SubscriptionStatus == RAGSubscriptionStatus::Signed
                &&  ((subscription.SubscriptionType == TableGroupAll::Table   && subscription.RelationAccount == this.BusRelAccount)
                ||   (subscription.SubscriptionType == TableGroupAll::GroupId && subscription.RelationAccount == this.BusRelGroupId)
                ||    subscription.SubscriptionType == TableGroupAll::All)
        {
            // store the highest-priority contract number, if not yet provided
            if (!this.ContractId)
            {
                this.ContractId = contractTable.ContractId;
            }
    
            // when called from a rental order (line) we need to check for venue (group) contracts
            // whether the business relation in question is subscribed to a particular contract
            if ((this.ContractType == RAGContractType::RentalOrder || this.ContractType == RAGContractType::RentalOrderLine)
            &&  (contractTable.ContractType == RAGContractType::Venue || contractTable.ContractType == RAGContractType::VenueGroup))
            {
                if (subscription.RecId != 0)
                {
                    contractHierarchyMap.insert(contractTable.ContractType, contractTable.ContractId);
                }
            }
            else
            {
                contractHierarchyMap.insert(contractTable.ContractType, contractTable.ContractId);
            }
        }
    
        if (!contractHierarchyMap.exists(RAGContractType::Default))
        {
            warning(strFmt("@DNR6585", this.RentalSubRental, this.CurrencyCode, this.TransDate));
        }
    
        this.ContractHierarchy = contractHierarchyMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractHierarchyMap</Name>
				<Source><![CDATA[
    public Map contractHierarchyMap()
    {
        Map hierarchy = null;
    
        if (this.ContractHierarchy)
        {
            hierarchy = Map::create(this.ContractHierarchy);
        }
    
        return hierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractHierarchyRange</Name>
				<Source><![CDATA[
    public Range contractHierarchyRange()
    {
        Map             hierarchy;
        MapEnumerator   enumerator;
        Range           contractIdRange;
    
        hierarchy = this.contractHierarchyMap();
    
        if(hierarchy)
        {
            enumerator = hierarchy.getEnumerator();
    
            while(enumerator.moveNext())
            {
                if(contractIdRange)
                {
                    contractIdRange += ',';
                }
    
                contractIdRange += enumerator.currentValue();
            }
        }
    
        return (contractIdRange ? contractIdRange : SysQuery::valueUnlimited());
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceInactiveContract</Name>
				<Source><![CDATA[
    public void forceInactiveContract(RAGContractTable _inactiveContract)
    {
        if(_inactiveContract.Status != RAGContractStatus::Confirmed
        || _inactiveContract.FromDate > this.TransDate
        || _inactiveContract.ToDate < this.TransDate)
        {
            Map hierarchyMap = this.contractHierarchyMap();
            hierarchyMap.insert(_inactiveContract.ContractType, _inactiveContract.ContractId);
            this.ContractHierarchy = hierarchyMap.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromToDates</Name>
				<Source><![CDATA[
    public container getFromToDates()
    {
        boolean     hasDates;
        TransDate   fromDate;
        TransDate   toDate;
    
        RORRentalDateTimes  rentalDateTimes;
        FieldId             fieldIdPeriodStartDateTime;
        FieldId             fieldIdPeriodEndDateTime;
        FieldId             fieldIdPeriodExpectedEndDateTime;
    
        switch (this.ContractType)
        {
           case enum2int(RAGContractType::RentalOrder):
                if (this.ContractRefModule == RAGContractRefModule::Sales)
                {
                    rentalDateTimes = SalesTable::find(this.RentalHeaderId).RORRentalDateTimesHost::rentalDateTimes();
                }
                else if (this.ContractRefModule == RAGContractRefModule::Purchase)
                {
                    rentalDateTimes = PurchTable::find(this.RentalHeaderId).RORRentalDateTimesHost::rentalDateTimes();
                }
                break;
    
            case enum2int(RAGContractType::RentalOrderLine):
                if (this.ContractRefModule == RAGContractRefModule::Sales)
                {
                    rentalDateTimes = SalesLine::findInventTransId(this.RentalLineId).RORRentalDateTimesHost::rentalDateTimes();
                }
                else if (this.ContractRefModule == RAGContractRefModule::Purchase)
                {
                    rentalDateTimes = PurchLine::findInventTransId(this.RentalLineId).RORRentalDateTimesHost::rentalDateTimes();
                }
                break;
    
            default:
                //do nothing;
        }
    
        if (rentalDateTimes)
        {
            hasDates = true;
            [fieldIdPeriodStartDateTime, fieldIdPeriodEndDateTime, fieldIdPeriodExpectedEndDateTime] = RORRentalDateTimes::getPeriodFieldIds();
    
            fromDate = rentalDateTimes.(fieldIdPeriodStartDateTime);
            toDate = DateTimeUtil::date(rentalDateTimes.(fieldIdPeriodEndDateTime)) ?
                        DateTimeUtil::date(rentalDateTimes.(fieldIdPeriodEndDateTime)) :
                        DateTimeUtil::date(rentalDateTimes.(fieldIdPeriodExpectedEndDateTime));
        }
    
        return [hasDates, fromDate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelationAccount</Name>
				<Source><![CDATA[
    public RAGRelationAccount getRelationAccount()
    {
        RAGRelationAccount relAccount;
    
        switch (this.ContractType)
        {
            case RAGContractType::Default:
                relAccount = '';
                break;
    
            case RAGContractType::BusRelContractGroup:
                relAccount = this.BusRelGroupId;
                break;
    
            case RAGContractType::BusinessRelation:
                relAccount = this.BusRelAccount;
                break;
    
            case RAGContractType::VenueGroup:
                relAccount = this.VenueGroupId;
                break;
    
            case RAGContractType::Venue:
                relAccount = this.VenueCode;
                break;
    
            case RAGContractType::ProjectGroup:
                relAccount = this.ProjGroupId;
                break;
    
            case RAGContractType::Project:
                relAccount = this.ProjId;
                break;
    
            case RAGContractType::RentalOrder:
                relAccount = this.RentalHeaderId;
                break;
    
            case RAGContractType::RentalOrderLine:
                relAccount = this.RentalLineId;
                break;

            case RAGContractType::Warehouse:
                relAccount = this.InventLocationId;
                break;

            case RAGContractType::WarehouseGroup:
                relAccount = this.WarehouseGroupId;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return relAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    public void initFromCommon(Common _caller)
    {
        RAGParameters           parameters = RAGParameters::find();
        FieldId                 fieldIdRentalDate;
    
        RAGBusRelContractGroup  busRelGroup;
        smmBusRelTable          busRelTable;
        RORVenueGroup           venueGroup;
        RORVenueTable           venueTable;
        SalesTable              salesTable;
        PurchTable              purchTable;
        SalesQuotationTable     salesQuotationTable;
        InventLocation          inventLocation;        
    
        if(parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        this.RefTableId         = _caller.TableId;
        this.RefRecId           = _caller.RecId;

        switch (_caller.TableId)
        {
            case tableNum(RAGBusRelContractGroup):
                busRelGroup                 = _caller;
    
                this.BusRelGroupId          = busRelGroup.BusRelGroupId;
                this.ContractType           = RAGContractType::BusRelContractGroup;
                this.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
    
            case tableNum(smmBusRelTable):
                busRelTable                 = _caller;
    
                this.CurrencyCode           = busRelTable.Currency;
                this.ContractType           = RAGContractType::BusinessRelation;
                this.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                this.BusRelAccount          = busRelTable.BusRelAccount;
                this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
                break;
    
            case tableNum(RORVenueGroup):
                venueGroup                  = _caller;
    
                this.ContractType           = RAGContractType::VenueGroup;
                this.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                this.VenueGroupId           = venueGroup.VenueGroupId;
                break;
    
            case tableNum(RORVenueTable):
                venueTable                  = _caller;
    
                this.ContractType           = RAGContractType::Venue;
                this.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                this.VenueGroupId           = venueTable.VenueGroupId;
                this.VenueCode              = venueTable.VenueCode;
                break;
    
            case tableNum(SalesTable):
                salesTable                  = _caller;
                busRelTable                 = smmBusRelTable::findCust(salesTable.CustAccount);
                fieldIdRentalDate           = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
                inventLocation              = InventLocation::find(salesTable.InventLocationId);
    
                this.CurrencyCode           = salesTable.CurrencyCode;
                this.ContractType           = RAGContractType::RentalOrder;
                this.TransDate              = salesTable.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
                this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
                this.BusRelAccount          = busRelTable.BusRelAccount;
                this.VenueCode              = salesTable.RORVenueCode;
                this.ProjId                 = salesTable.ProjId;
                this.ContractRefModule      = RAGContractRefModule::Sales;
                this.RentalSubRental        = RAGRentalSubRental::Rental;
                this.RentalHeaderId         = salesTable.SalesId;
                this.INVInvoiceProfileId    = salesTable.INVInvoiceProfileId;
                this.InventLocationId       = salesTable.InventLocationId;
                this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
                break;
    
            case tableNum(PurchTable):
                purchTable                  = _caller;
                busRelTable                 = smmBusRelTable::findVend(purchTable.OrderAccount);
                fieldIdRentalDate           = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
                inventLocation              = InventLocation::find(purchTable.InventLocationId);
    
                this.CurrencyCode           = purchTable.CurrencyCode;
                this.ContractType           = RAGContractType::RentalOrder;
                this.TransDate              = purchTable.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
                this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
                this.BusRelAccount          = busRelTable.BusRelAccount;
                this.VenueCode              = purchTable.RORVenueCode;
                this.ProjId                 = purchTable.ProjId;
                this.ContractRefModule      = RAGContractRefModule::Purchase;
                this.RentalSubRental        = RAGRentalSubRental::SubRental;
                this.RentalHeaderId         = purchTable.PurchId;
                this.INVInvoiceProfileId    = purchTable.INVInvoiceProfileId;
                this.InventLocationId       = purchTable.InventLocationId;
                this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
                break;
    
            case tableNum(SalesQuotationTable):
                salesQuotationTable         = _caller;
                fieldIdRentalDate           = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
                busRelTable                 = smmBusRelTable::find(salesQuotationTable.BusRelAccount);
                inventLocation              = InventLocation::find(salesQuotationTable.InventLocationId);
    
                this.CurrencyCode           = salesQuotationTable.CurrencyCode;
                this.ContractType           = RAGContractType::RentalOrder;
                this.TransDate              = salesQuotationTable.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
                this.BusRelAccount          = busRelTable.BusRelAccount;
                this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
                this.VenueCode              = salesQuotationTable.RORVenueCode;
                this.ProjId                 = salesQuotationTable.ProjIdRef;
                this.ContractRefModule      = RAGContractRefModule::Quotation;
                this.RentalSubRental        = RAGRentalSubRental::Rental;
                this.RentalHeaderId         = salesQuotationTable.QuotationId;
                this.INVInvoiceProfileId    = salesQuotationTable.INVInvoiceProfileId;
                this.InventLocationId       = salesQuotationTable.InventLocationId;
                this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
                break;
    
            case tableNum(SalesLine), tableNum(PurchLine), tableNum(SalesQuotationLine):
                this.initFromRentalLine(_caller);
                return; // prevent this.populate() from being called again
    
            case tableNum(RAGContractTable):
                this.initFromContractTable(_caller);
                return; // prevent this.populate() from being called again
    
            default:
                EventHandlerResult  result = new EventHandlerResult();
                
                RAGContractDataParm::initFromCommon_Delegate(this, _caller, result);
                if (!result.hasResult())
                {
                    throw error(strFmt("@SYS31187", tableId2Name(_caller.TableId)));
                }
        }
    
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon_Delegate</Name>
				<Source><![CDATA[
    static delegate void initFromCommon_Delegate(RAGContractDataParm _contractDataParm, Common   _common, EventHandlerResult _result){}

]]></Source>
			</Method>
			<Method>
				<Name>initFromContractTable</Name>
				<Source><![CDATA[
    public void initFromContractTable(RAGContractTable _contractTable)
    {
        FieldId         fieldIdRentalDate;
        RAGParameters   parameters = RAGParameters::find();
        smmBusRelTable  busRelTable;
        RORRentalHeader rentalHeader;
        RORRentalLine   rentalLine;
        ProjTable       projTable;
        InventLocation  inventLocation;

        if(parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None
        || parameters.RORLineDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        this.ContractId         = _contractTable.ContractId;
        this.ContractType       = _contractTable.ContractType;
        this.CurrencyCode       = _contractTable.CurrencyCode;
        this.ContractRefModule  = _contractTable.ReferenceModule;
        this.RentalSubRental    = _contractTable.RentalSubRental;
        this.TransDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    
        switch (_contractTable.ContractType)
        {
            case RAGContractType::Default:
                break;
    
            case RAGContractType::BusRelContractGroup:
                this.BusRelGroupId = _contractTable.RelationAccount;
                break;
    
            case RAGContractType::BusinessRelation:
                this.BusRelAccount = _contractTable.RelationAccount;
                break;
    
            case RAGContractType::VenueGroup:
                this.VenueGroupId = _contractTable.RelationAccount;
                break;
    
            case RAGContractType::Venue:
                this.VenueCode = _contractTable.RelationAccount;
                break;
    
            case RAGContractType::ProjectGroup:
                this.ProjGroupId            = _contractTable.RelationAccount;
                break;

            case RAGContractType::Project:
                projTable                   = ProjTable::find(_contractTable.RelationAccount);
                this.ProjId                 = _contractTable.RelationAccount;
                this.ProjGroupId            = projTable.projid;
                busRelTable                 = smmBusRelTable::find(projTable.CustAccount);
                if(busRelTable)
                {
                    this.BusRelAccount      = busRelTable.BusRelAccount;
                    this.BusRelGroupId      = busRelTable.RAGBusRelGroupId;
                }
                break;

            case RAGContractType::RentalOrder:
                rentalHeader                = _contractTable.rentalHeaderLine();
                busRelTable                 = rentalHeader.RORsmmBusRelTable();
                fieldIdRentalDate           = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
                inventLocation              = InventLocation::find(rentalHeader.InventLocationId);
    
                this.TransDate              = rentalHeader.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
                this.BusRelAccount          = busRelTable.BusRelAccount;
                this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
                this.RentalHeaderId         = rentalHeader.HeaderId;
                this.ProjId                 = rentalHeader.ProjId;
                this.VenueCode              = rentalHeader.VenueCode;
                this.INVInvoiceProfileId    = rentalHeader.INVInvoiceProfileId;
                this.InventLocationId       = rentalHeader.InventLocationId;
                this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
                break;
    
            case RAGContractType::RentalOrderLine:                
                rentalLine                  = _contractTable.rentalHeaderLine();
                rentalHeader                = rentalLine.RORGetHeader();
                busRelTable                 = rentalHeader.RORsmmBusRelTable();
                fieldIdRentalDate           = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORLineDateTimeType);
                inventLocation              = InventDim::find(rentalLine.inventDimId).inventLocation();                
    
                this.TransDate              = rentalLine.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
                this.BusRelAccount          = busRelTable.BusRelAccount;
                this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
                this.RentalHeaderId         = rentalHeader.HeaderId;
                this.RentalLineId           = rentalLine.InventTransId;
                this.ProjId                 = rentalHeader.ProjId;
                this.VenueCode              = rentalHeader.VenueCode;
                this.BOBRentalTypeId        = rentalLine.BOBRentalTypeId;
                this.INVInvoiceProfileId    = rentalLine.INVInvoiceProfileId;
                this.InventLocationId       = inventLocation.InventLocationId;
                this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
                break;

            case RAGContractType::Warehouse:
                this.InventLocationId = _contractTable.RelationAccount;
                break;

            case RAGContractType::WarehouseGroup:
                this.WarehouseGroupId = _contractTable.RelationAccount;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    public void initFromPurchLine(PurchLine _purchLine)
    {
        FieldId             fieldIdRentalDate;
        RAGParameters       parameters;
        PurchTable          purchTable;
        smmBusRelTable      busRelTable;
        InventLocation      inventLocation;
    
        parameters  = RAGParameters::find();
    
        if(parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None
        || parameters.RORLineDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        purchTable  = _purchLine.purchTable();
        busRelTable = smmBusRelTable::findVend(_purchLine.VendAccount);
        inventLocation = _purchLine.inventDim().inventLocation();
        
        this.RefTableId             = _purchLine.TableId;
        this.RefRecId               = _purchLine.RecId;
        this.ContractType           = RAGContractType::RentalOrderLine;
        this.CurrencyCode           = _purchLine.CurrencyCode;
        this.ContractRefModule      = RAGContractRefModule::Purchase;
        this.BusRelAccount          = busRelTable.BusRelAccount;
        this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
        this.VenueCode              = purchTable.RORVenueCode;
        this.ProjId                 = _purchLine.ProjId;
        this.RentalHeaderId         = _purchLine.PurchId;
        this.RentalLineId           = _purchLine.InventTransId;
        this.BOBRentalTypeId        = _purchLine.BOBRentalTypeId;
        this.RentalSubRental        = RAGRentalSubRental::SubRental;
        this.INVInvoiceProfileId    = _purchLine.INVInvoiceProfileId;
        this.InventLocationId       = inventLocation.InventLocationId;
        this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
    
        if (_purchLine.RecId) // PurchLine is already inserted, rental dates are initialized
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORLineDateTimeType);
            this.TransDate          = _purchLine.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        if (!this.TransDate) // PurchLine is being created, no rental dates yet. Use the header's dates instead
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
            this.TransDate          = purchTable.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        if (!this.TransDate)
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
            this.TransDate          = SalesTable::find(purchTable.InterCompanyOriginalSalesId).RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRentalLine</Name>
				<Source><![CDATA[
    public void initFromRentalLine(RORRentalLine _rentalLine)
    {
        switch (_rentalLine.TableId)
        {
            case tableNum(SalesLine):
                this.initFromSalesLine(_rentalLine);
                break;
    
            case tableNum(PurchLine):
                this.initFromPurchLine(_rentalLine);
                break;
    
            case tableNum(VendPackingSlipTrans):
                this.initFromPurchLine(PurchLine::findInventTransId(_rentalLine.InventTransId));
                break;
    
            case tableNum(SalesQuotationLine):
                this.initFromSalesQuotationLine(_rentalLine);
                break;
    
            case tableNum(RORRentalEditorLine):
                this.initFromRORRentalEditorLine(_rentalLine);
                break;
    
            case tableNum(CustConfirmTrans):
                this.initFromSalesLine(SalesLine::findInventTransId(_rentalLine.InventTransId));
                break;
    
            case tableNum(CustPackingSlipTrans):
                this.initFromSalesLine(SalesLine::findInventTransId(_rentalLine.InventTransId));
                break;
    
            case tableNum(CustInvoiceTrans):
                this.initFromSalesLine(SalesLine::findInventTransId(_rentalLine.InventTransId));
                break;
    
            default:
                EventHandlerResult  result = new EventHandlerResult();

                RAGContractDataParm::initFromCommon_Delegate(this, _rentalLine, result);
                if(!result.hasResult())
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRORRentalEditorLine</Name>
				<Source><![CDATA[
    public void initFromRORRentalEditorLine(RORRentalEditorLine _rentalEditorLine)
    {
        FieldId                 fieldIdRentalDate;
        RAGParameters           parameters;
        Common                  parentHeaderRecord;
        RORRentalHeader         rentalHeader;
        smmBusRelTable          busRelTable;
        RORRentalDateTimes      rentalDateTimes;
    
        parameters  = RAGParameters::find();
    
        if(parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None
        || parameters.RORLineDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        parentHeaderRecord  = _rentalEditorLine.salesPurchTable();
        rentalHeader = parentHeaderRecord;

        switch (_rentalEditorLine.RefTableId)
        {
            case tableNum(PurchLine):
                busRelTable = smmBusRelTable::findVend(_rentalEditorLine.CustVendAccount);
                this.RentalSubRental    = RAGRentalSubRental::SubRental;
                this.ContractRefModule  = RAGContractRefModule::Purchase;
                break;

            case tableNum(SalesLine):
                busRelTable = smmBusRelTable::findCust(_rentalEditorLine.CustVendAccount);
                this.RentalSubRental    = RAGRentalSubRental::Rental;
                this.ContractRefModule  = RAGContractRefModule::Sales;
                break;
            
            case tableNum(SalesQuotationLine):
                busRelTable = smmBusRelTable::findCust(_rentalEditorLine.CustVendAccount);
                
                // In case the business relation is not a Customer yet
                if (!busRelTable)
                {
                    SalesQuotationLine      salesQuotationLine;
                    SalesQuotationTable     salesQuotationTable;

                    select firstonly busRelTable
                        join TableId from salesQuotationTable
                        where salesQuotationTable.BusRelAccount == busRelTable.BusRelAccount
                            exists join salesQuotationLine
                            where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                            &&    salesQuotationLine.RecId == _rentalEditorLine.RefRecId;
                    
                }
                this.RentalSubRental    = RAGRentalSubRental::Rental;
                this.ContractRefModule  = RAGContractRefModule::Quotation;
                break;
        }
    
        this.RefTableId             = _rentalEditorLine.TableId;
        this.RefRecId               = _rentalEditorLine.RecId;
        this.ContractType           = RAGContractType::RentalOrderLine;
        this.CurrencyCode           = _rentalEditorLine.CurrencyCode;
        this.BusRelAccount          = busRelTable.BusRelAccount;
        this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
        this.VenueCode              = rentalHeader.VenueCode;
        this.ProjId                 = rentalHeader.ProjId;
        this.RentalHeaderId         = _rentalEditorLine.HeaderId;
        this.RentalLineId           = _rentalEditorLine.InventTransId;
        this.BOBRentalTypeId        = _rentalEditorLine.BOBRentalTypeId;        
        this.INVInvoiceProfileId    = _rentalEditorLine.INVInvoiceProfileId;
        this.InventLocationId       = _rentalEditorLine.InventLocationId;
        this.WarehouseGroupId       = InventLocation::find(_rentalEditorLine.InventLocationId).DNRWarehouseGroupId;
    
        rentalDateTimes = _rentalEditorLine.salesPurchLine().RORRentalDateTimesHost::rentalDateTimes();
    
        if (rentalDateTimes)
        {
            fieldIdRentalDate   = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORLineDateTimeType);
            this.TransDate      = rentalDateTimes.(fieldIdRentalDate);
        }
        else // line is being created, no rental dates yet. Use the header's dates instead
        {
            fieldIdRentalDate   = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
            this.TransDate      = parentHeaderRecord.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    public void initFromSalesLine(SalesLine _salesLine)
    {
        FieldId             fieldIdRentalDate;
        RAGParameters       parameters;
        SalesTable          salesTable;
        smmBusRelTable      busRelTable;
        InventLocation      inventLocation;
    
        parameters  = RAGParameters::find();
    
        if(parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None
        || parameters.RORLineDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        salesTable  = _salesLine.salesTable();
        busRelTable = smmBusRelTable::findCust(_salesLine.CustAccount);
        inventLocation = InventDim::find(_salesLine.InventDimId).inventLocation();
    
        this.RefTableId             = _salesLine.TableId;
        this.RefRecId               = _salesLine.RecId;
        this.ContractType           = RAGContractType::RentalOrderLine;
        this.CurrencyCode           = _salesLine.CurrencyCode;
        this.ContractRefModule      = RAGContractRefModule::Sales;
        this.BusRelAccount          = busRelTable.BusRelAccount;
        this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
        this.VenueCode              = salesTable.RORVenueCode;
        this.ProjId                 = _salesLine.ProjId;
        this.RentalHeaderId         = _salesLine.SalesId;
        this.RentalLineId           = _salesLine.InventTransId;
        this.BOBRentalTypeId        = _salesLine.BOBRentalTypeIdRequested;
        this.RentalSubRental        = RAGRentalSubRental::Rental;
        this.INVInvoiceProfileId    = _salesLine.INVInvoiceProfileId;
        this.InventLocationId       = inventLocation.InventLocationId;
        this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
    
        if (_salesLine.RecId) // SalesLine has already been inserted, rental dates are initialized
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORLineDateTimeType);
            this.TransDate          = _salesLine.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        if (!this.TransDate) // SalesLine is being created, no rental dates yet. Use the header's dates instead
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
            this.TransDate          = salesTable.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    public void initFromSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        FieldId             fieldIdRentalDate;
        RAGParameters       parameters;
        SalesQuotationTable salesQuotationTable;
        smmBusRelTable      busRelTable;
        InventLocation      inventLocation;
    
        parameters = RAGParameters::find();
    
        if(parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None
        || parameters.RORLineDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        salesQuotationTable = _salesQuotationLine.salesQuotationTable();
        busRelTable = salesQuotationTable.BusRelAccount ? smmBusRelTable::find(salesQuotationTable.BusRelAccount) : smmBusRelTable::findCust(_salesQuotationLine.CustAccount);
        inventLocation = InventDim::find(_salesQuotationLine.InventDimId).inventLocation();        
    
        this.RefTableId             = _salesQuotationLine.TableId;
        this.RefRecId               = _salesQuotationLine.RecId;
        this.ContractType           = RAGContractType::RentalOrderLine;
        this.CurrencyCode           = _salesQuotationLine.CurrencyCode;
        this.ContractRefModule      = RAGContractRefModule::Quotation;
        this.BusRelAccount          = busRelTable.BusRelAccount;
        this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
        this.VenueCode              = salesQuotationTable.RORVenueCode;
        this.ProjId                 = salesQuotationTable.ProjIdRef;
        this.RentalHeaderId         = _salesQuotationLine.QuotationId;
        this.RentalLineId           = _salesQuotationLine.InventTransId;
        this.BOBRentalTypeId        = _salesQuotationLine.BOBRentalTypeIdRequested;
        this.RentalSubRental        = RAGRentalSubRental::Rental;
        this.INVInvoiceProfileId    = _salesQuotationLine.INVInvoiceProfileId;
        this.InventLocationId       = inventLocation.InventLocationId;
        this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
    
        if (_salesQuotationLine.RecId) // SalesQuotationLine is already inserted, rental dates are initialized
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORLineDateTimeType);
            this.TransDate          = _salesQuotationLine.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
        else // SalesQuotationLine is being created, no rental dates yet. Use the header's dates instead
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
            this.TransDate          = salesQuotationTable.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpPurchLinePrice</Name>
				<Source><![CDATA[
    public void initFromTmpPurchLinePrice(SalesLine _salesLine, TmpPurchLinePrice _tmpPurchLinePrice)
    {
        FieldId             fieldIdRentalDate;
        RAGParameters       parameters;
        SalesTable          salesTable;
        smmBusRelTable      busRelTable;
        InventLocation      inventLocation;
    
        parameters  = RAGParameters::find();
    
        if(parameters.RORHeaderDateTimeType == RORRentalDateTimeType::None
        || parameters.RORLineDateTimeType == RORRentalDateTimeType::None)
        {
            throw error("@DNR6665");
        }
    
        salesTable  = _salesLine.salesTable();
        busRelTable = smmBusRelTable::findVend(_tmpPurchLinePrice.AccountNum);
        inventLocation = InventDim::find(_tmpPurchLinePrice.InventDimId).inventLocation(); 
    
        this.RefTableId             = _salesLine.TableId;
        this.RefRecId               = _salesLine.RecId;
        this.ContractType           = RAGContractType::RentalOrderLine;
        this.CurrencyCode           = _tmpPurchLinePrice.CurrencyCode;
        this.ContractRefModule      = RAGContractRefModule::None;
        this.BusRelAccount          = busRelTable.BusRelAccount;
        this.BusRelGroupId          = busRelTable.RAGBusRelGroupId;
        this.VenueCode              = salesTable.RORVenueCode;
        this.ProjId                 = _salesLine.ProjId;
        this.RentalHeaderId         = _salesLine.SalesId;
        this.RentalLineId           = _salesLine.InventTransId;
        this.BOBRentalTypeId        = _salesLine.BOBRentalTypeIdRequested;
        this.RentalSubRental        = RAGRentalSubRental::SubRental;
        this.INVInvoiceProfileId    = _salesLine.INVInvoiceProfileId;
        this.InventLocationId       = inventLocation.InventLocationId;
        this.WarehouseGroupId       = inventLocation.DNRWarehouseGroupId;
    
        if (_salesLine.RecId) // SalesLine has already been inserted, rental dates are initialized
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORLineDateTimeType);
            this.TransDate          = _salesLine.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        if (!this.TransDate) // SalesLine is being created, no rental dates yet. Use the header's dates instead
        {
            fieldIdRentalDate       = RORRentalDateTimes::dateTimeType2FieldId(parameters.RORHeaderDateTimeType);
            this.TransDate          = salesTable.RORRentalDateTimesHost::rentalDateTimes().(fieldIdRentalDate);
        }
    
        this.populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public server void populate()
    {
        if (!this.validate())
        {
            throw error("@DNR1760");
        }
    
        // if a rental type is provided, only allow contract data population if that rental type appears in the sorting table
        if (!this.BOBRentalTypeId || RAGRentalTypeGroupSorting::exist(this.BOBRentalTypeId, RAGTypeGroup::Type))
        {
            this.CanPopulate = NoYes::Yes;
    
            if (this.BusRelAccount && !this.BusRelGroupId)
            {
                this.BusRelGroupId = smmBusRelTable::find(this.BusRelAccount).RAGBusRelGroupId;
            }
    
            if (this.VenueCode && !this.VenueGroupId)
            {
                this.VenueGroupId = RORVenueTable::find(this.VenueCode).VenueGroupId;
            }
    
            if (this.ProjId && !this.ProjGroupId)
            {
                this.ProjGroupId = ProjTable::find(this.ProjId).ProjGroupId;
            }

            if (this.InventLocationId && !this.WarehouseGroupId)
            {
                this.WarehouseGroupId = InventLocation::find(this.InventLocationId).DNRWarehouseGroupId;
            }
    
            this.ContractPriority = RAGContractTypePriority::find(this.ContractType).Priority;
            this.buildContractHierarchy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean             ret = true;
        RAGContractDataParm blankRecord;
    
        if (this.equal(blankRecord))
        {
            ret = checkFailed(strFmt("@DNR1575", funcName()));
        }
    
        if (ret && !this.CurrencyCode)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS7572"));
        }
    
        if (ret && !this.TransDate)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS67"));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR6584</Label>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOBRentalTypeId</Name>
			<ExtendedDataType>BOBRentalTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusRelAccount</Name>
			<ExtendedDataType>smmBusRelAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusRelGroupId</Name>
			<ExtendedDataType>RAGBusRelGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanPopulate</Name>
			<HelpText>@DNR5392</HelpText>
			<Label>@DNR2157</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ContractHierarchy</Name>
			<ExtendedDataType>RORContractHierarchy</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<ExtendedDataType>RAGContractId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ContractPriority</Name>
			<ExtendedDataType>Priority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContractRefModule</Name>
			<EnumType>RAGContractRefModule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractRelation</Name>
			<ExtendedDataType>RAGRelationAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContractType</Name>
			<EnumType>RAGContractType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MustPopulateNames</Name>
			<HelpText>@DNR5393</HelpText>
			<Label>@DNR2157</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjGroupId</Name>
			<ExtendedDataType>ProjGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalHeaderId</Name>
			<ExtendedDataType>RORHeaderId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalLineId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RentalSubRental</Name>
			<EnumType>RAGRentalSubRental</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VenueCode</Name>
			<ExtendedDataType>RORVenueCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VenueGroupId</Name>
			<ExtendedDataType>RORVenueGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MustPopulateAllTierTypes</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>INVInvoiceProfileId</Name>
			<ExtendedDataType>INVInvoiceProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseGroupId</Name>
			<ExtendedDataType>DNRWarehouseGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>TableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBRentalType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOBRentalType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOBRentalTypeId</Name>
					<Field>BOBRentalTypeId</Field>
					<RelatedField>RentalTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjGroupId</Name>
					<SourceEDT>ProjGroupId</SourceEDT>
					<Field>ProjGroupId</Field>
					<RelatedField>ProjGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAGContractTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAGContractTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContractId</Name>
					<SourceEDT>RAGContractId</SourceEDT>
					<Field>ContractId</Field>
					<RelatedField>ContractId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RORVenueGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RORVenueGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VenueGroupId</Name>
					<SourceEDT>RORVenueGroupId</SourceEDT>
					<Field>VenueGroupId</Field>
					<RelatedField>VenueGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VenueGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusRelAccount</Name>
					<SourceEDT>smmBusRelAccount</SourceEDT>
					<Field>BusRelAccount</Field>
					<RelatedField>BusRelAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FINRentalInvoiceProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FINRentalInvoiceProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>INVInvoiceProfileId</Name>
					<SourceEDT>INVInvoiceProfileId</SourceEDT>
					<Field>INVInvoiceProfileId</Field>
					<RelatedField>InvoiceProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DNRWarehouseGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DNRWarehouseGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseGroupId</Name>
					<Field>WarehouseGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>