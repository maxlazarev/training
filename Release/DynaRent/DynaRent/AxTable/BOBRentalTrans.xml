<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBRentalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOBRentalTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeMerged</Name>
				<Source><![CDATA[
    public boolean canBeMerged(BOBRentalTrans _otherRentalTrans)
    {
        return (this.Active             == _otherRentalTrans.Active             &&
                this.AssetId            == _otherRentalTrans.AssetId            &&
                this.CertaintyFrom      == _otherRentalTrans.CertaintyFrom      &&
                this.CertaintyTo        == _otherRentalTrans.CertaintyTo        &&
                this.CompanyId          == _otherRentalTrans.CompanyId          &&
                this.FromDateTime       == _otherRentalTrans.FromDateTime       &&
                this.InventTransOrigin  == _otherRentalTrans.InventTransOrigin  &&
                this.InventTransRecId   == _otherRentalTrans.InventTransRecId   &&
                this.ObjectId           == _otherRentalTrans.ObjectId           &&
                this.RentalTypeId       == _otherRentalTrans.RentalTypeId       &&
                this.SubStatus          == _otherRentalTrans.SubStatus          &&
                this.ToDateTime         == _otherRentalTrans.ToDateTime         &&
                this.TransType          == _otherRentalTrans.TransType          &&
                this.InventLocationId   == _otherRentalTrans.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BOBRentalSumUpdateGlobal::Instance().deleteRentalTrans(this);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>direction</Name>
				<Source><![CDATA[
    public BOBReceiptIssue direction(boolean _isFromDate)
    {
        BOBReceiptIssue direction;
    
        switch (this.TransType)
        {
            case BOBRentalTransType::Purch :
                direction = BOBReceiptIssue::Receipt;
                break;
    
            case BOBRentalTransType::Sales,
                 BOBRentalTransType::SalesQuotation :
                direction = BOBReceiptIssue::Issue;
                break;
    
            case BOBRentalTransType::SubRental :
                direction = _isFromDate ? BOBReceiptIssue::Receipt : BOBReceiptIssue::Issue;
                break;
    
            case BOBRentalTransType::Rental,
                 BOBRentalTransType::RentalQuotation :
                direction = _isFromDate ? BOBReceiptIssue::Issue : BOBReceiptIssue::Receipt;
                break;
    
            default :
                direction = BOBReceiptIssue::Receipt;
        }
    
        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValidOrigin</Name>
				<Source><![CDATA[
    public boolean hasValidOrigin()
    {
        return (this.TransType && this.CompanyId && xDataArea::exist(this.CompanyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    
        BOBRentalSumUpdateGlobal::Instance().insertRentalTrans(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOrigin</Name>
				<Source><![CDATA[
    public void jumpRefOrigin()
    {
        Args                args = new Args();
        MenuFunction        menuFunction;
        InventTransOrigin   inventTransOrigin;
        SalesTable          salesTable;
        PurchTable          purchTable;
        SalesQuotationTable salesQuotationTable;
    
        if(this.hasValidOrigin())
        {
            changeCompany(this.CompanyId)
            {
                switch(this.TransType)
                {
                    case BOBRentalTransType::Sales, BOBRentalTransType::Rental:
                        select firstOnly salesTable
                            exists join inventTransOrigin
                            where inventTransOrigin.RecId == this.InventTransOrigin
                            &&    inventTransOrigin.ReferenceId == salesTable.SalesId
                            &&    inventTransOrigin.ReferenceCategory == InventTransType::Sales;
    
                        if(salesTable)
                        {
                            args.record(salesTable);
                            menuFunction = new MenuFunction(menuItemDisplayStr(RORSalesTableMainTable), MenuItemType::Display);
                        }
                        break;
    
                    case BOBRentalTransType::Purch, BOBRentalTransType::SubRental:
                        select firstOnly purchTable
                            exists join inventTransOrigin
                            where inventTransOrigin.RecId == this.InventTransOrigin
                            &&    inventTransOrigin.ReferenceId == purchTable.PurchId
                            &&    inventTransOrigin.ReferenceCategory == InventTransType::Purch;
    
                        if(purchTable)
                        {
                            args.record(purchTable);
                            menuFunction = new MenuFunction(menuItemDisplayStr(RORPurchTableMainTable), MenuItemType::Display);
                        }
                        break;
    
                    case BOBRentalTransType::SalesQuotation, BOBRentalTransType::RentalQuotation:
                        select firstOnly salesQuotationTable
                            exists join inventTransOrigin
                            where inventTransOrigin.RecId == this.InventTransOrigin
                            &&    inventTransOrigin.ReferenceId == salesQuotationTable.QuotationId
                            &&    inventTransOrigin.ReferenceCategory == InventTransType::SalesQuotation;
    
                        if(salesQuotationTable)
                        {
                            args.lookupValue(salesQuotationTable.QuotationId);
                            menuFunction = new MenuFunction(menuItemDisplayStr(SalesQuotationJumpRef), MenuItemType::Display);
                        }
                        break;
    
                    case BOBRentalTransType::Asset:
                        InventJournalTable inventJournalTable;

                        select firstOnly inventJournalTable
                            exists join inventTransOrigin
                            where inventTransOrigin.RecId == this.InventTransOrigin
                            &&    inventTransOrigin.ReferenceId == inventJournalTable.JournalId
                            &&    inventTransOrigin.ReferenceCategory == InventTransType::Asset;

                        if (inventJournalTable)
                        {
                            args.record(inventJournalTable);
                            args.formViewOption(FormViewOption::Details);
                            menuFunction = new MenuFunction(menuItemDisplayStr(InventJournalTableAsset), MenuItemType::Display);
                        }
                        else
                        {
                            args.lookupRecord(AssetTable::find(this.AssetId));
                            menuFunction = new MenuFunction(menuItemDisplayStr(AssetTable), MenuItemType::Display);
                        }
                        break;
    
                    case BOBRentalTransType::Invent:
                        select firstOnly inventTransOrigin
                        where inventTransOrigin.RecId == this.InventTransOrigin;
    
                        DNRInventTransFormHelper::jumpRefReferenceId(inventTransOrigin);
                        break;
    
                    case BOBRentalTransType::WPPWorkOrder:
                        args.lookupField(fieldNum(WPPWorkOrderTable, WorkOrderId));
                        args.lookupValue(WPPWorkOrderLine::findRecId(this.WPPWorkOrderLineRecId).WorkOrderId);
                        menuFunction = new MenuFunction(menuItemDisplayStr(WPPWorkOrderTable), MenuItemType::Display);
                        break;
    
                    default:
                        // do nothing
                        break;
                }
    
                if(menuFunction)
                {
                    menuFunction.run(args);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        BOBRentalSumUpdateGlobal::Instance().updateRentalTrans(this);
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventTransRecId</Name>
				<Source><![CDATA[
    public static boolean existInventTransRecId(RecId _inventTransRecId)
    {
        return (_inventTransRecId && (select firstOnly RecId from BOBRentalTrans
                                      where BOBRentalTrans.InventTransRecId == _inventTransRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static BOBRentalTrans findRecId(RecId _recId, boolean _forUpdate = false)
    {
        BOBRentalTrans ret;
    
        if(_recId)
        {
            if(_forUpdate)
            {
                ret.selectForUpdate(true);
            }
    
            select firstOnly ret
            where ret.RecId == _recId;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDateTime</Name>
				<Source><![CDATA[
    public static TransDateTime roundOffDateTime(TransDateTime _transDateTime, BOBRentalSumRoundingRange _rounding)
    {
        #TimeConstants
        TransDate       transDate;
        TimeOfDay       transTime;
        int             decimals;
    
        // TODO: timezones
    
        transDate = DateTimeUtil::date(_transDateTime);
        transTime = DateTimeUtil::time(_transDateTime);
    
        switch(_rounding)
        {
            case BOBRentalSumRoundingRange::None: // treat as rounding off to the minute
                decimals = #SecondsPerMinute;
                break;
    
            case BOBRentalSumRoundingRange::Minute10:
                decimals = #SecondsPerMinute * 10;
                break;
    
            case BOBRentalSumRoundingRange::Minute15:
                decimals = #SecondsPerMinute * 15;
                break;
    
            case BOBRentalSumRoundingRange::Minute30:
                decimals = #SecondsPerMinute * 30;
                break;
    
            case BOBRentalSumRoundingRange::Hour1:
                decimals = #SecondsPerHour;
                break;
    
            case BOBRentalSumRoundingRange::Hour6:
                decimals = #SecondsPerHour * 6;
                break;
    
            case BOBRentalSumRoundingRange::Hour12:
                decimals = #SecondsPerHour * 12;
                break;
    
            case BOBRentalSumRoundingRange::Hour24:
                decimals = #SecondsPerDay;
                break;
        }
    
        transTime = any2Int(round(transTime, decimals));
        return DateTimeUtil::newDateTime(transDate, transTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumUp</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method"),
     SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior") ]
    public server static void updateSumUp(InventTransOriginId _originId, InventTransOriginId _newOriginId = _originId)
    {
        BOBRentalTrans  rentalTransDelete, rentalTransMerge;
        InventQty       qtyMerge;
        Set             recIdsToDelete = new Set(Types::Int64);
        SetEnumerator   enumerator;
        ;
    
        while select forupdate rentalTransDelete
        where rentalTransDelete.InventTransOrigin == _originId
        {
            qtyMerge = rentalTransDelete.Qty;
    
            // try to find rental transactions with which this one can be merged
          while select forUpdate rentalTransMerge      
            where rentalTransMerge.InventTransOrigin == _newOriginId
            &&    rentalTransMerge.RecId != rentalTransDelete.RecId
            {
                if(qtyMerge
                && rentalTransMerge.canBeMerged(rentalTransDelete)
                && !recIdsToDelete.in(rentalTransMerge.RecId))
                {
                    rentalTransMerge.Qty += rentalTransDelete.Qty;
                    rentalTransMerge.update();
    
                    qtyMerge -= rentalTransDelete.Qty;
                }
            }
    
            if(!qtyMerge)
            {
                recIdsToDelete.add(rentalTransDelete.RecId);
            }
        }
        enumerator = recIdsToDelete.getEnumerator();
    
        while(enumerator.moveNext())
        {
            delete_from rentalTransDelete
            where rentalTransDelete.RecId == enumerator.current();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WPPFindByWorkOrderLineRecId</Name>
				<Source><![CDATA[
    public static BOBRentalTrans WPPFindByWorkOrderLineRecId(WPPWorkOrderLineRecId _recId, boolean _forUpdate = false)
    {
        BOBRentalTrans rentalTrans;
    
        if(_recId)
        {
            if(_forUpdate)
            {
                rentalTrans.selectForUpdate(true);
            }
    
            select firstOnly rentalTrans
            where rentalTrans.WPPWorkOrderLineRecId == _recId;
        }
    
        return rentalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR727</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TransType</TitleField1>
	<TitleField2>SubStatus</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertaintyFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertaintyTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FINDefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferLink</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BusinessObject</Name>
			<Label>@DNR5863</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertaintyFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertaintyTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS334002</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FINDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS26398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferLink</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertaintyFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertaintyTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS112248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS319505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<EnumType>BOBRentalTransActive</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetTransRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CertaintyFrom</Name>
			<Label>@DNR6065</Label>
			<EnumType>BOBDateTimeCertainty</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CertaintyTo</Name>
			<Label>@DNR6066</Label>
			<EnumType>BOBDateTimeCertainty</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<HelpText>@DNR643</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FINDefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransRecId</Name>
			<ExtendedDataType>InventTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ObjectId</Name>
			<ExtendedDataType>BOBObjectId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalTypeId</Name>
			<ExtendedDataType>BOBRentalTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubStatus</Name>
			<EnumType>BOBRentalSubStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<ExtendedDataType>BOBToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransferLink</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@DNR3189</HelpText>
			<Label>@DNR5833</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<EnumType>BOBRentalTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WPPWorkOrderLineRecId</Name>
			<ExtendedDataType>WPPWorkOrderLineRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ObjectTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ObjectId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransOriginIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ToDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ToDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActiveTypeWarehouseIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RentalTypeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CalculateQtyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetTransRecId</Name>
					<Field>AssetTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBObjectTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOBObjectTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ObjectId</Name>
					<Field>ObjectId</Field>
					<RelatedField>ObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ObjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBRentalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOBRentalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransferLink</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TransferLink</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferLink</Name>
					<Field>TransferLink</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBRentalType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOBRentalType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RentalTypeId</Name>
					<Field>RentalTypeId</Field>
					<RelatedField>RentalTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
					<ValueStr>boolean::false</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FINDefaultDimension</Name>
					<Field>FINDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransRecId</Name>
					<SourceEDT>InventTransRefRecId</SourceEDT>
					<Field>InventTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransOriginIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderLine</Name>
			<RelatedTable>WPPWorkOrderLine</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPWorkOrderLineRecId</Name>
					<Field>WPPWorkOrderLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>