<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderLineSubTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WPPWorkOrderLineSubTask extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayPrevDateTimeExecuted</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display DateTimeExecuted displayPrevDateTimeExecuted()
    {
        DateTimeExecuted            dateTimeExecuted;
        WPPWorkOrderLineResource    workOrderLineResource;
        WPPWorkOrderLine            workOrderLine, workOrderLineCurrent;
        WPPWorkOrderTable           workOrderTable, workOrderTableCurrent;
        WPPWorkOrderLineSubTask     workOrderLineSubTask;
    
        workOrderLineCurrent  = this.workOrderLine();
        workOrderTableCurrent = workOrderLineCurrent.workOrderTable();
    
        // Retrieve the last executed date/time for a certain sub task
        // First look on the WPPWorkOrderLineResource
        select firstOnly ActualToDateTime from workOrderLineResource
        order by ActualToDateTime desc
            exists join workOrderLine
            where workOrderLine.RecId  == workOrderLineResource.WorkOrderLineRecId
            &&    workOrderLine.RecId  != this.WorkOrderLineRecId
            &&    workOrderLine.TaskId == workOrderLineCurrent.TaskId
            &&    workOrderLine.RequestedEndDateTime <= workOrderLineCurrent.RequestedEndDateTime
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                &&    workOrderTable.BOBObjectTableRecId == workOrderTableCurrent.BOBObjectTableRecId
                    join TableId from workOrderLineSubTask
                    where workOrderLineSubTask.WorkOrderLineRecId == workOrderLine.RecId
                    &&    workOrderLineSubTask.SubTaskId          == this.SubTaskId
                    &&    workOrderLineSubTask.Executed;
    
        dateTimeExecuted = workOrderLineResource.ActualToDateTime;
    
        select firstOnly PlannedToDateTime from workOrderLineResource
        order by PlannedToDateTime desc
            exists join workOrderLine
            where workOrderLine.RecId                == workOrderLineResource.WorkOrderLineRecId
            &&    workOrderLine.RecId                != this.WorkOrderLineRecId
            &&    workOrderLine.TaskId               == workOrderLineCurrent.TaskId
            &&    workOrderLine.RequestedEndDateTime <= workOrderLineCurrent.RequestedEndDateTime
                join TableId from workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                &&    workOrderTable.BOBObjectTableRecId == workOrderTableCurrent.BOBObjectTableRecId
                    join TableId from workOrderLineSubTask
                    where workOrderLineSubTask.WorkOrderLineRecId == workOrderLine.RecId
                    &&    workOrderLineSubTask.SubTaskId          == this.SubTaskId
                    &&    workOrderLineSubTask.Executed;
    
        if (workOrderLineResource.PlannedToDateTime > dateTimeExecuted)
        {
            dateTimeExecuted = workOrderLineResource.PlannedToDateTime;
        }
    
        // Also check the WPPWorkOrderLine for a date later than the ones on the WPPWorkOrderLineResource
        select firstOnly RequestedEndDateTime from workOrderLine
        order by workOrderLine.RequestedEndDateTime desc
        where workOrderLine.RecId                != this.WorkOrderLineRecId
        &&    workOrderLine.TaskId               == workOrderLineCurrent.TaskId
        &&    workOrderLine.RequestedEndDateTime <= workOrderLineCurrent.RequestedEndDateTime
            exists join workOrderTable
            where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
            &&    workOrderTable.BOBObjectTableRecId == workOrderTableCurrent.BOBObjectTableRecId
                join TableId from workOrderLineSubTask
                where workOrderLineSubTask.WorkOrderLineRecId == workOrderLine.RecId
                &&    workOrderLineSubTask.SubTaskId          == this.SubTaskId
                &&    workOrderLineSubTask.Executed;
    
        if (workOrderLine.RequestedEndDateTime > dateTimeExecuted)
        {
            dateTimeExecuted = workOrderLine.RequestedEndDateTime;
        }
    
        return dateTimeExecuted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPrevWorkOrderId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display WPPWorkOrderId displayPrevWorkOrderId()
    {
        WPPWorkOrderId              workOrderId;
        WPPWorkOrderLineResource    workOrderLineResource;
        WPPWorkOrderLine            workOrderLine, workOrderLineCurrent;
        WPPWorkOrderTable           workOrderTable, workOrderTableCurrent;
        WPPWorkOrderLineSubTask     workOrderLineSubTask;
        TransDateTime               lastDateTimeExecuted;
    
        workOrderLineCurrent  = this.workOrderLine();
        workOrderTableCurrent = workOrderLineCurrent.workOrderTable();
    
        // Retrieve the last executed date/time for a certain sub task
        // First look on the WPPWorkOrderLineResource
        select firstOnly ActualToDateTime from workOrderLineResource
        order by ActualToDateTime desc
            join WorkOrderId from workOrderLine
            where workOrderLine.RecId  == workOrderLineResource.WorkOrderLineRecId
            &&    workOrderLine.RecId  != this.WorkOrderLineRecId
            &&    workOrderLine.TaskId == workOrderLineCurrent.TaskId
            &&    workOrderLine.RequestedEndDateTime <= workOrderLineCurrent.RequestedEndDateTime
                exists join workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                &&    workOrderTable.BOBObjectTableRecId == workOrderTableCurrent.BOBObjectTableRecId
                    join TableId from workOrderLineSubTask
                    where workOrderLineSubTask.WorkOrderLineRecId == workOrderLine.RecId
                    &&    workOrderLineSubTask.SubTaskId          == this.SubTaskId
                    &&    workOrderLineSubTask.Executed;
    
        workOrderId = workOrderLine.WorkOrderId;
        lastDateTimeExecuted = workOrderLineResource.ActualToDateTime;
    
        select firstOnly PlannedToDateTime from workOrderLineResource
        order by PlannedToDateTime desc
            join WorkOrderId from workOrderLine
            where workOrderLine.RecId                == workOrderLineResource.WorkOrderLineRecId
            &&    workOrderLine.RecId                != this.WorkOrderLineRecId
            &&    workOrderLine.TaskId               == workOrderLineCurrent.TaskId
            &&    workOrderLine.RequestedEndDateTime <= workOrderLineCurrent.RequestedEndDateTime
                exists join workOrderTable
                where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
                &&    workOrderTable.BOBObjectTableRecId == workOrderTableCurrent.BOBObjectTableRecId
                    join TableId from workOrderLineSubTask
                    where workOrderLineSubTask.WorkOrderLineRecId == workOrderLine.RecId
                    &&    workOrderLineSubTask.SubTaskId          == this.SubTaskId
                    &&    workOrderLineSubTask.Executed;
    
        if (workOrderLineResource.PlannedToDateTime > lastDateTimeExecuted)
        {
            workOrderId = workOrderLine.WorkOrderId;
            lastDateTimeExecuted = workOrderLineResource.PlannedToDateTime;
        }
    
        // Also check the WPPWorkOrderLine for a date later than the ones on the WPPWorkOrderLineResource
        select firstOnly RequestedEndDateTime, WorkOrderId from workOrderLine
        order by workOrderLine.RequestedEndDateTime desc
        where workOrderLine.RecId                != this.WorkOrderLineRecId
        &&    workOrderLine.TaskId               == workOrderLineCurrent.TaskId
        &&    workOrderLine.RequestedEndDateTime <= workOrderLineCurrent.RequestedEndDateTime
            exists join workOrderTable
            where workOrderTable.WorkOrderId == workOrderLine.WorkOrderId
            &&    workOrderTable.BOBObjectTableRecId == workOrderTableCurrent.BOBObjectTableRecId
                join TableId from workOrderLineSubTask
                where workOrderLineSubTask.WorkOrderLineRecId == workOrderLine.RecId
                &&    workOrderLineSubTask.SubTaskId          == this.SubTaskId
                &&    workOrderLineSubTask.Executed;
    
        if (workOrderLine.RequestedEndDateTime > lastDateTimeExecuted)
        {
            workOrderId = workOrderLine.WorkOrderId;
        }
    
        return workOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySubTaskGroupDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Description displaySubTaskGroupDescription()
    {
        return WPPSubTaskGroup::find(this.GroupId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySubTaskIdDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Description displaySubTaskIdDescription()
    {
        return WPPSubTaskTable::find(this.GroupId, this.SubTaskId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderLine</Name>
				<Source><![CDATA[
    public WPPWorkOrderLine workOrderLine(boolean _forUpdate = false)
    {
        return WPPWorkOrderLine::findRecId(this.WorkOrderLineRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllToExecuted</Name>
				<Source><![CDATA[
    public static void updateAllToExecuted(FormDataSource   _dataSource)
    {
        WPPWorkOrderLineSubTask workOrderLineSubTask;
    
        ttsBegin;
        for (workOrderLineSubTask = _datasource.getFirst() as WPPWorkOrderLineSubTask;
             workOrderLineSubTask;
             workOrderLineSubTask = _datasource.getNext() as WPPWorkOrderLineSubTask)
        {
            if (!workOrderLineSubTask.Executed
            &&  !workOrderLineSubTask.ExecutedFailed)
            {
                workOrderLineSubTask.selectForUpdate(true);
                workOrderLineSubTask.Executed = NoYes::Yes;
                workOrderLineSubTask.update();
            }
        }
        ttsCommit;
    
        _dataSource.research(true);
        _dataSource.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR7274</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>SubTaskId</TitleField1>
	<TitleField2>Executed</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<PrimaryIndex>WorkOrderLineSubTaskIdx</PrimaryIndex>
	<ReplacementKey>WorkOrderLineSubTaskIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Executed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayPrevDateTimeExecuted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayPrevWorkOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displaySubTaskGroupDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubTaskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Executed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedFailed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Executed</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7273</HelpText>
			<Label>@SYS31423</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>WPPSubTaskGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubTaskId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>WPPSubTaskId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkOrderLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>WPPWorkOrderLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExecutedNote</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS7576</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExecutedFailed</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR:SubTaskListExecutionFailed</HelpText>
			<Label>@SYS32112</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceNumber</Name>
			<ExtendedDataType>SequenceNumber</ExtendedDataType>
			<Label>@SYS109455</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkOrderLineSubTaskIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubTaskId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SequenceNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPSubTaskGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPSubTaskGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupId</Name>
					<Field>GroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WPPSubTaskTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WPPSubTaskTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupId</Name>
					<Field>GroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubTaskId</Name>
					<Field>SubTaskId</Field>
					<RelatedField>SubTaskId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WPPWorkOrderLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkOrderLineRecId</Name>
					<Field>WorkOrderLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>