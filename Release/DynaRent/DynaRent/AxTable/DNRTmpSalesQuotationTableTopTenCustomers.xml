<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRTmpSalesQuotationTableTopTenCustomers</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRTmpSalesQuotationTableTopTenCustomers extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method")]
    public static DNRTmpSalesQuotationTableTopTenCustomers populate(DNRTmpSalesQuotationTableTopTenCustomers _tmpSalesQuotationTableTopTenCustomers, utcdatetime _fromDateTime, utcdatetime _toDateTime, WorkerSalesResponsible _salesRespoinsible)
    {
        DNRTmpSalesQuotationTableTopTenCustomers tmpSalesQuotationTableTopTenCustomersAll;
        CustTable custTable;
        Counter counter = 1;
        AmountMST custAmount;
        date calculationDate = _toDateTime == DateTimeUtil::maxValue() ? DateTimeUtil::date(DateTimeUtil::getSystemDateTime()) : DateTimeUtil::date(_toDateTime);
        RecordInsertList custAllInsertList = new RecordInsertList(tableNum(DNRTmpSalesQuotationTableTopTenCustomers), false, false, false, false, false, tmpSalesQuotationTableTopTenCustomersAll);
        RecordInsertList custTopTenInsertList = new RecordInsertList(tableNum(DNRTmpSalesQuotationTableTopTenCustomers), false, false, false, false, false, _tmpSalesQuotationTableTopTenCustomers);

        while select AccountNum, Party from custTable
        {
            custAmount = DNRTmpSalesQuotationTableTopTenCustomers::calcCustAmount(custTable.AccountNum, _fromDateTime, _toDateTime, _salesRespoinsible, calculationDate);

            if (custAmount)
            {
                tmpSalesQuotationTableTopTenCustomersAll.clear();
                tmpSalesQuotationTableTopTenCustomersAll.CustAccount = "'" + custTable.AccountNum + "'";
                tmpSalesQuotationTableTopTenCustomersAll.CustName = custTable.name();
                tmpSalesQuotationTableTopTenCustomersAll.AmountMST = custAmount;
                
                custAllInsertList.add(tmpSalesQuotationTableTopTenCustomersAll);
            }

            custAmount = 0;
        }

        custAllInsertList.insertDatabase();

        while select tmpSalesQuotationTableTopTenCustomersAll
        order by tmpSalesQuotationTableTopTenCustomersAll.AmountMST desc
        {
            _tmpSalesQuotationTableTopTenCustomers.clear();

            buf2Buf(tmpSalesQuotationTableTopTenCustomersAll, _tmpSalesQuotationTableTopTenCustomers);
            _tmpSalesQuotationTableTopTenCustomers.Counter = Counter;
            custTopTenInsertList.add(_tmpSalesQuotationTableTopTenCustomers);

            counter++;
            if (counter > 10)
            {
                break;
            }
        }

        custTopTenInsertList.insertDatabase();

        return _tmpSalesQuotationTableTopTenCustomers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustAmount</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    protected static AmountMST calcCustAmount(CustAccount _custAccount, utcdatetime _fromDateTime, utcdatetime _toDateTime, WorkerSalesResponsible _salesRespoinsible, date _calculationDate)
    {
        SalesQuotationTable salesQuotationTable;
        AmountMST custAmount;

        while select salesQuotationTable
            where salesQuotationTable.CustAccount       == _custAccount
              && (salesQuotationTable.QuotationType     == QuotationType::RORRental
              ||  salesQuotationTable.QuotationType     == QuotationType::RORProjRental)
              && (salesQuotationTable.QuotationStatus   == SalesQuotationStatus::Confirmed)
              &&  salesQuotationTable.CreatedDateTime   >= _fromDateTime
              &&  salesQuotationTable.CreatedDateTime   <= _toDateTime
              && (!_salesRespoinsible || salesQuotationTable.WorkerSalesResponsible == _salesRespoinsible)
        {
            custAmount += CurrencyExchangeHelper::amountCur2MST(salesQuotationTable.totalInvoiceAmount(), salesQuotationTable.CurrencyCode, 0, _calculationDate);
        }

        return custAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Counter</Name>
			<ExtendedDataType>Counter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustName</Name>
			<ExtendedDataType>CustName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>