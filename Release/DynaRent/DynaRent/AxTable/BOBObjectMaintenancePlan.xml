<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBObjectMaintenancePlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOBObjectMaintenancePlan extends common
{
    #define.unknownEnumValue(255)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkClearFields</Name>
				<Source><![CDATA[
    private void checkClearFields()
    {
        switch(this.defaultMaintenancePlan().PlanType)
        {
            case BOBMaintenancePlanType::TimeAndConsumptionBased:
                break;

            case BOBMaintenancePlanType::ConsumptionBased:
                this.RecurrenceData = conNull();
                break;
    
            case BOBMaintenancePlanType::TimeBased:
                this.RecurrenceUnit = 0;
                this.RecurrenceValue = 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMaintenancePlan</Name>
				<Source><![CDATA[
    public BOBDefaultMaintenancePlan defaultMaintenancePlan(boolean _forUpdate = false)
    {
        BOBDefaultMaintenancePlan ret;
        ;
    
        if(this.DefaultPlanRecId)
        {
            ret = BOBDefaultMaintenancePlan::findByRecId(this.DefaultPlanRecId);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAdvanceMarginUnit</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Num displayAdvanceMarginUnit()
    {
        Num displayUnit;
    
        if (this.CreationMethod == BOBObjectMaintenanceCreationMethod::AdvanceNextMaintenance)
        {
            switch (this.defaultMaintenancePlan().PlanType)
            {
                case BOBMaintenancePlanType::TimeBased:
                case BOBMaintenancePlanType::TimeAndConsumptionBased:
                    displayUnit = "@SYS7425";
                    break;
    
                case BOBMaintenancePlanType::ConsumptionBased:
                    displayUnit = UnitOfMeasure::find(this.RecurrenceUnit).Symbol;
                    break;
            }
        }
    
        return displayUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMeterValue</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBMeterValue displayMeterValue()
    {
        return BOBMeterTable::findByRecId(this.MeterTableRecId).Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNextMaintenance</Name>
				<Source><![CDATA[
    display String30 displayNextMaintenance()
    {
        String30 nextMaintenance;

        switch (this.defaultMaintenancePlan().PlanType)
        {
            case BOBMaintenancePlanType::TimeBased:
                nextMaintenance = date2str(this.NextDate, -1, -1, -1, -1, -1, -1, DateFlags::None);
                break;

            case BOBMaintenancePlanType::ConsumptionBased:
                nextMaintenance = num2str(this.NextConsumption, 13, 3, -1, -1);
                break;

            case BOBMaintenancePlanType::TimeAndConsumptionBased:
                nextMaintenance = strFmt("@DNR:X1OrX2",
                    date2str(this.NextDate, -1, -1, -1, -1, -1, -1, DateFlags::None),
                    num2str(this.NextConsumption, 13, 3, -1, -1));
                break;
        }

        return nextMaintenance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOpenWorkOrder</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display WPPWorkOrderId displayOpenWorkOrder()
    {
        BOBDefaultMaintenancePlan   defaultMaintenancePlan;
        BOBMaintenanceLog           maintenanceLog;
        WPPWorkOrderTable           workOrderTable;
    
        defaultMaintenancePlan = this.defaultMaintenancePlan();
    
        if (defaultMaintenancePlan.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased)
        {
            select firstOnly WPPWorkOrderId from maintenanceLog
                order by CreatedDateTime desc
                where (maintenanceLog.MeterTableRecId == this.MeterTableRecId || !maintenanceLog.MeterTableRecId)
                &&    maintenanceLog.ObjectId == this.ObjectId
                &&    maintenanceLog.PlanCode == defaultMaintenancePlan.PlanCode
                &&   !maintenanceLog.CompletedBy
                    exists join workOrderTable
                    where workOrderTable.WorkOrderId == maintenanceLog.WPPWorkOrderId;
        }
        else if (defaultMaintenancePlan.PlanType == BOBMaintenancePlanType::ConsumptionBased)
        {
            if (this.MeterTableRecId)
            {
                select firstOnly WPPWorkOrderId from maintenanceLog
                where maintenanceLog.MeterTableRecId == this.MeterTableRecId
                &&    maintenanceLog.ObjectId == this.ObjectId
                &&    maintenanceLog.PlanCode == defaultMaintenancePlan.PlanCode
                &&   !maintenanceLog.CompletedBy
                    exists join workOrderTable
                    where workOrderTable.WorkOrderId == maintenanceLog.WPPWorkOrderId;
            }
        }
        else
        {
            select firstOnly WPPWorkOrderId from maintenanceLog
            where maintenanceLog.PlanCode == defaultMaintenancePlan.PlanCode
            &&    maintenanceLog.ObjectId == this.ObjectId
            &&   !maintenanceLog.CompletedBy
                exists join workOrderTable
                where workOrderTable.WorkOrderId == maintenanceLog.WPPWorkOrderId;
        }
    
        return maintenanceLog.WPPWorkOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRecurrenceText</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SysRecurrenceText displayRecurrenceText()
    {
        BOBMaintenancePlanType planType = this.defaultMaintenancePlan().PlanType;

        return (this.RecurrenceData && (planType == BOBMaintenancePlanType::TimeBased || planType == BOBMaintenancePlanType::TimeAndConsumptionBased) ? SysRecurrenceRun::toText(this.RecurrenceData) : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInternalNote</Name>
				<Source><![CDATA[
    edit DNRAdditionalNote editInternalNote(boolean             _set,
                                            DNRAdditionalNote   _internalNote)
    {
        return DNRAdditionalNoteTable::editNote(this, fieldNum(DNRAdditionalNoteTable, InternalNote), _set, _internalNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReset_ConsumptionBased</Name>
				<Source><![CDATA[
    edit BOBResetMaintenance editReset_ConsumptionBased(boolean _set, BOBResetMaintenance _value)
    {
        BOBMaintenancePlanType planType = this.defaultMaintenancePlan().PlanType;
    
        if(_set && (planType == BOBMaintenancePlanType::ConsumptionBased || planType == BOBMaintenancePlanType::TimeAndConsumptionBased))
        {
            this.Reset = _value;
        }
    
        return (planType == BOBMaintenancePlanType::ConsumptionBased || planType == BOBMaintenancePlanType::TimeAndConsumptionBased) ? this.Reset : any2Enum(#unknownEnumValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReset_TimeBased</Name>
				<Source><![CDATA[
    edit BOBResetMaintenance editReset_TimeBased(boolean _set, BOBResetMaintenance _value)
    {
        BOBMaintenancePlanType planType = this.defaultMaintenancePlan().PlanType;
    
        if(_set && (planType == BOBMaintenancePlanType::TimeBased || planType == BOBMaintenancePlanType::TimeAndConsumptionBased))
        {
            this.Reset = _value;
        }
    
        return (planType == BOBMaintenancePlanType::TimeBased || planType == BOBMaintenancePlanType::TimeAndConsumptionBased) ? this.Reset : any2Enum(#unknownEnumValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDefaultMaintenancePlan</Name>
				<Source><![CDATA[
    public void initFromDefaultMaintenancePlan(BOBDefaultMaintenancePlan _defaultPlan)
    {
        SysRecurrence   sysRecurrence;
    
        this.DefaultPlanRecId  = _defaultPlan.RecId;
        this.RecurrenceUnit    = _defaultPlan.RecurrenceUnit;
        this.RecurrenceValue   = _defaultPlan.RecurrenceValue;
        this.RecurrenceData    = _defaultPlan.RecurrenceData;
        this.Reset             = _defaultPlan.Reset;
        this.WPPTemplateId     = _defaultPlan.WPPTemplateId;
        this.WPPMainTaskId     = _defaultPlan.WPPMainTaskId;
        this.WPPExternalTaskId = _defaultPlan.WPPExternalTaskId;
        this.EnableWarning     = _defaultPlan.EnableWarning;
        this.AdvanceMargin     = _defaultPlan.AdvanceMargin;
        this.CreationMethod    = _defaultPlan.CreationMethod;
    
        if (this.RecurrenceData)
        {
            sysRecurrence = new SysRecurrence(this.RecurrenceData, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            sysRecurrence.moveNext();
            this.NextDate = sysRecurrence.currentDay();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.CreationMethod = BOBObjectMaintenanceCreationMethod::NextMaintenance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.checkClearFields();
    
        super();
    
        DNRAdditionalNoteTable::copyNotes(this.defaultMaintenancePlan(), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(BOBObjectMaintenancePlan, DefaultPlanRecId):
                if(this.DefaultPlanRecId)
                {
                    this.initFromDefaultMaintenancePlan(this.defaultMaintenancePlan());
                }
                break;
    
            case fieldNum(BOBObjectMaintenancePlan, WPPTemplateId):
                if(this.WPPTemplateId != this.orig().WPPTemplateId)
                {
                    this.WPPMainTaskId     = '';
                    this.WPPExternalTaskId = '';
                }
    
                this.CreationMethod = BOBDefaultMaintenancePlan::determineCreationMethod(this.RecId, this.WPPTemplateId, this.AdvanceMargin);
                break;
    
            case fieldNum(BOBObjectMaintenancePlan, RecurrenceValue),
                 fieldNum(BOBObjectMaintenancePlan, MeterTableRecId):
                BOBMaintenancePlanType planType = this.defaultMaintenancePlan().PlanType;

                if(planType == BOBMaintenancePlanType::ConsumptionBased || planType == BOBMaintenancePlanType::TimeAndConsumptionBased)
                {
                    BOBMaintenanceManager::runFromCommon(this);
                }
                break;
    
            case fieldNum(BOBObjectMaintenancePlan, CreationMethod):
                if (this.CreationMethod == BOBObjectMaintenanceCreationMethod::Never)
                {
                    this.WPPTemplateId     = '';
                    this.WPPMainTaskId     = '';
                    this.AdvanceMargin     = 0;
                }
                if (this.CreationMethod == BOBObjectMaintenanceCreationMethod::NextMaintenance)
                {
                    this.AdvanceMargin = 0;
                }
                break;
    
            case fieldNum(BOBObjectMaintenancePlan, AdvanceMargin):
                this.CreationMethod = BOBDefaultMaintenancePlan::determineCreationMethod(this.RecId, this.WPPTemplateId, this.AdvanceMargin);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>objectTable</Name>
				<Source><![CDATA[
    public BOBObjectTable objectTable(boolean _forUpdate = false)
    {
        return BOBObjectTable::findObjectId(this.ObjectId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.checkClearFields();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                     ret = super();
        BOBDefaultMaintenancePlan   defaultMaint;
        BOBMaintenanceLog           log;
        ;
    
        if(ret && this.RecId)
        {
            // these criteria are too complex to put in a delete action
            select firstOnly RecId from log
            where log.ObjectId == this.ObjectId
                exists join defaultMaint
                where defaultMaint.RecId == this.DefaultPlanRecId
                &&    defaultMaint.PlanCode == log.PlanCode;
    
            if(log)
            {
                ret = checkFailed(strFmt("@SYS75284", tablePName(BOBMaintenanceLog)));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        WPPWorkOrderTaskTable       taskTable;
        WPPWorkOrderTemplateLine    templateLine;
        BOBMeterTable               meterTable;
        boolean                     ret = super();
        BOBMaintenancePlanType      planType;
    
        ret = super();
        planType = this.defaultMaintenancePlan().PlanType;
    
        if(planType == BOBMaintenancePlanType::Recall)
        {
            ret = checkFailed(strFmt("@DNR6990", "@DNR6981", planType));
        }

        if(planType == BOBMaintenancePlanType::TimeAndConsumptionBased && this.Reset != BOBResetMaintenance::OnCompletion)
        {
            ret = checkFailed("@DNR:OnlyOnCompletionResetTypeSupported");
        }
    
        if(this.WPPMainTaskId)
        {
            select firstonly RecId from taskTable
            where taskTable.TaskId == this.WPPMainTaskId
                exists join templateLine
                where templateLine.TaskId == taskTable.TaskId
                &&    templateLine.TemplateId == this.WPPTemplateId;
    
            if(!taskTable)
            {
                ret = checkFailed(strFmt("@DNR6979", this.WPPMainTaskId, this.WPPTemplateId));
            }
        }
    
        if(this.MeterTableRecId)
        {
            select firstonly ObjectId, MeterId from meterTable
            where meterTable.RecId == this.MeterTableRecId;
    
            if(meterTable.ObjectId != this.ObjectId)
            {
                ret = checkFailed(strFmt("@DNR6991", meterTable.MeterId, this.ObjectId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR6981</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ObjectId</TitleField1>
	<TitleField2>DefaultPlanRecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>ObjectPlanIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultPlanRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableWarning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeterTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextConsumption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPExternalTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPMainTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPTemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultPlanRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionBased</Name>
			<Label>@DNR6962</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReset_ConsumptionBased</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeterTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayMeterValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextConsumption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultPlanRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reset</Name>
			<Label>@SYS3073</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeBased</Name>
			<Label>@DNR6961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReset_TimeBased</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Warnings</Name>
			<Label>@SYS59278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EnableWarning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editInternalNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WPPWorkOrder</Name>
			<Label>@DNR6492</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvanceMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAdvanceMarginUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPMainTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPExternalTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayOpenWorkOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AdvanceMargin</Name>
			<ExtendedDataType>BOBObjectMaintenanceAdvanceMargin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreationMethod</Name>
			<EnumType>BOBObjectMaintenanceCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultPlanRecId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@DNR6982</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableWarning</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7444</HelpText>
			<Label>@DNR7443</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MeterTableRecId</Name>
			<ExtendedDataType>BOBMeterTableRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NextConsumption</Name>
			<ExtendedDataType>BOBMeterValue</ExtendedDataType>
			<HelpText>@DNR6984</HelpText>
			<Label>@SYS71293</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>NextDate</Name>
			<ExtendedDataType>BOBNextMaintenance</ExtendedDataType>
			<HelpText>@DNR6985</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ObjectId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>BOBObjectId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RecurrenceData</Name>
			<ExtendedDataType>SysRecurrenceData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RecurrenceUnit</Name>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RecurrenceValue</Name>
			<ExtendedDataType>BOBMeterValue</ExtendedDataType>
			<Label>@SYS70583</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reset</Name>
			<EnumType>BOBResetMaintenance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPExternalTaskId</Name>
			<ExtendedDataType>WPPWorkOrderTaskId</ExtendedDataType>
			<Label>@DNR6983</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPMainTaskId</Name>
			<ExtendedDataType>WPPWorkOrderTaskId</ExtendedDataType>
			<HelpText>@DNR6967</HelpText>
			<Label>@DNR6966</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPTemplateId</Name>
			<ExtendedDataType>WPPWorkOrderTemplateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceType</Name>
			<EnumType>BOBReferenceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceId</Name>
			<ExtendedDataType>BOBReferenceId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ObjectPlanIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ObjectId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultPlanRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBDefaultMaintenancePlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOBDefaultMaintenancePlan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultPlanRecId</Name>
					<Field>DefaultPlanRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBMeterTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOBMeterTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MeterTableRecId</Name>
					<Field>MeterTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBObjectTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BOBObjectTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ObjectId</Name>
					<Field>ObjectId</Field>
					<RelatedField>ObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ObjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOBObjectView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOBObjectView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ObjectId</Name>
					<Field>ObjectId</Field>
					<RelatedField>ObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOBObjectViewV2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOBObjectViewV2</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ObjectId</Name>
					<Field>ObjectId</Field>
					<RelatedField>ObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecurrenceUnit</Name>
					<Field>RecurrenceUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderTaskTable_ExternalTask</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPWorkOrderTaskTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ExternalTask</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPExternalTaskId</Name>
					<Field>WPPExternalTaskId</Field>
					<RelatedField>TaskId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaskIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderTaskTable_MainTask</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPWorkOrderTaskTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MainTask</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPMainTaskId</Name>
					<Field>WPPMainTaskId</Field>
					<RelatedField>TaskId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaskIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderTemplateTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPWorkOrderTemplateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPTemplateId</Name>
					<Field>WPPTemplateId</Field>
					<RelatedField>TemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TemplateIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOBObjectComponent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOBObjectComponent</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceType</Name>
					<Field>ReferenceType</Field>
					<ValueStr>BOBReferenceType::Component</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceId</Name>
					<Field>ReferenceId</Field>
					<RelatedField>ComponentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>