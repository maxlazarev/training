<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAGContractLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAGContractLine extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public static Query buildQuery(Range                    _contractIdRange,
                                   SortOrder                _prioritySortOrder,
                                   boolean                  _firstOnly,
                                   RAGContractLineQueryType _queryType,
                                   BOBRentalTypeId          _rentalTypeIdFilter = '')
    {
        Query                   query;
        QueryBuildDataSource    qbdsPriority;
        QueryBuildDataSource    qbdsContractTable;
        QueryBuildDataSource    qbdsContractLine;
    
        query = new Query();
    
        // order by priority
        qbdsPriority = query.addDataSource(tableNum(RAGContractTypePriority));
        qbdsPriority.addSelectionField(fieldNum(RAGContractTypePriority, TableId));
        qbdsPriority.addSortField(fieldNum(RAGContractTypePriority, Priority), _prioritySortOrder);
    
        // filter on contract numbers
        qbdsContractTable = qbdsPriority.addDataSource(tableNum(RAGContractTable));
        qbdsContractTable.addLink(fieldNum(RAGContractTypePriority, ContractType), fieldNum(RAGContractTable, ContractType));
        qbdsContractTable.addRange(fieldNum(RAGContractTable, ContractId)).value(_contractIdRange);
        qbdsContractTable.addSelectionField(fieldNum(RAGContractTable, TableId));
    
        // select contract lines, firstonly if necessary
        qbdsContractLine = qbdsContractTable.addDataSource(tableNum(RAGContractLine));
        qbdsContractLine.addLink(fieldNum(RAGContractTable, ContractId), fieldNum(RAGContractLine, ContractId));
        qbdsContractLine.addSortField(fieldNum(RAGContractLine, ContractLevel), SortOrder::Descending);
        qbdsContractLine.firstOnly(_firstOnly);
    
        // filter on rental type if necessary
        if (_rentalTypeIdFilter)
        {
            RAGRentalTypeGroupId rentalTypeGroupId = BOBRentalType::find(_rentalTypeIdFilter).RAGRentalTypeGroupId;

            if(rentalTypeGroupId) 
            {
                // filter on the provided rental type ID and its specific group
                qbdsContractLine.addRange(fieldNum(RAGContractLine, DataAreaId)).value(strFmt('((%1 == %2) || ((%1 == %3) && (%4 == "%5")) || ((%1 == %6) && (%4 == "%7")))',
                                                                                              fieldStr(RAGContractLine, ContractLevel),
                                                                                              any2int(RAGContractLevel::Contract),
                                                                                              any2int(RAGContractLevel::Group),
                                                                                              fieldStr(RAGContractLine, RentalTypeRelation),
                                                                                              rentalTypeGroupId,
                                                                                              any2int(RAGContractLevel::RentalType),
                                                                                              _rentalTypeIdFilter));
            }
            else 
            {
                // if our rental type doesn't have a rental type group, we don't have to consider any contract lines on rental type group level
                qbdsContractLine.addRange(fieldNum(RAGContractLine, DataAreaId)).value(strFmt('((%1 == %2) || ((%1 == %3) && (%4 == "%5")))',
                                                                                              fieldStr(RAGContractLine, ContractLevel),
                                                                                              any2int(RAGContractLevel::Contract),
                                                                                              any2int(RAGContractLevel::RentalType),
                                                                                              fieldStr(RAGContractLine, RentalTypeRelation),
                                                                                              _rentalTypeIdFilter));
            }
        }
    
        // filter on 'normal' agreement types or tiers if necessary
        switch (_queryType)
        {
            case RAGContractLineQueryType::Agmts:
                qbdsContractLine.addRange(fieldNum(RAGContractLine, AgreementType)).value(strFmt('!%1, !%2',
                                                                                          any2int(RAGAgreementType::PriceTier),
                                                                                          any2int(RAGAgreementType::TransportTier)));
                break;
    
            case RAGContractLineQueryType::Tiers:
                qbdsContractLine.addRange(fieldNum(RAGContractLine, AgreementType)).value(strFmt('%1, %2',
                                                                                          any2int(RAGAgreementType::PriceTier),
                                                                                          any2int(RAGAgreementType::TransportTier)));
                break;
    
            default:
                // don't add any extra ranges
                break;
        }
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static RAGContractLine findRecId(RefRecId    _recId,
                                            boolean     _forUpdate = false)
    {
        RAGContractLine contractLine;
    
        if (_recId)
        {
            contractLine.selectForUpdate(_forUpdate);
    
            select firstonly contractLine
            where contractLine.RecId == _recId;
        }
    
        return contractLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarPeriods</Name>
				<Source><![CDATA[
    public static container getCalendarPeriods(
        FINRentalInvoiceProfile _invoiceProfile,
        TransDate           _startDate,
        TimeOfDay           _startTime,
        TransDate           _endDate,
        TimeOfDay           _endTime)
    {
        #TimeConstants
    
        RORParameters           parameters = RORParameters::find();
        RORNumOfPeriods         totalPeriodsNum;
        RAGPriceTierPeriod      tierPeriod;
        TransDate               startDate = _startDate;
        TransDate               endDate = _endDate;
    
        if (_invoiceProfile.isHourlyInvoicing())
        {
            // in future we probably need to check calendar
            if (endDate == startDate)
            {
                totalPeriodsNum = any2Int(trunc((_endTime - _startTime) / #secondsPerHour));
            }
            else if (endDate + 1 == startDate)
            {
                // hours for first day + hours for second day
                totalPeriodsNum = any2Int(trunc((#secondsPerDay - _startTime) + (0 + _endTime)/ #secondsPerHour)) ;
            }
            else
            {
                // hours for first day + hours for second day
                totalPeriodsNum =any2Int(trunc(((#secondsPerDay - _startTime) + (0 + _endTime))/ #secondsPerHour)) ;
                totalPeriodsNum += max(0, (endDate - startDate) - 1);
            }
            tierPeriod = RAGPriceTierPeriod::Hours;
        }
        else
        {
            if (_startTime > _invoiceProfile.InvoiceDayBoundary)
            {
                startDate += 1;
            }
    
            if (_endTime < _invoiceProfile.InvoiceDayBoundary)
            {
                endDate -= 1;
            }
    
            totalPeriodsNum = max(0, (endDate - startDate) + 1);
            tierPeriod = RAGPriceTierPeriod::Days;
        }
    
        return [totalPeriodsNum, tierPeriod];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR6587</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ContractId</TitleField1>
	<TitleField2>ContractLevel</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfTierPeriods</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TierPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfTierPeriods</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TierPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgreementType</Name>
			<EnumType>RAGAgreementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<ExtendedDataType>RAGContractId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContractLevel</Name>
			<EnumType>RAGContractLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumOfTierPeriods</Name>
			<ExtendedDataType>RORNumOfPeriods</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalTypeRelation</Name>
			<ExtendedDataType>RAGRentalTypeRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TierPeriod</Name>
			<EnumType>RAGPriceTierPeriod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Value</Name>
			<ExtendedDataType>RORValueContainer</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReferenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContractLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RentalTypeRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BOBRentalType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOBRentalType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractLevel</Name>
					<Field>ContractLevel</Field>
					<ValueStr>RAGContractLevel::RentalType</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RentalTypeRelation</Name>
					<Field>RentalTypeRelation</Field>
					<RelatedField>RentalTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAGContractTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RAGContractTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContractId</Name>
					<SourceEDT>RAGContractId</SourceEDT>
					<Field>ContractId</Field>
					<RelatedField>ContractId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAGRentalTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAGRentalTypeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractLevel</Name>
					<Field>ContractLevel</Field>
					<ValueStr>RAGContractLevel::Group</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RentalTypeRelation</Name>
					<Field>RentalTypeRelation</Field>
					<RelatedField>RentalTypeGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>