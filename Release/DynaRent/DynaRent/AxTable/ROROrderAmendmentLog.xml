<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ROROrderAmendmentLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ROROrderAmendmentLog extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayContactPersonName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ContactPersonName displayContactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDNRReasonDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Description displayDNRReasonDescription()
    {
        Description description;
    
        if (hasFieldAccess(tableNum(DNRReasonTable), fieldNum(DNRReasonTable, Description)))
        {
            description = DNRReasonTable::find(this.DNRReasonCode).Description;
        }
    
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDNRReasonType</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)] 
    display DNRReasonType displayDNRReasonType()
    {
        DNRReasonType reasonType;
    
        if (hasFieldAccess(tableNum(DNRReasonTable), fieldNum(DNRReasonTable, Type)))
        {
            reasonType = DNRReasonTable::find(this.DNRReasonCode).Type;
        }
    
        return reasonType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ItemId displayItemId()
    {
        ItemId itemId;
    
        switch (this.RefTableId)
        {
            case tableNum(PurchLine):
                if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, ItemId)))
                {
                    itemId = PurchLine::findRecId(this.RefRecId).ItemId;
                }
                break;
    
            case tableNum(SalesLine):
                if (hasFieldAccess(tableNum(SalesLine), fieldNum(SalesLine, ItemId)))
                {
                    itemId = SalesLine::findRecId(this.RefRecId).ItemId;
                }
                break;
        }
    
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOrderLineNumber</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display LineNum displayOrderLineNumber()
    {
        LineNum lineNumber;
    
        switch (this.RefTableId)
        {
            case tableNum(PurchLine):
                if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, LineNumber)))
                {
                    lineNumber = any2real(PurchLine::findRecId(this.RefRecId).LineNumber);
                }
                break;
    
            case tableNum(SalesLine):
                if (hasFieldAccess(tableNum(SalesLine), fieldNum(SalesLine, LineNum)))
                {
                    lineNumber = SalesLine::findRecId(this.RefRecId).LineNum;
                }
                break;
        }
    
        return lineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesPurchId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Num displaySalesPurchId()
    {
        Num num;
    
        switch (this.RefTableId)
        {
            case tableNum(PurchLine):
                if (hasFieldAccess(tableNum(PurchLine), fieldNum(PurchLine, PurchId)))
                {
                    num = PurchLine::findRecId(this.RefRecId).PurchId;
                }
                break;
    
            case tableNum(PurchTable):
                if (hasFieldAccess(tableNum(PurchTable), fieldNum(PurchTable, PurchId)))
                {
                    num = PurchTable::findRecId(this.RefRecId).PurchId;
                }
                break;
    
            case tableNum(SalesLine):
                if (hasFieldAccess(tableNum(SalesLine), fieldNum(SalesLine, SalesId)))
                {
                    num = SalesLine::findRecId(this.RefRecId).SalesId;
                }
                break;
    
            case tableNum(SalesTable):
                if (hasFieldAccess(tableNum(SalesTable), fieldNum(SalesTable, SalesId)))
                {
                    num = SalesTable::findRecId(this.RefRecId).SalesId;
                }
                break;
        }
    
        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesPurchLine</Name>
				<Source><![CDATA[
    public void initFromSalesPurchLine(SalesPurchLine _salesPurchLine)
    {
        this.RefRecId     = _salesPurchLine.RecId;
        this.RefTableId   = _salesPurchLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    protected void initFromCommon(Common _buffer, FieldId _fieldId)
    {
        switch (_buffer.TableId)
        {
            case tableNum(SalesLine):
                this.initFromSalesLine(_buffer);
                break;

            case tableNum(SalesTable):
                this.initFromSalesTable(_buffer);
                break;

            case tableNum(PurchLine):
                this.initFromPurchLine(_buffer);                
                break;

            case tableNum(PurchTable):
                this.initFromPurchTable(_buffer);
                break;

            case tableNum(MarkupTrans):
                this.initFromMarkupTrans(_buffer, _fieldId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    protected void initFromSalesLine(SalesLine _salesLine)
    {
        this.initFromSalesPurchLine(_salesLine);

        this.LineNum = _salesLine.LineNum;
        this.CurrencyCode = _salesLine.CurrencyCode;

        switch (this.AmendmentEventType)
        {
            case DNRAmendmentEventType::SalesTaxGroupLine:
                this.StrValue = _salesLine.TaxGroup;
                this.OldStrValue = _salesLine.orig().TaxGroup;
                break;

            case DNRAmendmentEventType::SalesTaxItemGroup:
                this.StrValue = _salesLine.TaxItemGroup;
                this.OldStrValue = _salesLine.orig().TaxItemGroup;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    protected void initFromSalesTable(SalesTable _salesTable)
    {
        this.initFromSalesPurchTable(_salesTable);
        this.CurrencyCode = _salesTable.CurrencyCode;

        if (this.AmendmentEventType == DNRAmendmentEventType::SalesTaxGroupHeader)
        {
            this.StrValue = _salesTable.TaxGroup;
            this.OldStrValue = _salesTable.orig().TaxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    protected void initFromPurchLine(PurchLine _purchLine)
    {
        this.initFromSalesPurchLine(_purchLine);

        this.LineNum = any2real(_purchLine.LineNumber);
        this.CurrencyCode = _purchLine.CurrencyCode;

        switch (this.AmendmentEventType)
        {
            case DNRAmendmentEventType::SalesTaxGroupLine:
                this.StrValue = _purchLine.TaxGroup;
                this.OldStrValue = _purchLine.orig().TaxGroup;
                break;

            case DNRAmendmentEventType::SalesTaxItemGroup:
                this.StrValue = _purchLine.TaxItemGroup;
                this.OldStrValue = _purchLine.orig().TaxItemGroup;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    protected void initFromPurchTable(PurchTable _purchTable)
    {
        this.initFromSalesPurchTable(_purchTable);
        this.CurrencyCode = _purchTable.CurrencyCode;

        if (this.AmendmentEventType == DNRAmendmentEventType::SalesTaxGroupHeader)
        {
            this.StrValue = _purchTable.TaxGroup;
            this.OldStrValue = _purchTable.orig().TaxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTrans</Name>
				<Source><![CDATA[
    protected void initFromMarkupTrans(MarkupTrans _markupTrans, FieldId _fieldId)
    {
        this.initFromCommon(_markupTrans.parentRecord(), _fieldId);

        if (_fieldId)
        {
            switch (_fieldId)
            {
                case fieldNum(MarkupTrans, MarkupCode):
                    this.strValue =  _markupTrans.MarkupCode;
                    this.oldStrValue = _markupTrans.orig().MarkupCode;
                    break;

                case fieldNum(MarkupTrans, Value):
                    this.realValue = _markupTrans.Value;
                    this.oldRealValue = _markupTrans.orig().Value;
                    break;

                case fieldNum(MarkupTrans, Keep):
                    this.strValue =  _markupTrans.Keep ? "@SYS60867" : '';
                    this.oldStrValue = _markupTrans.orig().Keep ? "@SYS60867" : '';
                    break;
            }
        }
        else
        {
            this.strValue = (this.AmendmentAction == DNRAmendmentAction::Deleted) ? '' :  _markupTrans.MarkupCode;
            this.oldStrValue = (this.AmendmentAction == DNRAmendmentAction::Created) ? '' : _markupTrans.orig().MarkupCode;

            if (this.AmendmentAction == DNRAmendmentAction::Created)
            {
                this.RealValue = _markupTrans.Value;
            }
            else if (this.AmendmentAction == DNRAmendmentAction::Deleted)
            {
                this.OldRealValue = _markupTrans.Value;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesPurchTable</Name>
				<Source><![CDATA[
    public void initFromSalesPurchTable(SalesPurchTable _salesPurchTable)
    {
        this.RefRecId   = _salesPurchTable.RecId;
        this.RefTableId = _salesPurchTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpOrderAmendmentDialogTable</Name>
				<Source><![CDATA[
    public void initFromTmpOrderAmendmentDialogTable(RORTmpOrderAmendmentDialogTable _tmpOrderAmendmentDialogTable)
    {
        this.ContactPersonId   = _tmpOrderAmendmentDialogTable.ContactPersonId;
        this.DNRReasonCode     = _tmpOrderAmendmentDialogTable.DNRReasonCode;
        this.LogTxt            = _tmpOrderAmendmentDialogTable.ReasonText;
        this.TerminationNumber = _tmpOrderAmendmentDialogTable.TerminationNumber;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLogTextGenerated</Name>
				<Source><![CDATA[
    public void setLogTextGenerated(RORTmpOrderAmendmentDialogTable _tmpOrderAmendmentDialogTable,
                                    DNRReasonType                   _reasonType,
                                    RORRentalDateTimeType           _rentalDateTimeType = 0,
                                    RORRentalDateTime               _rentalDateTimeOld  = DateTimeUtil::minValue(),
                                    RORRentalDateTime               _rentalDateTimeNew  = DateTimeUtil::minValue())
    {
        LanguageId      languageId = CompanyInfo::languageId();
        DictEnum        dictEnum;

        this.FromDateTime = _tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom;
        this.ToDateTime = _tmpOrderAmendmentDialogTable.EffectiveDateTimeTo;

        TransDateTime   effectiveDateTimeFrom = DateTimeUtil::applyTimeZoneOffset(_tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom, DateTimeUtil::getUserPreferredTimeZone());
        TransDateTime   effectiveDateTimeTo = DateTimeUtil::applyTimeZoneOffset(_tmpOrderAmendmentDialogTable.EffectiveDateTimeTo, DateTimeUtil::getUserPreferredTimeZone());

        switch (_reasonType)
        {
            case DNRReasonType::ExchangeItem:
                this.AmendmentEventType = DNRAmendmentEventType::Exchange;
                this.AmendmentAction = DNRAmendmentAction::Created;
                this.StrValue = _tmpOrderAmendmentDialogTable.ItemIdRequested;
                this.FromDateTime = _tmpOrderAmendmentDialogTable.OffRentDateTime;
                this.ToDateTime = DateTimeUtil::maxValue();

                this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR4358", languageId),
                                                                                    DateTimeUtil::applyTimeZoneOffset(this.FromDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                                                                                    _tmpOrderAmendmentDialogTable.ItemIdRequested);
                break;
    
            case DNRReasonType::ReverseExchange:
                this.AmendmentEventType = DNRAmendmentEventType::ReversedExchange;
                this.AmendmentAction = DNRAmendmentAction::Created;
                this.StrValue = _tmpOrderAmendmentDialogTable.ItemIdRequested;
                this.FromDateTime = _tmpOrderAmendmentDialogTable.OffRentDateTime;
                this.ToDateTime = DateTimeUtil::maxValue();

                this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR6895", languageId),
                                                                                    DateTimeUtil::applyTimeZoneOffset(this.FromDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                                                                                    _tmpOrderAmendmentDialogTable.ItemIdRequested);
                break;
    
            case DNRReasonType::DateChange,
                 DNRReasonType::OnOffDateChange:  
                this.FromDateTime = _rentalDateTimeOld;
                this.ToDateTime = _rentalDateTimeNew;
                  
                this.AmendmentAction = DNRAmendmentAction::Changed;
                this.AmendmentEventType = ROROrderAmendmentLog::getAmendmentEventTypeFromDateTimeType(_rentalDateTimeType);

                if (_rentalDateTimeOld)
                {
                    this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR4359", languageId),
                        _rentalDateTimeType,
                        DateTimeUtil::applyTimeZoneOffset(this.FromDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                        DateTimeUtil::applyTimeZoneOffset(this.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                }
                else
                if (_rentalDateTimeType)
                {
                    this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR4359", languageId),
                        _rentalDateTimeType,
                        "@SYS341791",
                        DateTimeUtil::applyTimeZoneOffset(this.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                }
                else
                if (_tmpOrderAmendmentDialogTable.TerminationNumber)
                {
                    this.AmendmentAction = DNRAmendmentAction::Created;
                    this.AmendmentEventType = DNRAmendmentEventType::Termination;
                    this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR7943", languageId),
                        _tmpOrderAmendmentDialogTable.TerminationNumber);
                }
                break;
    
            case DNRReasonType::RentalStop:
                this.AmendmentAction = DNRAmendmentAction::Created;
                this.AmendmentEventType = ROROrderAmendmentLog::getAmendmentEventTypeFromCalendar(_tmpOrderAmendmentDialogTable.CalendarType);

                dictEnum = new DictEnum(enumNum(RORRentalCalendarType));
                this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR4357", languageId),
                                                                                    dictEnum.index2Label(_tmpOrderAmendmentDialogTable.CalendarType),
                                                                                    effectiveDateTimeFrom,
                                                                                    effectiveDateTimeTo);
                break;
    
            case DNRReasonType::Credit:
                if (_tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom
                &&  _tmpOrderAmendmentDialogTable.EffectiveDateTimeTo)
                {
                    this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR4378", languageId),
                                                                                        _tmpOrderAmendmentDialogTable.CreditNoteType,
                                                                                        effectiveDateTimeFrom,
                                                                                        effectiveDateTimeTo);
                }
                break;
    
            case DNRReasonType::LostOrder:
                this.AmendmentEventType = DNRAmendmentEventType::SetLostOrder;
                this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@SYS82282", languageId),
                                                                                    "@DNR2572");
                break;
    
            case DNRReasonType::BlockedPeriod:
                this.AmendmentEventType = ROROrderAmendmentLog::getAmendmentEventTypeFromBlockUnblock(_tmpOrderAmendmentDialogTable.INVBlockUnblock);
                if (_tmpOrderAmendmentDialogTable.EffectiveDateTimeFrom
                &&  _tmpOrderAmendmentDialogTable.EffectiveDateTimeTo)
                {
                    this.LogTxtGenerated = strFmt(SysLabel::labelId2String2("@DNR4378", languageId),
                                                                                        _tmpOrderAmendmentDialogTable.INVBlockUnblock,
                                                                                        effectiveDateTimeFrom,
                                                                                        effectiveDateTimeTo);
                }
                break;
    
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTerminationNumber</Name>
				<Source><![CDATA[
    public static boolean existsTerminationNumber(RORTerminationNumber _terminationNumber)
    {
        return _terminationNumber && (select firstOnly RecId from ROROrderAmendmentLog
                                      where ROROrderAmendmentLog.TerminationNumber == _terminationNumber).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmendmentEventTypeFromDateTimeType</Name>
				<Source><![CDATA[
    public static DNRAmendmentEventType getAmendmentEventTypeFromDateTimeType(RORRentalDateTimeType _rentalDateTimeType)
    {
        DNRAmendmentEventType amendmentEventType;

        switch (_rentalDateTimeType)
        {
            case RORRentalDateTimeType::Build:
                amendmentEventType = DNRAmendmentEventType::Build;
                break;
            case RORRentalDateTimeType::EventEnd:
                amendmentEventType = DNRAmendmentEventType::EventEndDateTime;
                break;
            case RORRentalDateTimeType::EventStart:
                amendmentEventType = DNRAmendmentEventType::EventStartDateTime;
                break;
            case RORRentalDateTimeType::ExpectedOffRent:
                amendmentEventType = DNRAmendmentEventType::ExpectedOffRent;
                break;
            case RORRentalDateTimeType::Inbound:
                amendmentEventType = DNRAmendmentEventType::Inbound;
                break;
            case RORRentalDateTimeType::Inspection:
                amendmentEventType = DNRAmendmentEventType::Inspection;
                break;
            case RORRentalDateTimeType::None:
                amendmentEventType = DNRAmendmentEventType::None;
                break;
            case RORRentalDateTimeType::OffRent:
                amendmentEventType = DNRAmendmentEventType::OffRent;
                break;
            case RORRentalDateTimeType::OnRent:
                amendmentEventType = DNRAmendmentEventType::OnRent;
                break;
            case RORRentalDateTimeType::Outbound:
                amendmentEventType = DNRAmendmentEventType::Outbound;
                break;
            case RORRentalDateTimeType::Preparation:
                amendmentEventType = DNRAmendmentEventType::Preparation;
                break;
            case RORRentalDateTimeType::RequestedDelivery:
                amendmentEventType = DNRAmendmentEventType::RequestedDelivery;
                break;
            case RORRentalDateTimeType::RequestedPickup:
                amendmentEventType = DNRAmendmentEventType::RequestedPickup;
                break;
            case RORRentalDateTimeType::Strike:
                amendmentEventType = DNRAmendmentEventType::Strike;
                break;
        }

        return amendmentEventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmendmentEventTypeFromCalendar</Name>
				<Source><![CDATA[
    public static DNRAmendmentEventType getAmendmentEventTypeFromCalendar(RORRentalCalendarType _rentalCalendarType)
    {
        DNRAmendmentEventType amendmentEventType;

        switch (_rentalCalendarType)
        {
            case RORRentalCalendarType::RentalActivation:
                amendmentEventType = DNRAmendmentEventType::RentalActivation;
                break;
            case RORRentalCalendarType::RentalStop:
                amendmentEventType = DNRAmendmentEventType::RentalStop;
                break;
            case RORRentalCalendarType::ResetCalendar:
                amendmentEventType = DNRAmendmentEventType::ResetCalendar;
                break;
        }

        return amendmentEventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmendmentEventTypeFromBlockUnblock</Name>
				<Source><![CDATA[
    public static DNRAmendmentEventType getAmendmentEventTypeFromBlockUnblock(INVBlockUnblock _blockUnblock)
    {
        DNRAmendmentEventType amendmentEventType;

        switch (_blockUnblock)
        {
            case INVBlockUnblock::Block:
                amendmentEventType = DNRAmendmentEventType::Block;
                break;
            case INVBlockUnblock::Unblock:
                amendmentEventType = DNRAmendmentEventType::Unblock;
                break;
        }

        return amendmentEventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTaxAction</Name>
				<Source><![CDATA[
    protected void setSalesTaxAction()
    {
        if (this.OldStrValue == '' && this.StrValue != '')
        {
            this.AmendmentAction = DNRAmendmentAction::Created;
        }
        else if (this.OldStrValue != '' && this.StrValue == '')
        {
            this.AmendmentAction = DNRAmendmentAction::Deleted;
        }
        else
        {
            this.AmendmentAction = DNRAmendmentAction::Updated; 
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTxtGeneratedForSalesAndMarkup</Name>
				<Source><![CDATA[
    protected void setTxtGeneratedForSalesAndMarkup()
    {
        str newValue, oldValue;

        if (this.StrValue != this.OldStrValue)
        {
            newValue = this.StrValue;
            oldValue = this.OldStrValue;
        }
        else if (this.RealValue != this.OldRealValue)
        {
            newValue = strFmt("%1", this.RealValue);
            oldValue = strFmt("%1", this.OldRealValue);
        }

        if (this.AmendmentAction == DNRAmendmentAction::Updated || this.AmendmentAction == DNRAmendmentAction::Changed)
        {
            this.LogTxtGenerated = strFmt("@SYS311966", this.AmendmentAction, this.AmendmentEventType);

            if (this.LineNum != 0)
            {
                this.LogTxtGenerated += strFmt("@DNR:LineNumberConcatination", this.LineNum);
            }

            this.LogTxtGenerated += strFmt("@DNR:OldStrValueToNewStrValue", oldValue, newValue);
        }
        else
        {
            this.LogTxtGenerated = strFmt("@DNR:FormatAmendmentLogText", this.AmendmentAction,
                                                                         this.AmendmentEventType,
                                                                         (oldValue == '' || oldValue == '0' ) ? newValue : oldValue);
            
            if (this.LineNum != 0)
            {
                this.LogTxtGenerated += strFmt("@DNR:LineNumberConcatination", this.LineNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAmendmentLog</Name>
				<Source><![CDATA[
    public static void createAmendmentLog(DNRAmendmentAction _amendmentAction, Common _buffer, DNRAmendmentEventType _amendmentEventType, FieldId _fieldUpdated = 0)
    {
        ttsbegin;
        ROROrderAmendmentLog orderAmendmentLog;

        orderAmendmentLog.AmendmentEventType = _amendmentEventType;
        orderAmendmentLog.AmendmentAction = _amendmentAction;
        orderAmendmentLog.setReasonType();
       
        orderAmendmentLog.initFromCommon(_buffer, _fieldUpdated);

        if (orderAmendmentLog.DNRReasonType == DNRReasonType::SalesTax)
        {
            orderAmendmentLog.setSalesTaxAction();
        }

        orderAmendmentLog.setTxtGeneratedForSalesAndMarkup();

        orderAmendmentLog.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReasonType</Name>
				<Source><![CDATA[
    protected void setReasonType()
    {
        switch (this.AmendmentEventType)
        {
            case DNRAmendmentEventType::SalesTaxGroupHeader:
            case DNRAmendmentEventType::SalesTaxGroupLine:
            case DNRAmendmentEventType::SalesTaxItemGroup:
                this.DNRReasonType = DNRReasonType::SalesTax;
                break;
            case DNRAmendmentEventType::MarkupHeader:
            case DNRAmendmentEventType::MarkupLine:
            case DNRAmendmentEventType::MarkupManual:
                this.DNRReasonType = DNRReasonType::Markup;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR4329</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RefTableId</TitleField1>
	<TitleField2>RefRecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRReasonType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogTxtGenerated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS4009299</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmendmentAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmendmentEventType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StrValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OldStrValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OldRealValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfirmId</Name>
			<ExtendedDataType>ConfirmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DNRReasonCode</Name>
			<ExtendedDataType>DNRReasonCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DNRReasonType</Name>
			<EnumType>DNRReasonType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpectedOffRentDateTime</Name>
			<ExtendedDataType>RORExpectedOffRentDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LogTxt</Name>
			<ExtendedDataType>RORAmendmentReasonText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LogTxtGenerated</Name>
			<ExtendedDataType>FreeText</ExtendedDataType>
			<HelpText>@DNR6383</HelpText>
			<Label>@SYS23561</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TerminationNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORTerminationNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AmendmentAction</Name>
			<EnumType>DNRAmendmentAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AmendmentEventType</Name>
			<EnumType>DNRAmendmentEventType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StrValue</Name>
			<ExtendedDataType>String10</ExtendedDataType>
			<HelpText>@DNR:StrValueHelp</HelpText>
			<Label>@SYS105215</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealValue</Name>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<HelpText>@DNR:RealValueHelp</HelpText>
			<Label>@SYS41043</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OldStrValue</Name>
			<ExtendedDataType>String10</ExtendedDataType>
			<HelpText>@DNR:StrValueHelp</HelpText>
			<Label>@DNR:OldTextValue</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OldRealValue</Name>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<HelpText>@DNR:RealValueHelp</HelpText>
			<Label>@SYS115748</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<ExtendedDataType>INVPeriodStartDateTime</ExtendedDataType>
			<Label>@DNR1039</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<ExtendedDataType>INVPeriodEndDateTime</ExtendedDataType>
			<Label>@SYS177352</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableRecConfirmIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfirmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DNRReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DNRReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DNRReasonCode</Name>
					<Field>DNRReasonCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>