<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBPostingPolicyRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOBPostingPolicyRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowDisable</Name>
				<Source><![CDATA[
    private boolean allowDisable()
    {
        switch(this.SubStatus)
        {
            case BOBRentalSubStatus::Ordered,
                 BOBRentalSubStatus::Delivered,
                 BOBRentalSubStatus::Returned,
                 BOBRentalSubStatus::Invoiced:
                return false;
    
            default:
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAvailabilitySetupCombination</Name>
				<Source><![CDATA[
    public boolean checkAvailabilitySetupCombination(FieldId _fieldId, BOBRentalSubStatus _subStatus = this.SubStatus)
    {
        boolean ret = true;
        ;
    
        switch (_fieldId)
        {
            case fieldNum(BOBPostingPolicyRule, IsAvailablePurchase),
                 fieldNum(BOBPostingPolicyRule, IsAvailableSales) :
                // rental specific substatuses are disabled for standard sales/purchase order lines
                if (_subStatus == BOBRentalSubStatus::Quotation
                ||  _subStatus == BOBRentalSubStatus::QuotationSent
                ||  _subStatus == BOBRentalSubStatus::QuotationInspected
                ||  _subStatus == BOBRentalSubStatus::Prepared
                ||  _subStatus == BOBRentalSubStatus::Outbound
                ||  _subStatus == BOBRentalSubStatus::Built
                ||  _subStatus == BOBRentalSubStatus::EventStarted
                ||  _subStatus == BOBRentalSubStatus::EventEnded
                ||  _subStatus == BOBRentalSubStatus::Strike
                ||  _subStatus == BOBRentalSubStatus::Inbound
                ||  _subStatus == BOBRentalSubStatus::Returned
                ||  _subStatus == BOBRentalSubStatus::ReturnInspected)
                {
                    ret = false;
                }
                break;
    
            case fieldNum(BOBPostingPolicyRule, IsAvailableSubrental) :
                // Quotation is only aplicable for sales side
                if (_subStatus == BOBRentalSubStatus::Quotation
                ||  _subStatus == BOBRentalSubStatus::QuotationSent
                ||  _subStatus == BOBRentalSubStatus::QuotationInspected)
                {
                    ret = false;
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMandatory</Name>
				<Source><![CDATA[
    private boolean defaultMandatory()
    {
        switch (this.SubStatus)
        {
            case BOBRentalSubStatus::Delivered,
                 BOBRentalSubStatus::Returned :
                return true;
    
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderStockCount</Name>
				<Source><![CDATA[
    public BOBRentalQty getOrderStockCount(BOBRentalTransType _transType = BOBRentalTransType::None)
    {
        switch(_transType)
        {
            case BOBRentalTransType::Sales:
                return this.IsAvailableSales;
    
            case BOBRentalTransType::Purch:
                return this.IsAvailablePurchase;
    
            case BOBRentalTransType::SubRental:
                return this.IsAvailableSubRental;
    
            default:
                return this.IsAvailableRental;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return checkFailed("@SYS23721");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
        ;
    
        if(ret)
        {
            if(_fieldIdToCheck == fieldNum(BOBPostingPolicyRule, RentalControl)
            &&  this.RentalControl == BOBSubStatusControl::Disabled
            && !this.allowDisable())
            {
                ret = checkFailed(strFmt("@DNR6357", this.SubStatus));
            }
    
            if(_fieldIdToCheck == fieldNum(BOBPostingPolicyRule, SubRentalControl)
            &&  this.SubRentalControl == BOBSubStatusControl::Disabled
            && !this.allowDisable())
            {
                ret = checkFailed(strFmt("@DNR6357", this.SubStatus));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromNewPolicy</Name>
				<Source><![CDATA[
    public static server void createFromNewPolicy(BOBPostingPolicy _policy)
    {
        RecordInsertList        insertList;
        SysDictEnum             dictEnum;
        Counter                 cnt;
        BOBPostingPolicyRule    newRule;
        ;
    
        if(_policy && _policy.RecId && !BOBPostingPolicyRule::exist(_policy))
        {
            insertList = new RecordInsertList(tableNum(BOBPostingPolicyRule));
            dictEnum = new SysDictEnum(enumNum(BOBRentalSubStatus));
    
            for(cnt = 0; cnt < dictEnum.values(); cnt ++)
            {
                if(dictEnum.index2Value(cnt) != BOBRentalSubStatus::None)
                {
                    newRule.clear();
                    newRule.PostingPolicyRecId = _policy.RecId;
                    newRule.SubStatus = dictEnum.index2Value(cnt);
    
                    if (newRule.defaultMandatory())
                    {
                        newRule.RentalControl = BOBSubStatusControl::Mandatory;
                        newRule.SubRentalControl = BOBSubStatusControl::Mandatory;
                    }
                    else if(!newRule.allowDisable())
                    {
                        newRule.RentalControl = BOBSubStatusControl::Enabled;
                        newRule.SubRentalControl = BOBSubStatusControl::Enabled;
                    }
    
                    insertList.add(newRule);
                }
            }
    
            insertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus2RentalSubStatus</Name>
				<Source><![CDATA[
    public static client server BOBRentalSubStatus documentStatus2RentalSubStatus(DocumentStatus _documentStatus)
    {
        BOBRentalSubStatus  rentalSubStatusFromDocumentStatus;
    
        switch (_documentStatus)
        {
            case DocumentStatus::Confirmation:
                rentalSubStatusFromDocumentStatus = BOBRentalSubStatus::Confirmed;
                break;
    
            case DocumentStatus::PickingList:
                rentalSubStatusFromDocumentStatus = BOBRentalSubStatus::Picked;
                break;
    
            case DocumentStatus::PackingSlip:
                rentalSubStatusFromDocumentStatus = BOBRentalSubStatus::Delivered;
                break;
            case DocumentStatus::Invoice:
                rentalSubStatusFromDocumentStatus = BOBRentalSubStatus::Invoiced;
                break;
    
            default:
                rentalSubStatusFromDocumentStatus = BOBRentalSubStatus::None;
                break;
        }
    
        return rentalSubStatusFromDocumentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(BOBPostingPolicy _policy)
    {
        return (_policy && _policy.RecId && (select firstonly RecId from BOBPostingPolicyRule
                                             where BOBPostingPolicyRule.PostingPolicyRecId == _policy.RecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static client server BOBPostingPolicyRule find(RefRecId              _postingPolicyRecId,
                                                          BOBRentalSubStatus    _rentalSubStatus,
                                                          boolean               _forUpdate = false)
    {
        BOBPostingPolicyRule postingPolicyRule;
        ;
    
        if(_postingPolicyRecId) // only check on RefRecId; RentalSubStatus can be 0
        {
            postingPolicyRule.selectForUpdate(_forUpdate);
    
            select firstOnly postingPolicyRule
            where postingPolicyRule.PostingPolicyRecId == _postingPolicyRecId
            &&    postingPolicyRule.SubStatus          == _rentalSubStatus;
        }
    
        return postingPolicyRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemId</Name>
				<Source><![CDATA[
    public static client server BOBPostingPolicyRule findByItemId(ItemId _itemId, BOBRentalSubStatus _rentalSubStatus, boolean _forUpdate = false)
    {
        BOBPostingPolicyRule    postingPolicyRule;
        BOBRentalType           rentalType;
        EcoResProduct           ecoResProduct;
        InventTable             inventTable;
        ;
    
        if(_itemId) // only check on RefRecId; RentalSubStatus can be 0
        {
            postingPolicyRule.selectForUpdate(_forUpdate);
    
            select firstOnly postingPolicyRule
            where postingPolicyRule.SubStatus == _rentalSubStatus
                exists join rentalType
                where rentalType.PostingPolicyRecId == postingPolicyRule.PostingPolicyRecId
                    join TableId from ecoResProduct
                    where ecoResProduct.BOBRentalTypeId == rentalType.RentalTypeId
                        join TableId from inventTable
                        where inventTable.ItemId == _itemId
                        &&    inventTable.Product == ecoResProduct.RecId;
        }
    
        return postingPolicyRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextOrderStockCount</Name>
				<Source><![CDATA[
    public static BOBRentalQty findNextOrderStockCount(
        RecId               _postingPolicyRecId,
        BOBRentalSubStatus  _nextSubStatus,
        BOBRentalSubStatus  _previousSubStatus = BOBRentalSubStatus::None,
        BOBRentalTransType  _transType = BOBRentalTransType::None)
    {
        BOBPostingPolicyRule previousPostingPolicyRule;
        BOBPostingPolicyRule nextPostingPolicyRule;
        BOBPostingPolicy     postingPolicy = BOBPostingPolicy::findRecId(_postingPolicyRecId);
    
        BOBRentalQty    orderCountFactor;
    
        real getFactor(FieldId _fieldId)
        {
            real factor;
    
            if (nextPostingPolicyRule
            &&  previousPostingPolicyRule
            &&  previousPostingPolicyRule.(_fieldId) == nextPostingPolicyRule.(_fieldId))
            {
                factor = 0;
            }
            else
            {
                if (previousPostingPolicyRule
                &&  previousPostingPolicyRule.(_fieldId)
                && (!nextPostingPolicyRule.(_fieldId) || !nextPostingPolicyRule))
                {
                    factor = -1;
                }
                else
                {
                    if (nextPostingPolicyRule
                    &&  nextPostingPolicyRule.(_fieldId)
                    && (!previousPostingPolicyRule.(_fieldId) || !previousPostingPolicyRule))
                    {
                        factor = 1;
                    }
                    else
                    {
                        factor = 0;
                    }
                }
            }
    
            return factor;
        }
        ;
    
        if (_previousSubStatus != BOBRentalSubStatus::None)
        {
            previousPostingPolicyRule = BOBPostingPolicyRule::find(postingPolicy.RecId, _previousSubStatus);
        }
        if (_nextSubStatus != BOBRentalSubStatus::None)
        {
            nextPostingPolicyRule = BOBPostingPolicyRule::find(postingPolicy.RecId, _nextSubStatus);
        }
    
        switch (_transType)
        {
            case BOBRentalTransType::Sales :
                orderCountFactor = getFactor(fieldNum(BOBPostingPolicyRule, IsAvailableSales));
                break;
            case BOBRentalTransType::Purch :
                orderCountFactor = getFactor(fieldNum(BOBPostingPolicyRule, IsAvailablePurchase));
                break;
            case BOBRentalTransType::SubRental :
                orderCountFactor = getFactor(fieldNum(BOBPostingPolicyRule, IsAvailableSubRental));
                break;
            case BOBRentalTransType::RentalQuotation,
                 BOBRentalTransType::SalesQuotation:
                orderCountFactor = 0;
                break;
            default :
                orderCountFactor = getFactor(fieldNum(BOBPostingPolicyRule, IsAvailableRental));
        }
    
        return orderCountFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailabilitySetup</Name>
				<Source><![CDATA[
    public static Map getAvailabilitySetup(RecId _postingPolicyRecId)
    {
        Map                     availabilityMap = new Map(Types::Integer, Types::Class);
        Set                     availabilityPerOrderSet;
        BOBPostingPolicyRule    postingPolicyRule;
    
        void addSubstatus(FieldId _fieldId)
        {
            if (availabilityMap.exists(_fieldId))
            {
                availabilityPerOrderSet = availabilityMap.lookup(_fieldId);
            }
            else
            {
                availabilityPerOrderSet = new Set(Types::Enum);
            }
    
            availabilityPerOrderSet.add(postingPolicyRule.SubStatus);
            availabilityMap.insert(_fieldId, availabilityPerOrderSet);
        }
        ;
    
        while select postingPolicyRule
        where postingPolicyRule.PostingPolicyRecId == _postingPolicyRecId
        &&    (postingPolicyRule.IsAvailablePurchase ||
               postingPolicyRule.IsAvailableSubRental ||
               postingPolicyRule.IsAvailableSales ||
               postingPolicyRule.IsAvailableRental)
        {
            if (postingPolicyRule.IsAvailablePurchase)
            {
                addSubstatus(fieldNum(BOBPostingPolicyRule, IsAvailablePurchase));
            }
    
            if (postingPolicyRule.IsAvailableSubRental)
            {
                addSubstatus(fieldNum(BOBPostingPolicyRule, IsAvailableSubrental));
            }
    
            if (postingPolicyRule.IsAvailableSales)
            {
                addSubstatus(fieldNum(BOBPostingPolicyRule, IsAvailableSales));
            }
    
            if (postingPolicyRule.IsAvailableRental)
            {
                addSubstatus(fieldNum(BOBPostingPolicyRule, IsAvailableRental));
            }
        }
    
        return availabilityMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextSubStatusFromTo</Name>
				<Source><![CDATA[
    public static server container getNextSubStatusFromTo(InventDirection       _issueReceipt,
                                                          RefRecId              _postingPolicyRecId,
                                                          BOBRentalSubStatus    _subStatusTo,
                                                          boolean               _ignoreMandatory = false)
    {
        SysDictEnum             sysDictEnum;
        Counter                 enumIndex;
        BOBRentalSubStatus      subStatusFrom;
        BOBRentalSubStatus      subStatusTo;
        BOBPostingPolicyRule    postingPolicyRule;
        boolean                 foundMandatory;
    
        boolean isSubStatusEnabled()
        {
            return (_issueReceipt == InventDirection::Issue ?
                    postingPolicyRule.RentalControl > BOBSubStatusControl::Disabled :
                    postingPolicyRule.SubRentalControl > BOBSubStatusControl::Disabled);
        }
        ;
    
        if(_issueReceipt == InventDirection::None)
        {
            throw error(strFmt("@SYS88512", _issueReceipt));
        }
    
        sysDictEnum         = new SysDictEnum(enumNum(BOBRentalSubStatus));
        subStatusFrom       = BOBRentalSubStatus::None;
        subStatusTo         = BOBRentalSubStatus::None;
        foundMandatory      = false;
        postingPolicyRule   = BOBPostingPolicyRule::find(_postingPolicyRecId, _subStatusTo);
    
        if(isSubStatusEnabled()) // if requested status is not enabled, then return [ None, None ]
        {
            enumIndex = sysDictEnum.value2Index(_subStatusTo) + 1; // immediate next enabled status is our "from" status
            postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, sysDictEnum.index2Value(enumIndex));
    
            while(enumIndex && !isSubStatusEnabled())
            {
                enumIndex ++;
                postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, sysDictEnum.index2Value(enumIndex));
            }
    
            subStatusFrom   = sysDictEnum.index2Value(enumIndex);
            subStatusTo     = subStatusFrom;
    
            // If this status is mandatory, then it's also the "to" status, as the inventory must be in that status before
            // we can proceed to the next. Otherwise move ahead to the first mandatory status and use that as our "to" point.
            // If enumIndex reaches the total number of sub statuses, then the final status is our "to" point
    
            postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, subStatusFrom);
    
            while(postingPolicyRule && (_ignoreMandatory || !foundMandatory))
            {
                if(isSubStatusEnabled())
                {
                    subStatusTo     = sysDictEnum.index2Value(enumIndex);
                    foundMandatory  = (_issueReceipt == InventDirection::Issue ?
                                       postingPolicyRule.RentalControl == BOBSubStatusControl::Mandatory :
                                       postingPolicyRule.SubRentalControl == BOBSubStatusControl::Mandatory);
                }
    
                enumIndex ++;
                postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, sysDictEnum.index2Value(enumIndex));
            }
        }
    
        return [ subStatusFrom, subStatusTo ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPossibleStatuses</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopInCode", "Cannot be refactored without altering functionality of method")]
    public static server Set getPossibleStatuses(InventDirection _issueReceipt, Set _setAvailableStatus, RefRecId _postingPolicyRecId)
    {
        Set                     setPossibleStatus = new Set(Types::Enum);
        Set                     setPossibleStatusCurent;
        SetEnumerator           setEnumerator;
        BOBRentalSubStatus      subStatusToTest;
        BOBPostingPolicyRule    postingPolicyRule;
        boolean                 isMandatory;
        SysGlobalObjectCache    globalObjectCache;
    
        if (_issueReceipt == InventDirection::None)
        {
            throw error(strFmt("@SYS88512", _issueReceipt));
        }
    
        if (_setAvailableStatus.elements())
        {
            globalObjectCache = classFactory.globalObjectCache();
            setEnumerator = _setAvailableStatus.getEnumerator();
    
            // first rule is that nothing prior to our lowest passed-in status is possible, so only start looking after that point
            while (setEnumerator.moveNext())
            {
                subStatusToTest = setEnumerator.current();
                container   cacheKey, cacheValue;
                cacheKey = [_issueReceipt, subStatusToTest, _postingPolicyRecId];
                cacheValue = globalObjectCache.find(BOBPostingPolicyRule::getCacheScopeStr(), cacheKey);
                
                if(cacheValue == conNull())
                {
                    isMandatory = false;
                    setPossibleStatusCurent = new Set(Types::Enum);
    
                    // To be a candidate for posting it must be enabled, based on a higher rental status.
                    // If more than one meets the criteria, then they will all be possible unless one is
                    // mandatory in which case higher ones are not allowed (can't go directly to the higher statuses)

                    while select SubStatus, RentalControl, SubRentalControl from postingPolicyRule
                    order by SubStatus
                    where postingPolicyRule.PostingPolicyRecId == _postingPolicyRecId
                    &&    postingPolicyRule.SubStatus >  subStatusToTest
                    &&  ((_issueReceipt == InventDirection::Issue && postingPolicyRule.RentalControl > BOBSubStatusControl::Disabled) ||
                         (_issueReceipt == InventDirection::Receipt && postingPolicyRule.SubRentalControl > BOBSubStatusControl::Disabled))
                    {
                        if (!isMandatory)
                        {
                            setPossibleStatus.add(postingPolicyRule.SubStatus);
                            isMandatory = (_issueReceipt == InventDirection::Issue ?
                                           postingPolicyRule.RentalControl == BOBSubStatusControl::Mandatory :
                                           postingPolicyRule.SubRentalControl == BOBSubStatusControl::Mandatory);
                        }
                    }

                    globalObjectCache.insert(BOBPostingPolicyRule::getCacheScopeStr(), cacheKey, setPossibleStatus.pack());
                }
                else
                {
                    setPossibleStatusCurent = Set::create(cacheValue);
                }

                setPossibleStatus = Set::union(setPossibleStatus, setPossibleStatusCurent);
            }
        }
    
        return setPossibleStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataUpdateEventHandler</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(BOBPostingPolicyRule), DataEventType::Deleted),
     DataEventHandler(tableStr(BOBPostingPolicyRule), DataEventType::Inserted),
     DataEventHandler(tableStr(BOBPostingPolicyRule), DataEventType::Updated)]
    public static void dataUpdateEventHandler(Common _sender, DataEventArgs _args)
    {
        BOBPostingPolicyRule::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    public static void clearCache()
    {
        SysGlobalObjectCache cache = classfactory.globalObjectCache();
        cache.clear(BOBPostingPolicyRule::getCacheScopeStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScopeStr</Name>
				<Source><![CDATA[
    private static str getCacheScopeStr()
    {
        return 'BOBPostingPolicyRuleCache';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousSubStatusFromTo</Name>
				<Source><![CDATA[
    public static server container getPreviousSubStatusFromTo(InventDirection       _issueReceipt,
                                                              RefRecId              _postingPolicyRecId,
                                                              BOBRentalSubStatus    _subStatusTo,
                                                              boolean               _ignoreMandatory = false)
    {
        SysDictEnum             sysDictEnum;
        Counter                 enumIndex;
        BOBRentalSubStatus      subStatusFrom;
        BOBRentalSubStatus      subStatusTo;
        BOBPostingPolicyRule    postingPolicyRule;
        boolean                 foundMandatory;
    
        boolean isSubStatusEnabled()
        {
            return (_issueReceipt == InventDirection::Issue ?
                    postingPolicyRule.RentalControl > BOBSubStatusControl::Disabled :
                    postingPolicyRule.SubRentalControl > BOBSubStatusControl::Disabled);
        }
        ;
    
        if(_issueReceipt == InventDirection::None)
        {
            throw error(strFmt("@SYS88512", _issueReceipt));
        }
    
        sysDictEnum         = new SysDictEnum(enumNum(BOBRentalSubStatus));
        subStatusFrom       = BOBRentalSubStatus::None;
        subStatusTo         = BOBRentalSubStatus::None;
        foundMandatory      = false;
        postingPolicyRule   = BOBPostingPolicyRule::find(_postingPolicyRecId, _subStatusTo);
    
        if(isSubStatusEnabled()) // if requested status is not enabled, then return [ None, None ]
        {
            enumIndex = sysDictEnum.value2Index(_subStatusTo) - 1; // immediate previous enabled status is our "to" status
            postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, sysDictEnum.index2Value(enumIndex));
    
            while(enumIndex && !isSubStatusEnabled())
            {
                enumIndex --;
                postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, sysDictEnum.index2Value(enumIndex));
            }
    
            subStatusTo     = sysDictEnum.index2Value(enumIndex);
            subStatusFrom   = subStatusTo;
    
            // If this status is mandatory, then it's also the "from" status, as the inventory must be in that status before
            // we can proceed to the next. Otherwise track back to the first mandatory status and use that as our "from" point.
            // If enumIndex reaches zero, then that's our first status so stop looking and use that as our "from" point
    
            postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, subStatusFrom);
    
            while(postingPolicyRule && (_ignoreMandatory || !foundMandatory))
            {
                if(isSubStatusEnabled())
                {
                    subStatusFrom   = sysDictEnum.index2Value(enumIndex);
                    foundMandatory  = (_issueReceipt == InventDirection::Issue ?
                                       postingPolicyRule.RentalControl == BOBSubStatusControl::Mandatory :
                                       postingPolicyRule.SubRentalControl == BOBSubStatusControl::Mandatory);
                }
    
                enumIndex --;
                postingPolicyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, sysDictEnum.index2Value(enumIndex));
            }
        }
    
        return [ subStatusFrom, subStatusTo ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>subStatus2DocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the BOBRentalSubStatus into its DocumentStatus equivalent.
    /// </summary>
    /// <param name="_subStatus">
    /// The rental sub status that needs to be converted.
    /// </param>
    /// <returns>
    /// The Document status.
    /// </returns>
    public static DocumentStatus subStatus2DocumentStatus(BOBRentalSubStatus _subStatus)
    {
        DocumentStatus documentStatus;
    
        switch (_subStatus)
        {
            case BOBRentalSubStatus::None:
                documentStatus = DocumentStatus::None;
                break;
    
            case BOBRentalSubStatus::Quotation,
                 BOBRentalSubStatus::QuotationSent,
                 BOBRentalSubStatus::QuotationInspected:
                documentStatus = DocumentStatus::Quotation;
                break;
    
            case BOBRentalSubStatus::Confirmed,
                 BOBRentalSubStatus::Ordered:
                documentStatus = DocumentStatus::Confirmation;
                break;
    
            case BOBRentalSubStatus::Picked:
                documentStatus = DocumentStatus::PickingList;
                break;
    
            case BOBRentalSubStatus::Prepared,
                 BOBRentalSubStatus::Outbound,
                 BOBRentalSubStatus::Built,
                 BOBRentalSubStatus::EventStarted,
                 BOBRentalSubStatus::EventEnded,
                 BOBRentalSubStatus::Strike,
                 BOBRentalSubStatus::Inbound,
                 BOBRentalSubStatus::ReturnInspected:
                documentStatus = DocumentStatus::RORSubStatus;
                break;
    
            case BOBRentalSubStatus::Delivered:
                documentStatus = DocumentStatus::PackingSlip;
                break;
    
    
            case BOBRentalSubStatus::Invoiced:
                documentStatus = DocumentStatus::Invoice;
                break;
    
    
            case BOBRentalSubStatus::Returned:
                documentStatus = DocumentStatus::RORReturnNote;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subStatus2StatusIssue</Name>
				<Source><![CDATA[
    public static server StatusIssue subStatus2StatusIssue(RefRecId _postingPolicyRecId, BOBRentalSubStatus _rentalSubStatus)
    {
        BOBPostingPolicyRule    policyRule;
        boolean                 isPickedEnabled;
        ;
    
        switch(_rentalSubStatus)
        {
            case BOBRentalSubStatus::Quotation,
                 BOBRentalSubStatus::QuotationSent,
                 BOBRentalSubStatus::QuotationInspected:
                return StatusIssue::QuotationIssue;
    
            case BOBRentalSubStatus::Ordered,
                 BOBRentalSubStatus::Confirmed:
                return StatusIssue::OnOrder;
    
            case BOBRentalSubStatus::Picked:
                return StatusIssue::Picked;
    
            case BOBRentalSubStatus::Prepared,
                 BOBRentalSubStatus::Outbound:
                policyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, BOBRentalSubStatus::Picked);
                isPickedEnabled = (policyRule.RentalControl > BOBSubStatusControl::Disabled);
                return (isPickedEnabled ? StatusIssue::Picked : StatusIssue::OnOrder);
    
            case BOBRentalSubStatus::Delivered,
                 BOBRentalSubStatus::Built,
                 BOBRentalSubStatus::EventStarted,
                 BOBRentalSubStatus::EventEnded,
                 BOBRentalSubStatus::Strike,
                 BOBRentalSubStatus::Inbound,
                 BOBRentalSubStatus::Returned,
                 BOBRentalSubStatus::ReturnInspected:
                return StatusIssue::Deducted;
    
            case BOBRentalSubStatus::Invoiced:
                return StatusIssue::Sold;
    
            default:
                throw error(strFmt("@SYS88512", _rentalSubStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subStatus2StatusReceipt</Name>
				<Source><![CDATA[
    public static StatusReceipt subStatus2StatusReceipt(RefRecId _postingPolicyRecId, BOBRentalSubStatus _rentalSubStatus)
    {
        BOBPostingPolicyRule    policyRule;
        boolean                 isPickedEnabled;
        ;
    
        switch(_rentalSubStatus)
        {
            case BOBRentalSubStatus::Quotation,
                 BOBRentalSubStatus::QuotationSent,
                 BOBRentalSubStatus::QuotationInspected:
                return StatusReceipt::QuotationReceipt;
    
            case BOBRentalSubStatus::Ordered,
                 BOBRentalSubStatus::Confirmed:
                return StatusReceipt::Ordered;
    
            case BOBRentalSubStatus::Picked:
                return StatusReceipt::Registered;
    
            case BOBRentalSubStatus::Prepared,
                 BOBRentalSubStatus::Outbound:
                policyRule = BOBPostingPolicyRule::find(_postingPolicyRecId, BOBRentalSubStatus::Picked);
                isPickedEnabled = (policyRule.SubRentalControl > BOBSubStatusControl::Disabled);
                return (isPickedEnabled ? StatusReceipt::Registered : StatusReceipt::Ordered);
    
            case BOBRentalSubStatus::Delivered,
                 BOBRentalSubStatus::Built,
                 BOBRentalSubStatus::EventStarted,
                 BOBRentalSubStatus::EventEnded,
                 BOBRentalSubStatus::Strike,
                 BOBRentalSubStatus::Inbound,
                 BOBRentalSubStatus::Returned,
                 BOBRentalSubStatus::ReturnInspected:
                return StatusReceipt::Received;
    
            case BOBRentalSubStatus::Invoiced:
                return StatusReceipt::Purchased;
    
            default:
                throw error(strFmt("@SYS88512", _rentalSubStatus));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR6032</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SubStatus</TitleField1>
	<TitleField2>PostingPolicyRecId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<PrimaryIndex>PostingPolicyIdx</PrimaryIndex>
	<ReplacementKey>PostingPolicyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsAvailablePurchase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableSubRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableWorkOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingPolicyRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubRentalControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingPolicyRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubRentalControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailablePurchase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableSubRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAvailableWorkOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAvailablePurchase</Name>
			<HelpText>@DNR7125</HelpText>
			<Label>@DNR7120</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAvailableRental</Name>
			<HelpText>@DNR7122</HelpText>
			<Label>@DNR7118</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAvailableSales</Name>
			<HelpText>@DNR7124</HelpText>
			<Label>@DNR7119</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAvailableSubRental</Name>
			<HelpText>@DNR7123</HelpText>
			<Label>@DNR7121</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAvailableWorkOrder</Name>
			<HelpText>@DNR8254</HelpText>
			<Label>@DNR8253</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostingPolicyRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RentalControl</Name>
			<Label>@DNR6040</Label>
			<EnumType>BOBSubStatusControl</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubRentalControl</Name>
			<Label>@DNR6041</Label>
			<EnumType>BOBSubStatusControl</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>BOBRentalSubStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PostingPolicyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PostingPolicyRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBPostingPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BOBPostingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingPolicyRecId</Name>
					<Field>PostingPolicyRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>