<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DFMValueTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DFMValueTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayFieldName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display DFMName displayFieldName()
    {
        return (select firstOnly Name from DFMFieldTable
                where DFMFieldTable.FieldId == this.FieldId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyValues</Name>
				<Source><![CDATA[
    public static server void copyValues(Common             _recordFrom,
                                         Common             _recordTo,
                                         DFMFieldGroupId    _thisFieldGroupOnly = '',
                                         boolean            _overwriteExisting = false)
    {
        DFMValueTrans transOrig, transNew;
        DFMFieldGroupContents fieldGroupContents;
        TableId tableIdTo = _recordTo.TableId;
        RecId recIdTo = _recordTo.RecId;
        ;
    
        if(_recordFrom && _recordTo)
        {
            if(_overwriteExisting)
            {
                delete_from transOrig
                where transOrig.RefTableId == _recordTo.TableId
                &&    transOrig.RefRecId == _recordTo.RecId;
            }
    
            insert_recordset transNew (FieldId, RefRecId, RefTableId, Value)
            select FieldId, recIdTo, tableIdTo, Value from transOrig
            where transOrig.RefTableId == _recordFrom.TableId
            &&    transOrig.RefRecId == _recordFrom.RecId
                exists join fieldGroupContents
                where _thisFieldGroupOnly == ''
                ||   (fieldGroupContents.FieldGroupId == _thisFieldGroupOnly &&
                      fieldGroupContents.FieldId == transOrig.FieldId);
        }
        else
        {
            throw error(Error::missingRecord(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DFMValueTrans find(RefTableId _refTableId,
                                     RefRecId   _refRecId,
                                     DFMFieldId _fieldId,
                                     boolean    _forUpdate = false)
    {
        DFMValueTrans valueTrans;
        ;
    
        if(_refTableId && _refRecId && _fieldId)
        {
            if(_forUpdate)
            {
                valueTrans.selectForUpdate(true);
            }
    
            select firstonly valueTrans
            where valueTrans.RefTableId == _refTableId
            &&    valueTrans.RefRecId   == _refRecId
            &&    valueTrans.FieldId    == _fieldId;
        }
    
        return valueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBusObjAttrs</Name>
				<Source><![CDATA[
    public static server void initBusObjAttrs(RORRentalLine _rentalLine)
    {
        BOBRentalType   rentalType;
        DFMValueTrans   transOrig, transNew;
        RefTableId      tableIdTo = _rentalLine.TableId;
        RefRecId        recIdTo = _rentalLine.RecId;
        ;
    
        if(_rentalLine.RecId && _rentalLine.BOBRentalTypeId)
        {
            insert_recordset transNew (FieldId, RefRecId, RefTableId, Value)
            select FieldId, recIdTo, tableIdTo, Value from transOrig
            where transOrig.RefTableId == tableNum(BOBRentalType)
                exists join rentalType
                where rentalType.RentalTypeId == _rentalLine.BOBRentalTypeId
                &&    rentalType.RecId == transOrig.RefRecId
                &&   (rentalType.BusObjAttributeField[1] == transOrig.FieldId ||
                      rentalType.BusObjAttributeField[2] == transOrig.FieldId ||
                      rentalType.BusObjAttributeField[3] == transOrig.FieldId);
        }
        else
        {
            throw error(Error::missingRecord(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>value2str</Name>
				<Source><![CDATA[
    public static str value2str(DFMFieldType _type, AnyType _value)
    {
        str ret;
        ;
    
        switch(_type)
        {
            case DFMFieldType::String:
                ret = _value;
                break;
    
            case DFMFieldType::Integer, DFMFieldType::Checkbox:
                ret = (_value == 0 ? '' : int2str(_value));
                break;
    
            case DFMFieldType::Real:
                ret = (_value == 0 ? '' : num2str(_value, 0, 16, 1, 0));
                break;
    
            case DFMFieldType::Date:
                ret = (_value == dateNull() ? '' : strReplace(date2strXpp(_value), '\\', '-'));
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DFMDynamicFieldManagement</ConfigurationKey>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DFM6</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RefTableId</TitleField1>
	<TitleField2>RefRecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ValueTransIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DFMFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<ExtendedDataType>DFMValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ValueTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Common</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DFMFieldTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DFMFieldTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FieldId</Name>
					<SourceEDT>DFMFieldId</SourceEDT>
					<Field>FieldId</Field>
					<RelatedField>FieldId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FieldIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>