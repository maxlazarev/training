<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPWorkOrderLineResource</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WPPWorkOrderLineResource extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WPPWorkOrderLine workOrderLine;
        ;
    
        ttsBegin;
    
        this.deleteHourJournal();
    
        workOrderLine = this.workOrderLine();
        WPPWorkOrderLine::updateItemReqDates(this.WorkOrderLineRecId, workOrderLine.RequestedStartDateTime);
    
        super();
    
        BOBRentalTransManager::newWorkOrder(workOrderLine).synchronize();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHourJournal</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public void deleteHourJournal(Num _planToIdOrig = '')
    {
        ProjJournalTrans                projJournalTrans;
        ProjJournalTable                projJournalTable;
        WPPWorkOrderLineProjJournalLink workOrderLineProjJournalLink;
        WPPParameters                   parameters;
        ProjJournalId                   projJournalId;
        WPPResourceTable                resourceTable;
    
        parameters = WPPParameters::find();
    
        if (parameters.AutoGenerateJourTrans)
        {

            WPPResourceId resourceId = (_planToIdOrig ? _planToIdOrig : this.ResourceId);

            select firstonly resourceTable
            where resourceTable.ResourceId == resourceId
            &&    resourceTable.AutoGenerateJourTrans == NoYes::Yes;

    
            if (resourceTable.RecId)
            {
                select firstOnly JournalId, Resource from projJournalTrans
                where projJournalTrans.WPPResourceId == resourceTable.ResourceId
                    exists join projJournalTable
                    where projJournalTable.JournalId == projJournalTrans.JournalId
                    &&   !projJournalTable.Posted
                        join TableId from workOrderLineProjJournalLink
                        where workOrderLineProjJournalLink.ProjJournalId == projJournalTrans.JournalId
                        &&    workOrderLineProjJournalLink.WorkOrderLineRecId == this.WorkOrderLineRecId;
    
                projJournalId = projJournalTrans.JournalId;
    
                if (projJournalId)
                {
                    delete_from projJournalTrans
                    where projJournalTrans.WPPResourceId == resourceTable.ResourceId
                        exists join projJournalTable
                        where projJournalTable.JournalId == projJournalTrans.JournalId
                        &&   !projJournalTable.Posted
                            join TableId from workOrderLineProjJournalLink
                            where workOrderLineProjJournalLink.ProjJournalId == projJournalTrans.JournalId
                            &&    workOrderLineProjJournalLink.WorkOrderLineRecId == this.WorkOrderLineRecId;
                }
            }
            else
            {
                if (parameters.DefaultHourJourWorker)
                {
                    select firstOnly JournalId, Resource from projJournalTrans
                    where projJournalTrans.Worker == parameters.DefaultHourJourWorker
                        exists join projJournalTable
                        where projJournalTable.JournalId == projJournalTrans.JournalId
                        &&   !projJournalTable.Posted
                            join TableId from workOrderLineProjJournalLink
                            where workOrderLineProjJournalLink.ProjJournalId == projJournalTrans.JournalId
                            &&    workOrderLineProjJournalLink.WorkOrderLineRecId == this.WorkOrderLineRecId;
                    
                    projJournalId = projJournalTrans.JournalId;
                    
                    if (projJournalId)
                    {
                        delete_from projJournalTrans
                        where projJournalTrans.Worker == parameters.DefaultHourJourWorker
                            exists join projJournalTable
                            where projJournalTable.JournalId == projJournalTrans.JournalId
                            &&   !projJournalTable.Posted
                                join TableId from workOrderLineProjJournalLink
                                where workOrderLineProjJournalLink.ProjJournalId == projJournalTrans.JournalId
                                &&    workOrderLineProjJournalLink.WorkOrderLineRecId == this.WorkOrderLineRecId;
                    }
                }
            }
    
            if (projJournalId && ProjJournalTable::exist(projJournalId))
            {
                select forUpdate firstOnly projJournalTable
                where projJournalTable.JournalId == projJournalId
                    outer join RecId from projJournalTrans
                    where projJournalTrans.JournalId == projJournalTable.JournalId;
    
                if (projJournalTrans)
                {
                    projJournalTable::initTotal(projJournalTable);
                    projJournalTable.update();
                }
                else
                {
                    projJournalTable.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayActualHours</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Hours displayActualHours()
    {
        #TimeConstants
        Hours ret;
        ;
    
        if(this.ActualFromDateTime && this.ActualToDateTime)
        {
            ret = int642int(DateTimeUtil::getDifference(this.ActualToDateTime, this.ActualFromDateTime)) / #SecondsPerHour;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPlannedToDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display TransDateTime displayPlannedToDateTime()
    {
        TransDateTime   transDateTime;
    
        if (this.PlannedDate)
        {
            transDateTime = DateTimeUtil::newDateTime(this.PlannedDate, 0);
        }
        else
        {
            transDateTime = this.PlannedToDateTime;
        }
    
        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayResourceName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Name displayResourceName()
    {
        return WPPResourceTable::find(this.ResourceId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.ResourceType = WrkCtrGroupWrkCtr::WrkCtr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _showMessage = true, boolean _calledFromRentalDateChange = false, boolean _addRelatedLinesToPlanningSet = true, boolean _skipInsertLogic = false)
    {
        // We don't want to call doInsert as this will skip business logic and therefore the dual write synchronization
        if (_skipInsertLogic || this.SkipInsertLogic)
        {
            super();
            return;
        }

        WPPWorkOrderLine                    workOrderLine;
        WPPWorkOrderTaskTable               workOrderTaskTable;
        WPPTaskAssignmentEngine_Service     taskAssignmentEngine_Service;
        WPPTaskAssignmentEngine_Transport   taskAssignmentEngine_Transport;
        Set                                 set;
    
        ttsBegin;

        select firstOnly TaskType from workOrderTaskTable
            join workOrderLine
            where workOrderLine.TaskId == workOrderTaskTable.TaskId
            &&    workOrderLine.RecId  == this.WorkOrderLineRecId;
    
        // no need to call super, this is taken care of by the WPPTaskAssignmentEngine
        // super();
    
        switch (workOrderTaskTable.TaskType)
        {
            case WPPTaskType::Service:
                taskAssignmentEngine_Service = WPPTaskAssignmentEngine_Service::construct();
                taskAssignmentEngine_Service.parmShowMessage(_showMessage);
                taskAssignmentEngine_Service.parmCalledFromRentalDateChange(_calledFromRentalDateChange);
                taskAssignmentEngine_Service.parmAddRelatedLinesToPlanningSet(_addRelatedLinesToPlanningSet);
                this.data(taskAssignmentEngine_Service.assignToSingleResource(workOrderLine,
                                                                              this.ResourceType,
                                                                              this.ResourceId,
                                                                              DateTimeUtil::applyTimeZoneOffset(this.PlannedFromDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                                                                              DateTimeUtil::applyTimeZoneOffset(this.PlannedToDateTime, DateTimeUtil::getUserPreferredTimeZone())));
    
                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataUtil::getFormDataSource(this).research(true);
                }
                break;
    
            case WPPTaskType::Delivery,
                 WPPTaskType::Load,
                 WPPTaskType::InternalDelivery,
                 WPPTaskType::InternalLoad:
                set = new Set(Types::Record);
                set.add(workOrderLine);
    
                taskAssignmentEngine_Transport = WPPTaskAssignmentEngine_Transport::construct();
                taskAssignmentEngine_Transport.assignSingleTask(workOrderLine,
                                                                this.ResourceType,
                                                                this.ResourceId,
                                                                this.PlannedDate,
                                                                // Suggested LineNum, will be recalculated later in the assignMultipleTasks method
                                                                // which is called by the assignSingleTask method
                                                                this.LineNum ? this.LineNum :
                                                                (select maxOf(LineNum) from WPPWorkOrderLineResource
                                                                 where WPPWorkOrderLineResource.WorkOrderLineRecId == this.WorkOrderLineRecId).LineNum + 1);
                break;
    
            default:
                break;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(WPPWorkOrderLineResource, ResourceId):
                if (this.ResourceType == WrkCtrGroupWrkCtr::WrkCtr && this.ResourceId != this.orig().ResourceId)
                {
                    this.deleteHourJournal();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WPPWorkOrderLineResource    workOrderLineResourceOrig;
    
        workOrderLineResourceOrig = this.orig();
    
        super();
    
        if (this.PlannedFromDateTime != workOrderLineResourceOrig.PlannedFromDateTime)
        {
            WPPWorkOrderLine::updateItemReqDates(this.WorkOrderLineRecId, this.PlannedFromDateTime);
        }
    
        BOBRentalTransManager::newWorkOrder(this.workOrderLine()).synchronize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if(!this.ResourceId)
        {
            ret =checkFailed(strFmt("@SYS136411",fieldId2name(tableNum(WPPWorkOrderLineResource),fieldNum(WPPWorkOrderLineResource, ResourceId))));
        }
    
        if (this.PlannedToDateTime < this.PlannedFromDateTime)
        {
            ret = checkFailed(strFmt("@DNR6356", fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedFromDateTime)), fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedToDateTime))));
        }
    
        if (this.ActualToDateTime < this.ActualFromDateTime)
        {
            ret = checkFailed(strFmt("@DNR6356", fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, ActualFromDateTime)), fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, ActualToDateTime))));
        }
    
        ret = WPPWorkOrderLineResource::checkPlannedDateTime(this.PlannedFromDateTime, this.PlannedToDateTime) && ret;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderLine</Name>
				<Source><![CDATA[
    public WPPWorkOrderLine workOrderLine(boolean _forUpdate = false)
    {
        return WPPWorkOrderLine::findRecId(this.WorkOrderLineRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInternalWorkOrder</Name>
				<Source><![CDATA[
    public static void addToInternalWorkOrder(WPPWorkOrderId            _internalWorkOrderId,
                                              WPPWorkOrderTaskId        _taskId,
                                              Set                       _resourceAccountSet,
                                              WPPPlannedFromDateTime    _plannedFromDateTime,
                                              WPPPlannedToDateTime      _plannedToDateTime,
                                              TransTxt                  _internalNote)
    {

        WPPWorkOrderLineResource            workOrderLineResource;
        WPPWorkOrderLine                    workOrderLine;
        WPPResourceTable                    resourceTable;
        LineNum                             lineNumLast;
        WPPResourceId                       resourceId;
        SetEnumerator                       enumerator;
        WPPTaskAssignmentEngine_Service     taskAssignmentEngine_Service;
    
        // Find the work order line related to the internal work order task
        // fetch the last LineNum used
        select firstOnly RecId from workOrderLine
            order by workOrderLineResource.LineNum desc
            where workOrderLine.WorkOrderId == _internalWorkOrderId
            &&    workOrderLine.TaskId == _taskId
                outer join LineNum from workOrderLineResource
                where workOrderLineResource.WorkOrderLineRecId == workOrderLine.RecId;
    
        lineNumLast = workOrderLineResource.LineNum;
        enumerator  = _resourceAccountSet.getEnumerator();
        taskAssignmentEngine_Service = WPPTaskAssignmentEngine_Service::construct();
    
        while (enumerator.moveNext())
        {
            resourceId = enumerator.current();
            resourceTable = WPPResourceTable::find(resourceId);
    
            lineNumLast ++;
    
            WrkCtrGroupWrkCtr resourceType;
            
            if(resourceTable.IsIndividualResource)
            { 
                resourceType = WrkCtrGroupWrkCtr::WrkCtr;
            }
            else
            {
                resourceType = WrkCtrGroupWrkCtr::WrkCtrGroup;
            }

            taskAssignmentEngine_Service.createResourcePlanningExternal(resourceId,
                                                                        resourceType,
                                                                        _plannedFromDateTime,
                                                                        _plannedToDateTime,
                                                                        workOrderLine.RecId,
                                                                        lineNumLast,
                                                                        _internalNote);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPlannedDateTime</Name>
				<Source><![CDATA[
    public static boolean checkPlannedDateTime(TransDateTime _plannedFromDateTime, TransDateTime _plannedToDateTime)
    {
        boolean         ret = true;
        TransDateTime   nullDateTime = DateTimeUtil::addDays(utcDateTimeNull(), 1);
        ;
    
        if ((_plannedFromDateTime >= nullDateTime && _plannedToDateTime < nullDateTime)
        ||  (_plannedFromDateTime < nullDateTime && _plannedToDateTime >= nullDateTime))
        {
            if (_plannedFromDateTime >= nullDateTime)
            {
                ret = checkFailed(strFmt("@DNR8255",
                    fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedToDateTime)),
                    fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedFromDateTime))));
            }
            else
            {
                ret = checkFailed(strFmt("@DNR8255",
                    fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedFromDateTime)),
                    fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedToDateTime))));
            }
        }
    
        if (_plannedToDateTime && _plannedToDateTime < _plannedFromDateTime)
        {
            ret = checkFailed(strFmt("@DNR1125", fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedToDateTime)),
                                                 fieldId2pname(tableNum(WPPWorkOrderLineResource), fieldNum(WPPWorkOrderLineResource, PlannedFromDateTime))));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWorkOrderLine</Name>
				<Source><![CDATA[
    public static WPPWorkOrderLineResource createFromWorkOrderLine(WPPWorkOrderLine             _workOrderLine,
                                                                   WPPResourceGroupResource     _resourceGroupResource,
                                                                   WPPResourceId                _wrkCtrId,
                                                                   WrkCtrGroupWrkCtr            _wrkCtrGroupWrkCtr = WrkCtrGroupWrkCtr::WrkCtr,
                                                                   boolean                      _calledFromRentalDateChange = false,
                                                                   boolean                      _addRelatedLinesToPlanningSet = true)
    {
        WPPWorkOrderLineResource    workOrderLineResource;
    
        workOrderLineResource.initValue();
        workOrderLineResource.ResourceId          = _wrkCtrId;
        workOrderLineResource.ResourceType        = _wrkCtrGroupWrkCtr;
        workOrderLineResource.PlannedFromDateTime = _resourceGroupResource.ValidFrom && _workOrderLine.RequestedStartDateTime < _resourceGroupResource.ValidFrom ?
                                                    _resourceGroupResource.ValidFrom :  _workOrderLine.RequestedStartDateTime;
        workOrderLineResource.PlannedToDateTime   = _resourceGroupResource.ValidTo   && _workOrderLine.RequestedEndDateTime   > _resourceGroupResource.ValidTo   ?
                                                    _resourceGroupResource.ValidTo   :  _workOrderLine.RequestedEndDateTime;
        
        workOrderLineResource.WorkOrderLineRecId  = _workOrderLine.RecId;
        // Date/time check is done in the WPPTaskAssignmentEngine_Service called from the insert method
        // Don't show messages during automatic assignment
        workOrderLineResource.insert(false, _calledFromRentalDateChange, _addRelatedLinesToPlanningSet);
    
        return workOrderLineResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(WPPWorkOrderLineRecId _refRecId)
    {
        return _refRecId && (select firstonly RecId from WPPWorkOrderLineResource
                             where WPPWorkOrderLineResource.WorkOrderLineRecId == _refRecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existResource</Name>
				<Source><![CDATA[
    public static boolean existResource(WPPWorkOrderLineRecId _refRecId, WrkCtrGroupWrkCtr _resourceAccountType, WPPResourceId _resourceId)
    {
        return _refRecId && _resourceId && (select firstonly RecId from WPPWorkOrderLineResource
                                                 where WPPWorkOrderLineResource.WorkOrderLineRecId == _refRecId
                                                 &&    WPPWorkOrderLineResource.ResourceType == _resourceAccountType
                                                 &&    WPPWorkOrderLineResource.ResourceId == _resourceId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static WPPWorkOrderLineResource findRecId(RecId _recId, boolean _forUpdate = false)
    {
        WPPWorkOrderLineResource ret;
        ;
    
        if(_recId)
        {
            if(_forUpdate)
            {
                ret.selectForUpdate(true);
            }
    
            select firstOnly ret
            where ret.RecId == _recId;
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR362</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>ResourceId</TitleField1>
	<TitleField2>ResourceType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<PrimaryIndex>WorkOrderLineResourceIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedFromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualFromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ActualDateTime</Name>
			<Label>@SYS108614</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActualFromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Notes</Name>
			<Label>@SYS40182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InternalNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedFromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualFromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayActualHours</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Resource</Name>
			<Label>@SYS89158</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServicePlanning</Name>
			<Label>@DNR7247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlannedFromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportPlanning</Name>
			<Label>@DNR3473</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlannedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualFromDateTime</Name>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
			<Label>@DNR6470</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualToDateTime</Name>
			<ExtendedDataType>ToDateTime</ExtendedDataType>
			<Label>@DNR6471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InternalNote</Name>
			<ExtendedDataType>TransTxt</ExtendedDataType>
			<Label>@DNR4443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PlannedDate</Name>
			<ExtendedDataType>SchedDate</ExtendedDataType>
			<Label>@SYS79979</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PlannedFromDateTime</Name>
			<ExtendedDataType>WPPPlannedFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PlannedToDateTime</Name>
			<ExtendedDataType>WPPPlannedToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourceAccount</Name>
			<ConfigurationKey>DNRDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>Num</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResourceType</Name>
			<HelpText>@SYS309732</HelpText>
			<Label>@SYS81228</Label>
			<EnumType>WrkCtrGroupWrkCtr</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkOrderLineRecId</Name>
			<ExtendedDataType>WPPWorkOrderLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourceId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipInsertLogic</Name>
			<Label>@DNR:SkipInsertLogic</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkOrderLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransportPlanboardIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ResourceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResourceType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PlannedFromDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkOrderLineResourceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkOrderLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResourceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPWorkOrderLine</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WPPWorkOrderLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkOrderLineRecId</Name>
					<Field>WorkOrderLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPResourceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourcePlanning</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceId</Name>
					<Field>ResourceId</Field>
					<RelatedField>ResourceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ResourceType</Name>
					<Field>ResourceType</Field>
					<ValueStr>WrkCtrGroupWrkCtr::WrkCtr</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPResourceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroupPlanning</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<ValueStr>NoYes::No</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceId</Name>
					<Field>ResourceId</Field>
					<RelatedField>ResourceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ResourceType</Name>
					<Field>ResourceType</Field>
					<ValueStr>WrkCtrGroupWrkCtr::WrkCtrGroup</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>