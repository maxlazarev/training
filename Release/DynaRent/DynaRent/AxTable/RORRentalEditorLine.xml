<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalEditorLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RORRentalEditorLine extends Common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    public AmountCur calcLineAmount(Qty _qty = this.RentalQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to the RORRentalLine map', true)]
    public AmountCur calcLineAmountForced(Qty _qty = this.RentalQty)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    public boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeToLines</Name>
				<Source><![CDATA[
    public server boolean cascadeToLines()
    {
        RORRentalEditorLine     rentalEditorLineOrig = this.orig();
        RORRentalEditorLine     rentalEditorLineChildren;
        boolean                 childLinesUpdated;
    
        ttsBegin;
    
        while select forupdate rentalEditorLineChildren
        where rentalEditorLineChildren.ParentLineRecId   == this.RecId
        &&    this.RecId
        &&    ((rentalEditorLineOrig.PriceTimeUnit != this.PriceTimeUnit                && rentalEditorLineChildren.PriceTimeUnit       == rentalEditorLineOrig.PriceTimeUnit)      ||
               (rentalEditorLineOrig.INVRentalModeId != this.INVRentalModeId            && rentalEditorLineChildren.INVRentalModeId     == rentalEditorLineOrig.INVRentalModeId)    ||
               (rentalEditorLineOrig.DNRCalendarId != this.DNRCalendarId                && rentalEditorLineChildren.DNRCalendarId          == rentalEditorLineOrig.DNRCalendarId)    ||
               (rentalEditorLineOrig.INVInvoiceProfileId != this.INVInvoiceProfileId    && rentalEditorLineChildren.INVInvoiceProfileId == rentalEditorLineOrig.INVInvoiceProfileId))
        {
            if (rentalEditorLineChildren.TradeType != RORTradeType::SalesPurch
            &&  rentalEditorLineChildren.PriceTimeUnit != this.PriceTimeUnit && rentalEditorLineOrig.PriceTimeUnit != this.PriceTimeUnit)
            {
                rentalEditorLineChildren.PriceTimeUnit = this.PriceTimeUnit;
    
                if (rentalEditorLineOrig.RentalPrice != this.RentalPrice || rentalEditorLineOrig.RentalGrossAmount != this.RentalGrossAmount)
                {
                    // if prices were recalculated then do the same on child lines
                    rentalEditorLineChildren.modifiedPriceTimeUnit();
                }
            }
    
            if (rentalEditorLineChildren.TradeType != RORTradeType::SalesPurch
            &&  rentalEditorLineChildren.INVRentalModeId != this.INVRentalModeId && rentalEditorLineOrig.INVRentalModeId != this.INVRentalModeId)
            {
                rentalEditorLineChildren.INVRentalModeId = this.INVRentalModeId;
                rentalEditorLineChildren.modifiedField(fieldNum(RORRentalEditorLine, INVRentalModeId));
            }
    
            if (rentalEditorLineChildren.TradeType != RORTradeType::SalesPurch
            &&  rentalEditorLineChildren.DNRCalendarId != this.DNRCalendarId && rentalEditorLineOrig.DNRCalendarId != this.DNRCalendarId)
            {
                rentalEditorLineChildren.DNRCalendarId = this.DNRCalendarId;
                rentalEditorLineChildren.modifiedField(fieldNum(RORRentalEditorLine, DNRCalendarId));
            }
    
            if (rentalEditorLineChildren.TradeType != RORTradeType::SalesPurch
            &&  rentalEditorLineChildren.INVInvoiceProfileId != this.INVInvoiceProfileId && rentalEditorLineOrig.INVInvoiceProfileId != this.INVInvoiceProfileId)
            {
                rentalEditorLineChildren.INVInvoiceProfileId = this.INVInvoiceProfileId;
                rentalEditorLineChildren.modifiedField(fieldNum(RORRentalEditorLine, INVInvoiceProfileId));
            }
    

            rentalEditorLineChildren.ReasonText = this.ReasonText;
            rentalEditorLineChildren.cascadeToLines();
            rentalEditorLineChildren.update();
            childLinesUpdated = true;
        }
    
        ttsCommit;
    
        return childLinesUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsContractItem</Name>
				<Source><![CDATA[
    private boolean checkIsContractItem()
    {
        boolean ret = true;
        RAGParameters   parameters = RAGParameters::find();
    
        if(this.ItemId == parameters.ItemIdInsurance
        || this.ItemId == parameters.ItemIdTransport
        || this.ItemId == parameters.ItemIdReturnTransport
        || this.ItemId == parameters.ItemIdWarranty)
        {
            ret = checkFailed(strFmt("@DNR6643", this.ItemId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRentalDatesAndPeriod</Name>
				<Source><![CDATA[
    private void copyRentalDatesAndPeriod(Common _common = this.salesPurchLine())
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes)))
        {
            RORRentalDateTimes rentalDateTimes = _common.RORRentalDateTimes();
            rentalDateTimes.RefTableId = this.TableId;
            rentalDateTimes.RefRecId = this.RecId;
            rentalDateTimes.insert();
        }           
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRentalDatesAndPeriod</Name>
				<Source><![CDATA[
    private void createRentalDatesAndPeriod()
    {
        RORRentalDateTimes          rentalDateTimes;
            
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes)))
        {
            rentalDateTimes = this.RORRentalLine::createRentalDateTimes();
        }            
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    public DiscAmount discAmount()
    {
        // no multi-line discount support yet
        return PriceDisc::discAmount(this.discType(), this.LineDisc, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    public DiscPct discPercent()
    {
        // no multi-line discount support yet
        return PriceDisc::discPercent(this.discType(), this.LinePercent, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discType</Name>
				<Source><![CDATA[
    private LineMultiLn discType()
    {
        LineMultiLn discType;
    
        switch (this.RefTableId)
        {
            case tableNum(SalesLine),
                 tableNum(SalesQuotationLine):
                discType = SalesParameters::find().Disc;
                break;
    
            case tableNum(PurchLine):
                discType = PurchParameters::find().Disc;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return discType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentNetAmount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display RORCurrentNetAmount displayCurrentNetAmount()
    {
        RORCurrentNetAmount netAmount;
            
        if (hasFieldAccess(tableNum(RORRentalEditorLine), fieldNum(RORRentalEditorLine, RentalGrossAmount)))
        {
            netAmount = this.editNetAmount(false, 0) * this.INVRateMultiplierTier;
    
            if (this.INVRentalModeId)
            {
                netAmount = netAmount * INVRentalMode::find(this.INVRentalModeId).RateMultiplier;                
            }
        }
    
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ItemName displayItemName()
    {
        return this.RORRentalLine::inventTable().itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRSetAdditionalNotes</Name>
				<Source><![CDATA[
    public void DNRSetAdditionalNotes(Common _common)
    {
        if (isConfigurationKeyEnabled(configurationKeyNum(DNRAdditionalNotes)))
        {
           DNRAdditionalNoteTable::copyNotes(_common, this);
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DNRWriteAdditionalNotes</Name>
				<Source><![CDATA[
    public void DNRWriteAdditionalNotes(Common _common)
    {
        if (isConfigurationKeyEnabled(configurationKeyNum(DNRAdditionalNotes)))
        {
            DNRAdditionalNoteTable::copyNotes(this, _common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDiscPercent</Name>
				<Source><![CDATA[
    public edit RORRentalDiscPercent editDiscPercent(boolean _set, RORRentalDiscPercent _discPercent)
    {
        RORRentalDiscPercent rentalDiscPercent;
    
        if (hasFieldAccess(tablenum(RORRentalEditorLine), fieldnum(RORRentalEditorLine, LinePercent)))
        {
            rentalDiscPercent = this.RORRentalLine::editDiscPercent(_set, _discPercent);
        }
    
        return rentalDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLineAmount</Name>
				<Source><![CDATA[
    public edit LineAmount editLineAmount(boolean _set, LineAmount _lineAmount)
    {
        LineAmount lineAmount;
    
        if (hasFieldAccess(tableNum(RORRentalEditorLine), fieldNum(RORRentalEditorLine, LineAmount)))
        {
            lineAmount = this.RORRentalLine::editLineAmount(_set, _lineAmount);
        }
    
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editNetAmount</Name>
				<Source><![CDATA[
    public edit RORRentalNetAmount editNetAmount(boolean _set, RORRentalNetAmount _netAmount)
    {
        RORRentalNetAmount netAmount;
    
        if (hasFieldAccess(tableNum(RORRentalEditorLine), fieldNum(RORRentalEditorLine, RentalGrossAmount)))
        {
            netAmount = this.RORRentalLine::editNetAmount(_set, _netAmount);
        }
    
        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIncludedChildren</Name>
				<Source><![CDATA[
    public boolean hasIncludedChildren()
    {
        boolean ret;
        RORRentalEditorLine rentalEditorLine;
    
        if (this.KitComponentType == RORKitComponentType::Kit
        || this.KitComponentType == RORKitComponentType::KitComponent)
        {
            select firstOnly RecId from rentalEditorLine
            where rentalEditorLine.ParmId == this.ParmId
            && rentalEditorLine.HeaderId == this.HeaderId
            && rentalEditorLine.ParentLineRecId == this.RecId
            && rentalEditorLine.Include;
    
            if (rentalEditorLine)
            {
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canStatusBeIncluded</Name>
				<Source><![CDATA[
    private boolean canStatusBeIncluded()
    {
        boolean             ret = false;
        InventTrans         inventTrans;
        BOBRentalTrans      rentalTrans;
        InventTransOrigin   inventTransOrigin;
    
        switch (this.RefTableId)
        {
            case tableNum(SalesLine) :
                SalesLine salesLine = SalesLine::findRecId(this.RefRecId);
                if (salesLine.RORTradeType == RORTradeType::SalesPurch)
                {

                    select firstonly RecId from inventTransOrigin
                    where inventTransOrigin.InventTransId == salesLine.InventTransId
                        exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.BOBIsCompensatingTrans == NoYes::No
                        && inventTrans.StatusIssue != StatusIssue::OnOrder;
                    
                    if (inventTransOrigin.RecId)
                    {
                        ret = true;
                    }
                              
                }
                else if(salesLine.RecId)
                {
                    InventTransOriginSalesLine   inventTransOriginSalesLine;
                    
                    select firstonly minOf(SubStatus), RecId from rentalTrans
                        exists join inventTransOriginSalesLine
                        where inventTransOriginSalesLine.InventTransOrigin == rentalTrans.InventTransOrigin
                        && inventTransOriginSalesLine.SalesLineDataAreaId == salesLine.dataAreaId
                        && inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId;
                    
                    if(rentalTrans)
                    {
                        ret = rentalTrans.SubStatus > BOBRentalSubStatus::Confirmed;
                    }

                }
                break;
    
            case tableNum(SalesQuotationLine) :
                SalesQuotationLine quotationLine = SalesQuotationLine::findRecId(this.RefRecId);
                if (quotationLine.RORTradeType == RORTradeType::SalesPurch)
                {
                    select firstonly RecId from inventTransOrigin
                    where inventTransOrigin.InventTransId == quotationLine.InventTransId
                        exists join inventTrans
                        where inventTrans.InventTransOrigin == InventTransOrigin.RecId
                        && inventTrans.BOBIsCompensatingTrans == NoYes::No
                        && inventTrans.StatusIssue != StatusIssue::QuotationIssue;
                    
                    if (inventTransOrigin.RecId)
                    {
                        ret = true;
                    }

                }
                else
                {
                    ret = quotationLine.BOBRentalSubStatus > BOBRentalSubStatus::Confirmed;
                }
                break;
    
            case tableNum(PurchLine) :
                PurchLine purchLine = PurchLine::findRecId(this.RefRecId);
                if (purchLine.RORTradeType == RORTradeType::SalesPurch)
                {
                    select firstonly RecId from inventTransOrigin
                    where inventTransOrigin.InventTransId == purchLine.InventTransId
                        exists join inventTrans
                        where inventTrans.InventTransOrigin == InventTransOrigin.RecId
                        && inventTrans.BOBIsCompensatingTrans == NoYes::No
                        && inventTrans.StatusReceipt != StatusReceipt::Ordered;
                    
                    if (inventTransOrigin.RecId)
                    {
                        ret = true;
                    }

                }
                else
                {
                    ret = purchLine.BOBRentalSubStatus > BOBRentalSubStatus::Confirmed;
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeExcludeComponents</Name>
				<Source><![CDATA[
    private void includeExcludeComponents()
    {
        RORRentalEditorLine childComponent;
        Set                 recIdSet = new Set(Types::Int64);

        // Only update the components if the relevant line has already been inserted. Otherwise, the main line and all the child lines are
        // (incorrectly) updated (i.e., because of the condition 'parentComponents.ParentLineRecId == this.RecId').
        if (this.RecId)
        {
            while select forupdate childComponent
            where childComponent.ParmId == this.ParmId
            && childComponent.HeaderId == this.HeaderId
            && childComponent.MainKitReference == this.MainKitReference
            && childComponent.ParentLineRecId == this.RecId
            && childComponent.Include == this.orig().Include
            {
                boolean childComponentModified;

                if (this.Include)
                {
                    switch(childComponent.KitRequiredLevel)
                    {
                        case RORKitRequiredLevel::Mandatory :
                            childComponent.Include = NoYes::Yes;
                            childComponentModified = true;
                            break;

                        case RORKitRequiredLevel::Recommended :
                            childComponent.Include = NoYes::Yes;
                            childComponentModified = true;
                            break;
                    }

                    //In case if the price is not due to parameter settings or in the absense of rate multiplier
                    if (!this.RentalPrice)
                    {
                        childComponent.OverwriteAgreementPrice = NoYes::Yes; 
                        childComponent.setPriceDisc();
                    }
                }
                else
                {
                    childComponent.Include = NoYes::No;
                    childComponentModified = true;
                }

                if (childComponentModified)
                {
                    childComponent.includeExcludeComponents();
                    childComponent.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromInventTable</Name>
				<Source><![CDATA[
    public void initializeFromInventTable(InventTable _inventTable = this.inventTable(), RORTradeType _tradeType = this.TradeType)
    {
        RORRentalEditorLine parentLine = this.RORGetParentLine() as RORRentalEditorLine;
        InventLocationId inventLocationIdFromHeader;
        InventDim inventDim;
        BOBRentalType rentalType = _inventTable.BOBRentalType();

        this.BOBRentalTypeId = rentalType.RentalTypeId;
        this.AllowQtyEdit    = !_inventTable.BOBIsSerializedRentalItem();
    
        this.TradeType       = _inventTable.RORGetItemTradeType(this.TradeType);
    
        if (parentLine)
        {
            this.KitComponentType = (parentLine.TradeType != RORTradeType::SalesPurch && this.TradeType == RORTradeType::SalesPurch) ?
                rentalType.RORKitStandalone == RORKitStandalone::Kit ? RORKitComponentType::Kit : RORKitComponentType::Standalone :
                    RORKitComponentType::Component;
        }
    
        if (this.RefTableId == tableNum(PurchLine) && _tradeType == RORTradeType::SubRental)
        {
            this.InventLocationId = DNRWorkerDefaults::findByUserId().InventLocationId;
    
            if (!this.InventLocationId && parentLine)
            {
                this.InventLocationId = parentLine.InventLocationId;
            }
    
            if (this.InventLocationId)
            {
                this.InventSiteId = InventLocation::find(this.InventLocationId).InventSiteId;
            }
        }
        else
        {
            inventDim.InventSiteId = this.InventSiteId;
            inventDim.RORTradeType = this.TradeType;
            inventDim.initFromInventTable(_inventTable, this.RefTableId == tableNum(PurchLine) ? InventItemOrderSetupType::Purch : InventItemOrderSetupType::Sales, inventDim);
            if (inventDim.InventLocationId)
            {
                this.InventLocationId = inventDim.InventLocationId;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    public void initFromPriceDisc(
        PriceDisc_Price             _priceDisc,
        PriceDiscPolicyCheckPolicy  _checkPolicy=null,
        boolean                     _initDateFields = true)
    {
        this.RentalPrice    = _priceDisc.price();
        this.PriceUnit      = _priceDisc.priceUnit();
    
        this.setRentalGrosAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRentalLine</Name>
				<Source><![CDATA[
    public void initFromRentalLine(RORRentalLine _rentalLine, boolean _copyReference = false, boolean _copyPrecisely = false)
    {
        InventDim   inventDim;
        ;
    
        this.TradeType              = _rentalLine.TradeType;
        this.DNRCalendarId          = _rentalLine.CalendarId;
        this.CurrencyCode           = _rentalLine.CurrencyCode;
        this.CustVendAccount        = _rentalLine.CustVendAccount;
        this.HeaderId               = _rentalLine.HeaderId;
        this.INVInvoiceProfileId    = _rentalLine.INVInvoiceProfileId;
        this.INVRentalModeId        = _rentalLine.INVRentalModeId;
        this.INVRateMultiplierTier  = _rentalLine.INVRateMultiplierTier;
        this.LineAmount             = _rentalLine.LineAmount;
        this.LineType               = _rentalLine.LineType;
        this.LineDisc               = _rentalLine.LineDisc;
        this.LinePercent            = _rentalLine.LinePercent;
        this.InventTransId          = _rentalLine.InventTransId;
    
        this.IsPriceNet             = _rentalLine.IsPriceNet;
        this.IsPriceFixed           = _rentalLine.IsPriceFixed;
        this.InsuranceCalcBasis     = _rentalLine.InsuranceCalcBasis;

        this.PriceTimeUnit          = _rentalLine.PriceTimeUnit;
        this.RentalPrice            = _rentalLine.Price;
        this.RentalQty              = _rentalLine.RentQty;
        this.RentalUnit             = _rentalLine.SalesPurchUnit;
        this.AllowQtyEdit           = _rentalLine.AllowQtyEdit;
        this.BOBRentalTypeId        = _rentalLine.BOBRentalTypeId;
        this.RentalGrossAmount      = _rentalLine.RentalGrossAmount;
    
        inventDim = inventDim::find(_rentalLine.InventDimId);
        this.InventLocationId       = inventDim.InventLocationId;
        this.InventSiteId           = inventDim.InventSiteId;
        
        if (_copyReference)
        {
            this.RefTableId         = _rentalLine.TableId;
            this.RefRecId           = _rentalLine.RecId;
        }
    
        if (_copyPrecisely)
        {
            this.InventTransId      = _rentalLine.InventTransId;
            this.ItemId             = _rentalLine.ItemId;
            this.KitComponentType   = _rentalLine.KitComponentType;
            this.LineType           = _rentalLine.LineType;
            this.RentalQty          = _rentalLine.RentQty;
            this.QtyOrdered         = _rentalLine.RentQty;
            this.RentalUnit         = _rentalLine.SalesPurchUnit;
        }

        this.RORRentalLine::rentalPricesModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesPurchTable</Name>
				<Source><![CDATA[
    public void initFromSalesPurchTable(SalesPurchTable _salesPurchTable)
    {
        SalesPurchTableInterface salesPurchTableInterface = _salesPurchTable.salesPurchTableInterface();

        this.HeaderId           = salesPurchTableInterface.parmOrderId();
        this.CurrencyCode       = salesPurchTableInterface.parmCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpContractLine</Name>
				<Source><![CDATA[
    public void initFromTmpContractLine(RAGTmpContractLine _tmpContractLine)
    {
        if (this.TradeType != RORTradeType::SalesPurch && !this.InventTransId)
        {
            if (_tmpContractLine.Insurance_AddInsurance)
            {
                this.InsureRentalStops      = _tmpContractLine.Insurance_InsureHireStops;
                this.InsuranceCalcBasis     = _tmpContractLine.Insurance_CalcBasis;
                this.InsurancePercentage    = _tmpContractLine.InsurancePct_Percentage;
            }
            else
            {
                this.InsureRentalStops      = NoYes::No;
                this.InsurancePercentage    = 0;
            }
    
            if (_tmpContractLine.Transport_AddTransport)
            {
                this.TransportPrice     = _tmpContractLine.Transport_UseRentalTypePrice? _tmpContractLine.GrossPrice_Price : _tmpContractLine.Transport_Price;
            }
            else
            {
                this.TransportPrice     = 0;
            }
    
            if(_tmpContractLine.ReturnTransport_AddTransport)
            {
                this.ReturnTransportPrice = _tmpContractLine.ReturnTransport_UseRentalTypePrice ?  _tmpContractLine.GrossPrice_Price : _tmpContractLine.ReturnTransport_Price;
            }
            else
            {
                this.ReturnTransportPrice = 0;
            }
    
            if (_tmpContractLine.Warranty_AddWarranty)
            {
                this.WarrantyPrice      = _tmpContractLine.Warranty_Price;
            }
            else
            {
                this.WarrantyPrice      = 0;
            }
    
            if (!this.INVRateMultiplierTier)
            {
                // Default value for sales line is 1.00 so also here should be 1.00 by default.
                this.INVRateMultiplierTier     = 1.00;
            }
        }
        else if (this.TradeType != RORTradeType::SalesPurch)
        {
            if (_tmpContractLine.Warranty_AddWarranty)
            {
                this.WarrantyPrice      = _tmpContractLine.Warranty_Price;
            }
            else
            {
                this.WarrantyPrice      = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    void  initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        LineNum     lineNum;
        InventTable inventTable = InventTable::find(this.ItemId);
    
        this.ItemId             = _tmpSuppItem.ItemId;
        this.initializeFromInventTable();
        this.RentalQty           = _tmpSuppItem.Qty;
        this.AllowQtyEdit        = _tmpSuppItem.RORAllowQtyEdit;
    
        if (_tmpSuppItem.SuppItemFree)
        {
            this.RentalPrice     = 0.0;
            this.LinePercent    = 0.0;
            this.LineDisc       = 0.0;
        }
    
        if (_tmpSuppItem.AttachRecId)
        {
            this.LineNum            = SalesLine::findRecId(_tmpSuppItem.AttachRecId).LineNum;
            lineNum                 = this.nextLineNum();
            if (lineNum)
            {
                this.LineNum  += (lineNum - this.LineNum) / 2;
            }
            else
            {
                this.LineNum  += 1.0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super(); 

        if (!this.RefRecId)
        {
            this.createRentalDatesAndPeriod();
        }
        else
        {
            this.copyRentalDatesAndPeriod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVsetPriceMultiplier</Name>
				<Source><![CDATA[
    public void INVsetPriceMultiplier(
        TransDateTime           _fromDateTime = DateTimeUtil::minValue(),
        TransDateTime           _toDateTime = DateTimeUtil::minValue(),
        boolean                 _updatePeriods = true,
        RORRentalEditorLine     _rentalEditorLineParent = null)
    {
        this.RORRentalLine::updateCalendarPeriodsMultiplierRate(
            _rentalEditorLineParent.salesPurchLine().RORRentalDateTimesHost::rentalDateTimes(),
            FINRentalInvoiceProfile::find(this.INVInvoiceProfileId),
            this.LineType == RORLineType::Transport ? RAGAgreementType::TransportTier : RAGAgreementType::PriceTier,
            _rentalEditorLineParent,
            _updatePeriods,
            _fromDateTime,
            _toDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>INVSetTierMultiplierRateOnCreation</Name>
				<Source><![CDATA[
    public void INVSetTierMultiplierRateOnCreation()
    {
        // Code implemented in model DynarentInvoicing
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    public boolean isCategoryBased()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    public LineDiscCode itemLineDisc()
    {
        LineDiscCode ret;
    
        switch (this.RefTableId)
        {
            case  tableNum(SalesLine),
                tableNum(SalesQuotationLine):
                    ret = this.RORRentalLine::inventTable().salesLineDisc();
                break;
    
            case tableNum(PurchLine):
                ret = this.RORRentalLine::inventTable().purchLineDisc();
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kitComponentType</Name>
				<Source><![CDATA[
    public RORKitComponentType kitComponentType()
    {
        RORKitComponentType kitComponentType;
    
        if (this.KitComponentType == RORKitComponentType::KitComponent
        && !this.hasIncludedChildren())
        {
            kitComponentType = RORKitComponentType::Component;
        }
        else
        {
            kitComponentType = this.KitComponentType;
        }
    
        return kitComponentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    public LineDiscCode lineDisc()
    {
        return this.salesPurchTable().salesPurchTableInterface().DNRparmLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(RORRentalEditorLine, Include):
                // Don't allow to exclude main/origin element
                if (this.LineNum == 1)
                {
                    this.Include = true;
                }
                else
                {
                    this.modifiedIncludeComponent();
                }
                break;
    
            case fieldNum(RORRentalEditorLine, RentalQty):
                this.modifiedQty();
                break;
    
            case fieldNum(RORRentalEditorLine, RentalPrice):
                this.priceModified();
                this.LineAmount = this.salesPurchLineInterface().calcLineAmountForced();
                break;
    
            case fieldNum(RORRentalEditorLine, LinePercent),
                 fieldNum(RORRentalEditorLine, LineDisc):
                this.LineAmount = this.salesPurchLineInterface().calcLineAmountForced();
                break;
    
            case fieldNum(RORRentalEditorLine, LineAmount):
                this.modifiedLineAmount();
                break;
    
            case fieldNum(RORRentalEditorLine, RentalGrossAmount):
                this.rentalPricesModified();
                break;
    
            case fieldNum(RORRentalEditorLine, ItemId):
                this.modifiedItemId();
                break;
    
            case fieldNum(RORRentalEditorLine, IsPriceFixed):
                this.modifiedIsPriceFixed();
                break;
    
            case fieldNum(RORRentalEditorLine, DNRCalendarId):
                this.RORModifiedCalendarId();
                break;
    
            case fieldNum(RORRentalEditorLine, RentalUnit):
                this.modifiedQty();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIncludeComponent</Name>
				<Source><![CDATA[
    public server void modifiedIncludeComponent()
    {
        RORRentalEditorLine parentComponent;
    
        if (this.Include)
        {
            if (this.TradeType != RORTradeType::SalesPurch)
            {
                RAGtmpContractLine tmpContractLine = RAGContractData::getTmpContractLineFromRentalLine(this);
                this.OverwriteAgreementPrice = NoYes::Yes;
                this.initFromTmpContractLine(tmpContractLine);
                this.setPriceDisc(null, false);
            }

            if (this.ParentLineRecId)
            {
                select firstonly IsPriceFixed from parentComponent
                where parentComponent.ParmId == this.ParmId
                && parentComponent.HeaderId == this.HeaderId
                && parentComponent.RecId == this.ParentLineRecId;

                // When newly added line has parent with fixed price then it should get 100% discount to prevent changing line amount on parent.
                if (parentComponent.IsPriceFixed)
                {
                    this.IsPriceFixed = NoYes::Yes;
                    this.IsPriceNet   = NoYes::No;
                    this.LinePercent  = 100.00;
                    this.LineAmount   = this.salesPurchLineInterface().calcLineAmountForced();
                }
            }
        }

        if (!this.Include 
        && (this.KitComponentType == RORKitComponentType::Kit || this.KitComponentType == RORKitComponentType::KitComponent))
        {
            this.RentalGrossAmount = 0;
        }

        ttsbegin;

        this.includeExcludeComponents();

        if (this.Include && parentComponent && !parentComponent.Include)
        {
            parentComponent.selectForUpdate(true);
            parentComponent.Include = NoYes::Yes;
            parentComponent.doUpdate();
            parentComponent.modifiedField(fieldNum(RORRentalEditorLine, Include));
            parentComponent.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIsPriceFixed</Name>
				<Source><![CDATA[
    public server void modifiedIsPriceFixed()
    {
        FormObjectSet fos;
    
        ttsBegin;
        if (this.IsPriceFixed)
        {
            this.setFixPriceComponents();
    
            fos = FormDataUtil::getFormDataSource(this);
            if (fos)
            {
                // research(true) will crash the client in some scenarios
                fos.research();
                fos.refresh();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedItemId</Name>
				<Source><![CDATA[
    public server void modifiedItemId()
    {
        InventTable             inventTable;
        InventTableModule       inventTableModule;
        SalesTable              salesTable;
        SalesQuotationTable     salesQuotationTable;
        RORVenueTable           venueTable;
        ModuleInventPurchSales  module;
        Qty                     standardQty;
    
        switch (this.RefTableId)
        {
            case tableNum(SalesLine):
                module = ModuleInventPurchSales::Sales;
                break;
    
            case tableNum(SalesQuotationLine):
                module = ModuleInventPurchSales::Sales;
                break;
    
            case tableNum(PurchLine):
                module = ModuleInventPurchSales::Purch;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        select firstonly inventTable
        where inventTable.ItemId == this.ItemId
            join  UnitId from inventTableModule
            where inventTableModule.ItemId == inventTable.ItemId
            &&    inventTableModule.ModuleType == module;
    
        if (inventTable.RORBasePriceOnDistance)
        {
            if (this.RefTableId == tableNum(SalesLine))
            {
                select firstonly TransportDistanceQty, TransportDistanceUnit from venueTable
                    exists join salesTable
                    where salesTable.RORVenueCode == venueTable.VenueCode
                    &&    salesTable.SalesId      == this.HeaderId;
            }
            else if (this.RefTableId == tableNum(SalesQuotationLine))
            {
                select firstonly TransportDistanceQty, TransportDistanceUnit from venueTable
                    exists join salesQuotationTable
                    where salesQuotationTable.RORVenueCode == venueTable.VenueCode
                    &&    salesQuotationTable.QuotationId      == this.HeaderId;
            }
        }
    
        if (venueTable.TransportDistanceQty)
        {
            this.RentalQty  = venueTable.TransportDistanceQty;
            this.RentalUnit = UnitOfMeasure::find(venueTable.TransportDistanceUnit).Symbol;
        }
        else
        {
            this.RentalUnit = inventTableModule.UnitId;
    
            switch (module)
            {
                case ModuleInventPurchSales::Sales:
                    standardQty = inventTable.salesStandardQty();
                    break;
    
                case ModuleInventPurchSales::Purch:
                    standardQty = inventTable.purchStandardQty();
                    break;
    
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
    
            this.RentalQty = (standardQty ? standardQty : 1);
        }

        RORRentalEditorLine   parentRentalLine;

        select RentalQty from parentRentalLine
            where parentRentalLine.RecId == this.ParentLineRecId;

        if(parentRentalLine.RentalQty)
        {
            this.RentalQty = this.RentalQty * parentRentalLine.RentalQty;
        }
    
        this.initializeFromInventTable(inventTable);
    
        this.setPriceDisc();
        this.priceModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedLineAmount</Name>
				<Source><![CDATA[
    public void modifiedLineAmount()
    {
        this.RentalPrice    = 0;
        this.LineDisc       = 0;
        this.LinePercent    = 0;
        this.Markup         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedPriceTimeUnit</Name>
				<Source><![CDATA[
    public void modifiedPriceTimeUnit()
    {
        Factor  factor = UnitOfMeasureConverter::convert(1, this.PriceTimeUnit, this.orig().PriceTimeUnit, NoYes::No);
        ;
    
        this.RentalPrice = this.RentalPrice * factor;
        this.RentalGrossAmount = this.RentalGrossAmount * factor;
        this.RORRentalLine::modifiedGrossAmount();

        this.ReasonText = strFmt("@DNR:ChangedValueFromTo", 
                                 "@DNR44",
                                 UnitOfMeasure::find(this.orig().PriceTimeUnit).symbol,
                                 UnitOfMeasure::find(this.PriceTimeUnit).symbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedQty</Name>
				<Source><![CDATA[
    public server void modifiedQty()
    {
        this.OverwriteAgreementPrice = NoYes::Yes;
        this.setPriceDisc();
    
        // If the quantity is changed, set 'Include' to 'Yes' for the relevant line and it's child lines.
        if(!this.Include
        && (this.LineType == RORLineType::Normal))
        {
            this.Include = NoYes::Yes;
            this.modifiedIncludeComponent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales moduleType()
    {
        ModuleInventPurchSales ret;
    
        switch(this.RefTableId)
        {
            case tableNum(SalesLine),
                 tableNum(SalesQuotationLine):
                ret = ModuleInventPurchSales::Sales;
                break;
    
            case tableNum(PurchLine):
                ret = ModuleInventPurchSales::Purch;
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    server LineNum nextLineNum()
    {
        RORRentalEditorLine rentalEditorLine;
    
        select firstonly LineNum
            from rentalEditorLine
            order by LineNum
            where rentalEditorLine.ParmId == this.ParmId
            && rentalEditorLine.HeaderId == this.HeaderId
            && rentalEditorLine.LineNum     >  this.LineNum;
    
        return rentalEditorLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    public CustVendAC orderAccount()
    {
        return this.CustVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId priceGroupId()
    {
        return this.salesPurchTable().salesPurchTableInterface().DNRparmPriceGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceModified</Name>
				<Source><![CDATA[
    public void priceModified()
    {
        this.RORRentalLine::priceModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdExchanged</Name>
				<Source><![CDATA[
    public RecId recIdExchanged()
    {
        RecId       ret;
        SalesLine   salesLine;
    
        switch (this.RefTableId)
        {
            case tableNum(SalesLine):
                salesLine = this.salesPurchLine();
                ret = salesLine.RORRecIdExchanged;
                break;
    
            default:
                ret = 0;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalContractElementsChanged</Name>
				<Source><![CDATA[
    public boolean rentalContractElementsChanged()
    {
        RORRentalEditorLine orig = this.orig();
    
        return (this.InsuranceCalcBasis     != orig.InsuranceCalcBasis
             || this.InsurancePercentage    != orig.InsurancePercentage
             || this.InsureRentalStops      != orig.InsureRentalStops
             || this.TransportPrice         != orig.TransportPrice
             || this.ReturnTransportPrice   != orig.ReturnTransportPrice
             || this.WarrantyPrice          != orig.WarrantyPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalPricesModified</Name>
				<Source><![CDATA[
    public void rentalPricesModified()
    {
        this.RORRentalLine::rentalPricesModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCreateExtraLine</Name>
				<Source><![CDATA[
    public RORRentalLine RORCreateExtraLine(RORTradeType _tradeType, RORKitComponentType _kitComponentType, ItemId _itemId, LineNum _highestLineNum)
    {
        RORRentalEditorLine     rentalEditorLine;
        RORRentalEditorLine     rentalEditorLineNextLineNum;
        InventDim               inventDim;
        RORLineType             lineType;
        RAGParameters           ragParameters = RAGParameters::find();

        switch (_itemId)
        {
            case ragParameters.ItemIdInsurance :
                lineType = RORLineType::Insurance;
                break;
            case ragParameters.ItemIdReturnTransport :
                lineType = RORLineType::Transport;
                break;
            case ragParameters.ItemIdTransport :
                lineType = RORLineType::Transport;
                break;
            case ragParameters.ItemIdWarranty :
                lineType = RORLineType::Warranty;
                break;
            default :
                lineType = RORLineType::Normal;
                break;
        }
    
        select firstonly LineNum from rentalEditorLineNextLineNum
        order by LineNum desc
        where rentalEditorLineNextLineNum.ParmId == this.ParmId
        &&    rentalEditorLineNextLineNum.HeaderId == this.HeaderId
        &&    rentalEditorLineNextLineNum.MainKitReference == this.MainKitReference
        &&    rentalEditorLineNextLineNum.LineType != RORLineType::Normal;
    
        rentalEditorLine.initValue();
        rentalEditorLine.RefTableId             = this.RefTableId;
        rentalEditorLine.ParmId                 = this.ParmId;
        rentalEditorLine.initFromSalesPurchTable(this.salesPurchTable());
        rentalEditorLine.HeaderId               = rentalEditorLine.HeaderId;
        rentalEditorLine.InventSiteId           = this.InventSiteId;
        rentalEditorLine.TradeType              = _tradeType;
        rentalEditorLine.ItemId                 = _itemId;
        rentalEditorLine.modifiedItemId();
    
        rentalEditorLine.ParentLineRecId        = this.RecId;
        rentalEditorLine.MainKitReference       = this.MainKitReference;
        rentalEditorLine.KitLevel               = this.KitLevel + 1;
        rentalEditorLine.KitRequiredLevel       = RORKitRequiredLevel::Recommended;
        rentalEditorLine.LineType               = lineType;
        rentalEditorLine.KitComponentType       = _kitComponentType;

        if(lineType == RORLineType::Warranty)
        {
            rentalEditorLine.QtyOrdered = this.QtyOrdered * rentalEditorLine.QtyOrdered;
            rentalEditorLine.RentalQty = this.RentalQty * rentalEditorLine.RentalQty;
        }
    
        if (this.salesPurchTable().TableId == tableNum(PurchTable) && rentalEditorLine.TradeType != RORTradeType::SalesPurch)
        {
            if (RORParameters::find().SubRentalWarehouse)
            {
                rentalEditorLine.InventLocationId = RORParameters::find().SubRentalWarehouse;
            }
            else
            if (this.InventLocationId)
            {
                rentalEditorLine.InventLocationId = this.InventLocationId;
            }
        }
    
        if (!rentalEditorLine.InventLocationId)
        {
            rentalEditorLine.InventLocationId = this.salesPurchTable().salesPurchTableInterface().DNRparmInventLocationId();
        }
    
        if (rentalEditorLine.InventLocationId)
        {
            rentalEditorLine.InventSiteId = InventLocation::find(rentalEditorLine.InventLocationId).InventSiteId;
        }
    
        inventDim.InventLocationId = rentalEditorLine.InventLocationId;
        inventDim.InventSiteId = rentalEditorLine.InventSiteId;
        inventDim = InventDim::findOrCreate(inventDim);
    
        rentalEditorLine.setPriceDisc(inventDim);
        // Can reset some pricing elements
        rentalEditorLine.RORRentalLine::initFromParent(this);
    
        rentalEditorLine.Include                = NoYes::Yes;

        if (rentalEditorLine.TradeType != RORTradeType::SalesPurch)
        {
            rentalEditorLine.rentalPricesModified();
        }
    
        rentalEditorLine.LineNum = rentalEditorLine.RORRentalLine::getNextLineNum(rentalEditorLineNextLineNum.LineNum ? rentalEditorLineNextLineNum.LineNum : this.lineNum);
    
        if (lineType == RORLineType::Insurance)
        {
            rentalEditorLine.INVsetPriceMultiplier(DateTimeUtil::minValue(), DateTimeUtil::minValue(), false, this);
        }
        else if (lineType != RORLineType::Normal)
        {
            rentalEditorLine.INVRateMultiplierTier = 1;
        }
    
        rentalEditorLine.IsPriceCalculated = true;

        rentalEditorLine.insert();
    
        return rentalEditorLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORdisplayLineStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROrderLineStatus RORdisplayLineStatus()
    {
        return this.salesPurchLine().RORdisplayLineStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORGetParentLine</Name>
				<Source><![CDATA[
    public RORRentalLine RORGetParentLine(boolean _forUpdate = false)
    {
        return this.ParentLineRecId ? RORRentalEditorLine::findRecId(this.ParentLineRecId, _forUpdate) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORLineBuffer</Name>
				<Source><![CDATA[
    public RORRentalEditorLine RORLineBuffer()
    {
        RORRentalEditorLine rentalEditorLine;
    
        return rentalEditorLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORModifiedCalendarId</Name>
				<Source><![CDATA[
    public void RORModifiedCalendarId()
    {
        this.RORRentalLine::RORModifiedCalendarId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORRentalDateTimes</Name>
				<Source><![CDATA[
    public RORRentalDateTimes RORRentalDateTimes(boolean _forUpdate = false)
    {
        return RORRentalDateTimes::findReference(this.TableId, this.RecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORTimeZoneSite</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display Timezone RORTimeZoneSite()
    {
        SalesPurchLine  salesPurchLine = this.salesPurchLine();
    
        return salesPurchLine ? salesPurchLine.RORRentalLine::timeZoneSite() : DateTimeUtil::getUserPreferredTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    public SalesPurchLine salesPurchLine()
    {
        salesPurchLine ret;
    
        switch (this.RefTableId)
        {
            case  tableNum(SalesLine) :
                ret = SalesLine::findRecId(this.RefRecId);
                break;
    
            case  tableNum(SalesQuotationLine) :
                ret = SalesQuotationLine::findRecId(this.RefRecId);
                break;
    
            case tableNum(PurchLine):
                ret = PurchLine::findRecId(this.RefRecId);
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    public SalesPurchTable salesPurchTable()
    {
        salesPurchTable ret;
    
        switch (this.RefTableId)
        {
            case  tableNum(SalesLine) :
                ret = SalesTable::find(this.HeaderId);
                break;
    
            case  tableNum(SalesQuotationLine) :
                ret = SalesQuotationTable::find(this.HeaderId);
                break;
    
            case tableNum(PurchLine):
                ret = PurchTable::find(this.HeaderId);
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFixPriceComponents</Name>
				<Source><![CDATA[
    private void setFixPriceComponents()
    {
        RORRentalEditorLine parentComponents;
        RORRentalEditorLine childComponents;
        Set                 recIdSet = new Set(Types::Int64);
    
        while select forupdate parentComponents
        where parentComponents.ParmId == this.ParmId
        && parentComponents.HeaderId == this.HeaderId
        && parentComponents.MainKitReference == this.MainKitReference
        && parentComponents.ParentLineRecId == this.RecId
        && parentComponents.Include == this.orig().Include
            outer join childComponents
            where childComponents.ParmId == this.ParmId
            && childComponents.HeaderId == this.HeaderId
            && childComponents.MainKitReference == this.MainKitReference
            && childComponents.ParentLineRecId == parentComponents.RecId
            && childComponents.Include == parentComponents.Include
        {
            if (recIdSet.in(parentComponents.RecId))
            {
                continue;
            }
    
            parentComponents.IsPriceFixed = this.IsPriceFixed;
    
            if (childComponents)
            {
                parentComponents.setFixPriceComponents();
            }
    
            parentComponents.update();
    
            recIdSet.add(parentComponents.RecId);
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to the RORRentalLine map', true)]
    public server void setPriceAgreement(InventDim _inventDim)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    public void setPriceDisc(InventDim  _inventDim = null, boolean _mustThrowWarningOnNoGrossPriceFound = true)
    {
        InventDim   inventDim = _inventDim;
    
        // Fetch prices from contract only during creation, or when some crucial fields like CustAccount changes
        // (but in that case the code will be triggered from a different place)
        if (this.TradeType != RORTradeType::SalesPurch)
        {
            if(RAGUtil::mustApplyRentalAgreements(this.BOBRentalTypeId))
            {
                this.RORRentalLine::RAGSetContractInfo(this.OverwriteAgreementPrice, _mustThrowWarningOnNoGrossPriceFound);
            }
            else if (this.LineType == RORLineType::Insurance)
            {
                this.RORRentalLine::RAGSetContractInfoFromParent();
            }
    
            this.PriceUnit = InventTableModule::find(this.ItemId, this.RefTableId == tableNum(PurchLine) ? ModuleInventPurchSales::Purch : ModuleInventPurchSales::Sales).getPriceUnit();
        }
        else
        {
            if (!inventDim)
            {
                inventDim.InventLocationId = this.InventLocationId;
                inventDim.InventSiteId = this.InventSiteId;
                inventDim = InventDim::findOrCreate(inventDim);
            }
    
            if (!this.RecId || this.RentalUnit != this.orig().RentalUnit)
            {
                // Don't fetch prices from agreement after creation
                this.salesPurchLineInterface().setPriceAgreement(inventDim);
                this.RentalGrossAmount = (this.RentalPrice * this.RentalQty);
            }
    
            if (this.TradeType != RORTradeType::SalesPurch || this.RentalQty != this.orig().RentalQty)
            {
                this.RentalGrossAmount = (this.RentalPrice * this.RentalQty);
            }
    
            this.LineAmount = this.salesPurchLineInterface().calcLineAmountForced();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRentalGrosAmount</Name>
				<Source><![CDATA[
    public void setRentalGrosAmount()
    {
        if (this.TradeType == RORTradeType::SalesPurch)
        {
            this.RentalGrossAmount = (this.RentalPrice * this.RentalQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    public TransDate taxDate(TransDate _transDate)
    {
        return _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
    
        switch (_fieldIdToCheck)
        {
            case fieldNum(RORRentalEditorLine, ItemId) :
                ret = ret && this.checkIsContractItem();
                break;
    
            case fieldNum(RORRentalEditorLine, Include) :
                if (!this.Include && this.canStatusBeIncluded())
                {
                    ret = checkFailed(strFmt("@DNR6886", this.RORdisplayLineStatus()));

                    this.Include = this.orig().Include;
                }
                break;
            
            case fieldNum(RORRentalEditorLine, INVInvoiceProfileId) :
                RORRentalEditorHeader rentalEditorHeader = this.rentalEditorHeader();
                if (rentalEditorHeader.EffectiveDateTimeFrom || rentalEditorHeader.EffectiveDateTimeTo)
                {
                    ret = checkFailed("@DNR:ErrorChangingInvoiceProfileWithDateEffectivity");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static RORRentalEditorLine findRecId(
        RecId       _recId,
        boolean     _update = false)
    {
        RORRentalEditorLine rentalEditorLine;
    
        if(_recId)
        {
            if (_update)
            {
                rentalEditorLine.selectForUpdate(_update);
            }
    
            select firstonly rentalEditorLine
                where rentalEditorLine.RecId == _recId;
        }
    
        return rentalEditorLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalLine2editorLine</Name>
				<Source><![CDATA[
    public static RORRentalEditorLine rentalLine2editorLine(RORRentalLine _rentalLine)
    {
        Common common = _rentalLine;
        RORRentalEditorLine editorLine = common as RORRentalEditorLine;
    
        return editorLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORgetLineNumContainer</Name>
				<Source><![CDATA[
    public container RORgetLineNumContainer(LineNum _lineNumCurrent, boolean _lineTypeNormal = true)
    {
        RORRentalEditorLine rentalEditorLine;

        select LineNum from rentalEditorLine
        order by LineNum
        where rentalEditorLine.ParmId == this.ParmId
        &&    rentalEditorLine.HeaderId == this.HeaderId
        &&    rentalEditorLine.LineNum > _lineNumCurrent;

        return [ rentalEditorLine.LineNum, 0.0, 0.0 ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLineTypeImage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display container displayLineTypeImage()
    {
        ImageReference imageReference;
        container imageContainer;
        RAGParameters   parameters;
               
        imageContainer = this.RORRentalLine::displayLineTypeImage();
        
        if (imageReference)
        {
            imageContainer = imageReference.pack();
        }

        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInsurancePctModified</Name>
				<Source><![CDATA[
    public void RORInsurancePctModified()
    {
        // actual code in Dynarent model (post event)
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORInsuranceAmountModified</Name>
				<Source><![CDATA[
    public void RORInsuranceAmountModified()
    {
        // actual code in Dynarent model (post event)
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeType</Name>
				<Source><![CDATA[
    public RORAmendmentExchangeType exchangeType()
    {
        RORAmendmentExchangeType       ret;
        SalesLine   salesLine;
    
        switch (this.RefTableId)
        {
            case tableNum(SalesLine):
                salesLine = this.salesPurchLine();
                ret = salesLine.RORAmendmentExchangeType;
                break;
    
            default:
                ret = RORAmendmentExchangeType::None;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalEditorHeader</Name>
				<Source><![CDATA[
    public RORRentalEditorHeader rentalEditorHeader(boolean _forUpdate = false)
    {
        RORRentalEditorHeader rentalEditorHeader;

        if (this.ParmId && this.MainKitReference && this.RefTableId)
        {
            if (_forUpdate)
            {
                rentalEditorHeader.selectForUpdate(_forUpdate);
            }

            select firstonly rentalEditorHeader
            where rentalEditorHeader.ParmId == this.ParmId
            &&    rentalEditorHeader.RefRecId == this.MainKitReference
            &&    rentalEditorHeader.RefTableId == this.RefTableId;
        }

        return rentalEditorHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBRentalTypeId</Name>
				<Source><![CDATA[
    public BOBRentalTypeId BOBRentalTypeId()
    {
        return this.BOBRentalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.INVSetTierMultiplierRateOnCreation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR7414</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>HeaderId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowQtyEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOBRentalTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HeaderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Include</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceCalcBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsurancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsureRentalStops</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVInvoiceProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRateMultiplierTier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRentalModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceNet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitComponentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitRequiredLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainKitReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceTimeUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalGrossAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnTransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuppItemTableRecid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TradeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WasPreviouslyIncluded</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnTransportDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportPriceDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RentalPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalGrossAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editNetAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryDimensions</Name>
			<Label>@SYS53630</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoicing</Name>
			<Label>@SYS5779</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>INVInvoiceProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRateMultiplierTier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRentalModeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOBRentalTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Kit</Name>
			<Label>@DNR253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Include</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitRequiredLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowQtyEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HeaderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitComponentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainKitReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuppItemTableRecid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TradeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WasPreviouslyIncluded</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DNRCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVInvoiceProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitRequiredLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalGrossAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editNetAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editLineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Include</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceNet</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RentalGrossAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceNet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editNetAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCurrentNetAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceTimeUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRentalModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRateMultiplierTier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceCalculated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@SYS3065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RentalQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RentalContract</Name>
			<Label>@DNR6447</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InsurancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsureRentalStops</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceCalcBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnTransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Pricing</Name>
			<Label>@DNR:RentalPricing</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RentalGrossAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editNetAmount</DataField>
				</AxTableFieldGroupField>				
				<AxTableFieldGroupField>
					<DataField>IsPriceNet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPriceFixed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneralInfo</Name>
			<Label>@DNR5038</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RORdisplayLineStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TradeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KitComponentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>INVInvoicing</Name>
			<Label>@DNR867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>INVInvoiceProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceTimeUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRentalModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INVRateMultiplierTier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOBRentalType</Name>
			<Label>@DNR4420</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOBRentalTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS86426</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowQtyEdit</Name>
			<ExtendedDataType>RORAllowQtyEdit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOBRentalTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>BOBRentalTypeId</ExtendedDataType>
			<Label>@DNR6214</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<ConfigurationKey>DNRDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RORCalendarId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<HelpText>@SYS6734</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HeaderId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORRentalEditorHeaderId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Include</Name>
			<HelpText>@SYS69436</HelpText>
			<Label>@SYS28109</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InsuranceCalcBasis</Name>
			<EnumType>RORInsuranceCalcBasis</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InsurancePercentage</Name>
			<ExtendedDataType>RORInsurancePercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InsureRentalStops</Name>
			<ExtendedDataType>RORInsureRentalStops</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>INVInvoiceProfileId</Name>
			<ExtendedDataType>INVInvoiceProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>INVRateMultiplierTier</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>INVRateMultiplierTier</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>INVRentalModeId</Name>
			<ExtendedDataType>INVRentalModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPriceFixed</Name>
			<ExtendedDataType>RORIsPriceFixed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPriceNet</Name>
			<ExtendedDataType>RORIsPriceNet</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KitComponentType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RORKitComponentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>KitLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Level</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KitRequiredLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RORKitRequiredLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<ExtendedDataType>LineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<HelpText>@SYS4691</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RORLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainKitReference</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualCreated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Markup</Name>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
			<HelpText>@SYS16916</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORLineParent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PriceTimeUnit</Name>
			<ExtendedDataType>RORPriceTimeUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
			<HelpText>@SYS3472</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyOrdered</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<HelpText>@SYS8090</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RentalGrossAmount</Name>
			<ExtendedDataType>RORRentalGrossAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RentalPrice</Name>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<HelpText>@SYS1174</HelpText>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RentalQty</Name>
			<ExtendedDataType>SalesOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalUnit</Name>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReturnTransportPrice</Name>
			<ExtendedDataType>RAGTransportPrice</ExtendedDataType>
			<Label>@DNR7324</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SuppItemTableRecid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SuppItemTableRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TradeType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RORTradeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransportPrice</Name>
			<ExtendedDataType>RAGTransportPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WarrantyPrice</Name>
			<ExtendedDataType>RAGWarrantyPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WasPreviouslyIncluded</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7415</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DNRCalendarId</Name>
			<ExtendedDataType>RORCalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReturnTransportDisc</Name>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransportPriceDisc</Name>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonText</Name>
			<ExtendedDataType>RORAmendmentReasonText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VisibleLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORLineParent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RORRecIdExchanged</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RORRecIdExchanged</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RORAmendmentExchangeType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RORAmendmentExchangeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ParentLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@DNR10221</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverwriteAgreementPrice</Name>
			<SaveContents>No</SaveContents>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPriceCalculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@DNR:IsPriceCalculated</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HeaderIdLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HeaderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>INVInvoicePeriodHost</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CalendarId</MapField>
					<MapFieldTo>DNRCalendarId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeaderId</MapField>
					<MapFieldTo>HeaderId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceProfileId</MapField>
					<MapFieldTo>INVInvoiceProfileId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsModified</MapField>
					<MapFieldTo>Include</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPriceFixed</MapField>
					<MapFieldTo>IsPriceFixed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>KitComponentType</MapField>
					<MapFieldTo>KitComponentType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>RentalPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceTimeUnit</MapField>
					<MapFieldTo>PriceTimeUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RateMultiplierTier</MapField>
					<MapFieldTo>INVRateMultiplierTier</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentalModeId</MapField>
					<MapFieldTo>INVRentalModeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentQty</MapField>
					<MapFieldTo>RentalQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TradeType</MapField>
					<MapFieldTo>TradeType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>RORRentalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AllowQtyEdit</MapField>
					<MapFieldTo>AllowQtyEdit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmendmentExchangeType</MapField>
					<MapFieldTo>RORAmendmentExchangeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOBRentalTypeId</MapField>
					<MapFieldTo>BOBRentalTypeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalendarId</MapField>
					<MapFieldTo>DNRCalendarId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAccount</MapField>
					<MapFieldTo>CustVendAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeaderId</MapField>
					<MapFieldTo>HeaderId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InsuranceCalcBasis</MapField>
					<MapFieldTo>InsuranceCalcBasis</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>INVInvoiceProfileId</MapField>
					<MapFieldTo>INVInvoiceProfileId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>INVRateMultiplierTier</MapField>
					<MapFieldTo>INVRateMultiplierTier</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>INVRentalModeId</MapField>
					<MapFieldTo>INVRentalModeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPriceFixed</MapField>
					<MapFieldTo>IsPriceFixed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPriceNet</MapField>
					<MapFieldTo>IsPriceNet</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>KitComponentType</MapField>
					<MapFieldTo>KitComponentType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineType</MapField>
					<MapFieldTo>LineType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentLineRecId</MapField>
					<MapFieldTo>ParentLineRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>RentalPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceTimeUnit</MapField>
					<MapFieldTo>PriceTimeUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecIdExchanged</MapField>
					<MapFieldTo>RORRecIdExchanged</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentalGrossAmount</MapField>
					<MapFieldTo>RentalGrossAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RentQty</MapField>
					<MapFieldTo>RentalQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>RentalUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SuppItemTableRecid</MapField>
					<MapFieldTo>SuppItemTableRecid</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TradeType</MapField>
					<MapFieldTo>TradeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WPPWorkOrderTemplateId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>CustVendAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>RentalPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
					<MapFieldTo>RentalUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
					<MapFieldTo>QtyOrdered</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>HeaderId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>RentalQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>INVRentalMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>INVRentalMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>INVRentalModeId</Name>
					<Field>INVRentalModeId</Field>
					<RelatedField>RentalModeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RentalModeIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RentalEditorLineParent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RORRentalEditorLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentLineRecId</Name>
					<Field>ParentLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RORRentalEditorHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RORRentalEditorHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainKitReference</Name>
					<Field>MainKitReference</Field>
					<RelatedField>RefRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>RefTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SuppItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SuppItemTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SuppItemTableRecid</Name>
					<Field>SuppItemTableRecid</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SuppItemTableIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>UnitOfMeasureClass</Name>
					<RelatedField>UnitOfMeasureClass</RelatedField>
					<ValueStr>UnitOfMeasureClass::Time</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceTimeUnit</Name>
					<Field>PriceTimeUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DNRCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DNRCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DNRCalendarId</Name>
					<SourceEDT>RORCalendarId</SourceEDT>
					<Field>DNRCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId1</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationLine</Name>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId1</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FINRentalInvoiceProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>FINRentalInvoiceProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>INVInvoiceProfileId</Name>
					<SourceEDT>INVInvoiceProfileId</SourceEDT>
					<Field>INVInvoiceProfileId</Field>
					<RelatedField>InvoiceProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RORExchangedLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RORRentalEditorLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RORExchangedLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RORRecIdExchanged</Name>
					<Field>RORRecIdExchanged</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>