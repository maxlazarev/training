<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCalendarDateLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRCalendarDateLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capacity</Name>
				<Source><![CDATA[
    public CapacityValue capacity(Percent _effectivity  = 100, boolean _useEffectivity = true)
    {
        if (!_useEffectivity)
        {
            return  (this.ToTime - this.FromTime);
        }

        if (this.Effectivity)
        {
            return  (this.ToTime - this.FromTime) * this.Effectivity / 100 * _effectivity / 100;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkCalendarDate</Name>
				<Source><![CDATA[
    void initFromWorkCalendarDate(DNRCalendarDate  _workCalendarDate)
    {
        this.CalendarId         = _workCalendarDate.CalendarId;
        this.TransDate          = _workCalendarDate.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkTimeLine</Name>
				<Source><![CDATA[
    void initFromWorkTimeLine(WorkTimeLine  _workTimeLine)
    {
        this.FromTime           = _workTimeLine.FromTime;
        this.ToTime             = _workTimeLine.ToTime;
        this.Effectivity        = _workTimeLine.Effectivity;
        this.PropertyId         = _workTimeLine.PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.Effectivity = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCalendarLine</Name>
				<Source><![CDATA[
    public static DNRCalendarDateLine findCalendarLine(DNRCalendarId    _calendarId,
                                                       TransDate        _transDate,
                                                       boolean          _reverse   = false,
                                                       boolean          _forUpdate = false)
    {
        DNRCalendarDateLine        workCalendarDateLine;

        if(_calendarId && _transDate)
        {
            workCalendarDateLine.selectForUpdate(_forUpdate);

            if(_reverse)
            {
                select reverse firstonly workCalendarDateLine
                where workCalendarDateLine.CalendarId == _calendarId
                &&    workCalendarDateLine.TransDate  == _transDate;
            }
            else
            {
                select firstonly workCalendarDateLine
                where workCalendarDateLine.CalendarId == _calendarId
                &&    workCalendarDateLine.TransDate  == _transDate;
            }
        }

        return workCalendarDateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public server boolean validateWrite()
    {
        boolean         ret;

        ret = super();

        if(!this.checkCalendareDateLine())
        return false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalendareDateLine</Name>
				<Source><![CDATA[
    private boolean checkCalendareDateLine()
    {
        WorkTimeCheck           workTimeCheck = new WorkTimeCheck(this.FromTime, this.ToTime, this.Effectivity);
        DNRCalendarDateLine     workCalendarDateLine;

        if (!workTimeCheck.checkRecord())
        return false;

        while select FromTime, ToTime from workCalendarDateLine
        index hint CalendarDateFromIdx
        where workCalendarDateLine.CalendarId      == this.CalendarId  
        &&    workCalendarDateLine.TransDate       == this.TransDate   
        &&    workCalendarDateLine.RecId           != this.RecId
        {
            if(!workTimeCheck.checkNotOverlapping(workCalendarDateLine.FromTime, workCalendarDateLine.ToTime))
            return false;
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORFindCalendarLine</Name>
				<Source><![CDATA[
    public static DNRCalendarDateLine RORFindCalendarLine(DNRCalendarId _calendarId,
                                                          TransDate     _transDate,
                                                          boolean       _reverse   = false,
                                                          boolean       _forUpdate = false)
    {
        DNRCalendarDateLine        workCalendarDateLine;
    
        if (_calendarId && _transDate)
        {
            workCalendarDateLine.selectForUpdate(_forUpdate);
    
            if (_reverse)
            {
                select reverse firstonly workCalendarDateLine
                where workCalendarDateLine.CalendarId == _calendarId
                && workCalendarDateLine.TransDate  == _transDate;
            }
            else
            {
                select firstonly workCalendarDateLine
                where workCalendarDateLine.CalendarId == _calendarId
                && workCalendarDateLine.TransDate  == _transDate;
            }
        }
    
        return workCalendarDateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushWorkCalendarDateCache</Name>
				<Source><![CDATA[
    public void flushWorkCalendarDateCache(DNRCalendarId _calendarId, TransDate  _transDate)
    {
        SysGlobalCache          cache   = appl.globalCache();
        str                     cacheKey;

        cacheKey = DNRCalendarDate::getCalcDefinedHoursCacheKey(_calendarId, _transDate, true);
        cache.remove(tableStr(DNRCalendarDate), cacheKey);

        cacheKey = DNRCalendarDate::getCalcDefinedHoursCacheKey(_calendarId, _transDate, false);
        cache.remove(tableStr(DNRCalendarDate), cacheKey);

        DNRWorkingTimes::invalidateGlobalCacheScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.flushWorkCalendarDateCache(this.CalendarId, this.TransDate);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.flushWorkCalendarDateCache(this.CalendarId, this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if ((this.orig().CalendarId != this.CalendarId) || (this.orig().TransDate != this.TransDate))
        {
            this.flushWorkCalendarDateCache(this.orig().CalendarId, this.orig().TransDate);
        }

        super();

        this.flushWorkCalendarDateCache(this.CalendarId, this.TransDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS11965</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>FromTime</TitleField1>
	<TitleField2>ToTime</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CalendarDateFromIdx</ClusteredIndex>
	<PrimaryIndex>CalendarDateFromIdx</PrimaryIndex>
	<ReplacementKey>CalendarDateFromIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DNRCalendarId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@SYS27939</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Effectivity</Name>
			<ExtendedDataType>EffectivityPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<ExtendedDataType>FromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<ExtendedDataType>PropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<ExtendedDataType>ToTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CalendarDateFromIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CalendarId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DNRCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CalendarDate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DNRCalendarDate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PropertyId</Name>
					<Field>PropertyId</Field>
					<RelatedField>PropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>