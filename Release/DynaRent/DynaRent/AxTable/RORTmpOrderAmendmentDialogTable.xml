<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORTmpOrderAmendmentDialogTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RORTmpOrderAmendmentDialogTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyDateTimeOffset</Name>
				<Source><![CDATA[
    private void applyDateTimeOffset(
        FieldId         _fieldId,
        TransDate       _baseDate,
        int             _dateOffset,
        RORDateUnit     _dateUnit,
        boolean         _applyDateOffset,
        TimeOfDay       _baseTime,
        int             _timeOffset,
        RORTimeUnit     _timeUnit,
        boolean         _applyTimeOffset,
        boolean         _hasSystemTime = false)
    {
        utcDateTime dateTime = this.(_fieldId);
        TransDate   rentDate = DateTimeUtil::date(this.(_fieldId));
        int         timeZoneDifference = (DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()))
                        - DateTimeUtil::time(DateTimeUtil::getSystemDateTime()));
        TimeOfDay   rentTime = DateTimeUtil::time(this.(_fieldId)) + timeZoneDifference;
    
        if (_applyDateOffset)
        {
            rentDate = RORRentalDateTimes::applyDateOffset(_baseDate, _dateOffset, _dateUnit);
        }
    
        if (_applyTimeOffset)
        {
            rentTime = RORRentalDateTimes::applyTimeOffset(_baseTime, _timeOffset, _timeUnit);
        }
    
        if (!rentDate && _hasSystemTime)
        {
            rentTime = rentTime + timeZoneDifference;
        }
    
        this.(_fieldId) = _hasSystemTime ? DateTimeUtil::newDateTime(rentDate, rentTime) : DateTimeUtil::newDateTime(rentDate, rentTime, DateTimeUtil::getUserPreferredTimeZone());
    
        this.modifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalendarId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display public RORCalendarId displayCalendarId()
    {
        return this.getRentalLine().CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLineDisc</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display public SalesLineDisc displayLineDisc()
    {
        return this.getRentalLine().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLinePercent</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display public SalesLinePercent displayLinePercent()
    {
        return this.getRentalLine().LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRentalModeId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display public INVRentalModeId displayRentalModeId()
    {
        return this.getRentalLine().INVRentalModeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRentPrice</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display public SalesPrice displayRentPrice()
    {
        return this.getRentalLine().Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalDateTimeWithTimeZone</Name>
				<Source><![CDATA[
    private container getRentalDateTimeWithTimeZone()
    {
        RORRentalDateTimes  rentalDateTimes;
        TimeZone            timeZone;
    
        switch (this.RefTableId)
        {
            case tableNum(PurchLine):
                PurchLine purchLine = PurchLine::findRecId(this.RefRecId);

                rentalDateTimes = purchLine.RORRentalDateTimesHost::rentalDateTimes();

                timeZone = purchLine.RORRentalLine::FINTimeZoneOrder();

                break;

            case tableNum(SalesLine):
                SalesLine salesLine = SalesLine::findRecId(this.RefRecId);

                rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();

                timeZone = salesLine.RORRentalLine::FINTimeZoneOrder();

                break;
        }

        return [rentalDateTimes, timeZone];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRentalLine</Name>
				<Source><![CDATA[
    private RORRentalLine getRentalLine()
    {
        RORRentalLine           rentalLine;
    
        switch (this.RefTableId)
        {
            case tableNum(PurchLine):
                rentalLine = PurchLine::findRecId(this.RefRecId);
                break;
    
            case tableNum(SalesLine):
                rentalLine = SalesLine::findRecId(this.RefRecId);
                break;
        }
    
        return rentalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.TransportDiscPct = 100;
        this.ReturnTransportDiscPct = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(RORTmpOrderAmendmentDialogTable, OffRentDateTime),
                 fieldNum(RORTmpOrderAmendmentDialogTable, RequestedPickupDateTime):
                this.synchronizeDates(_fieldId);
                break;
    
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeDates</Name>
				<Source><![CDATA[
    public void synchronizeDates(FieldId    _fieldIdChanged)
    {
        RORRentalDateTimeType   dateTimeType;
        RORRentalDatesSetup     rentalDatesSetup;
        FieldId                 fieldId;
        int                     timeZoneDifference;
    
        switch (_fieldIdChanged)
        {
            case fieldNum(RORTmpOrderAmendmentDialogTable, RequestedPickupDateTime):
                dateTimeType = RORRentalDateTimeType::RequestedPickup;
                break;
    
            case fieldNum(RORTmpOrderAmendmentDialogTable, OffRentDateTime):
                dateTimeType = RORRentalDateTimeType::OffRent;
                break;
        }
    
        if (dateTimeType != RORRentalDateTimeType::None)
        {
            // Find all fields which rely on the modified field and update them
            while select DateTimeType, DateOffset, DateUnit, TimeOffset, TimeUnit from rentalDatesSetup
            where   (rentalDatesSetup.SetupActionDate       == RORRentalDateTimeSetupAction::Field
            &&       rentalDatesSetup.DateTimeTypeDateFrom   == dateTimeType)
            ||      (rentalDatesSetup.SetupActionTime       == RORRentalDateTimeSetupAction::Field
            &&       rentalDatesSetup.DateTimeTypeTimeFrom   == dateTimeType)
            {
                switch (rentalDatesSetup.DateTimeType)
                {
                    case RORRentalDateTimeType::OffRent:
                        fieldId = fieldNum(RORTmpOrderAmendmentDialogTable, OffRentDateTime);
                        break;
    
                    case RORRentalDateTimeType::RequestedPickup:
                        fieldId = fieldNum(RORTmpOrderAmendmentDialogTable, RequestedPickupDateTime);
                        break;
    
                    default:
                        fieldId = 0;
                        break;
                }
    
                if (fieldId)
                {
                    timeZoneDifference = (DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()))
                        - DateTimeUtil::time(DateTimeUtil::getSystemDateTime()));
    
                    this.applyDateTimeOffset(
                        fieldId,
                        DateTimeUtil::date(this.(_fieldIdChanged)),
                        rentalDatesSetup.DateOffset,
                        rentalDatesSetup.DateUnit,
                        true,
                        DateTimeUtil::time(this.(_fieldIdChanged)) + timeZoneDifference,
                        rentalDatesSetup.TimeOffset,
                        rentalDatesSetup.TimeUnit,
                        true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBlockedPeriodsRange</Name>
				<Source><![CDATA[
    public boolean validateBlockedPeriodsRange(TransDateTime _transDateTime = DateTimeUtil::minValue())
    {
        boolean             ret = true;
        TransDateTime       transDateTimeFrom;
        TransDateTime       transDateTimeTo;
        RORRentalDateTimes  rentalDateTimes;
        Timezone            timeZone;
            
        if (!this.EffectiveDateTimeFrom
        && !this.EffectiveDateTimeTo
        && !_transDateTime)
        {
            return true;
        }
    
        [rentalDateTimes, timeZone] = this.getRentalDateTimeWithTimeZone();
    
        if (_transDateTime)
        {
            transDateTimeFrom   = _transDateTime;
            transDateTimeTo     = _transDateTime;
        }
        else
        {
            transDateTimeFrom   = this.EffectiveDateTimeFrom;
            transDateTimeTo     = this.EffectiveDateTimeTo;
        }
    
        ret = this.validateOnOffRentRange(rentalDateTimes, transDateTimeFrom, transDateTimeTo, DateTimeUtil::getUserPreferredTimeZone()) && ret;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreditDateTime</Name>
				<Source><![CDATA[
    private boolean validateCreditDateTime()
    {
        boolean ret = true;
        RORRentalDateTimes rentalDateTimes;
        Timezone timeZone;

        switch (this.RefTableId)
        {
            case tableNum(PurchLine):
                PurchLine purchLine = PurchLine::findRecId(this.RefRecId);

                rentalDateTimes = purchLine.RORRentalDateTimesHost::rentalDateTimes();

                timeZone = purchLine.RORRentalLine::FINTimeZoneOrder();

                break;

            case tableNum(SalesLine):
                SalesLine salesLine = SalesLine::findRecId(this.RefRecId);

                rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();

                timeZone = salesLine.RORRentalLine::FINTimeZoneOrder();

                break;
        }

        if (this.EffectiveDateTimeTo && this.EffectiveDateTimeFrom > this.EffectiveDateTimeTo)
        {
            ret = checkFailed("@DNR6353");
        }

        ret = ret && this.validateOnOffRentRange(rentalDateTimes, this.EffectiveDateTimeFrom, this.EffectiveDateTimeTo, timeZone);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExchangeDateTimes</Name>
				<Source><![CDATA[
    private boolean validateExchangeDateTimes()
    {
        boolean                     ret = true;
        RORRentalDateTimes          rentalDateTimes;
        PurchLine                   purchLine;
        SalesLine                   salesLine;
        TransDate                   checkDate;
        Timezone                    timeZone;
        ROROffRentDateTime          offRentDateTime, rentalDateTimesOffRent;
        RORRequestedPickupDateTime  pickupDateTime;
        RORExpectedOffRentDateTime  rentalDateTimesExpectedOffRent;
        ROROnRentDateTime           rentalDateTimesOnRent;
    
        FieldId     fieldIdPeriodStartDateTime          = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingStart());
        FieldId     fieldIdPeriodEndDateTime            = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd());
        FieldId     fieldIdPeriodExpectedEndDateTime    = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingExpectedEnd());
    
        switch (this.RefTableId)
        {
            case tableNum(PurchLine):
                purchLine = PurchLine::findRecId(this.RefRecId);

                rentalDateTimes = purchLine.RORRentalDateTimesHost::rentalDateTimes();

                timeZone = purchLine.RORRentalLine::FINTimeZoneOrder();

                break;

            case tableNum(SalesLine):
                salesLine = SalesLine::findRecId(this.RefRecId);

                rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();

                timeZone = salesLine.RORRentalLine::FINTimeZoneOrder();

                break;
        }

        if (rentalDateTimes.RecId)
        {
            rentalDateTimesOnRent          = DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodStartDateTime), timeZone);
            rentalDateTimesOffRent         = DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodEndDateTime), timeZone);
            rentalDateTimesExpectedOffRent = DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodExpectedEndDateTime), timeZone);
    
            if (this.OffRentDateTime)
            {
                // Need to get the date and time separate, because the DateTimeUtil::minValue()
                // does not return true when rentalDateTimes.OffRentalDateTime is DateTimeUtil::minValue() and then
                // compared with that method again.
                checkDate = DateTimeUtil::date(rentalDateTimes.(fieldIdPeriodEndDateTime));
                offRentDateTime = DateTimeUtil::applyTimeZoneOffset(this.OffRentDateTime, timeZone);
    
                if (checkDate != dateNull())
                {
                    if (rentalDateTimesOnRent > offRentDateTime || rentalDateTimesOffRent < offRentDateTime)
                    {
                        ret = checkFailed(strFmt("@DNR6390",
                            DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodStartDateTime), DateTimeUtil::getUserPreferredTimeZone()),
                            DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodEndDateTime), DateTimeUtil::getUserPreferredTimeZone())));
                    }
                }
                else
                {
                    if (rentalDateTimesOnRent > offRentDateTime)
                    {
                        ret = checkFailed(strFmt("@DNR6894",
                            DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodStartDateTime), DateTimeUtil::getUserPreferredTimeZone())));
                    }
                }
            }
            else
            if (this.RequestedPickupDateTime)
            {
                // Need to get the date and time separate, because the DateTimeUtil::minValue()
                // does not return true when rentalDateTimes.OffRentalDateTime is DateTimeUtil::minValue() and then
                // compared with that method again.
                checkDate = DateTimeUtil::date(rentalDateTimes.(fieldIdPeriodEndDateTime));
                pickupDateTime = DateTimeUtil::applyTimeZoneOffset(this.RequestedPickupDateTime, timeZone);
    
                if (checkDate != dateNull() && pickupDateTime)
                {
                    if  (rentalDateTimesOnRent > pickupDateTime || rentalDateTimesOffRent < pickupDateTime)
                    {
                        ret = checkFailed(strFmt("@DNR6390",
                            DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodStartDateTime), DateTimeUtil::getUserPreferredTimeZone()),
                            DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodEndDateTime), DateTimeUtil::getUserPreferredTimeZone())));
                    }
                }
                else if (pickupDateTime)
                {
                    if  (rentalDateTimesOnRent > pickupDateTime || rentalDateTimesExpectedOffRent < pickupDateTime)
                    {
                        ret = checkFailed(strFmt("@DNR6390",
                            DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodStartDateTime), DateTimeUtil::getUserPreferredTimeZone()),
                            DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(fieldIdPeriodExpectedEndDateTime), DateTimeUtil::getUserPreferredTimeZone())));
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        DNRReasonType reasonType = this.AmendmentType;
    
        boolean ret = super(_fieldIdToCheck);
    
        switch (_fieldIdToCheck)
        {
            case fieldNum(RORTmpOrderAmendmentDialogTable, EffectiveDateTimeFrom),
                 fieldNum(RORTmpOrderAmendmentDialogTable, EffectiveDateTimeTo):
                if (ret)
                {
                    switch (reasonType)
                    {
                        case DNRReasonType::RentalStop,
                             DNRReasonType::BlockedPeriod:
                            ret = this.validateRentalStopDateTime(false);
                            break;
    
                        case DNRReasonType::Credit:
                            ret = this.validateCreditDateTime();
                            break;
    
                        default: ret = true;
                    }
                }
                break;
    
            case fieldNum(RORTmpOrderAmendmentDialogTable, RentalStopDate):
                ret = this.validateRentalStopDateTime(true);
                break;
    
            case fieldNum(RORTmpOrderAmendmentDialogTable, OffRentDateTime),
                 fieldNum(RORTmpOrderAmendmentDialogTable, RequestedPickupDateTime):
                ret = this.validateExchangeDateTimes();
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOnOffRentRange</Name>
				<Source><![CDATA[
    private boolean validateOnOffRentRange(
        RORRentalDateTimes  _rentalDateTimes,
        RORRentalDateTime   _effectiveDateTimeFrom,
        RORRentalDateTime   _effectiveDateTimeTo,
        TimeZone            _timeZone)
    {
        boolean         ret = true;
        FieldId         onRentFieldId;
        FieldId         offRentFieldId;
        TransDate       rentalDateOffRent;

        onRentFieldId     = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingStart());
        offRentFieldId    = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd());
        rentalDateOffRent = DateTimeUtil::date(_rentalDateTimes.(offRentFieldId));
    
        if (!this.RentalStopDate
        && this.AmendmentType != DNRReasonType::DateChange
        && ((_effectiveDateTimeFrom && _effectiveDateTimeFrom < _rentalDateTimes.(onRentFieldId))
            ||  (rentalDateOffRent      && _effectiveDateTimeFrom > _rentalDateTimes.(offRentFieldId))
            ||  (_effectiveDateTimeTo   && _effectiveDateTimeTo   < _rentalDateTimes.(onRentFieldId))
            ||  (rentalDateOffRent      && _effectiveDateTimeTo   > _rentalDateTimes.(offRentFieldId))))
        {
            if (!rentalDateOffRent || DateTimeUtil::year(_rentalDateTimes.(offRentFieldId)) > 2150)
            {
                ret = checkFailed(strFmt("@DNR6404", DateTimeUtil::applyTimeZoneOffset(_rentalDateTimes.(onRentFieldId), _timeZone)));
            }
            else
            {
                ret = checkFailed(strFmt("@DNR6395",
                    DateTimeUtil::applyTimeZoneOffset(_rentalDateTimes.(onRentFieldId), _timeZone),
                    DateTimeUtil::applyTimeZoneOffset(_rentalDateTimes.(offRentFieldId), _timeZone)));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRentalStopDateTime</Name>
				<Source><![CDATA[
    private boolean validateRentalStopDateTime(boolean _rentalStopForOneDay)
    {
        boolean ret = true;
        RORRentalDateTimes  rentalDateTimes;
        FieldId             onRentFieldId = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingStart());
        FieldId             offRentFieldId = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd());
        FieldId             expectedOffRentFieldId = RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingExpectedEnd());
        RORRentalDateTime   effectiveDateTimeFrom;
        RORRentalDateTime   effectiveDateTimeTo;
        Timezone            timeZone;
        FromTime            fromTime;
        ToTime              toTime;
        TransDate           rentalDateOffRent;
        int                 offSetDays = 1;
    
        [rentalDateTimes, timeZone] = this.getRentalDateTimeWithTimeZone();
    
        if (rentalDateTimes)
        {
            rentalDateOffRent = DateTimeUtil::date(rentalDateTimes.(offRentFieldId));
    
            if (_rentalStopForOneDay)
            {
                if (this.RentalStopDate)
                {
                    TransDate rentalDateOnRent = DateTimeUtil::date(rentalDateTimes.(onRentFieldId));
                    TransDate rentalDateExpectedOffRent = DateTimeUtil::date(rentalDateTimes.(expectedOffRentFieldId));

                    if(this.RentalStopDate < rentalDateOnRent)
                    {
                        ret = checkFailed(strFmt("@DNR6404", rentalDateOnRent));
                    }
                    else if(rentalDateOffRent && this.RentalStopDate > rentalDateOffRent)
                    {
                        ret = checkFailed(strFmt("@DNR6395",
                                          rentalDateOnRent,
                                          rentalDateOffRent));
                    }
                    
                    if (this.RentalStopDate == DateTimeUtil::date(rentalDateTimes.(onRentFieldId)))
                    {
                        fromTime = DateTimeUtil::time(rentalDateTimes.(onRentFieldId));
                    }
    
                    // Off rental date/time is not mandatory, so check whether is is filled
                    if (rentalDateOffRent
                    &&  this.RentalStopDate == rentalDateOffRent)
                    {
                        toTime = DateTimeUtil::time(rentalDateTimes.(offRentFieldId));
                        offSetDays = 0;
                    }
    
                    effectiveDateTimeFrom = DateTimeUtil::newDateTime(this.RentalStopDate, fromTime);
                    effectiveDateTimeTo = DateTimeUtil::newDateTime(this.RentalStopDate + offSetDays, toTime);
    
                    effectiveDateTimeFrom = DateTimeUtil::removeTimeZoneOffset(effectiveDateTimeFrom, DateTimeUtil::getUserPreferredTimeZone());
                    effectiveDateTimeTo = DateTimeUtil::removeTimeZoneOffset(effectiveDateTimeTo, DateTimeUtil::getUserPreferredTimeZone());
                }
            }
            else
            {
                effectiveDateTimeFrom = this.EffectiveDateTimeFrom;
                effectiveDateTimeTo = this.EffectiveDateTimeTo;
            }
    
            if (effectiveDateTimeTo && effectiveDateTimeFrom > effectiveDateTimeTo)
            {
                ret = checkFailed("@DNR6353");
            }
    
            ret = this.validateOnOffRentRange(rentalDateTimes, effectiveDateTimeFrom, effectiveDateTimeTo, /*timeZone*/DateTimeUtil::getUserPreferredTimeZone()) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTerminationNumber</Name>
				<Source><![CDATA[
    public static RORTerminationNumber generateTerminationNumber(RORTerminationNumber _terminationNumber)
    {
        System.Random           randomGenerate;
        RORTerminationNumber    terminationNumber;
    
        terminationNumber = _terminationNumber;
    
        if (!terminationNumber)
        {
            randomGenerate = new System.Random();
            terminationNumber = randomGenerate.Next();
    
            while (ROROrderAmendmentLog::existsTerminationNumber(terminationNumber))
            {
                terminationNumber = randomGenerate.Next();
            }
        }
    
        return terminationNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR632</Label>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BlockPeriod</Name>
			<Label>@SYS6661</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>INVBlockUnblock</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChangeDates</Name>
			<Label>@DNR5893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RentalDateTimeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreditNoteType</Name>
			<Label>@DNR1971</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditNoteType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Exchange</Name>
			<Label>@DNR1506</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExchangeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffRentDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedPickupDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MakeObjectUnavailable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExchangeTemplates</Name>
			<Label>@DNR1491</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WPPWorkOrderTemplateIdDelivery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WPPWorkOrderTemplateIdReturn</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LostOrder</Name>
			<Label>@DNR2569</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DNRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceAdjustment</Name>
			<Label>@SYS23842</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RentalStop</Name>
			<Label>@DNR4284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateInputType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalStopDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTimeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTimeTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResetOption</Name>
			<Label>@SYS22622</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeChildren</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResetValue</Name>
			<Label>@SYS3073</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResetRentPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResetLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResetLinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResetRentalModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResetCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRentPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayLinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRentalModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SubRentalOrder</Name>
			<Label>@DNR1715</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SynchronizeSubRental</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowReinvoiceAfterCredit</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR2780</HelpText>
			<Label>@DNR2781</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AmendmentType</Name>
			<EnumType>DNRReasonType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalendarType</Name>
			<EnumType>RORRentalCalendarType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditNoteType</Name>
			<EnumType>RORAmendmentCreditNoteType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DateInputType</Name>
			<EnumType>RORAmendmentDateInputType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DNRReasonCode</Name>
			<ExtendedDataType>DNRReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveDateTimeFrom</Name>
			<ExtendedDataType>RORRentalDateTime</ExtendedDataType>
			<HelpText>@DNR6334</HelpText>
			<Label>@SYS4083</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveDateTimeTo</Name>
			<ExtendedDataType>RORRentalDateTime</ExtendedDataType>
			<HelpText>@DNR6333</HelpText>
			<Label>@SYS8828</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExchangeType</Name>
			<EnumType>RORAmendmentExchangeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeChildren</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7421</HelpText>
			<Label>@DNR7266</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>INVBlockUnblock</Name>
			<EnumType>INVBlockUnblock</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemIdRequested</Name>
			<ExtendedDataType>RORItemIdRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MakeObjectUnavailable</Name>
			<HelpText>@DNR5883</HelpText>
			<Label>@DNR6386</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>OffRentDateTime</Name>
			<ExtendedDataType>ROROffRentDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>PriceCur</ExtendedDataType>
			<Label>@DNR315</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonText</Name>
			<ExtendedDataType>RORAmendmentReasonText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RentalDateTimeType</Name>
			<EnumType>RORRentalDateTimeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RentalStopDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RequestedPickupDateTime</Name>
			<ExtendedDataType>RORRequestedPickupDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResetCalendarId</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7422</HelpText>
			<Label>@SYS11839</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResetLineDisc</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7423</HelpText>
			<Label>@SYS11829</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResetLinePercent</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7424</HelpText>
			<Label>@SYS7813</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResetRentalModeId</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7425</HelpText>
			<Label>@DNR1796</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResetRentPrice</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7426</HelpText>
			<Label>@SYS11865</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReturnTransportDiscPct</Name>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
			<Label>@DNR7326</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SynchronizeSubRental</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR7155</HelpText>
			<Label>@DNR6571</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TerminationNote</Name>
			<ExtendedDataType>DNRAdditionalNote</ExtendedDataType>
			<Label>@DNR4426</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TerminationNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RORTerminationNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransportDiscPct</Name>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
			<Label>@DNR7325</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPWorkOrderTemplateIdDelivery</Name>
			<ExtendedDataType>WPPWorkOrderTemplateId</ExtendedDataType>
			<HelpText>@DNR1490</HelpText>
			<Label>@DNR1489</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WPPWorkOrderTemplateIdReturn</Name>
			<ExtendedDataType>WPPWorkOrderTemplateId</ExtendedDataType>
			<HelpText>@DNR1488</HelpText>
			<Label>@DNR1487</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DNRReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DNRReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DNRReasonCode</Name>
					<Field>DNRReasonCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemIdRequested</Name>
					<SourceEDT>RORItemIdRequested</SourceEDT>
					<Field>ItemIdRequested</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WPPWorkOrderTemplateTableDelivery</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WPPWorkOrderTemplateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WPPWorkOrderTemplateTableDelivery</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Active</Name>
					<RelatedField>Active</RelatedField>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPWorkOrderTemplateIdDelivery</Name>
					<Field>WPPWorkOrderTemplateIdDelivery</Field>
					<RelatedField>TemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WPPWorkOrderTemplateTableReturn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WPPWorkOrderTemplateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WPPWorkOrderTemplateTableReturn</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Active</Name>
					<RelatedField>Active</RelatedField>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPWorkOrderTemplateIdReturn</Name>
					<Field>WPPWorkOrderTemplateIdReturn</Field>
					<RelatedField>TemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>