<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DFMMandatoryField</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DFMMandatoryField extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupDataSourceName</Name>
				<Source><![CDATA[
    public void lookupDataSourceName(FormStringControl _ctrl)
    {
        Form                form;
        Counter             cnt;
        SysTableLookup      lookup;
        TmpUtil             tmpUtil;
        FormBuildDataSource dataSource;

        if(this.FormName)
        {
            form = new Form(this.FormName);

            for(cnt = 1; cnt <= form.dataSourceCount(); cnt ++)
            {
                dataSource = form.dataSource(cnt);

                tmpUtil.clear();
                tmpUtil.Name = dataSource.name();
                tmpUtil.insert();
            }

            lookup = SysTableLookup::newParameters(tableNum(TmpUtil), _ctrl);
            lookup.parmTmpBuffer(tmpUtil);
            lookup.addLookupfield(fieldNum(TmpUtil, Name), true);
            lookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFieldName</Name>
				<Source><![CDATA[
    public void lookupFieldName(FormStringControl _ctrl)
    {
        Form                form;
        Counter             cnt;
        DictTable           dictTable;
        FormBuildDataSource fbds;
        ;

        if(this.FormName && this.DataSourceName)
        {
            form = new Form(this.FormName, true);

            for(cnt = 1; !dictTable && cnt <= form.dataSourceCount(); cnt ++)
            {
                fbds = form.dataSource(cnt);

                if(fbds.name() == this.DataSourceName)
                {
                    dictTable = new DictTable(fbds.table());
                    SysMetaTableMemberNameLookup::lookupFieldsInTable(dictTable.name(), _ctrl);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(DFMMandatoryField, FormName):
                this.DataSourceName = '';
                this.FieldName = '';
                break;

            case fieldNum(DFMMandatoryField, DataSourceName):
                this.FieldName = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        Form                form;
        FormBuildDataSource dataSource;
        Counter             cnt;
        DictTable           dictTable;
        boolean             ret = super(_fieldIdToCheck);
        boolean             dsFound = false;

        if(_fieldIdToCheck == fieldNum(DFMMandatoryField, DataSourceName) && this.DataSourceName)
        {
            if(this.FormName)
            {
                form = new Form(this.FormName, true);

                for(cnt = 1; cnt <= form.dataSourceCount(); cnt ++)
                {
                    dataSource = form.dataSource(cnt);

                    if(dataSource.name() == this.DataSourceName)
                    {
                        dsFound = true;
                        break;
                    }
                }

                if(!dsFound)
                {
                    ret = checkFailed(strFmt("@DFM111", this.FormName, this.DataSourceName));
                }
            }
            else
            {
                ret = checkFailed(strFmt("@SYS26332", "@SYS14999"));
            }
        }

        if(_fieldIdToCheck == fieldNum(DFMMandatoryField, FieldName) && this.FieldName)
        {
            if(this.FormName && this.DataSourceName)
            {
                form = new Form(this.FormName, true);

                for(cnt = 1; cnt <= form.dataSourceCount(); cnt ++)
                {
                    dataSource = form.dataSource(cnt);

                    if(dataSource.name() == this.DataSourceName)
                    {
                        dictTable = new DictTable(dataSource.table());

                        if(dictTable.fieldName2Id(this.FieldName))
                        {
                            break;
                        }
                        else
                        {
                            ret = checkFailed(strFmt("@SYS138292", this.FieldName, dictTable.name()));
                        }
                    }
                }
            }
            else
            {
                ret = checkFailed(strFmt("@DNR7264", "@SYS14999", "@SYS92504"));
            }
        }

        if(_fieldIdToCheck == fieldNum(DFMMandatoryField, FormName) && this.FormName && this.FormName != this.orig().FormName)
        {
            ret = DFMManager::validateFormName(this.FormName);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSetMandatoryFields</Name>
				<Source><![CDATA[
    public static void checkSetMandatoryFields(FormRun _formRun)
    {
        Form                form;
        DFMMandatoryField   mandatoryField;
        FormDataSource      dataSource;
        FormDataObject      dataObject;
        FieldId             fieldId;

        form = _formRun.form();

        if(DFMMandatoryField::existFormName(form.name()))
        {            
            Map dataSourceMap = new Map(Types::String, Types::Class); // DataSourceName, FormDataSource

            for(int i = 1; i <= form.dataSourceCount(); i ++)
            {
                dataSource = _formRun.dataSource(i);
                dataSourceMap.insert(dataSource.name(), dataSource);
            }

            while select FieldName, DataSourceName from mandatoryField
            where mandatoryField.FormName == form.name()
            &&    mandatoryField.IsMandatory
            {
                if(dataSourceMap.exists(mandatoryField.DataSourceName))
                {
                    dataSource = dataSourceMap.lookup(mandatoryField.DataSourceName);
                    fieldId = fieldName2Id(dataSource.table(), mandatoryField.FieldName);

                    if(fieldId)
                    {
                        dataObject = dataSource.object(fieldId);

                        if(dataObject && !dataObject.mandatory())
                        {
                            dataObject.mandatory(true);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFormName</Name>
				<Source><![CDATA[
    public static boolean existFormName(FormName _formName)
    {
        // we don't really care about records that don't have the Mandatory box checked
        return (_formName && (select firstOnly RecId from DFMMandatoryField
                                  where DFMMandatoryField.FormName == _formName
                                  &&    DFMMandatoryField.IsMandatory).RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@DFM110</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FieldName</TitleField1>
	<TitleField2>DataSourceName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<PrimaryIndex>DFMMandatoryFieldIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataSourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsMandatory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataSourceName</Name>
			<ExtendedDataType>DataSourceName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldName</Name>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormName</Name>
			<ExtendedDataType>FormName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMandatory</Name>
			<HelpText>@DMF500</HelpText>
			<Label>@SYS22073</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DFMMandatoryFieldIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FormName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataSourceName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DFMFormNameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FormName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsMandatory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>