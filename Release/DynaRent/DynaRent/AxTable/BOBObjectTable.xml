<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBObjectTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOBObjectTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayOperationalProductNumber</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBOperationalProductNumber displayOperationalProductNumber()
    {
        EcoResProduct ecoResProduct;

        select firstonly DisplayProductNumber from ecoResProduct
        where ecoResProduct.BOBRentalTypeId == this.RentalTypeId
        &&    ecoResProduct.DisplayProductNumber == ecoResProduct.BOBRentalTypeId;

        return ecoResProduct.DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BSADisplayActiveContract</Name>
				<Source><![CDATA[
    BSAContractTable BSADisplayActiveContract()
    {
        return BSAContractTable::findActiveContract(smmBusRelTable::findByParty(this.OrganizationParty).BusRelAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BSADisplayActiveContractDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Description BSADisplayActiveContractDescription()
    {
        return this.BSADisplayActiveContract().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BSADisplayActiveContractId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BSAContractId BSADisplayActiveContractId()
    {
        return this.BSADisplayActiveContract().ContractId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssetId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display AssetId displayAssetId()
    {
        return this.assetId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOrganizationName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Name displayOrganizationName()
    {
        return DirOrganization::find(this.OrganizationParty).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    public boolean canBeDeleted(boolean _silentCheck = false)
    {
        BOBObjectView       objectView;
        boolean             ret = true;
    
        if(ret)
        {
            select firstOnly FirstOnRentDate, LastOnRentDate from objectView
            where objectView.ObjectId == this.ObjectId;
    
            if(objectView.FirstOnRentDate)
            {
                ret = (_silentCheck ? false : checkFailed(strFmt("@DNR6531", this.ObjectId, "@DNR3769")));
            }
            if(objectView.LastOnRentDate)
            {
                ret = (_silentCheck ? false : checkFailed(strFmt("@DNR6531", this.ObjectId, "@DNR3771")));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMaintenancePlans</Name>
				<Source><![CDATA[
    public server void createMaintenancePlans()
    {
        BOBDefaultMaintenancePlan   defaultMaint;
        BOBItemMaintenancePlan      itemMaint;
        BOBObjectMaintenancePlan    busObjMaintNew, busObjMaintExisting;
        RecordInsertList            insertList;
        BOBMeterTable               meterTable;
    
        if (BSAParameters::find().CopyMaintPlanFromItem && (this.CreateMaintenancePlan || this.Category != BOBObjectCategory::External))
        {
            insertList = new RecordInsertList(tableNum(BOBObjectMaintenancePlan));
            
            select firstonly count(RecId) from meterTable
            where meterTable.ObjectId == this.ObjectId;

            SysDaQueryObject sysDaQuery = this.getMaintenancePlanQuery(defaultMaint, itemMaint, busObjMaintNew);
            SysDaSearchObject searchObject = new SysDaSearchObject(sysDaQuery);
            SysDaSearchStatement searchStmt = new SysDaSearchStatement();

            while (searchStmt.findNext(searchObject))
            {
                busObjMaintNew.clear();
    
                if ((defaultMaint.PlanType == BOBMaintenancePlanType::ConsumptionBased || defaultMaint.PlanType == BOBMaintenancePlanType::TimeAndConsumptionBased) && meterTable.RecId == 1)
                {
                    busObjMaintNew.MeterTableRecId = BOBMeterTable::findByObjectId(this.ObjectId).RecId;
                    busObjMaintNew.NextConsumption = defaultMaint.RecurrenceValue;
                }
    
                busObjMaintNew.ObjectId = this.ObjectId;
                busObjMaintNew.initFromDefaultMaintenancePlan(defaultMaint);
    
                insertList.add(busObjMaintNew);
            }
            
            insertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryMaintenancePlan</Name>
				<Source><![CDATA[
    [SysObsolete("DNRDeletedObjects01_2022. Method has been replaced by the getMaintenancePlanQuery method.", false)]
    protected Query queryMaintenancePlan()
    {
        return (new Query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaintenancePlanQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryObject getMaintenancePlanQuery(BOBDefaultMaintenancePlan _defaultMaintenancePlan,
                                                       BOBItemMaintenancePlan _itemMaintenancePlan,
                                                       BOBObjectMaintenancePlan _objectMaintenancePlan)
    {
        SysDaQueryObject qDefaultMaintenancePlan, qItemMaintenancePlan, qObjectMaintenancePlan;

        qDefaultMaintenancePlan = new SysDaQueryObject(_defaultMaintenancePlan);
        qDefaultMaintenancePlan.whereClause(
            new SysDaNotEqualsExpression(
                new SysDaFieldExpression(_defaultMaintenancePlan, fieldStr(BOBDefaultMaintenancePlan, PlanType)),
                new SysDaValueExpression(BOBMaintenancePlanType::Recall)));


        qItemMaintenancePlan = new SysDaQueryObject(_itemMaintenancePlan);
        qItemMaintenancePlan.projection().add(fieldStr(BOBItemMaintenancePlan, TableId));

        qDefaultMaintenancePlan.joinClause(SysDaJoinKind::InnerJoin, qItemMaintenancePlan);
        qItemMaintenancePlan.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(
                   new SysDaFieldExpression(_itemMaintenancePlan, fieldStr(BOBItemMaintenancePlan, PlanCode)),
                   new SysDaFieldExpression(_defaultMaintenancePlan, fieldStr(BOBDefaultMaintenancePlan, PlanCode))),
                 new SysDaEqualsExpression(
                   new SysDaFieldExpression(_itemMaintenancePlan, fieldStr(BOBItemMaintenancePlan, DisplayProductNumber)),
                   new SysDaValueExpression(this.getMaintenancePlanQueryDisplayProductNumberRangeValue()))));


        qObjectMaintenancePlan = new SysDaQueryObject(_objectMaintenancePlan);
        qItemMaintenancePlan.joinClause(SysDaJoinKind::NotExistsJoin, qObjectMaintenancePlan);
        qObjectMaintenancePlan.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_objectMaintenancePlan, fieldStr(BOBObjectMaintenancePlan, ObjectId)),
                    new SysDaValueExpression(this.ObjectId)),
                new SysDaEqualsExpression(
                   new SysDaFieldExpression(_objectMaintenancePlan, fieldStr(BOBObjectMaintenancePlan, DefaultPlanRecId)),
                   new SysDaFieldExpression(_defaultMaintenancePlan, fieldStr(BOBDefaultMaintenancePlan, RecId)))));

        return qDefaultMaintenancePlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaintenancePlanQueryDisplayProductNumberRangeValue</Name>
				<Source><![CDATA[
    protected BOBRentalTypeId getMaintenancePlanQueryDisplayProductNumberRangeValue()
    {
        return (this.RentalTypeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWarning</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBObjectMaintenanceWarning displayWarning()
    {
        #ResAppl
        #DNRConstants

        if(this.ObjectId)
        {
            BOBObjectMaintenanceWarningView warningView;

            select firstOnly MustWarn from warningView
            where warningView.ObjectId == this.ObjectId;
    
            if(warningView.MustWarn)
            {
                return #Image_Warning;
            }
        }
    
        return #blankImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProdDate</Name>
				<Source><![CDATA[
    edit InventSerialProdDate editProdDate(boolean _set, InventSerialProdDate _prodDate)
    {
        InventSerial inventSerial;
    
        if(_set)
        {
            update_recordSet inventSerial
            setting ProdDate = _prodDate
            where inventSerial.InventSerialId == this.InventSerialId;
    
            return _prodDate;
        }
    
        return this.inventSerial().ProdDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRentalType</Name>
				<Source><![CDATA[
    public void initFromRentalType(BOBRentalType _rentalType)
    {
        EcoResProduct   ecoResProduct;
        InventTable     inventTable;

        this.RentalTypeId = _rentalType.RentalTypeId;
        this.Name         = _rentalType.Description;
    
        select firstonly BOBMonthsWarranty from ecoResProduct
        where ecoResProduct.DisplayProductNumber == ecoResProduct.BOBRentalTypeId
        &&    ecoResProduct.BOBRentalTypeId == _rentalType.RentalTypeId
            exists join inventTable
            where inventTable.Product == ecoResProduct.RecId;

        if(ecoResProduct.BOBMonthsWarranty)
        {
            this.WarrantyToDate = dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), ecoResProduct.BOBMonthsWarranty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.ObjectId = BOBObjectTable::getNewObjectId();
        this.Category = BOBObjectCategory::External;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        BOBRentalType   rentalType;
    
        if(!this.validateInventSerialId()) // needs to be called when inserting from code as well
        {
            throw error("@DNR6075");
        }
    
        ttsBegin;
    
        super();
    
        if (EcoResProduct::findByDisplayProductNumber(this.RentalTypeId).BOBCreateObjectMeter)
        {
            BOBMeterTable::createMeterTable(this.ObjectId, this.ObjectId, this.Name);
        }
        this.createMaintenancePlans();
    
        BSASynchContracts::synchForBOBObjectTable(this);
    
        // copy business object attribute defaults from the rental type to this new object
        rentalType = this.rentalType();
    
        if(rentalType.BusObjAttrFldGrpId)
        {
            DFMValueTrans::copyValues(rentalType, this, rentalType.BusObjAttrFldGrpId);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(DNRBusinessObjectViewV2)))
        {
            BOBObjectCurrentInfo::createRecord(this.ObjectId);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSerial</Name>
				<Source><![CDATA[
    public InventSerial inventSerial(boolean _forUpdate = false)
    {
        return InventSerial::BOBFindByInventSerialId(this.InventSerialId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>objectView</Name>
				<Source><![CDATA[
    public BOBObjectView objectView()
    {
        BOBObjectView objectView;
    
        if (this.RecId)
        {
            select firstOnly objectView
            where objectView.RecId == this.RecId;
        }
    
        return objectView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefAssetId</Name>
				<Source><![CDATA[
    public static void jumpRefAssetId(AssetId _assetId)
    {
        AssetTrans      assetTrans;
        Args            args = new Args();
        
        //The code below makes sure that a blank AssetTable form opens up when the Asset Id is not present in the current company
        assetTrans.AssetId = _assetId;
        args.record(assetTrans);
        args.formViewOption(FormViewOption::Details);

        new MenuFunction(menuItemDisplayStr(AssetTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalType</Name>
				<Source><![CDATA[
    public BOBRentalType rentalType(boolean _forUpdate = false)
    {
        return BOBRentalType::find(this.RentalTypeId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = (super() && this.canBeDeleted());
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             ret;
        smmBusRelTable      busRelTable;
        smmBusRelTypeGroup  busRelType;
    
        ret = super(_fieldIdToCheck);
    
        switch(_fieldIdToCheck)
        {
            case fieldNum(BOBObjectTable, Category):
                // field Category is only editable on new records, only allow categories Rental and External
                if(this.Category != BOBObjectCategory::Rental && this.Category != BOBObjectCategory::External)
                {
                    ret = checkFailed(strFmt("@DNR5911", BOBObjectCategory::Rental, BOBObjectCategory::External, "@DNR5863"));
                }
                break;
    
            //case fieldNum(BOBObjectTable, smmBusRelAccount):
            //    if(this.smmBusRelAccount)
            //    {
            //        if(this.Category == BOBObjectCategory::SubRental || this.Category == BOBObjectCategory::External)
            //        {
            //            select firstOnly TableType from busRelType
            //                exists join busRelTable
            //                where busRelTable.BusRelTypeId == busRelType.TypeId
            //                &&    busRelTable.BusRelAccount == this.smmBusRelAccount;

            //            if(this.Category == BOBObjectCategory::SubRental
            //            && busRelType.TableType != smmBusRelTypeSourceTable::Vendor
            //            && busRelType.TableType != smmBusRelTypeSourceTable::IRMCustVend)
            //            {
            //                ret = checkFailed(strFmt("@DNR5913", smmBusRelTypeSourceTable::Vendor, smmBusRelTypeSourceTable::IRMCustVend, this.Category));
            //            }

            //            if(this.Category == BOBObjectCategory::External
            //            && busRelType.TableType != smmBusRelTypeSourceTable::Customer
            //            && busRelType.TableType != smmBusRelTypeSourceTable::IRMCustVend)
            //            {
            //                ret = checkFailed(strFmt("@DNR5913", smmBusRelTypeSourceTable::Customer, smmBusRelTypeSourceTable::IRMCustVend, this.Category));
            //            }
            //        }
            //        else
            //        {
            //            ret = checkFailed(strFmt("@DNR5912",
            //                                     fieldPName(BOBObjectTable, smmBusRelAccount),
            //                                     BOBObjectCategory::SubRental,
            //                                     BOBObjectCategory::External));
            //        }
            //    }
            //    break;
            
            case fieldNum(BOBObjectTable , OrganizationParty):
                if(this.OrganizationParty && this.Category != BOBObjectCategory::SubRental && this.Category != BOBObjectCategory::External)
                {
                    ret = checkFailed(strFmt("@DNR5912",
                                                fieldPName(BOBObjectTable, OrganizationParty),
                                                BOBObjectCategory::SubRental,
                                                BOBObjectCategory::External));
                }
                break;
    
            case fieldNum(BOBObjectTable, InventSerialId):
                ret = this.validateInventSerialId();
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialId</Name>
				<Source><![CDATA[
    private boolean validateInventSerialId()
    {
        boolean ret = true;
    
        if(this.InventSerialId)
        {
            BOBObjectTable objectTable = BOBObjectTable::findInventSerialId(this.InventSerialId);
    
            if(objectTable)
            {
                ret = checkFailed(strFmt("@DNR6572", this.InventSerialId, objectTable.ObjectId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFleetNum</Name>
				<Source><![CDATA[
    public static boolean validateFleetNum(BOBFleetNumber  _fleetNum)
    {
        boolean ret = true;
        
        if(_fleetNum)
        {
            BOBObjectTable objectTable = BOBObjectTable::findFleetNum(_fleetNum);

            if(objectTable)
            {
                ret = checkFailed(strFmt("@DNR10129", objectTable.FleetNumber, objectTable.ObjectId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
    
        if (this.rentalType().Classification != BOBRentalTypeClassification::Bulk && !this.InventSerialId)
        {
            ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(BOBObjectTable), fieldNum(BOBObjectTable, InventSerialId))));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetObjCatToObjCat</Name>
				<Source><![CDATA[
    public static BOBObjectCategory assetObjCatToObjCat(BOBAssetObjectCategory _assetCategory)
    {
        switch(_assetCategory)
        {
            case BOBAssetObjectCategory::Internal:
                return BOBObjectCategory::Internal;
    
            case BOBAssetObjectCategory::Rental:
                return BOBObjectCategory::Rental;
    
            default:
                throw error(strFmt("@SYS88512", _assetCategory));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOrganizationParty</Name>
				<Source><![CDATA[
    public static client server boolean existOrganizationParty(DirPartyRecId  _partyId)
    {
        return (_partyId && (select firstOnly RecId from BOBObjectTable
                             where BOBObjectTable.OrganizationParty == _partyId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existObjectId</Name>
				<Source><![CDATA[
    public static boolean existObjectId(BOBObjectId _objectId)
    {
        return _objectId && (select firstonly RecId from BOBObjectTable
                             where BOBObjectTable.ObjectId == _objectId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFleetNum</Name>
				<Source><![CDATA[
    public static boolean existFleetNum(BOBFleetNumber _fleetNum)
    {
        return _fleetNum && (select firstonly RecId from BOBObjectTable
                             where BOBObjectTable.FleetNumber == _fleetNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRentalTypeId</Name>
				<Source><![CDATA[
    public static boolean existRentalTypeId(BOBRentalTypeId _rentalTypeId)
    {
        return (_rentalTypeId && (select firstOnly RecId from BOBObjectTable
                                  where BOBObjectTable.RentalTypeId == _rentalTypeId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventSerialId</Name>
				<Source><![CDATA[
    public static boolean existInventSerialId(InventSerialId _inventSerialId)
    {
        return (_inventSerialId && (select firstOnly RecId from BOBObjectTable
                                    where BOBObjectTable.InventSerialId == _inventSerialId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetId</Name>
				<Source><![CDATA[
    public static BOBObjectTable findByAssetId(AssetId _assetId,
                                               TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                               boolean _forUpdate   = false)
    {
        BOBObjectTable ret;
        
        if (_assetId)
        {
            BOBObjectAssetLog objectAssetLog;

            if (_forUpdate)
            {
                ret.selectForUpdate(true);
            }
            
            AssetTable assetTable = AssetTable::find(_assetId);

            if (assetTable)
            {
                if (assetTable.BOBIsBulkChild())
                {
                    assetTable = AssetTable::find(assetTable.MainAssetId);
                }

                if (assetTable.BOBIsBulkParent)
                {
                    select firstOnly ret
                    where !ret.InventSerialId
                        exists join objectAssetLog
                        where objectAssetLog.ObjectId == ret.ObjectId
                        &&    objectAssetLog.AssetCompanyId == assetTable.DataAreaId
                        &&    objectAssetLog.AssetId == assetTable.AssetId;
                }
                else
                {
                    select firstOnly ret
                    where ret.InventSerialId
                        exists join objectAssetLog
                        where objectAssetLog.ObjectId == ret.ObjectId
                        &&    objectAssetLog.AssetCompanyId == assetTable.DataAreaId
                        &&    objectAssetLog.AssetId == assetTable.AssetId
                        &&    objectAssetLog.ValidFrom <= _transDate
                        &&  (!objectAssetLog.ValidTo || objectAssetLog.ValidTo >= _transDate);
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventSerialId</Name>
				<Source><![CDATA[
    public static BOBObjectTable findInventSerialId(InventSerialId _serialNumber, boolean _forUpdate = false)
    {
        BOBObjectTable ret;
    
        if(_serialNumber)
        {
            if(_forUpdate)
            {
                ret.selectForUpdate(true);
            }
    
            select firstOnly ret
            where ret.InventSerialId == _serialNumber;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBulkObject</Name>
				<Source><![CDATA[
    public static BOBObjectTable findBulkObject(BOBRentalTypeId _rentalTypeId, boolean _forUpdate = false)
    {
        BOBObjectTable ret;

        if(_rentalTypeId)
        {
            ret.selectForUpdate(_forUpdate);

            select firstonly ret
            where ret.RentalTypeId == _rentalTypeId
            &&   !ret.InventSerialId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFleetNum</Name>
				<Source><![CDATA[
    public static BOBObjectTable findFleetNum(BOBFleetNumber _fleetNum, boolean _forUpdate = false)
    {
        BOBObjectTable ret;
    
        if(_fleetNum)
        {
            if(_forUpdate)
            {
                ret.selectForUpdate(true);
            }
    
            select firstOnly ret
            where ret.FleetNumber == _fleetNum;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findObjectId</Name>
				<Source><![CDATA[
    public static BOBObjectTable findObjectId(BOBObjectId _objectId, boolean _forUpdate = false)
    {
        BOBObjectTable ret;
        ;
    
        if(_objectId)
        {
            if(_forUpdate)
            {
                ret.selectForUpdate(true);
            }
    
            select firstOnly ret
            where ret.ObjectId == _objectId;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static client server BOBObjectTable findRecId(BOBObjectTableRecId _refRecId, boolean _forUpdate = false)
    {
        BOBObjectTable objectTable;
    
        if (_refRecId)
        {
            objectTable.selectForUpdate(_forUpdate);
    
            select firstOnly objectTable
            where objectTable.RecId == _refRecId;
        }
    
        return objectTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewObjectId</Name>
				<Source><![CDATA[
    public static BOBObjectId getNewObjectId()
    {
        NumberSeq num;
        NumberSequenceReference numberSequenceReference = BOBParameters::numRefBusinessObjectId();
    
        if(numberSequenceReference)
        {
            num = NumberSeq::newGetNum(numberSequenceReference);
        }
    
        return num.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFleetNumber</Name>
				<Source><![CDATA[
    public static void lookupFleetNumber(FormControl _callerControl, ItemId _itemId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsObjectTable = query.addDataSource(tableNum(BOBObjectTable));
        qbdsObjectTable.addGroupByField(fieldNum(BOBObjectTable, FleetNumber));
        qbdsObjectTable.addGroupByField(fieldNum(BOBObjectTable, ObjectId));
        qbdsObjectTable.addGroupByField(fieldNum(BOBObjectTable, RentalTypeId));
        qbdsObjectTable.addRange(fieldNum(BOBObjectTable, FleetNumber)).value(SysQuery::valueNotEmptyString());
    
        if (_itemId)
        {
            QueryBuildDataSource qbdsProduct = qbdsObjectTable.addDataSource(tableNum(EcoResProduct));
            qbdsProduct.relations(false);
            qbdsProduct.joinMode(JoinMode::ExistsJoin);
            qbdsProduct.addLink(fieldNum(EcoResProduct, BOBRentalTypeId), fieldNum(BOBObjectTable, RentalTypeId));
            qbdsProduct.addLink(fieldNum(EcoResProduct, DisplayProductNumber), fieldNum(EcoResProduct, BOBRentalTypeId));
            qbdsProduct.addSelectionField(fieldNum(EcoResProduct, TableId));

            QueryBuildDataSource qbdsInventTable = qbdsProduct.addDataSource(tableNum(InventTable));
            qbdsInventTable.relations(false);
            qbdsInventTable.joinMode(JoinMode::ExistsJoin);
            qbdsInventTable.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProduct, RecId));
            qbdsInventTable.addRange(fieldNum(InventTable, ItemId)).value(queryValue(_itemId));
            qbdsProduct.addSelectionField(fieldNum(InventTable, TableId));
        }

        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(BOBObjectTable), _callerControl);
        lookup.addLookupfield(fieldNum(BOBObjectTable, FleetNumber), true);
        lookup.addLookupfield(fieldNum(BOBObjectTable, ObjectId));
        lookup.addLookupfield(fieldNum(BOBObjectTable, RentalTypeId));
    
        lookup.parmQuery(query);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _errorWhenNotFound = true)
    {
        // get the item via the 'primary' product -- the one that has the same product number as the rental type ID 
        InventTable inventTable = InventTable::BOBFindFromRentalType(this.RentalTypeId);

        if (_errorWhenNotFound && !inventTable)
        {
            throw error(strFmt("@SYS152315", this.RentalTypeId, curext()));
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcquiredInventTable</Name>
				<Source><![CDATA[
    public InventTable getAcquiredInventTable(boolean _forUpdate = false, boolean _errorWhenNotFound = true)
    {
        // get the item via the 'acquired' product -- the one that was used to acquire the object
        InventTable     inventTable;
        EcoResProduct   ecoResProduct;

        if (_forUpdate)
        {
            inventTable.selectForUpdate(_forUpdate);
        }

        if (this.AcqProductNumber)
        {
            select firstonly inventTable
                exists join ecoResProduct
                where ecoResProduct.DisplayProductNumber == this.AcqProductNumber
                &&    ecoResProduct.RecId == inventTable.Product;
        }

        if (_errorWhenNotFound && !inventTable)
        {
            throw error(strFmt("@SYS152315", this.AcqProductNumber, curext()));
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetId</Name>
				<Source><![CDATA[
    public AssetId assetId(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        BOBObjectAssetLog   objectAssetLog;
        AssetTable          assetTable;

        if (this.InventSerialId) // serialized BOs have a single financial owner
        {
            BOBObjectView objectView;

            select firstonly FinancialOwner, PhysicalOwner from objectView 
            where objectView.ObjectId == this.ObjectId;
            
            CompanyId companyId = objectView.FinancialOwner ? objectView.FinancialOwner : objectView.PhysicalOwner;

            select firstonly AssetId from objectAssetLog
            order by CreatedDateTime desc
            where objectAssetLog.ObjectId == this.ObjectId
            &&    objectAssetLog.ValidFrom <= _transDate
            &&  (!objectAssetLog.ValidTo || objectAssetLog.ValidTo >= _transDate)
            &&    objectAssetLog.AssetCompanyId == companyId;
        }
        else // bulk BOs could be owned by several companies at the same time
        {
            select firstonly AssetId from objectAssetLog
            where objectAssetLog.ObjectId == this.ObjectId
                exists join assetTable
                where assetTable.DataAreaId == objectAssetLog.AssetCompanyId
                &&    assetTable.AssetId == objectAssetLog.AssetId
                &&    assetTable.BOBIsBulkParent;
        }

        return objectAssetLog.AssetId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR5871</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ObjectId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ObjectIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ObjectIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>UNKNOWN</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WPPWorkOrderTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>UNKNOWN_1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOBObjectDetailsLog</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>UNKNOWN_2</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOBObjectOwnershipLog</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>UNKNOWN_3</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOBObjectAvailabilityLog</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOBObjectLocationLog</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FINDefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayOperationalProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FleetNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BSAContract</Name>
			<Label>@DNR7002</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BSADisplayActiveContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BSADisplayActiveContractDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WarrantyToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editProdDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS334002</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FINDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>External</Name>
			<Label>@DNR5874</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayOrganizationName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FleetNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventSerialId</Name>
			<Label>@SYS477</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS110757</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FleetNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrganizationParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReferenceGroup</Name>
			<Label>@DNR5863</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FleetNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayOperationalProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcqProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Specifications</Name>
			<Label>@SYS17781</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayAssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WPPWorkOrderPlanning</Name>
			<Label>@DNR6463</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WPPResourceGroupRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<ConfigurationKey>DNRDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Category</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>BOBObjectCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalObjectId</Name>
			<ExtendedDataType>BOBExternalObjectId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FINDefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSerialId</Name>
			<AliasFor>ObjectId</AliasFor>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ConfigurationKey>DNRDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ObjectId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>BOBObjectId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RentalTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>BOBRentalTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>smmBusRelAccount</Name>
			<AllowEdit>No</AllowEdit>
			<ConfigurationKey>DNRDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>smmBusRelAccount</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS124782</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>WarrantyToDate</Name>
			<ExtendedDataType>BOBWarrantyToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WPPResourceGroupRecId</Name>
			<ExtendedDataType>WPPResourceGroupRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FleetNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>BOBFleetNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreateMaintenancePlan</Name>
			<Label>@DNR10146</Label>
			<SaveContents>No</SaveContents>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AcqProductNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>EcoResProductDisplayProductNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrganizationParty</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Label>@SYS38151</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ObjectIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ObjectId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SerialNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventSerialId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FleetNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FleetNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RentalTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RentalTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBObjectTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOBObjectTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ObjectId</Name>
					<Field>ObjectId</Field>
					<RelatedField>ObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ObjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOBRentalType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOBRentalType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RentalTypeId</Name>
					<Field>RentalTypeId</Field>
					<RelatedField>RentalTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FINDefaultDimension</Name>
					<Field>FINDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSerial</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSerial</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSerialId</Name>
					<SourceEDT>InventSerialId</SourceEDT>
					<Field>InventSerialId</Field>
					<RelatedField>InventSerialId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemSerialIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WPPResourceTable</Name>
			<RelatedTable>WPPResourceTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<ValueStr>NoYes::No</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WPPResourceGroupRecId</Name>
					<Field>WPPResourceGroupRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResProduct</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AcqProductNumber</Name>
					<Field>AcqProductNumber</Field>
					<RelatedField>DisplayProductNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirOrganization</Name>
			<RelatedTable>DirOrganization</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrganizationParty</Name>
					<Field>OrganizationParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>