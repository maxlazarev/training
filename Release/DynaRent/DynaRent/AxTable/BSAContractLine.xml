<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BSAContractLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BSAContractLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>contractTable</Name>
				<Source><![CDATA[
    public BSAContractTable contractTable(boolean _selectForUpdate = false)
    {
        BSAContractTable contractTable;
        ;
    
        if (_selectForUpdate)
        {
            contractTable.selectForUpdate(_selectForUpdate);
        }
    
        select firstonly contractTable
        where contractTable.ContractId == this.ContractId;
    
        return contractTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpContractLineMaintPlan</Name>
				<Source><![CDATA[
    public void initFromTmpContractLineMaintPlan(BSATmpContractLineMaintPlan _tmpContractLineMaintPlan)
    {
        this.ContractId                 = _tmpContractLineMaintPlan.ContractId;
        this.AgreementType              = _tmpContractLineMaintPlan.AgreementType;
        this.AgreementRelation          = _tmpContractLineMaintPlan.AgreementRelation;
        this.ContractLineTierType       = _tmpContractLineMaintPlan.ContractLineTierType;
        this.RefTableId                 = _tmpContractLineMaintPlan.RefTableId;
        this.RefRecId                   = _tmpContractLineMaintPlan.RefRecId;
        this.Value                      = [_tmpContractLineMaintPlan.BOBMaintenancePlanCode, _tmpContractLineMaintPlan.IncludePlan];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpContractLinePricing</Name>
				<Source><![CDATA[
    public void initFromTmpContractLinePricing(BSATmpContractLinePricing _tmpContractLinePricing)
    {
        this.ContractId                 = _tmpContractLinePricing.ContractId;
        this.AgreementType              = _tmpContractLinePricing.AgreementType;
        this.AgreementRelation          = _tmpContractLinePricing.AgreementRelation;
        this.ContractLineTierType       = _tmpContractLinePricing.ContractLineTierType;
        this.RefTableId                 = _tmpContractLinePricing.RefTableId;
        this.RefRecId                   = _tmpContractLinePricing.RefRecId;
        this.Value                      =[_tmpContractLinePricing.TaskRelation,
                                          _tmpContractLinePricing.TaskType,
                                          _tmpContractLinePricing.PriceGroupId,
                                          _tmpContractLinePricing.ProjLinePropertyId,
                                          _tmpContractLinePricing.MaxCalls];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpContractLineSubscription</Name>
				<Source><![CDATA[
    public void initFromTmpContractLineSubscription(BSATmpContractLineSubscription _tmpContractLineSubscription)
    {
        this.ContractId                 = _tmpContractLineSubscription.ContractId;
        this.AgreementType              = _tmpContractLineSubscription.AgreementType;
        this.AgreementRelation          = _tmpContractLineSubscription.AgreementRelation;
        this.ContractLineTierType       = _tmpContractLineSubscription.ContractLineTierType;
        this.RefTableId                 = _tmpContractLineSubscription.RefTableId;
        this.RefRecId                   = _tmpContractLineSubscription.RefRecId;
        this.Value                      =[_tmpContractLineSubscription.Name,
                                          _tmpContractLineSubscription.SMASubscriptionGroupId,
                                          _tmpContractLineSubscription.SMABasePrice,
                                          _tmpContractLineSubscription.ProjCategoryId,
                                          _tmpContractLineSubscription.FlatFee,
                                          _tmpContractLineSubscription.Active,
                                          _tmpContractLineSubscription.InvoiceGroupId,
                                          _tmpContractLineSubscription.SMAStartDate,
                                          _tmpContractLineSubscription.SMAEndDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    
        if (this.ContractLineTierType != BSAContractLineTierType::Pricing) //No synch on pricing (yet)
        {
            BSAContractTable::synchRequired(this.ContractId, this.ContractLineTierType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
    
        if (this.ContractLineTierType != BSAContractLineTierType::Pricing) //No synch on pricing (yet)
        {
            BSAContractTable::synchRequired(this.ContractId, this.ContractLineTierType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdate</Name>
				<Source><![CDATA[
    public static void createOrUpdate(Common _common)
    {
        BSATmpContractLineMaintPlan     tmpContractLineMaintPlan;
        BSATmpContractLinePricing       tmpContractLinePricing;
        BSATmpContractLineSubscription  tmpContractLineSubscription;
        BSAContractLine                 contractLine;
    
        ttsBegin;
    
        switch (_common.TableId)
        {
            case tableNum(BSATmpContractLineMaintPlan) :
                tmpContractLineMaintPlan = _common;
    
                select forUpdate contractLine
                where   contractLine.ContractId                 == tmpContractLineMaintPlan.ContractId
                &&      contractLine.AgreementType              == tmpContractLineMaintPlan.AgreementType
                &&      contractLine.AgreementRelation          == tmpContractLineMaintPlan.AgreementRelation
                &&      contractLine.ContractLineTierType       == tmpContractLineMaintPlan.ContractLineTierType
                &&      contractLine.RefTableId                 == tmpContractLineMaintPlan.RefTableId
                &&      contractLine.RefRecId                   == tmpContractLineMaintPlan.RefRecId;
    
                contractLine.initFromTmpContractLineMaintPlan(tmpContractLineMaintPlan);
                BSAContractTable::synchRequired(contractLine.ContractId, contractLine.ContractLineTierType);
                break;
    
            case tableNum(BSATmpContractLinePricing) :
                tmpContractLinePricing = _common;
    
                select forUpdate contractLine
                where   contractLine.ContractId                 == tmpContractLinePricing.ContractId
                &&      contractLine.AgreementType              == tmpContractLinePricing.AgreementType
                &&      contractLine.AgreementRelation          == tmpContractLinePricing.AgreementRelation
                &&      contractLine.ContractLineTierType       == tmpContractLinePricing.ContractLineTierType
                &&      contractLine.RefTableId                 == tmpContractLinePricing.RefTableId
                &&      contractLine.RefRecId                   == tmpContractLinePricing.RefRecId;
    
                contractLine.initFromTmpContractLinePricing(tmpContractLinePricing);
                break;
    
            case tableNum(BSATmpContractLineSubscription) :
                tmpContractLineSubscription = _common;
    
                select forUpdate contractLine
                where   contractLine.ContractId                 == tmpContractLineSubscription.ContractId
                &&      contractLine.AgreementType              == tmpContractLineSubscription.AgreementType
                &&      contractLine.AgreementRelation          == tmpContractLineSubscription.AgreementRelation
                &&      contractLine.ContractLineTierType       == tmpContractLineSubscription.ContractLineTierType
                &&      contractLine.RefTableId                 == tmpContractLineSubscription.RefTableId
                &&      contractLine.RefRecId                   == tmpContractLineSubscription.RefRecId;
    
                contractLine.initFromTmpContractLineSubscription(tmpContractLineSubscription);
                BSAContractTable::synchRequired(contractLine.ContractId, contractLine.ContractLineTierType);
                break;
    
            default :
                throw error(strFmt("@DNR8334", tableId2name(_common.TableId)));
        }
    
        if (contractLine.RecId)
        {
            contractLine.update();
        }
        else
        {
            contractLine.insert();
        }
    
        ttsCommit;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static BSAContractLine findRecId(RecId _recId, boolean _update = false)
    {
        BSAContractLine contractLine;
    
        if(_recId)
        {
            if (_update)
            {
                contractLine.selectForUpdate(_update);
            }
    
            select firstOnly contractLine
            where contractLine.RecId == _recId;
        }
    
        return contractLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    public static void remove(Common _common)
    {
        BSATmpContractLineMaintPlan     tmpContractLineMaintPlan;
        BSATmpContractLinePricing       tmpContractLinePricing;
        BSATmpContractLineSubscription  tmpContractLineSubscription;
        BSAContractLine                 contractLine;
    
        switch (_common.TableId)
        {
            case tableNum(BSATmpContractLineMaintPlan) :
                tmpContractLineMaintPlan = _common;
    
                delete_from contractLine
                where   contractLine.ContractId                 == tmpContractLineMaintPlan.ContractId
                &&      contractLine.AgreementType              == tmpContractLineMaintPlan.AgreementType
                &&      contractLine.AgreementRelation          == tmpContractLineMaintPlan.AgreementRelation
                &&      contractLine.ContractLineTierType       == tmpContractLineMaintPlan.ContractLineTierType
                &&      contractLine.RefTableId                 == tmpContractLineMaintPlan.RefTableId
                &&      contractLine.RefRecId                   == tmpContractLineMaintPlan.RefRecId;
    
                BSAContractTable::synchRequired(tmpContractLineMaintPlan.ContractId, BSAContractLineTierType::Subscription);
                break;
    
            case tableNum(BSATmpContractLinePricing) :
                tmpContractLinePricing = _common;
    
                delete_from contractLine
                where   contractLine.ContractId                 == tmpContractLinePricing.ContractId
                &&      contractLine.AgreementType              == tmpContractLinePricing.AgreementType
                &&      contractLine.AgreementRelation          == tmpContractLinePricing.AgreementRelation
                &&      contractLine.ContractLineTierType       == tmpContractLinePricing.ContractLineTierType
                &&      contractLine.RefTableId                 == tmpContractLinePricing.RefTableId
                &&      contractLine.RefRecId                   == tmpContractLinePricing.RefRecId;
    
                //No synch on pricing (yet)
                break;
    
            case tableNum(BSATmpContractLineSubscription) :
                tmpContractLineSubscription = _common;
    
                delete_from contractLine
                where   contractLine.ContractId                 == tmpContractLineSubscription.ContractId
                &&      contractLine.AgreementType              == tmpContractLineSubscription.AgreementType
                &&      contractLine.AgreementRelation          == tmpContractLineSubscription.AgreementRelation
                &&      contractLine.ContractLineTierType       == tmpContractLineSubscription.ContractLineTierType
                &&      contractLine.RefTableId                 == tmpContractLineSubscription.RefTableId
                &&      contractLine.RefRecId                   == tmpContractLineSubscription.RefRecId;
    
                BSAContractTable::synchRequired(tmpContractLineSubscription.ContractId, BSAContractLineTierType::Subscription);
                break;
    
            default :
                throw error(strFmt("@DNR8334", tableId2name(_common.TableId)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<FormRef>BSAContractDetails</FormRef>
	<Label>@DNR8653</Label>
	<ListPageRef>BSAContractTableListPage</ListPageRef>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ContractId</TitleField1>
	<TitleField2>AgreementRelation</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>ContractLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLineTierType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLineTierType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLineTierType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementRelation</Name>
			<ExtendedDataType>BSAAgreementRelation</ExtendedDataType>
			<Label>@SYS80109</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgreementType</Name>
			<EnumType>BSAAgreementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<ExtendedDataType>BSAContractId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContractLineTierType</Name>
			<EnumType>BSAContractLineTierType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Value</Name>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ContractLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContractLineTierType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BOBDefaultMaintenancePlan</Name>
			<RelatedTable>BOBDefaultMaintenancePlan</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOBObjectTable</Name>
			<RelatedTable>BOBObjectTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AgreementType</Name>
					<Field>AgreementType</Field>
					<ValueStr>BSAAgreementType::ObjectId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementRelation</Name>
					<Field>AgreementRelation</Field>
					<RelatedField>ObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemGroup</Name>
			<RelatedTable>InventItemGroup</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AgreementType</Name>
					<Field>AgreementType</Field>
					<ValueStr>BSAAgreementType::ItemGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementRelation</Name>
					<Field>AgreementRelation</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<RelatedTable>InventTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AgreementType</Name>
					<Field>AgreementType</Field>
					<ValueStr>BSAAgreementType::ItemId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementRelation</Name>
					<Field>AgreementRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WPPTaskGroup</Name>
			<RelatedTable>WPPTaskGroup</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WPPWorkOrderTaskTable</Name>
			<RelatedTable>WPPWorkOrderTaskTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BSAContractTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BSAContractTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContractId</Name>
					<SourceEDT>BSAContractId</SourceEDT>
					<Field>ContractId</Field>
					<RelatedField>ContractId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>