<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAGContractTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAGContractTable extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayRelationName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RelationName displayRelationName()
    {
        RelationName ret;
    
        if(this.RelationAccount)
        {
            ret = (select firstOnly RelationName from RAGContractView
                   where RAGContractView.ContractId == this.ContractId).RelationName;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.ContractType == RAGContractType::RentalOrder
        ||  this.ContractType == RAGContractType::RentalOrderLine)
        {
            this.setRentalSubRentalFromModule();
        }
        else
        {
            this.ReferenceModule = RAGContractRefModule::None;
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveOnDate</Name>
				<Source><![CDATA[
    public boolean isActiveOnDate(TransDate _transDate)
    {
        boolean ret = false;
    
        if (this.Status == RAGContractStatus::Confirmed)
        {
            ret = (this.FromDate <= _transDate && this.ToDate >= _transDate);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(RAGContractTable, ContractType):
                this.RelationAccount = '';
    
                if (this.ContractType != RAGContractType::RentalOrderLine
                &&  this.ContractType != RAGContractType::RentalOrder)
                {
                    this.ReferenceModule = RAGContractRefModule::None;
                }
                break;
    
            case fieldNum(RAGContractTable, ReferenceModule):
                this.RelationAccount = '';
                this.setRentalSubRentalFromModule();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalHeaderLine</Name>
				<Source><![CDATA[
    public Common rentalHeaderLine(boolean _forUpdate = false)
    {
        Common ret;
    
        switch (this.ContractType)
        {
            case RAGContractType::RentalOrder:
                switch (this.ReferenceModule)
                {
                    case RAGContractRefModule::Sales:
                        ret = SalesTable::find(this.RelationAccount, _forUpdate);
                        break;
    
                    case RAGContractRefModule::Purchase:
                        ret = PurchTable::find(this.RelationAccount, _forUpdate);
                        break;
    
                    case RAGContractRefModule::Quotation:
                        ret = SalesQuotationTable::find(this.RelationAccount, _forUpdate);
                        break;
                }
                break;
    
            case RAGContractType::RentalOrderLine:
    
                switch (this.ReferenceModule)
                {
                    case RAGContractRefModule::Sales:
                        ret = SalesLine::findInventTransId(this.RelationAccount, _forUpdate);
                        break;
    
                    case RAGContractRefModule::Purchase:
                        ret = PurchLine::findInventTransId(this.RelationAccount, _forUpdate);
                        break;
    
                    case RAGContractRefModule::Quotation:
                        ret = SalesQuotationLine::findInventTransId(this.RelationAccount, _forUpdate);
                        break;
                }
                break;
        }
    
        if (!ret)
        {
            throw error(strFmt("@DNR6591",
                               this.ReferenceModule,
                               strLwr(this.ContractType == RAGContractType::RentalOrder ? "@SYS69861" : "@SYS70473"),
                               this.RelationAccount));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRentalSubRentalFromModule</Name>
				<Source><![CDATA[
    public void setRentalSubRentalFromModule()
    {
        if (this.ContractType == RAGContractType::RentalOrder
        ||  this.ContractType == RAGContractType::RentalOrderLine)
        {
            this.RentalSubRental = (this.ReferenceModule == RAGContractRefModule::Purchase ?
                                    RAGRentalSubRental::SubRental :
                                    RAGRentalSubRental::Rental);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.ContractType == RAGContractType::RentalOrder
        ||  this.ContractType == RAGContractType::RentalOrderLine)
        {
            this.setRentalSubRentalFromModule();
        }
        else
        {
            this.ReferenceModule = RAGContractRefModule::None;
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
    
        switch (_fieldIdToCheck)
        {
            case fieldNum(RAGContractTable, FromDate):
                this.validateStatusChange(this.Status);
                break;
    
            case fieldNum(RAGContractTable, ToDate):
                this.validateStatusChange(this.Status);
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusChange</Name>
				<Source><![CDATA[
    public boolean validateStatusChange(RAGContractStatus _newStatus)
    {
        boolean             ret;
        RAGContractTable    contractTableValidate;
    
        ret = true;
    
        if (_newStatus == RAGContractStatus::Confirmed)
        {
            select firstOnly RecId from contractTableValidate
            where contractTableValidate.RecId           != this.RecId
            &&    contractTableValidate.Status          == RAGContractStatus::Confirmed
            &&    contractTableValidate.ContractType    == this.ContractType
            &&    contractTableValidate.ReferenceModule == this.ReferenceModule
            &&    contractTableValidate.RelationAccount == this.RelationAccount
            &&    contractTableValidate.RentalSubRental == this.RentalSubRental
            &&    contractTableValidate.CurrencyCode    == this.CurrencyCode
    
            &&  ((contractTableValidate.FromDate <= this.FromDate && contractTableValidate.ToDate >= this.FromDate) ||
                 (contractTableValidate.FromDate <= this.ToDate   && contractTableValidate.ToDate >= this.ToDate)   ||
                 (contractTableValidate.FromDate >= this.FromDate && contractTableValidate.ToDate <= this.ToDate));
    
            if (contractTableValidate.RecId)
            {
                ret = checkFailed(strFmt("@DNR7685", RAGContractStatus::Confirmed, this.ContractType, this.RelationAccount));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        RAGContractTable    contractTable;
        RAGContractTable    defaultContract;
    
        ret = super();
    
        if (this.FromDate > this.ToDate)
        {
            ret = checkFailed("@SYS91020");
        }
    
        if (this.ContractType == RAGContractType::Default)
        {
            if (this.RelationAccount)
            {
                ret = checkFailed("@DNR2563");
            }
        }
        else
        {
            if (this.isActiveOnDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
            {
                defaultContract = RAGContractTable::findDefaultContract(this.CurrencyCode, this.RentalSubRental);
    
                if (!defaultContract
                ||   defaultContract.ContractId == this.ContractId)
                {
                    ret = checkFailed(strFmt("@DNR299", this.RentalSubRental, this.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                }
            }
    
            if (!this.RelationAccount)
            {
                ret = checkFailed(strFmt("@DNR1721", tablePName(RAGContractTable), this.ContractType, fieldPName(RAGContractTable, RelationAccount)));
            }
    
            if ((this.ContractType == RAGContractType::RentalOrder || this.ContractType == RAGContractType::RentalOrderLine)
            &&  this.ReferenceModule == RAGContractRefModule::None)
            {
                ret = checkFailed(strFmt("@DNR1721", tablePName(RAGContractTable), this.ContractType, fieldPName(RAGContractTable, ReferenceModule)));
            }
        }
    
        if (this.Status == RAGContractStatus::Confirmed)
        {
            select firstonly ContractId from contractTable
            where contractTable.ContractType    == this.ContractType
            &&    contractTable.RelationAccount == this.RelationAccount
            &&    contractTable.CurrencyCode    == this.CurrencyCode
            &&    contractTable.ReferenceModule == this.ReferenceModule
            &&    contractTable.RentalSubRental == this.RentalSubRental
            &&    contractTable.Status          == RAGContractStatus::Confirmed
            &&    contractTable.ContractId      != this.ContractId
            &&  ((this.FromDate >= contractTable.FromDate && this.FromDate <= contractTable.ToDate)
            ||   (this.ToDate   >= contractTable.FromDate && this.ToDate   <= contractTable.ToDate)
            ||   (this.FromDate <= contractTable.FromDate && this.ToDate   >= contractTable.ToDate));
    
            if (contractTable)
            {
                ret = checkFailed(strFmt("@DNR6592", contractTable.RentalSubRental, contractTable.ContractId));
            }
        }
    
        // only a single contract per rental line is allowed
        if (ret
        &&  this.ContractType == RAGContractType::RentalOrderLine)
        {
            select firstonly ContractId from contractTable
            where contractTable.ContractType == this.ContractType
            &&    contractTable.ReferenceModule == this.ReferenceModule
            &&    contractTable.RelationAccount == this.RelationAccount
            &&    contractTable.RecId != this.RecId;
    
            if(contractTable)
            {
                ret = checkFailed(strFmt("@DNR6593",
                                         strLwr(this.RecId ? "@SYS4167" : "@SYS40267"),
                                         tablePName(RAGContractTable),
                                         tableStr(RAGContractTable),
                                         this.RelationAccount,
                                         contractTable.ContractId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatus</Name>
				<Source><![CDATA[
    public static void changeStatus(RAGContractId           _contractId,
                                    RAGContractStatus       _oldStatus,
                                    RAGContractStatus       _newStatus,
                                    DNRReasonCode           _reasonCode,
                                    RORAmendmentReasonText  _reasonText)
    {
        RAGContractTable contractTable;
    
        ttsBegin;
        contractTable = RAGContractTable::find(_contractId, true);
    
        if (contractTable)
        {
            if (contractTable.validateStatusChange(_newStatus))
            {
                contractTable.Status = _newStatus;
                contractTable.update();
    
                if (RAGParameters::find().CreateStatusHistory)
                {
                    RAGContractStatusHistory::createNewHistoryEntry(_contractId, _oldStatus, _newStatus, _reasonCode, _reasonText);
                }
            }
            else
            {
                throw error("@DNR1977");
            }
        }
        else
        {
            throw error(strFmt("@DNR7332", _contractId));
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RAGContractTable find(RAGContractId _contractId, boolean _forUpdate = false)
    {
        RAGContractTable contractTable;
    
        if (_contractId)
        {
            contractTable.selectForUpdate(_forUpdate);
    
            select firstonly contractTable
            where contractTable.ContractId == _contractId;
        }
    
        return contractTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultContract</Name>
				<Source><![CDATA[
    public static RAGContractTable findDefaultContract(CurrencyCode         _currencyCode,
                                                       RAGRentalSubRental   _rentalSubRental,
                                                       TransDate            _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        RAGContractTable defaultContract;
    
        select firstonly defaultContract
        where defaultContract.ContractType      == RAGContractType::Default
        &&    defaultContract.RentalSubRental   == _rentalSubRental
        &&    defaultContract.CurrencyCode      == _currencyCode
        &&    defaultContract.Status            == RAGContractStatus::Confirmed
        &&    defaultContract.FromDate          <= _transDate
        &&    defaultContract.ToDate            >= _transDate;
    
        return defaultContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFromRentalLine</Name>
				<Source><![CDATA[
    public static RAGContractTable findOrCreateFromRentalLine(RORRentalLine _rentalLine, RAGTmpContractLine _tmpContractLine)
    {
        RAGContractTable        contractTable;
        RORRentalDateTimes      rentalDates;
        RAGContractRefModule    referenceModule;
        RAGRelationAccount      relationAccount;
        RORRentalDateTimeType   dateType;
        FieldId                 fieldIdRentalDate;
        FromDate                contractFromDate;
        RAGRentalSubRental      rentalSubRental;
    
        if (_rentalLine)
        {
            // get the from date
            if (_rentalLine.RecId)
            {
                rentalDates = _rentalLine.RORRentalDateTimesHost::rentalDateTimes();
                dateType = RAGParameters::find().RORLineDateTimeType;
            }
            else
            {
                rentalDates = _rentalLine.RORRentalDateTimesHost::rentalDateTimes();
                dateType = RAGParameters::find().RORHeaderDateTimeType;
            }
    
            if(!dateType)
            {
                throw error("@DNR6665");
            }
    
            fieldIdRentalDate = RORRentalDateTimes::dateTimeType2FieldId(dateType);
            contractFromDate  = rentalDates.(fieldIdRentalDate);
    
            // get the module and account
            switch (_rentalLine.TableId)
            {
                case tableNum(SalesLine):
                    referenceModule = RAGContractRefModule::Sales;
                    relationAccount = _rentalLine.InventTransId;
                    rentalSubRental = RAGRentalSubRental::Rental;
                    break;
    
                case tableNum(PurchLine):
                    referenceModule = RAGContractRefModule::Purchase;
                    relationAccount = _rentalLine.InventTransId;
                    rentalSubRental = RAGRentalSubRental::SubRental;
                    break;
    
                case tableNum(SalesQuotationLine):
                    referenceModule = RAGContractRefModule::Quotation;
                    relationAccount = _rentalLine.InventTransId;
                    rentalSubRental = RAGRentalSubRental::Rental;
                    break;
    
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
    
            select firstonly contractTable
            where contractTable.ContractType    == RAGContractType::RentalOrderLine
            &&    contractTable.RelationAccount == relationAccount
            &&    contractTable.CurrencyCode    == _rentalLine.CurrencyCode
            &&    contractTable.FromDate        <= contractFromDate
            &&    contractTable.Status          == RAGContractStatus::Confirmed
            &&    contractTable.ReferenceModule == referenceModule
            &&    contractTable.RentalSubRental == rentalSubRental;
    
            if (!contractTable)
            {
                contractTable.ContractType      = RAGContractType::RentalOrderLine;
                contractTable.RelationAccount   = relationAccount;
                contractTable.FromDate          = contractFromDate;
                contractTable.ToDate            = dateMax();
                contractTable.CurrencyCode      = _rentalLine.CurrencyCode;
                contractTable.Status            = RAGContractStatus::Confirmed;
                contractTable.ReferenceModule   = referenceModule;
                contractTable.RentalSubRental   = rentalSubRental;
                contractTable.ContractId        = RAGContractTable::getNewContractId();
                contractTable.insert();
    
                // we're going to create a new contract, which is blank
                // and doesn't not contain any overridden elements
                // (it inherits all contract elements from other contracts)
                // we need to reset all the overridden flags so any
                // modifications are going to be inserted rather than updated
                _tmpContractLine.ContractId     = contractTable.ContractId;
                _tmpContractLine.ContractName   = contractTable.Description;
                _tmpContractLine.resetOverridden();
            }
        }
    
        return contractTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewContractId</Name>
				<Source><![CDATA[
    public static RAGContractId getNewContractId()
    {
        return NumberSeq::newGetNum(RAGParameters::numRefContractId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromRentalLine</Name>
				<Source><![CDATA[
    public static client server void updateFromRentalLine(RORRentalDateTimes _rentalDatesOld,
                                                          RORRentalDateTimes _rentalDatesNew)
    {
        RAGContractTable        contractTable;
        RAGContractRefModule    referenceModule;
        RAGRelationAccount      relationAccount;
        RORRentalDateTimeType   dateType;
        FieldId                 fieldIdRentalDate;
        FromDate                contractFromDate;
        FromDate                contractFromDateNew;
        RAGRentalSubRental      rentalSubRental;
        RORRentalLine           rentalLine;
    
        switch (_rentalDatesOld.RefTableId)
        {
            case tableNum(SalesLine) :
                rentalLine = SalesLine::findRecId(_rentalDatesOld.RefRecId);
                break;

            case tableNum(SalesQuotationLine) :
                rentalLine = SalesQuotationLine::findRecId(_rentalDatesOld.RefRecId);
                break;
    
            case tableNum(PurchLine) :
                rentalLine = PurchLine::findRecId(_rentalDatesOld.RefRecId);
                break;
        }
    
        if (rentalLine && _rentalDatesOld && _rentalDatesNew)
        {
            // get the from date
            dateType = RAGParameters::find().RORLineDateTimeType;
    
            if(!dateType)
            {
                throw error("@DNR6665");
            }
    
            fieldIdRentalDate = RORRentalDateTimes::dateTimeType2FieldId(dateType);
            contractFromDate = _rentalDatesOld.(fieldIdRentalDate);
            contractFromDateNew = _rentalDatesNew.(fieldIdRentalDate);
    
            if (contractFromDateNew
            &&  contractFromDateNew != contractFromDate)
            {
                // get the module and account
                switch (rentalLine.TableId)
                {
                    case tableNum(SalesLine):
                        referenceModule = RAGContractRefModule::Sales;
                        relationAccount = rentalLine.InventTransId;
                        rentalSubRental = RAGRentalSubRental::Rental;
                        break;

                    case tableNum(SalesQuotationLine):
                        referenceModule = RAGContractRefModule::Quotation;
                        relationAccount = rentalLine.InventTransId;
                        rentalSubRental = RAGRentalSubRental::Rental;
                        break;
    
                    case tableNum(PurchLine):
                        referenceModule = RAGContractRefModule::Purchase;
                        relationAccount = rentalLine.InventTransId;
                        rentalSubRental = RAGRentalSubRental::SubRental;
                        break;
    
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
    
                ttsbegin;
                select forupdate contractTable
                where contractTable.ContractType    == RAGContractType::RentalOrderLine
                &&    contractTable.RelationAccount == relationAccount
                &&    contractTable.CurrencyCode    == rentalLine.CurrencyCode
                &&    contractTable.FromDate        <= contractFromDate
                &&    contractTable.Status          == RAGContractStatus::Confirmed
                &&    contractTable.ReferenceModule == referenceModule
                &&    contractTable.RentalSubRental == rentalSubRental;
    
                if (contractTable)
                {
                    contractTable.FromDate          = contractFromDateNew;
                    contractTable.update();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<FormRef>RAGContractTable</FormRef>
	<Label>@DNR6447</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ContractId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ContractIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>ContractIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>relationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelationAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>relationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalSubRental</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelationAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalSubRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS69996</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>isActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelationAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalSubRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelationAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRelationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalSubRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceModule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS12687</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Validity</Name>
			<Label>@SYS35164</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RAGContractId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContractType</Name>
			<EnumType>RAGContractType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<HelpText>@DNR123</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isActive</Name>
			<HelpText>@DNR6427</HelpText>
			<Label>@SYS26201</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceModule</Name>
			<EnumType>RAGContractRefModule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RelationAccount</Name>
			<ExtendedDataType>RAGRelationAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RentalSubRental</Name>
			<EnumType>RAGRentalSubRental</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RAGContractStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<HelpText>@DNR123</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseGroupId</Name>
			<ExtendedDataType>DNRWarehouseGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ContractIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RelationCurrencyDatesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RelationAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReferenceModule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RentalSubRental</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::Project</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceModule</Name>
					<Field>ReferenceModule</Field>
					<ValueStr>RAGContractRefModule::Purchase</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::RentalOrderLine</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PurchaseType</Name>
					<RelatedField>PurchaseType</RelatedField>
					<ValueStr>PurchaseType::RORSubRental</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceModule</Name>
					<Field>ReferenceModule</Field>
					<ValueStr>RAGContractRefModule::Purchase</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::RentalOrder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAGBusRelContractGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RAGBusRelContractGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::BusRelContractGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>BusRelGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RORVenueGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RORVenueGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::VenueGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>VenueGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RORVenueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RORVenueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::Venue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>VenueCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceModule</Name>
					<Field>ReferenceModule</Field>
					<ValueStr>RAGContractRefModule::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::RentalOrderLine</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceModule</Name>
					<Field>ReferenceModule</Field>
					<ValueStr>RAGContractRefModule::Quotation</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::RentalOrderLine</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>QuotationType</Name>
					<RelatedField>QuotationType</RelatedField>
					<ValueStr>QuotationType::RORRental</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceModule</Name>
					<Field>ReferenceModule</Field>
					<ValueStr>RAGContractRefModule::Quotation</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::RentalOrder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>SalesType</Name>
					<RelatedField>SalesType</RelatedField>
					<ValueStr>SalesType::RORRental</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceModule</Name>
					<Field>ReferenceModule</Field>
					<ValueStr>RAGContractRefModule::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::RentalOrder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmBusRelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>smmBusRelTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::BusinessRelation</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>BusRelAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::ProjectGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>ProjGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DNRWarehouseGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DNRWarehouseGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::WarehouseGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ContractType</Name>
					<Field>ContractType</Field>
					<ValueStr>RAGContractType::Warehouse</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>