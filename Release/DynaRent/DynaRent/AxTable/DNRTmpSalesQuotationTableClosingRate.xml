<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRTmpSalesQuotationTableClosingRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRTmpSalesQuotationTableClosingRate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public static DNRTmpSalesQuotationTableClosingRate populate(DNRTmpSalesQuotationTableClosingRate _tmpSalesQuotationTableClosingRate, utcdatetime _fromDateTime, utcdatetime _toDateTime, WorkerSalesResponsible _salesRespoinsible)
    {
        const int numIntervals = 20;
        int totalConfirmed, totalLost, totalCancelled, totalCount;
        SalesQuotationTable salesQuotationTable;
        utcdatetime fromDateTime = _fromDateTime;
        utcdatetime toDateTime = _toDateTime;
        RecordInsertList closingRateInsertList = new RecordInsertList(tableNum(DNRTmpSalesQuotationTableClosingRate), false, false, false, false, false, _tmpSalesQuotationTableClosingRate);
        
        if (_fromDateTime == DateTimeUtil::minValue())
        {
            select firstOnly CreatedDateTime from salesQuotationTable
            order by CreatedDateTime
            where (salesQuotationTable.QuotationType == QuotationType::RORProjRental
                || salesQuotationTable.QuotationType == QuotationType::RORRental);

            fromDateTime = salesQuotationTable.CreatedDateTime;
        }

        if (_toDateTime == DateTimeUtil::maxValue())
        {
            select firstOnly CreatedDateTime from salesQuotationTable
            order by CreatedDateTime desc
            where (salesQuotationTable.QuotationType == QuotationType::RORProjRental
                || salesQuotationTable.QuotationType == QuotationType::RORRental);

            toDateTime = salesQuotationTable.CreatedDateTime;
        }

        [totalConfirmed, totalLost, totalCancelled] = DNRTmpSalesQuotationTableClosingRate::calculateQuotationCount(fromDateTime, toDateTime, _salesRespoinsible);
        totalCount = totalConfirmed + totalLost + totalCancelled;

        int64 periodSeconds = DateTimeUtil::getDifference(toDateTime, fromDateTime);

        int intervalSeconds = round(periodSeconds / numIntervals, 0);

        utcdatetime intervalFromDateTime, intervalToDateTime;
        intervalFromDateTime = fromDateTime;

        for (int i = 0; i < numIntervals; i++)
        {
            _tmpSalesQuotationTableClosingRate.clear();

            intervalToDateTime = DateTimeUtil::addSeconds(intervalFromDateTime, intervalSeconds);
            int intervalConfirmed, intervalLost, intervalCancelled;

            if (totalCount > 0)
            {
                [intervalConfirmed, intervalLost, intervalCancelled] = DNRTmpSalesQuotationTableClosingRate::calculateQuotationCount(intervalFromDateTime, intervalToDateTime, _salesRespoinsible);

                _tmpSalesQuotationTableClosingRate.ConfirmedPct = (intervalConfirmed / totalCount) * 100;
                _tmpSalesQuotationTableClosingRate.LostPct = (intervalLost / totalCount) * 100;
                _tmpSalesQuotationTableClosingRate.CancelledPct = (intervalCancelled / totalCount) * 100;
            }
            else
            {
                _tmpSalesQuotationTableClosingRate.ConfirmedPct = 0;
                _tmpSalesQuotationTableClosingRate.LostPct = 0;
                _tmpSalesQuotationTableClosingRate.CancelledPct = 0;
            }

            _tmpSalesQuotationTableClosingRate.CalculationDate = DateTimeUtil::date(DateTimeUtil::addSeconds(intervalFromDateTime, intervalSeconds / 2));

            closingRateInsertList.add(_tmpSalesQuotationTableClosingRate);
            intervalFromDateTime = intervalToDateTime;
        }

        closingRateInsertList.insertDatabase();

        return _tmpSalesQuotationTableClosingRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuotationCount</Name>
				<Source><![CDATA[
    protected static container calculateQuotationCount(utcdatetime _fromDateTime, utcdatetime _toDateTime, WorkerSalesResponsible _salesRespoinsible)
    {
        SalesQuotationTable salesQuotationTable;
        int totalConfirmed, totalLost, totalCancelled;

        date fromDate = DateTimeUtil::date(_fromDateTime);
        date toDate = DateTimeUtil::date(_toDateTime);

        select count(RecId) from salesQuotationTable
            where (salesQuotationTable.QuotationType == QuotationType::RORProjRental
                || salesQuotationTable.QuotationType == QuotationType::RORRental)
                && salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed
                && salesQuotationTable.ConfirmDate >= fromDate
                && salesQuotationTable.ConfirmDate <= toDate
                && (!_salesRespoinsible || salesQuotationTable.WorkerSalesResponsible == _salesRespoinsible);

        totalConfirmed = salesQuotationTable.RecId;

        select count(RecId) from salesQuotationTable
            where  (salesQuotationTable.QuotationType == QuotationType::RORProjRental
                || salesQuotationTable.QuotationType == QuotationType::RORRental)
                && salesQuotationTable.QuotationStatus == SalesQuotationStatus::Lost
                && salesQuotationTable.ModifiedDateTime >= _fromDateTime
                && salesQuotationTable.ModifiedDateTime <= _toDateTime
                && (!_salesRespoinsible || salesQuotationTable.WorkerSalesResponsible == _salesRespoinsible);

        totalLost = salesQuotationTable.RecId;

        select count(RecId) from salesQuotationTable
            where  (salesQuotationTable.QuotationType == QuotationType::RORProjRental
                || salesQuotationTable.QuotationType == QuotationType::RORRental)
                && salesQuotationTable.QuotationStatus == SalesQuotationStatus::Cancelled
                && salesQuotationTable.ModifiedDateTime >= _fromDateTime
                && salesQuotationTable.ModifiedDateTime <= _toDateTime
                && (!_salesRespoinsible || salesQuotationTable.WorkerSalesResponsible == _salesRespoinsible);

        totalCancelled = salesQuotationTable.RecId;

        return [totalConfirmed, totalLost, totalCancelled];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConfirmedPct</Name>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LostPct</Name>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CancelledPct</Name>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalculationDate</Name>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>