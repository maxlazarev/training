<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORSubrentalReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RORSubrentalReference extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayPurchExpectedOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORExpectedOffRentDateTime displayPurchExpectedOffRentDateTime()
    {
        PurchLine           purchLine;
        RORRentalDateTimes  rentalDateTimes;
        ROROffRentDateTime  expectedOffRentDateTime;
        RORParameters       rorParameters = RORParameters::find();
        CompanyId           companyId = this.getPurchLineComapnyId();
        ;
    
        changeCompany(companyId)
        {
            purchLine = PurchLine::findInventTransId(this.PurchInventTransId);
        }
    
        if (hasFieldAccess(tablenum(RORRentalDateTimes), fieldnum(RORRentalDateTimes, ExpectedOffRentDateTime))
        && purchLine)
        {
            changeCompany(companyId)
            {
                rentalDateTimes = purchLine.RORRentalDateTimesHost::rentalDateTimes();
            }
        }
    
        if (rentalDateTimes)
        {
            expectedOffRentDateTime  = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingExpectedEnd()));
        }
    
        return expectedOffRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROffRentDateTime displayPurchOffRentDateTime()
    {
        PurchLine           purchLine;
        RORRentalDateTimes  rentalDateTimes;
        ROROffRentDateTime  offRentDateTime;
        RORParameters       rorParameters = RORParameters::find();
        CompanyId           companyId = this.getPurchLineComapnyId();
        ;
    
        changeCompany(companyId)
        {
            purchLine = PurchLine::findInventTransId(this.PurchInventTransId);
        }
    
        if (hasFieldAccess(tablenum(RORRentalDateTimes), fieldnum(RORRentalDateTimes, OffRentDateTime))
        && purchLine)
        {
            changeCompany(companyId)
            {
                rentalDateTimes = purchLine.RORRentalDateTimesHost::rentalDateTimes();
            }
        }
    
        if (rentalDateTimes)
        {
            offRentDateTime  = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd()));
        }
    
        return offRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchOnRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROnRentDateTime displayPurchOnRentDateTime()
    {
        PurchLine           purchLine;
        RORRentalDateTimes  rentalDateTimes;
        ROROnRentDateTime   onRentDateTime;
        CompanyId           companyId = this.getPurchLineComapnyId();
            
        changeCompany(companyId)
        {
            purchLine = PurchLine::findInventTransId(this.PurchInventTransId);
        }
    
        if (hasFieldAccess(tablenum(RORRentalDateTimes), fieldnum(RORRentalDateTimes, OnRentDateTime))
        && purchLine)
        {
            changeCompany(companyId)
            {
                rentalDateTimes = purchLine.RORRentalDateTimesHost::rentalDateTimes();
            }
        }
    
        if (rentalDateTimes)
        {
            onRentDateTime  = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingStart()));
        }
    
        return onRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesExpectedOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display RORExpectedOffRentDateTime displaySalesExpectedOffRentDateTime()
    {
        SalesLine           salesLine = SalesLine::findInventTransId(this.SalesInventTransId);
        RORRentalDateTimes  rentalDateTimes;
        ROROffRentDateTime  expectedOffRentDateTime;
        RORParameters       rorParameters = RORParameters::find();
        ;
    
        if (hasFieldAccess(tablenum(RORRentalDateTimes), fieldnum(RORRentalDateTimes, ExpectedOffRentDateTime))
        && salesLine)
        {
            rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();
        }
    
        if (rentalDateTimes)
        {
            expectedOffRentDateTime  = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingExpectedEnd()));
        }
    
        return expectedOffRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesOffRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROffRentDateTime displaySalesOffRentDateTime()
    {
        SalesLine           salesLine = SalesLine::findInventTransId(this.SalesInventTransId);
        RORRentalDateTimes  rentalDateTimes;
        ROROffRentDateTime  offRentDateTime;
        RORParameters       rorParameters = RORParameters::find();
        ;
    
        if (hasFieldAccess(tablenum(RORRentalDateTimes), fieldnum(RORRentalDateTimes, OffRentDateTime))
        && salesLine)
        {
            rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();
        }
    
        if (rentalDateTimes)
        {
            offRentDateTime  = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd()));
        }
    
        return offRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesOnRentDateTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ROROnRentDateTime displaySalesOnRentDateTime()
    {
        SalesLine           salesLine = SalesLine::findInventTransId(this.SalesInventTransId);
        RORRentalDateTimes  rentalDateTimes;
        ROROffRentDateTime  onRentDateTime;
            
        if (hasFieldAccess(tablenum(RORRentalDateTimes), fieldnum(RORRentalDateTimes, OnRentDateTime))
        && salesLine)
        {
            rentalDateTimes = salesLine.RORRentalDateTimesHost::rentalDateTimes();
        }
    
        if (rentalDateTimes)
        {
            onRentDateTime  = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingStart()));
        }
    
        return onRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLineComapnyId</Name>
				<Source><![CDATA[
    public CompanyId getPurchLineComapnyId()
    {
        SalesLine           salesLine = SalesLine::findInventTransId(this.SalesInventTransId);
        SalesTable          salesTable = salesLine.salesTable();
        CompanyId           companyId = curext();
    
        if (salesLine && salesTable.InterCompanyDirectDeliveryOrig && salesTable.InterCompanyCompanyId)
        {
            companyId = salesTable.InterCompanyCompanyId;
        }
    
        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    static RORSubrentalReference create(SalesId         _salesId,
                                        InventTransId   _salesInventTransId,
                                        PurchId         _purchId,
                                        InventTransId   _purchInventTransId)
    {
        RORSubrentalReference subrentalReference;
        ;
    
        subrentalReference.SalesId              = _salesId;
        subrentalReference.SalesInventTransId   = _salesInventTransId;
        subrentalReference.PurchId              = _purchId;
        subrentalReference.PurchInventTransId   = _purchInventTransId;
    
        subrentalReference.insert();
    
        return subrentalReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventTransId _salesInventTransId,
                         InventTransId _purchInventTransId)
    {
        RORSubrentalReference subrentalReference;
        ;
    
        select firstonly RecId from subrentalReference
        where subrentalReference.SalesInventTransId == _salesInventTransId
        && subrentalReference.PurchInventTransId == _purchInventTransId;
    
        return (subrentalReference.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurch</Name>
				<Source><![CDATA[
    static boolean existPurch(InventTransId _purchInventTransId)
    {
        RORSubrentalReference subrentalReference;
        ;
    
        select firstonly RecId from subrentalReference
        where subrentalReference.PurchInventTransId == _purchInventTransId;
    
        return (subrentalReference.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSales</Name>
				<Source><![CDATA[
    static boolean existSales(InventTransId _salesInventTransId)
    {
        RORSubrentalReference subrentalReference;
        ;
    
        select firstonly RecId from subrentalReference
        where subrentalReference.SalesInventTransId == _salesInventTransId;
    
        return (subrentalReference.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurch</Name>
				<Source><![CDATA[
    static RORSubrentalReference findPurch(InventTransId _salesInventTransId,
                                           boolean       _update = false )
    {
        RORSubrentalReference subrentalReference;
        ;
    
        if (_update)
        {
            subrentalReference.selectForUpdate(_update);
        }
    
        select firstonly subrentalReference
        where subrentalReference.SalesInventTransId == _salesInventTransId;
    
        return subrentalReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSales</Name>
				<Source><![CDATA[
    static RORSubrentalReference findSales(InventTransId            _purchInventTransId,
                                           RORRentalDateTimes       _rentalDateTimes,
                                           RORRentalDateTimeType    _rentalDateTimeType,
                                           boolean                  _update = false )
    {
        RORSubrentalReference   subrentalReference;
        RORRentalDateTimes      rentalDateTimes;
        SalesLine               salesLine;
        int                     fieldId = RORRentalDateTimes::dateTimeType2FieldId(_rentalDateTimeType);
        ;
    
        if (_update)
        {
            subrentalReference.selectForUpdate(_update);
        }
    
        select firstonly subrentalReference
        where subrentalReference.PurchInventTransId == _purchInventTransId
            exists join salesLine
            where salesLine.InventTransId == subrentalReference.SalesInventTransId
                exists join rentalDateTimes
                where  rentalDateTimes.RefTableId == salesLine.TableId
                && rentalDateTimes.RefRecId == salesLine.RecId
                && rentalDateTimes.(fieldId) == _rentalDateTimes.(fieldId);
    
        return subrentalReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleSubRentals</Name>
				<Source><![CDATA[
    public static boolean multipleSubRentals(SalesidBase _salesId)
    {
        boolean               ret;
        PurchIdBase           purchId;
        ;
    
        purchId = (select firstonly RORSubRentalReference where RORSubRentalReference.SalesId == _salesId).PurchId;
    
        if (purchId)
        {
            ret = (select firstonly RORSubRentalReference
                    where RORSubRentalReference.SalesId == _salesId
                       && RORSubRentalReference.PurchId != purchId).RecId != 0;
    
    
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DNRDynaRent</ConfigurationKey>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<FormRef>RORSubrentalReference</FormRef>
	<Label>@SYS24659</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>PurchId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<PrimaryIndex>SalesPurchTransIdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchInventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchInventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchDates</Name>
			<Label>@DNR6</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayPurchOnRentDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayPurchOffRentDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesDates</Name>
			<Label>@DNR6</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displaySalesOnRentDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displaySalesOffRentDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<Label>@DNR1715</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<Label>@DNR10</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesPurchTransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchInventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesInventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOriginPurch</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOriginPurch</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchInventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>PurchInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOriginSales</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOriginSales</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesInventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>SalesInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchInventTransId</Name>
					<Field>PurchInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesInventTransId</Name>
					<Field>SalesInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>