<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DNRCalendarDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DNRCalendarDate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DNRCalendarDate find(DNRCalendarId _calendarId, TransDate  _transDate, boolean  _forUpdate = false)
    {
        DNRCalendarDate workCalendarDate;

        if(_calendarId)
        {
            workCalendarDate.selectForUpdate(_forUpdate);

            select firstonly workCalendarDate
            where workCalendarDate.CalendarId   == _calendarId 
            &&    workCalendarDate.TransDate    == _transDate;
        }

        return workCalendarDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateDayName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display DateDayName dateDayName()
    {
        return dayName(dayOfWk(this.TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display MonthName monthName()
    {
        return mthName(mthOfYr(this.TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        this.cleanStateCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        this.cleanStateCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>week</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display Week week()
    {
        return wkOfYr(this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateOpen</Name>
				<Source><![CDATA[
    public static boolean isDateOpen(DNRCalendarId _calendarId, TransDate  _transDate)
    {
        DNRWorkCalendar    workCalendar = new DNRWorkCalendar(_calendarId, _transDate);

        if (!workCalendar.isValid())
        {
            return true;
        }

        return workCalendar.workTimeControl() == WorkTimeControl::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDefinedSeconds</Name>
				<Source><![CDATA[
    public static Seconds calcDefinedSeconds(DNRCalendarId  _calendar,
                                            TransDate       _transDate,
                                            Seconds         _fromTime         = maxInt(),
                                            Seconds         _toTime           = 0,
                                            boolean         _useEffectivity   = true,
                                            boolean         _throwIfError     = true)
    {
        DNRCalendarDateLine     workCalendarDateLine;
        Seconds                 seconds;

        while select workCalendarDateLine
        where workCalendarDateLine.CalendarId   == DNRWorkCalendar::defined(_calendar, _transDate, _throwIfError)
        &&    workCalendarDateLine.TransDate   == _transDate
        {
            workCalendarDateLine.FromTime  = workCalendarDateLine.FromTime < _fromTime     ? _fromTime
                : workCalendarDateLine.FromTime;
            workCalendarDateLine.ToTime    = workCalendarDateLine.ToTime   > _toTime
                ? _toTime
                : workCalendarDateLine.ToTime;

            if (workCalendarDateLine.FromTime < workCalendarDateLine.ToTime)
            {
                seconds += real2int(workCalendarDateLine.capacity(100, _useEffectivity));
            }
        }

        return seconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSkipStatementValidation", "Cannot use skip method without altering functional behavior")]
    public void update()
    {
        DNRCalendarDateLine    workCalendarDateLine;

        ttsbegin;

        super();

        if (this.WorkTimeControl != WorkTimeControl::Open)
        {
            delete_from workCalendarDateLine
            where workCalendarDateLine.CalendarId   == this.CalendarId   
            &&    workCalendarDateLine.TransDate    == this.TransDate;
        }

        ttscommit;

        this.cleanStateCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanStateCache</Name>
				<Source><![CDATA[
    private void cleanStateCache()
    {
        SysGlobalCache cache = appl.globalCache();
        cache.clear(tableStr(DNRCalendarDate));

        DNRWorkCalendarSched::invalidateGlobalCacheScope();
        DNRWorkingTimes::invalidateGlobalCacheScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORfind</Name>
				<Source><![CDATA[
    public static DNRCalendarDate RORfind(DNRCalendarId _calendarId, TransDate _transDate,  boolean _forUpdate = false)
    {
        DNRCalendarDate    workCalendarDate;
        DNRCalendarTable   workCalendarTable;
        DNRCalendarId      calendarIdBase;
    
        workCalendarDate.selectForUpdate(_forUpdate);
    
        if (_calendarId)
        {
            select firstonly workCalendarDate
            where workCalendarDate.CalendarId == _calendarId
            &&    workCalendarDate.TransDate  == _transDate;
    
            if (!workCalendarDate)
            {
                select BasicCalendarId from workCalendarTable
                where workCalendarTable.CalendarId == _calendarId;
    
                calendarIdBase = workCalendarTable.BasicCalendarId;
    
                if (calendarIdBase && calendarIdBase != _calendarId)
                {
                    workCalendarDate = DNRCalendarDate::RORfind(calendarIdBase, _transDate);
                }
            }
        }
    
        return workCalendarDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalcDefinedHoursCacheKey</Name>
				<Source><![CDATA[
    public static str getCalcDefinedHoursCacheKey(DNRCalendarId    _calendar,
                                                  TransDate        _transDate,
                                                  boolean          _useEffectivity)
    {
        str     cacheKey;

        cacheKey = strFmt("%1-%2-%3", _calendar,
                                      _transDate,
                                      _useEffectivity);

        return cacheKey;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS7332</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>CalendarId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CalendarDateIdx</ClusteredIndex>
	<PrimaryIndex>CalendarDateIdx</PrimaryIndex>
	<ReplacementKey>CalendarDateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTimeControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DNRCalendarId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@SYS27939</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTimeControl</Name>
			<EnumType>WorkTimeControl</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CalendarDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CalendarId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DNRCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>