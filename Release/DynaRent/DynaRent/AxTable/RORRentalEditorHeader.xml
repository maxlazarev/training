<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalEditorHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RORRentalEditorHeader extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOnOffRentRange</Name>
				<Source><![CDATA[
    private boolean checkOnOffRentRange(FieldId _fieldId)
    {
        boolean ret = true;
        RORRentalDateTimes rentalDateTimes = this.salesPurchLine().RORRentalDateTimesHost::rentalDateTimes();
        FieldId onRentFieldId, expectedOffRentFieldId, offRentFieldId;
    
        [onRentFieldId, offRentFieldId, expectedOffRentFieldId] = RORRentalDateTimes::getPeriodFieldIds();
    
        switch (_fieldId)
        {
            case fieldNum(RORRentalEditorHeader, EffectiveDateTimeFrom) :
                if(rentalDateTimes && this.EffectiveDateTimeFrom)
                {
                    if(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.EffectiveDateTimeFrom, DateTimeUtil::getUserPreferredTimeZone())) == DateTimeUtil::date(rentalDateTimes.OnRentDateTime))
                    {
                        ret = checkFailed(strFmt("@DNR:Field1SameAsField2", "@DNR1035", "@DNR90"));
                    }
                    else if(this.EffectiveDateTimeFrom < rentalDateTimes.(onRentFieldId))
                    {
                        ret = checkFailed(strFmt("@DNR6883", "@DNR1035", "@DNR90"));
                    }
                }
                break;
    
            case fieldNum(RORRentalEditorHeader, EffectiveDateTimeTo) :
                if(rentalDateTimes && this.EffectiveDateTimeTo)
                {
                    if(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.EffectiveDateTimeTo, DateTimeUtil::getUserPreferredTimeZone())) == DateTimeUtil::date(rentalDateTimes.OffRentDateTime))
                    {
                        ret = checkFailed(strFmt("@DNR:Field1SameAsField2", "@DNR1432", "@DNR114"));
                    }
                    else
                    {
                        if(rentalDateTimes.getOffRentDateTime(false, true) && this.EffectiveDateTimeTo > rentalDateTimes.(offRentFieldId))
                        {
                            ret = checkFailed(strFmt("@DNR6884", "@DNR1432", "@DNR114"));
                        }

                        if(this.EffectiveDateTimeTo < rentalDateTimes.(onRentFieldId))
                        {
                            ret = checkFailed(strFmt("@DNR6883", "@DNR1432", "@DNR90"));
                        }
                    }
                }
                break;

            default:
                // Do nothing
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLineStatus</Name>
				<Source><![CDATA[
    display ROROrderLineStatus displayLineStatus()
    {
        return this.salesPurchLine().RORdisplayLineStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningText</Name>
				<Source><![CDATA[
    public InfologText getWarningText()
    {
        InfologText             ret;
        Common                  common = this.salesPurchLine();
        INVInvoicePeriodHost    periodHost = common;
        ;
    
        if (periodHost
        && periodHost.INVInvoicePeriodHost::checkIsInvoicedPeriodInRange(this.EffectiveDateTimeFrom, this.EffectiveDateTimeTo))
        {
            ret = "@DNR8259";
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        TransDateTime   effectivityTransDateTime;
    
        super(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(RORRentalEditorHeader, EffectiveDateTimeFrom),
                 fieldNum(RORRentalEditorHeader, EffectiveDateTimeTo) :
                effectivityTransDateTime = this.(_fieldId);
                this.(_fieldId) = this.roundEffectivityDateTime(this.(_fieldId), _fieldId);
    
                if (effectivityTransDateTime != this.(_fieldId))
                {
                    this.validateField(_fieldId);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundEffectivityDateTime</Name>
				<Source><![CDATA[
    private TransDateTime roundEffectivityDateTime(TransDateTime _effectivityTransDateTime, FieldId _fieldId = 0)
    {
        TransDateTime       effectivityTransDateTime = _effectivityTransDateTime;
        TransDate           effectivityDateWithTimeZone;
        Timezone            userTimeZone = DateTimeUtil::getUserPreferredTimeZone();
        Common              common = this.salesPurchLine();
        RORRentalLine       rentalLine = common;
        RORRentalDateTimes  rentalDateTimes = rentalLine.RORRentalDateTimes();
        ;
    
        if (!FINRentalInvoiceProfile::find(rentalLine.INVInvoiceProfileId).isHourlyInvoicing())
        {
            effectivityDateWithTimeZone = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_effectivityTransDateTime, userTimeZone));
            // effectivity in on-rent date
            if (_fieldId
            && _fieldId == fieldNum(RORRentalEditorHeader, EffectiveDateTimeFrom)
                && effectivityDateWithTimeZone == DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingStart())), userTimeZone)))
            {
                effectivityTransDateTime = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingStart()));
            }
            // effectivity in off-rent date
            else if (_fieldId
            && _fieldId == fieldNum(RORRentalEditorHeader, EffectiveDateTimeTo)
                && effectivityDateWithTimeZone == DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd())), userTimeZone)))
            {
                effectivityTransDateTime = rentalDateTimes.(RORRentalDateTimes::dateTimeType2FieldId(RORParameters::dateTimeTypeInvoicingEnd()));
            }
            else if (DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_effectivityTransDateTime, userTimeZone)))
            {
                effectivityTransDateTime = DateTimeUtil::newDateTime(effectivityDateWithTimeZone, 0);
                effectivityTransDateTime = DateTimeUtil::removeTimeZoneOffset(effectivityTransDateTime, userTimeZone);
            }
        }
    
        return effectivityTransDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    public SalesPurchLine salesPurchLine()
    {
        salesPurchLine ret;
    
        switch (this.RefTableId)
        {
            case  tableNum(SalesLine) :
                ret = SalesLine::findRecId(this.RefRecId);
                break;
    
            case  tableNum(SalesQuotationLine) :
                ret = SalesQuotationLine::findRecId(this.RefRecId);
                break;
    
            case tableNum(PurchLine):
                ret = PurchLine::findRecId(this.RefRecId);
                break;
    
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
    
        switch (_fieldIdToCheck)
        {
            case fieldNum(RORRentalEditorHeader, EffectiveDateTimeFrom),
                 fieldNum(RORRentalEditorHeader, EffectiveDateTimeTo) :
                if (ret)
                {
                    RORRentalEditorLine rentalEditorLine;
                    SalesLine salesLine;

                    select firstonly RecId from rentalEditorLine
                    where rentalEditorLine.ParmId == this.ParmId
                    &&    rentalEditorLine.RefTableId == this.RefTableId
                    &&    rentalEditorLine.MainKitReference == this.RefRecId
                        exists join salesLine
                        where salesLine.TableId == rentalEditorLine.RefTableId
                        &&    salesLine.RecId == rentalEditorLine.RefRecId
                        &&    salesLine.INVInvoiceProfileId != rentalEditorLine.INVInvoiceProfileId;

                    if (rentalEditorLine.RecId)
                    {
                        ret = checkFailed("@DNR:ErrorChangingInvoiceProfileWithDateEffectivity");
                    }
                }

                if (ret && this.EffectiveDateTimeTo && this.EffectiveDateTimeFrom > this.EffectiveDateTimeTo)
                {
                    ret = checkFailed("@DNR6764");
                }
    
                if (ret && this.EffectiveDateTimeTo && this.EffectiveDateTimeFrom == this.EffectiveDateTimeTo)
                {
                    ret = checkFailed("@DNR8146");
                }
    
                if (ret)
                {
                    ret = this.checkOnOffRentRange(_fieldIdToCheck);
                }
                
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR7413</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>HeaderId</TitleField1>
	<TitleField2>SessionNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<PrimaryIndex>RentalEditorHeaderIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTimeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTimeTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HeaderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceCalcBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsurancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsureRentalStops</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnTransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SessionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EffectivityDates</Name>
			<Label>@DNR6336</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTimeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTimeTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Insurance</Name>
			<Label>@SYS67403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InsuranceCalcBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsurancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsureRentalStops</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Line</Name>
			<Label>@SYS15449</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayLineStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS69996</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HeaderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnTransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS112248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Session</Name>
			<Label>@SYS7115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SessionNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<HelpText>@SYS6734</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveDateTimeFrom</Name>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@DNR1035</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveDateTimeTo</Name>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@DNR1432</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HeaderId</Name>
			<ExtendedDataType>RORRentalEditorHeaderId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InsuranceCalcBasis</Name>
			<EnumType>RORInsuranceCalcBasis</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InsurancePercentage</Name>
			<ExtendedDataType>RORInsurancePercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InsureRentalStops</Name>
			<ExtendedDataType>RORInsureRentalStops</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReturnTransportPrice</Name>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<HelpText>@SYS1174</HelpText>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SessionNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>JournalSessionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransportPrice</Name>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<HelpText>@SYS1174</HelpText>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WarrantyPrice</Name>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<HelpText>@SYS1174</HelpText>
			<Label>@SYS11770</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RentalEditorHeaderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HeaderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefTableRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RentalEditorHeaderGlobalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HeaderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesQuotationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>