<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WPPResourceTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WPPResourceTable extends common
{
    
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(WPPResourceId _resourceId)
    {
        return _resourceId && (select firstonly RecId from WPPResourceTable
                               where WPPResourceTable.ResourceId == _resourceId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WPPResourceTable find(WPPResourceId _resourceId, boolean _forUpdate = false)
    {
        WPPResourceTable resourceTable;

        if(_resourceId)
        {
            resourceTable.selectForUpdate(_forUpdate);

            select firstonly resourceTable
            where resourceTable.ResourceId == _resourceId;
        }

        return resourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRelationAccountName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Name displayRelationAccountName()
    {

        switch(this.ResourceCategory)
        {
            case WPPResourceCategory::BusinessObject:
                return BOBObjectTable::findObjectId(this.RelationAccount).Name;

            case WPPResourceCategory::HumanResource:
                return HcmWorker::findByPersonnelNumber(this.RelationAccount).name();

            case WPPResourceCategory::WorkLocation:
                return RORVenueTable::find(this.RelationAccount).Name;

            case WPPResourceCategory::Vendor:
                return DirPartyTable::find(this.RelationAccount).Name;

            default : 
                return '';

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if(!this.RelationAccount
        && (this.ResourceCategory == WPPResourceCategory::BusinessObject
        ||  this.ResourceCategory == WPPResourceCategory::HumanResource
        ||  this.ResourceCategory == WPPResourceCategory::WorkLocation))
        {
            ret = checkFailed(strFmt('%1 must be specified for category %2', fieldPName(WPPResourceTable, RelationAccount), this.ResourceCategory)); //TODO: Label
        }

        if(ret && this.ResourceCategory == WPPResourceCategory::BusinessObject && this.RelationAccount != this.orig().RelationAccount)
        {
            ret = this.checkObjectId(this.IsIndividualResource ? WrkCtrGroupWrkCtr::WrkCtr : WrkCtrGroupWrkCtr::WrkCtrGroup);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkObjectId</Name>
				<Source><![CDATA[
    public boolean checkObjectId(WrkCtrGroupWrkCtr _resourceType)
    {
        boolean             ret = true;
        BOBObjectTable      objectTable;
        BOBObjectView       objectView;
        WPPResourceTable    resourceTable;
        boolean             validate;
    
        if (_resourceType == WrkCtrGroupWrkCtr::WrkCtr)
        {
            if (this.ResourceCategory == WPPResourceCategory::BusinessObject && this.RelationAccount)
            {
                validate = true;
    
                select firstOnly RecId, Category from objectTable
                where objectTable.ObjectId == this.RelationAccount
                    join FirstOnRentDate, LastOnRentDate, PhysicalOwner from objectView
                    where objectView.ObjectId == objectTable.ObjectId
                        outer join RecId, ResourceId from resourceTable
                        where resourceTable.RelationAccount   == objectView.ObjectId
                        &&    resourceTable.ResourceCategory  == WPPResourceCategory::BusinessObject
                        &&    resourceTable.RecId         != this. RecId;
            }
        }
        else
        {
            if (this.RecId)
            {
                validate = true;
    
                select firstOnly RecId, Category from objectTable
                where objectTable.WPPResourceGroupRecId == this.RecId
                    join FirstOnRentDate, LastOnRentDate, PhysicalOwner from objectView
                    where objectView.ObjectId == objectTable.ObjectId
                        outer join RecId, ResourceId from resourceTable
                        where resourceTable.RecId == objectTable.WPPResourceGroupRecId
                        &&    resourceTable.RecId != this.RecId;
            }
        }
    
        if (validate)
        {
            if (!objectTable)
            {
                ret = checkFailed(strFmt("@DNR8222", this.RelationAccount));
            }
    
            if (objectTable
            && objectTable.Category != BOBObjectCategory::Rental
            && objectTable.Category != BOBObjectCategory::SubRental)
            {
                ret = checkFailed(strFmt("@DNR8223", BOBObjectCategory::Rental, BOBObjectCategory::SubRental));
            }
    
            if (objectView.FirstOnRentDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = checkFailed(strFmt("@DNR8221", this.RelationAccount, fieldId2pname(tableNum(BOBObjectView), fieldNum(BOBObjectView, FirstOnRentDate)), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            }
    
            if (objectView.LastOnRentDate && objectView.LastOnRentDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = checkFailed(strFmt("@DNR8225", this.RelationAccount, fieldId2pname(tableNum(BOBObjectView), fieldNum(BOBObjectView, LastOnRentDate)), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            }
    
            if (resourceTable)
            {
                ret = checkFailed(strFmt("@DNR8224", this.RelationAccount, resourceTable.ResourceId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    static WPPResourceTable findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        WPPResourceTable resourceTable;

        resourceTable.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly resourceTable
            where resourceTable.RecId == _recId;
        }

        return resourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.AutoGenerateJourTrans = WPPParameters::find().AutoGenerateJourTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBOBObjectId</Name>
				<Source><![CDATA[
    public static void lookupBOBObjectId(FormStringControl _stringControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(BOBObjectTable), _stringControl);
        sysTableLookup.addLookupfield(fieldNum(BOBObjectTable, ObjectId));
        sysTableLookup.addLookupfield(fieldNum(BOBObjectTable, Name));
        sysTableLookup.addLookupfield(fieldNum(BOBObjectTable, Category));
        sysTableLookup.addLookupfield(fieldNum(BOBObjectTable, InventSerialId));
        sysTableLookup.addLookupfield(fieldNum(BOBObjectTable, RentalTypeId));
        sysTableLookup.addLookupfield(fieldNum(BOBObjectTable, FleetNumber));
    
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(BOBObjectTable));
        queryBuildDataSource.addRange(fieldNum(BOBObjectTable, Category)).value(SysQuery::range(BOBObjectCategory::Rental, BOBObjectCategory::SubRental));
    
        QueryBuildDataSource objectViewQBDS = queryBuildDataSource.addDataSource(tableNum(BOBObjectView));
        objectViewQBDS.addLink(fieldNum(BOBObjectTable, ObjectId), fieldNum(BOBObjectView, ObjectId));
        objectViewQBDS.joinMode(JoinMode::InnerJoin);
        objectViewQBDS.addRange(fieldNum(BOBObjectView, FirstOnRentDate)).value(SysQuery::range(dateNull(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        objectViewQBDS.addRange(fieldNum(BOBObjectView, DataAreaId)).value(strFmt("(%1 == %2) || (%1 >= %3)",
                                                                                  fieldStr(BOBObjectView, LastOnRentDate),
                                                                                  Date2StrXpp(dateNull()),
                                                                                  Date2StrXpp(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
    
        QueryBuildDataSource resourceQBDS = objectViewQBDS.addDataSource(tableNum(WPPResourceTable));
        resourceQBDS.addRange(fieldNum(WPPResourceTable, ResourceCategory)).value(SysQuery::value(WPPResourceCategory::BusinessObject));
        resourceQBDS.addLink(fieldNum(BOBObjectView, ObjectId), fieldNum(WPPResourceTable, RelationAccount));
        resourceQBDS.joinMode(JoinMode::NoExistsJoin);
    
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOBDisplayFleetNumber</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display BOBFleetNumber BOBDisplayFleetNumber()
    {
        if(this.ResourceCategory == WPPResourceCategory::BusinessObject)
        {
            return BOBObjectTable::findObjectId(this.RelationAccount).FleetNumber;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefinedCalendarDatesToTemporaryBuf</Name>
				<Source><![CDATA[
    // <summary>
    // Adds the temporary records to the <c>WPPTmpWorkCalendarDateTime</c> table buffer for all the dates in the
    // specified interval where the resource has defined a calendar.
    // </summary>
    // <param name="_workCalendarDateTime">
    // The temporary table buffer to which to add records.
    // </param>
    // <param name="_fromDateTime">
    // The first date of the interval.
    // </param>
    // <param name="_toDateTime">
    // The last date of the interval.
    // </param>
    public void addDefinedCalendarDatesToTemporaryBuf(WPPTmpWorkCalendarDateTime _workCalendarDateTime,
                                                      TransDateTime              _fromDateTime,
                                                      TransDateTime              _toDateTime)
    {
        WPPTmpWorkCalendarDateTime  workCalendarDateTimeNew;
        WPPResourceCalendarResource resourceCalendarResource;

        // BP deviation documented
        workCalendarDateTimeNew.setTmpData(_workCalendarDateTime);

        _fromDateTime = DateTimeUtil::removeTimeZoneOffset(_fromDateTime, DateTimeUtil::getUserPreferredTimeZone());
        _toDateTime = DateTimeUtil::removeTimeZoneOffset(_toDateTime, DateTimeUtil::getUserPreferredTimeZone());

        // Added calendars to individual resources
        while select validTimeState(_fromDateTime, _toDateTime) CalendarId, ValidFrom, ValidTo from resourceCalendarResource
        order by ValidFrom
        where resourceCalendarResource.ResourceId == this.ResourceId
        {
            workCalendarDateTimeNew.CalendarId    = resourceCalendarResource.CalendarId;
            workCalendarDateTimeNew.TransDateTime = max(_fromDateTime, resourceCalendarResource.ValidFrom);
            workCalendarDateTimeNew.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the calendar for the resource.
    /// </summary>
    /// <param name="_date">
    /// The date for which to change the calendar.
    /// </param>
    /// <param name="_newCalendarId">
    /// The ID of the calendar to which to change.
    /// </param>
    public void changeCalendar(TransDateTime _dateTime, DNRCalendarId   _newCalendarId)
    {
        WPPResourceCalendarResource resourceCalendar;

        if (!DNRCalendarTable::exist(_newCalendarId))
        {
            throw error(strFmt("@SYS112224",_newCalendarId, fieldPName(WPPResourceCalendarResource, CalendarId),tablePName(DNRCalendarTable)));
        }

        _dateTime = DateTimeUtil::applyTimeZoneOffset(_dateTime, DateTimeUtil::getUserPreferredTimeZone());

        if (DateTimeUtil::date(_dateTime) < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            throw error("@SYS301742");
        }

        select firstonly validtimestate(_dateTime) ValidTo from resourceCalendar
        where resourceCalendar.ResourceId == this.ResourceId;

        WPPResourceCalendarResource::changeResourceCalendar(this.ResourceId, _dateTime,  DateTimeUtil::applyTimeZoneOffset(resourceCalendar.ValidTo, DateTimeUtil::getUserPreferredTimeZone()), _newCalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitComboToIndividualResourceTypes</Name>
				<Source><![CDATA[
    public static void limitComboToIndividualResourceTypes(FormComboBoxControl _comboBox)
    {
        DictEnum dictEnum = DictEnum::newFromName(enumStr(WPPResourceCategory));
        
        _comboBox.clear();

        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            WPPResourceCategory value = enum.current();

            if (value != WPPResourceCategory::ResourceGroup)
            {
                _comboBox.add(dictEnum.value2Label(enum2int(value)));
            }
        }

        _comboBox.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupResourceCategory</Name>
				<Source><![CDATA[
    public static void lookupResourceCategory(FormStringControl _ctrl, WPPResourceCategory _resourceCategory)
    {
        Args    args;
        Object  formRun;

        args = new Args();
        args.name(formStr(WPPResourceIdLookUp));
        args.parmObject(_ctrl);
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);
        formRun.parmResourceCategory(true, _resourceCategory);
        formRun.init();

        _ctrl.performFormLookup(formRun as FormRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>WPPResourceTableMainTable</FormRef>
	<Label>@SYS10369</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>ResourceId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ResourceIdx</ClusteredIndex>
	<PrimaryIndex>ResourceIdx</PrimaryIndex>
	<ReplacementKey>ResourceIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsIndividualResource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortingNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoGenerateJourTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelationAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReferenceGroup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourceId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>WPPResourceId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIndividualResource</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS190549</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SortingNumber</Name>
			<ExtendedDataType>SortingNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResourceCategory</Name>
			<EnumType>WPPResourceCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnInventLocationId</Name>
			<ExtendedDataType>RORReturnInventLocationId</ExtendedDataType>
			<Label>@DNR7575</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoGenerateJourTrans</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DNR2271</HelpText>
			<Label>@DNR8680</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RelationAccount</Name>
			<ExtendedDataType>WPPRelationAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourceTypeId</Name>
			<ExtendedDataType>WPPResourceTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegionCalendarId</Name>
			<ExtendedDataType>WPPRegionCalendarId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ResourceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIsInvidualIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ResourceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsIndividualResource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BOBObjectTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOBObjectTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>ObjectId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<ValueStr>WPPResourceCategory::BusinessObject</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RORVenueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RORVenueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>VenueCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<ValueStr>WPPResourceCategory::WorkLocation</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<ValueStr>WPPResourceCategory::HumanResource</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirPartyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationAccount</Name>
					<Field>RelationAccount</Field>
					<RelatedField>PartyNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<ValueStr>WPPResourceCategory::Vendor</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WPPResourceType</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WPPResourceType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceTypeId</Name>
					<Field>ResourceTypeId</Field>
					<RelatedField>ResourceTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ResourceTypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DNRCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DNRCalendarTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RegionCalendarId</Name>
					<Field>RegionCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>