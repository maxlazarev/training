<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FINDimAttributeSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FINDimAttributeSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editDimensionAttributeName</Name>
				<Source><![CDATA[
    public edit Name editDimensionAttributeName(boolean _set, Name _name)
    {
        if (_set)
        {
            this.DimensionAttribute = DimensionAttribute::findByLocalizedName(_name).RecId;
        }
    
        return DimensionAttribute::find(this.DimensionAttribute).localizedName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRefFieldName</Name>
				<Source><![CDATA[
    client server edit RefFieldName editRefFieldName(boolean _set, FieldName _fieldName)
    {
        FieldName       ret;
        SqlDictionary   sqlDictionary;
        ;
    
        if (_set)
        {
            if (_fieldName)
            {
                if (this.RefTableId)
                {
                    RefFieldId refFieldId = fieldName2Id(this.RefTableId, _fieldName);
    
                    if (refFieldId)
                    {
                        this.RefFieldId = refFieldId;
                        ret = _fieldName;
                    }
                    else
                    {
                        warning(strFmt("@SYS75684", _fieldName, tableId2name(this.RefTableId)));
                    }
                }
                else
                {
                    this.RefFieldId = 0;
                    warning(strFmt("@DNR6876", fieldPName(FINDimAttributeSetup, RefTableId)));
                }
            }
            else
            {
                this.RefFieldId = 0;
            }
        }
        else if (this.RefTableId && this.RefFieldId)
        {
            ret = fieldId2Name(this.RefTableId, this.RefFieldId);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRefTableName</Name>
				<Source><![CDATA[
    public edit RefTableName editRefTableName(boolean _set, RefTableName _tableName)
    {
        RefTableName ret;
        RefTableId  tableId;
        ;
    
        if (_set)
        {
            if (_tableName)
            {
                tableId = tableName2id(_tableName);
    
                if (tableId)
                {
                    if (FINDimValueController::getDimensionableTableIds().in(tableId))
                    {
                        this.RefTableId = tableId;
                        ret = _tableName;
                    }
                    else
                    {
                        warning(strFmt("@DNR926", classStr(FINDimValueController), _tableName));
                    }
                }
                else
                {
                    warning(strFmt("@SYS135210", _tableName));
                }
            }
            else
            {
                this.RefTableId = 0;
            }
        }
        else if (this.RefTableId)
        {
            ret = tableId2Name(this.RefTableId);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
    
        if (ret)
        {
            switch(_fieldIdToCheck)
            {
                case fieldNum(FINDimAttributeSetup, RefTableId):
                    if (this.RefTableId && !FINDimValueController::getDimensionableTableIds().in(this.RefTableId))
                    {
                        ret = checkFailed(strFmt("@DNR926",
                                                 classStr(FINDimValueController),
                                                 tableId2name(this.RefTableId)));
                    }
                    break;
    
                case fieldNum(FINDimAttributeSetup, RefFieldId):
                    if (this.RefFieldId)
                    {
                        if (this.RefTableId)
                        {
                            RefTableName refTableName = tableId2Name(this.RefTableId);
                            RefFieldName refFieldName = fieldId2name(this.RefTableId, this.RefFieldId);

                            if (!SysMetaTableMemberNameLookup::validateFieldInTable(refTableName, refFieldName))
                            {
                                ret = checkFailed(strFmt("@SYS75684", refFieldName, refTableName));
                            }
                        }
                        else
                        {
                            ret = checkFailed(strFmt("@DNR6876", fieldPName(FINDimAttributeSetup, RefTableId)));
                        }
                    }
                    break;

                case fieldNum(FINDimAttributeSetup, RefMethodName):
                    if (this.RefMethodName)
                    {
                        if (this.RefTableId)
                        {
                            if (strStartsWith(this.RefMethodName, 'find') || strStartsWith(this.RefMethodName, 'ref'))
                            {
                                if (!new SysDictClass(classNum(FINDimValueController)).hasObjectMethod(this.RefMethodName))
                                {
                                    DictTable dictTable = new SysDictTable(this.RefTableId);
                                    FINDimValueController controller = FINDimValueController::construct(dictTable.makeRecord());
                                    
                                    if (!new SysDictClass(classIdGet(controller)).hasObjectMethod(this.RefMethodName))
                                    {
                                        ret = checkFailed(strFmt("@SYS73696", classId2Name(classIdGet(controller)), this.RefMethodName));
                                    }
                                }                                
                            }
                            else
                            {
                                ret = checkFailed("@DNR6877");
                            }
                        }                        
                        else
                        {
                            ret = checkFailed(strFmt("@DNR6876", fieldPName(FINDimAttributeSetup, RefTableId)));
                        }
                    }                                        
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        ;
    
        if (ret && this.AutoCreate && DimensionAttribute::find(this.DimensionAttribute).Type != DimensionAttributeType::CustomList)
        {
            ret = checkFailed("@DNR6878");
        }
    
        if (ret && this.AutoCreate && !this.RefFieldId)
        {
            ret = checkFailed(strFmt("@DNR1166",
                                     fieldPName(FINDimAttributeSetup, AutoCreate),
                                     fieldPName(FINDimAttributeSetup, RefFieldId)));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTableId</Name>
				<Source><![CDATA[
    public static boolean existTableId(RefTableId _tableId)
    {
        return _tableId && (select firstonly RecId from FINDimAttributeSetup
                            where FINDimAttributeSetup.RefTableId == _tableId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRefFieldName</Name>
				<Source><![CDATA[
    public static void lookupRefFieldName(FormStringControl _ctrl, RefTableId _tableId)
    {
        SysMetaTableMemberNameLookup::lookupFieldsInTable(tableId2Name(_tableId), _ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRefMethodName</Name>
				<Source><![CDATA[
    public static void lookupRefMethodName(FormStringControl _ctrl, RefTableId _tableId)
    {
        TmpTableName    tmpData;
        DictClass       dictClass;
        boolean         subClassFound = false;
        
        #define.ref('ref')
        #define.find('find')        
        #define.newMethod('new')

        void populateLookupData()
        {        
            for(int i = 1; i <= dictClass.objectMethodCnt(); i ++)
            {
                MethodName methodName = dictClass.objectMethod(i);

                if (strStartsWith(methodName, #ref) || strStartsWith(methodName, #find))
                {
                    DictMethod dictMethod = new DictMethod(UtilElementType::ClassInstanceMethod, dictClass.id(), methodName);
                
                    if (dictMethod)
                    {
                        tmpData.clear();
                        tmpData.TableName = methodName;
                        tmpData.DFMTableLabel = tableId2PName(dictMethod.returnId());
                        tmpData.insert();
                    }
                }
            }
        }
        
        if (_tableId)
        {
            DictTable dictTable = new SysDictTable(_tableId);

            if (dictTable)
            {
                dictClass = new DictClass(classNum(FINDimValueController));

                if (dictClass)
                {
                    populateLookupData();

                    // Get the correct FINDimValueController subclass
                    ListEnumerator enumerator = dictClass.extendedBy().getEnumerator();
        
                    while(enumerator.moveNext() && !subClassFound)
                    {
                        ClassId classId = enumerator.current();
                        dictClass = new DictClass(classId);
            
                        if(dictClass)
                        {
                            DictMethod dictMethod = new DictMethod(UtilElementType::ClassInstanceMethod, classId, #newMethod);

                            if(dictMethod && dictMethod.parameterId(1) == _tableId) // The first and only parameter to the 'new' method should be the table type
                            {
                                subClassFound = true;
                            }
                        }
                    }

                    // Get all the find* and ref* methods on the relevant FINDimValueController subclass
                    if(dictClass)
                    {
                        populateLookupData();            
                    }
                }

                // Show lookup
                SysTableLookup lookup = SysTableLookup::newParameters(tableNum(TmpTableName), _ctrl);
                lookup.parmTmpBuffer(tmpData);
                lookup.addLookupfield(fieldNum(TmpTableName, TableName), true);
                lookup.addLookupField(fieldNum(TmpTableName, DFMTableLabel));
                lookup.performFormLookup();
            }
            else
            {
                throw error(strFmt("@SYS31187", _tableId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRefTableName</Name>
				<Source><![CDATA[
    public static void lookupRefTableName(FormStringControl _ctrl)
    {
        SetEnumerator   enumerator;
        TmpTableName    tmpData;
        SysTableLookup  lookup;
        ;
    
        enumerator = FINDimValueController::getDimensionableTableIds().getEnumerator();
    
        while(enumerator.moveNext())
        {
            tmpData.clear();
            tmpData.RefTableId      = enumerator.current();
            tmpData.TableName       = tableId2name(tmpData.RefTableId);
            tmpData.DFMTableLabel   = new SysDictTable(tmpData.RefTableId).label();
            tmpData.insert();
        }
    
        lookup = SysTableLookup::newParameters(tableNum(TmpTableName), _ctrl);        
        lookup.addLookupfield(fieldNum(TmpTableName, TableName), true);
        lookup.addLookupfield(fieldNum(TmpTableName, DFMTableLabel));
        lookup.parmTmpBuffer(tmpData);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7578</DeveloperDocumentation>
	<Label>@DNR6858</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>DimensionAttribute</TitleField1>
	<TitleField2>DimensionValue</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>TableIdAttrIdx</PrimaryIndex>
	<ReplacementKey>TableIdAttrIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoCreate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForceToValueType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidateValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidateValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editRefTableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editDimensionAttributeName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS112248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editRefTableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editRefFieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefMethodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Settings</Name>
			<Label>@SYS37997</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoCreate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForceToValueType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowEdit</Name>
			<HelpText>@DNR5409</HelpText>
			<Label>@SYS40366</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoCreate</Name>
			<HelpText>@DNR5408</HelpText>
			<Label>@DNR717</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionAttribute</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DimensionAttributeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DimensionValue</Name>
			<ExtendedDataType>DimensionValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForceToValueType</Name>
			<HelpText>@DNR1970</HelpText>
			<Label>@DNR1969</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefFieldId</Name>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Label>@DNR718</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefMethodName</Name>
			<ExtendedDataType>MethodName</ExtendedDataType>
			<HelpText>@DNR6860</HelpText>
			<Label>@DNR6859</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidateValue</Name>
			<HelpText>@DNR6879</HelpText>
			<Label>@DNR6880</Label>
			<EnumType>FieldControl</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableIdAttrIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionAttribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionAttribute</Name>
					<Field>DimensionAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>