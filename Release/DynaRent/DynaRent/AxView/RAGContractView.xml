<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAGContractView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAGContractView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>relationName</Name>
				<Source><![CDATA[
    public static server str relationName()
    {
        TableName       viewName                = tableStr(RAGContractView);
        Map             comparisonExpressionMap = SysComputedColumn::comparisionExpressionMap();
        ;
    
        comparisonExpressionMap.insert(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ContractType)),
                SysComputedColumn::comparisonLiteral(1)),
            SysComputedColumn::returnField(viewName, identifierStr(BusRelContractGroup), fieldStr(RAGBusRelContractGroup, Name)));
    
        comparisonExpressionMap.insert(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ContractType)),
                SysComputedColumn::comparisonLiteral(2)),
            SysComputedColumn::returnField(viewName, identifierStr(DirPartyTable), fieldStr(DirPartyTable, Name)));
    
        comparisonExpressionMap.insert(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ContractType)),
                SysComputedColumn::comparisonLiteral(3)),
            SysComputedColumn::returnField(viewName, identifierStr(VenueGroup), fieldStr(RORVenueGroup, Name)));
    
        comparisonExpressionMap.insert(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ContractType)),
                SysComputedColumn::comparisonLiteral(4)),
            SysComputedColumn::returnField(viewName, identifierStr(VenueTable), fieldStr(RORVenueTable, Name)));
    
        // When reference module is Sales then return SalesTable.SalesName
        // When reference module is Purch then return PurchTable.PurchName
        // Else return SalesQuotationTable.QuotationName
        comparisonExpressionMap.insert(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ContractType)),
                SysComputedColumn::comparisonLiteral(7)),
                    SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ReferenceModule)),
                            SysComputedColumn::comparisonLiteral(1)),
                            SysComputedColumn::returnField(viewName, identifierStr(SalesTable), fieldStr(SalesTable, SalesName)),
                                SysComputedColumn::if(
                                    SysComputedColumn::equalExpression(
                                        SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ReferenceModule)),
                                        SysComputedColumn::comparisonLiteral(2)),
                                        SysComputedColumn::returnField(viewName, identifierStr(PurchTable), fieldStr(PurchTable, PurchName)),
                                        SysComputedColumn::returnField(viewName, identifierStr(SalesQuotationTable), fieldStr(SalesQuotationTable, QuotationName)))));
    
        // When reference module is Sales then return SalesLine.Name
        // When reference module is Purch then return PurchLine.Name
        // Else return SalesQuotationLine.Name
        comparisonExpressionMap.insert(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ContractType)),
                SysComputedColumn::comparisonLiteral(8)),
                    SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ReferenceModule)),
                            SysComputedColumn::comparisonLiteral(1)),
                            SysComputedColumn::returnField(viewName, identifierStr(SalesLine), fieldStr(SalesLine, Name)),
                                SysComputedColumn::if(
                                    SysComputedColumn::equalExpression(
                                        SysComputedColumn::comparisonField(viewName, identifierStr(ContractTable), fieldStr(RAGContractTable, ReferenceModule)),
                                        SysComputedColumn::comparisonLiteral(2)),
                                        SysComputedColumn::returnField(viewName, identifierStr(PurchLine), fieldStr(PurchLine, Name)),
                                        SysComputedColumn::returnField(viewName, identifierStr(SalesQuotationLine), fieldStr(SalesQuotationLine, Name)))));
    
        return SysComputedColumn::switch('', comparisonExpressionMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7571</DeveloperDocumentation>
	<Label>@DNR6452</Label>
	<TitleField1>ContractId</TitleField1>
	<TitleField2>ContractType</TitleField2>
	<Query>RAGContractQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceModule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelationAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RentalSubRental</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ContractType</Name>
			<DataField>ContractType</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ContractId</Name>
			<DataField>ContractId</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>FromDate</Name>
			<DataField>FromDate</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>isActive</Name>
			<DataField>isActive</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReferenceModule</Name>
			<DataField>ReferenceModule</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RelationAccount</Name>
			<DataField>RelationAccount</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RentalSubRental</Name>
			<DataField>RentalSubRental</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ToDate</Name>
			<DataField>ToDate</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>RelationName</Name>
			<Label>@SYS28926</Label>
			<ExtendedDataType>Name</ExtendedDataType>
			<ViewMethod>relationName</ViewMethod>
			<StringSize>60</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Status</Name>
			<DataField>Status</DataField>
			<DataSource>ContractTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>