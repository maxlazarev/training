<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOBObjectMaintenanceView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOBObjectMaintenanceView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustWarn</Name>
				<Source><![CDATA[
    public static server str mustWarn()
    {
        // constants
        str systemDate                  = SysComputedColumn::getCurrentDate();
        str emptyNumeric                = SysComputedColumn::comparisonLiteral(0);
        str emptyDate                   = SysComputedColumn::comparisonLiteral(dateNull());
        str timeBased                   = SysComputedColumn::comparisonLiteral(BOBMaintenancePlanType::TimeBased);
        str consumptionBased            = SysComputedColumn::comparisonLiteral(BOBMaintenancePlanType::ConsumptionBased);
        str timeAndConsumptionBased     = SysComputedColumn::comparisonLiteral(BOBMaintenancePlanType::TimeAndConsumptionBased);
        str smallerThanOrEqualTo        = ' <= ';
        str returnValueYes              = '1';
        str returnValueNo               = '0';
    
        // object names
        str viewName                    = identifierStr(BOBObjectMaintenanceView);
        str dataSourceObjMaintPlan      = 'ObjectMaintenancePlan';
        str dataSourceDefaultMaint      = 'DefaultMaintenancePlan';
        str dataSourceCurrentTrans      = 'CurrentMeterTransView';
        str fieldEnableWarning          = SysComputedColumn::comparisonField(viewName, dataSourceObjMaintPlan, fieldStr(BOBObjectMaintenancePlan, EnableWarning));
        str fieldPlanType               = SysComputedColumn::comparisonField(viewName, dataSourceDefaultMaint, fieldStr(BOBDefaultMaintenancePlan, PlanType));
        str fieldNextDate               = SysComputedColumn::comparisonField(viewName, dataSourceObjMaintPlan, fieldStr(BOBObjectMaintenancePlan, NextDate));
        str fieldNextConsumption        = SysComputedColumn::comparisonField(viewName, dataSourceObjMaintPlan, fieldStr(BOBObjectMaintenancePlan, NextConsumption));
        str fieldCurrentConsumption     = SysComputedColumn::comparisonField(viewName, dataSourceCurrentTrans, fieldStr(BOBCurrentMeterTransView, CurrentValue));
        str fieldAdvanceMargin          = SysComputedColumn::comparisonField(viewName, dataSourceObjMaintPlan, fieldStr(BOBObjectMaintenancePlan, AdvanceMargin));
    
        // singular expressions
        str mustWarn                    = SysComputedColumn::notEqualExpression(fieldEnableWarning, emptyNumeric);

        str isTimeBased                 = SysComputedColumn::or2(
                                            SysComputedColumn::equalExpression(fieldPlanType, timeBased),
                                            SysComputedColumn::equalExpression(fieldPlanType, timeAndConsumptionBased));  
        str isConsumptionBased          = SysComputedColumn::or2(
                                            SysComputedColumn::equalExpression(fieldPlanType, consumptionBased),
                                            SysComputedColumn::equalExpression(fieldPlanType, timeAndConsumptionBased));

        str isNextDateFilled            = SysComputedColumn::notEqualExpression(fieldNextDate, emptyDate);
        str isNextConsumptionFilled     = SysComputedColumn::notEqualExpression(fieldNextConsumption, emptyNumeric);
        str isTimeDue                   = SysComputedColumn::compareExpressions(SysComputedColumn::subtract(fieldNextDate, fieldAdvanceMargin), smallerThanOrEqualTo, systemDate);
        str isConsumptionDue            = SysComputedColumn::compareExpressions(SysComputedColumn::subtract(fieldNextConsumption, fieldAdvanceMargin), smallerThanOrEqualTo, fieldCurrentConsumption);
    
        // combined expressions
        str criteriaTimeBased           = SysComputedColumn::and2(SysComputedColumn::and2(isTimeBased, isNextDateFilled), isTimeDue);
        str criteriaConsumptionBased    = SysComputedColumn::and2(SysComputedColumn::and2(isConsumptionBased, isNextConsumptionFilled), isConsumptionDue);
    
        return SysComputedColumn::if(SysComputedColumn::and2(mustWarn, SysComputedColumn::or2(criteriaTimeBased, criteriaConsumptionBased)), returnValueYes, returnValueNo);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7571</DeveloperDocumentation>
	<Label>@DNR7447</Label>
	<TitleField1>ObjectId</TitleField1>
	<TitleField2>MustWarn</TitleField2>
	<Query>BOBObjectMaintenanceQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextConsumption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MeterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MustWarn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentConsumption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PlanCode</Name>
			<DataField>PlanCode</DataField>
			<DataSource>DefaultMaintenancePlan</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PlanType</Name>
			<DataField>PlanType</DataField>
			<DataSource>DefaultMaintenancePlan</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ObjectId</Name>
			<DataField>ObjectId</DataField>
			<DataSource>ObjectMaintenancePlan</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>NextDate</Name>
			<DataField>NextDate</DataField>
			<DataSource>ObjectMaintenancePlan</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>NextConsumption</Name>
			<DataField>NextConsumption</DataField>
			<DataSource>ObjectMaintenancePlan</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MeterId</Name>
			<DataField>MeterId</DataField>
			<DataSource>CurrentMeterTransView</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>MustWarn</Name>
			<HelpText>@DNR7448</HelpText>
			<ViewMethod>mustWarn</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrentConsumption</Name>
			<DataField>CurrentValue</DataField>
			<DataSource>CurrentMeterTransView</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>