<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>INVInvoicePeriodHost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class INVInvoicePeriodHost extends common
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIsInvoicedPeriodInRange</Name>
				<Source><![CDATA[
    public boolean checkIsInvoicedPeriodInRange(TransDateTime _fromDateTime, TransDateTime _toDateTime)
    {
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentNetAmount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display RORCurrentNetAmount displayCurrentNetAmount()
    {
        RORCurrentNetAmount currentNetAmount;
    
        return currentNetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLastInvoicedPeriod</Name>
				<Source><![CDATA[
    public TransDateTime endLastInvoicedPeriod()
    {
        TransDateTime       ret = DateTimeUtil::minValue();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDummyOffRentDateTime</Name>
				<Source><![CDATA[
    private TransDateTime getDummyOffRentDateTime(
        TransDateTime       _onRentDateTime,
        RORNumOfPeriods     _maxNumOfTierPeriods,
        RAGPriceTierPeriod  _tierPeriod,
        CalendarId          _calendarId)
    {
        TransDateTime               dummyOffRentDateTime;
                
        return dummyOffRentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBlockedPeriod</Name>
				<Source><![CDATA[
    public boolean hasBlockedPeriod()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateInvoicePeriods</Name>
				<Source><![CDATA[
    private boolean shouldUpdateInvoicePeriods(INVInvoicePeriodHost _origBuffer)
    {
        boolean updatePeriods = false;
        boolean isKit = this.KitComponentType == RORKitComponentType::Kit || this.KitComponentType == RORKitComponentType::KitComponent;
        boolean canChangePrice = !isKit || this.IsPriceFixed;
        ;
    
        if ((this.Price             != _origBuffer.Price && canChangePrice)
        || (this.LineDisc           != _origBuffer.LineDisc && canChangePrice)
        || (this.LinePercent        != _origBuffer.LinePercent && canChangePrice)
        || this.RentalModeId        != _origBuffer.RentalModeId
        || this.InvoiceProfileId    != _origBuffer.InvoiceProfileId
        || this.RateMultiplierTier  != _origBuffer.RateMultiplierTier
        || this.CalendarId          != _origBuffer.CalendarId
        || this.PriceTimeUnit       != _origBuffer.PriceTimeUnit
        || (this.TableId != tableNum(SalesQuotationLine) && this.IsModified != _origBuffer.IsModified)
        || this.RentQty             != _origBuffer.RentQty)
        {
            updatePeriods = true;
        }
    
        return updatePeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZone</Name>
				<Source><![CDATA[
    public Timezone timeZone()
    {
        return this.RORTimeZoneSite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicePeriods</Name>
				<Source><![CDATA[
    public void updateInvoicePeriods(
        //Time in GMT
        TransDateTime           _effectiveDateTimeFrom,
        TransDateTime           _effectiveDateTimeTo,
        RORRentalDateTimes      _rentalDateTimes,
        INVInvoicePeriodHost    _origBuffer)
    {
        
        
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalcMuliplierOnCreation</Name>
				<Source><![CDATA[
    public static boolean canCalcMuliplierOnCreation(TableId _tableId, RecId _recId, boolean _manualRecalculation = false)
    {
        INVInvoicePeriodHost    periodHost;
        InventTransId           inventTransId;
    
        switch (_tableId)
        {
            case tableNum(SalesLine) :
                SalesLine salesLine = SalesLine::findRecId(_recId);
                inventTransId = salesLine.InventTransId;
                periodHost = salesLine;
                break;
    
            case tableNum(SalesQuotationLine) :
                SalesQuotationLine salesQuotationLine = SalesQuotationLine::findRecId(_recId);
                inventTransId = salesQuotationLine.InventTransId;
                periodHost = salesQuotationLine;
                break;
    
            case tableNum(PurchLine) :
                PurchLine purchLine = PurchLine::findRecId(_recId);
                inventTransId = purchLine.InventTransId;  
                periodHost = purchLine;
                break;
    
            case tableNum(RORRentalEditorLine) :
                RORRentalEditorLine rentalEditorLine = RORRentalEditorLine::findRecId(_recId);
    
                if (rentalEditorLine.TradeType != RORTradeType::SalesPurch)
                {
                    periodHost = rentalEditorLine;
                }
                else if (rentalEditorLine.LineType == RORLineType::Transport)
                {
                    rentalEditorLine = rentalEditorLine.RORGetParentLine();
                    periodHost = rentalEditorLine;
                }
                break;
        }
    
        return (periodHost
            && (periodHost.TradeType !=  RORTradeType::SalesPurch || !inventTransId)
            && FINRentalInvoiceProfile::find(periodHost.InvoiceProfileId).PriceTierMultiplierCalcMethod == INVPriceTierMultiplierCalcMethod::Creating);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalcRangeTierMuliplier</Name>
				<Source><![CDATA[
    public static boolean canCalcRangeTierMuliplier(TableId _tableId, RecId _recId, boolean _manualRecalculation = false)
    {
        SalesLine               salesLine;
        RORRentalEditorLine     rentalEditorLine;
        INVInvoicePeriodHost    periodHost;
        RORRentalLine           rentalLine;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        BOBRentalTrans          rentalTrans;
        InventTransId           inventTransId;
        boolean                 ret;
        FINRentalInvoiceProfile     invoiceProfile;
        ;
    
        switch (_tableId)
        {
            case tableNum(SalesLine) :
                salesLine = SalesLine::findRecId(_recId);
                inventTransId = salesLine.InventTransId;
                rentalLine = salesLine;
    
                if (salesLine.RORLineType == RORLineType::Transport)
                {
                    inventTransId = '';
                    salesLine = salesLine.RORGetParentLine();
                }
    
                periodHost = salesLine;
                break;
    
            case tableNum(RORRentalEditorLine) :
                rentalEditorLine = RORRentalEditorLine::findRecId(_recId);
                rentalLine = rentalEditorLine;
    
                if (rentalEditorLine.TradeType != RORTradeType::SalesPurch)
                {
                    periodHost = rentalEditorLine;
                }
                else if (rentalEditorLine.LineType == RORLineType::Transport)
                {
                    rentalEditorLine = rentalEditorLine.RORGetParentLine();
                    periodHost = rentalEditorLine;
                }
                break;
        }
    
        if (periodHost
        && (periodHost.TradeType !=  RORTradeType::SalesPurch || !inventTransId))
        {
            invoiceProfile = FINRentalInvoiceProfile::find(periodHost.InvoiceProfileId);
    
            if (invoiceProfile.MultiplierPeriods == INVMultiplierPeriods::RangeCalendar)
            {
                if (!inventTransId || _manualRecalculation)
                // Transport or RLE
                {
                    ret = true;
                }
                else
                {
                    if (_tableId == tableNum(SalesLine))
                    {
                        ret = !rentalLine.RORRentalLine::isLineConfirmed();
                    }
                    else
                    {
                        select firstonly RecId from rentalTrans
                        where rentalTrans.SubStatus > BOBRentalSubStatus::Confirmed
                            exists join inventTrans
                            where inventTrans.RecId == rentalTrans.InventTransRecId
                                join TableId from inventTransOrigin
                                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                                && inventTransOrigin.InventTransId == inventTransId;
    
                        if (!rentalTrans.RecId)
                        {
                            ret = true;
                        }
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveInvoicePeriods</Name>
				<Source><![CDATA[
    public static boolean canHaveInvoicePeriods(TableId _tableId)
    {
        return (_tableId == tableNum(SalesLine)
        || _tableId == tableNum(PurchLine)
        || _tableId == tableNum(SalesParmLine)
        || _tableId == tableNum(SalesQuotationLine)
        || _tableId == tableNum(VendInvoiceInfoLine)
        || _tableId == tableNum(CustConfirmTrans)
        || _tableId == tableNum(CustInvoiceTrans)
        || _tableId == tableNum(PurchLineHistory)
        || _tableId == tableNum(VendInvoiceTrans)
       );
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoicePeriodUnblocked</Name>
				<Source><![CDATA[
    public boolean checkInvoicePeriodUnblocked()
    {
        boolean                     ret;
       /* InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;
        BOBRentalTrans              rentalTrans;
        SalesLine                   salesLine;
        ;
        
        if (this.tableId == tableNum(SalesLine))
        {
            salesLine = this;
            select firstonly RecId from rentalTrans
                where rentalTrans.SubStatus == BOBRentalSubStatus::Invoiced
                    exists join inventTrans
                    where inventTrans.RecId == rentalTrans.InventTransRecId
                        join TableId from inventTransOrigin
                        where inventTransOrigin.RecId             == inventTrans.InventTransOrigin
                        &&    inventTransOrigin.ReferenceId       == salesLine.SalesId
                        &&    inventTransOrigin.InventTransId     == salesLine.InventTransId
                        &&    inventTransOrigin.ReferenceCategory == InventTransType::Sales;

            INVInvoiceProfile invoiceProfile = INVInvoiceProfile::find(salesLine.INVInvoiceProfileId);
            if (rentalTrans 
            && (INVInvoiceProfile::mustDoOldRentalInvoicing() && INVINvoicePeriod::existUnblockedForInvoicing(salesLine.TableId, salesLine.RecId, salesLine.RORTimeZoneSite(), invoiceProfile.isHourlyInvoicing())) ||
                (!INVInvoiceProfile::mustDoOldRentalInvoicing() && INVINvoicePeriodHost::existUnblockedForInvoicing(salesLine.TableId, salesLine.RecId, salesLine.RORTimeZoneSite(), invoiceProfile.isHourlyInvoicing())))
            {
                ret = true;
            }
        }*/
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnblockedForInvoicing</Name>
				<Source><![CDATA[
    public static boolean existUnblockedForInvoicing(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        TimeZone    _timeZone,
        boolean     _isHourlyInvoicing = false)
    {
        /*INVInvoicePeriod        invoicePeriod;
        RORParameters           parameters = RORParameters::find();
        TimeOfDay               invoicingBorderPoint = parameters.INVInvoicingBorderTime;
        boolean                 ret = false;
        ROROrderAmendmentLog    amendmentLog;
        
        while select PeriodStartDateTime, PeriodEndDateTime, CalendarId from invoicePeriod
        where invoicePeriod.RefTableId      == _refTableId
        &&    invoicePeriod.RefRecId        == _refRecId
        &&    invoicePeriod.PeriodStatus    == INVPeriodStatus::Uninvoiced
        &&    (invoicePeriod.CalendarId  && invoicePeriod.CalendarId != parameters.RentalStopCalendarId &&
               (!parameters.UseRentalHourRegistration || invoicePeriod.CalendarId != parameters.UnregisteredHourCalendarId))
        {
            if (DateTimeUtil::date(invoicePeriod.PeriodStartDateTime) != DateTimeUtil::date(invoicePeriod.PeriodEndDateTime)
            || _isHourlyInvoicing
            || !parameters.INVUseInvoicingBorderTime
            || DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(invoicePeriod.PeriodEndDateTime, _timeZone)) > invoicingBorderPoint
            // For one day activation
            || (DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(invoicePeriod.PeriodEndDateTime, _timeZone)) == 0 &&
                DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(invoicePeriod.PeriodStartDateTime, _timeZone)) > 0))
            {
                if (invoicePeriod.hasOpenCalendar(_timeZone))
                {
                    select firstonly RecId from amendmentLog
                        where amendmentLog.RefTableId       == _refTableId
                        &&    amendmentLog.RefRecId         == _refRecId
                        &&    amendmentLog.DNRReasonType    == DNRReasonType::BlockedPeriod;

                    if (amendmentLog)
                    {
                        ret = true;
                    }
                }

                if (ret)
                {
                    break;
                }
            }
        }
    
        return ret;
        */
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUninvoicedCreditedForLine</Name>
				<Source><![CDATA[
    public static boolean existUninvoicedCreditedForLine(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        TimeZone    _timeZone,
        boolean     _isHourlyInvoiceing = false)
    {
        boolean ret;
        // Implemented in post even, in Dynarent model
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7511</DeveloperDocumentation>
	<Label>@DNR7435</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CalendarId</Name>
			<ExtendedDataType>CalendarId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>HeaderId</Name>
			<ExtendedDataType>RORHeaderId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventTransId</Name>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvoiceProfileId</Name>
			<ExtendedDataType>INVInvoiceProfileId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsModified</Name>
			<ExtendedDataType>RORIsModified</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsPriceFixed</Name>
			<ExtendedDataType>RORIsPriceFixed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>KitComponentType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RORKitComponentType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineDisc</Name>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LinePercent</Name>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PriceTimeUnit</Name>
			<ExtendedDataType>RORPriceTimeUnit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>RateMultiplierTier</Name>
			<ExtendedDataType>INVRateMultiplierTier</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>RentalModeId</Name>
			<ExtendedDataType>INVRentalModeId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>RentQty</Name>
			<ExtendedDataType>SalesQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TradeType</Name>
			<EnumType>RORTradeType</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>