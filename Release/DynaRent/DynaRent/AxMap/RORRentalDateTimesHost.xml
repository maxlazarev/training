<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RORRentalDateTimesHost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RORRentalDateTimesHost extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateRentalDates</Name>
				<Source><![CDATA[
    public void checkUpdateRentalDates(boolean _updateIfClosed)
    {
        //If there is no RecId it means that rentalDateTimes record is not created yet.
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes))
        && this.RecId
        && this.RORRentalDateTimesHost::isWorksheetTable()
        && this.CalendarId)
        {
            this.RORRentalDateTimesHost::rentalDateTimes(_updateIfClosed).checkDatesAgainstCalendar(this.CalendarId, true, _updateIfClosed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorksheetTable</Name>
				<Source><![CDATA[
    public boolean isWorksheetTable()
    {
        DictTable   dictTable = DictTable::construct(tableId2name(this.TableId));
        boolean     ret;
    
        if(dictTable.tableGroup() == TableGroup::Worksheet
        || dictTable.tableGroup() == TableGroup::WorksheetHeader
        || dictTable.tableGroup() == TableGroup::WorksheetLine)
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedRORRentalDateTimes</Name>
				<Source><![CDATA[
    public void modifiedRORRentalDateTimes(RORRentalDateTimes _origRentalDateTimes, RORRentalDateTimes _newRentalDateTimes, boolean _forceStopTierRangeRecalculation = false)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes))
        && this.HeaderId
        && (this.RORRentalDateTimesHost::isWorksheetTable()
        && _newRentalDateTimes.hostHeadingLineLevel(this.TableId) == HeadingLine::Line))
        {
            FieldId fieldIdRentalDateTime = RORRentalDateTimes::dateTimeType2FieldId(RAGParameters::find().RORLineDateTimeType);

            // Re-execute the Rental contract search if necessary
            if(_origRentalDateTimes.(fieldIdRentalDateTime) != _newRentalDateTimes.(fieldIdRentalDateTime))
            {
                this.setPriceDisc(this.inventDim());                
            }
    
            if (this.TableId == tableNum(PurchLine))
            {
                if (_origRentalDateTimes.OnRentDateTime != _newRentalDateTimes.OnRentDateTime ||
                    (_origRentalDateTimes.OffRentDateTime != _newRentalDateTimes.OffRentDateTime
                    && (_origRentalDateTimes.OffRentDateTime > DateTimeUtil::addYears(DateTimeUtil::minValue(), 1)
                        || _newRentalDateTimes.OffRentDateTime > DateTimeUtil::addYears(DateTimeUtil::minValue(), 1))))
                {
                    BOBObjectManager::changeSubRentalDates(this, _newRentalDateTimes);
                }
            }
    
            if(_newRentalDateTimes.OnRentDateTime           != _origRentalDateTimes.OnRentDateTime
            || _newRentalDateTimes.ExpectedOffRentDateTime  != _origRentalDateTimes.ExpectedOffRentDateTime
            || _newRentalDateTimes.OffRentDateTime          != _origRentalDateTimes.OffRentDateTime)
            {                    
                this.RORRentalLine::BOBSynchRentalTransDateTimes();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rentalDateTimes</Name>
				<Source><![CDATA[
    public RORRentalDateTimes rentalDateTimes(boolean _forUpdate = false)
    {
        return RORRentalDateTimes::findReference(this.TableId, this.RecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RORCheckOffRentDateTimeChange</Name>
				<Source><![CDATA[
    public boolean RORCheckOffRentDateTimeChange(boolean _showWarning = true)
    {
        return this.RORcheckOffRentDateTimeChange(_showWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateTime</Name>
				<Source><![CDATA[
    public boolean validateDateTime(FieldId _fieldId, RORRentalDateTimes _rentalDateTimes)
    {
        INVPeriodStartDateTime          periodStartDateTime;
        INVPeriodEndDateTime            periodEndDateTime;
        INVPeriodExpectedEndDateTime    periodExpectedEndDateTime;
    
        FieldId fieldIdPeriodStartDateTime, fieldIdPeriodEndDateTime, fieldIdPeriodExpectedEndDateTime;
    
        boolean retVal = true;
    
        if (isConfigurationkeyEnabled(configurationKeyNum(RORRentalDateTimes))
        && this.RORRentalDateTimesHost::isWorksheetTable()
        && _rentalDateTimes.hostHeadingLineLevel(this.TableId) == HeadingLine::Line)
        {
            [fieldIdPeriodStartDateTime, fieldIdPeriodEndDateTime, fieldIdPeriodExpectedEndDateTime] = RORRentalDateTimes::getPeriodFieldIds();
            [periodStartDateTime, periodEndDateTime, periodExpectedEndDateTime] = _rentalDateTimes.getRentalPeriodDateTimes(fieldIdPeriodStartDateTime, fieldIdPeriodEndDateTime, fieldIdPeriodExpectedEndDateTime);
    
            // If period start- or end-dates/times have changed, then trigger updates to rental periods table
            switch (_fieldId)
            {                
                case RORRentalDateTimes::dateTimeType2FieldId(RORRentalDateTimeType::OffRent) :
                            retVal = retVal && this.RORcheckOffRentDateTimeChange();
                            break;
    
            }
        }
    
        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DNR7512</DeveloperDocumentation>
	<Label>@DNR6</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CalendarId</Name>
			<ExtendedDataType>CalendarId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>HeaderId</Name>
			<ExtendedDataType>RORHeaderId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsModified</Name>
			<ExtendedDataType>RORIsModified</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>